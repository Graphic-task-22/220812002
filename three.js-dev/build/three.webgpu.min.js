/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
import{Color as e,Vector2 as t,Vector3 as r,Vector4 as s,Matrix2 as i,Matrix3 as n,Matrix4 as o,EventDispatcher as a,MathUtils as u,WebGLCoordinateSystem as l,WebGPUCoordinateSystem as d,ColorManagement as c,SRGBTransfer as h,NoToneMapping as p,StaticDrawUsage as g,InterleavedBuffer as m,InterleavedBufferAttribute as f,DynamicDrawUsage as y,NoColorSpace as x,UnsignedIntType as b,IntType as T,Sphere as _,BackSide as v,Euler as N,CubeReflectionMapping as S,CubeRefractionMapping as R,TangentSpaceNormalMap as A,ObjectSpaceNormalMap as E,InstancedInterleavedBuffer as C,InstancedBufferAttribute as w,DataArrayTexture as M,FloatType as B,FramebufferTexture as F,LinearMipmapLinearFilter as U,DepthTexture as P,Material as I,NormalBlending as L,LineBasicMaterial as D,LineDashedMaterial as V,NoBlending as O,MeshNormalMaterial as G,SRGBColorSpace as k,WebGLCubeRenderTarget as z,BoxGeometry as $,Mesh as W,Scene as H,LinearFilter as j,CubeCamera as q,CubeTexture as X,EquirectangularReflectionMapping as K,EquirectangularRefractionMapping as Y,AddOperation as Q,MixOperation as Z,MultiplyOperation as J,MeshBasicMaterial as ee,MeshLambertMaterial as te,MeshPhongMaterial as re,OrthographicCamera as se,PerspectiveCamera as ie,RenderTarget as ne,CubeUVReflectionMapping as oe,BufferGeometry as ae,BufferAttribute as ue,LinearSRGBColorSpace as le,RGBAFormat as de,HalfFloatType as ce,Texture as he,MeshStandardMaterial as pe,MeshPhysicalMaterial as ge,MeshToonMaterial as me,MeshMatcapMaterial as fe,SpriteMaterial as ye,PointsMaterial as xe,ShadowMaterial as be,Uint32BufferAttribute as Te,Uint16BufferAttribute as _e,arrayNeedsUint32 as ve,DoubleSide as Ne,Camera as Se,DepthStencilFormat as Re,DepthFormat as Ae,UnsignedInt248Type as Ee,UnsignedByteType as Ce,Plane as we,Object3D as Me,LinearMipMapLinearFilter as Be,Float32BufferAttribute as Fe,UVMapping as Ue,LessCompare as Pe,VSMShadowMap as Ie,RGFormat as Le,BasicShadowMap as De,SphereGeometry as Ve,LinearMipmapNearestFilter as Oe,NearestMipmapLinearFilter as Ge,Float16BufferAttribute as ke,REVISION as ze,ArrayCamera as $e,WebXRController as We,RAD2DEG as He,PCFShadowMap as je,Frustum as qe,FrontSide as Xe,DataTexture as Ke,RedIntegerFormat as Ye,RedFormat as Qe,ShortType as Ze,ByteType as Je,UnsignedShortType as et,RGIntegerFormat as tt,RGBIntegerFormat as rt,RGBFormat as st,RGBAIntegerFormat as it,warnOnce as nt,createCanvasElement as ot,ReverseSubtractEquation as at,SubtractEquation as ut,AddEquation as lt,OneMinusDstAlphaFactor as dt,OneMinusDstColorFactor as ct,OneMinusSrcAlphaFactor as ht,OneMinusSrcColorFactor as pt,DstAlphaFactor as gt,DstColorFactor as mt,SrcAlphaSaturateFactor as ft,SrcAlphaFactor as yt,SrcColorFactor as xt,OneFactor as bt,ZeroFactor as Tt,CullFaceNone as _t,CullFaceBack as vt,CullFaceFront as Nt,CustomBlending as St,MultiplyBlending as Rt,SubtractiveBlending as At,AdditiveBlending as Et,NotEqualDepth as Ct,GreaterDepth as wt,GreaterEqualDepth as Mt,EqualDepth as Bt,LessEqualDepth as Ft,LessDepth as Ut,AlwaysDepth as Pt,NeverDepth as It,UnsignedShort4444Type as Lt,UnsignedShort5551Type as Dt,UnsignedInt5999Type as Vt,AlphaFormat as Ot,LuminanceFormat as Gt,LuminanceAlphaFormat as kt,RGB_S3TC_DXT1_Format as zt,RGBA_S3TC_DXT1_Format as $t,RGBA_S3TC_DXT3_Format as Wt,RGBA_S3TC_DXT5_Format as Ht,RGB_PVRTC_4BPPV1_Format as jt,RGB_PVRTC_2BPPV1_Format as qt,RGBA_PVRTC_4BPPV1_Format as Xt,RGBA_PVRTC_2BPPV1_Format as Kt,RGB_ETC1_Format as Yt,RGB_ETC2_Format as Qt,RGBA_ETC2_EAC_Format as Zt,RGBA_ASTC_4x4_Format as Jt,RGBA_ASTC_5x4_Format as er,RGBA_ASTC_5x5_Format as tr,RGBA_ASTC_6x5_Format as rr,RGBA_ASTC_6x6_Format as sr,RGBA_ASTC_8x5_Format as ir,RGBA_ASTC_8x6_Format as nr,RGBA_ASTC_8x8_Format as or,RGBA_ASTC_10x5_Format as ar,RGBA_ASTC_10x6_Format as ur,RGBA_ASTC_10x8_Format as lr,RGBA_ASTC_10x10_Format as dr,RGBA_ASTC_12x10_Format as cr,RGBA_ASTC_12x12_Format as hr,RGBA_BPTC_Format as pr,RED_RGTC1_Format as gr,SIGNED_RED_RGTC1_Format as mr,RED_GREEN_RGTC2_Format as fr,SIGNED_RED_GREEN_RGTC2_Format as yr,MirroredRepeatWrapping as xr,ClampToEdgeWrapping as br,RepeatWrapping as Tr,NearestMipmapNearestFilter as _r,NearestFilter as vr,NotEqualCompare as Nr,GreaterCompare as Sr,GreaterEqualCompare as Rr,EqualCompare as Ar,LessEqualCompare as Er,AlwaysCompare as Cr,NeverCompare as wr,NotEqualStencilFunc as Mr,GreaterStencilFunc as Br,GreaterEqualStencilFunc as Fr,EqualStencilFunc as Ur,LessEqualStencilFunc as Pr,LessStencilFunc as Ir,AlwaysStencilFunc as Lr,NeverStencilFunc as Dr,DecrementWrapStencilOp as Vr,IncrementWrapStencilOp as Or,DecrementStencilOp as Gr,IncrementStencilOp as kr,InvertStencilOp as zr,ReplaceStencilOp as $r,ZeroStencilOp as Wr,KeepStencilOp as Hr,MaxEquation as jr,MinEquation as qr,SpotLight as Xr,PointLight as Kr,DirectionalLight as Yr,RectAreaLight as Qr,AmbientLight as Zr,HemisphereLight as Jr,LightProbe as es,LinearToneMapping as ts,ReinhardToneMapping as rs,CineonToneMapping as ss,ACESFilmicToneMapping as is,AgXToneMapping as ns,NeutralToneMapping as os,Group as as,Loader as us,FileLoader as ls,MaterialLoader as ds,ObjectLoader as cs}from"./three.core.min.js";export{AdditiveAnimationBlendMode,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BasicDepthPacking,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxHelper,BufferGeometryLoader,Cache,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CircleGeometry,Clock,ColorKeyframeTrack,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,Controls,CubeTextureLoader,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceFrontBack,Curve,CurvePath,CustomToneMapping,CylinderGeometry,Cylindrical,Data3DTexture,DataTextureLoader,DataUtils,DefaultLoadingManager,DetachedBindMode,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry,DynamicCopyUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,ExtrudeGeometry,Fog,FogExp2,GLBufferAttribute,GLSL1,GLSL3,GridHelper,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,InstancedBufferGeometry,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,KeyframeTrack,LOD,LatheGeometry,Layers,Light,Line,Line3,LineCurve,LineCurve3,LineLoop,LineSegments,LinearInterpolant,LinearMipMapNearestFilter,LinearTransfer,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,MOUSE,MeshDepthMaterial,MeshDistanceMaterial,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NormalAnimationBlendMode,NumberKeyframeTrack,OctahedronGeometry,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,PCFSoftShadowMap,Path,PlaneGeometry,PlaneHelper,PointLightHelper,Points,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,Quaternion,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RGBADepthPacking,RGBDepthPacking,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGDepthPacking,RawShaderMaterial,Ray,Raycaster,RenderTarget3D,RenderTargetArray,RingGeometry,ShaderMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,Skeleton,SkeletonHelper,SkinnedMesh,Source,Spherical,SphericalHarmonics3,SplineCurve,SpotLightHelper,Sprite,StaticCopyUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,TOUCH,TetrahedronGeometry,TextureLoader,TextureUtils,TimestampQuery,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,VectorKeyframeTrack,VideoFrameTexture,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLRenderTarget,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroSlopeEnding}from"./three.core.min.js";const hs=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class ps{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=hs,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:r,material:s,object:i}=e;if(t={material:this.getMaterialData(s),geometry:{id:r.id,attributes:this.getAttributesData(r.attributes),indexVersion:r.index?r.index.version:null,drawRange:{start:r.drawRange.start,count:r.drawRange.count}},worldMatrix:i.matrixWorld.clone()},i.center&&(t.center=i.center.clone()),i.morphTargetInfluences&&(t.morphTargetInfluences=i.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:r,height:s}=e.context;t.bufferWidth=r,t.bufferHeight=s}this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const r in e){const s=e[r];t[r]={version:s.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.nodes.modelViewMatrix||null!==e.renderer.nodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const r of this.refreshUniforms){const s=e[r];null!=s&&("object"==typeof s&&void 0!==s.clone?!0===s.isTexture?t[r]={id:s.id,version:s.version}:t[r]=s.clone():t[r]=s)}return t}equals(e){const{object:t,material:r,geometry:s}=e,i=this.getRenderObjectData(e);if(!0!==i.worldMatrix.equals(t.matrixWorld))return i.worldMatrix.copy(t.matrixWorld),!1;const n=i.material;for(const e in n){const t=n[e],s=r[e];if(void 0!==t.equals){if(!1===t.equals(s))return t.copy(s),!1}else if(!0===s.isTexture){if(t.id!==s.id||t.version!==s.version)return t.id=s.id,t.version=s.version,!1}else if(t!==s)return n[e]=s,!1}if(n.transmission>0){const{width:t,height:r}=e.context;if(i.bufferWidth!==t||i.bufferHeight!==r)return i.bufferWidth=t,i.bufferHeight=r,!1}const o=i.geometry,a=s.attributes,u=o.attributes,l=Object.keys(u),d=Object.keys(a);if(o.id!==s.id)return o.id=s.id,!1;if(l.length!==d.length)return i.geometry.attributes=this.getAttributesData(a),!1;for(const e of l){const t=u[e],r=a[e];if(void 0===r)return delete u[e],!1;if(t.version!==r.version)return t.version=r.version,!1}const c=s.index,h=o.indexVersion,p=c?c.version:null;if(h!==p)return o.indexVersion=p,!1;if(o.drawRange.start!==s.drawRange.start||o.drawRange.count!==s.drawRange.count)return o.drawRange.start=s.drawRange.start,o.drawRange.count=s.drawRange.count,!1;if(i.morphTargetInfluences){let e=!1;for(let r=0;r<i.morphTargetInfluences.length;r++)i.morphTargetInfluences[r]!==t.morphTargetInfluences[r]&&(e=!0);if(e)return!0}return i.center&&!1===i.center.equals(t.center)?(i.center.copy(t.center),!0):(null!==e.bundle&&(i.version=e.bundle.version),!0)}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e))return!0;const{renderId:r}=t;if(this.renderId!==r)return this.renderId=r,!0;const s=!0===e.object.static,i=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(s||i)return!1;return!0!==this.equals(e)}}function gs(e,t=0){let r=3735928559^t,s=1103547991^t;if(e instanceof Array)for(let t,i=0;i<e.length;i++)t=e[i],r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);else for(let t,i=0;i<e.length;i++)t=e.charCodeAt(i),r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);return r=Math.imul(r^r>>>16,2246822507),r^=Math.imul(s^s>>>13,3266489909),s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(r^r>>>13,3266489909),4294967296*(2097151&s)+(r>>>0)}const ms=e=>gs(e),fs=e=>gs(e),ys=(...e)=>gs(e);function xs(e,t=!1){const r=[];!0===e.isNode&&(r.push(e.id),e=e.getSelf());for(const{property:s,childNode:i}of bs(e))r.push(gs(s.slice(0,-4)),i.getCacheKey(t));return gs(r)}function*bs(e,t=!1){for(const r in e){if(!0===r.startsWith("_"))continue;const s=e[r];if(!0===Array.isArray(s))for(let e=0;e<s.length;e++){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}else if(s&&!0===s.isNode)yield{property:r,childNode:s};else if("object"==typeof s)for(const e in s){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}}}const Ts=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),_s=new WeakMap;function vs(e){return Ts.get(e)}function Ns(e){if(/[iu]?vec\d/.test(e))return e.startsWith("ivec")?Int32Array:e.startsWith("uvec")?Uint32Array:Float32Array;if(/mat\d/.test(e))return Float32Array;if(/float/.test(e))return Float32Array;if(/uint/.test(e))return Uint32Array;if(/int/.test(e))return Int32Array;throw new Error(`THREE.NodeUtils: Unsupported type: ${e}`)}function Ss(e){return/float|int|uint/.test(e)?1:/vec2/.test(e)?2:/vec3/.test(e)?3:/vec4/.test(e)||/mat2/.test(e)?4:/mat3/.test(e)?9:/mat4/.test(e)?16:void console.error("THREE.TSL: Unsupported type:",e)}function Rs(e){if(null==e)return null;const t=typeof e;return!0===e.isNode?"node":"number"===t?"float":"boolean"===t?"bool":"string"===t?"string":"function"===t?"shader":!0===e.isVector2?"vec2":!0===e.isVector3?"vec3":!0===e.isVector4?"vec4":!0===e.isMatrix2?"mat2":!0===e.isMatrix3?"mat3":!0===e.isMatrix4?"mat4":!0===e.isColor?"color":e instanceof ArrayBuffer?"ArrayBuffer":null}function As(a,...u){const l=a?a.slice(-4):void 0;return 1===u.length&&("vec2"===l?u=[u[0],u[0]]:"vec3"===l?u=[u[0],u[0],u[0]]:"vec4"===l&&(u=[u[0],u[0],u[0],u[0]])),"color"===a?new e(...u):"vec2"===l?new t(...u):"vec3"===l?new r(...u):"vec4"===l?new s(...u):"mat2"===l?new i(...u):"mat3"===l?new n(...u):"mat4"===l?new o(...u):"bool"===a?u[0]||!1:"float"===a||"int"===a||"uint"===a?u[0]||0:"string"===a?u[0]||"":"ArrayBuffer"===a?ws(u[0]):null}function Es(e){let t=_s.get(e);return void 0===t&&(t={},_s.set(e,t)),t}function Cs(e){let t="";const r=new Uint8Array(e);for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return btoa(t)}function ws(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0))).buffer}var Ms=Object.freeze({__proto__:null,arrayBufferToBase64:Cs,base64ToArrayBuffer:ws,getCacheKey:xs,getDataFromObject:Es,getLengthFromType:Ss,getNodeChildren:bs,getTypeFromLength:vs,getTypedArrayFromType:Ns,getValueFromType:As,getValueType:Rs,hash:ys,hashArray:fs,hashString:ms});const Bs={VERTEX:"vertex",FRAGMENT:"fragment"},Fs={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},Us={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},Ps={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},Is=["fragment","vertex"],Ls=["setup","analyze","generate"],Ds=[...Is,"compute"],Vs=["x","y","z","w"];let Os=0;class Gs extends a{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=Fs.NONE,this.updateBeforeType=Fs.NONE,this.updateAfterType=Fs.NONE,this.uuid=u.generateUUID(),this.version=0,this.global=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:Os++})}set needsUpdate(e){!0===e&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,Fs.FRAME)}onRenderUpdate(e){return this.onUpdate(e,Fs.RENDER)}onObjectUpdate(e){return this.onUpdate(e,Fs.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of bs(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return!0!==(e=e||this.version!==this._cacheKeyVersion)&&null!==this._cacheKey||(this._cacheKey=ys(xs(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getMemberType(){return"void"}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}setup(e){const t=e.getNodeProperties(this);let r=0;for(const e of this.getChildren())t["node"+r++]=e;return t.outputNode||null}analyze(e){if(1===e.increaseUsage(this)){const t=e.getNodeProperties(this);for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e)}}generate(e,t){const{outputNode:r}=e.getNodeProperties(this);if(r&&!0===r.isNode)return r.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const r=this.getShared(e);if(this!==r)return r.build(e,t);e.addNode(this),e.addChain(this);let s=null;const i=e.getBuildStage();if("setup"===i){this.updateReference(e);const t=e.getNodeProperties(this);if(!0!==t.initialized){t.initialized=!0;const r=this.setup(e),s=r&&!0===r.isNode;for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e);s&&r.build(e),t.outputNode=r}}else if("analyze"===i)this.analyze(e);else if("generate"===i){if(1===this.generate.length){const r=this.getNodeType(e),i=e.getDataFromNode(this);s=i.snippet,void 0===s?(s=this.generate(e)||"",i.snippet=s):void 0!==i.flowCodes&&void 0!==e.context.nodeBlock&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),s=e.format(s,r,t)}else s=this.generate(e,t)||""}return e.removeChain(this),e.addSequentialNode(this),s}getSerializeChildren(){return bs(this)}serialize(e){const t=this.getSerializeChildren(),r={};for(const{property:s,index:i,childNode:n}of t)void 0!==i?(void 0===r[s]&&(r[s]=Number.isInteger(i)?[]:{}),r[s][i]=n.toJSON(e.meta).uuid):r[s]=n.toJSON(e.meta).uuid;Object.keys(r).length>0&&(e.inputNodes=r)}deserialize(e){if(void 0!==e.inputNodes){const t=e.meta.nodes;for(const r in e.inputNodes)if(Array.isArray(e.inputNodes[r])){const s=[];for(const i of e.inputNodes[r])s.push(t[i]);this[r]=s}else if("object"==typeof e.inputNodes[r]){const s={};for(const i in e.inputNodes[r]){const n=e.inputNodes[r][i];s[i]=t[n]}this[r]=s}else{const s=e.inputNodes[r];this[r]=t[s]}}}toJSON(e){const{uuid:t,type:r}=this,s=void 0===e||"string"==typeof e;s&&(e={textures:{},images:{},nodes:{}});let i=e.nodes[t];function n(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(void 0===i&&(i={uuid:t,type:r,meta:e,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},!0!==s&&(e.nodes[i.uuid]=i),this.serialize(i),delete i.meta),s){const t=n(e.textures),r=n(e.images),s=n(e.nodes);t.length>0&&(i.textures=t),r.length>0&&(i.images=r),s.length>0&&(i.nodes=s)}return i}}class ks extends Gs{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){return`${this.node.build(e)}[ ${this.indexNode.build(e,"uint")} ]`}}class zs extends Gs{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let r=null;for(const s of this.convertTo.split("|"))null!==r&&e.getTypeLength(t)!==e.getTypeLength(s)||(r=s);return r}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const r=this.node,s=this.getNodeType(e),i=r.build(e,s);return e.format(i,s,t)}}class $s extends Gs{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if("generate"===e.getBuildStage()){const r=e.getVectorType(this.getNodeType(e,t)),s=e.getDataFromNode(this);if(void 0!==s.propertyName)return e.format(s.propertyName,r,t);if("void"!==r&&"void"!==t&&this.hasDependencies(e)){const i=super.build(e,r),n=e.getVarFromNode(this,null,r),o=e.getPropertyName(n);return e.addLineFlowCode(`${o} = ${i}`,this),s.snippet=i,s.propertyName=o,e.format(s.propertyName,r,t)}}return super.build(e,t)}}class Ws extends $s{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return null!==this.nodeType?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce(((t,r)=>t+e.getTypeLength(r.getNodeType(e))),0))}generate(e,t){const r=this.getNodeType(e),s=this.nodes,i=e.getComponentType(r),n=[];for(const t of s){let r=t.build(e);const s=e.getComponentType(t.getNodeType(e));s!==i&&(r=e.format(r,s,i)),n.push(r)}const o=`${e.getType(r)}( ${n.join(", ")} )`;return e.format(o,r,t)}}const Hs=Vs.join("");class js extends Gs{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(Vs.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const r=this.node,s=e.getTypeLength(r.getNodeType(e));let i=null;if(s>1){let n=null;this.getVectorLength()>=s&&(n=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const o=r.build(e,n);i=this.components.length===s&&this.components===Hs.slice(0,this.components.length)?e.format(o,n,t):e.format(`${o}.${this.components}`,this.getNodeType(e),t)}else i=r.build(e,t);return i}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class qs extends $s{static get type(){return"SetNode"}constructor(e,t,r){super(),this.sourceNode=e,this.components=t,this.targetNode=r}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:r,targetNode:s}=this,i=this.getNodeType(e),n=e.getComponentType(s.getNodeType(e)),o=e.getTypeFromLength(r.length,n),a=s.build(e,o),u=t.build(e,i),l=e.getTypeLength(i),d=[];for(let e=0;e<l;e++){const t=Vs[e];t===r[0]?(d.push(a),e+=r.length-1):d.push(u+"."+t)}return`${e.getType(i)}( ${d.join(", ")} )`}}class Xs extends $s{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:r}=this,s=this.getNodeType(e),i=r.build(e),n=e.getVarFromNode(this),o=e.getPropertyName(n);e.addLineFlowCode(o+" = "+i,this);const a=e.getTypeLength(s),u=[];let l=0;for(let e=0;e<a;e++){const r=Vs[e];r===t[l]?(u.push("1.0 - "+o+"."+r),l++):u.push(o+"."+r)}return`${e.getType(s)}( ${u.join(", ")} )`}}class Ks extends Gs{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return null===this.nodeType?Rs(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=Rs(this.value),e.nodeType=this.nodeType,"ArrayBuffer"===e.valueType&&(e.value=Cs(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?As(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}const Ys=/float|u?int/;class Qs extends Ks{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const r=this.getNodeType(e);return Ys.test(r)&&Ys.test(t)?e.generateConst(t,this.value):e.format(this.generateConst(e),r,t)}}class Zs extends Gs{static get type(){return"MemberNode"}constructor(e,t){super(),this.node=e,this.property=t,this.isMemberNode=!0}getNodeType(e){return this.node.getMemberType(e,this.property)}generate(e){return this.node.build(e)+"."+this.property}}let Js=null;const ei=new Map;function ti(e,t){if(ei.has(e))console.warn(`Redefinition of method chaining ${e}`);else{if("function"!=typeof t)throw new Error(`Node element ${e} is not a function`);ei.set(e,t)}}const ri=e=>e.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),si=e=>ri(e).split("").sort().join(""),ii={setup(e,t){const r=t.shift();return e(wi(r),...t)},get(e,t,r){if("string"==typeof t&&void 0===e[t]){if(!0!==e.isStackNode&&"assign"===t)return(...e)=>(Js.assign(r,...e),r);if(ei.has(t)){const s=ei.get(t);return e.isStackNode?(...e)=>r.add(s(...e)):(...e)=>s(r,...e)}if("self"===t)return e;if(t.endsWith("Assign")&&ei.has(t.slice(0,t.length-6))){const s=ei.get(t.slice(0,t.length-6));return e.isStackNode?(...e)=>r.assign(e[0],s(...e)):(...e)=>r.assign(s(r,...e))}if(!0===/^[xyzwrgbastpq]{1,4}$/.test(t))return t=ri(t),Ci(new js(r,t));if(!0===/^set[XYZWRGBASTPQ]{1,4}$/.test(t))return t=si(t.slice(3).toLowerCase()),r=>Ci(new qs(e,t,r));if(!0===/^flip[XYZWRGBASTPQ]{1,4}$/.test(t))return t=si(t.slice(4).toLowerCase()),()=>Ci(new Xs(Ci(e),t));if("width"===t||"height"===t||"depth"===t)return"width"===t?t="x":"height"===t?t="y":"depth"===t&&(t="z"),Ci(new js(e,t));if(!0===/^\d+$/.test(t))return Ci(new ks(r,new Qs(Number(t),"uint")));if(!0===/^get$/.test(t))return e=>Ci(new Zs(r,e))}return Reflect.get(e,t,r)},set:(e,t,r,s)=>"string"!=typeof t||void 0!==e[t]||!0!==/^[xyzwrgbastpq]{1,4}$/.test(t)&&"width"!==t&&"height"!==t&&"depth"!==t&&!0!==/^\d+$/.test(t)?Reflect.set(e,t,r,s):(s[t].assign(r),!0)},ni=new WeakMap,oi=new WeakMap,ai=function(e,t=null){for(const r in e)e[r]=Ci(e[r],t);return e},ui=function(e,t=null){const r=e.length;for(let s=0;s<r;s++)e[s]=Ci(e[s],t);return e},li=function(e,t=null,r=null,s=null){const i=e=>Ci(null!==s?Object.assign(e,s):e);return null===t?(...t)=>i(new e(...Mi(t))):null!==r?(r=Ci(r),(...s)=>i(new e(t,...Mi(s),r))):(...r)=>i(new e(t,...Mi(r)))},di=function(e,...t){return Ci(new e(...Mi(t)))};class ci extends Gs{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}getMemberType(e,t){return this.getOutputNode(e).getMemberType(e,t)}call(e){const{shaderNode:t,inputNodes:r}=this,s=e.getNodeProperties(t);if(s.onceOutput)return s.onceOutput;let i=null;if(t.layout){let s=oi.get(e.constructor);void 0===s&&(s=new WeakMap,oi.set(e.constructor,s));let n=s.get(t);void 0===n&&(n=Ci(e.buildFunctionNode(t)),s.set(t,n)),e.addInclude(n),i=Ci(n.call(r))}else{const s=t.jsFunc,n=null!==r||s.length>1?s(r||[],e):s(e);i=Ci(n)}return t.once&&(s.onceOutput=i),i}getOutputNode(e){const t=e.getNodeProperties(this);return null===t.outputNode&&(t.outputNode=this.setupOutput(e)),t.outputNode}setup(e){return this.getOutputNode(e)}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}generate(e,t){return this.getOutputNode(e).build(e,t)}}class hi extends Gs{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return wi(e),Ci(new ci(this,e))}setup(){return this.call()}}const pi=[!1,!0],gi=[0,1,2,3],mi=[-1,-2],fi=[.5,1.5,1/3,1e-6,1e6,Math.PI,2*Math.PI,1/Math.PI,2/Math.PI,1/(2*Math.PI),Math.PI/2],yi=new Map;for(const e of pi)yi.set(e,new Qs(e));const xi=new Map;for(const e of gi)xi.set(e,new Qs(e,"uint"));const bi=new Map([...xi].map((e=>new Qs(e.value,"int"))));for(const e of mi)bi.set(e,new Qs(e,"int"));const Ti=new Map([...bi].map((e=>new Qs(e.value))));for(const e of fi)Ti.set(e,new Qs(e));for(const e of fi)Ti.set(-e,new Qs(-e));const _i={bool:yi,uint:xi,ints:bi,float:Ti},vi=new Map([...yi,...Ti]),Ni=(e,t)=>vi.has(e)?vi.get(e):!0===e.isNode?e:new Qs(e,t),Si=function(e,t=null){return(...r)=>{if((0===r.length||!["bool","float","int","uint"].includes(e)&&r.every((e=>"object"!=typeof e)))&&(r=[As(e,...r)]),1===r.length&&null!==t&&t.has(r[0]))return Ci(t.get(r[0]));if(1===r.length){const t=Ni(r[0],e);return(e=>{try{return e.getNodeType()}catch(e){return}})(t)===e?Ci(t):Ci(new zs(t,e))}const s=r.map((e=>Ni(e)));return Ci(new Ws(s,e))}},Ri=e=>"object"==typeof e&&null!==e?e.value:e,Ai=e=>null!=e?e.nodeType||e.convertTo||("string"==typeof e?e:null):null;function Ei(e,t){return new Proxy(new hi(e,t),ii)}const Ci=(e,t=null)=>function(e,t=null){const r=Rs(e);if("node"===r){let t=ni.get(e);return void 0===t&&(t=new Proxy(e,ii),ni.set(e,t),ni.set(t,t)),t}return null===t&&("float"===r||"boolean"===r)||r&&"shader"!==r&&"string"!==r?Ci(Ni(e,t)):"shader"===r?Ui(e):e}(e,t),wi=(e,t=null)=>new ai(e,t),Mi=(e,t=null)=>new ui(e,t),Bi=(...e)=>new li(...e),Fi=(...e)=>new di(...e),Ui=(e,t)=>{const r=new Ei(e,t),s=(...e)=>{let t;return wi(e),t=e[0]&&e[0].isNode?[...e]:e[0],r.call(t)};return s.shaderNode=r,s.setLayout=e=>(r.setLayout(e),s),s.once=()=>(r.once=!0,s),s};ti("toGlobal",(e=>(e.global=!0,e)));const Pi=e=>{Js=e},Ii=()=>Js,Li=(...e)=>Js.If(...e);function Di(e){return Js&&Js.add(e),e}ti("append",Di);const Vi=new Si("color"),Oi=new Si("float",_i.float),Gi=new Si("int",_i.ints),ki=new Si("uint",_i.uint),zi=new Si("bool",_i.bool),$i=new Si("vec2"),Wi=new Si("ivec2"),Hi=new Si("uvec2"),ji=new Si("bvec2"),qi=new Si("vec3"),Xi=new Si("ivec3"),Ki=new Si("uvec3"),Yi=new Si("bvec3"),Qi=new Si("vec4"),Zi=new Si("ivec4"),Ji=new Si("uvec4"),en=new Si("bvec4"),tn=new Si("mat2"),rn=new Si("mat3"),sn=new Si("mat4");ti("toColor",Vi),ti("toFloat",Oi),ti("toInt",Gi),ti("toUint",ki),ti("toBool",zi),ti("toVec2",$i),ti("toIVec2",Wi),ti("toUVec2",Hi),ti("toBVec2",ji),ti("toVec3",qi),ti("toIVec3",Xi),ti("toUVec3",Ki),ti("toBVec3",Yi),ti("toVec4",Qi),ti("toIVec4",Zi),ti("toUVec4",Ji),ti("toBVec4",en),ti("toMat2",tn),ti("toMat3",rn),ti("toMat4",sn);const nn=Bi(ks),on=(e,t)=>Ci(new zs(Ci(e),t));ti("element",nn),ti("convert",on);class an extends $s{static get type(){return"ArrayNode"}constructor(e,t,r=null){super(e),this.count=t,this.values=r,this.isArrayNode=!0}getNodeType(e){return null===this.nodeType&&(this.nodeType=this.values[0].getNodeType(e)),this.nodeType}getElementType(e){return this.getNodeType(e)}generate(e){const t=this.getNodeType(e);return e.generateArray(t,this.count,this.values)}}const un=(...e)=>{let t;if(1===e.length){const r=e[0];t=new an(null,r.length,r)}else{const r=e[0],s=e[1];t=new an(r,s)}return Ci(t)};ti("toArray",((e,t)=>un(Array(t).fill(e))));class ln extends Gs{static get type(){return"UniformGroupNode"}constructor(e,t=!1,r=1){super("string"),this.name=e,this.shared=t,this.order=r,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const dn=e=>new ln(e),cn=(e,t=0)=>new ln(e,!0,t),hn=cn("frame"),pn=cn("render"),gn=dn("object");class mn extends Ks{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=gn}label(e){return this.name=e,this}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const r=this.getSelf();return e=e.bind(r),super.onUpdate((t=>{const s=e(t,r);void 0!==s&&(this.value=s)}),t)}generate(e,t){const r=this.getNodeType(e),s=this.getUniformHash(e);let i=e.getNodeFromHash(s);void 0===i&&(e.setHashNode(this,s),i=this);const n=i.getInputType(e),o=e.getUniformFromNode(i,n,e.shaderStage,this.name||e.context.label),a=e.getPropertyName(o);return void 0!==e.context.label&&delete e.context.label,e.format(a,r,t)}}const fn=(e,t)=>{const r=Ai(t||e),s=e&&!0===e.isNode?e.node&&e.node.value||e.value:e;return Ci(new mn(s,r))};class yn extends Gs{static get type(){return"PropertyNode"}constructor(e,t=null,r=!1){super(e),this.name=t,this.varying=r,this.isPropertyNode=!0}getHash(e){return this.name||super.getHash(e)}isGlobal(){return!0}generate(e){let t;return!0===this.varying?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const xn=(e,t)=>Ci(new yn(e,t)),bn=(e,t)=>Ci(new yn(e,t,!0)),Tn=Fi(yn,"vec4","DiffuseColor"),_n=Fi(yn,"vec3","EmissiveColor"),vn=Fi(yn,"float","Roughness"),Nn=Fi(yn,"float","Metalness"),Sn=Fi(yn,"float","Clearcoat"),Rn=Fi(yn,"float","ClearcoatRoughness"),An=Fi(yn,"vec3","Sheen"),En=Fi(yn,"float","SheenRoughness"),Cn=Fi(yn,"float","Iridescence"),wn=Fi(yn,"float","IridescenceIOR"),Mn=Fi(yn,"float","IridescenceThickness"),Bn=Fi(yn,"float","AlphaT"),Fn=Fi(yn,"float","Anisotropy"),Un=Fi(yn,"vec3","AnisotropyT"),Pn=Fi(yn,"vec3","AnisotropyB"),In=Fi(yn,"color","SpecularColor"),Ln=Fi(yn,"float","SpecularF90"),Dn=Fi(yn,"float","Shininess"),Vn=Fi(yn,"vec4","Output"),On=Fi(yn,"float","dashSize"),Gn=Fi(yn,"float","gapSize"),kn=Fi(yn,"float","pointWidth"),zn=Fi(yn,"float","IOR"),$n=Fi(yn,"float","Transmission"),Wn=Fi(yn,"float","Thickness"),Hn=Fi(yn,"float","AttenuationDistance"),jn=Fi(yn,"color","AttenuationColor"),qn=Fi(yn,"float","Dispersion");class Xn extends $s{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t}hasDependencies(){return!1}getNodeType(e,t){return"void"!==t?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(!1===e.isAvailable("swizzleAssign")&&t.isSplitNode&&t.components.length>1){const r=e.getTypeLength(t.node.getNodeType(e));return Vs.join("").slice(0,r)!==t.components}return!1}generate(e,t){const{targetNode:r,sourceNode:s}=this,i=this.needsSplitAssign(e),n=r.getNodeType(e),o=r.context({assign:!0}).build(e),a=s.build(e,n),u=s.getNodeType(e),l=e.getDataFromNode(this);let d;if(!0===l.initialized)"void"!==t&&(d=o);else if(i){const s=e.getVarFromNode(this,null,n),i=e.getPropertyName(s);e.addLineFlowCode(`${i} = ${a}`,this);const u=r.node.context({assign:!0}).build(e);for(let t=0;t<r.components.length;t++){const s=r.components[t];e.addLineFlowCode(`${u}.${s} = ${i}[ ${t} ]`,this)}"void"!==t&&(d=o)}else d=`${o} = ${a}`,"void"!==t&&"void"!==u||(e.addLineFlowCode(d,this),"void"!==t&&(d=o));return l.initialized=!0,e.format(d,n,t)}}const Kn=Bi(Xn);ti("assign",Kn);class Yn extends $s{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],r=this.functionNode,s=r.getInputs(e),i=this.parameters,n=(t,r)=>{const s=r.type;let i;return i="pointer"===s?"&"+t.build(e):t.build(e,s),i};if(Array.isArray(i))for(let e=0;e<i.length;e++)t.push(n(i[e],s[e]));else for(const e of s){const r=i[e.name];if(void 0===r)throw new Error(`FunctionCallNode: Input '${e.name}' not found in FunctionNode.`);t.push(n(r,e))}return`${r.build(e,"property")}( ${t.join(", ")} )`}}const Qn=(e,...t)=>(t=t.length>1||t[0]&&!0===t[0].isNode?Mi(t):wi(t[0]),Ci(new Yn(Ci(e),t)));ti("call",Qn);class Zn extends $s{static get type(){return"OperatorNode"}constructor(e,t,r,...s){if(super(),s.length>0){let i=new Zn(e,t,r);for(let t=0;t<s.length-1;t++)i=new Zn(e,i,s[t]);t=i,r=s[s.length-1]}this.op=e,this.aNode=t,this.bNode=r,this.isOperatorNode=!0}getNodeType(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=s.getNodeType(e),o=void 0!==i?i.getNodeType(e):null;if("void"===n||"void"===o)return"void";if("%"===r)return n;if("~"===r||"&"===r||"|"===r||"^"===r||">>"===r||"<<"===r)return e.getIntegerType(n);if("!"===r||"=="===r||"&&"===r||"||"===r||"^^"===r)return"bool";if("<"===r||">"===r||"<="===r||">="===r){const r=t?e.getTypeLength(t):Math.max(e.getTypeLength(n),e.getTypeLength(o));return r>1?`bvec${r}`:"bool"}if(e.isMatrix(n)){if("float"===o)return n;if(e.isVector(o))return e.getVectorFromMatrix(n);if(e.isMatrix(o))return n}else if(e.isMatrix(o)){if("float"===n)return o;if(e.isVector(n))return e.getVectorFromMatrix(o)}return e.getTypeLength(o)>e.getTypeLength(n)?o:n}generate(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=this.getNodeType(e,t);let o=null,a=null;"void"!==n?(o=s.getNodeType(e),a=void 0!==i?i.getNodeType(e):null,"<"===r||">"===r||"<="===r||">="===r||"=="===r?e.isVector(o)?a=o:o!==a&&(o=a="float"):">>"===r||"<<"===r?(o=n,a=e.changeComponentType(a,"uint")):e.isMatrix(o)?"float"===a?a="float":e.isVector(a)?a=e.getVectorFromMatrix(o):e.isMatrix(a)||(o=a=n):o=e.isMatrix(a)?"float"===o?"float":e.isVector(o)?e.getVectorFromMatrix(a):a=n:a=n):o=a=n;const u=s.build(e,o),l=void 0!==i?i.build(e,a):null,d=e.getTypeLength(t),c=e.getFunctionOperator(r);return"void"!==t?"<"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} < ${l} )`,n,t):"<="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} <= ${l} )`,n,t):">"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} > ${l} )`,n,t):">="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} >= ${l} )`,n,t):"!"===r||"~"===r?e.format(`(${r}${u})`,o,t):c?e.format(`${c}( ${u}, ${l} )`,n,t):e.isMatrix(o)&&"float"===a?e.format(`( ${l} ${r} ${u} )`,n,t):"float"===o&&e.isMatrix(a)?e.format(`${u} ${r} ${l}`,n,t):e.format(`( ${u} ${r} ${l} )`,n,t):"void"!==o?c?e.format(`${c}( ${u}, ${l} )`,n,t):e.isMatrix(o)&&"float"===a?e.format(`${l} ${r} ${u}`,n,t):e.format(`${u} ${r} ${l}`,n,t):void 0}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const Jn=Bi(Zn,"+"),eo=Bi(Zn,"-"),to=Bi(Zn,"*"),ro=Bi(Zn,"/"),so=Bi(Zn,"%"),io=Bi(Zn,"=="),no=Bi(Zn,"!="),oo=Bi(Zn,"<"),ao=Bi(Zn,">"),uo=Bi(Zn,"<="),lo=Bi(Zn,">="),co=Bi(Zn,"&&"),ho=Bi(Zn,"||"),po=Bi(Zn,"!"),go=Bi(Zn,"^^"),mo=Bi(Zn,"&"),fo=Bi(Zn,"~"),yo=Bi(Zn,"|"),xo=Bi(Zn,"^"),bo=Bi(Zn,"<<"),To=Bi(Zn,">>");ti("add",Jn),ti("sub",eo),ti("mul",to),ti("div",ro),ti("modInt",so),ti("equal",io),ti("notEqual",no),ti("lessThan",oo),ti("greaterThan",ao),ti("lessThanEqual",uo),ti("greaterThanEqual",lo),ti("and",co),ti("or",ho),ti("not",po),ti("xor",go),ti("bitAnd",mo),ti("bitNot",fo),ti("bitOr",yo),ti("bitXor",xo),ti("shiftLeft",bo),ti("shiftRight",To);const _o=(...e)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),so(...e));ti("remainder",_o);class vo extends $s{static get type(){return"MathNode"}constructor(e,t,r=null,s=null){super(),this.method=e,this.aNode=t,this.bNode=r,this.cNode=s,this.isMathNode=!0}getInputType(e){const t=this.aNode.getNodeType(e),r=this.bNode?this.bNode.getNodeType(e):null,s=this.cNode?this.cNode.getNodeType(e):null,i=e.isMatrix(t)?0:e.getTypeLength(t),n=e.isMatrix(r)?0:e.getTypeLength(r),o=e.isMatrix(s)?0:e.getTypeLength(s);return i>n&&i>o?t:n>o?r:o>i?s:t}getNodeType(e){const t=this.method;return t===vo.LENGTH||t===vo.DISTANCE||t===vo.DOT?"float":t===vo.CROSS?"vec3":t===vo.ALL?"bool":t===vo.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):t===vo.MOD?this.aNode.getNodeType(e):this.getInputType(e)}generate(e,t){let r=this.method;const s=this.getNodeType(e),i=this.getInputType(e),n=this.aNode,o=this.bNode,a=this.cNode,u=e.renderer.coordinateSystem;if(r===vo.TRANSFORM_DIRECTION){let r=n,s=o;e.isMatrix(r.getNodeType(e))?s=Qi(qi(s),0):r=Qi(qi(r),0);const i=to(r,s).xyz;return Oo(i).build(e,t)}if(r===vo.NEGATE)return e.format("( - "+n.build(e,i)+" )",s,t);if(r===vo.ONE_MINUS)return eo(1,n).build(e,t);if(r===vo.RECIPROCAL)return ro(1,n).build(e,t);if(r===vo.DIFFERENCE)return qo(eo(n,o)).build(e,t);{const c=[];return r===vo.CROSS||r===vo.MOD?c.push(n.build(e,s),o.build(e,s)):u===l&&r===vo.STEP?c.push(n.build(e,1===e.getTypeLength(n.getNodeType(e))?"float":i),o.build(e,i)):u===l&&(r===vo.MIN||r===vo.MAX)||r===vo.MOD?c.push(n.build(e,i),o.build(e,1===e.getTypeLength(o.getNodeType(e))?"float":i)):r===vo.REFRACT?c.push(n.build(e,i),o.build(e,i),a.build(e,"float")):r===vo.MIX?c.push(n.build(e,i),o.build(e,i),a.build(e,1===e.getTypeLength(a.getNodeType(e))?"float":i)):(u===d&&r===vo.ATAN&&null!==o&&(r="atan2"),c.push(n.build(e,i)),null!==o&&c.push(o.build(e,i)),null!==a&&c.push(a.build(e,i))),e.format(`${e.getMethod(r,s)}( ${c.join(", ")} )`,s,t)}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}vo.ALL="all",vo.ANY="any",vo.RADIANS="radians",vo.DEGREES="degrees",vo.EXP="exp",vo.EXP2="exp2",vo.LOG="log",vo.LOG2="log2",vo.SQRT="sqrt",vo.INVERSE_SQRT="inversesqrt",vo.FLOOR="floor",vo.CEIL="ceil",vo.NORMALIZE="normalize",vo.FRACT="fract",vo.SIN="sin",vo.COS="cos",vo.TAN="tan",vo.ASIN="asin",vo.ACOS="acos",vo.ATAN="atan",vo.ABS="abs",vo.SIGN="sign",vo.LENGTH="length",vo.NEGATE="negate",vo.ONE_MINUS="oneMinus",vo.DFDX="dFdx",vo.DFDY="dFdy",vo.ROUND="round",vo.RECIPROCAL="reciprocal",vo.TRUNC="trunc",vo.FWIDTH="fwidth",vo.TRANSPOSE="transpose",vo.BITCAST="bitcast",vo.EQUALS="equals",vo.MIN="min",vo.MAX="max",vo.MOD="mod",vo.STEP="step",vo.REFLECT="reflect",vo.DISTANCE="distance",vo.DIFFERENCE="difference",vo.DOT="dot",vo.CROSS="cross",vo.POW="pow",vo.TRANSFORM_DIRECTION="transformDirection",vo.MIX="mix",vo.CLAMP="clamp",vo.REFRACT="refract",vo.SMOOTHSTEP="smoothstep",vo.FACEFORWARD="faceforward";const No=Oi(1e-6),So=Oi(1e6),Ro=Oi(Math.PI),Ao=Oi(2*Math.PI),Eo=Bi(vo,vo.ALL),Co=Bi(vo,vo.ANY),wo=Bi(vo,vo.RADIANS),Mo=Bi(vo,vo.DEGREES),Bo=Bi(vo,vo.EXP),Fo=Bi(vo,vo.EXP2),Uo=Bi(vo,vo.LOG),Po=Bi(vo,vo.LOG2),Io=Bi(vo,vo.SQRT),Lo=Bi(vo,vo.INVERSE_SQRT),Do=Bi(vo,vo.FLOOR),Vo=Bi(vo,vo.CEIL),Oo=Bi(vo,vo.NORMALIZE),Go=Bi(vo,vo.FRACT),ko=Bi(vo,vo.SIN),zo=Bi(vo,vo.COS),$o=Bi(vo,vo.TAN),Wo=Bi(vo,vo.ASIN),Ho=Bi(vo,vo.ACOS),jo=Bi(vo,vo.ATAN),qo=Bi(vo,vo.ABS),Xo=Bi(vo,vo.SIGN),Ko=Bi(vo,vo.LENGTH),Yo=Bi(vo,vo.NEGATE),Qo=Bi(vo,vo.ONE_MINUS),Zo=Bi(vo,vo.DFDX),Jo=Bi(vo,vo.DFDY),ea=Bi(vo,vo.ROUND),ta=Bi(vo,vo.RECIPROCAL),ra=Bi(vo,vo.TRUNC),sa=Bi(vo,vo.FWIDTH),ia=Bi(vo,vo.TRANSPOSE),na=Bi(vo,vo.BITCAST),oa=Bi(vo,vo.EQUALS),aa=Bi(vo,vo.MIN),ua=Bi(vo,vo.MAX),la=Bi(vo,vo.MOD),da=Bi(vo,vo.STEP),ca=Bi(vo,vo.REFLECT),ha=Bi(vo,vo.DISTANCE),pa=Bi(vo,vo.DIFFERENCE),ga=Bi(vo,vo.DOT),ma=Bi(vo,vo.CROSS),fa=Bi(vo,vo.POW),ya=Bi(vo,vo.POW,2),xa=Bi(vo,vo.POW,3),ba=Bi(vo,vo.POW,4),Ta=Bi(vo,vo.TRANSFORM_DIRECTION),_a=e=>to(Xo(e),fa(qo(e),1/3)),va=e=>ga(e,e),Na=Bi(vo,vo.MIX),Sa=(e,t=0,r=1)=>Ci(new vo(vo.CLAMP,Ci(e),Ci(t),Ci(r))),Ra=e=>Sa(e),Aa=Bi(vo,vo.REFRACT),Ea=Bi(vo,vo.SMOOTHSTEP),Ca=Bi(vo,vo.FACEFORWARD),wa=Ui((([e])=>{const t=ga(e.xy,$i(12.9898,78.233)),r=la(t,Ro);return Go(ko(r).mul(43758.5453))})),Ma=(e,t,r)=>Na(t,r,e),Ba=(e,t,r)=>Ea(t,r,e),Fa=(e,t)=>(console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.'),jo(e,t)),Ua=Ca,Pa=Lo;ti("all",Eo),ti("any",Co),ti("equals",oa),ti("radians",wo),ti("degrees",Mo),ti("exp",Bo),ti("exp2",Fo),ti("log",Uo),ti("log2",Po),ti("sqrt",Io),ti("inverseSqrt",Lo),ti("floor",Do),ti("ceil",Vo),ti("normalize",Oo),ti("fract",Go),ti("sin",ko),ti("cos",zo),ti("tan",$o),ti("asin",Wo),ti("acos",Ho),ti("atan",jo),ti("abs",qo),ti("sign",Xo),ti("length",Ko),ti("lengthSq",va),ti("negate",Yo),ti("oneMinus",Qo),ti("dFdx",Zo),ti("dFdy",Jo),ti("round",ea),ti("reciprocal",ta),ti("trunc",ra),ti("fwidth",sa),ti("atan2",Fa),ti("min",aa),ti("max",ua),ti("mod",la),ti("step",da),ti("reflect",ca),ti("distance",ha),ti("dot",ga),ti("cross",ma),ti("pow",fa),ti("pow2",ya),ti("pow3",xa),ti("pow4",ba),ti("transformDirection",Ta),ti("mix",Ma),ti("clamp",Sa),ti("refract",Aa),ti("smoothstep",Ba),ti("faceForward",Ca),ti("difference",pa),ti("saturate",Ra),ti("cbrt",_a),ti("transpose",ia),ti("rand",wa);class Ia extends Gs{static get type(){return"ConditionalNode"}constructor(e,t,r=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=r}getNodeType(e){const{ifNode:t,elseNode:r}=e.getNodeProperties(this);if(void 0===t)return this.setup(e),this.getNodeType(e);const s=t.getNodeType(e);if(null!==r){const t=r.getNodeType(e);if(e.getTypeLength(t)>e.getTypeLength(s))return t}return s}setup(e){const t=this.condNode.cache(),r=this.ifNode.cache(),s=this.elseNode?this.elseNode.cache():null,i=e.context.nodeBlock;e.getDataFromNode(r).parentNodeBlock=i,null!==s&&(e.getDataFromNode(s).parentNodeBlock=i);const n=e.getNodeProperties(this);n.condNode=t,n.ifNode=r.context({nodeBlock:r}),n.elseNode=s?s.context({nodeBlock:s}):null}generate(e,t){const r=this.getNodeType(e),s=e.getDataFromNode(this);if(void 0!==s.nodeProperty)return s.nodeProperty;const{condNode:i,ifNode:n,elseNode:o}=e.getNodeProperties(this),a="void"!==t,u=a?xn(r).build(e):"";s.nodeProperty=u;const l=i.build(e,"bool");e.addFlowCode(`\n${e.tab}if ( ${l} ) {\n\n`).addFlowTab();let d=n.build(e,r);if(d&&(d=a?u+" = "+d+";":"return "+d+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+d+"\n\n"+e.tab+"}"),null!==o){e.addFlowCode(" else {\n\n").addFlowTab();let t=o.build(e,r);t&&(t=a?u+" = "+t+";":"return "+t+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+t+"\n\n"+e.tab+"}\n\n")}else e.addFlowCode("\n\n");return e.format(u,r,t)}}const La=Bi(Ia);ti("select",La);const Da=(...e)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),La(...e));ti("cond",Da);class Va extends Gs{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){this.node.build(e)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value});const r=this.node.build(e);return e.setContext(t),r}generate(e,t){const r=e.getContext();e.setContext({...e.context,...this.value});const s=this.node.build(e,t);return e.setContext(r),s}}const Oa=Bi(Va),Ga=(e,t)=>Oa(e,{label:t});ti("context",Oa),ti("label",Ga);class ka extends Gs{static get type(){return"VarNode"}constructor(e,t=null,r=!1){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0,this.readOnly=r}getHash(e){return this.name||super.getHash(e)}getMemberType(e,t){return this.node.getMemberType(e,t)}getElementType(e){return this.node.getElementType(e)}getNodeType(e){return this.node.getNodeType(e)}generate(e){const{node:t,name:r,readOnly:s}=this,{renderer:i}=e,n=!0===i.backend.isWebGPUBackend;let o=!1,a=!1;s&&(o=e.isDeterministic(t),a=n?s:o);const u=e.getVectorType(this.getNodeType(e)),l=t.build(e,u),d=e.getVarFromNode(this,r,u,void 0,a),c=e.getPropertyName(d);let h=c;if(a)if(n)h=o?`const ${c}`:`let ${c}`;else{const r=e.getArrayCount(t);h=`const ${e.getVar(d.type,c,r)}`}return e.addLineFlowCode(`${h} = ${l}`,this),c}}const za=Bi(ka),$a=(e,t=null)=>za(e,t).append(),Wa=(e,t=null)=>za(e,t,!0).append();ti("toVar",$a),ti("toConst",Wa);const Ha=e=>(console.warn('TSL: "temp( node )" is deprecated. Use "Var( node )" or "node.toVar()" instead.'),za(e));ti("temp",Ha);class ja extends Gs{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0}isGlobal(){return!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let r=t.varying;if(void 0===r){const s=this.name,i=this.getNodeType(e);t.varying=r=e.getVaryingFromNode(this,s,i),t.node=this.node}return r.needsInterpolation||(r.needsInterpolation="fragment"===e.shaderStage),r}setup(e){this.setupVarying(e)}analyze(e){return this.setupVarying(e),this.node.analyze(e)}generate(e){const t=e.getNodeProperties(this),r=this.setupVarying(e),s="fragment"===e.shaderStage&&!0===t.reassignPosition&&e.context.needsPositionReassign;if(void 0===t.propertyName||s){const i=this.getNodeType(e),n=e.getPropertyName(r,Bs.VERTEX);e.flowNodeFromShaderStage(Bs.VERTEX,this.node,i,n),t.propertyName=n,s?t.reassignPosition=!1:void 0===t.reassignPosition&&e.context.isPositionNodeInput&&(t.reassignPosition=!0)}return e.getPropertyName(r)}}const qa=Bi(ja),Xa=e=>qa(e);ti("toVarying",qa),ti("toVertexStage",Xa),ti("varying",((...e)=>(console.warn("TSL.VaryingNode: .varying() has been renamed to .toVarying()."),qa(...e)))),ti("vertexStage",((...e)=>(console.warn("TSL.VaryingNode: .vertexStage() has been renamed to .toVertexStage()."),qa(...e))));const Ka=Ui((([e])=>{const t=e.mul(.9478672986).add(.0521327014).pow(2.4),r=e.mul(.0773993808),s=e.lessThanEqual(.04045);return Na(t,r,s)})).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ya=Ui((([e])=>{const t=e.pow(.41666).mul(1.055).sub(.055),r=e.mul(12.92),s=e.lessThanEqual(.0031308);return Na(t,r,s)})).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Qa="WorkingColorSpace",Za="OutputColorSpace";class Ja extends $s{static get type(){return"ColorSpaceNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.source=t,this.target=r}resolveColorSpace(e,t){return t===Qa?c.workingColorSpace:t===Za?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,r=this.resolveColorSpace(e,this.source),s=this.resolveColorSpace(e,this.target);let i=t;return!1!==c.enabled&&r!==s&&r&&s?(c.getTransfer(r)===h&&(i=Qi(Ka(i.rgb),i.a)),c.getPrimaries(r)!==c.getPrimaries(s)&&(i=Qi(rn(c._getMatrix(new n,r,s)).mul(i.rgb),i.a)),c.getTransfer(s)===h&&(i=Qi(Ya(i.rgb),i.a)),i):i}}const eu=e=>Ci(new Ja(Ci(e),Qa,Za)),tu=e=>Ci(new Ja(Ci(e),Za,Qa)),ru=(e,t)=>Ci(new Ja(Ci(e),Qa,t)),su=(e,t)=>Ci(new Ja(Ci(e),t,Qa));ti("toOutputColorSpace",eu),ti("toWorkingColorSpace",tu),ti("workingToColorSpace",ru),ti("colorSpaceToWorking",su);let iu=class extends ks{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}};class nu extends Gs{static get type(){return"ReferenceBaseNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.updateType=Fs.OBJECT}setGroup(e){return this.group=e,this}element(e){return Ci(new iu(this,Ci(e)))}setNodeType(e){const t=fn(null,e).getSelf();null!==this.group&&t.setGroup(this.group),this.node=t}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}class ou extends nu{static get type(){return"RendererReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.renderer=r,this.setGroup(pn)}updateReference(e){return this.reference=null!==this.renderer?this.renderer:e.renderer,this.reference}}const au=(e,t,r=null)=>Ci(new ou(e,t,r));class uu extends $s{static get type(){return"ToneMappingNode"}constructor(e,t=du,r=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=r}customCacheKey(){return ys(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,r=this.toneMapping;if(r===p)return t;let s=null;const i=e.renderer.library.getToneMappingFunction(r);return null!==i?s=Qi(i(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",r),s=t),s}}const lu=(e,t,r)=>Ci(new uu(e,Ci(t),Ci(r))),du=au("toneMappingExposure","float");ti("toneMapping",((e,t,r)=>lu(t,r,e)));class cu extends Ks{static get type(){return"BufferAttributeNode"}constructor(e,t=null,r=0,s=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=r,this.bufferOffset=s,this.usage=g,this.instanced=!1,this.attribute=null,this.global=!0,e&&!0===e.isBufferAttribute&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(0===this.bufferStride&&0===this.bufferOffset){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return null===this.bufferType&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(null!==this.attribute)return;const t=this.getNodeType(e),r=this.value,s=e.getTypeLength(t),i=this.bufferStride||s,n=this.bufferOffset,o=!0===r.isInterleavedBuffer?r:new m(r,i),a=new f(o,s,n);o.setUsage(this.usage),this.attribute=a,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),r=e.getBufferAttributeFromNode(this,t),s=e.getPropertyName(r);let i=null;if("vertex"===e.shaderStage||"compute"===e.shaderStage)this.name=s,i=s;else{i=qa(this).build(e,t)}return i}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&!0===this.attribute.isBufferAttribute&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const hu=(e,t=null,r=0,s=0)=>Ci(new cu(e,t,r,s)),pu=(e,t=null,r=0,s=0)=>hu(e,t,r,s).setUsage(y),gu=(e,t=null,r=0,s=0)=>hu(e,t,r,s).setInstanced(!0),mu=(e,t=null,r=0,s=0)=>pu(e,t,r,s).setInstanced(!0);ti("toAttribute",(e=>hu(e.value)));class fu extends Gs{static get type(){return"ComputeNode"}constructor(e,t,r=[64]){super("void"),this.isComputeNode=!0,this.computeNode=e,this.count=t,this.workgroupSize=r,this.dispatchCount=0,this.version=1,this.name="",this.updateBeforeType=Fs.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}label(e){return this.name=e,this}updateDispatchCount(){const{count:e,workgroupSize:t}=this;let r=t[0];for(let e=1;e<t.length;e++)r*=t[e];this.dispatchCount=Math.ceil(e/r)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}generate(e){const{shaderStage:t}=e;if("compute"===t){const t=this.computeNode.build(e,"void");""!==t&&e.addLineFlowCode(t,this)}}}const yu=(e,t,r)=>Ci(new fu(Ci(e),t,r));ti("compute",yu);class xu extends Gs{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){const t=e.getCache(),r=e.getCacheFromNode(this,this.parent);e.setCache(r);const s=this.node.getNodeType(e);return e.setCache(t),s}build(e,...t){const r=e.getCache(),s=e.getCacheFromNode(this,this.parent);e.setCache(s);const i=this.node.build(e,...t);return e.setCache(r),i}}const bu=(e,t)=>Ci(new xu(Ci(e),t));ti("cache",bu);class Tu extends Gs{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return""!==t&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const _u=Bi(Tu);ti("bypass",_u);class vu extends Gs{static get type(){return"RemapNode"}constructor(e,t,r,s=Oi(0),i=Oi(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=r,this.outLowNode=s,this.outHighNode=i,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:r,outLowNode:s,outHighNode:i,doClamp:n}=this;let o=e.sub(t).div(r.sub(t));return!0===n&&(o=o.clamp()),o.mul(i.sub(s)).add(s)}}const Nu=Bi(vu,null,null,{doClamp:!1}),Su=Bi(vu);ti("remap",Nu),ti("remapClamp",Su);class Ru extends Gs{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const r=this.getNodeType(e),s=this.snippet;if("void"!==r)return e.format(`( ${s} )`,r,t);e.addLineFlowCode(s,this)}}const Au=Bi(Ru),Eu=e=>(e?La(e,Au("discard")):Au("discard")).append();ti("discard",Eu);class Cu extends $s{static get type(){return"RenderOutputNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=r,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const r=(null!==this.toneMapping?this.toneMapping:e.toneMapping)||p,s=(null!==this.outputColorSpace?this.outputColorSpace:e.outputColorSpace)||x;return r!==p&&(t=t.toneMapping(r)),s!==x&&s!==c.workingColorSpace&&(t=t.workingToColorSpace(s)),t}}const wu=(e,t=null,r=null)=>Ci(new Cu(Ci(e),t,r));ti("renderOutput",wu);class Mu extends Gs{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(null===t){const r=this.getAttributeName(e);if(e.hasGeometryAttribute(r)){const s=e.geometry.getAttribute(r);t=e.getTypeFromAttribute(s)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),r=this.getNodeType(e);if(!0===e.hasGeometryAttribute(t)){const s=e.geometry.getAttribute(t),i=e.getTypeFromAttribute(s),n=e.getAttribute(t,i);if("vertex"===e.shaderStage)return e.format(n.name,i,r);return qa(this).build(e,r)}return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(r)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const Bu=(e,t)=>Ci(new Mu(e,t)),Fu=(e=0)=>Bu("uv"+(e>0?e:""),"vec2");class Uu extends Gs{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const r=this.textureNode.build(e,"property"),s=null===this.levelNode?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${r}, ${s} )`,this.getNodeType(e),t)}}const Pu=Bi(Uu);class Iu extends mn{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=Fs.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,r=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(r&&void 0!==r.width){const{width:e,height:t}=r;this.value=Math.log2(Math.max(e,t))}}}const Lu=Bi(Iu);class Du extends mn{static get type(){return"TextureNode"}constructor(e,t=null,r=null,s=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=r,this.biasNode=s,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=Fs.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(null===t)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return!0===this.value.isDepthTexture?"float":this.value.type===b?"uvec4":this.value.type===T?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return Fu(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return null===this._matrixUniform&&(this._matrixUniform=fn(this.value.matrix)),this._matrixUniform.mul(qi(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?Fs.RENDER:Fs.NONE,this}setupUV(e,t){const r=this.value;return e.isFlipY()&&(r.image instanceof ImageBitmap&&!0===r.flipY||!0===r.isRenderTargetTexture||!0===r.isFramebufferTexture||!0===r.isDepthTexture)&&(t=this.sampler?t.flipY():t.setY(Gi(Pu(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;const r=this.value;if(!r||!0!==r.isTexture)throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");let s=this.uvNode;null!==s&&!0!==e.context.forceUVContext||!e.context.getUV||(s=e.context.getUV(this)),s||(s=this.getDefaultUV()),!0===this.updateMatrix&&(s=this.getTransformedUV(s)),s=this.setupUV(e,s);let i=this.levelNode;null===i&&e.context.getTextureLevel&&(i=e.context.getTextureLevel(this)),t.uvNode=s,t.levelNode=i,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,!0===this.sampler?"vec2":"ivec2")}generateSnippet(e,t,r,s,i,n,o,a){const u=this.value;let l;return l=s?e.generateTextureLevel(u,t,r,s,n):i?e.generateTextureBias(u,t,r,i,n):a?e.generateTextureGrad(u,t,r,a,n):o?e.generateTextureCompare(u,t,r,o,n):!1===this.sampler?e.generateTextureLoad(u,t,r,n):e.generateTexture(u,t,r,n),l}generate(e,t){const r=this.value,s=e.getNodeProperties(this),i=super.generate(e,"property");if("sampler"===t)return i+"_sampler";if(e.isReference(t))return i;{const n=e.getDataFromNode(this);let o=n.propertyName;if(void 0===o){const{uvNode:t,levelNode:r,biasNode:a,compareNode:u,depthNode:l,gradNode:d}=s,c=this.generateUV(e,t),h=r?r.build(e,"float"):null,p=a?a.build(e,"float"):null,g=l?l.build(e,"int"):null,m=u?u.build(e,"float"):null,f=d?[d[0].build(e,"vec2"),d[1].build(e,"vec2")]:null,y=e.getVarFromNode(this);o=e.getPropertyName(y);const x=this.generateSnippet(e,i,c,h,p,g,m,f);e.addLineFlowCode(`${o} = ${x}`,this),n.snippet=x,n.propertyName=o}let a=o;const u=this.getNodeType(e);return e.needsToWorkingColorSpace(r)&&(a=su(Au(a,u),r.colorSpace).setup(e).build(e,u)),e.format(a,u,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){return console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead."),this.sample(e)}sample(e){const t=this.clone();return t.uvNode=Ci(e),t.referenceNode=this.getSelf(),Ci(t)}blur(e){const t=this.clone();return t.biasNode=Ci(e).mul(Lu(t)),t.referenceNode=this.getSelf(),Ci(t)}level(e){const t=this.clone();return t.levelNode=Ci(e),t.referenceNode=this.getSelf(),Ci(t)}size(e){return Pu(this,e)}bias(e){const t=this.clone();return t.biasNode=Ci(e),t.referenceNode=this.getSelf(),Ci(t)}compare(e){const t=this.clone();return t.compareNode=Ci(e),t.referenceNode=this.getSelf(),Ci(t)}grad(e,t){const r=this.clone();return r.gradNode=[Ci(e),Ci(t)],r.referenceNode=this.getSelf(),Ci(r)}depth(e){const t=this.clone();return t.depthNode=Ci(e),t.referenceNode=this.getSelf(),Ci(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;null!==t&&(t.value=e.matrix),!0===e.matrixAutoUpdate&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e}}const Vu=Bi(Du),Ou=(...e)=>Vu(...e).setSampler(!1);class Gu extends mn{static get type(){return"BufferNode"}constructor(e,t,r=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=r}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const ku=(e,t,r)=>Ci(new Gu(e,t,r));class zu extends ks{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),r=this.getNodeType(),s=this.node.getPaddedType();return e.format(t,s,r)}}class $u extends Gu{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=null===t?Rs(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=Fs.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const e=this.elementType;let t="vec4";return"mat2"===e?t="mat2":!0===/mat/.test(e)?t="mat4":"i"===e.charAt(0)?t="ivec4":"u"===e.charAt(0)&&(t="uvec4"),t}update(){const{array:e,value:t}=this,r=this.elementType;if("float"===r||"int"===r||"uint"===r)for(let r=0;r<e.length;r++){t[4*r]=e[r]}else if("color"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.r,t[s+1]=i.g,t[s+2]=i.b||0}else if("mat2"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+3]=i.elements[3]}else if("mat3"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+4]=i.elements[3],t[s+5]=i.elements[4],t[s+6]=i.elements[5],t[s+8]=i.elements[6],t[s+9]=i.elements[7],t[s+10]=i.elements[8],t[s+15]=1}else if("mat4"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];for(let e=0;e<i.elements.length;e++)t[s+e]=i.elements[e]}else for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.x,t[s+1]=i.y,t[s+2]=i.z||0,t[s+3]=i.w||0}}setup(e){const t=this.array.length,r=this.elementType;let s=Float32Array;const i=this.paddedType,n=e.getTypeLength(i);return"i"===r.charAt(0)&&(s=Int32Array),"u"===r.charAt(0)&&(s=Uint32Array),this.value=new s(t*n),this.bufferCount=t,this.bufferType=i,super.setup(e)}element(e){return Ci(new zu(this,Ci(e)))}}const Wu=(e,t)=>Ci(new $u(e,t)),Hu=fn(0,"uint").setGroup(cn("cameraIndex")).toVarying("v_cameraIndex"),ju=fn("float").label("cameraNear").setGroup(pn).onRenderUpdate((({camera:e})=>e.near)),qu=fn("float").label("cameraFar").setGroup(pn).onRenderUpdate((({camera:e})=>e.far)),Xu=Ui((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.projectionMatrix);t=Wu(r).setGroup(pn).label("cameraProjectionMatrices").element(Hu).toVar("cameraProjectionMatrix")}else t=fn("mat4").label("cameraProjectionMatrix").setGroup(pn).onRenderUpdate((({camera:e})=>e.projectionMatrix));return t})).once()(),Ku=fn("mat4").label("cameraProjectionMatrixInverse").setGroup(pn).onRenderUpdate((({camera:e})=>e.projectionMatrixInverse)),Yu=Ui((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.matrixWorldInverse);t=Wu(r).setGroup(pn).label("cameraViewMatrices").element(Hu).toVar("cameraViewMatrix")}else t=fn("mat4").label("cameraViewMatrix").setGroup(pn).onRenderUpdate((({camera:e})=>e.matrixWorldInverse));return t})).once()(),Qu=fn("mat4").label("cameraWorldMatrix").setGroup(pn).onRenderUpdate((({camera:e})=>e.matrixWorld)),Zu=fn("mat3").label("cameraNormalMatrix").setGroup(pn).onRenderUpdate((({camera:e})=>e.normalMatrix)),Ju=fn(new r).label("cameraPosition").setGroup(pn).onRenderUpdate((({camera:e},t)=>t.value.setFromMatrixPosition(e.matrixWorld))),el=new _;class tl extends Gs{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=Fs.OBJECT,this._uniformNode=new mn(null)}getNodeType(){const e=this.scope;return e===tl.WORLD_MATRIX?"mat4":e===tl.POSITION||e===tl.VIEW_POSITION||e===tl.DIRECTION||e===tl.SCALE?"vec3":e===tl.RADIUS?"float":void 0}update(e){const t=this.object3d,s=this._uniformNode,i=this.scope;if(i===tl.WORLD_MATRIX)s.value=t.matrixWorld;else if(i===tl.POSITION)s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld);else if(i===tl.SCALE)s.value=s.value||new r,s.value.setFromMatrixScale(t.matrixWorld);else if(i===tl.DIRECTION)s.value=s.value||new r,t.getWorldDirection(s.value);else if(i===tl.VIEW_POSITION){const i=e.camera;s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld),s.value.applyMatrix4(i.matrixWorldInverse)}else if(i===tl.RADIUS){const r=e.object.geometry;null===r.boundingSphere&&r.computeBoundingSphere(),el.copy(r.boundingSphere).applyMatrix4(t.matrixWorld),s.value=el.radius}}generate(e){const t=this.scope;return t===tl.WORLD_MATRIX?this._uniformNode.nodeType="mat4":t===tl.POSITION||t===tl.VIEW_POSITION||t===tl.DIRECTION||t===tl.SCALE?this._uniformNode.nodeType="vec3":t===tl.RADIUS&&(this._uniformNode.nodeType="float"),this._uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}tl.WORLD_MATRIX="worldMatrix",tl.POSITION="position",tl.SCALE="scale",tl.VIEW_POSITION="viewPosition",tl.DIRECTION="direction",tl.RADIUS="radius";const rl=Bi(tl,tl.DIRECTION),sl=Bi(tl,tl.WORLD_MATRIX),il=Bi(tl,tl.POSITION),nl=Bi(tl,tl.SCALE),ol=Bi(tl,tl.VIEW_POSITION),al=Bi(tl,tl.RADIUS);class ul extends tl{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const ll=Fi(ul,ul.DIRECTION),dl=Fi(ul,ul.WORLD_MATRIX),cl=Fi(ul,ul.POSITION),hl=Fi(ul,ul.SCALE),pl=Fi(ul,ul.VIEW_POSITION),gl=Fi(ul,ul.RADIUS),ml=fn(new n).onObjectUpdate((({object:e},t)=>t.value.getNormalMatrix(e.matrixWorld))),fl=fn(new o).onObjectUpdate((({object:e},t)=>t.value.copy(e.matrixWorld).invert())),yl=Ui((e=>e.renderer.nodes.modelViewMatrix||xl)).once()().toVar("modelViewMatrix"),xl=Yu.mul(dl),bl=Ui((e=>(e.context.isHighPrecisionModelViewMatrix=!0,fn("mat4").onObjectUpdate((({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))))).once()().toVar("highpModelViewMatrix"),Tl=Ui((e=>{const t=e.context.isHighPrecisionModelViewMatrix;return fn("mat3").onObjectUpdate((({object:e,camera:r})=>(!0!==t&&e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix))))})).once()().toVar("highpModelNormalViewMatrix"),_l=Bu("position","vec3"),vl=_l.toVarying("positionLocal"),Nl=_l.toVarying("positionPrevious"),Sl=dl.mul(vl).xyz.toVarying("v_positionWorld").context({needsPositionReassign:!0}),Rl=vl.transformDirection(dl).toVarying("v_positionWorldDirection").normalize().toVar("positionWorldDirection").context({needsPositionReassign:!0}),Al=Ui((e=>e.context.setupPositionView()),"vec3").once()().toVarying("v_positionView").context({needsPositionReassign:!0}),El=Al.negate().toVarying("v_positionViewDirection").normalize().toVar("positionViewDirection");class Cl extends Gs{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){const{renderer:t,material:r}=e;return t.coordinateSystem===l&&r.side===v?"false":e.getFrontFacing()}}const wl=Fi(Cl),Ml=Oi(wl).mul(2).sub(1),Bl=Bu("normal","vec3"),Fl=Ui((e=>!1===e.geometry.hasAttribute("normal")?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),qi(0,1,0)):Bl),"vec3").once()().toVar("normalLocal"),Ul=Al.dFdx().cross(Al.dFdy()).normalize().toVar("normalFlat"),Pl=Ui((e=>{let t;return t=!0===e.material.flatShading?Ul:qa(Gl(Fl),"v_normalView").normalize(),t}),"vec3").once()().toVar("normalView"),Il=qa(Pl.transformDirection(Yu),"v_normalWorld").normalize().toVar("normalWorld"),Ll=Ui((e=>e.context.setupNormal().context({getUV:null})),"vec3").once()().mul(Ml).toVar("transformedNormalView"),Dl=Ll.transformDirection(Yu).toVar("transformedNormalWorld"),Vl=Ui((e=>e.context.setupClearcoatNormal().context({getUV:null})),"vec3").once()().mul(Ml).toVar("transformedClearcoatNormalView"),Ol=Ui((([e,t=dl])=>{const r=rn(t),s=e.div(qi(r[0].dot(r[0]),r[1].dot(r[1]),r[2].dot(r[2])));return r.mul(s).xyz})),Gl=Ui((([e],t)=>{const r=t.renderer.nodes.modelNormalViewMatrix;if(null!==r)return r.transformDirection(e);const s=ml.mul(e);return Yu.transformDirection(s)})),kl=new N,zl=new o,$l=fn(0).onReference((({material:e})=>e)).onObjectUpdate((({material:e})=>e.refractionRatio)),Wl=fn(1).onReference((({material:e})=>e)).onObjectUpdate((function({material:e,scene:t}){return e.envMap?e.envMapIntensity:t.environmentIntensity})),Hl=fn(new o).onReference((function(e){return e.material})).onObjectUpdate((function({material:e,scene:t}){const r=null!==t.environment&&null===e.envMap?t.environmentRotation:e.envMapRotation;return r?(kl.copy(r),zl.makeRotationFromEuler(kl)):zl.identity(),zl})),jl=El.negate().reflect(Ll),ql=El.negate().refract(Ll,$l),Xl=jl.transformDirection(Yu).toVar("reflectVector"),Kl=ql.transformDirection(Yu).toVar("reflectVector");class Yl extends Du{static get type(){return"CubeTextureNode"}constructor(e,t=null,r=null,s=null){super(e,t,r,s),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===S?Xl:e.mapping===R?Kl:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),qi(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return e.renderer.coordinateSystem!==d&&r.isRenderTargetTexture||(t=qi(t.x.negate(),t.yz)),Hl.mul(t)}generateUV(e,t){return t.build(e,"vec3")}}const Ql=Bi(Yl);class Zl extends ks{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}}class Jl extends Gs{static get type(){return"ReferenceNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.name=null,this.updateType=Fs.OBJECT}element(e){return Ci(new Zl(this,Ci(e)))}setGroup(e){return this.group=e,this}label(e){return this.name=e,this}setNodeType(e){let t=null;t=null!==this.count?ku(null,e,this.count):Array.isArray(this.getValueFromReference())?Wu(null,e):"texture"===e?Vu(null):"cubeTexture"===e?Ql(null):fn(null,e),null!==this.group&&t.setGroup(this.group),null!==this.name&&t.label(this.name),this.node=t.getSelf()}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const ed=(e,t,r)=>Ci(new Jl(e,t,r)),td=(e,t,r,s)=>Ci(new Jl(e,t,s,r));class rd extends Jl{static get type(){return"MaterialReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.material=r,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=null!==this.material?this.material:e.material,this.reference}}const sd=(e,t,r=null)=>Ci(new rd(e,t,r)),id=Ui((e=>(!1===e.geometry.hasAttribute("tangent")&&e.geometry.computeTangents(),Bu("tangent","vec4"))))(),nd=id.xyz.toVar("tangentLocal"),od=yl.mul(Qi(nd,0)).xyz.toVarying("v_tangentView").normalize().toVar("tangentView"),ad=od.transformDirection(Yu).toVarying("v_tangentWorld").normalize().toVar("tangentWorld"),ud=od.toVar("transformedTangentView"),ld=ud.transformDirection(Yu).normalize().toVar("transformedTangentWorld"),dd=e=>e.mul(id.w).xyz,cd=qa(dd(Bl.cross(id)),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),hd=qa(dd(Fl.cross(nd)),"v_bitangentLocal").normalize().toVar("bitangentLocal"),pd=qa(dd(Pl.cross(od)),"v_bitangentView").normalize().toVar("bitangentView"),gd=qa(dd(Il.cross(ad)),"v_bitangentWorld").normalize().toVar("bitangentWorld"),md=dd(Ll.cross(ud)).normalize().toVar("transformedBitangentView"),fd=md.transformDirection(Yu).normalize().toVar("transformedBitangentWorld"),yd=rn(od,pd,Pl),xd=El.mul(yd),bd=(()=>{let e=Pn.cross(El);return e=e.cross(Pn).normalize(),e=Na(e,Ll,Fn.mul(vn.oneMinus()).oneMinus().pow2().pow2()).normalize(),e})(),Td=Ui((e=>{const{eye_pos:t,surf_norm:r,mapN:s,uv:i}=e,n=t.dFdx(),o=t.dFdy(),a=i.dFdx(),u=i.dFdy(),l=r,d=o.cross(l),c=l.cross(n),h=d.mul(a.x).add(c.mul(u.x)),p=d.mul(a.y).add(c.mul(u.y)),g=h.dot(h).max(p.dot(p)),m=Ml.mul(g.inverseSqrt());return Jn(h.mul(s.x,m),p.mul(s.y,m),l.mul(s.z)).normalize()}));class _d extends $s{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=A}setup(e){const{normalMapType:t,scaleNode:r}=this;let s=this.node.mul(2).sub(1);null!==r&&(s=qi(s.xy.mul(r),s.z));let i=null;if(t===E)i=Gl(s);else if(t===A){i=!0===e.hasGeometryAttribute("tangent")?yd.mul(s).normalize():Td({eye_pos:Al,surf_norm:Pl,mapN:s,uv:Fu()})}return i}}const vd=Bi(_d),Nd=Ui((({textureNode:e,bumpScale:t})=>{const r=t=>e.cache().context({getUV:e=>t(e.uvNode||Fu()),forceUVContext:!0}),s=Oi(r((e=>e)));return $i(Oi(r((e=>e.add(e.dFdx())))).sub(s),Oi(r((e=>e.add(e.dFdy())))).sub(s)).mul(t)})),Sd=Ui((e=>{const{surf_pos:t,surf_norm:r,dHdxy:s}=e,i=t.dFdx().normalize(),n=r,o=t.dFdy().normalize().cross(n),a=n.cross(i),u=i.dot(o).mul(Ml),l=u.sign().mul(s.x.mul(o).add(s.y.mul(a)));return u.abs().mul(r).sub(l).normalize()}));class Rd extends $s{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=null!==this.scaleNode?this.scaleNode:1,t=Nd({textureNode:this.textureNode,bumpScale:e});return Sd({surf_pos:Al,surf_norm:Pl,dHdxy:t})}}const Ad=Bi(Rd),Ed=new Map;class Cd extends Gs{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let r=Ed.get(e);return void 0===r&&(r=sd(e,t),Ed.set(e,r)),r}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache("map"===e?"map":e+"Map","texture")}setup(e){const t=e.context.material,r=this.scope;let s=null;if(r===Cd.COLOR){const e=void 0!==t.color?this.getColor(r):qi();s=t.map&&!0===t.map.isTexture?e.mul(this.getTexture("map")):e}else if(r===Cd.OPACITY){const e=this.getFloat(r);s=t.alphaMap&&!0===t.alphaMap.isTexture?e.mul(this.getTexture("alpha")):e}else if(r===Cd.SPECULAR_STRENGTH)s=t.specularMap&&!0===t.specularMap.isTexture?this.getTexture("specular").r:Oi(1);else if(r===Cd.SPECULAR_INTENSITY){const e=this.getFloat(r);s=t.specularIntensityMap&&!0===t.specularIntensityMap.isTexture?e.mul(this.getTexture(r).a):e}else if(r===Cd.SPECULAR_COLOR){const e=this.getColor(r);s=t.specularColorMap&&!0===t.specularColorMap.isTexture?e.mul(this.getTexture(r).rgb):e}else if(r===Cd.ROUGHNESS){const e=this.getFloat(r);s=t.roughnessMap&&!0===t.roughnessMap.isTexture?e.mul(this.getTexture(r).g):e}else if(r===Cd.METALNESS){const e=this.getFloat(r);s=t.metalnessMap&&!0===t.metalnessMap.isTexture?e.mul(this.getTexture(r).b):e}else if(r===Cd.EMISSIVE){const e=this.getFloat("emissiveIntensity"),i=this.getColor(r).mul(e);s=t.emissiveMap&&!0===t.emissiveMap.isTexture?i.mul(this.getTexture(r)):i}else if(r===Cd.NORMAL)t.normalMap?(s=vd(this.getTexture("normal"),this.getCache("normalScale","vec2")),s.normalMapType=t.normalMapType):s=t.bumpMap?Ad(this.getTexture("bump").r,this.getFloat("bumpScale")):Pl;else if(r===Cd.CLEARCOAT){const e=this.getFloat(r);s=t.clearcoatMap&&!0===t.clearcoatMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===Cd.CLEARCOAT_ROUGHNESS){const e=this.getFloat(r);s=t.clearcoatRoughnessMap&&!0===t.clearcoatRoughnessMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===Cd.CLEARCOAT_NORMAL)s=t.clearcoatNormalMap?vd(this.getTexture(r),this.getCache(r+"Scale","vec2")):Pl;else if(r===Cd.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));s=t.sheenColorMap&&!0===t.sheenColorMap.isTexture?e.mul(this.getTexture("sheenColor").rgb):e}else if(r===Cd.SHEEN_ROUGHNESS){const e=this.getFloat(r);s=t.sheenRoughnessMap&&!0===t.sheenRoughnessMap.isTexture?e.mul(this.getTexture(r).a):e,s=s.clamp(.07,1)}else if(r===Cd.ANISOTROPY)if(t.anisotropyMap&&!0===t.anisotropyMap.isTexture){const e=this.getTexture(r);s=tn(hc.x,hc.y,hc.y.negate(),hc.x).mul(e.rg.mul(2).sub($i(1)).normalize().mul(e.b))}else s=hc;else if(r===Cd.IRIDESCENCE_THICKNESS){const e=ed("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const i=ed("0","float",t.iridescenceThicknessRange);s=e.sub(i).mul(this.getTexture(r).g).add(i)}else s=e}else if(r===Cd.TRANSMISSION){const e=this.getFloat(r);s=t.transmissionMap?e.mul(this.getTexture(r).r):e}else if(r===Cd.THICKNESS){const e=this.getFloat(r);s=t.thicknessMap?e.mul(this.getTexture(r).g):e}else if(r===Cd.IOR)s=this.getFloat(r);else if(r===Cd.LIGHT_MAP)s=this.getTexture(r).rgb.mul(this.getFloat("lightMapIntensity"));else if(r===Cd.AO)s=this.getTexture(r).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const t=this.getNodeType(e);s=this.getCache(r,t)}return s}}Cd.ALPHA_TEST="alphaTest",Cd.COLOR="color",Cd.OPACITY="opacity",Cd.SHININESS="shininess",Cd.SPECULAR="specular",Cd.SPECULAR_STRENGTH="specularStrength",Cd.SPECULAR_INTENSITY="specularIntensity",Cd.SPECULAR_COLOR="specularColor",Cd.REFLECTIVITY="reflectivity",Cd.ROUGHNESS="roughness",Cd.METALNESS="metalness",Cd.NORMAL="normal",Cd.CLEARCOAT="clearcoat",Cd.CLEARCOAT_ROUGHNESS="clearcoatRoughness",Cd.CLEARCOAT_NORMAL="clearcoatNormal",Cd.EMISSIVE="emissive",Cd.ROTATION="rotation",Cd.SHEEN="sheen",Cd.SHEEN_ROUGHNESS="sheenRoughness",Cd.ANISOTROPY="anisotropy",Cd.IRIDESCENCE="iridescence",Cd.IRIDESCENCE_IOR="iridescenceIOR",Cd.IRIDESCENCE_THICKNESS="iridescenceThickness",Cd.IOR="ior",Cd.TRANSMISSION="transmission",Cd.THICKNESS="thickness",Cd.ATTENUATION_DISTANCE="attenuationDistance",Cd.ATTENUATION_COLOR="attenuationColor",Cd.LINE_SCALE="scale",Cd.LINE_DASH_SIZE="dashSize",Cd.LINE_GAP_SIZE="gapSize",Cd.LINE_WIDTH="linewidth",Cd.LINE_DASH_OFFSET="dashOffset",Cd.POINT_SIZE="size",Cd.DISPERSION="dispersion",Cd.LIGHT_MAP="light",Cd.AO="ao";const wd=Fi(Cd,Cd.ALPHA_TEST),Md=Fi(Cd,Cd.COLOR),Bd=Fi(Cd,Cd.SHININESS),Fd=Fi(Cd,Cd.EMISSIVE),Ud=Fi(Cd,Cd.OPACITY),Pd=Fi(Cd,Cd.SPECULAR),Id=Fi(Cd,Cd.SPECULAR_INTENSITY),Ld=Fi(Cd,Cd.SPECULAR_COLOR),Dd=Fi(Cd,Cd.SPECULAR_STRENGTH),Vd=Fi(Cd,Cd.REFLECTIVITY),Od=Fi(Cd,Cd.ROUGHNESS),Gd=Fi(Cd,Cd.METALNESS),kd=Fi(Cd,Cd.NORMAL),zd=Fi(Cd,Cd.CLEARCOAT),$d=Fi(Cd,Cd.CLEARCOAT_ROUGHNESS),Wd=Fi(Cd,Cd.CLEARCOAT_NORMAL),Hd=Fi(Cd,Cd.ROTATION),jd=Fi(Cd,Cd.SHEEN),qd=Fi(Cd,Cd.SHEEN_ROUGHNESS),Xd=Fi(Cd,Cd.ANISOTROPY),Kd=Fi(Cd,Cd.IRIDESCENCE),Yd=Fi(Cd,Cd.IRIDESCENCE_IOR),Qd=Fi(Cd,Cd.IRIDESCENCE_THICKNESS),Zd=Fi(Cd,Cd.TRANSMISSION),Jd=Fi(Cd,Cd.THICKNESS),ec=Fi(Cd,Cd.IOR),tc=Fi(Cd,Cd.ATTENUATION_DISTANCE),rc=Fi(Cd,Cd.ATTENUATION_COLOR),sc=Fi(Cd,Cd.LINE_SCALE),ic=Fi(Cd,Cd.LINE_DASH_SIZE),nc=Fi(Cd,Cd.LINE_GAP_SIZE),oc=Fi(Cd,Cd.LINE_WIDTH),ac=Fi(Cd,Cd.LINE_DASH_OFFSET),uc=Fi(Cd,Cd.POINT_SIZE),lc=Fi(Cd,Cd.DISPERSION),dc=Fi(Cd,Cd.LIGHT_MAP),cc=Fi(Cd,Cd.AO),hc=fn(new t).onReference((function(e){return e.material})).onRenderUpdate((function({material:e}){this.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation))})),pc=Ui((e=>e.context.setupModelViewProjection()),"vec4").once()().toVarying("v_modelViewProjection");class gc extends Gs{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isIndexNode=!0}generate(e){const t=this.getNodeType(e),r=this.scope;let s,i;if(r===gc.VERTEX)s=e.getVertexIndex();else if(r===gc.INSTANCE)s=e.getInstanceIndex();else if(r===gc.DRAW)s=e.getDrawIndex();else if(r===gc.INVOCATION_LOCAL)s=e.getInvocationLocalIndex();else if(r===gc.INVOCATION_SUBGROUP)s=e.getInvocationSubgroupIndex();else{if(r!==gc.SUBGROUP)throw new Error("THREE.IndexNode: Unknown scope: "+r);s=e.getSubgroupIndex()}if("vertex"===e.shaderStage||"compute"===e.shaderStage)i=s;else{i=qa(this).build(e,t)}return i}}gc.VERTEX="vertex",gc.INSTANCE="instance",gc.SUBGROUP="subgroup",gc.INVOCATION_LOCAL="invocationLocal",gc.INVOCATION_SUBGROUP="invocationSubgroup",gc.DRAW="draw";const mc=Fi(gc,gc.VERTEX),fc=Fi(gc,gc.INSTANCE),yc=Fi(gc,gc.SUBGROUP),xc=Fi(gc,gc.INVOCATION_SUBGROUP),bc=Fi(gc,gc.INVOCATION_LOCAL),Tc=Fi(gc,gc.DRAW);class _c extends Gs{static get type(){return"InstanceNode"}constructor(e,t,r){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=r,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=Fs.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:r,instanceColor:s}=this;let{instanceMatrixNode:i,instanceColorNode:n}=this;if(null===i){if(t<=1e3)i=ku(r.array,"mat4",Math.max(t,1)).element(fc);else{const e=new C(r.array,16,1);this.buffer=e;const t=r.usage===y?mu:gu,s=[t(e,"vec4",16,0),t(e,"vec4",16,4),t(e,"vec4",16,8),t(e,"vec4",16,12)];i=sn(...s)}this.instanceMatrixNode=i}if(s&&null===n){const e=new w(s.array,3),t=s.usage===y?mu:gu;this.bufferColor=e,n=qi(t(e,"vec3",3,0)),this.instanceColorNode=n}const o=i.mul(vl).xyz;if(vl.assign(o),e.hasGeometryAttribute("normal")){const e=Ol(Fl,i);Fl.assign(e)}null!==this.instanceColorNode&&bn("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==y&&null!==this.buffer&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==y&&null!==this.bufferColor&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}const vc=Bi(_c);class Nc extends _c{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:r,instanceColor:s}=e;super(t,r,s),this.instancedMesh=e}}const Sc=Bi(Nc);class Rc extends Gs{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){null===this.batchingIdNode&&(null===e.getDrawIndex()?this.batchingIdNode=fc:this.batchingIdNode=Tc);const t=Ui((([e])=>{const t=Gi(Pu(Ou(this.batchMesh._indirectTexture),0)),r=Gi(e).modInt(t),s=Gi(e).div(t);return Ou(this.batchMesh._indirectTexture,Wi(r,s)).x})).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]}),r=t(Gi(this.batchingIdNode)),s=this.batchMesh._matricesTexture,i=Pu(Ou(s),0),n=Oi(r).mul(4).toInt().toVar(),o=n.modInt(i),a=n.div(Gi(i)),u=sn(Ou(s,Wi(o,a)),Ou(s,Wi(o.add(1),a)),Ou(s,Wi(o.add(2),a)),Ou(s,Wi(o.add(3),a))),l=this.batchMesh._colorsTexture;if(null!==l){const e=Ui((([e])=>{const t=Pu(Ou(l),0).x,r=e,s=r.modInt(t),i=r.div(t);return Ou(l,Wi(s,i)).rgb})).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]}),t=e(r);bn("vec3","vBatchColor").assign(t)}const d=rn(u);vl.assign(u.mul(vl));const c=Fl.div(qi(d[0].dot(d[0]),d[1].dot(d[1]),d[2].dot(d[2]))),h=d.mul(c).xyz;Fl.assign(h),e.hasGeometryAttribute("tangent")&&nd.mulAssign(d)}}const Ac=Bi(Rc),Ec=new WeakMap;class Cc extends Gs{static get type(){return"SkinningNode"}constructor(e,t=!1){let r,s,i;super("void"),this.skinnedMesh=e,this.useReference=t,this.updateType=Fs.OBJECT,this.skinIndexNode=Bu("skinIndex","uvec4"),this.skinWeightNode=Bu("skinWeight","vec4"),t?(r=ed("bindMatrix","mat4"),s=ed("bindMatrixInverse","mat4"),i=td("skeleton.boneMatrices","mat4",e.skeleton.bones.length)):(r=fn(e.bindMatrix,"mat4"),s=fn(e.bindMatrixInverse,"mat4"),i=ku(e.skeleton.boneMatrices,"mat4",e.skeleton.bones.length)),this.bindMatrixNode=r,this.bindMatrixInverseNode=s,this.boneMatricesNode=i,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=vl){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w),d=i.mul(t),c=Jn(o.mul(s.x).mul(d),a.mul(s.y).mul(d),u.mul(s.z).mul(d),l.mul(s.w).mul(d));return n.mul(c).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=Fl){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w);let d=Jn(s.x.mul(o),s.y.mul(a),s.z.mul(u),s.w.mul(l));return d=n.mul(d).mul(i),d.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return null===this.previousBoneMatricesNode&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=td("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,Nl)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")||!0===Es(e.object).useVelocity}setup(e){this.needsPreviousBoneMatrices(e)&&Nl.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(vl.assign(t),e.hasGeometryAttribute("normal")){const t=this.getSkinnedNormal();Fl.assign(t),e.hasGeometryAttribute("tangent")&&nd.assign(t)}}generate(e,t){if("void"!==t)return vl.build(e,t)}update(e){const t=(this.useReference?e.object:this.skinnedMesh).skeleton;Ec.get(t)!==e.frameId&&(Ec.set(t,e.frameId),null!==this.previousBoneMatricesNode&&t.previousBoneMatrices.set(t.boneMatrices),t.update())}}const wc=e=>Ci(new Cc(e,!0));class Mc extends Gs{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode("i".charCodeAt(0)+e)}getProperties(e){const t=e.getNodeProperties(this);if(void 0!==t.stackNode)return t;const r={};for(let e=0,t=this.params.length-1;e<t;e++){const t=this.params[e],s=!0!==t.isNode&&t.name||this.getVarName(e),i=!0!==t.isNode&&t.type||"int";r[s]=Au(s,i)}const s=e.addStack();return t.returnsNode=this.params[this.params.length-1](r,s,e),t.stackNode=s,e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),r=this.params,s=t.stackNode;for(let t=0,s=r.length-1;t<s;t++){const s=r[t];let i=null,n=null,o=null,a=null,u=null,l=null;s.isNode?(a="int",o=this.getVarName(t),i="0",n=s.build(e,a),u="<"):(a=s.type||"int",o=s.name||this.getVarName(t),i=s.start,n=s.end,u=s.condition,l=s.update,"number"==typeof i?i=e.generateConst(a,i):i&&i.isNode&&(i=i.build(e,a)),"number"==typeof n?n=e.generateConst(a,n):n&&n.isNode&&(n=n.build(e,a)),void 0!==i&&void 0===n?(i+=" - 1",n="0",u=">="):void 0!==n&&void 0===i&&(i="0",u="<"),void 0===u&&(u=Number(i)>Number(n)?">=":"<"));const d={start:i,end:n},c=d.start,h=d.end;let p="",g="",m="";l||(l="int"===a||"uint"===a?u.includes("<")?"++":"--":u.includes("<")?"+= 1.":"-= 1."),p+=e.getVar(a,o)+" = "+c,g+=o+" "+u+" "+h,m+=o+" "+l;const f=`for ( ${p}; ${g}; ${m} )`;e.addFlowCode((0===t?"\n":"")+e.tab+f+" {\n\n").addFlowTab()}const i=s.build(e,"void"),n=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode("\n"+e.tab+i);for(let t=0,r=this.params.length-1;t<r;t++)e.addFlowCode((0===t?"":e.tab)+"}\n\n").removeFlowTab();return e.addFlowTab(),n}}const Bc=(...e)=>Ci(new Mc(Mi(e,"int"))).append(),Fc=()=>Au("break").append(),Uc=new WeakMap,Pc=new s,Ic=Ui((({bufferMap:e,influence:t,stride:r,width:s,depth:i,offset:n})=>{const o=Gi(mc).mul(r).add(n),a=o.div(s),u=o.sub(a.mul(s));return Ou(e,Wi(u,a)).depth(i).mul(t)}));class Lc extends Gs{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=fn(1),this.updateType=Fs.OBJECT}setup(e){const{geometry:r}=e,s=void 0!==r.morphAttributes.position,i=r.hasAttribute("normal")&&void 0!==r.morphAttributes.normal,n=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,o=void 0!==n?n.length:0,{texture:a,stride:u,size:l}=function(e){const r=void 0!==e.morphAttributes.position,s=void 0!==e.morphAttributes.normal,i=void 0!==e.morphAttributes.color,n=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=void 0!==n?n.length:0;let a=Uc.get(e);if(void 0===a||a.count!==o){void 0!==a&&a.texture.dispose();const u=e.morphAttributes.position||[],l=e.morphAttributes.normal||[],d=e.morphAttributes.color||[];let c=0;!0===r&&(c=1),!0===s&&(c=2),!0===i&&(c=3);let h=e.attributes.position.count*c,p=1;const g=4096;h>g&&(p=Math.ceil(h/g),h=g);const m=new Float32Array(h*p*4*o),f=new M(m,h,p,o);f.type=B,f.needsUpdate=!0;const y=4*c;for(let b=0;b<o;b++){const T=u[b],_=l[b],v=d[b],N=h*p*4*b;for(let S=0;S<T.count;S++){const R=S*y;!0===r&&(Pc.fromBufferAttribute(T,S),m[N+R+0]=Pc.x,m[N+R+1]=Pc.y,m[N+R+2]=Pc.z,m[N+R+3]=0),!0===s&&(Pc.fromBufferAttribute(_,S),m[N+R+4]=Pc.x,m[N+R+5]=Pc.y,m[N+R+6]=Pc.z,m[N+R+7]=0),!0===i&&(Pc.fromBufferAttribute(v,S),m[N+R+8]=Pc.x,m[N+R+9]=Pc.y,m[N+R+10]=Pc.z,m[N+R+11]=4===v.itemSize?Pc.w:1)}}function x(){f.dispose(),Uc.delete(e),e.removeEventListener("dispose",x)}a={count:o,texture:f,stride:c,size:new t(h,p)},Uc.set(e,a),e.addEventListener("dispose",x)}return a}(r);!0===s&&vl.mulAssign(this.morphBaseInfluence),!0===i&&Fl.mulAssign(this.morphBaseInfluence);const d=Gi(l.width);Bc(o,(({i:e})=>{const t=Oi(0).toVar();this.mesh.count>1&&null!==this.mesh.morphTexture&&void 0!==this.mesh.morphTexture?t.assign(Ou(this.mesh.morphTexture,Wi(Gi(e).add(1),Gi(fc))).r):t.assign(ed("morphTargetInfluences","float").element(e).toVar()),!0===s&&vl.addAssign(Ic({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Gi(0)})),!0===i&&Fl.addAssign(Ic({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Gi(1)}))}))}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce(((e,t)=>e+t),0)}}const Dc=Bi(Lc);class Vc extends Gs{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}}class Oc extends Vc{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class Gc extends Va{static get type(){return"LightingContextNode"}constructor(e,t=null,r=null,s=null){super(e),this.lightingModel=t,this.backdropNode=r,this.backdropAlphaNode=s,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,r={directDiffuse:qi().toVar("directDiffuse"),directSpecular:qi().toVar("directSpecular"),indirectDiffuse:qi().toVar("indirectDiffuse"),indirectSpecular:qi().toVar("indirectSpecular")};return{radiance:qi().toVar("radiance"),irradiance:qi().toVar("irradiance"),iblIrradiance:qi().toVar("iblIrradiance"),ambientOcclusion:Oi(1).toVar("ambientOcclusion"),reflectedLight:r,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const kc=Bi(Gc);class zc extends Vc{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let $c,Wc;class Hc extends Gs{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===Hc.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=Fs.NONE;return this.scope!==Hc.SIZE&&this.scope!==Hc.VIEWPORT||(e=Fs.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===Hc.VIEWPORT?null!==t?Wc.copy(t.viewport):(e.getViewport(Wc),Wc.multiplyScalar(e.getPixelRatio())):null!==t?($c.width=t.width,$c.height=t.height):e.getDrawingBufferSize($c)}setup(){const e=this.scope;let r=null;return r=e===Hc.SIZE?fn($c||($c=new t)):e===Hc.VIEWPORT?fn(Wc||(Wc=new s)):$i(Xc.div(qc)),r}generate(e){if(this.scope===Hc.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const r=e.getNodeProperties(qc).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${r}.y - ${t}.y )`}return t}return super.generate(e)}}Hc.COORDINATE="coordinate",Hc.VIEWPORT="viewport",Hc.SIZE="size",Hc.UV="uv";const jc=Fi(Hc,Hc.UV),qc=Fi(Hc,Hc.SIZE),Xc=Fi(Hc,Hc.COORDINATE),Kc=Fi(Hc,Hc.VIEWPORT),Yc=Kc.zw,Qc=Xc.sub(Kc.xy),Zc=Qc.div(Yc),Jc=Ui((()=>(console.warn('TSL.ViewportNode: "viewportResolution" is deprecated. Use "screenSize" instead.'),qc)),"vec2").once()(),eh=Ui((()=>(console.warn('TSL.ViewportNode: "viewportTopLeft" is deprecated. Use "screenUV" instead.'),jc)),"vec2").once()(),th=Ui((()=>(console.warn('TSL.ViewportNode: "viewportBottomLeft" is deprecated. Use "screenUV.flipY()" instead.'),jc.flipY())),"vec2").once()(),rh=new t;class sh extends Du{static get type(){return"ViewportTextureNode"}constructor(e=jc,t=null,r=null){null===r&&((r=new F).minFilter=U),super(r,e,t),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=Fs.FRAME}updateBefore(e){const t=e.renderer;t.getDrawingBufferSize(rh);const r=this.value;r.image.width===rh.width&&r.image.height===rh.height||(r.image.width=rh.width,r.image.height=rh.height,r.needsUpdate=!0);const s=r.generateMipmaps;r.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(r),r.generateMipmaps=s}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const ih=Bi(sh),nh=Bi(sh,null,null,{generateMipmaps:!0});let oh=null;class ah extends sh{static get type(){return"ViewportDepthTextureNode"}constructor(e=jc,t=null){null===oh&&(oh=new P),super(e,t,oh)}}const uh=Bi(ah);class lh extends Gs{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===lh.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,r=this.valueNode;let s=null;if(t===lh.DEPTH_BASE)null!==r&&(s=gh().assign(r));else if(t===lh.DEPTH)s=e.isPerspectiveCamera?ch(Al.z,ju,qu):dh(Al.z,ju,qu);else if(t===lh.LINEAR_DEPTH)if(null!==r)if(e.isPerspectiveCamera){const e=hh(r,ju,qu);s=dh(e,ju,qu)}else s=r;else s=dh(Al.z,ju,qu);return s}}lh.DEPTH_BASE="depthBase",lh.DEPTH="depth",lh.LINEAR_DEPTH="linearDepth";const dh=(e,t,r)=>e.add(t).div(t.sub(r)),ch=(e,t,r)=>t.add(e).mul(r).div(r.sub(t).mul(e)),hh=(e,t,r)=>t.mul(r).div(r.sub(t).mul(e).sub(r)),ph=(e,t,r)=>{t=t.max(1e-6).toVar();const s=Po(e.negate().div(t)),i=Po(r.div(t));return s.div(i)},gh=Bi(lh,lh.DEPTH_BASE),mh=Fi(lh,lh.DEPTH),fh=Bi(lh,lh.LINEAR_DEPTH),yh=fh(uh());mh.assign=e=>gh(e);const xh=Bi(class extends Gs{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}});class bh extends Gs{static get type(){return"ClippingNode"}constructor(e=bh.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:r,unionPlanes:s}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===bh.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(r,s):this.scope===bh.HARDWARE?this.setupHardwareClipping(s,e):this.setupDefault(r,s)}setupAlphaToCoverage(e,t){return Ui((()=>{const r=Oi().toVar("distanceToPlane"),s=Oi().toVar("distanceToGradient"),i=Oi(1).toVar("clipOpacity"),n=t.length;if(!1===this.hardwareClipping&&n>0){const e=Wu(t);Bc(n,(({i:t})=>{const n=e.element(t);r.assign(Al.dot(n.xyz).negate().add(n.w)),s.assign(r.fwidth().div(2)),i.mulAssign(Ea(s.negate(),s,r))}))}const o=e.length;if(o>0){const t=Wu(e),n=Oi(1).toVar("intersectionClipOpacity");Bc(o,(({i:e})=>{const i=t.element(e);r.assign(Al.dot(i.xyz).negate().add(i.w)),s.assign(r.fwidth().div(2)),n.mulAssign(Ea(s.negate(),s,r).oneMinus())})),i.mulAssign(n.oneMinus())}Tn.a.mulAssign(i),Tn.a.equal(0).discard()}))()}setupDefault(e,t){return Ui((()=>{const r=t.length;if(!1===this.hardwareClipping&&r>0){const e=Wu(t);Bc(r,(({i:t})=>{const r=e.element(t);Al.dot(r.xyz).greaterThan(r.w).discard()}))}const s=e.length;if(s>0){const t=Wu(e),r=zi(!0).toVar("clipped");Bc(s,(({i:e})=>{const s=t.element(e);r.assign(Al.dot(s.xyz).greaterThan(s.w).and(r))})),r.discard()}}))()}setupHardwareClipping(e,t){const r=e.length;return t.enableHardwareClipping(r),Ui((()=>{const s=Wu(e),i=xh(t.getClipDistance());Bc(r,(({i:e})=>{const t=s.element(e),r=Al.dot(t.xyz).sub(t.w).negate();i.element(e).assign(r)}))}))()}}bh.ALPHA_TO_COVERAGE="alphaToCoverage",bh.DEFAULT="default",bh.HARDWARE="hardware";const Th=Ui((([e])=>Go(to(1e4,ko(to(17,e.x).add(to(.1,e.y)))).mul(Jn(.1,qo(ko(to(13,e.y).add(e.x)))))))),_h=Ui((([e])=>Th($i(Th(e.xy),e.z)))),vh=Ui((([e])=>{const t=ua(Ko(Zo(e.xyz)),Ko(Jo(e.xyz))),r=Oi(1).div(Oi(.05).mul(t)).toVar("pixScale"),s=$i(Fo(Do(Po(r))),Fo(Vo(Po(r)))),i=$i(_h(Do(s.x.mul(e.xyz))),_h(Do(s.y.mul(e.xyz)))),n=Go(Po(r)),o=Jn(to(n.oneMinus(),i.x),to(n,i.y)),a=aa(n,n.oneMinus()),u=qi(o.mul(o).div(to(2,a).mul(eo(1,a))),o.sub(to(.5,a)).div(eo(1,a)),eo(1,eo(1,o).mul(eo(1,o)).div(to(2,a).mul(eo(1,a))))),l=o.lessThan(a.oneMinus()).select(o.lessThan(a).select(u.x,u.y),u.z);return Sa(l,1e-6,1)})).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]});class Nh extends I{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.shadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+xs(this)}build(e){this.setup(e)}setupObserver(e){return new ps(e)}setup(e){e.context.setupNormal=()=>this.setupNormal(e),e.context.setupPositionView=()=>this.setupPositionView(e),e.context.setupModelViewProjection=()=>this.setupModelViewProjection(e);const t=e.renderer,r=t.getRenderTarget();e.addStack();const s=this.vertexNode||this.setupVertex(e);let i;e.stack.outputNode=s,this.setupHardwareClipping(e),null!==this.geometryNode&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();const n=this.setupClipping(e);if(!0!==this.depthWrite&&!0!==this.depthTest||(null!==r?!0===r.depthBuffer&&this.setupDepth(e):!0===t.depth&&this.setupDepth(e)),null===this.fragmentNode){this.setupDiffuseColor(e),this.setupVariants(e);const s=this.setupLighting(e);null!==n&&e.stack.add(n);const o=Qi(s,Tn.a).max(0);i=this.setupOutput(e,o),Vn.assign(i);const a=null!==this.outputNode;if(a&&(i=this.outputNode),null!==r){const e=t.getMRT(),r=this.mrtNode;null!==e?(a&&Vn.assign(i),i=e,null!==r&&(i=e.merge(r))):null!==r&&(i=r)}}else{let t=this.fragmentNode;!0!==t.isOutputStructNode&&(t=Qi(t)),i=this.setupOutput(e,t)}e.stack.outputNode=i,e.addFlow("fragment",e.removeStack()),e.observer=this.setupObserver(e)}setupClipping(e){if(null===e.clippingContext)return null;const{unionPlanes:t,intersectionPlanes:r}=e.clippingContext;let s=null;if(t.length>0||r.length>0){const t=e.renderer.samples;this.alphaToCoverage&&t>1?s=Ci(new bh(bh.ALPHA_TO_COVERAGE)):e.stack.add(Ci(new bh))}return s}setupHardwareClipping(e){if(this.hardwareClipping=!1,null===e.clippingContext)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(Ci(new bh(bh.HARDWARE))),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:r}=e;let s=this.depthNode;if(null===s){const e=t.getMRT();e&&e.has("depth")?s=e.get("depth"):!0===t.logarithmicDepthBuffer&&(s=r.isPerspectiveCamera?ph(Al.z,ju,qu):dh(Al.z,ju,qu))}null!==s&&mh.assign(s).append()}setupPositionView(){return yl.mul(vl).xyz}setupModelViewProjection(){return Xu.mul(Al)}setupVertex(e){return e.addStack(),this.setupPosition(e),e.context.vertex=e.removeStack(),pc}setupPosition(e){const{object:t,geometry:r}=e;if((r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color)&&Dc(t).append(),!0===t.isSkinnedMesh&&wc(t).append(),this.displacementMap){const e=sd("displacementMap","texture"),t=sd("displacementScale","float"),r=sd("displacementBias","float");vl.addAssign(Fl.normalize().mul(e.x.mul(t).add(r)))}return t.isBatchedMesh&&Ac(t).append(),t.isInstancedMesh&&t.instanceMatrix&&!0===t.instanceMatrix.isInstancedBufferAttribute&&Sc(t).append(),null!==this.positionNode&&vl.assign(this.positionNode.context({isPositionNodeInput:!0})),vl}setupDiffuseColor({object:e,geometry:t}){let r=this.colorNode?Qi(this.colorNode):Md;if(!0===this.vertexColors&&t.hasAttribute("color")&&(r=Qi(r.xyz.mul(Bu("color","vec3")),r.a)),e.instanceColor){r=bn("vec3","vInstanceColor").mul(r)}if(e.isBatchedMesh&&e._colorsTexture){r=bn("vec3","vBatchColor").mul(r)}Tn.assign(r);const s=this.opacityNode?Oi(this.opacityNode):Ud;if(Tn.a.assign(Tn.a.mul(s)),null!==this.alphaTestNode||this.alphaTest>0){const e=null!==this.alphaTestNode?Oi(this.alphaTestNode):wd;Tn.a.lessThanEqual(e).discard()}!0===this.alphaHash&&Tn.a.lessThan(vh(vl)).discard(),!1===this.transparent&&this.blending===L&&!1===this.alphaToCoverage&&Tn.a.assign(1)}setupVariants(){}setupOutgoingLight(){return!0===this.lights?qi(0):Tn.rgb}setupNormal(){return this.normalNode?qi(this.normalNode):kd}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?sd("envMap","cubeTexture"):sd("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new zc(dc)),t}setupLights(e){const t=[],r=this.setupEnvironment(e);r&&r.isLightingNode&&t.push(r);const s=this.setupLightMap(e);if(s&&s.isLightingNode&&t.push(s),null!==this.aoNode||e.material.aoMap){const e=null!==this.aoNode?this.aoNode:cc;t.push(new Oc(e))}let i=this.lightsNode||e.lightsNode;return t.length>0&&(i=e.renderer.lighting.createNode([...i.getLights(),...t])),i}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:r,backdropAlphaNode:s,emissiveNode:i}=this,n=!0===this.lights||null!==this.lightsNode?this.setupLights(e):null;let o=this.setupOutgoingLight(e);if(n&&n.getScope().hasLights){const t=this.setupLightingModel(e)||null;o=kc(n,t,r,s)}else null!==r&&(o=qi(null!==s?Na(o,r,s):r));return(i&&!0===i.isNode||t.emissive&&!0===t.emissive.isColor)&&(_n.assign(qi(i||Fd)),o=o.add(_n)),o}setupFog(e,t){const r=e.fogNode;return r&&(Vn.assign(t),t=Qi(r)),t}setupOutput(e,t){return!0===this.fog&&(t=this.setupFog(e,t)),t}setDefaultValues(e){for(const t in e){const r=e[t];void 0===this[t]&&(this[t]=r,r&&r.clone&&(this[t]=r.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const e in t)void 0===Object.getOwnPropertyDescriptor(this.constructor.prototype,e)&&void 0!==t[e].get&&Object.defineProperty(this.constructor.prototype,e,t[e])}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{},nodes:{}});const r=I.prototype.toJSON.call(this,e),s=bs(this);r.inputNodes={};for(const{property:t,childNode:i}of s)r.inputNodes[t]=i.toJSON(e).uuid;function i(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(t){const t=i(e.textures),s=i(e.images),n=i(e.nodes);t.length>0&&(r.textures=t),s.length>0&&(r.images=s),n.length>0&&(r.nodes=n)}return r}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.shadowPositionNode=e.shadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const Sh=new D;class Rh extends Nh{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.setDefaultValues(Sh),this.setValues(e)}}const Ah=new V;class Eh extends Nh{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.setDefaultValues(Ah),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?Oi(this.offsetNode):ac,t=this.dashScaleNode?Oi(this.dashScaleNode):sc,r=this.dashSizeNode?Oi(this.dashSizeNode):ic,s=this.gapSizeNode?Oi(this.gapSizeNode):nc;On.assign(r),Gn.assign(s);const i=qa(Bu("lineDistance").mul(t));(e?i.add(e):i).mod(On.add(Gn)).greaterThan(On).discard()}}let Ch=null;class wh extends sh{static get type(){return"ViewportSharedTextureNode"}constructor(e=jc,t=null){null===Ch&&(Ch=new F),super(e,t,Ch)}updateReference(){return this}}const Mh=Bi(wh),Bh=new V;class Fh extends Nh{static get type(){return"Line2NodeMaterial"}constructor(e={}){super(),this.isLine2NodeMaterial=!0,this.setDefaultValues(Bh),this.useColor=e.vertexColors,this.dashOffset=0,this.lineWidth=1,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.blending=O,this._useDash=e.dashed,this._useAlphaToCoverage=!0,this._useWorldUnits=!1,this.setValues(e)}setup(e){const{renderer:t}=e,r=this._useAlphaToCoverage,s=this.useColor,i=this._useDash,n=this._useWorldUnits,o=Ui((({start:e,end:t})=>{const r=Xu.element(2).element(2),s=Xu.element(3).element(2).mul(-.5).div(r).sub(e.z).div(t.z.sub(e.z));return Qi(Na(e.xyz,t.xyz,s),t.w)})).setLayout({name:"trimSegment",type:"vec4",inputs:[{name:"start",type:"vec4"},{name:"end",type:"vec4"}]});this.vertexNode=Ui((()=>{const e=Bu("instanceStart"),t=Bu("instanceEnd"),r=Qi(yl.mul(Qi(e,1))).toVar("start"),s=Qi(yl.mul(Qi(t,1))).toVar("end");if(i){const e=this.dashScaleNode?Oi(this.dashScaleNode):sc,t=this.offsetNode?Oi(this.offsetNode):ac,r=Bu("instanceDistanceStart"),s=Bu("instanceDistanceEnd");let i=_l.y.lessThan(.5).select(e.mul(r),e.mul(s));i=i.add(t),bn("float","lineDistance").assign(i)}n&&(bn("vec3","worldStart").assign(r.xyz),bn("vec3","worldEnd").assign(s.xyz));const a=Kc.z.div(Kc.w),u=Xu.element(2).element(3).equal(-1);Li(u,(()=>{Li(r.z.lessThan(0).and(s.z.greaterThan(0)),(()=>{s.assign(o({start:r,end:s}))})).ElseIf(s.z.lessThan(0).and(r.z.greaterThanEqual(0)),(()=>{r.assign(o({start:s,end:r}))}))}));const l=Xu.mul(r),d=Xu.mul(s),c=l.xyz.div(l.w),h=d.xyz.div(d.w),p=h.xy.sub(c.xy).toVar();p.x.assign(p.x.mul(a)),p.assign(p.normalize());const g=Qi().toVar();if(n){const e=s.xyz.sub(r.xyz).normalize(),t=Na(r.xyz,s.xyz,.5).normalize(),n=e.cross(t).normalize(),o=e.cross(n),a=bn("vec4","worldPos");a.assign(_l.y.lessThan(.5).select(r,s));const u=oc.mul(.5);a.addAssign(Qi(_l.x.lessThan(0).select(n.mul(u),n.mul(u).negate()),0)),i||(a.addAssign(Qi(_l.y.lessThan(.5).select(e.mul(u).negate(),e.mul(u)),0)),a.addAssign(Qi(o.mul(u),0)),Li(_l.y.greaterThan(1).or(_l.y.lessThan(0)),(()=>{a.subAssign(Qi(o.mul(2).mul(u),0))}))),g.assign(Xu.mul(a));const l=qi().toVar();l.assign(_l.y.lessThan(.5).select(c,h)),g.z.assign(l.z.mul(g.w))}else{const e=$i(p.y,p.x.negate()).toVar("offset");p.x.assign(p.x.div(a)),e.x.assign(e.x.div(a)),e.assign(_l.x.lessThan(0).select(e.negate(),e)),Li(_l.y.lessThan(0),(()=>{e.assign(e.sub(p))})).ElseIf(_l.y.greaterThan(1),(()=>{e.assign(e.add(p))})),e.assign(e.mul(oc)),e.assign(e.div(Kc.w)),g.assign(_l.y.lessThan(.5).select(l,d)),e.assign(e.mul(g.w)),g.assign(g.add(Qi(e,0,0)))}return g}))();const a=Ui((({p1:e,p2:t,p3:r,p4:s})=>{const i=e.sub(r),n=s.sub(r),o=t.sub(e),a=i.dot(n),u=n.dot(o),l=i.dot(o),d=n.dot(n),c=o.dot(o).mul(d).sub(u.mul(u)),h=a.mul(u).sub(l.mul(d)).div(c).clamp(),p=a.add(u.mul(h)).div(d).clamp();return $i(h,p)}));if(this.colorNode=Ui((()=>{const e=Fu();if(i){const t=this.dashSizeNode?Oi(this.dashSizeNode):ic,r=this.gapSizeNode?Oi(this.gapSizeNode):nc;On.assign(t),Gn.assign(r);const s=bn("float","lineDistance");e.y.lessThan(-1).or(e.y.greaterThan(1)).discard(),s.mod(On.add(Gn)).greaterThan(On).discard()}const o=Oi(1).toVar("alpha");if(n){const e=bn("vec3","worldStart"),s=bn("vec3","worldEnd"),n=bn("vec4","worldPos").xyz.normalize().mul(1e5),u=s.sub(e),l=a({p1:e,p2:s,p3:qi(0,0,0),p4:n}),d=e.add(u.mul(l.x)),c=n.mul(l.y),h=d.sub(c).length().div(oc);if(!i)if(r&&t.samples>1){const e=h.fwidth();o.assign(Ea(e.negate().add(.5),e.add(.5),h).oneMinus())}else h.greaterThan(.5).discard()}else if(r&&t.samples>1){const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1)),s=t.mul(t).add(r.mul(r)),i=Oi(s.fwidth()).toVar("dlen");Li(e.y.abs().greaterThan(1),(()=>{o.assign(Ea(i.oneMinus(),i.add(1),s).oneMinus())}))}else Li(e.y.abs().greaterThan(1),(()=>{const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1));t.mul(t).add(r.mul(r)).greaterThan(1).discard()}));let u;if(this.lineColorNode)u=this.lineColorNode;else if(s){const e=Bu("instanceColorStart"),t=Bu("instanceColorEnd");u=_l.y.lessThan(.5).select(e,t).mul(Md)}else u=Md;return Qi(u,o)}))(),this.transparent){const e=this.opacityNode?Oi(this.opacityNode):Ud;this.outputNode=Qi(this.colorNode.rgb.mul(e).add(Mh().rgb.mul(e.oneMinus())),this.colorNode.a)}super.setup(e)}get worldUnits(){return this._useWorldUnits}set worldUnits(e){this._useWorldUnits!==e&&(this._useWorldUnits=e,this.needsUpdate=!0)}get dashed(){return this._useDash}set dashed(e){this._useDash!==e&&(this._useDash=e,this.needsUpdate=!0)}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}const Uh=e=>Ci(e).mul(.5).add(.5),Ph=new G;class Ih extends Nh{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(Ph),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?Oi(this.opacityNode):Ud;Tn.assign(su(Qi(Uh(Ll),e),k))}}class Lh extends $s{static get type(){return"EquirectUVNode"}constructor(e=Rl){super("vec2"),this.dirNode=e}setup(){const e=this.dirNode,t=e.z.atan(e.x).mul(1/(2*Math.PI)).add(.5),r=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return $i(t,r)}}const Dh=Bi(Lh);class Vh extends z{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const r=t.minFilter,s=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const i=new $(5,5,5),n=Dh(Rl),o=new Nh;o.colorNode=Vu(t,n,0),o.side=v,o.blending=O;const a=new W(i,o),u=new H;u.add(a),t.minFilter===U&&(t.minFilter=j);const l=new q(1,10,this),d=e.getMRT();return e.setMRT(null),l.update(e,u),e.setMRT(d),t.minFilter=r,t.currentGenerateMipmaps=s,a.geometry.dispose(),a.material.dispose(),this}}const Oh=new WeakMap;class Gh extends $s{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=Ql();const t=new X;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=Fs.RENDER}updateBefore(e){const{renderer:t,material:r}=e,s=this.envNode;if(s.isTextureNode||s.isMaterialReferenceNode){const e=s.isTextureNode?s.value:r[s.property];if(e&&e.isTexture){const r=e.mapping;if(r===K||r===Y){if(Oh.has(e)){const t=Oh.get(e);zh(t,e.mapping),this._cubeTexture=t}else{const r=e.image;if(function(e){return null!=e&&e.height>0}(r)){const s=new Vh(r.height);s.fromEquirectangularTexture(t,e),zh(s.texture,e.mapping),this._cubeTexture=s.texture,Oh.set(e,s.texture),e.addEventListener("dispose",kh)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function kh(e){const t=e.target;t.removeEventListener("dispose",kh);const r=Oh.get(t);void 0!==r&&(Oh.delete(t),r.dispose())}function zh(e,t){t===K?e.mapping=S:t===Y&&(e.mapping=R)}const $h=Bi(Gh);class Wh extends Vc{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=$h(this.envNode)}}class Hh extends Vc{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=Oi(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class jh{start(e){e.lightsNode.setupLights(e,e.lightsNode.getLightNodes(e)),this.indirect(e)}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class qh extends jh{constructor(){super()}indirect({context:e}){const t=e.ambientOcclusion,r=e.reflectedLight,s=e.irradianceLightMap;r.indirectDiffuse.assign(Qi(0)),s?r.indirectDiffuse.addAssign(s):r.indirectDiffuse.addAssign(Qi(1,1,1,0)),r.indirectDiffuse.mulAssign(t),r.indirectDiffuse.mulAssign(Tn.rgb)}finish(e){const{material:t,context:r}=e,s=r.outgoingLight,i=e.context.environment;if(i)switch(t.combine){case J:s.rgb.assign(Na(s.rgb,s.rgb.mul(i.rgb),Dd.mul(Vd)));break;case Z:s.rgb.assign(Na(s.rgb,i.rgb,Dd.mul(Vd)));break;case Q:s.rgb.addAssign(i.rgb.mul(Dd.mul(Vd)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",t.combine)}}}const Xh=new ee;class Kh extends Nh{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Xh),this.setValues(e)}setupNormal(){return Pl}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new Wh(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new Hh(dc)),t}setupOutgoingLight(){return Tn.rgb}setupLightingModel(){return new qh}}const Yh=Ui((({f0:e,f90:t,dotVH:r})=>{const s=r.mul(-5.55473).sub(6.98316).mul(r).exp2();return e.mul(s.oneMinus()).add(t.mul(s))})),Qh=Ui((e=>e.diffuseColor.mul(1/Math.PI))),Zh=Ui((({dotNH:e})=>Dn.mul(Oi(.5)).add(1).mul(Oi(1/Math.PI)).mul(e.pow(Dn)))),Jh=Ui((({lightDirection:e})=>{const t=e.add(El).normalize(),r=Ll.dot(t).clamp(),s=El.dot(t).clamp(),i=Yh({f0:In,f90:1,dotVH:s}),n=Oi(.25),o=Zh({dotNH:r});return i.mul(n).mul(o)}));class ep extends qh{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=Ll.dot(e).clamp().mul(t);r.directDiffuse.addAssign(s.mul(Qh({diffuseColor:Tn.rgb}))),!0===this.specular&&r.directSpecular.addAssign(s.mul(Jh({lightDirection:e})).mul(Dd))}indirect(e){const{ambientOcclusion:t,irradiance:r,reflectedLight:s}=e.context;s.indirectDiffuse.addAssign(r.mul(Qh({diffuseColor:Tn}))),s.indirectDiffuse.mulAssign(t)}}const tp=new te;class rp extends Nh{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(tp),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new Wh(t):null}setupLightingModel(){return new ep(!1)}}const sp=new re;class ip extends Nh{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(sp),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new Wh(t):null}setupLightingModel(){return new ep}setupVariants(){const e=(this.shininessNode?Oi(this.shininessNode):Bd).max(1e-4);Dn.assign(e);const t=this.specularNode||Pd;In.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const np=Ui((e=>{if(!1===e.geometry.hasAttribute("normal"))return Oi(0);const t=Pl.dFdx().abs().max(Pl.dFdy().abs());return t.x.max(t.y).max(t.z)})),op=Ui((e=>{const{roughness:t}=e,r=np();let s=t.max(.0525);return s=s.add(r),s=s.min(1),s})),ap=Ui((({alpha:e,dotNL:t,dotNV:r})=>{const s=e.pow2(),i=t.mul(s.add(s.oneMinus().mul(r.pow2())).sqrt()),n=r.mul(s.add(s.oneMinus().mul(t.pow2())).sqrt());return ro(.5,i.add(n).max(No))})).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),up=Ui((({alphaT:e,alphaB:t,dotTV:r,dotBV:s,dotTL:i,dotBL:n,dotNV:o,dotNL:a})=>{const u=a.mul(qi(e.mul(r),t.mul(s),o).length()),l=o.mul(qi(e.mul(i),t.mul(n),a).length());return ro(.5,u.add(l)).saturate()})).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),lp=Ui((({alpha:e,dotNH:t})=>{const r=e.pow2(),s=t.pow2().mul(r.oneMinus()).oneMinus();return r.div(s.pow2()).mul(1/Math.PI)})).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),dp=Oi(1/Math.PI),cp=Ui((({alphaT:e,alphaB:t,dotNH:r,dotTH:s,dotBH:i})=>{const n=e.mul(t),o=qi(t.mul(s),e.mul(i),n.mul(r)),a=o.dot(o),u=n.div(a);return dp.mul(n.mul(u.pow2()))})).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),hp=Ui((e=>{const{lightDirection:t,f0:r,f90:s,roughness:i,f:n,USE_IRIDESCENCE:o,USE_ANISOTROPY:a}=e,u=e.normalView||Ll,l=i.pow2(),d=t.add(El).normalize(),c=u.dot(t).clamp(),h=u.dot(El).clamp(),p=u.dot(d).clamp(),g=El.dot(d).clamp();let m,f,y=Yh({f0:r,f90:s,dotVH:g});if(Ri(o)&&(y=Cn.mix(y,n)),Ri(a)){const e=Un.dot(t),r=Un.dot(El),s=Un.dot(d),i=Pn.dot(t),n=Pn.dot(El),o=Pn.dot(d);m=up({alphaT:Bn,alphaB:l,dotTV:r,dotBV:n,dotTL:e,dotBL:i,dotNV:h,dotNL:c}),f=cp({alphaT:Bn,alphaB:l,dotNH:p,dotTH:s,dotBH:o})}else m=ap({alpha:l,dotNL:c,dotNV:h}),f=lp({alpha:l,dotNH:p});return y.mul(m).mul(f)})),pp=Ui((({roughness:e,dotNV:t})=>{const r=Qi(-1,-.0275,-.572,.022),s=Qi(1,.0425,1.04,-.04),i=e.mul(r).add(s),n=i.x.mul(i.x).min(t.mul(-9.28).exp2()).mul(i.x).add(i.y);return $i(-1.04,1.04).mul(n).add(i.zw)})).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),gp=Ui((e=>{const{dotNV:t,specularColor:r,specularF90:s,roughness:i}=e,n=pp({dotNV:t,roughness:i});return r.mul(n.x).add(s.mul(n.y))})),mp=Ui((({f:e,f90:t,dotVH:r})=>{const s=r.oneMinus().saturate(),i=s.mul(s),n=s.mul(i,i).clamp(0,.9999);return e.sub(qi(t).mul(n)).div(n.oneMinus())})).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),fp=Ui((({roughness:e,dotNH:t})=>{const r=e.pow2(),s=Oi(1).div(r),i=t.pow2().oneMinus().max(.0078125);return Oi(2).add(s).mul(i.pow(s.mul(.5))).div(2*Math.PI)})).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),yp=Ui((({dotNV:e,dotNL:t})=>Oi(1).div(Oi(4).mul(t.add(e).sub(t.mul(e)))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),xp=Ui((({lightDirection:e})=>{const t=e.add(El).normalize(),r=Ll.dot(e).clamp(),s=Ll.dot(El).clamp(),i=Ll.dot(t).clamp(),n=fp({roughness:En,dotNH:i}),o=yp({dotNV:s,dotNL:r});return An.mul(n).mul(o)})),bp=Ui((({N:e,V:t,roughness:r})=>{const s=e.dot(t).saturate(),i=$i(r,s.oneMinus().sqrt());return i.assign(i.mul(.984375).add(.0078125)),i})).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),Tp=Ui((({f:e})=>{const t=e.length();return ua(t.mul(t).add(e.z).div(t.add(1)),0)})).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),_p=Ui((({v1:e,v2:t})=>{const r=e.dot(t),s=r.abs().toVar(),i=s.mul(.0145206).add(.4965155).mul(s).add(.8543985).toVar(),n=s.add(4.1616724).mul(s).add(3.417594).toVar(),o=i.div(n),a=r.greaterThan(0).select(o,ua(r.mul(r).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(o));return e.cross(t).mul(a)})).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),vp=Ui((({N:e,V:t,P:r,mInv:s,p0:i,p1:n,p2:o,p3:a})=>{const u=n.sub(i).toVar(),l=a.sub(i).toVar(),d=u.cross(l),c=qi().toVar();return Li(d.dot(r.sub(i)).greaterThanEqual(0),(()=>{const u=t.sub(e.mul(t.dot(e))).normalize(),l=e.cross(u).negate(),d=s.mul(rn(u,l,e).transpose()).toVar(),h=d.mul(i.sub(r)).normalize().toVar(),p=d.mul(n.sub(r)).normalize().toVar(),g=d.mul(o.sub(r)).normalize().toVar(),m=d.mul(a.sub(r)).normalize().toVar(),f=qi(0).toVar();f.addAssign(_p({v1:h,v2:p})),f.addAssign(_p({v1:p,v2:g})),f.addAssign(_p({v1:g,v2:m})),f.addAssign(_p({v1:m,v2:h})),c.assign(qi(Tp({f:f})))})),c})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),Np=Ui((({P:e,p0:t,p1:r,p2:s,p3:i})=>{const n=r.sub(t).toVar(),o=i.sub(t).toVar(),a=n.cross(o),u=qi().toVar();return Li(a.dot(e.sub(t)).greaterThanEqual(0),(()=>{const n=t.sub(e).normalize().toVar(),o=r.sub(e).normalize().toVar(),a=s.sub(e).normalize().toVar(),l=i.sub(e).normalize().toVar(),d=qi(0).toVar();d.addAssign(_p({v1:n,v2:o})),d.addAssign(_p({v1:o,v2:a})),d.addAssign(_p({v1:a,v2:l})),d.addAssign(_p({v1:l,v2:n})),u.assign(qi(Tp({f:d.abs()})))})),u})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"P",type:"vec3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),Sp=1/6,Rp=e=>to(Sp,to(e,to(e,e.negate().add(3)).sub(3)).add(1)),Ap=e=>to(Sp,to(e,to(e,to(3,e).sub(6))).add(4)),Ep=e=>to(Sp,to(e,to(e,to(-3,e).add(3)).add(3)).add(1)),Cp=e=>to(Sp,fa(e,3)),wp=e=>Rp(e).add(Ap(e)),Mp=e=>Ep(e).add(Cp(e)),Bp=e=>Jn(-1,Ap(e).div(Rp(e).add(Ap(e)))),Fp=e=>Jn(1,Cp(e).div(Ep(e).add(Cp(e)))),Up=(e,t,r)=>{const s=e.uvNode,i=to(s,t.zw).add(.5),n=Do(i),o=Go(i),a=wp(o.x),u=Mp(o.x),l=Bp(o.x),d=Fp(o.x),c=Bp(o.y),h=Fp(o.y),p=$i(n.x.add(l),n.y.add(c)).sub(.5).mul(t.xy),g=$i(n.x.add(d),n.y.add(c)).sub(.5).mul(t.xy),m=$i(n.x.add(l),n.y.add(h)).sub(.5).mul(t.xy),f=$i(n.x.add(d),n.y.add(h)).sub(.5).mul(t.xy),y=wp(o.y).mul(Jn(a.mul(e.sample(p).level(r)),u.mul(e.sample(g).level(r)))),x=Mp(o.y).mul(Jn(a.mul(e.sample(m).level(r)),u.mul(e.sample(f).level(r))));return y.add(x)},Pp=Ui((([e,t=Oi(3)])=>{const r=$i(e.size(Gi(t))),s=$i(e.size(Gi(t.add(1)))),i=ro(1,r),n=ro(1,s),o=Up(e,Qi(i,r),Do(t)),a=Up(e,Qi(n,s),Vo(t));return Go(t).mix(o,a)})),Ip=Ui((([e,t,r,s,i])=>{const n=qi(Aa(t.negate(),Oo(e),ro(1,s))),o=qi(Ko(i[0].xyz),Ko(i[1].xyz),Ko(i[2].xyz));return Oo(n).mul(r.mul(o))})).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),Lp=Ui((([e,t])=>e.mul(Sa(t.mul(2).sub(2),0,1)))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),Dp=nh(),Vp=nh(),Op=Ui((([e,t,r],{material:s})=>{const i=(s.side===v?Dp:Vp).sample(e),n=Po(qc.x).mul(Lp(t,r));return Pp(i,n)})),Gp=Ui((([e,t,r])=>(Li(r.notEqual(0),(()=>{const s=Uo(t).negate().div(r);return Bo(s.negate().mul(e))})),qi(1)))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),kp=Ui((([e,t,r,s,i,n,o,a,u,l,d,c,h,p,g])=>{let m,f;if(g){m=Qi().toVar(),f=qi().toVar();const i=d.sub(1).mul(g.mul(.025)),n=qi(d.sub(i),d,d.add(i));Bc({start:0,end:3},(({i:i})=>{const d=n.element(i),g=Ip(e,t,c,d,a),y=o.add(g),x=l.mul(u.mul(Qi(y,1))),b=$i(x.xy.div(x.w)).toVar();b.addAssign(1),b.divAssign(2),b.assign($i(b.x,b.y.oneMinus()));const T=Op(b,r,d);m.element(i).assign(T.element(i)),m.a.addAssign(T.a),f.element(i).assign(s.element(i).mul(Gp(Ko(g),h,p).element(i)))})),m.a.divAssign(3)}else{const i=Ip(e,t,c,d,a),n=o.add(i),g=l.mul(u.mul(Qi(n,1))),y=$i(g.xy.div(g.w)).toVar();y.addAssign(1),y.divAssign(2),y.assign($i(y.x,y.y.oneMinus())),m=Op(y,r,d),f=s.mul(Gp(Ko(i),h,p))}const y=f.rgb.mul(m.rgb),x=e.dot(t).clamp(),b=qi(gp({dotNV:x,specularColor:i,specularF90:n,roughness:r})),T=f.r.add(f.g,f.b).div(3);return Qi(b.oneMinus().mul(y),m.a.oneMinus().mul(T).oneMinus())})),zp=rn(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),$p=(e,t)=>e.sub(t).div(e.add(t)).pow2(),Wp=Ui((({outsideIOR:e,eta2:t,cosTheta1:r,thinFilmThickness:s,baseF0:i})=>{const n=Na(e,t,Ea(0,.03,s)),o=e.div(n).pow2().mul(r.pow2().oneMinus()).oneMinus();Li(o.lessThan(0),(()=>qi(1)));const a=o.sqrt(),u=$p(n,e),l=Yh({f0:u,f90:1,dotVH:r}),d=l.oneMinus(),c=n.lessThan(e).select(Math.PI,0),h=Oi(Math.PI).sub(c),p=(e=>{const t=e.sqrt();return qi(1).add(t).div(qi(1).sub(t))})(i.clamp(0,.9999)),g=$p(p,n.toVec3()),m=Yh({f0:g,f90:1,dotVH:a}),f=qi(p.x.lessThan(n).select(Math.PI,0),p.y.lessThan(n).select(Math.PI,0),p.z.lessThan(n).select(Math.PI,0)),y=n.mul(s,a,2),x=qi(h).add(f),b=l.mul(m).clamp(1e-5,.9999),T=b.sqrt(),_=d.pow2().mul(m).div(qi(1).sub(b)),v=l.add(_).toVar(),N=_.sub(d).toVar();return Bc({start:1,end:2,condition:"<=",name:"m"},(({m:e})=>{N.mulAssign(T);const t=((e,t)=>{const r=e.mul(2*Math.PI*1e-9),s=qi(54856e-17,44201e-17,52481e-17),i=qi(1681e3,1795300,2208400),n=qi(43278e5,93046e5,66121e5),o=Oi(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(r.mul(2239900).add(t.x).cos()).mul(r.pow2().mul(-45282e5).exp());let a=s.mul(n.mul(2*Math.PI).sqrt()).mul(i.mul(r).add(t).cos()).mul(r.pow2().negate().mul(n).exp());return a=qi(a.x.add(o),a.y,a.z).div(1.0685e-7),zp.mul(a)})(Oi(e).mul(y),Oi(e).mul(x)).mul(2);v.addAssign(N.mul(t))})),v.max(qi(0))})).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),Hp=Ui((({normal:e,viewDir:t,roughness:r})=>{const s=e.dot(t).saturate(),i=r.pow2(),n=La(r.lessThan(.25),Oi(-339.2).mul(i).add(Oi(161.4).mul(r)).sub(25.9),Oi(-8.48).mul(i).add(Oi(14.3).mul(r)).sub(9.95)),o=La(r.lessThan(.25),Oi(44).mul(i).sub(Oi(23.7).mul(r)).add(3.26),Oi(1.97).mul(i).sub(Oi(3.27).mul(r)).add(.72));return La(r.lessThan(.25),0,Oi(.1).mul(r).sub(.025)).add(n.mul(s).add(o).exp()).mul(1/Math.PI).saturate()})),jp=qi(.04),qp=Oi(1);class Xp extends jh{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=r,this.anisotropy=s,this.transmission=i,this.dispersion=n,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(!0===this.clearcoat&&(this.clearcoatRadiance=qi().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=qi().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=qi().toVar("clearcoatSpecularIndirect")),!0===this.sheen&&(this.sheenSpecularDirect=qi().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=qi().toVar("sheenSpecularIndirect")),!0===this.iridescence){const e=Ll.dot(El).clamp();this.iridescenceFresnel=Wp({outsideIOR:Oi(1),eta2:wn,cosTheta1:e,thinFilmThickness:Mn,baseF0:In}),this.iridescenceF0=mp({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(!0===this.transmission){const t=Sl,r=Ju.sub(Sl).normalize(),s=Dl,i=e.context;i.backdrop=kp(s,r,vn,Tn,In,Ln,t,dl,Yu,Xu,zn,Wn,jn,Hn,this.dispersion?qn:null),i.backdropAlpha=$n,Tn.a.mulAssign(Na(1,i.backdrop.a,$n))}super.start(e)}computeMultiscattering(e,t,r){const s=Ll.dot(El).clamp(),i=pp({roughness:vn,dotNV:s}),n=(this.iridescenceF0?Cn.mix(In,this.iridescenceF0):In).mul(i.x).add(r.mul(i.y)),o=i.x.add(i.y).oneMinus(),a=In.add(In.oneMinus().mul(.047619)),u=n.mul(a).div(o.mul(a).oneMinus());e.addAssign(n),t.addAssign(u.mul(o))}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=Ll.dot(e).clamp().mul(t);if(!0===this.sheen&&this.sheenSpecularDirect.addAssign(s.mul(xp({lightDirection:e}))),!0===this.clearcoat){const r=Vl.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(r.mul(hp({lightDirection:e,f0:jp,f90:qp,roughness:Rn,normalView:Vl})))}r.directDiffuse.addAssign(s.mul(Qh({diffuseColor:Tn.rgb}))),r.directSpecular.addAssign(s.mul(hp({lightDirection:e,f0:In,f90:1,roughness:vn,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:s,reflectedLight:i,ltc_1:n,ltc_2:o}){const a=t.add(r).sub(s),u=t.sub(r).sub(s),l=t.sub(r).add(s),d=t.add(r).add(s),c=Ll,h=El,p=Al.toVar(),g=bp({N:c,V:h,roughness:vn}),m=n.sample(g).toVar(),f=o.sample(g).toVar(),y=rn(qi(m.x,0,m.y),qi(0,1,0),qi(m.z,0,m.w)).toVar(),x=In.mul(f.x).add(In.oneMinus().mul(f.y)).toVar();i.directSpecular.addAssign(e.mul(x).mul(vp({N:c,V:h,P:p,mInv:y,p0:a,p1:u,p2:l,p3:d}))),i.directDiffuse.addAssign(e.mul(Tn).mul(vp({N:c,V:h,P:p,mInv:rn(1,0,0,0,1,0,0,0,1),p0:a,p1:u,p2:l,p3:d})))}indirect(e){this.indirectDiffuse(e),this.indirectSpecular(e),this.ambientOcclusion(e)}indirectDiffuse(e){const{irradiance:t,reflectedLight:r}=e.context;r.indirectDiffuse.addAssign(t.mul(Qh({diffuseColor:Tn})))}indirectSpecular(e){const{radiance:t,iblIrradiance:r,reflectedLight:s}=e.context;if(!0===this.sheen&&this.sheenSpecularIndirect.addAssign(r.mul(An,Hp({normal:Ll,viewDir:El,roughness:En}))),!0===this.clearcoat){const e=Vl.dot(El).clamp(),t=gp({dotNV:e,specularColor:jp,specularF90:qp,roughness:Rn});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(t))}const i=qi().toVar("singleScattering"),n=qi().toVar("multiScattering"),o=r.mul(1/Math.PI);this.computeMultiscattering(i,n,Ln);const a=i.add(n),u=Tn.mul(a.r.max(a.g).max(a.b).oneMinus());s.indirectSpecular.addAssign(t.mul(i)),s.indirectSpecular.addAssign(n.mul(o)),s.indirectDiffuse.addAssign(u.mul(o))}ambientOcclusion(e){const{ambientOcclusion:t,reflectedLight:r}=e.context,s=Ll.dot(El).clamp().add(t),i=vn.mul(-16).oneMinus().negate().exp2(),n=t.sub(s.pow(i).oneMinus()).clamp();!0===this.clearcoat&&this.clearcoatSpecularIndirect.mulAssign(t),!0===this.sheen&&this.sheenSpecularIndirect.mulAssign(t),r.indirectDiffuse.mulAssign(t),r.indirectSpecular.mulAssign(n)}finish({context:e}){const{outgoingLight:t}=e;if(!0===this.clearcoat){const e=Vl.dot(El).clamp(),r=Yh({dotVH:e,f0:jp,f90:qp}),s=t.mul(Sn.mul(r).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(Sn));t.assign(s)}if(!0===this.sheen){const e=An.r.max(An.g).max(An.b).mul(.157).oneMinus(),r=t.mul(e).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(r)}}}const Kp=Oi(1),Yp=Oi(-2),Qp=Oi(.8),Zp=Oi(-1),Jp=Oi(.4),eg=Oi(2),tg=Oi(.305),rg=Oi(3),sg=Oi(.21),ig=Oi(4),ng=Oi(4),og=Oi(16),ag=Ui((([e])=>{const t=qi(qo(e)).toVar(),r=Oi(-1).toVar();return Li(t.x.greaterThan(t.z),(()=>{Li(t.x.greaterThan(t.y),(()=>{r.assign(La(e.x.greaterThan(0),0,3))})).Else((()=>{r.assign(La(e.y.greaterThan(0),1,4))}))})).Else((()=>{Li(t.z.greaterThan(t.y),(()=>{r.assign(La(e.z.greaterThan(0),2,5))})).Else((()=>{r.assign(La(e.y.greaterThan(0),1,4))}))})),r})).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),ug=Ui((([e,t])=>{const r=$i().toVar();return Li(t.equal(0),(()=>{r.assign($i(e.z,e.y).div(qo(e.x)))})).ElseIf(t.equal(1),(()=>{r.assign($i(e.x.negate(),e.z.negate()).div(qo(e.y)))})).ElseIf(t.equal(2),(()=>{r.assign($i(e.x.negate(),e.y).div(qo(e.z)))})).ElseIf(t.equal(3),(()=>{r.assign($i(e.z.negate(),e.y).div(qo(e.x)))})).ElseIf(t.equal(4),(()=>{r.assign($i(e.x.negate(),e.z).div(qo(e.y)))})).Else((()=>{r.assign($i(e.x,e.y).div(qo(e.z)))})),to(.5,r.add(1))})).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),lg=Ui((([e])=>{const t=Oi(0).toVar();return Li(e.greaterThanEqual(Qp),(()=>{t.assign(Kp.sub(e).mul(Zp.sub(Yp)).div(Kp.sub(Qp)).add(Yp))})).ElseIf(e.greaterThanEqual(Jp),(()=>{t.assign(Qp.sub(e).mul(eg.sub(Zp)).div(Qp.sub(Jp)).add(Zp))})).ElseIf(e.greaterThanEqual(tg),(()=>{t.assign(Jp.sub(e).mul(rg.sub(eg)).div(Jp.sub(tg)).add(eg))})).ElseIf(e.greaterThanEqual(sg),(()=>{t.assign(tg.sub(e).mul(ig.sub(rg)).div(tg.sub(sg)).add(rg))})).Else((()=>{t.assign(Oi(-2).mul(Po(to(1.16,e))))})),t})).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),dg=Ui((([e,t])=>{const r=e.toVar();r.assign(to(2,r).sub(1));const s=qi(r,1).toVar();return Li(t.equal(0),(()=>{s.assign(s.zyx)})).ElseIf(t.equal(1),(()=>{s.assign(s.xzy),s.xz.mulAssign(-1)})).ElseIf(t.equal(2),(()=>{s.x.mulAssign(-1)})).ElseIf(t.equal(3),(()=>{s.assign(s.zyx),s.xz.mulAssign(-1)})).ElseIf(t.equal(4),(()=>{s.assign(s.xzy),s.xy.mulAssign(-1)})).ElseIf(t.equal(5),(()=>{s.z.mulAssign(-1)})),s})).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),cg=Ui((([e,t,r,s,i,n])=>{const o=Oi(r),a=qi(t),u=Sa(lg(o),Yp,n),l=Go(u),d=Do(u),c=qi(hg(e,a,d,s,i,n)).toVar();return Li(l.notEqual(0),(()=>{const t=qi(hg(e,a,d.add(1),s,i,n)).toVar();c.assign(Na(c,t,l))})),c})),hg=Ui((([e,t,r,s,i,n])=>{const o=Oi(r).toVar(),a=qi(t),u=Oi(ag(a)).toVar(),l=Oi(ua(ng.sub(o),0)).toVar();o.assign(ua(o,ng));const d=Oi(Fo(o)).toVar(),c=$i(ug(a,u).mul(d.sub(2)).add(1)).toVar();return Li(u.greaterThan(2),(()=>{c.y.addAssign(d),u.subAssign(3)})),c.x.addAssign(u.mul(d)),c.x.addAssign(l.mul(to(3,og))),c.y.addAssign(to(4,Fo(n).sub(d))),c.x.mulAssign(s),c.y.mulAssign(i),e.sample(c).grad($i(),$i())})),pg=Ui((({envMap:e,mipInt:t,outputDirection:r,theta:s,axis:i,CUBEUV_TEXEL_WIDTH:n,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const u=zo(s),l=r.mul(u).add(i.cross(r).mul(ko(s))).add(i.mul(i.dot(r).mul(u.oneMinus())));return hg(e,l,t,n,o,a)})),gg=Ui((({n:e,latitudinal:t,poleAxis:r,outputDirection:s,weights:i,samples:n,dTheta:o,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})=>{const h=qi(La(t,r,ma(r,s))).toVar();Li(Eo(h.equals(qi(0))),(()=>{h.assign(qi(s.z,0,s.x.negate()))})),h.assign(Oo(h));const p=qi().toVar();return p.addAssign(i.element(0).mul(pg({theta:0,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),Bc({start:Gi(1),end:e},(({i:e})=>{Li(e.greaterThanEqual(n),(()=>{Fc()}));const t=Oi(o.mul(Oi(e))).toVar();p.addAssign(i.element(e).mul(pg({theta:t.mul(-1),axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),p.addAssign(i.element(e).mul(pg({theta:t,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})))})),Qi(p,1)})),mg=[.125,.215,.35,.446,.526,.582],fg=20,yg=new se(-1,1,1,-1,0,1),xg=new ie(90,1),bg=new e;let Tg=null,_g=0,vg=0;const Ng=(1+Math.sqrt(5))/2,Sg=1/Ng,Rg=[new r(-Ng,Sg,0),new r(Ng,Sg,0),new r(-Sg,0,Ng),new r(Sg,0,Ng),new r(0,Ng,-Sg),new r(0,Ng,Sg),new r(-1,1,-1),new r(1,1,-1),new r(-1,1,1),new r(1,1,1)],Ag=new r,Eg=new WeakMap,Cg=[3,1,5,0,4,2],wg=dg(Fu(),Bu("faceIndex")).normalize(),Mg=qi(wg.x,wg.y,wg.z);class Bg{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,r=.1,s=100,i={}){const{size:n=256,position:o=Ag,renderTarget:a=null}=i;if(this._setSize(n),!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");const n=a||this._allocateTargets();return i.renderTarget=n,this.fromSceneAsync(e,t,r,s,i),n}Tg=this._renderer.getRenderTarget(),_g=this._renderer.getActiveCubeFace(),vg=this._renderer.getActiveMipmapLevel();const u=a||this._allocateTargets();return u.depthBuffer=!0,this._sceneToCubeUV(e,r,s,u,o),t>0&&this._blur(u,0,0,t),this._applyPMREM(u),this._cleanup(u),u}async fromSceneAsync(e,t=0,r=.1,s=100,i={}){return!1===this._hasInitialized&&await this._renderer.init(),this.fromScene(e,t,r,s,i)}fromEquirectangular(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromEquirectangularAsync(e,r),r}return this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromCubemapAsync(e,t),r}return this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=Ig(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=Lg(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose(),null!==this._backgroundBox&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSizeFromTexture(e){e.mapping===S||e.mapping===R?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4)}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Tg,_g,vg),e.scissorTest=!1,Ug(e,0,0,e.width,e.height)}_fromTexture(e,t){this._setSizeFromTexture(e),Tg=this._renderer.getRenderTarget(),_g=this._renderer.getActiveCubeFace(),vg=this._renderer.getActiveMipmapLevel();const r=t||this._allocateTargets();return this._textureToCubeUV(e,r),this._applyPMREM(r),this._cleanup(r),r}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,s={magFilter:j,minFilter:j,generateMipmaps:!1,type:ce,format:de,colorSpace:le},i=Fg(e,t,s);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Fg(e,t,s);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=function(e){const t=[],r=[],s=[],i=[];let n=e;const o=e-4+1+mg.length;for(let a=0;a<o;a++){const o=Math.pow(2,n);r.push(o);let u=1/o;a>e-4?u=mg[a-e+4-1]:0===a&&(u=0),s.push(u);const l=1/(o-2),d=-l,c=1+l,h=[d,d,c,d,c,c,d,d,c,c,d,c],p=6,g=6,m=3,f=2,y=1,x=new Float32Array(m*g*p),b=new Float32Array(f*g*p),T=new Float32Array(y*g*p);for(let e=0;e<p;e++){const t=e%3*2/3-1,r=e>2?0:-1,s=[t,r,0,t+2/3,r,0,t+2/3,r+1,0,t,r,0,t+2/3,r+1,0,t,r+1,0],i=Cg[e];x.set(s,m*g*i),b.set(h,f*g*i);const n=[i,i,i,i,i,i];T.set(n,y*g*i)}const _=new ae;_.setAttribute("position",new ue(x,m)),_.setAttribute("uv",new ue(b,f)),_.setAttribute("faceIndex",new ue(T,y)),t.push(_),i.push(new W(_,null)),n>4&&n--}return{lodPlanes:t,sizeLods:r,sigmas:s,lodMeshes:i}}(i)),this._blurMaterial=function(e,t,s){const i=Wu(new Array(fg).fill(0)),n=fn(new r(0,1,0)),o=fn(0),a=Oi(fg),u=fn(0),l=fn(1),d=Vu(null),c=fn(0),h=Oi(1/t),p=Oi(1/s),g=Oi(e),m={n:a,latitudinal:u,weights:i,poleAxis:n,outputDirection:Mg,dTheta:o,samples:l,envMap:d,mipInt:c,CUBEUV_TEXEL_WIDTH:h,CUBEUV_TEXEL_HEIGHT:p,CUBEUV_MAX_MIP:g},f=Pg("blur");return f.fragmentNode=gg({...m,latitudinal:u.equal(1)}),Eg.set(f,m),f}(i,e,t)}return i}async _compileMaterial(e){const t=new W(this._lodPlanes[0],e);await this._renderer.compile(t,yg)}_sceneToCubeUV(e,t,r,s,i){const n=xg;n.near=t,n.far=r;const o=[1,1,1,1,-1,1],a=[1,-1,1,-1,1,-1],u=this._renderer,l=u.autoClear;u.getClearColor(bg),u.autoClear=!1;let d=this._backgroundBox;if(null===d){const e=new ee({name:"PMREM.Background",side:v,depthWrite:!1,depthTest:!1});d=new W(new $,e)}let c=!1;const h=e.background;h?h.isColor&&(d.material.color.copy(h),e.background=null,c=!0):(d.material.color.copy(bg),c=!0),u.setRenderTarget(s),u.clear(),c&&u.render(d,n);for(let t=0;t<6;t++){const r=t%3;0===r?(n.up.set(0,o[t],0),n.position.set(i.x,i.y,i.z),n.lookAt(i.x+a[t],i.y,i.z)):1===r?(n.up.set(0,0,o[t]),n.position.set(i.x,i.y,i.z),n.lookAt(i.x,i.y+a[t],i.z)):(n.up.set(0,o[t],0),n.position.set(i.x,i.y,i.z),n.lookAt(i.x,i.y,i.z+a[t]));const l=this._cubeSize;Ug(s,r*l,t>2?l:0,l,l),u.render(e,n)}u.autoClear=l,e.background=h}_textureToCubeUV(e,t){const r=this._renderer,s=e.mapping===S||e.mapping===R;s?null===this._cubemapMaterial&&(this._cubemapMaterial=Ig(e)):null===this._equirectMaterial&&(this._equirectMaterial=Lg(e));const i=s?this._cubemapMaterial:this._equirectMaterial;i.fragmentNode.value=e;const n=this._lodMeshes[0];n.material=i;const o=this._cubeSize;Ug(t,0,0,3*o,2*o),r.setRenderTarget(t),r.render(n,yg)}_applyPMREM(e){const t=this._renderer,r=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let t=1;t<s;t++){const r=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=Rg[(s-t-1)%Rg.length];this._blur(e,t-1,t,r,i)}t.autoClear=r}_blur(e,t,r,s,i){const n=this._pingPongRenderTarget;this._halfBlur(e,n,t,r,s,"latitudinal",i),this._halfBlur(n,e,r,r,s,"longitudinal",i)}_halfBlur(e,t,r,s,i,n,o){const a=this._renderer,u=this._blurMaterial;"latitudinal"!==n&&"longitudinal"!==n&&console.error("blur direction must be either latitudinal or longitudinal!");const l=this._lodMeshes[s];l.material=u;const d=Eg.get(u),c=this._sizeLods[r]-1,h=isFinite(i)?Math.PI/(2*c):2*Math.PI/39,p=i/h,g=isFinite(i)?1+Math.floor(3*p):fg;g>fg&&console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${g} samples when the maximum is set to 20`);const m=[];let f=0;for(let e=0;e<fg;++e){const t=e/p,r=Math.exp(-t*t/2);m.push(r),0===e?f+=r:e<g&&(f+=2*r)}for(let e=0;e<m.length;e++)m[e]=m[e]/f;e.texture.frame=(e.texture.frame||0)+1,d.envMap.value=e.texture,d.samples.value=g,d.weights.array=m,d.latitudinal.value="latitudinal"===n?1:0,o&&(d.poleAxis.value=o);const{_lodMax:y}=this;d.dTheta.value=h,d.mipInt.value=y-r;const x=this._sizeLods[s];Ug(t,3*x*(s>y-4?s-y+4:0),4*(this._cubeSize-x),3*x,2*x),a.setRenderTarget(t),a.render(l,yg)}}function Fg(e,t,r){const s=new ne(e,t,r);return s.texture.mapping=oe,s.texture.name="PMREM.cubeUv",s.texture.isPMREMTexture=!0,s.scissorTest=!0,s}function Ug(e,t,r,s,i){e.viewport.set(t,r,s,i),e.scissor.set(t,r,s,i)}function Pg(e){const t=new Nh;return t.depthTest=!1,t.depthWrite=!1,t.blending=O,t.name=`PMREM_${e}`,t}function Ig(e){const t=Pg("cubemap");return t.fragmentNode=Ql(e,Mg),t}function Lg(e){const t=Pg("equirect");return t.fragmentNode=Vu(e,Dh(Mg),0),t}const Dg=new WeakMap;function Vg(e,t,r){const s=function(e){let t=Dg.get(e);void 0===t&&(t=new WeakMap,Dg.set(e,t));return t}(t);let i=s.get(e);if((void 0!==i?i.pmremVersion:-1)!==e.pmremVersion){const t=e.image;if(e.isCubeTexture){if(!function(e){if(null==e)return!1;let t=0;const r=6;for(let s=0;s<r;s++)void 0!==e[s]&&t++;return t===r}(t))return null;i=r.fromCubemap(e,i)}else{if(!function(e){return null!=e&&e.height>0}(t))return null;i=r.fromEquirectangular(e,i)}i.pmremVersion=e.pmremVersion,s.set(e,i)}return i.texture}class Og extends $s{static get type(){return"PMREMNode"}constructor(e,t=null,r=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=r,this._generator=null;const s=new he;s.isRenderTargetTexture=!0,this._texture=Vu(s),this._width=fn(0),this._height=fn(0),this._maxMip=fn(0),this.updateBeforeType=Fs.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=function(e){const t=Math.log2(e)-2,r=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),112)),texelHeight:r,maxMip:t}}(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(e){let t=this._pmrem;const r=t?t.pmremVersion:-1,s=this._value;r!==s.pmremVersion&&(t=!0===s.isPMREMTexture?s:Vg(s,e.renderer,this._generator),null!==t&&(this._pmrem=t,this.updateFromTexture(t)))}setup(e){null===this._generator&&(this._generator=new Bg(e.renderer)),this.updateBefore(e);let t=this.uvNode;null===t&&e.context.getUV&&(t=e.context.getUV(this)),t=Hl.mul(qi(t.x,t.y.negate(),t.z));let r=this.levelNode;return null===r&&e.context.getTextureLevel&&(r=e.context.getTextureLevel(this)),cg(this._texture,t,r,this._width,this._height,this._maxMip)}dispose(){super.dispose(),null!==this._generator&&this._generator.dispose()}}const Gg=Bi(Og),kg=new WeakMap;class zg extends Vc{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let r=this.envNode;if(r.isTextureNode||r.isMaterialReferenceNode){const e=r.isTextureNode?r.value:t[r.property];let s=kg.get(e);void 0===s&&(s=Gg(e),kg.set(e,s)),r=s}const s=!0===t.useAnisotropy||t.anisotropy>0?bd:Ll,i=r.context($g(vn,s)).mul(Wl),n=r.context(Wg(Dl)).mul(Math.PI).mul(Wl),o=bu(i),a=bu(n);e.context.radiance.addAssign(o),e.context.iblIrradiance.addAssign(a);const u=e.context.lightingModel.clearcoatRadiance;if(u){const e=r.context($g(Rn,Vl)).mul(Wl),t=bu(e);u.addAssign(t)}}}const $g=(e,t)=>{let r=null;return{getUV:()=>(null===r&&(r=El.negate().reflect(t),r=e.mul(e).mix(r,t).normalize(),r=r.transformDirection(Yu)),r),getTextureLevel:()=>e}},Wg=e=>({getUV:()=>e,getTextureLevel:()=>Oi(1)}),Hg=new pe;class jg extends Nh{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(Hg),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return null===t&&e.environmentNode&&(t=e.environmentNode),t?new zg(t):null}setupLightingModel(){return new Xp}setupSpecular(){const e=Na(qi(.04),Tn.rgb,Nn);In.assign(e),Ln.assign(1)}setupVariants(){const e=this.metalnessNode?Oi(this.metalnessNode):Gd;Nn.assign(e);let t=this.roughnessNode?Oi(this.roughnessNode):Od;t=op({roughness:t}),vn.assign(t),this.setupSpecular(),Tn.assign(Qi(Tn.rgb.mul(e.oneMinus()),Tn.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const qg=new ge;class Xg extends jg{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(qg),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||null!==this.clearcoatNode}get useIridescence(){return this.iridescence>0||null!==this.iridescenceNode}get useSheen(){return this.sheen>0||null!==this.sheenNode}get useAnisotropy(){return this.anisotropy>0||null!==this.anisotropyNode}get useTransmission(){return this.transmission>0||null!==this.transmissionNode}get useDispersion(){return this.dispersion>0||null!==this.dispersionNode}setupSpecular(){const e=this.iorNode?Oi(this.iorNode):ec;zn.assign(e),In.assign(Na(aa(ya(zn.sub(1).div(zn.add(1))).mul(Ld),qi(1)).mul(Id),Tn.rgb,Nn)),Ln.assign(Na(Id,1,Nn))}setupLightingModel(){return new Xp(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const e=this.clearcoatNode?Oi(this.clearcoatNode):zd,t=this.clearcoatRoughnessNode?Oi(this.clearcoatRoughnessNode):$d;Sn.assign(e),Rn.assign(op({roughness:t}))}if(this.useSheen){const e=this.sheenNode?qi(this.sheenNode):jd,t=this.sheenRoughnessNode?Oi(this.sheenRoughnessNode):qd;An.assign(e),En.assign(t)}if(this.useIridescence){const e=this.iridescenceNode?Oi(this.iridescenceNode):Kd,t=this.iridescenceIORNode?Oi(this.iridescenceIORNode):Yd,r=this.iridescenceThicknessNode?Oi(this.iridescenceThicknessNode):Qd;Cn.assign(e),wn.assign(t),Mn.assign(r)}if(this.useAnisotropy){const e=(this.anisotropyNode?$i(this.anisotropyNode):Xd).toVar();Fn.assign(e.length()),Li(Fn.equal(0),(()=>{e.assign($i(1,0))})).Else((()=>{e.divAssign($i(Fn)),Fn.assign(Fn.saturate())})),Bn.assign(Fn.pow2().mix(vn.pow2(),1)),Un.assign(yd[0].mul(e.x).add(yd[1].mul(e.y))),Pn.assign(yd[1].mul(e.x).sub(yd[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?Oi(this.transmissionNode):Zd,t=this.thicknessNode?Oi(this.thicknessNode):Jd,r=this.attenuationDistanceNode?Oi(this.attenuationDistanceNode):tc,s=this.attenuationColorNode?qi(this.attenuationColorNode):rc;if($n.assign(e),Wn.assign(t),Hn.assign(r),jn.assign(s),this.useDispersion){const e=this.dispersionNode?Oi(this.dispersionNode):lc;qn.assign(e)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?qi(this.clearcoatNormalNode):Wd}setup(e){e.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(e),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}class Kg extends Xp{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1,o=!1){super(e,t,r,s,i,n),this.useSSS=o}direct({lightDirection:e,lightColor:t,reflectedLight:r},s){if(!0===this.useSSS){const i=s.material,{thicknessColorNode:n,thicknessDistortionNode:o,thicknessAmbientNode:a,thicknessAttenuationNode:u,thicknessPowerNode:l,thicknessScaleNode:d}=i,c=e.add(Ll.mul(o)).normalize(),h=Oi(El.dot(c.negate()).saturate().pow(l).mul(d)),p=qi(h.add(a).mul(n));r.directDiffuse.addAssign(p.mul(u.mul(t)))}super.direct({lightDirection:e,lightColor:t,reflectedLight:r},s)}}class Yg extends Xg{static get type(){return"MeshSSSNodeMaterial"}constructor(e){super(e),this.thicknessColorNode=null,this.thicknessDistortionNode=Oi(.1),this.thicknessAmbientNode=Oi(0),this.thicknessAttenuationNode=Oi(.1),this.thicknessPowerNode=Oi(2),this.thicknessScaleNode=Oi(10)}get useSSS(){return null!==this.thicknessColorNode}setupLightingModel(){return new Kg(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion,this.useSSS)}copy(e){return this.thicknessColorNode=e.thicknessColorNode,this.thicknessDistortionNode=e.thicknessDistortionNode,this.thicknessAmbientNode=e.thicknessAmbientNode,this.thicknessAttenuationNode=e.thicknessAttenuationNode,this.thicknessPowerNode=e.thicknessPowerNode,this.thicknessScaleNode=e.thicknessScaleNode,super.copy(e)}}const Qg=Ui((({normal:e,lightDirection:t,builder:r})=>{const s=e.dot(t),i=$i(s.mul(.5).add(.5),0);if(r.material.gradientMap){const e=sd("gradientMap","texture").context({getUV:()=>i});return qi(e.r)}{const e=i.fwidth().mul(.5);return Na(qi(.7),qi(1),Ea(Oi(.7).sub(e.x),Oi(.7).add(e.x),i.x))}}));class Zg extends jh{direct({lightDirection:e,lightColor:t,reflectedLight:r},s){const i=Qg({normal:Bl,lightDirection:e,builder:s}).mul(t);r.directDiffuse.addAssign(i.mul(Qh({diffuseColor:Tn.rgb})))}indirect(e){const{ambientOcclusion:t,irradiance:r,reflectedLight:s}=e.context;s.indirectDiffuse.addAssign(r.mul(Qh({diffuseColor:Tn}))),s.indirectDiffuse.mulAssign(t)}}const Jg=new me;class em extends Nh{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Jg),this.setValues(e)}setupLightingModel(){return new Zg}}class tm extends $s{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const e=qi(El.z,0,El.x.negate()).normalize(),t=El.cross(e);return $i(e.dot(Ll),t.dot(Ll)).mul(.495).add(.5)}}const rm=Fi(tm),sm=new fe;class im extends Nh{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(sm),this.setValues(e)}setupVariants(e){const t=rm;let r;r=e.material.matcap?sd("matcap","texture").context({getUV:()=>t}):qi(Na(.2,.8,t.y)),Tn.rgb.mulAssign(r.rgb)}}class nm extends $s{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:r}=this;if("vec2"===this.getNodeType(e)){const e=t.cos(),s=t.sin();return tn(e,s,s.negate(),e).mul(r)}{const e=t,s=sn(Qi(1,0,0,0),Qi(0,zo(e.x),ko(e.x).negate(),0),Qi(0,ko(e.x),zo(e.x),0),Qi(0,0,0,1)),i=sn(Qi(zo(e.y),0,ko(e.y),0),Qi(0,1,0,0),Qi(ko(e.y).negate(),0,zo(e.y),0),Qi(0,0,0,1)),n=sn(Qi(zo(e.z),ko(e.z).negate(),0,0),Qi(ko(e.z),zo(e.z),0,0),Qi(0,0,1,0),Qi(0,0,0,1));return s.mul(i).mul(n).mul(Qi(r,1)).xyz}}}const om=Bi(nm),am=new ye;class um extends Nh{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.transparent=!0,this.setDefaultValues(am),this.setValues(e)}setupPositionView(e){const{object:t,camera:r}=e,s=this.sizeAttenuation,{positionNode:i,rotationNode:n,scaleNode:o}=this,a=yl.mul(qi(i||0));let u=$i(dl[0].xyz.length(),dl[1].xyz.length());if(null!==o&&(u=u.mul($i(o))),!1===s)if(r.isPerspectiveCamera)u=u.mul(a.z.negate());else{const e=Oi(2).div(Xu.element(1).element(1));u=u.mul(e.mul(2))}let l=_l.xy;if(t.center&&!0===t.center.isVector2){const e=((e,t,r)=>Ci(new nu(e,t,r)))("center","vec2",t);l=l.sub(e.sub(.5))}l=l.mul(u);const d=Oi(n||Hd),c=om(l,d);return Qi(a.xy.add(c),a.zw)}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}const lm=new xe;class dm extends um{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.sizeNode=null,this.isPointsNodeMaterial=!0,this.setDefaultValues(lm),this.setValues(e)}setupPositionView(){const{positionNode:e}=this;return yl.mul(qi(e||vl)).xyz}setupVertex(e){const t=super.setupVertex(e);if(!0!==e.material.isNodeMaterial)return t;const{rotationNode:r,scaleNode:s,sizeNode:i}=this,n=_l.xy.toVar(),o=Kc.z.div(Kc.w);if(r&&r.isNode){const e=Oi(r);n.assign(om(n,e))}let a=null!==i?$i(i):uc;return!0===this.sizeAttenuation&&(a=a.mul(a.div(Al.z.negate()))),s&&s.isNode&&(a=a.mul($i(s))),n.mulAssign(a.mul(2)),n.assign(n.div(Kc.z)),n.y.assign(n.y.mul(o)),n.assign(n.mul(t.w)),t.addAssign(Qi(n,0,0)),t}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}class cm extends jh{constructor(){super(),this.shadowNode=Oi(1).toVar("shadowMask")}direct({shadowMask:e}){this.shadowNode.mulAssign(e)}finish(e){Tn.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(Tn.rgb)}}const hm=new be;class pm extends Nh{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.setDefaultValues(hm),this.setValues(e)}setupLightingModel(){return new cm}}const gm=xn("vec3"),mm=xn("vec3"),fm=xn("vec3");class ym extends jh{constructor(){super()}start(e){const{material:t,context:r}=e,s=xn("vec3"),i=xn("vec3");Li(Ju.sub(Sl).length().greaterThan(gl.mul(2)),(()=>{s.assign(Ju),i.assign(Sl)})).Else((()=>{s.assign(Sl),i.assign(Ju)}));const n=i.sub(s),o=fn("int").onRenderUpdate((({material:e})=>e.steps)),a=n.length().div(o).toVar(),u=n.normalize().toVar(),l=Oi(0).toVar(),d=qi(1).toVar();t.offsetNode&&l.addAssign(t.offsetNode.mul(a)),Bc(o,(()=>{const i=s.add(u.mul(l)),n=Yu.mul(Qi(i,1)).xyz;let o;null!==t.depthNode&&(mm.assign(fh(ch(n.z,ju,qu))),r.sceneDepthNode=fh(t.depthNode).toVar()),r.positionWorld=i,r.shadowPositionWorld=i,r.positionView=n,gm.assign(0),t.scatteringNode&&(o=t.scatteringNode({positionRay:i})),super.start(e),o&&gm.mulAssign(o);const c=gm.mul(.01).negate().mul(a).exp();d.mulAssign(c),l.addAssign(a)})),fm.addAssign(d.saturate().oneMinus())}scatteringLight(e,t){const r=t.context.sceneDepthNode;r?Li(r.greaterThanEqual(mm),(()=>{gm.addAssign(e)})):gm.addAssign(e)}direct({lightNode:e,lightColor:t},r){if(void 0===e.light.distance)return;const s=t.xyz.toVar();s.mulAssign(e.shadowNode),this.scatteringLight(s,r)}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:s},i){const n=t.add(r).sub(s),o=t.sub(r).sub(s),a=t.sub(r).add(s),u=t.add(r).add(s),l=i.context.positionView,d=e.xyz.mul(Np({P:l,p0:n,p1:o,p2:a,p3:u})).pow(1.5);this.scatteringLight(d,i)}finish(e){e.context.outgoingLight.assign(fm)}}class xm extends Nh{static get type(){return"VolumeNodeMaterial"}constructor(e){super(),this.isVolumeNodeMaterial=!0,this.steps=25,this.scatteringNode=null,this.lights=!0,this.transparent=!0,this.side=v,this.depthTest=!1,this.depthWrite=!1,this.setValues(e)}setupLightingModel(){return new ym}}class bm{constructor(e,t){this.nodes=e,this.info=t,this._context=self,this._animationLoop=null,this._requestId=null}start(){const e=(t,r)=>{this._requestId=this._context.requestAnimationFrame(e),!0===this.info.autoReset&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,null!==this._animationLoop&&this._animationLoop(t,r)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}getAnimationLoop(){return this._animationLoop}setAnimationLoop(e){this._animationLoop=e}getContext(){return this._context}setContext(e){this._context=e}dispose(){this.stop()}}class Tm{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return;return t.get(e[e.length-1])}set(e,t){let r=this.weakMap;for(let t=0;t<e.length-1;t++){const s=e[t];!1===r.has(s)&&r.set(s,new WeakMap),r=r.get(s)}return r.set(e[e.length-1],t),this}delete(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return!1;return t.delete(e[e.length-1])}}let _m=0;class vm{constructor(e,t,r,s,i,n,o,a,u,l){this.id=_m++,this._nodes=e,this._geometries=t,this.renderer=r,this.object=s,this.material=i,this.scene=n,this.camera=o,this.lightsNode=a,this.context=u,this.geometry=s.geometry,this.version=i.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.group=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=l,this.clippingContextCacheKey=null!==l?l.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return null!==this.clippingContext&&this.clippingContext.cacheKey!==this.clippingContextCacheKey&&(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return!0===this.material.hardwareClipping?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().observer)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getBindingGroup(e){for(const t of this.getBindings())if(t.name===e)return t}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null}getAttributes(){if(null!==this.attributes)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,r=[],s=new Set;for(const i of e){const e=i.node&&i.node.attribute?i.node.attribute:t.getAttribute(i.name);if(void 0===e)continue;r.push(e);const n=e.isInterleavedBufferAttribute?e.data:e;s.add(n)}return this.attributes=r,this.vertexBuffers=Array.from(s.values()),r}getVertexBuffers(){return null===this.vertexBuffers&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:r,group:s,drawRange:i}=this,n=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),o=this.getIndex(),a=null!==o,u=r.isInstancedBufferGeometry?r.instanceCount:e.count>1?e.count:1;if(0===u)return null;if(n.instanceCount=u,!0===e.isBatchedMesh)return n;let l=1;!0!==t.wireframe||e.isPoints||e.isLineSegments||e.isLine||e.isLineLoop||(l=2);let d=i.start*l,c=(i.start+i.count)*l;null!==s&&(d=Math.max(d,s.start*l),c=Math.min(c,(s.start+s.count)*l));const h=r.attributes.position;let p=1/0;a?p=o.count:null!=h&&(p=h.count),d=Math.max(d,0),c=Math.min(c,p);const g=c-d;return g<0||g===1/0?null:(n.vertexCount=g,n.firstVertex=d,n)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const r of Object.keys(e.attributes).sort()){const s=e.attributes[r];t+=r+",",s.data&&(t+=s.data.stride+","),s.offset&&(t+=s.offset+","),s.itemSize&&(t+=s.itemSize+","),s.normalized&&(t+="n,")}for(const r of Object.keys(e.morphAttributes).sort()){const s=e.morphAttributes[r];t+="morph-"+r+",";for(let e=0,r=s.length;e<r;e++){t+=s[e].id+","}}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let r=t.customProgramCacheKey();for(const e of function(e){const t=Object.keys(e);let r=Object.getPrototypeOf(e);for(;r;){const e=Object.getOwnPropertyDescriptors(r);for(const r in e)if(void 0!==e[r]){const s=e[r];s&&"function"==typeof s.get&&t.push(r)}r=Object.getPrototypeOf(r)}return t}(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(e))continue;const s=t[e];let i;if(null!==s){const e=typeof s;"number"===e?i=0!==s?"1":"0":"object"===e?(i="{",s.isTexture&&(i+=s.mapping),i+="}"):i=String(s)}else i=String(s);r+=i+","}return r+=this.clippingContextCacheKey+",",e.geometry&&(r+=this.getGeometryCacheKey()),e.skeleton&&(r+=e.skeleton.bones.length+","),e.isBatchedMesh&&(r+=e._matricesTexture.uuid+",",null!==e._colorsTexture&&(r+=e._colorsTexture.uuid+",")),e.count>1&&(r+=e.uuid+","),r+=e.receiveShadow+",",ms(r)}get needsGeometryUpdate(){return this.geometry.id!==this.object.geometry.id}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=0;return!0!==this.material.isShadowPassMaterial&&(e=this._nodes.getCacheKey(this.scene,this.lightsNode)),this.camera.isArrayCamera&&(e=ys(e,this.camera.cameras.length)),this.object.receiveShadow&&(e=ys(e,1)),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const Nm=[];class Sm{constructor(e,t,r,s,i,n){this.renderer=e,this.nodes=t,this.geometries=r,this.pipelines=s,this.bindings=i,this.info=n,this.chainMaps={}}get(e,t,r,s,i,n,o,a){const u=this.getChainMap(a);Nm[0]=e,Nm[1]=t,Nm[2]=n,Nm[3]=i;let l=u.get(Nm);return void 0===l?(l=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,r,s,i,n,o,a),u.set(Nm,l)):(l.updateClipping(o),l.needsGeometryUpdate&&l.setGeometry(e.geometry),(l.version!==t.version||l.needsUpdate)&&(l.initialCacheKey!==l.getCacheKey()?(l.dispose(),l=this.get(e,t,r,s,i,n,o,a)):l.version=t.version)),Nm.length=0,l}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new Tm)}dispose(){this.chainMaps={}}createRenderObject(e,t,r,s,i,n,o,a,u,l,d){const c=this.getChainMap(d),h=new vm(e,t,r,s,i,n,o,a,u,l);return h.onDispose=()=>{this.pipelines.delete(h),this.bindings.delete(h),this.nodes.delete(h),c.delete(h.getChainArray())},h}}class Rm{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}delete(e){let t=null;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const Am=1,Em=2,Cm=3,wm=4,Mm=16;class Bm extends Rm{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return void 0!==t&&this.backend.destroyAttribute(e),t}update(e,t){const r=this.get(e);if(void 0===r.version)t===Am?this.backend.createAttribute(e):t===Em?this.backend.createIndexAttribute(e):t===Cm?this.backend.createStorageAttribute(e):t===wm&&this.backend.createIndirectStorageAttribute(e),r.version=this._getBufferAttribute(e).version;else{const t=this._getBufferAttribute(e);(r.version<t.version||t.usage===y)&&(this.backend.updateAttribute(e),r.version=t.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function Fm(e){return null!==e.index?e.index.version:e.attributes.position.version}function Um(e){const t=[],r=e.index,s=e.attributes.position;if(null!==r){const e=r.array;for(let r=0,s=e.length;r<s;r+=3){const s=e[r+0],i=e[r+1],n=e[r+2];t.push(s,i,i,n,n,s)}}else{for(let e=0,r=s.array.length/3-1;e<r;e+=3){const r=e+0,s=e+1,i=e+2;t.push(r,s,s,i,i,r)}}const i=new(ve(t)?Te:_e)(t,1);return i.version=Fm(e),i}class Pm extends Rm{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&!0===this.get(t).initialized}updateForRender(e){!1===this.has(e)&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry;this.get(t).initialized=!0,this.info.memory.geometries++;const r=()=>{this.info.memory.geometries--;const s=t.index,i=e.getAttributes();null!==s&&this.attributes.delete(s);for(const e of i)this.attributes.delete(e);const n=this.wireframes.get(t);void 0!==n&&this.attributes.delete(n),t.removeEventListener("dispose",r)};t.addEventListener("dispose",r)}updateAttributes(e){const t=e.getAttributes();for(const e of t)e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute?this.updateAttribute(e,Cm):this.updateAttribute(e,Am);const r=this.getIndex(e);null!==r&&this.updateAttribute(r,Em);const s=e.geometry.indirect;null!==s&&this.updateAttribute(s,wm)}updateAttribute(e,t){const r=this.info.render.calls;e.isInterleavedBufferAttribute?void 0===this.attributeCall.get(e)?(this.attributes.update(e,t),this.attributeCall.set(e,r)):this.attributeCall.get(e.data)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e.data,r),this.attributeCall.set(e,r)):this.attributeCall.get(e)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e,r))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:r}=e;let s=t.index;if(!0===r.wireframe){const e=this.wireframes;let r=e.get(t);void 0===r?(r=Um(t),e.set(t,r)):r.version!==Fm(t)&&(this.attributes.delete(r),r=Um(t),e.set(t,r)),s=r}return s}}class Im{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0},this.compute={calls:0,frameCalls:0,timestamp:0},this.memory={geometries:0,textures:0}}update(e,t,r){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=r*(t/3):e.isPoints?this.render.points+=r*t:e.isLineSegments?this.render.lines+=r*(t/2):e.isLine?this.render.lines+=r*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}reset(){this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class Lm{constructor(e){this.cacheKey=e,this.usedTimes=0}}class Dm extends Lm{constructor(e,t,r){super(e),this.vertexProgram=t,this.fragmentProgram=r}}class Vm extends Lm{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let Om=0;class Gm{constructor(e,t,r,s=null,i=null){this.id=Om++,this.code=e,this.stage=t,this.name=r,this.transforms=s,this.attributes=i,this.usedTimes=0}}class km extends Rm{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:r}=this,s=this.get(e);if(this._needsComputeUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.computeProgram.usedTimes--);const n=this.nodes.getForCompute(e);let o=this.programs.compute.get(n.computeShader);void 0===o&&(i&&0===i.computeProgram.usedTimes&&this._releaseProgram(i.computeProgram),o=new Gm(n.computeShader,"compute",e.name,n.transforms,n.nodeAttributes),this.programs.compute.set(n.computeShader,o),r.createProgram(o));const a=this._getComputeCacheKey(e,o);let u=this.caches.get(a);void 0===u&&(i&&0===i.usedTimes&&this._releasePipeline(i),u=this._getComputePipeline(e,o,a,t)),u.usedTimes++,o.usedTimes++,s.version=e.version,s.pipeline=u}return s.pipeline}getForRender(e,t=null){const{backend:r}=this,s=this.get(e);if(this._needsRenderUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.vertexProgram.usedTimes--,i.fragmentProgram.usedTimes--);const n=e.getNodeBuilderState(),o=e.material?e.material.name:"";let a=this.programs.vertex.get(n.vertexShader);void 0===a&&(i&&0===i.vertexProgram.usedTimes&&this._releaseProgram(i.vertexProgram),a=new Gm(n.vertexShader,"vertex",o),this.programs.vertex.set(n.vertexShader,a),r.createProgram(a));let u=this.programs.fragment.get(n.fragmentShader);void 0===u&&(i&&0===i.fragmentProgram.usedTimes&&this._releaseProgram(i.fragmentProgram),u=new Gm(n.fragmentShader,"fragment",o),this.programs.fragment.set(n.fragmentShader,u),r.createProgram(u));const l=this._getRenderCacheKey(e,a,u);let d=this.caches.get(l);void 0===d?(i&&0===i.usedTimes&&this._releasePipeline(i),d=this._getRenderPipeline(e,a,u,l,t)):e.pipeline=d,d.usedTimes++,a.usedTimes++,u.usedTimes++,s.pipeline=d}return s.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,0===t.usedTimes&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,0===t.computeProgram.usedTimes&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,0===t.vertexProgram.usedTimes&&this._releaseProgram(t.vertexProgram),0===t.fragmentProgram.usedTimes&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,r,s){r=r||this._getComputeCacheKey(e,t);let i=this.caches.get(r);return void 0===i&&(i=new Vm(r,t),this.caches.set(r,i),this.backend.createComputePipeline(i,s)),i}_getRenderPipeline(e,t,r,s,i){s=s||this._getRenderCacheKey(e,t,r);let n=this.caches.get(s);return void 0===n&&(n=new Dm(s,t,r),this.caches.set(s,n),e.pipeline=n,this.backend.createRenderPipeline(e,i)),n}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,r){return t.id+","+r.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,r=e.stage;this.programs[r].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return void 0===t.pipeline||t.version!==e.version}_needsRenderUpdate(e){return void 0===this.get(e).pipeline||this.backend.needsRenderUpdate(e)}}class zm extends Rm{constructor(e,t,r,s,i,n){super(),this.backend=e,this.textures=r,this.pipelines=i,this.attributes=s,this.nodes=t,this.info=n,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?wm:Cm;this.attributes.update(e,r)}}_update(e,t){const{backend:r}=this;let s=!1,i=!0,n=0,o=0;for(const t of e.bindings){if(t.isNodeUniformsGroup){if(!1===this.nodes.updateGroup(t))continue}if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?wm:Cm;this.attributes.update(e,r)}if(t.isUniformBuffer){t.update()&&r.updateBinding(t)}else if(t.isSampler)t.update();else if(t.isSampledTexture){const e=this.textures.get(t.texture);t.needsBindingsUpdate(e.generation)&&(s=!0);const a=t.update(),u=t.texture;a&&this.textures.updateTexture(u);const l=r.get(u);if(void 0!==l.externalTexture||e.isDefaultTexture?i=!1:(n=10*n+u.id,o+=u.version),!0===r.isWebGPUBackend&&void 0===l.texture&&void 0===l.externalTexture&&(console.error("Bindings._update: binding should be available:",t,a,u,t.textureNode.value,s),this.textures.updateTexture(u),s=!0),!0===u.isStorageTexture){const e=this.get(u);!0===t.store?e.needsMipmap=!0:this.textures.needsMipmaps(u)&&!0===e.needsMipmap&&(this.backend.generateMipmaps(u),e.needsMipmap=!1)}}}!0===s&&this.backend.updateBindings(e,t,i?n:0,o)}}function $m(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Wm(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Hm(e){return(e.transmission>0||e.transmissionNode)&&e.side===Ne&&!1===e.forceSinglePass}class jm{constructor(e,t,r){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,r),this.lightsArray=[],this.scene=t,this.camera=r,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,r,s,i,n,o){let a=this.renderItems[this.renderItemsIndex];return void 0===a?(a={id:e.id,object:e,geometry:t,material:r,groupOrder:s,renderOrder:e.renderOrder,z:i,group:n,clippingContext:o},this.renderItems[this.renderItemsIndex]=a):(a.id=e.id,a.object=e,a.geometry=t,a.material=r,a.groupOrder=s,a.renderOrder=e.renderOrder,a.z=i,a.group=n,a.clippingContext=o),this.renderItemsIndex++,a}push(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===e.occlusionTest&&this.occlusionQueryCount++,!0===r.transparent||r.transmission>0?(Hm(r)&&this.transparentDoublePass.push(a),this.transparent.push(a)):this.opaque.push(a)}unshift(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===r.transparent||r.transmission>0?(Hm(r)&&this.transparentDoublePass.unshift(a),this.transparent.unshift(a)):this.opaque.unshift(a)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||$m),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||Wm),this.transparent.length>1&&this.transparent.sort(t||Wm)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const t=this.renderItems[e];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.groupOrder=null,t.renderOrder=null,t.z=null,t.group=null,t.clippingContext=null}}}const qm=[];class Xm{constructor(e){this.lighting=e,this.lists=new Tm}get(e,t){const r=this.lists;qm[0]=e,qm[1]=t;let s=r.get(qm);return void 0===s&&(s=new jm(this.lighting,e,t),r.set(qm,s)),qm.length=0,s}dispose(){this.lists=new Tm}}let Km=0;class Ym{constructor(){this.id=Km++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new s,this.scissor=!1,this.scissorValue=new s,this.renderTarget=null,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.activeMipmapLevel=0,this.sampleCount=1,this.width=0,this.height=0,this.occlusionQueryCount=0,this.clippingContext=null,this.isRenderContext=!0}getCacheKey(){return Qm(this)}}function Qm(e){const{textures:t,activeCubeFace:r}=e,s=[r];for(const e of t)s.push(e.id);return fs(s)}const Zm=[],Jm=new H,ef=new Se;class tf{constructor(){this.chainMaps={}}get(e,t,r=null){let s;if(Zm[0]=e,Zm[1]=t,null===r)s="default";else{const e=r.texture.format;s=`${r.textures.length}:${e}:${r.samples}:${r.depthBuffer}:${r.stencilBuffer}`}const i=this._getChainMap(s);let n=i.get(Zm);return void 0===n&&(n=new Ym,i.set(Zm,n)),Zm.length=0,null!==r&&(n.sampleCount=0===r.samples?1:r.samples),n}getForClear(e=null){return this.get(Jm,ef,e)}_getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new Tm)}dispose(){this.chainMaps={}}}const rf=new r;class sf extends Rm{constructor(e,t,r){super(),this.renderer=e,this.backend=t,this.info=r}updateRenderTarget(e,t=0){const r=this.get(e),s=0===e.samples?1:e.samples,i=r.depthTextureMips||(r.depthTextureMips={}),n=e.textures,o=this.getSize(n[0]),a=o.width>>t,u=o.height>>t;let l=e.depthTexture||i[t];const d=!0===e.depthBuffer||!0===e.stencilBuffer;let c=!1;void 0===l&&d&&(l=new P,l.format=e.stencilBuffer?Re:Ae,l.type=e.stencilBuffer?Ee:b,l.image.width=a,l.image.height=u,i[t]=l),r.width===o.width&&o.height===r.height||(c=!0,l&&(l.needsUpdate=!0,l.image.width=a,l.image.height=u)),r.width=o.width,r.height=o.height,r.textures=n,r.depthTexture=l||null,r.depth=e.depthBuffer,r.stencil=e.stencilBuffer,r.renderTarget=e,r.sampleCount!==s&&(c=!0,l&&(l.needsUpdate=!0),r.sampleCount=s);const h={sampleCount:s};if(!0!==e.isXRRenderTarget){for(let e=0;e<n.length;e++){const t=n[e];c&&(t.needsUpdate=!0),this.updateTexture(t,h)}l&&this.updateTexture(l,h)}if(!0!==r.initialized){r.initialized=!0;const t=()=>{e.removeEventListener("dispose",t);for(let e=0;e<n.length;e++)this._destroyTexture(n[e]);l&&this._destroyTexture(l),this.delete(e)};e.addEventListener("dispose",t)}}updateTexture(e,t={}){const r=this.get(e);if(!0===r.initialized&&r.version===e.version)return;const s=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,i=this.backend;if(s&&!0===r.initialized&&(i.destroySampler(e),i.destroyTexture(e)),e.isFramebufferTexture){const t=this.renderer.getRenderTarget();e.type=t?t.texture.type:Ce}const{width:n,height:o,depth:a}=this.getSize(e);if(t.width=n,t.height=o,t.depth=a,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,n,o):1,s||!0===e.isStorageTexture)i.createSampler(e),i.createTexture(e,t),r.generation=e.version;else{if(!0!==r.initialized&&i.createSampler(e),e.version>0){const s=e.image;if(void 0===s)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(!1===s.complete)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const r=[];for(const t of e.images)r.push(t);t.images=r}else t.image=s;void 0!==r.isDefaultTexture&&!0!==r.isDefaultTexture||(i.createTexture(e,t),r.isDefaultTexture=!1,r.generation=e.version),!0===e.source.dataReady&&i.updateTexture(e,t),t.needsMipmaps&&0===e.mipmaps.length&&i.generateMipmaps(e)}}else i.createDefaultTexture(e),r.isDefaultTexture=!0,r.generation=e.version}if(!0!==r.initialized){r.initialized=!0,r.generation=e.version,this.info.memory.textures++;const t=()=>{e.removeEventListener("dispose",t),this._destroyTexture(e),this.info.memory.textures--};e.addEventListener("dispose",t)}r.version=e.version}getSize(e,t=rf){let r=e.images?e.images[0]:e.image;return r?(void 0!==r.image&&(r=r.image),t.width=r.width||1,t.height=r.height||1,t.depth=e.isCubeTexture?6:r.depth||1):t.width=t.height=t.depth=1,t}getMipLevels(e,t,r){let s;return s=e.isCompressedTexture?e.mipmaps?e.mipmaps.length:1:Math.floor(Math.log2(Math.max(t,r)))+1,s}needsMipmaps(e){return this.isEnvironmentTexture(e)||!0===e.isCompressedTexture||e.generateMipmaps}isEnvironmentTexture(e){const t=e.mapping;return t===K||t===Y||t===S||t===R}_destroyTexture(e){this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e)}}class nf extends e{constructor(e,t,r,s=1){super(e,t,r),this.a=s}set(e,t,r,s=1){return this.a=s,super.set(e,t,r)}copy(e){return void 0!==e.a&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class of extends yn{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}class af extends Gs{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}getMemberType(e,t){return this.outputNode?this.outputNode.getMemberType(e,t):"void"}add(e){return this.nodes.push(e),this}If(e,t){const r=new Ei(t);return this._currentCond=La(e,r),this.add(this._currentCond)}ElseIf(e,t){const r=new Ei(t),s=La(e,r);return this._currentCond.elseNode=s,this._currentCond=s,this}Else(e){return this._currentCond.elseNode=new Ei(e),this}build(e,...t){const r=Ii();Pi(this);for(const t of this.nodes)t.build(e,"void");return Pi(r),this.outputNode?this.outputNode.build(e,...t):super.build(e,...t)}else(...e){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...e)}elseif(...e){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...e)}}const uf=Bi(af);class lf extends Gs{static get type(){return"StructTypeNode"}constructor(e,t=null){var r;super("struct"),this.membersLayout=(r=e,Object.entries(r).map((([e,t])=>"string"==typeof t?{name:e,type:t,atomic:!1}:{name:e,type:t.type,atomic:t.atomic||!1}))),this.name=t,this.isStructLayoutNode=!0}getLength(){let e=0;for(const t of this.membersLayout)e+=Ss(t.type);return e}getMemberType(e,t){const r=this.membersLayout.find((e=>e.name===t));return r?r.type:"void"}getNodeType(e){return e.getStructTypeFromNode(this,this.membersLayout,this.name).name}setup(e){e.addInclude(this)}generate(e){return this.getNodeType(e)}}class df extends Gs{static get type(){return"StructNode"}constructor(e,t){super("vec3"),this.structLayoutNode=e,this.values=t,this.isStructNode=!0}getNodeType(e){return this.structLayoutNode.getNodeType(e)}getMemberType(e,t){return this.structLayoutNode.getMemberType(e,t)}generate(e){const t=e.getVarFromNode(this),r=t.type,s=e.getPropertyName(t);return e.addLineFlowCode(`${s} = ${e.generateStruct(r,this.structLayoutNode.membersLayout,this.values)}`,this),t.name}}class cf extends Gs{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}getNodeType(e){const t=e.getNodeProperties(this);if(void 0===t.membersLayout){const r=this.members,s=[];for(let t=0;t<r.length;t++){const i="m"+t,n=r[t].getNodeType(e);s.push({name:i,type:n,index:t})}t.membersLayout=s,t.structType=e.getOutputStructTypeFromNode(this,t.membersLayout)}return t.structType.name}generate(e){const t=e.getOutputStructName(),r=this.members,s=""!==t?t+".":"";for(let t=0;t<r.length;t++){const i=r[t].build(e);e.addLineFlowCode(`${s}m${t} = ${i}`,this)}return t}}const hf=Bi(cf);function pf(e,t){for(let r=0;r<e.length;r++)if(e[r].name===t)return r;return-1}class gf extends cf{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return void 0!==this.outputNodes[e]}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return mf(t)}setup(e){const t=this.outputNodes,r=[],s=e.renderer.getRenderTarget().textures;for(const e in t){r[pf(s,e)]=Qi(t[e])}return this.members=r,super.setup(e)}}const mf=Bi(gf),ff=Ui((([e])=>{const t=e.toUint().mul(747796405).add(2891336453),r=t.shiftRight(t.shiftRight(28).add(4)).bitXor(t).mul(277803737);return r.shiftRight(22).bitXor(r).toFloat().mul(1/2**32)})),yf=(e,t)=>fa(to(4,e.mul(eo(1,e))),t),xf=Ui((([e])=>e.fract().sub(.5).abs())).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),bf=Ui((([e])=>qi(xf(e.z.add(xf(e.y.mul(1)))),xf(e.z.add(xf(e.x.mul(1)))),xf(e.y.add(xf(e.x.mul(1))))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),Tf=Ui((([e,t,r])=>{const s=qi(e).toVar(),i=Oi(1.4).toVar(),n=Oi(0).toVar(),o=qi(s).toVar();return Bc({start:Oi(0),end:Oi(3),type:"float",condition:"<="},(()=>{const e=qi(bf(o.mul(2))).toVar();s.addAssign(e.add(r.mul(Oi(.1).mul(t)))),o.mulAssign(1.8),i.mulAssign(1.5),s.mulAssign(1.2);const a=Oi(xf(s.z.add(xf(s.x.add(xf(s.y)))))).toVar();n.addAssign(a.div(i)),o.addAssign(.14)})),n})).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"position",type:"vec3"},{name:"speed",type:"float"},{name:"time",type:"float"}]});class _f extends Gs{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let r=this._candidateFnCall;if(null===r){let s=null,i=-1;for(const r of this.functionNodes){const n=r.shaderNode.layout;if(null===n)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const o=n.inputs;if(t.length===o.length){let n=0;for(let r=0;r<t.length;r++){const s=t[r],i=o[r];s.getNodeType(e)===i.type?n++:n=0}n>i&&(s=r,i=n)}}this._candidateFnCall=r=s(...t)}return r}}const vf=Bi(_f),Nf=e=>(...t)=>vf(e,...t),Sf=fn(0).setGroup(pn).onRenderUpdate((e=>e.time)),Rf=fn(0).setGroup(pn).onRenderUpdate((e=>e.deltaTime)),Af=fn(0,"uint").setGroup(pn).onRenderUpdate((e=>e.frameId)),Ef=Ui((([e,t,r=$i(.5)])=>om(e.sub(r),t).add(r))),Cf=Ui((([e,t,r=$i(.5)])=>{const s=e.sub(r),i=s.dot(s),n=i.mul(i).mul(t);return e.add(s.mul(n))})),wf=Ui((({position:e=null,horizontal:t=!0,vertical:r=!1})=>{let s;null!==e?(s=dl.toVar(),s[3][0]=e.x,s[3][1]=e.y,s[3][2]=e.z):s=dl;const i=Yu.mul(s);return Ri(t)&&(i[0][0]=dl[0].length(),i[0][1]=0,i[0][2]=0),Ri(r)&&(i[1][0]=0,i[1][1]=dl[1].length(),i[1][2]=0),i[2][0]=0,i[2][1]=0,i[2][2]=1,Xu.mul(i).mul(vl)})),Mf=Ui((([e=null])=>{const t=fh();return fh(uh(e)).sub(t).lessThan(0).select(jc,e)}));class Bf extends Gs{static get type(){return"SpriteSheetUVNode"}constructor(e,t=Fu(),r=Oi(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=r}setup(){const{frameNode:e,uvNode:t,countNode:r}=this,{width:s,height:i}=r,n=e.mod(s.mul(i)).floor(),o=n.mod(s),a=i.sub(n.add(1).div(s).ceil()),u=r.reciprocal(),l=$i(o,a);return t.add(l).mul(u)}}const Ff=Bi(Bf);class Uf extends Gs{static get type(){return"TriplanarTexturesNode"}constructor(e,t=null,r=null,s=Oi(1),i=vl,n=Fl){super("vec4"),this.textureXNode=e,this.textureYNode=t,this.textureZNode=r,this.scaleNode=s,this.positionNode=i,this.normalNode=n}setup(){const{textureXNode:e,textureYNode:t,textureZNode:r,scaleNode:s,positionNode:i,normalNode:n}=this;let o=n.abs().normalize();o=o.div(o.dot(qi(1)));const a=i.yz.mul(s),u=i.zx.mul(s),l=i.xy.mul(s),d=e.value,c=null!==t?t.value:d,h=null!==r?r.value:d,p=Vu(d,a).mul(o.x),g=Vu(c,u).mul(o.y),m=Vu(h,l).mul(o.z);return Jn(p,g,m)}}const Pf=Bi(Uf),If=new we,Lf=new r,Df=new r,Vf=new r,Of=new o,Gf=new r(0,0,-1),kf=new s,zf=new r,$f=new r,Wf=new s,Hf=new t,jf=new ne,qf=jc.flipX();jf.depthTexture=new P(1,1);let Xf=!1;class Kf extends Du{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||jf.texture,qf),this._reflectorBaseNode=e.reflector||new Yf(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(null===this._depthNode){if(!0!==this._reflectorBaseNode.depth)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=Ci(new Kf({defaultTexture:jf.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e._reflectorBaseNode=this._reflectorBaseNode,e}}class Yf extends Gs{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:r=new Me,resolution:s=1,generateMipmaps:i=!1,bounces:n=!0,depth:o=!1}=t;this.textureNode=e,this.target=r,this.resolution=s,this.generateMipmaps=i,this.bounces=n,this.depth=o,this.updateBeforeType=n?Fs.RENDER:Fs.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new WeakMap,this.forceUpdate=!1}_updateResolution(e,t){const r=this.resolution;t.getDrawingBufferSize(Hf),e.setSize(Math.round(Hf.width*r),Math.round(Hf.height*r))}setup(e){return this._updateResolution(jf,e.renderer),super.setup(e)}getVirtualCamera(e){let t=this.virtualCameras.get(e);return void 0===t&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return void 0===t&&(t=new ne(0,0,{type:ce}),!0===this.generateMipmaps&&(t.texture.minFilter=Be,t.texture.generateMipmaps=!0),!0===this.depth&&(t.depthTexture=new P),this.renderTargets.set(e,t)),t}updateBefore(e){if(!1===this.bounces&&Xf)return!1;Xf=!0;const{scene:t,camera:r,renderer:s,material:i}=e,{target:n}=this,o=this.getVirtualCamera(r),a=this.getRenderTarget(o);s.getDrawingBufferSize(Hf),this._updateResolution(a,s),Df.setFromMatrixPosition(n.matrixWorld),Vf.setFromMatrixPosition(r.matrixWorld),Of.extractRotation(n.matrixWorld),Lf.set(0,0,1),Lf.applyMatrix4(Of),zf.subVectors(Df,Vf);if(!0===zf.dot(Lf)>0&&!1===this.forceUpdate)return;zf.reflect(Lf).negate(),zf.add(Df),Of.extractRotation(r.matrixWorld),Gf.set(0,0,-1),Gf.applyMatrix4(Of),Gf.add(Vf),$f.subVectors(Df,Gf),$f.reflect(Lf).negate(),$f.add(Df),o.coordinateSystem=r.coordinateSystem,o.position.copy(zf),o.up.set(0,1,0),o.up.applyMatrix4(Of),o.up.reflect(Lf),o.lookAt($f),o.near=r.near,o.far=r.far,o.updateMatrixWorld(),o.projectionMatrix.copy(r.projectionMatrix),If.setFromNormalAndCoplanarPoint(Lf,Df),If.applyMatrix4(o.matrixWorldInverse),kf.set(If.normal.x,If.normal.y,If.normal.z,If.constant);const u=o.projectionMatrix;Wf.x=(Math.sign(kf.x)+u.elements[8])/u.elements[0],Wf.y=(Math.sign(kf.y)+u.elements[9])/u.elements[5],Wf.z=-1,Wf.w=(1+u.elements[10])/u.elements[14],kf.multiplyScalar(1/kf.dot(Wf));u.elements[2]=kf.x,u.elements[6]=kf.y,u.elements[10]=s.coordinateSystem===d?kf.z-0:kf.z+1-0,u.elements[14]=kf.w,this.textureNode.value=a.texture,!0===this.depth&&(this.textureNode.getDepthNode().value=a.depthTexture),i.visible=!1;const l=s.getRenderTarget(),c=s.getMRT(),h=s.autoClear;s.setMRT(null),s.setRenderTarget(a),s.autoClear=!0,s.render(t,o),s.setMRT(c),s.setRenderTarget(l),s.autoClear=h,i.visible=!0,Xf=!1,this.forceUpdate=!1}}const Qf=new se(-1,1,1,-1,0,1);class Zf extends ae{constructor(e=!1){super();const t=!1===e?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new Fe([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new Fe(t,2))}}const Jf=new Zf;class ey extends W{constructor(e=null){super(Jf,e),this.camera=Qf,this.isQuadMesh=!0}async renderAsync(e){return e.renderAsync(this,Qf)}render(e){e.render(this,Qf)}}const ty=new t;class ry extends Du{static get type(){return"RTTNode"}constructor(e,t=null,r=null,s={type:ce}){const i=new ne(t,r,s);super(i.texture,Fu()),this.node=e,this.width=t,this.height=r,this.pixelRatio=1,this.renderTarget=i,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this._rttNode=null,this._quadMesh=new ey(new Nh),this.updateBeforeType=Fs.RENDER}get autoSize(){return null===this.width}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const r=e*this.pixelRatio,s=t*this.pixelRatio;this.renderTarget.setSize(r,s),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(!1===this.textureNeedsUpdate&&!1===this.autoUpdate)return;if(this.textureNeedsUpdate=!1,!0===this.autoSize){this.pixelRatio=e.getPixelRatio();const t=e.getSize(ty);this.setSize(t.width,t.height)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new Du(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const sy=(e,...t)=>Ci(new ry(Ci(e),...t)),iy=Ui((([e,t,r],s)=>{let i;s.renderer.coordinateSystem===d?(e=$i(e.x,e.y.oneMinus()).mul(2).sub(1),i=Qi(qi(e,t),1)):i=Qi(qi(e.x,e.y.oneMinus(),t).mul(2).sub(1),1);const n=Qi(r.mul(i));return n.xyz.div(n.w)})),ny=Ui((([e,t])=>{const r=t.mul(Qi(e,1)),s=r.xy.div(r.w).mul(.5).add(.5).toVar();return $i(s.x,s.y.oneMinus())})),oy=Ui((([e,t,r])=>{const s=Pu(Ou(t)),i=Wi(e.mul(s)).toVar(),n=Ou(t,i).toVar(),o=Ou(t,i.sub(Wi(2,0))).toVar(),a=Ou(t,i.sub(Wi(1,0))).toVar(),u=Ou(t,i.add(Wi(1,0))).toVar(),l=Ou(t,i.add(Wi(2,0))).toVar(),d=Ou(t,i.add(Wi(0,2))).toVar(),c=Ou(t,i.add(Wi(0,1))).toVar(),h=Ou(t,i.sub(Wi(0,1))).toVar(),p=Ou(t,i.sub(Wi(0,2))).toVar(),g=qo(eo(Oi(2).mul(a).sub(o),n)).toVar(),m=qo(eo(Oi(2).mul(u).sub(l),n)).toVar(),f=qo(eo(Oi(2).mul(c).sub(d),n)).toVar(),y=qo(eo(Oi(2).mul(h).sub(p),n)).toVar(),x=iy(e,n,r).toVar(),b=g.lessThan(m).select(x.sub(iy(e.sub($i(Oi(1).div(s.x),0)),a,r)),x.negate().add(iy(e.add($i(Oi(1).div(s.x),0)),u,r))),T=f.lessThan(y).select(x.sub(iy(e.add($i(0,Oi(1).div(s.y))),c,r)),x.negate().add(iy(e.sub($i(0,Oi(1).div(s.y))),h,r)));return Oo(ma(b,T))}));class ay extends w{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageInstancedBufferAttribute=!0}}class uy extends ue{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageBufferAttribute=!0}}class ly extends ks{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}getMemberType(e,t){const r=this.storageBufferNode.structTypeNode;return r?r.getMemberType(e,t):"void"}setup(e){return!1===e.isAvailable("storageBuffer")&&!0===this.node.isPBO&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let r;const s=e.context.assign;if(r=!1===e.isAvailable("storageBuffer")?!0!==this.node.isPBO||!0===s||!this.node.value.isInstancedBufferAttribute&&"compute"===e.shaderStage?this.node.build(e):e.generatePBO(this):super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}const dy=Bi(ly);class cy extends Gu{static get type(){return"StorageBufferNode"}constructor(e,t=null,r=0){let s,i=null;t&&t.isStruct?(s="struct",i=t.layout):null===t&&(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)?(s=vs(e.itemSize),r=e.count):s=t,super(e,s,r),this.isStorageBufferNode=!0,this.structTypeNode=i,this.access=Ps.READ_WRITE,this.isAtomic=!1,this.isPBO=!1,this._attribute=null,this._varying=null,this.global=!0,!0!==e.isStorageBufferAttribute&&!0!==e.isStorageInstancedBufferAttribute&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(0===this.bufferCount){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return dy(this,e)}setPBO(e){return this.isPBO=e,this}getPBO(){return this.isPBO}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(Ps.READ_ONLY)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return null===this._attribute&&(this._attribute=hu(this.value),this._varying=qa(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(null!==this.structTypeNode)return this.structTypeNode.getNodeType(e);if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}generate(e){if(null!==this.structTypeNode&&this.structTypeNode.build(e),e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:r}=this.getAttributeData(),s=r.build(e);return e.registerTransform(s,t),s}}const hy=(e,t=null,r=0)=>Ci(new cy(e,t,r));class py extends Mu{static get type(){return"VertexColorNode"}constructor(e=0){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e);let r;return r=!0===e.hasGeometryAttribute(t)?super.generate(e):e.generateConst(this.nodeType,new s(1,1,1,1)),r}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}class gy extends Gs{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const my=Fi(gy),fy=new N,yy=new o;class xy extends Gs{static get type(){return"SceneNode"}constructor(e=xy.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,r=null!==this.scene?this.scene:e.scene;let s;return t===xy.BACKGROUND_BLURRINESS?s=ed("backgroundBlurriness","float",r):t===xy.BACKGROUND_INTENSITY?s=ed("backgroundIntensity","float",r):t===xy.BACKGROUND_ROTATION?s=fn("mat4").label("backgroundRotation").setGroup(pn).onRenderUpdate((()=>{const e=r.background;return null!==e&&e.isTexture&&e.mapping!==Ue?(fy.copy(r.backgroundRotation),fy.x*=-1,fy.y*=-1,fy.z*=-1,yy.makeRotationFromEuler(fy)):yy.identity(),yy})):console.error("THREE.SceneNode: Unknown scope:",t),s}}xy.BACKGROUND_BLURRINESS="backgroundBlurriness",xy.BACKGROUND_INTENSITY="backgroundIntensity",xy.BACKGROUND_ROTATION="backgroundRotation";const by=Fi(xy,xy.BACKGROUND_BLURRINESS),Ty=Fi(xy,xy.BACKGROUND_INTENSITY),_y=Fi(xy,xy.BACKGROUND_ROTATION);class vy extends Du{static get type(){return"StorageTextureNode"}constructor(e,t,r=null){super(e,t),this.storeNode=r,this.isStorageTextureNode=!0,this.access=Ps.WRITE_ONLY}getInputType(){return"storageTexture"}setup(e){super.setup(e);e.getNodeProperties(this).storeNode=this.storeNode}setAccess(e){return this.access=e,this}generate(e,t){let r;return r=null!==this.storeNode?this.generateStore(e):super.generate(e,t),r}toReadWrite(){return this.setAccess(Ps.READ_WRITE)}toReadOnly(){return this.setAccess(Ps.READ_ONLY)}toWriteOnly(){return this.setAccess(Ps.WRITE_ONLY)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:r,storeNode:s}=t,i=super.generate(e,"property"),n=r.build(e,"uvec2"),o=s.build(e,"vec4"),a=e.generateTextureStore(e,i,n,o);e.addLineFlowCode(a,this)}}const Ny=Bi(vy),Sy=Ui((({texture:e,uv:t})=>{const r=1e-4,s=qi().toVar();return Li(t.x.lessThan(r),(()=>{s.assign(qi(1,0,0))})).ElseIf(t.y.lessThan(r),(()=>{s.assign(qi(0,1,0))})).ElseIf(t.z.lessThan(r),(()=>{s.assign(qi(0,0,1))})).ElseIf(t.x.greaterThan(.9999),(()=>{s.assign(qi(-1,0,0))})).ElseIf(t.y.greaterThan(.9999),(()=>{s.assign(qi(0,-1,0))})).ElseIf(t.z.greaterThan(.9999),(()=>{s.assign(qi(0,0,-1))})).Else((()=>{const r=.01,i=e.sample(t.add(qi(-.01,0,0))).r.sub(e.sample(t.add(qi(r,0,0))).r),n=e.sample(t.add(qi(0,-.01,0))).r.sub(e.sample(t.add(qi(0,r,0))).r),o=e.sample(t.add(qi(0,0,-.01))).r.sub(e.sample(t.add(qi(0,0,r))).r);s.assign(qi(i,n,o))})),s.normalize()}));class Ry extends Du{static get type(){return"Texture3DNode"}constructor(e,t=null,r=null){super(e,t,r),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return qi(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return!e.isFlipY()||!0!==r.isRenderTargetTexture&&!0!==r.isFramebufferTexture||(t=this.sampler?t.flipY():t.setY(Gi(Pu(this,this.levelNode).y).sub(t.y).sub(1))),t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return Sy({texture:this,uv:e})}}const Ay=Bi(Ry);class Ey extends Jl{static get type(){return"UserDataNode"}constructor(e,t,r=null){super(e,t,r),this.userData=r}updateReference(e){return this.reference=null!==this.userData?this.userData:e.object.userData,this.reference}}const Cy=new WeakMap;class wy extends $s{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=Fs.OBJECT,this.updateAfterType=Fs.OBJECT,this.previousModelWorldMatrix=fn(new o),this.previousProjectionMatrix=fn(new o).setGroup(pn),this.previousCameraViewMatrix=fn(new o)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:r}){const s=By(r);this.previousModelWorldMatrix.value.copy(s);const i=My(t);i.frameId!==e&&(i.frameId=e,void 0===i.previousProjectionMatrix?(i.previousProjectionMatrix=new o,i.previousCameraViewMatrix=new o,i.currentProjectionMatrix=new o,i.currentCameraViewMatrix=new o,i.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(i.previousProjectionMatrix.copy(i.currentProjectionMatrix),i.previousCameraViewMatrix.copy(i.currentCameraViewMatrix)),i.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(i.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(i.previousCameraViewMatrix))}updateAfter({object:e}){By(e).copy(e.matrixWorld)}setup(){const e=null===this.projectionMatrix?Xu:fn(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),r=e.mul(yl).mul(vl),s=this.previousProjectionMatrix.mul(t).mul(Nl),i=r.xy.div(r.w),n=s.xy.div(s.w);return eo(i,n)}}function My(e){let t=Cy.get(e);return void 0===t&&(t={},Cy.set(e,t)),t}function By(e,t=0){const r=My(e);let s=r[t];return void 0===s&&(r[t]=s=new o),s}const Fy=Fi(wy),Uy=Ui((([e,t])=>aa(1,e.oneMinus().div(t)).oneMinus())).setLayout({name:"blendBurn",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Py=Ui((([e,t])=>aa(e.div(t.oneMinus()),1))).setLayout({name:"blendDodge",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Iy=Ui((([e,t])=>e.oneMinus().mul(t.oneMinus()).oneMinus())).setLayout({name:"blendScreen",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Ly=Ui((([e,t])=>Na(e.mul(2).mul(t),e.oneMinus().mul(2).mul(t.oneMinus()).oneMinus(),da(.5,e)))).setLayout({name:"blendOverlay",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Dy=Ui((([e,t])=>{const r=t.a.add(e.a.mul(t.a.oneMinus()));return Qi(t.rgb.mul(t.a).add(e.rgb.mul(e.a).mul(t.a.oneMinus())).div(r),r)})).setLayout({name:"blendColor",type:"vec4",inputs:[{name:"base",type:"vec4"},{name:"blend",type:"vec4"}]}),Vy=Ui((([e])=>zy(e.rgb))),Oy=Ui((([e,t=Oi(1)])=>t.mix(zy(e.rgb),e.rgb))),Gy=Ui((([e,t=Oi(1)])=>{const r=Jn(e.r,e.g,e.b).div(3),s=e.r.max(e.g.max(e.b)),i=s.sub(r).mul(t).mul(-3);return Na(e.rgb,s,i)})),ky=Ui((([e,t=Oi(1)])=>{const r=qi(.57735,.57735,.57735),s=t.cos();return qi(e.rgb.mul(s).add(r.cross(e.rgb).mul(t.sin()).add(r.mul(ga(r,e.rgb).mul(s.oneMinus())))))})),zy=(e,t=qi(c.getLuminanceCoefficients(new r)))=>ga(e,t),$y=Ui((([e,t=qi(1),s=qi(0),i=qi(1),n=Oi(1),o=qi(c.getLuminanceCoefficients(new r,le))])=>{const a=e.rgb.dot(qi(o)),u=ua(e.rgb.mul(t).add(s),0).toVar(),l=u.pow(i).toVar();return Li(u.r.greaterThan(0),(()=>{u.r.assign(l.r)})),Li(u.g.greaterThan(0),(()=>{u.g.assign(l.g)})),Li(u.b.greaterThan(0),(()=>{u.b.assign(l.b)})),u.assign(a.add(u.sub(a).mul(n))),Qi(u.rgb,e.a)}));class Wy extends $s{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const Hy=Bi(Wy),jy=new t;class qy extends Du{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return e.object.isQuadMesh&&this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class Xy extends qy{static get type(){return"PassMultipleTextureNode"}constructor(e,t,r=!1){super(e,null),this.textureName=t,this.previousTexture=r}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class Ky extends $s{static get type(){return"PassNode"}constructor(e,t,r,s={}){super("vec4"),this.scope=e,this.scene=t,this.camera=r,this.options=s,this._pixelRatio=1,this._width=1,this._height=1;const i=new P;i.isRenderTargetTexture=!0,i.name="depth";const n=new ne(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:ce,...s});n.texture.name="output",n.depthTexture=i,this.renderTarget=n,this._textures={output:n.texture,depth:i},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=fn(0),this._cameraFar=fn(0),this._mrt=null,this._layers=null,this._resolution=1,this.isPassNode=!0,this.updateBeforeType=Fs.FRAME}setResolution(e){return this._resolution=e,this}getResolution(){return this._resolution}setLayers(e){return this._layers=e,this}getLayers(){return this._layers}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(e){let t=this._textures[e];if(void 0===t){t=this.renderTarget.texture.clone(),t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)}return t}getPreviousTexture(e){let t=this._previousTextures[e];return void 0===t&&(t=this.getTexture(e).clone(),this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(void 0!==t){const r=this._textures[e],s=this.renderTarget.textures.indexOf(r);this.renderTarget.textures[s]=t,this._textures[e]=t,this._previousTextures[e]=r,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return void 0===t&&(t=Ci(new Xy(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),t=Ci(new Xy(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar;this._viewZNodes[e]=t=hh(this.getTextureNode(e),r,s)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar,i=this.getViewZNode(e);this._linearDepthNodes[e]=t=dh(i,r,s)}return t}setup({renderer:e}){return this.renderTarget.samples=void 0===this.options.samples?e.samples:this.options.samples,!0===e.backend.isWebGLBackend&&(this.renderTarget.samples=0),this.renderTarget.texture.type=e.getColorBufferType(),this.scope===Ky.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:r}=this;let s,i;const n=t.getOutputRenderTarget();n&&!0===n.isXRRenderTarget?(i=1,s=t.xr.getCamera(),t.xr.updateCamera(s),jy.set(n.width,n.height)):(s=this.camera,i=t.getPixelRatio(),t.getSize(jy)),this._pixelRatio=i,this.setSize(jy.width,jy.height);const o=t.getRenderTarget(),a=t.getMRT(),u=s.layers.mask;this._cameraNear.value=s.near,this._cameraFar.value=s.far,null!==this._layers&&(s.layers.mask=this._layers.mask);for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(r,s),t.setRenderTarget(o),t.setMRT(a),s.layers.mask=u}setSize(e,t){this._width=e,this._height=t;const r=this._width*this._pixelRatio*this._resolution,s=this._height*this._pixelRatio*this._resolution;this.renderTarget.setSize(r,s)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}Ky.COLOR="color",Ky.DEPTH="depth";class Yy extends Ky{static get type(){return"ToonOutlinePassNode"}constructor(e,t,r,s,i){super(Ky.COLOR,e,t),this.colorNode=r,this.thicknessNode=s,this.alphaNode=i,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,r=t.getRenderObjectFunction();t.setRenderObjectFunction(((e,r,s,i,n,o,a,u)=>{if((n.isMeshToonMaterial||n.isMeshToonNodeMaterial)&&!1===n.wireframe){const l=this._getOutlineMaterial(n);t.renderObject(e,r,s,i,l,o,a,u)}t.renderObject(e,r,s,i,n,o,a,u)})),super.updateBefore(e),t.setRenderObjectFunction(r)}_createMaterial(){const e=new Nh;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=v;const t=Fl.negate(),r=Xu.mul(yl),s=Oi(1),i=r.mul(Qi(vl,1)),n=r.mul(Qi(vl.add(t),1)),o=Oo(i.sub(n));return e.vertexNode=i.add(o.mul(this.thicknessNode).mul(i.w).mul(s)),e.colorNode=Qi(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return void 0===t&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const Qy=Ui((([e,t])=>e.mul(t).clamp())).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Zy=Ui((([e,t])=>(e=e.mul(t)).div(e.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Jy=Ui((([e,t])=>{const r=(e=(e=e.mul(t)).sub(.004).max(0)).mul(e.mul(6.2).add(.5)),s=e.mul(e.mul(6.2).add(1.7)).add(.06);return r.div(s).pow(2.2)})).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),ex=Ui((([e])=>{const t=e.mul(e.add(.0245786)).sub(90537e-9),r=e.mul(e.add(.432951).mul(.983729)).add(.238081);return t.div(r)})),tx=Ui((([e,t])=>{const r=rn(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),s=rn(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return e=e.mul(t).div(.6),e=r.mul(e),e=ex(e),(e=s.mul(e)).clamp()})).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),rx=rn(qi(1.6605,-.1246,-.0182),qi(-.5876,1.1329,-.1006),qi(-.0728,-.0083,1.1187)),sx=rn(qi(.6274,.0691,.0164),qi(.3293,.9195,.088),qi(.0433,.0113,.8956)),ix=Ui((([e])=>{const t=qi(e).toVar(),r=qi(t.mul(t)).toVar(),s=qi(r.mul(r)).toVar();return Oi(15.5).mul(s.mul(r)).sub(to(40.14,s.mul(t))).add(to(31.96,s).sub(to(6.868,r.mul(t))).add(to(.4298,r).add(to(.1191,t).sub(.00232))))})),nx=Ui((([e,t])=>{const r=qi(e).toVar(),s=rn(qi(.856627153315983,.137318972929847,.11189821299995),qi(.0951212405381588,.761241990602591,.0767994186031903),qi(.0482516061458583,.101439036467562,.811302368396859)),i=rn(qi(1.1271005818144368,-.1413297634984383,-.14132976349843826),qi(-.11060664309660323,1.157823702216272,-.11060664309660294),qi(-.016493938717834573,-.016493938717834257,1.2519364065950405)),n=Oi(-12.47393),o=Oi(4.026069);return r.mulAssign(t),r.assign(sx.mul(r)),r.assign(s.mul(r)),r.assign(ua(r,1e-10)),r.assign(Po(r)),r.assign(r.sub(n).div(o.sub(n))),r.assign(Sa(r,0,1)),r.assign(ix(r)),r.assign(i.mul(r)),r.assign(fa(ua(qi(0),r),qi(2.2))),r.assign(rx.mul(r)),r.assign(Sa(r,0,1)),r})).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),ox=Ui((([e,t])=>{const r=Oi(.76),s=Oi(.15);e=e.mul(t);const i=aa(e.r,aa(e.g,e.b)),n=La(i.lessThan(.08),i.sub(to(6.25,i.mul(i))),.04);e.subAssign(n);const o=ua(e.r,ua(e.g,e.b));Li(o.lessThan(r),(()=>e));const a=eo(1,r),u=eo(1,a.mul(a).div(o.add(a.sub(r))));e.mulAssign(u.div(o));const l=eo(1,ro(1,s.mul(o.sub(u)).add(1)));return Na(e,qi(u),l)})).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class ax extends Gs{static get type(){return"CodeNode"}constructor(e="",t=[],r=""){super("code"),this.isCodeNode=!0,this.code=e,this.includes=t,this.language=r}isGlobal(){return!0}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const r of t)r.build(e);const r=e.getCodeFromNode(this,this.getNodeType(e));return r.code=this.code,r.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const ux=Bi(ax);class lx extends ax{static get type(){return"FunctionNode"}constructor(e="",t=[],r=""){super(e,t,r)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let r=t.nodeFunction;return void 0===r&&(r=e.parser.parseFunction(this.code),t.nodeFunction=r),r}generate(e,t){super.generate(e);const r=this.getNodeFunction(e),s=r.name,i=r.type,n=e.getCodeFromNode(this,i);""!==s&&(n.name=s);const o=e.getPropertyName(n),a=this.getNodeFunction(e).getCode(o);return n.code=a+"\n","property"===t?o:e.format(`${o}()`,i,t)}}const dx=(e,t=[],r="")=>{for(let e=0;e<t.length;e++){const r=t[e];"function"==typeof r&&(t[e]=r.functionNode)}const s=Ci(new lx(e,t,r)),i=(...e)=>s.call(...e);return i.functionNode=s,i};class cx extends Gs{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outputType=null,this.events=new a,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return null!==this.outputType}set value(e){this._value!==e&&(this._cache&&"URL"===this.inputType&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&null===this._cache&&"URL"===this.inputType&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&null!==e.value&&void 0!==e.value&&(("URL"===this.inputType||"String"===this.inputType)&&"string"==typeof e.value||"Number"===this.inputType&&"number"==typeof e.value||"Vector2"===this.inputType&&e.value.isVector2||"Vector3"===this.inputType&&e.value.isVector3||"Vector4"===this.inputType&&e.value.isVector4||"Color"===this.inputType&&e.value.isColor||"Matrix3"===this.inputType&&e.value.isMatrix3||"Matrix4"===this.inputType&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:Oi()}serialize(e){super.serialize(e),null!==this.value?"ArrayBuffer"===this.inputType?e.value=Cs(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;null!==e.value&&(t="ArrayBuffer"===e.inputType?ws(e.value):"Texture"===e.inputType?e.meta.textures[e.value]:e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const hx=Bi(cx);class px extends Map{get(e,t=null,...r){if(this.has(e))return super.get(e);if(null!==t){const s=t(...r);return this.set(e,s),s}}}class gx{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const mx=new px;class fx extends Gs{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new px,this._output=hx(),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const r=this._outputs;return void 0===r[e]?r[e]=hx(t):r[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const r=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),r[e]=t,r[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),r[e]=t,r[e].events.addEventListener("refresh",this.onRefresh)):void 0===r[e]?(r[e]=hx(t),r[e].events.addEventListener("refresh",this.onRefresh)):r[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const r=this.getObject()[e];if("function"==typeof r)return r(...t)}async callAsync(e,...t){const r=this.getObject()[e];if("function"==typeof r)return"AsyncFunction"===r.constructor.name?await r(...t):r(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){null!==e?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),null!==this._object)return this._object;const e=new gx(this),t=mx.get("THREE"),r=mx.get("TSL"),s=this.getMethod(),i=[e,this._local,mx,()=>this.refresh(),(e,t)=>this.setOutput(e,t),t,r];this._object=s(...i);const n=this._object.layout;if(n&&(!1===n.cache&&this._local.clear(),this._output.outputType=n.outputType||null,Array.isArray(n.elements)))for(const e of n.elements){const t=e.id||e.name;e.inputType&&(void 0===this.getParameter(t)&&this.setParameter(t,null),this.getParameter(t).inputType=e.inputType),e.outputType&&(void 0===this.getOutput(t)&&this.setOutput(t,null),this.getOutput(t).outputType=e.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const e in this.parameters){let t=this.parameters[e];t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:Oi()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),null!==this._method)return this._method;const e=["layout","init","main","dispose"].join(", "),t="\nreturn { ...output, "+e+" };",r="var "+e+"; var output = {};\n"+this.codeNode.code+t;return this._method=new Function(...["parameters","local","global","refresh","setOutput","THREE","TSL"],r),this._method}dispose(){null!==this._method&&(this._object&&"function"==typeof this._object.dispose&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[ms(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const r in this.parameters)t.push(this.parameters[r].getCacheKey(e));return fs(t)}set needsUpdate(e){!0===e&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return null===this.codeNode||(!0===this._needsOutputUpdate&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value),this}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const yx=Bi(fx);function xx(e){let t;const r=e.context.getViewZ;return void 0!==r&&(t=r(this)),(t||Al.z).negate()}const bx=Ui((([e,t],r)=>{const s=xx(r);return Ea(e,t,s)})),Tx=Ui((([e],t)=>{const r=xx(t);return e.mul(e,r,r).negate().exp().oneMinus()})),_x=Ui((([e,t])=>Qi(t.toFloat().mix(Vn.rgb,e.toVec3()),Vn.a)));let vx=null,Nx=null;class Sx extends Gs{static get type(){return"RangeNode"}constructor(e=Oi(),t=Oi()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(Rs(this.minNode.value)),r=e.getTypeLength(Rs(this.maxNode.value));return t>r?t:r}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let r=null;if(t.count>1){const i=this.minNode.value,n=this.maxNode.value,o=e.getTypeLength(Rs(i)),a=e.getTypeLength(Rs(n));vx=vx||new s,Nx=Nx||new s,vx.setScalar(0),Nx.setScalar(0),1===o?vx.setScalar(i):i.isColor?vx.set(i.r,i.g,i.b,1):vx.set(i.x,i.y,i.z||0,i.w||0),1===a?Nx.setScalar(n):n.isColor?Nx.set(n.r,n.g,n.b,1):Nx.set(n.x,n.y,n.z||0,n.w||0);const l=4,d=l*t.count,c=new Float32Array(d);for(let e=0;e<d;e++){const t=e%l,r=vx.getComponent(t),s=Nx.getComponent(t);c[e]=u.lerp(r,s,Math.random())}const h=this.getNodeType(e);if(t.count<=4096)r=ku(c,"vec4",t.count).element(fc).convert(h);else{const t=new w(c,4);e.geometry.setAttribute("__range"+this.id,t),r=gu(t).convert(h)}}else r=Oi(0);return r}}const Rx=Bi(Sx);class Ax extends Gs{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){return e.hasBuiltin(this._builtinName)}generate(e,t){const r=this.getBuiltinName(e),s=this.getNodeType(e);return"compute"===e.shaderStage?e.format(r,s,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${r} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(s))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const Ex=(e,t)=>Ci(new Ax(e,t)),Cx=Ex("numWorkgroups","uvec3"),wx=Ex("workgroupId","uvec3"),Mx=Ex("globalId","uvec3"),Bx=Ex("localId","uvec3"),Fx=Ex("subgroupSize","uint");const Ux=Bi(class extends Gs{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:r}=e;!0===r.backend.isWebGLBackend?e.addFlowCode(`\t// ${t}Barrier \n`):e.addLineFlowCode(`${t}Barrier()`,this)}});class Px extends ks{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let r;const s=e.context.assign;if(r=super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}class Ix extends Gs{constructor(e,t,r=0){super(t),this.bufferType=t,this.bufferCount=r,this.isWorkgroupInfoNode=!0,this.elementType=t,this.scope=e}label(e){return this.name=e,this}setScope(e){return this.scope=e,this}getElementType(){return this.elementType}getInputType(){return`${this.scope}Array`}element(e){return Ci(new Px(this,e))}generate(e){return e.getScopedArray(this.name||`${this.scope}Array_${this.id}`,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}class Lx extends $s{static get type(){return"AtomicFunctionNode"}constructor(e,t,r,s=null){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=r,this.storeNode=s}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=this.method,r=this.getNodeType(e),s=this.getInputType(e),i=this.pointerNode,n=this.valueNode,o=[];o.push(`&${i.build(e,s)}`),null!==n&&o.push(n.build(e,s));const a=`${e.getMethod(t,r)}( ${o.join(", ")} )`;if(null!==this.storeNode){const t=this.storeNode.build(e,s);e.addLineFlowCode(`${t} = ${a}`,this)}else e.addLineFlowCode(a,this)}}Lx.ATOMIC_LOAD="atomicLoad",Lx.ATOMIC_STORE="atomicStore",Lx.ATOMIC_ADD="atomicAdd",Lx.ATOMIC_SUB="atomicSub",Lx.ATOMIC_MAX="atomicMax",Lx.ATOMIC_MIN="atomicMin",Lx.ATOMIC_AND="atomicAnd",Lx.ATOMIC_OR="atomicOr",Lx.ATOMIC_XOR="atomicXor";const Dx=Bi(Lx),Vx=(e,t,r,s=null)=>{const i=Dx(e,t,r,s);return i.append(),i};let Ox;function Gx(e){Ox=Ox||new WeakMap;let t=Ox.get(e);return void 0===t&&Ox.set(e,t={}),t}function kx(e){const t=Gx(e);return t.shadowMatrix||(t.shadowMatrix=fn("mat4").setGroup(pn).onRenderUpdate((()=>(!0!==e.castShadow&&e.shadow.updateMatrices(e),e.shadow.matrix))))}function zx(e,t=Sl){const r=kx(e).mul(t);return r.xyz.div(r.w)}function $x(e){const t=Gx(e);return t.position||(t.position=fn(new r).setGroup(pn).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.matrixWorld))))}function Wx(e){const t=Gx(e);return t.targetPosition||(t.targetPosition=fn(new r).setGroup(pn).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.target.matrixWorld))))}function Hx(e){const t=Gx(e);return t.viewPosition||(t.viewPosition=fn(new r).setGroup(pn).onRenderUpdate((({camera:t},s)=>{s.value=s.value||new r,s.value.setFromMatrixPosition(e.matrixWorld),s.value.applyMatrix4(t.matrixWorldInverse)})))}const jx=e=>Yu.transformDirection($x(e).sub(Wx(e))),qx=(e,t)=>{for(const r of t)if(r.isAnalyticLightNode&&r.light.id===e)return r;return null},Xx=new WeakMap;class Kx extends Gs{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=qi().toVar("totalDiffuse"),this.totalSpecularNode=qi().toVar("totalSpecular"),this.outgoingLightNode=qi().toVar("outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}customCacheKey(){const e=[],t=this._lights;for(let r=0;r<t.length;r++)e.push(t[r].id);return fs(e)}getHash(e){if(null===this._lightNodesHash){null===this._lightNodes&&this.setupLightsNode(e);const t=[];for(const e of this._lightNodes)t.push(e.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getDataFromNode(this);for(const r of t.nodes)r.build(e)}setupLightsNode(e){const t=[],r=this._lightNodes,s=(e=>e.sort(((e,t)=>e.id-t.id)))(this._lights),i=e.renderer.library;for(const e of s)if(e.isNode)t.push(Ci(e));else{let s=null;if(null!==r&&(s=qx(e.id,r)),null===s){const r=i.getLightNodeClass(e.constructor);if(null===r){console.warn(`LightsNode.setupNodeLights: Light node not found for ${e.constructor.name}`);continue}let s=null;Xx.has(e)?s=Xx.get(e):(s=Ci(new r(e)),Xx.set(e,s)),t.push(s)}}this._lightNodes=t}setupDirectLight(e,t,r){const{lightingModel:s,reflectedLight:i}=e.context;s.direct({...r,lightNode:t,reflectedLight:i},e)}setupDirectRectAreaLight(e,t,r){const{lightingModel:s,reflectedLight:i}=e.context;s.directRectArea({...r,lightNode:t,reflectedLight:i},e)}setupLights(e,t){for(const r of t)r.build(e)}getLightNodes(e){return null===this._lightNodes&&this.setupLightsNode(e),this._lightNodes}setup(e){const t=e.lightsNode;e.lightsNode=this;let r=this.outgoingLightNode;const s=e.context,i=s.lightingModel,n=e.getDataFromNode(this);if(i){const{totalDiffuseNode:t,totalSpecularNode:o}=this;s.outgoingLight=r;const a=e.addStack();n.nodes=a.nodes,i.start(e);const{backdrop:u,backdropAlpha:l}=s,{directDiffuse:d,directSpecular:c,indirectDiffuse:h,indirectSpecular:p}=s.reflectedLight;let g=d.add(h);null!==u&&(g=qi(null!==l?l.mix(g,u):u),s.material.transparent=!0),t.assign(g),o.assign(c.add(p)),r.assign(t.add(o)),i.finish(e),r=r.bypass(e.removeStack())}else n.nodes=[];return e.lightsNode=t,r}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}class Yx extends Gs{static get type(){return"ShadowBaseNode"}constructor(e){super(),this.light=e,this.updateBeforeType=Fs.RENDER,this.isShadowBaseNode=!0}setupShadowPosition({context:e,material:t}){Qx.assign(t.shadowPositionNode||e.shadowPositionWorld||Sl)}dispose(){this.updateBeforeType=Fs.NONE}}const Qx=xn("vec3","shadowPositionWorld");function Zx(t,r={}){return r.toneMapping=t.toneMapping,r.toneMappingExposure=t.toneMappingExposure,r.outputColorSpace=t.outputColorSpace,r.renderTarget=t.getRenderTarget(),r.activeCubeFace=t.getActiveCubeFace(),r.activeMipmapLevel=t.getActiveMipmapLevel(),r.renderObjectFunction=t.getRenderObjectFunction(),r.pixelRatio=t.getPixelRatio(),r.mrt=t.getMRT(),r.clearColor=t.getClearColor(r.clearColor||new e),r.clearAlpha=t.getClearAlpha(),r.autoClear=t.autoClear,r.scissorTest=t.getScissorTest(),r}function Jx(e,t){return t=Zx(e,t),e.setMRT(null),e.setRenderObjectFunction(null),e.setClearColor(0,1),e.autoClear=!0,t}function eb(e,t){e.toneMapping=t.toneMapping,e.toneMappingExposure=t.toneMappingExposure,e.outputColorSpace=t.outputColorSpace,e.setRenderTarget(t.renderTarget,t.activeCubeFace,t.activeMipmapLevel),e.setRenderObjectFunction(t.renderObjectFunction),e.setPixelRatio(t.pixelRatio),e.setMRT(t.mrt),e.setClearColor(t.clearColor,t.clearAlpha),e.autoClear=t.autoClear,e.setScissorTest(t.scissorTest)}function tb(e,t={}){return t.background=e.background,t.backgroundNode=e.backgroundNode,t.overrideMaterial=e.overrideMaterial,t}function rb(e,t){return t=tb(e,t),e.background=null,e.backgroundNode=null,e.overrideMaterial=null,t}function sb(e,t){e.background=t.background,e.backgroundNode=t.backgroundNode,e.overrideMaterial=t.overrideMaterial}function ib(e,t,r){return r=rb(t,r=Jx(e,r))}function nb(e,t,r){eb(e,r),sb(t,r)}var ob=Object.freeze({__proto__:null,resetRendererAndSceneState:ib,resetRendererState:Jx,resetSceneState:rb,restoreRendererAndSceneState:nb,restoreRendererState:eb,restoreSceneState:sb,saveRendererAndSceneState:function(e,t,r={}){return r=tb(t,r=Zx(e,r))},saveRendererState:Zx,saveSceneState:tb});const ab=new WeakMap,ub=Ui((([e,t,r])=>{let s=Sl.sub(e).length();return s=s.sub(t).div(r.sub(t)),s=s.saturate(),s})),lb=e=>{let t=ab.get(e);if(void 0===t){const r=e.isPointLight?(e=>{const t=e.shadow.camera,r=ed("near","float",t).setGroup(pn),s=ed("far","float",t).setGroup(pn),i=il(e);return ub(i,r,s)})(e):null;t=new Nh,t.colorNode=Qi(0,0,0,1),t.depthNode=r,t.isShadowPassMaterial=!0,t.name="ShadowMaterial",t.fog=!1,ab.set(e,t)}return t},db=Ui((({depthTexture:e,shadowCoord:t})=>Vu(e,t.xy).compare(t.z))),cb=Ui((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>Vu(e,t).compare(r),i=ed("mapSize","vec2",r).setGroup(pn),n=ed("radius","float",r).setGroup(pn),o=$i(1).div(i),a=o.x.negate().mul(n),u=o.y.negate().mul(n),l=o.x.mul(n),d=o.y.mul(n),c=a.div(2),h=u.div(2),p=l.div(2),g=d.div(2);return Jn(s(t.xy.add($i(a,u)),t.z),s(t.xy.add($i(0,u)),t.z),s(t.xy.add($i(l,u)),t.z),s(t.xy.add($i(c,h)),t.z),s(t.xy.add($i(0,h)),t.z),s(t.xy.add($i(p,h)),t.z),s(t.xy.add($i(a,0)),t.z),s(t.xy.add($i(c,0)),t.z),s(t.xy,t.z),s(t.xy.add($i(p,0)),t.z),s(t.xy.add($i(l,0)),t.z),s(t.xy.add($i(c,g)),t.z),s(t.xy.add($i(0,g)),t.z),s(t.xy.add($i(p,g)),t.z),s(t.xy.add($i(a,d)),t.z),s(t.xy.add($i(0,d)),t.z),s(t.xy.add($i(l,d)),t.z)).mul(1/17)})),hb=Ui((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>Vu(e,t).compare(r),i=ed("mapSize","vec2",r).setGroup(pn),n=$i(1).div(i),o=n.x,a=n.y,u=t.xy,l=Go(u.mul(i).add(.5));return u.subAssign(l.mul(n)),Jn(s(u,t.z),s(u.add($i(o,0)),t.z),s(u.add($i(0,a)),t.z),s(u.add(n),t.z),Na(s(u.add($i(o.negate(),0)),t.z),s(u.add($i(o.mul(2),0)),t.z),l.x),Na(s(u.add($i(o.negate(),a)),t.z),s(u.add($i(o.mul(2),a)),t.z),l.x),Na(s(u.add($i(0,a.negate())),t.z),s(u.add($i(0,a.mul(2))),t.z),l.y),Na(s(u.add($i(o,a.negate())),t.z),s(u.add($i(o,a.mul(2))),t.z),l.y),Na(Na(s(u.add($i(o.negate(),a.negate())),t.z),s(u.add($i(o.mul(2),a.negate())),t.z),l.x),Na(s(u.add($i(o.negate(),a.mul(2))),t.z),s(u.add($i(o.mul(2),a.mul(2))),t.z),l.x),l.y)).mul(1/9)})),pb=Ui((({depthTexture:e,shadowCoord:t})=>{const r=Oi(1).toVar(),s=Vu(e).sample(t.xy).rg,i=da(t.z,s.x);return Li(i.notEqual(Oi(1)),(()=>{const e=t.z.sub(s.x),n=ua(0,s.y.mul(s.y));let o=n.div(n.add(e.mul(e)));o=Sa(eo(o,.3).div(.95-.3)),r.assign(Sa(ua(i,o)))})),r})),gb=Ui((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=Oi(0).toVar(),n=Oi(0).toVar(),o=e.lessThanEqual(Oi(1)).select(Oi(0),Oi(2).div(e.sub(1))),a=e.lessThanEqual(Oi(1)).select(Oi(0),Oi(-1));Bc({start:Gi(0),end:Gi(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Oi(e).mul(o)),l=s.sample(Jn(Xc.xy,$i(0,u).mul(t)).div(r)).x;i.addAssign(l),n.addAssign(l.mul(l))})),i.divAssign(e),n.divAssign(e);const u=Io(n.sub(i.mul(i)));return $i(i,u)})),mb=Ui((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=Oi(0).toVar(),n=Oi(0).toVar(),o=e.lessThanEqual(Oi(1)).select(Oi(0),Oi(2).div(e.sub(1))),a=e.lessThanEqual(Oi(1)).select(Oi(0),Oi(-1));Bc({start:Gi(0),end:Gi(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Oi(e).mul(o)),l=s.sample(Jn(Xc.xy,$i(u,0).mul(t)).div(r));i.addAssign(l.x),n.addAssign(Jn(l.y.mul(l.y),l.x.mul(l.x)))})),i.divAssign(e),n.divAssign(e);const u=Io(n.sub(i.mul(i)));return $i(i,u)})),fb=[db,cb,hb,pb];let yb;const xb=new ey;class bb extends Yx{static get type(){return"ShadowNode"}constructor(e,t=null){super(e),this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this._node=null,this._cameraFrameId=new WeakMap,this.isShadowNode=!0}setupShadowFilter(e,{filterFn:t,depthTexture:r,shadowCoord:s,shadow:i}){const n=s.x.greaterThanEqual(0).and(s.x.lessThanEqual(1)).and(s.y.greaterThanEqual(0)).and(s.y.lessThanEqual(1)).and(s.z.lessThanEqual(1)),o=t({depthTexture:r,shadowCoord:s,shadow:i});return n.select(o,Oi(1))}setupShadowCoord(e,t){const{shadow:r}=this,{renderer:s}=e,i=ed("bias","float",r).setGroup(pn);let n,o=t;if(r.camera.isOrthographicCamera||!0!==s.logarithmicDepthBuffer)o=o.xyz.div(o.w),n=o.z,s.coordinateSystem===d&&(n=n.mul(2).sub(1));else{const e=o.w;o=o.xy.div(e);const t=ed("near","float",r.camera).setGroup(pn),s=ed("far","float",r.camera).setGroup(pn);n=ph(e.negate(),t,s)}return o=qi(o.x,o.y.oneMinus(),n.add(i)),o}getShadowFilterFn(e){return fb[e]}setupShadow(e){const{renderer:t}=e,{light:r,shadow:s}=this,i=t.shadowMap.type,n=new P(s.mapSize.width,s.mapSize.height);n.compareFunction=Pe;const o=e.createRenderTarget(s.mapSize.width,s.mapSize.height);if(o.depthTexture=n,s.camera.updateProjectionMatrix(),i===Ie){n.compareFunction=null,this.vsmShadowMapVertical=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Le,type:ce}),this.vsmShadowMapHorizontal=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Le,type:ce});const t=Vu(n),r=Vu(this.vsmShadowMapVertical.texture),i=ed("blurSamples","float",s).setGroup(pn),o=ed("radius","float",s).setGroup(pn),a=ed("mapSize","vec2",s).setGroup(pn);let u=this.vsmMaterialVertical||(this.vsmMaterialVertical=new Nh);u.fragmentNode=gb({samples:i,radius:o,size:a,shadowPass:t}).context(e.getSharedContext()),u.name="VSMVertical",u=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new Nh),u.fragmentNode=mb({samples:i,radius:o,size:a,shadowPass:r}).context(e.getSharedContext()),u.name="VSMHorizontal"}const a=ed("intensity","float",s).setGroup(pn),u=ed("normalBias","float",s).setGroup(pn),l=kx(r).mul(Qx.add(Dl.mul(u))),d=this.setupShadowCoord(e,l),c=s.filterNode||this.getShadowFilterFn(t.shadowMap.type)||null;if(null===c)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const h=i===Ie?this.vsmShadowMapHorizontal.texture:n,p=this.setupShadowFilter(e,{filterFn:c,shadowTexture:o.texture,depthTexture:h,shadowCoord:d,shadow:s}),g=Vu(o.texture,d),m=Na(1,p.rgb.mix(g,1),a.mul(g.a)).toVar();return this.shadowMap=o,this.shadow.map=o,m}setup(e){if(!1!==e.renderer.shadowMap.enabled)return Ui((()=>{let t=this._node;return this.setupShadowPosition(e),null===t&&(this._node=t=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(t=e.material.receivedShadowNode(t)),t}))()}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e;t.updateMatrices(s),r.setSize(t.mapSize.width,t.mapSize.height),i.render(n,t.camera)}updateShadow(e){const{shadowMap:t,light:r,shadow:s}=this,{renderer:i,scene:n,camera:o}=e,a=i.shadowMap.type,u=t.depthTexture.version;this._depthVersionCached=u,s.camera.layers.mask=o.layers.mask;const l=i.getRenderObjectFunction(),d=i.getMRT(),c=!!d&&d.has("velocity");yb=ib(i,n,yb),n.overrideMaterial=lb(r),i.setRenderObjectFunction(((e,t,r,n,u,l,...d)=>{(!0===e.castShadow||e.receiveShadow&&a===Ie)&&(c&&(Es(e).useVelocity=!0),e.onBeforeShadow(i,e,o,s.camera,n,t.overrideMaterial,l),i.renderObject(e,t,r,n,u,l,...d),e.onAfterShadow(i,e,o,s.camera,n,t.overrideMaterial,l))})),i.setRenderTarget(t),this.renderShadow(e),i.setRenderObjectFunction(l),!0!==r.isPointLight&&a===Ie&&this.vsmPass(i),nb(i,n,yb)}vsmPass(e){const{shadow:t}=this;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height),e.setRenderTarget(this.vsmShadowMapVertical),xb.material=this.vsmMaterialVertical,xb.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),xb.material=this.vsmMaterialHorizontal,xb.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,null!==this.vsmShadowMapVertical&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),null!==this.vsmShadowMapHorizontal&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),super.dispose()}updateBefore(e){const{shadow:t}=this;let r=t.needsUpdate||t.autoUpdate;r&&(this._cameraFrameId[e.camera]===e.frameId&&(r=!1),this._cameraFrameId[e.camera]=e.frameId),r&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const Tb=(e,t)=>Ci(new bb(e,t)),_b=new e,vb=Ui((([e,t])=>{const r=e.toVar(),s=qo(r),i=ro(1,ua(s.x,ua(s.y,s.z)));s.mulAssign(i),r.mulAssign(i.mul(t.mul(2).oneMinus()));const n=$i(r.xy).toVar(),o=t.mul(1.5).oneMinus();return Li(s.z.greaterThanEqual(o),(()=>{Li(r.z.greaterThan(0),(()=>{n.x.assign(eo(4,r.x))}))})).ElseIf(s.x.greaterThanEqual(o),(()=>{const e=Xo(r.x);n.x.assign(r.z.mul(e).add(e.mul(2)))})).ElseIf(s.y.greaterThanEqual(o),(()=>{const e=Xo(r.y);n.x.assign(r.x.add(e.mul(2)).add(2)),n.y.assign(r.z.mul(e).sub(2))})),$i(.125,.25).mul(n).add($i(.375,.75)).flipY()})).setLayout({name:"cubeToUV",type:"vec2",inputs:[{name:"pos",type:"vec3"},{name:"texelSizeY",type:"float"}]}),Nb=Ui((({depthTexture:e,bd3D:t,dp:r,texelSize:s})=>Vu(e,vb(t,s.y)).compare(r))),Sb=Ui((({depthTexture:e,bd3D:t,dp:r,texelSize:s,shadow:i})=>{const n=ed("radius","float",i).setGroup(pn),o=$i(-1,1).mul(n).mul(s.y);return Vu(e,vb(t.add(o.xyy),s.y)).compare(r).add(Vu(e,vb(t.add(o.yyy),s.y)).compare(r)).add(Vu(e,vb(t.add(o.xyx),s.y)).compare(r)).add(Vu(e,vb(t.add(o.yyx),s.y)).compare(r)).add(Vu(e,vb(t,s.y)).compare(r)).add(Vu(e,vb(t.add(o.xxy),s.y)).compare(r)).add(Vu(e,vb(t.add(o.yxy),s.y)).compare(r)).add(Vu(e,vb(t.add(o.xxx),s.y)).compare(r)).add(Vu(e,vb(t.add(o.yxx),s.y)).compare(r)).mul(1/9)})),Rb=Ui((({filterFn:e,depthTexture:t,shadowCoord:r,shadow:s})=>{const i=r.xyz.toVar(),n=i.length(),o=fn("float").setGroup(pn).onRenderUpdate((()=>s.camera.near)),a=fn("float").setGroup(pn).onRenderUpdate((()=>s.camera.far)),u=ed("bias","float",s).setGroup(pn),l=fn(s.mapSize).setGroup(pn),d=Oi(1).toVar();return Li(n.sub(a).lessThanEqual(0).and(n.sub(o).greaterThanEqual(0)),(()=>{const r=n.sub(o).div(a.sub(o)).toVar();r.addAssign(u);const c=i.normalize(),h=$i(1).div(l.mul($i(4,2)));d.assign(e({depthTexture:t,bd3D:c,dp:r,texelSize:h,shadow:s}))})),d})),Ab=new s,Eb=new t,Cb=new t;class wb extends bb{static get type(){return"PointShadowNode"}constructor(e,t=null){super(e,t)}getShadowFilterFn(e){return e===De?Nb:Sb}setupShadowCoord(e,t){return t}setupShadowFilter(e,{filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n}){return Rb({filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n})}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e,o=t.getFrameExtents();Cb.copy(t.mapSize),Cb.multiply(o),r.setSize(Cb.width,Cb.height),Eb.copy(t.mapSize);const a=i.autoClear,u=i.getClearColor(_b),l=i.getClearAlpha();i.autoClear=!1,i.setClearColor(t.clearColor,t.clearAlpha),i.clear();const d=t.getViewportCount();for(let e=0;e<d;e++){const o=t.getViewport(e),a=Eb.x*o.x,u=Cb.y-Eb.y-Eb.y*o.y;Ab.set(a,u,Eb.x*o.z,Eb.y*o.w),r.viewport.copy(Ab),t.updateMatrices(s,e),i.render(n,t.camera)}i.autoClear=a,i.setClearColor(u,l)}}const Mb=(e,t)=>Ci(new wb(e,t));class Bb extends Vc{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.light=t,this.color=new e,this.colorNode=t&&t.colorNode||fn(this.color).setGroup(pn),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0,this.updateType=Fs.FRAME}customCacheKey(){return ys(this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}getLightVector(e){return Hx(this.light).sub(e.context.positionView||Al)}setupDirect(){}setupDirectRectArea(){}setupShadowNode(){return Tb(this.light)}setupShadow(e){const{renderer:t}=e;if(!1===t.shadowMap.enabled)return;let r=this.shadowColorNode;if(null===r){const t=this.light.shadow.shadowNode;let s;s=void 0!==t?Ci(t):this.setupShadowNode(e),this.shadowNode=s,this.shadowColorNode=r=this.colorNode.mul(s),this.baseColorNode=this.colorNode}this.colorNode=r}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):null!==this.shadowNode&&(this.shadowNode.dispose(),this.shadowNode=null,this.shadowColorNode=null);const t=this.setupDirect(e),r=this.setupDirectRectArea(e);t&&e.lightsNode.setupDirectLight(e,this,t),r&&e.lightsNode.setupDirectRectAreaLight(e,this,r)}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const Fb=Ui((({lightDistance:e,cutoffDistance:t,decayExponent:r})=>{const s=e.pow(r).max(.01).reciprocal();return t.greaterThan(0).select(s.mul(e.div(t).pow4().oneMinus().clamp().pow2()),s)})),Ub=({color:e,lightVector:t,cutoffDistance:r,decayExponent:s})=>{const i=t.normalize(),n=t.length(),o=Fb({lightDistance:n,cutoffDistance:r,decayExponent:s});return{lightDirection:i,lightColor:e.mul(o)}};class Pb extends Bb{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=fn(0).setGroup(pn),this.decayExponentNode=fn(2).setGroup(pn)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setupShadowNode(){return Mb(this.light)}setupDirect(e){return Ub({color:this.colorNode,lightVector:this.getLightVector(e),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode})}}const Ib=Ui((([e=t()])=>{const t=e.mul(2),r=t.x.floor(),s=t.y.floor();return r.add(s).mod(2).sign()})),Lb=Ui((([e=Fu()],{renderer:t,material:r})=>{const s=Oi(1).toVar(),i=va(e.mul(2).sub(1));if(r.alphaToCoverage&&t.samples>1){const e=Oi(i.fwidth()).toVar();s.assign(Ea(e.oneMinus(),e.add(1),i).oneMinus())}else i.greaterThan(1).discard();return s})),Db=Ui((([e,t,r])=>{const s=Oi(r).toVar(),i=Oi(t).toVar(),n=zi(e).toVar();return La(n,i,s)})).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),Vb=Ui((([e,t])=>{const r=zi(t).toVar(),s=Oi(e).toVar();return La(r,s.negate(),s)})).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),Ob=Ui((([e])=>{const t=Oi(e).toVar();return Gi(Do(t))})).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),Gb=Ui((([e,t])=>{const r=Oi(e).toVar();return t.assign(Ob(r)),r.sub(Oi(t))})),kb=Nf([Ui((([e,t,r,s,i,n])=>{const o=Oi(n).toVar(),a=Oi(i).toVar(),u=Oi(s).toVar(),l=Oi(r).toVar(),d=Oi(t).toVar(),c=Oi(e).toVar(),h=Oi(eo(1,a)).toVar();return eo(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),Ui((([e,t,r,s,i,n])=>{const o=Oi(n).toVar(),a=Oi(i).toVar(),u=qi(s).toVar(),l=qi(r).toVar(),d=qi(t).toVar(),c=qi(e).toVar(),h=Oi(eo(1,a)).toVar();return eo(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]})]),zb=Nf([Ui((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=Oi(d).toVar(),h=Oi(l).toVar(),p=Oi(u).toVar(),g=Oi(a).toVar(),m=Oi(o).toVar(),f=Oi(n).toVar(),y=Oi(i).toVar(),x=Oi(s).toVar(),b=Oi(r).toVar(),T=Oi(t).toVar(),_=Oi(e).toVar(),v=Oi(eo(1,p)).toVar(),N=Oi(eo(1,h)).toVar();return Oi(eo(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),Ui((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=Oi(d).toVar(),h=Oi(l).toVar(),p=Oi(u).toVar(),g=qi(a).toVar(),m=qi(o).toVar(),f=qi(n).toVar(),y=qi(i).toVar(),x=qi(s).toVar(),b=qi(r).toVar(),T=qi(t).toVar(),_=qi(e).toVar(),v=Oi(eo(1,p)).toVar(),N=Oi(eo(1,h)).toVar();return Oi(eo(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]})]),$b=Ui((([e,t,r])=>{const s=Oi(r).toVar(),i=Oi(t).toVar(),n=ki(e).toVar(),o=ki(n.bitAnd(ki(7))).toVar(),a=Oi(Db(o.lessThan(ki(4)),i,s)).toVar(),u=Oi(to(2,Db(o.lessThan(ki(4)),s,i))).toVar();return Vb(a,zi(o.bitAnd(ki(1)))).add(Vb(u,zi(o.bitAnd(ki(2)))))})).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),Wb=Ui((([e,t,r,s])=>{const i=Oi(s).toVar(),n=Oi(r).toVar(),o=Oi(t).toVar(),a=ki(e).toVar(),u=ki(a.bitAnd(ki(15))).toVar(),l=Oi(Db(u.lessThan(ki(8)),o,n)).toVar(),d=Oi(Db(u.lessThan(ki(4)),n,Db(u.equal(ki(12)).or(u.equal(ki(14))),o,i))).toVar();return Vb(l,zi(u.bitAnd(ki(1)))).add(Vb(d,zi(u.bitAnd(ki(2)))))})).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),Hb=Nf([$b,Wb]),jb=Ui((([e,t,r])=>{const s=Oi(r).toVar(),i=Oi(t).toVar(),n=Ki(e).toVar();return qi(Hb(n.x,i,s),Hb(n.y,i,s),Hb(n.z,i,s))})).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),qb=Ui((([e,t,r,s])=>{const i=Oi(s).toVar(),n=Oi(r).toVar(),o=Oi(t).toVar(),a=Ki(e).toVar();return qi(Hb(a.x,o,n,i),Hb(a.y,o,n,i),Hb(a.z,o,n,i))})).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),Xb=Nf([jb,qb]),Kb=Ui((([e])=>{const t=Oi(e).toVar();return to(.6616,t)})).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),Yb=Ui((([e])=>{const t=Oi(e).toVar();return to(.982,t)})).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),Qb=Nf([Kb,Ui((([e])=>{const t=qi(e).toVar();return to(.6616,t)})).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),Zb=Nf([Yb,Ui((([e])=>{const t=qi(e).toVar();return to(.982,t)})).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),Jb=Ui((([e,t])=>{const r=Gi(t).toVar(),s=ki(e).toVar();return s.shiftLeft(r).bitOr(s.shiftRight(Gi(32).sub(r)))})).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),eT=Ui((([e,t,r])=>{e.subAssign(r),e.bitXorAssign(Jb(r,Gi(4))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(Jb(e,Gi(6))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(Jb(t,Gi(8))),t.addAssign(e),e.subAssign(r),e.bitXorAssign(Jb(r,Gi(16))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(Jb(e,Gi(19))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(Jb(t,Gi(4))),t.addAssign(e)})),tT=Ui((([e,t,r])=>{const s=ki(r).toVar(),i=ki(t).toVar(),n=ki(e).toVar();return s.bitXorAssign(i),s.subAssign(Jb(i,Gi(14))),n.bitXorAssign(s),n.subAssign(Jb(s,Gi(11))),i.bitXorAssign(n),i.subAssign(Jb(n,Gi(25))),s.bitXorAssign(i),s.subAssign(Jb(i,Gi(16))),n.bitXorAssign(s),n.subAssign(Jb(s,Gi(4))),i.bitXorAssign(n),i.subAssign(Jb(n,Gi(14))),s.bitXorAssign(i),s.subAssign(Jb(i,Gi(24))),s})).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),rT=Ui((([e])=>{const t=ki(e).toVar();return Oi(t).div(Oi(ki(Gi(4294967295))))})).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),sT=Ui((([e])=>{const t=Oi(e).toVar();return t.mul(t).mul(t).mul(t.mul(t.mul(6).sub(15)).add(10))})).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),iT=Nf([Ui((([e])=>{const t=Gi(e).toVar(),r=ki(ki(1)).toVar(),s=ki(ki(Gi(3735928559)).add(r.shiftLeft(ki(2))).add(ki(13))).toVar();return tT(s.add(ki(t)),s,s)})).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),Ui((([e,t])=>{const r=Gi(t).toVar(),s=Gi(e).toVar(),i=ki(ki(2)).toVar(),n=ki().toVar(),o=ki().toVar(),a=ki().toVar();return n.assign(o.assign(a.assign(ki(Gi(3735928559)).add(i.shiftLeft(ki(2))).add(ki(13))))),n.addAssign(ki(s)),o.addAssign(ki(r)),tT(n,o,a)})).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),Ui((([e,t,r])=>{const s=Gi(r).toVar(),i=Gi(t).toVar(),n=Gi(e).toVar(),o=ki(ki(3)).toVar(),a=ki().toVar(),u=ki().toVar(),l=ki().toVar();return a.assign(u.assign(l.assign(ki(Gi(3735928559)).add(o.shiftLeft(ki(2))).add(ki(13))))),a.addAssign(ki(n)),u.addAssign(ki(i)),l.addAssign(ki(s)),tT(a,u,l)})).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),Ui((([e,t,r,s])=>{const i=Gi(s).toVar(),n=Gi(r).toVar(),o=Gi(t).toVar(),a=Gi(e).toVar(),u=ki(ki(4)).toVar(),l=ki().toVar(),d=ki().toVar(),c=ki().toVar();return l.assign(d.assign(c.assign(ki(Gi(3735928559)).add(u.shiftLeft(ki(2))).add(ki(13))))),l.addAssign(ki(a)),d.addAssign(ki(o)),c.addAssign(ki(n)),eT(l,d,c),l.addAssign(ki(i)),tT(l,d,c)})).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),Ui((([e,t,r,s,i])=>{const n=Gi(i).toVar(),o=Gi(s).toVar(),a=Gi(r).toVar(),u=Gi(t).toVar(),l=Gi(e).toVar(),d=ki(ki(5)).toVar(),c=ki().toVar(),h=ki().toVar(),p=ki().toVar();return c.assign(h.assign(p.assign(ki(Gi(3735928559)).add(d.shiftLeft(ki(2))).add(ki(13))))),c.addAssign(ki(l)),h.addAssign(ki(u)),p.addAssign(ki(a)),eT(c,h,p),c.addAssign(ki(o)),h.addAssign(ki(n)),tT(c,h,p)})).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]})]),nT=Nf([Ui((([e,t])=>{const r=Gi(t).toVar(),s=Gi(e).toVar(),i=ki(iT(s,r)).toVar(),n=Ki().toVar();return n.x.assign(i.bitAnd(Gi(255))),n.y.assign(i.shiftRight(Gi(8)).bitAnd(Gi(255))),n.z.assign(i.shiftRight(Gi(16)).bitAnd(Gi(255))),n})).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),Ui((([e,t,r])=>{const s=Gi(r).toVar(),i=Gi(t).toVar(),n=Gi(e).toVar(),o=ki(iT(n,i,s)).toVar(),a=Ki().toVar();return a.x.assign(o.bitAnd(Gi(255))),a.y.assign(o.shiftRight(Gi(8)).bitAnd(Gi(255))),a.z.assign(o.shiftRight(Gi(16)).bitAnd(Gi(255))),a})).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]})]),oT=Nf([Ui((([e])=>{const t=$i(e).toVar(),r=Gi().toVar(),s=Gi().toVar(),i=Oi(Gb(t.x,r)).toVar(),n=Oi(Gb(t.y,s)).toVar(),o=Oi(sT(i)).toVar(),a=Oi(sT(n)).toVar(),u=Oi(kb(Hb(iT(r,s),i,n),Hb(iT(r.add(Gi(1)),s),i.sub(1),n),Hb(iT(r,s.add(Gi(1))),i,n.sub(1)),Hb(iT(r.add(Gi(1)),s.add(Gi(1))),i.sub(1),n.sub(1)),o,a)).toVar();return Qb(u)})).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),Ui((([e])=>{const t=qi(e).toVar(),r=Gi().toVar(),s=Gi().toVar(),i=Gi().toVar(),n=Oi(Gb(t.x,r)).toVar(),o=Oi(Gb(t.y,s)).toVar(),a=Oi(Gb(t.z,i)).toVar(),u=Oi(sT(n)).toVar(),l=Oi(sT(o)).toVar(),d=Oi(sT(a)).toVar(),c=Oi(zb(Hb(iT(r,s,i),n,o,a),Hb(iT(r.add(Gi(1)),s,i),n.sub(1),o,a),Hb(iT(r,s.add(Gi(1)),i),n,o.sub(1),a),Hb(iT(r.add(Gi(1)),s.add(Gi(1)),i),n.sub(1),o.sub(1),a),Hb(iT(r,s,i.add(Gi(1))),n,o,a.sub(1)),Hb(iT(r.add(Gi(1)),s,i.add(Gi(1))),n.sub(1),o,a.sub(1)),Hb(iT(r,s.add(Gi(1)),i.add(Gi(1))),n,o.sub(1),a.sub(1)),Hb(iT(r.add(Gi(1)),s.add(Gi(1)),i.add(Gi(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return Zb(c)})).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]})]),aT=Nf([Ui((([e])=>{const t=$i(e).toVar(),r=Gi().toVar(),s=Gi().toVar(),i=Oi(Gb(t.x,r)).toVar(),n=Oi(Gb(t.y,s)).toVar(),o=Oi(sT(i)).toVar(),a=Oi(sT(n)).toVar(),u=qi(kb(Xb(nT(r,s),i,n),Xb(nT(r.add(Gi(1)),s),i.sub(1),n),Xb(nT(r,s.add(Gi(1))),i,n.sub(1)),Xb(nT(r.add(Gi(1)),s.add(Gi(1))),i.sub(1),n.sub(1)),o,a)).toVar();return Qb(u)})).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),Ui((([e])=>{const t=qi(e).toVar(),r=Gi().toVar(),s=Gi().toVar(),i=Gi().toVar(),n=Oi(Gb(t.x,r)).toVar(),o=Oi(Gb(t.y,s)).toVar(),a=Oi(Gb(t.z,i)).toVar(),u=Oi(sT(n)).toVar(),l=Oi(sT(o)).toVar(),d=Oi(sT(a)).toVar(),c=qi(zb(Xb(nT(r,s,i),n,o,a),Xb(nT(r.add(Gi(1)),s,i),n.sub(1),o,a),Xb(nT(r,s.add(Gi(1)),i),n,o.sub(1),a),Xb(nT(r.add(Gi(1)),s.add(Gi(1)),i),n.sub(1),o.sub(1),a),Xb(nT(r,s,i.add(Gi(1))),n,o,a.sub(1)),Xb(nT(r.add(Gi(1)),s,i.add(Gi(1))),n.sub(1),o,a.sub(1)),Xb(nT(r,s.add(Gi(1)),i.add(Gi(1))),n,o.sub(1),a.sub(1)),Xb(nT(r.add(Gi(1)),s.add(Gi(1)),i.add(Gi(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return Zb(c)})).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]})]),uT=Nf([Ui((([e])=>{const t=Oi(e).toVar(),r=Gi(Ob(t)).toVar();return rT(iT(r))})).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),Ui((([e])=>{const t=$i(e).toVar(),r=Gi(Ob(t.x)).toVar(),s=Gi(Ob(t.y)).toVar();return rT(iT(r,s))})).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),Ui((([e])=>{const t=qi(e).toVar(),r=Gi(Ob(t.x)).toVar(),s=Gi(Ob(t.y)).toVar(),i=Gi(Ob(t.z)).toVar();return rT(iT(r,s,i))})).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),Ui((([e])=>{const t=Qi(e).toVar(),r=Gi(Ob(t.x)).toVar(),s=Gi(Ob(t.y)).toVar(),i=Gi(Ob(t.z)).toVar(),n=Gi(Ob(t.w)).toVar();return rT(iT(r,s,i,n))})).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]})]),lT=Nf([Ui((([e])=>{const t=Oi(e).toVar(),r=Gi(Ob(t)).toVar();return qi(rT(iT(r,Gi(0))),rT(iT(r,Gi(1))),rT(iT(r,Gi(2))))})).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),Ui((([e])=>{const t=$i(e).toVar(),r=Gi(Ob(t.x)).toVar(),s=Gi(Ob(t.y)).toVar();return qi(rT(iT(r,s,Gi(0))),rT(iT(r,s,Gi(1))),rT(iT(r,s,Gi(2))))})).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),Ui((([e])=>{const t=qi(e).toVar(),r=Gi(Ob(t.x)).toVar(),s=Gi(Ob(t.y)).toVar(),i=Gi(Ob(t.z)).toVar();return qi(rT(iT(r,s,i,Gi(0))),rT(iT(r,s,i,Gi(1))),rT(iT(r,s,i,Gi(2))))})).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),Ui((([e])=>{const t=Qi(e).toVar(),r=Gi(Ob(t.x)).toVar(),s=Gi(Ob(t.y)).toVar(),i=Gi(Ob(t.z)).toVar(),n=Gi(Ob(t.w)).toVar();return qi(rT(iT(r,s,i,n,Gi(0))),rT(iT(r,s,i,n,Gi(1))),rT(iT(r,s,i,n,Gi(2))))})).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]})]),dT=Ui((([e,t,r,s])=>{const i=Oi(s).toVar(),n=Oi(r).toVar(),o=Gi(t).toVar(),a=qi(e).toVar(),u=Oi(0).toVar(),l=Oi(1).toVar();return Bc(o,(()=>{u.addAssign(l.mul(oT(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),cT=Ui((([e,t,r,s])=>{const i=Oi(s).toVar(),n=Oi(r).toVar(),o=Gi(t).toVar(),a=qi(e).toVar(),u=qi(0).toVar(),l=Oi(1).toVar();return Bc(o,(()=>{u.addAssign(l.mul(aT(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),hT=Ui((([e,t,r,s])=>{const i=Oi(s).toVar(),n=Oi(r).toVar(),o=Gi(t).toVar(),a=qi(e).toVar();return $i(dT(a,o,n,i),dT(a.add(qi(Gi(19),Gi(193),Gi(17))),o,n,i))})).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),pT=Ui((([e,t,r,s])=>{const i=Oi(s).toVar(),n=Oi(r).toVar(),o=Gi(t).toVar(),a=qi(e).toVar(),u=qi(cT(a,o,n,i)).toVar(),l=Oi(dT(a.add(qi(Gi(19),Gi(193),Gi(17))),o,n,i)).toVar();return Qi(u,l)})).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),gT=Nf([Ui((([e,t,r,s,i,n,o])=>{const a=Gi(o).toVar(),u=Oi(n).toVar(),l=Gi(i).toVar(),d=Gi(s).toVar(),c=Gi(r).toVar(),h=Gi(t).toVar(),p=$i(e).toVar(),g=qi(lT($i(h.add(d),c.add(l)))).toVar(),m=$i(g.x,g.y).toVar();m.subAssign(.5),m.mulAssign(u),m.addAssign(.5);const f=$i($i(Oi(h),Oi(c)).add(m)).toVar(),y=$i(f.sub(p)).toVar();return Li(a.equal(Gi(2)),(()=>qo(y.x).add(qo(y.y)))),Li(a.equal(Gi(3)),(()=>ua(qo(y.x),qo(y.y)))),ga(y,y)})).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),Ui((([e,t,r,s,i,n,o,a,u])=>{const l=Gi(u).toVar(),d=Oi(a).toVar(),c=Gi(o).toVar(),h=Gi(n).toVar(),p=Gi(i).toVar(),g=Gi(s).toVar(),m=Gi(r).toVar(),f=Gi(t).toVar(),y=qi(e).toVar(),x=qi(lT(qi(f.add(p),m.add(h),g.add(c)))).toVar();x.subAssign(.5),x.mulAssign(d),x.addAssign(.5);const b=qi(qi(Oi(f),Oi(m),Oi(g)).add(x)).toVar(),T=qi(b.sub(y)).toVar();return Li(l.equal(Gi(2)),(()=>qo(T.x).add(qo(T.y)).add(qo(T.z)))),Li(l.equal(Gi(3)),(()=>ua(ua(qo(T.x),qo(T.y)),qo(T.z)))),ga(T,T)})).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),mT=Ui((([e,t,r])=>{const s=Gi(r).toVar(),i=Oi(t).toVar(),n=$i(e).toVar(),o=Gi().toVar(),a=Gi().toVar(),u=$i(Gb(n.x,o),Gb(n.y,a)).toVar(),l=Oi(1e6).toVar();return Bc({start:-1,end:Gi(1),name:"x",condition:"<="},(({x:e})=>{Bc({start:-1,end:Gi(1),name:"y",condition:"<="},(({y:t})=>{const r=Oi(gT(u,e,t,o,a,i,s)).toVar();l.assign(aa(l,r))}))})),Li(s.equal(Gi(0)),(()=>{l.assign(Io(l))})),l})).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),fT=Ui((([e,t,r])=>{const s=Gi(r).toVar(),i=Oi(t).toVar(),n=$i(e).toVar(),o=Gi().toVar(),a=Gi().toVar(),u=$i(Gb(n.x,o),Gb(n.y,a)).toVar(),l=$i(1e6,1e6).toVar();return Bc({start:-1,end:Gi(1),name:"x",condition:"<="},(({x:e})=>{Bc({start:-1,end:Gi(1),name:"y",condition:"<="},(({y:t})=>{const r=Oi(gT(u,e,t,o,a,i,s)).toVar();Li(r.lessThan(l.x),(()=>{l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.y.assign(r)}))}))})),Li(s.equal(Gi(0)),(()=>{l.assign(Io(l))})),l})).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),yT=Ui((([e,t,r])=>{const s=Gi(r).toVar(),i=Oi(t).toVar(),n=$i(e).toVar(),o=Gi().toVar(),a=Gi().toVar(),u=$i(Gb(n.x,o),Gb(n.y,a)).toVar(),l=qi(1e6,1e6,1e6).toVar();return Bc({start:-1,end:Gi(1),name:"x",condition:"<="},(({x:e})=>{Bc({start:-1,end:Gi(1),name:"y",condition:"<="},(({y:t})=>{const r=Oi(gT(u,e,t,o,a,i,s)).toVar();Li(r.lessThan(l.x),(()=>{l.z.assign(l.y),l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.z.assign(l.y),l.y.assign(r)})).ElseIf(r.lessThan(l.z),(()=>{l.z.assign(r)}))}))})),Li(s.equal(Gi(0)),(()=>{l.assign(Io(l))})),l})).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),xT=Nf([mT,Ui((([e,t,r])=>{const s=Gi(r).toVar(),i=Oi(t).toVar(),n=qi(e).toVar(),o=Gi().toVar(),a=Gi().toVar(),u=Gi().toVar(),l=qi(Gb(n.x,o),Gb(n.y,a),Gb(n.z,u)).toVar(),d=Oi(1e6).toVar();return Bc({start:-1,end:Gi(1),name:"x",condition:"<="},(({x:e})=>{Bc({start:-1,end:Gi(1),name:"y",condition:"<="},(({y:t})=>{Bc({start:-1,end:Gi(1),name:"z",condition:"<="},(({z:r})=>{const n=Oi(gT(l,e,t,r,o,a,u,i,s)).toVar();d.assign(aa(d,n))}))}))})),Li(s.equal(Gi(0)),(()=>{d.assign(Io(d))})),d})).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),bT=Nf([fT,Ui((([e,t,r])=>{const s=Gi(r).toVar(),i=Oi(t).toVar(),n=qi(e).toVar(),o=Gi().toVar(),a=Gi().toVar(),u=Gi().toVar(),l=qi(Gb(n.x,o),Gb(n.y,a),Gb(n.z,u)).toVar(),d=$i(1e6,1e6).toVar();return Bc({start:-1,end:Gi(1),name:"x",condition:"<="},(({x:e})=>{Bc({start:-1,end:Gi(1),name:"y",condition:"<="},(({y:t})=>{Bc({start:-1,end:Gi(1),name:"z",condition:"<="},(({z:r})=>{const n=Oi(gT(l,e,t,r,o,a,u,i,s)).toVar();Li(n.lessThan(d.x),(()=>{d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.y.assign(n)}))}))}))})),Li(s.equal(Gi(0)),(()=>{d.assign(Io(d))})),d})).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),TT=Nf([yT,Ui((([e,t,r])=>{const s=Gi(r).toVar(),i=Oi(t).toVar(),n=qi(e).toVar(),o=Gi().toVar(),a=Gi().toVar(),u=Gi().toVar(),l=qi(Gb(n.x,o),Gb(n.y,a),Gb(n.z,u)).toVar(),d=qi(1e6,1e6,1e6).toVar();return Bc({start:-1,end:Gi(1),name:"x",condition:"<="},(({x:e})=>{Bc({start:-1,end:Gi(1),name:"y",condition:"<="},(({y:t})=>{Bc({start:-1,end:Gi(1),name:"z",condition:"<="},(({z:r})=>{const n=Oi(gT(l,e,t,r,o,a,u,i,s)).toVar();Li(n.lessThan(d.x),(()=>{d.z.assign(d.y),d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.z.assign(d.y),d.y.assign(n)})).ElseIf(n.lessThan(d.z),(()=>{d.z.assign(n)}))}))}))})),Li(s.equal(Gi(0)),(()=>{d.assign(Io(d))})),d})).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),_T=Ui((([e])=>{const t=e.y,r=e.z,s=qi().toVar();return Li(t.lessThan(1e-4),(()=>{s.assign(qi(r,r,r))})).Else((()=>{let i=e.x;i=i.sub(Do(i)).mul(6).toVar();const n=Gi(ra(i)),o=i.sub(Oi(n)),a=r.mul(t.oneMinus()),u=r.mul(t.mul(o).oneMinus()),l=r.mul(t.mul(o.oneMinus()).oneMinus());Li(n.equal(Gi(0)),(()=>{s.assign(qi(r,l,a))})).ElseIf(n.equal(Gi(1)),(()=>{s.assign(qi(u,r,a))})).ElseIf(n.equal(Gi(2)),(()=>{s.assign(qi(a,r,l))})).ElseIf(n.equal(Gi(3)),(()=>{s.assign(qi(a,u,r))})).ElseIf(n.equal(Gi(4)),(()=>{s.assign(qi(l,a,r))})).Else((()=>{s.assign(qi(r,a,u))}))})),s})).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),vT=Ui((([e])=>{const t=qi(e).toVar(),r=Oi(t.x).toVar(),s=Oi(t.y).toVar(),i=Oi(t.z).toVar(),n=Oi(aa(r,aa(s,i))).toVar(),o=Oi(ua(r,ua(s,i))).toVar(),a=Oi(o.sub(n)).toVar(),u=Oi().toVar(),l=Oi().toVar(),d=Oi().toVar();return d.assign(o),Li(o.greaterThan(0),(()=>{l.assign(a.div(o))})).Else((()=>{l.assign(0)})),Li(l.lessThanEqual(0),(()=>{u.assign(0)})).Else((()=>{Li(r.greaterThanEqual(o),(()=>{u.assign(s.sub(i).div(a))})).ElseIf(s.greaterThanEqual(o),(()=>{u.assign(Jn(2,i.sub(r).div(a)))})).Else((()=>{u.assign(Jn(4,r.sub(s).div(a)))})),u.mulAssign(1/6),Li(u.lessThan(0),(()=>{u.addAssign(1)}))})),qi(u,l,d)})).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),NT=Ui((([e])=>{const t=qi(e).toVar(),r=Yi(ao(t,qi(.04045))).toVar(),s=qi(t.div(12.92)).toVar(),i=qi(fa(ua(t.add(qi(.055)),qi(0)).div(1.055),qi(2.4))).toVar();return Na(s,i,r)})).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),ST=(e,t)=>{e=Oi(e),t=Oi(t);const r=$i(t.dFdx(),t.dFdy()).length().mul(.7071067811865476);return Ea(e.sub(r),e.add(r),t)},RT=(e,t,r,s)=>Na(e,t,r[s].clamp()),AT=(e,t,r,s,i)=>Na(e,t,ST(r,s[i])),ET=Ui((([e,t,r])=>{const s=Oo(e).toVar("nDir"),i=eo(Oi(.5).mul(t.sub(r)),Sl).div(s).toVar("rbmax"),n=eo(Oi(-.5).mul(t.sub(r)),Sl).div(s).toVar("rbmin"),o=qi().toVar("rbminmax");o.x=s.x.greaterThan(Oi(0)).select(i.x,n.x),o.y=s.y.greaterThan(Oi(0)).select(i.y,n.y),o.z=s.z.greaterThan(Oi(0)).select(i.z,n.z);const a=aa(aa(o.x,o.y),o.z).toVar("correction");return Sl.add(s.mul(a)).toVar("boxIntersection").sub(r)})),CT=Ui((([e,t])=>{const r=e.x,s=e.y,i=e.z;let n=t.element(0).mul(.886227);return n=n.add(t.element(1).mul(1.023328).mul(s)),n=n.add(t.element(2).mul(1.023328).mul(i)),n=n.add(t.element(3).mul(1.023328).mul(r)),n=n.add(t.element(4).mul(.858086).mul(r).mul(s)),n=n.add(t.element(5).mul(.858086).mul(s).mul(i)),n=n.add(t.element(6).mul(i.mul(i).mul(.743125).sub(.247708))),n=n.add(t.element(7).mul(.858086).mul(r).mul(i)),n=n.add(t.element(8).mul(.429043).mul(to(r,r).sub(to(s,s)))),n}));var wT=Object.freeze({__proto__:null,BRDF_GGX:hp,BRDF_Lambert:Qh,BasicPointShadowFilter:Nb,BasicShadowFilter:db,Break:Fc,Const:Wa,Continue:()=>Au("continue").append(),DFGApprox:pp,D_GGX:lp,Discard:Eu,EPSILON:No,F_Schlick:Yh,Fn:Ui,INFINITY:So,If:Li,Loop:Bc,NodeAccess:Ps,NodeShaderStage:Bs,NodeType:Us,NodeUpdateType:Fs,PCFShadowFilter:cb,PCFSoftShadowFilter:hb,PI:Ro,PI2:Ao,PointShadowFilter:Sb,Return:()=>Au("return").append(),Schlick_to_F0:mp,ScriptableNodeResources:mx,ShaderNode:Ei,TBNViewMatrix:yd,VSMShadowFilter:pb,V_GGX_SmithCorrelated:ap,Var:$a,abs:qo,acesFilmicToneMapping:tx,acos:Ho,add:Jn,addMethodChaining:ti,addNodeElement:function(e){console.warn("THREE.TSLBase: AddNodeElement has been removed in favor of tree-shaking. Trying add",e)},agxToneMapping:nx,all:Eo,alphaT:Bn,and:co,anisotropy:Fn,anisotropyB:Pn,anisotropyT:Un,any:Co,append:Di,array:un,arrayBuffer:e=>Ci(new Qs(e,"ArrayBuffer")),asin:Wo,assign:Kn,atan:jo,atan2:Fa,atomicAdd:(e,t,r=null)=>Vx(Lx.ATOMIC_ADD,e,t,r),atomicAnd:(e,t,r=null)=>Vx(Lx.ATOMIC_AND,e,t,r),atomicFunc:Vx,atomicLoad:(e,t=null)=>Vx(Lx.ATOMIC_LOAD,e,null,t),atomicMax:(e,t,r=null)=>Vx(Lx.ATOMIC_MAX,e,t,r),atomicMin:(e,t,r=null)=>Vx(Lx.ATOMIC_MIN,e,t,r),atomicOr:(e,t,r=null)=>Vx(Lx.ATOMIC_OR,e,t,r),atomicStore:(e,t,r=null)=>Vx(Lx.ATOMIC_STORE,e,t,r),atomicSub:(e,t,r=null)=>Vx(Lx.ATOMIC_SUB,e,t,r),atomicXor:(e,t,r=null)=>Vx(Lx.ATOMIC_XOR,e,t,r),attenuationColor:jn,attenuationDistance:Hn,attribute:Bu,attributeArray:(e,t="float")=>{let r,s;!0===t.isStruct?(r=t.layout.getLength(),s=Ns("float")):(r=Ss(t),s=Ns(t));const i=new uy(e,r,s);return hy(i,t,e)},backgroundBlurriness:by,backgroundIntensity:Ty,backgroundRotation:_y,batch:Ac,billboarding:wf,bitAnd:mo,bitNot:fo,bitOr:yo,bitXor:xo,bitangentGeometry:cd,bitangentLocal:hd,bitangentView:pd,bitangentWorld:gd,bitcast:na,blendBurn:Uy,blendColor:Dy,blendDodge:Py,blendOverlay:Ly,blendScreen:Iy,blur:gg,bool:zi,buffer:ku,bufferAttribute:hu,bumpMap:Ad,burn:(...e)=>(console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.'),Uy(e)),bvec2:ji,bvec3:Yi,bvec4:en,bypass:_u,cache:bu,call:Qn,cameraFar:qu,cameraIndex:Hu,cameraNear:ju,cameraNormalMatrix:Zu,cameraPosition:Ju,cameraProjectionMatrix:Xu,cameraProjectionMatrixInverse:Ku,cameraViewMatrix:Yu,cameraWorldMatrix:Qu,cbrt:_a,cdl:$y,ceil:Vo,checker:Ib,cineonToneMapping:Jy,clamp:Sa,clearcoat:Sn,clearcoatRoughness:Rn,code:ux,color:Vi,colorSpaceToWorking:su,colorToDirection:e=>Ci(e).mul(2).sub(1),compute:yu,cond:Da,context:Oa,convert:on,convertColorSpace:(e,t,r)=>Ci(new Ja(Ci(e),t,r)),convertToTexture:(e,...t)=>e.isTextureNode?e:e.isPassNode?e.getTextureNode():sy(e,...t),cos:zo,cross:ma,cubeTexture:Ql,cubeToUV:vb,dFdx:Zo,dFdy:Jo,dashSize:On,defaultBuildStages:Ls,defaultShaderStages:Is,defined:Ri,degrees:Mo,deltaTime:Rf,densityFog:function(e,t){return console.warn('THREE.TSL: "densityFog( color, density )" is deprecated. Use "fog( color, densityFogFactor( density ) )" instead.'),_x(e,Tx(t))},densityFogFactor:Tx,depth:mh,depthPass:(e,t,r)=>Ci(new Ky(Ky.DEPTH,e,t,r)),difference:pa,diffuseColor:Tn,directPointLight:Ub,directionToColor:Uh,dispersion:qn,distance:ha,div:ro,dodge:(...e)=>(console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.'),Py(e)),dot:ga,drawIndex:Tc,dynamicBufferAttribute:pu,element:nn,emissive:_n,equal:io,equals:oa,equirectUV:Dh,exp:Bo,exp2:Fo,expression:Au,faceDirection:Ml,faceForward:Ca,faceforward:Ua,float:Oi,floor:Do,fog:_x,fract:Go,frameGroup:hn,frameId:Af,frontFacing:wl,fwidth:sa,gain:(e,t)=>e.lessThan(.5)?yf(e.mul(2),t).div(2):eo(1,yf(to(eo(1,e),2),t).div(2)),gapSize:Gn,getConstNodeType:Ai,getCurrentStack:Ii,getDirection:dg,getDistanceAttenuation:Fb,getGeometryRoughness:np,getNormalFromDepth:oy,getParallaxCorrectNormal:ET,getRoughness:op,getScreenPosition:ny,getShIrradianceAt:CT,getTextureIndex:pf,getViewPosition:iy,globalId:Mx,glsl:(e,t)=>ux(e,t,"glsl"),glslFn:(e,t)=>dx(e,t,"glsl"),grayscale:Vy,greaterThan:ao,greaterThanEqual:lo,hash:ff,highpModelNormalViewMatrix:Tl,highpModelViewMatrix:bl,hue:ky,instance:vc,instanceIndex:fc,instancedArray:(e,t="float")=>{let r,s;!0===t.isStruct?(r=t.layout.getLength(),s=Ns("float")):(r=Ss(t),s=Ns(t));const i=new ay(e,r,s);return hy(i,t,e)},instancedBufferAttribute:gu,instancedDynamicBufferAttribute:mu,instancedMesh:Sc,int:Gi,inverseSqrt:Lo,inversesqrt:Pa,invocationLocalIndex:bc,invocationSubgroupIndex:xc,ior:zn,iridescence:Cn,iridescenceIOR:wn,iridescenceThickness:Mn,ivec2:Wi,ivec3:Xi,ivec4:Zi,js:(e,t)=>ux(e,t,"js"),label:Ga,length:Ko,lengthSq:va,lessThan:oo,lessThanEqual:uo,lightPosition:$x,lightProjectionUV:zx,lightShadowMatrix:kx,lightTargetDirection:jx,lightTargetPosition:Wx,lightViewPosition:Hx,lightingContext:kc,lights:(e=[])=>Ci(new Kx).setLights(e),linearDepth:fh,linearToneMapping:Qy,localId:Bx,log:Uo,log2:Po,logarithmicDepthToViewZ:(e,t,r)=>{const s=e.mul(Uo(r.div(t)));return Oi(Math.E).pow(s).mul(t).negate()},loop:(...e)=>(console.warn("TSL.LoopNode: loop() has been renamed to Loop()."),Bc(...e)),luminance:zy,mat2:tn,mat3:rn,mat4:sn,matcapUV:rm,materialAO:cc,materialAlphaTest:wd,materialAnisotropy:Xd,materialAnisotropyVector:hc,materialAttenuationColor:rc,materialAttenuationDistance:tc,materialClearcoat:zd,materialClearcoatNormal:Wd,materialClearcoatRoughness:$d,materialColor:Md,materialDispersion:lc,materialEmissive:Fd,materialEnvIntensity:Wl,materialEnvRotation:Hl,materialIOR:ec,materialIridescence:Kd,materialIridescenceIOR:Yd,materialIridescenceThickness:Qd,materialLightMap:dc,materialLineDashOffset:ac,materialLineDashSize:ic,materialLineGapSize:nc,materialLineScale:sc,materialLineWidth:oc,materialMetalness:Gd,materialNormal:kd,materialOpacity:Ud,materialPointSize:uc,materialReference:sd,materialReflectivity:Vd,materialRefractionRatio:$l,materialRotation:Hd,materialRoughness:Od,materialSheen:jd,materialSheenRoughness:qd,materialShininess:Bd,materialSpecular:Pd,materialSpecularColor:Ld,materialSpecularIntensity:Id,materialSpecularStrength:Dd,materialThickness:Jd,materialTransmission:Zd,max:ua,maxMipLevel:Lu,mediumpModelViewMatrix:xl,metalness:Nn,min:aa,mix:Na,mixElement:Ma,mod:la,modInt:so,modelDirection:ll,modelNormalMatrix:ml,modelPosition:cl,modelRadius:gl,modelScale:hl,modelViewMatrix:yl,modelViewPosition:pl,modelViewProjection:pc,modelWorldMatrix:dl,modelWorldMatrixInverse:fl,morphReference:Dc,mrt:mf,mul:to,mx_aastep:ST,mx_cell_noise_float:(e=Fu())=>uT(e.convert("vec2|vec3")),mx_contrast:(e,t=1,r=.5)=>Oi(e).sub(r).mul(t).add(r),mx_fractal_noise_float:(e=Fu(),t=3,r=2,s=.5,i=1)=>dT(e,Gi(t),r,s).mul(i),mx_fractal_noise_vec2:(e=Fu(),t=3,r=2,s=.5,i=1)=>hT(e,Gi(t),r,s).mul(i),mx_fractal_noise_vec3:(e=Fu(),t=3,r=2,s=.5,i=1)=>cT(e,Gi(t),r,s).mul(i),mx_fractal_noise_vec4:(e=Fu(),t=3,r=2,s=.5,i=1)=>pT(e,Gi(t),r,s).mul(i),mx_hsvtorgb:_T,mx_noise_float:(e=Fu(),t=1,r=0)=>oT(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec3:(e=Fu(),t=1,r=0)=>aT(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec4:(e=Fu(),t=1,r=0)=>{e=e.convert("vec2|vec3");return Qi(aT(e),oT(e.add($i(19,73)))).mul(t).add(r)},mx_ramplr:(e,t,r=Fu())=>RT(e,t,r,"x"),mx_ramptb:(e,t,r=Fu())=>RT(e,t,r,"y"),mx_rgbtohsv:vT,mx_safepower:(e,t=1)=>(e=Oi(e)).abs().pow(t).mul(e.sign()),mx_splitlr:(e,t,r,s=Fu())=>AT(e,t,r,s,"x"),mx_splittb:(e,t,r,s=Fu())=>AT(e,t,r,s,"y"),mx_srgb_texture_to_lin_rec709:NT,mx_transform_uv:(e=1,t=0,r=Fu())=>r.mul(e).add(t),mx_worley_noise_float:(e=Fu(),t=1)=>xT(e.convert("vec2|vec3"),t,Gi(1)),mx_worley_noise_vec2:(e=Fu(),t=1)=>bT(e.convert("vec2|vec3"),t,Gi(1)),mx_worley_noise_vec3:(e=Fu(),t=1)=>TT(e.convert("vec2|vec3"),t,Gi(1)),negate:Yo,neutralToneMapping:ox,nodeArray:Mi,nodeImmutable:Fi,nodeObject:Ci,nodeObjects:wi,nodeProxy:Bi,normalFlat:Ul,normalGeometry:Bl,normalLocal:Fl,normalMap:vd,normalView:Pl,normalWorld:Il,normalize:Oo,not:po,notEqual:no,numWorkgroups:Cx,objectDirection:rl,objectGroup:gn,objectPosition:il,objectRadius:al,objectScale:nl,objectViewPosition:ol,objectWorldMatrix:sl,oneMinus:Qo,or:ho,orthographicDepthToViewZ:(e,t,r)=>t.sub(r).mul(e).sub(t),oscSawtooth:(e=Sf)=>e.fract(),oscSine:(e=Sf)=>e.add(.75).mul(2*Math.PI).sin().mul(.5).add(.5),oscSquare:(e=Sf)=>e.fract().round(),oscTriangle:(e=Sf)=>e.add(.5).fract().mul(2).sub(1).abs(),output:Vn,outputStruct:hf,overlay:(...e)=>(console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.'),Ly(e)),overloadingFn:Nf,parabola:yf,parallaxDirection:xd,parallaxUV:(e,t)=>e.sub(xd.mul(t)),parameter:(e,t)=>Ci(new of(e,t)),pass:(e,t,r)=>Ci(new Ky(Ky.COLOR,e,t,r)),passTexture:(e,t)=>Ci(new qy(e,t)),pcurve:(e,t,r)=>fa(ro(fa(e,t),Jn(fa(e,t),fa(eo(1,e),r))),1/t),perspectiveDepthToViewZ:hh,pmremTexture:Gg,pointShadow:Mb,pointUV:my,pointWidth:kn,positionGeometry:_l,positionLocal:vl,positionPrevious:Nl,positionView:Al,positionViewDirection:El,positionWorld:Sl,positionWorldDirection:Rl,posterize:Hy,pow:fa,pow2:ya,pow3:xa,pow4:ba,property:xn,radians:wo,rand:wa,range:Rx,rangeFog:function(e,t,r){return console.warn('THREE.TSL: "rangeFog( color, near, far )" is deprecated. Use "fog( color, rangeFogFactor( near, far ) )" instead.'),_x(e,bx(t,r))},rangeFogFactor:bx,reciprocal:ta,reference:ed,referenceBuffer:td,reflect:ca,reflectVector:Xl,reflectView:jl,reflector:e=>Ci(new Kf(e)),refract:Aa,refractVector:Kl,refractView:ql,reinhardToneMapping:Zy,remainder:_o,remap:Nu,remapClamp:Su,renderGroup:pn,renderOutput:wu,rendererReference:au,rotate:om,rotateUV:Ef,roughness:vn,round:ea,rtt:sy,sRGBTransferEOTF:Ka,sRGBTransferOETF:Ya,sampler:e=>(!0===e.isNode?e:Vu(e)).convert("sampler"),saturate:Ra,saturation:Oy,screen:(...e)=>(console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.'),Iy(e)),screenCoordinate:Xc,screenSize:qc,screenUV:jc,scriptable:yx,scriptableValue:hx,select:La,setCurrentStack:Pi,shaderStages:Ds,shadow:Tb,shadowPositionWorld:Qx,shapeCircle:Lb,sharedUniformGroup:cn,sheen:An,sheenRoughness:En,shiftLeft:bo,shiftRight:To,shininess:Dn,sign:Xo,sin:ko,sinc:(e,t)=>ko(Ro.mul(t.mul(e).sub(1))).div(Ro.mul(t.mul(e).sub(1))),skinning:e=>Ci(new Cc(e)),skinningReference:wc,smoothstep:Ea,smoothstepElement:Ba,specularColor:In,specularF90:Ln,spherizeUV:Cf,split:(e,t)=>Ci(new js(Ci(e),t)),spritesheetUV:Ff,sqrt:Io,stack:uf,step:da,storage:hy,storageBarrier:()=>Ux("storage").append(),storageObject:(e,t,r)=>(console.warn('THREE.TSL: "storageObject()" is deprecated. Use "storage().setPBO( true )" instead.'),hy(e,t,r).setPBO(!0)),storageTexture:Ny,string:(e="")=>Ci(new Qs(e,"string")),struct:(e,t=null)=>{const r=new lf(e,t),s=(...t)=>{let s=null;if(t.length>0)if(t[0].isNode){s={};const r=Object.keys(e);for(let e=0;e<t.length;e++)s[r[e]]=t[e]}else s=t[0];return Ci(new df(r,s))};return s.layout=r,s.isStruct=!0,s},sub:eo,subgroupIndex:yc,subgroupSize:Fx,tan:$o,tangentGeometry:id,tangentLocal:nd,tangentView:od,tangentWorld:ad,temp:Ha,texture:Vu,texture3D:Ay,textureBarrier:()=>Ux("texture").append(),textureBicubic:Pp,textureCubeUV:cg,textureLoad:Ou,textureSize:Pu,textureStore:(e,t,r)=>{const s=Ny(e,t,r);return null!==r&&s.append(),s},thickness:Wn,time:Sf,timerDelta:(e=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),Rf.mul(e)),timerGlobal:(e=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),Sf.mul(e)),timerLocal:(e=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),Sf.mul(e)),toOutputColorSpace:eu,toWorkingColorSpace:tu,toneMapping:lu,toneMappingExposure:du,toonOutlinePass:(t,r,s=new e(0,0,0),i=.003,n=1)=>Ci(new Yy(t,r,Ci(s),Ci(i),Ci(n))),transformDirection:Ta,transformNormal:Ol,transformNormalToView:Gl,transformedBentNormalView:bd,transformedBitangentView:md,transformedBitangentWorld:fd,transformedClearcoatNormalView:Vl,transformedNormalView:Ll,transformedNormalWorld:Dl,transformedTangentView:ud,transformedTangentWorld:ld,transmission:$n,transpose:ia,triNoise3D:Tf,triplanarTexture:(...e)=>Pf(...e),triplanarTextures:Pf,trunc:ra,tslFn:(...e)=>(console.warn("TSL.ShaderNode: tslFn() has been renamed to Fn()."),Ui(...e)),uint:ki,uniform:fn,uniformArray:Wu,uniformGroup:dn,uniforms:(e,t)=>(console.warn("TSL.UniformArrayNode: uniforms() has been renamed to uniformArray()."),Ci(new $u(e,t))),userData:(e,t,r)=>Ci(new Ey(e,t,r)),uv:Fu,uvec2:Hi,uvec3:Ki,uvec4:Ji,varying:qa,varyingProperty:bn,vec2:$i,vec3:qi,vec4:Qi,vectorComponents:Vs,velocity:Fy,vertexColor:e=>Ci(new py(e)),vertexIndex:mc,vertexStage:Xa,vibrance:Gy,viewZToLogarithmicDepth:ph,viewZToOrthographicDepth:dh,viewZToPerspectiveDepth:ch,viewport:Kc,viewportBottomLeft:th,viewportCoordinate:Qc,viewportDepthTexture:uh,viewportLinearDepth:yh,viewportMipTexture:nh,viewportResolution:Jc,viewportSafeUV:Mf,viewportSharedTexture:Mh,viewportSize:Yc,viewportTexture:ih,viewportTopLeft:eh,viewportUV:Zc,wgsl:(e,t)=>ux(e,t,"wgsl"),wgslFn:(e,t)=>dx(e,t,"wgsl"),workgroupArray:(e,t)=>Ci(new Ix("Workgroup",e,t)),workgroupBarrier:()=>Ux("workgroup").append(),workgroupId:wx,workingToColorSpace:ru,xor:go});const MT=new nf;class BT extends Rm{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,r){const s=this.renderer,i=this.nodes.getBackgroundNode(e)||e.background;let n=!1;if(null===i)s._clearColor.getRGB(MT),MT.a=s._clearColor.a;else if(!0===i.isColor)i.getRGB(MT),MT.a=1,n=!0;else if(!0===i.isNode){const r=this.get(e),n=i;MT.copy(s._clearColor);let o=r.backgroundMesh;if(void 0===o){const e=Oa(Qi(n).mul(Ty),{getUV:()=>_y.mul(Il),getTextureLevel:()=>by});let t=pc;t=t.setZ(t.w);const s=new Nh;s.name="Background.material",s.side=v,s.depthTest=!1,s.depthWrite=!1,s.fog=!1,s.lights=!1,s.vertexNode=t,s.colorNode=e,r.backgroundMeshNode=e,r.backgroundMesh=o=new W(new Ve(1,32,32),s),o.frustumCulled=!1,o.name="Background.mesh",o.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)}}const a=n.getCacheKey();r.backgroundCacheKey!==a&&(r.backgroundMeshNode.node=Qi(n).mul(Ty),r.backgroundMeshNode.needsUpdate=!0,o.material.needsUpdate=!0,r.backgroundCacheKey=a),t.unshift(o,o.geometry,o.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",i);const o=s.xr.getEnvironmentBlendMode();if("additive"===o?MT.set(0,0,0,1):"alpha-blend"===o&&MT.set(0,0,0,0),!0===s.autoClear||!0===n){const e=r.clearColorValue;e.r=MT.r,e.g=MT.g,e.b=MT.b,e.a=MT.a,!0!==s.backend.isWebGLBackend&&!0!==s.alpha||(e.r*=e.a,e.g*=e.a,e.b*=e.a),r.depthClearValue=s._clearDepth,r.stencilClearValue=s._clearStencil,r.clearColor=!0===s.autoClearColor,r.clearDepth=!0===s.autoClearDepth,r.clearStencil=!0===s.autoClearStencil}else r.clearColor=!1,r.clearDepth=!1,r.clearStencil=!1}}let FT=0;class UT{constructor(e="",t=[],r=0,s=[]){this.name=e,this.bindings=t,this.index=r,this.bindingsReference=s,this.id=FT++}}class PT{constructor(e,t,r,s,i,n,o,a,u,l=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=r,this.transforms=l,this.nodeAttributes=s,this.bindings=i,this.updateNodes=n,this.updateBeforeNodes=o,this.updateAfterNodes=a,this.observer=u,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings){if(!0!==t.bindings[0].groupNode.shared){const r=new UT(t.name,[],t.index,t);e.push(r);for(const e of t.bindings)r.bindings.push(e.clone())}else e.push(t)}return e}}class IT{constructor(e,t,r=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=r}}class LT{constructor(e,t,r){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=r.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class DT{constructor(e,t,r=!1,s=null){this.isNodeVar=!0,this.name=e,this.type=t,this.readOnly=r,this.count=s}}class VT extends DT{constructor(e,t){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0}}class OT{constructor(e,t,r=""){this.name=e,this.type=t,this.code=r,Object.defineProperty(this,"isNodeCode",{value:!0})}}let GT=0;class kT{constructor(e=null){this.id=GT++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return void 0===t&&null!==this.parent&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class zT{constructor(e,t){this.name=e,this.members=t,this.output=!1}}class $T{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class WT extends $T{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class HT extends $T{constructor(e,r=new t){super(e,r),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class jT extends $T{constructor(e,t=new r){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class qT extends $T{constructor(e,t=new s){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class XT extends $T{constructor(t,r=new e){super(t,r),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class KT extends $T{constructor(e,t=new i){super(e,t),this.isMatrix2Uniform=!0,this.boundary=16,this.itemSize=4}}class YT extends $T{constructor(e,t=new n){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class QT extends $T{constructor(e,t=new o){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class ZT extends WT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class JT extends HT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class e_ extends jT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class t_ extends qT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class r_ extends XT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class s_ extends KT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class i_ extends YT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class n_ extends QT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}const o_=new WeakMap,a_=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),u_=e=>/e/g.test(e)?String(e).replace(/\+/g,""):(e=Number(e))+(e%1?"":".0");class l_{constructor(e,t,r){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=r,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.observer=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=uf(),this.stacks=[],this.tab="\t",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new kT,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let e=o_.get(this.renderer);return void 0===e&&(e=new Tm,o_.set(this.renderer,e)),e}createRenderTarget(e,t,r){return new ne(e,t,r)}createCubeRenderTarget(e,t){return new Vh(e,t)}includes(e){return this.nodes.includes(e)}getOutputStructName(){}_getBindGroup(e,t){const r=this.getBindGroupsCache(),s=[];let i,n=!0;for(const e of t)s.push(e),n=n&&!0!==e.groupNode.shared;return n?(i=r.get(s),void 0===i&&(i=new UT(e,s,this.bindingsIndexes[e].group,s),r.set(s,i))):i=new UT(e,s,this.bindingsIndexes[e].group,s),i}getBindGroupArray(e,t){const r=this.bindings[t];let s=r[e];return void 0===s&&(void 0===this.bindingsIndexes[e]&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),r[e]=s=[]),s}getBindings(){let e=this.bindGroups;if(null===e){const t={},r=this.bindings;for(const e of Ds)for(const s in r[e]){const i=r[e][s];(t[s]||(t[s]=[])).push(...i)}e=[];for(const r in t){const s=t[r],i=this._getBindGroup(r,s);e.push(i)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort(((e,t)=>e.bindings[0].groupNode.order-t.bindings[0].groupNode.order));for(let t=0;t<e.length;t++){const r=e[t];this.bindingsIndexes[r.name].group=t,r.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){!1===this.nodes.includes(e)&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){!1===this.sequentialNodes.includes(e)&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes){e.getUpdateType()!==Fs.NONE&&this.updateNodes.push(e.getSelf())}for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),r=e.getUpdateAfterType();t!==Fs.NONE&&this.updateBeforeNodes.push(e.getSelf()),r!==Fs.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===j||e.magFilter===Oe||e.magFilter===Ge||e.magFilter===U||e.minFilter===j||e.minFilter===Oe||e.minFilter===Ge||e.minFilter===U}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return this.context,this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const r=this.getDataFromNode(e);return void 0===r.cache&&(r.cache=new kT(t?this.getCache():null)),r.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=void 0===t.usageCount?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateArrayDeclaration(e,t){return this.getType(e)+"[ "+t+" ]"}generateArray(e,t,r=null){let s=this.generateArrayDeclaration(e,t)+"( ";for(let i=0;i<t;i++){const n=r?r[i]:null;s+=null!==n?n.build(this,e):this.generateConst(e),i<t-1&&(s+=", ")}return s+=" )",s}generateStruct(e,t,r=null){const s=[];for(const e of t){const{name:t,type:i}=e;r&&r[t]&&r[t].isNode?s.push(r[t].build(this,i)):s.push(this.generateConst(i))}return e+"( "+s.join(", ")+" )"}generateConst(i,n=null){if(null===n&&("float"===i||"int"===i||"uint"===i?n=0:"bool"===i?n=!1:"color"===i?n=new e:"vec2"===i?n=new t:"vec3"===i?n=new r:"vec4"===i&&(n=new s)),"float"===i)return u_(n);if("int"===i)return`${Math.round(n)}`;if("uint"===i)return n>=0?`${Math.round(n)}u`:"0u";if("bool"===i)return n?"true":"false";if("color"===i)return`${this.getType("vec3")}( ${u_(n.r)}, ${u_(n.g)}, ${u_(n.b)} )`;const o=this.getTypeLength(i),a=this.getComponentType(i),u=e=>this.generateConst(a,e);if(2===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)} )`;if(3===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)} )`;if(4===o&&"mat2"!==i)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)}, ${u(n.w)} )`;if(o>=4&&n&&(n.isMatrix2||n.isMatrix3||n.isMatrix4))return`${this.getType(i)}( ${n.elements.map(u).join(", ")} )`;if(o>4)return`${this.getType(i)}()`;throw new Error(`NodeBuilder: Type '${i}' not found in generate constant attempt.`)}getType(e){return"color"===e?"vec3":e}hasGeometryAttribute(e){return this.geometry&&void 0!==this.geometry.getAttribute(e)}getAttribute(e,t){const r=this.attributes;for(const t of r)if(t.name===e)return t;const s=new IT(e,t);return r.push(s),s}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return"void"===e||"property"===e||"sampler"===e||"texture"===e||"cubeTexture"===e||"storageTexture"===e||"depthTexture"===e||"texture3D"===e}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===T)return"int";if(t===b)return"uint"}return"float"}getElementType(e){return"mat2"===e?"vec2":"mat3"===e?"vec3":"mat4"===e?"vec4":this.getComponentType(e)}getComponentType(e){if("float"===(e=this.getVectorType(e))||"bool"===e||"int"===e||"uint"===e)return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return null===t?null:"b"===t[1]?"bool":"i"===t[1]?"int":"u"===t[1]?"uint":"float"}getVectorType(e){return"color"===e?"vec3":"texture"===e||"cubeTexture"===e||"storageTexture"===e||"texture3D"===e?"vec4":e}getTypeFromLength(e,t="float"){if(1===e)return t;let r=vs(e);const s="float"===t?"":t[0];return!0===/mat2/.test(t)&&(r=r.replace("vec","mat")),s+r}getTypeFromArray(e){return a_.get(e.constructor)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const r=t.array,s=e.itemSize,i=e.normalized;let n;return e instanceof ke||!0===i||(n=this.getTypeFromArray(r)),this.getTypeFromLength(s,n)}getTypeLength(e){const t=this.getVectorType(e),r=/vec([2-4])/.exec(t);return null!==r?Number(r[1]):"float"===t||"bool"===t||"int"===t||"uint"===t?1:!0===/mat2/.test(e)?4:!0===/mat3/.test(e)?9:!0===/mat4/.test(e)?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return"int"===t||"uint"===t?e:this.changeComponentType(e,"int")}addStack(){return this.stack=uf(this.stack),this.stacks.push(Ii()||this.stack),Pi(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,Pi(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,r=null){let s=(r=null===r?e.isGlobal(this)?this.globalCache:this.cache:r).getData(e);return void 0===s&&(s={},r.setData(e,s)),void 0===s[t]&&(s[t]={}),s[t]}getNodeProperties(e,t="any"){const r=this.getDataFromNode(e,t);return r.properties||(r.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const r=this.getDataFromNode(e);let s=r.bufferAttribute;if(void 0===s){const i=this.uniforms.index++;s=new IT("nodeAttribute"+i,t,e),this.bufferAttributes.push(s),r.bufferAttribute=s}return s}getStructTypeFromNode(e,t,r=null,s=this.shaderStage){const i=this.getDataFromNode(e,s,this.globalCache);let n=i.structType;if(void 0===n){const e=this.structs.index++;null===r&&(r="StructType"+e),n=new zT(r,t),this.structs[s].push(n),i.structType=n}return n}getOutputStructTypeFromNode(e,t){const r=this.getStructTypeFromNode(e,t,"OutputType","fragment");return r.output=!0,r}getUniformFromNode(e,t,r=this.shaderStage,s=null){const i=this.getDataFromNode(e,r,this.globalCache);let n=i.uniform;if(void 0===n){const o=this.uniforms.index++;n=new LT(s||"nodeUniform"+o,t,e),this.uniforms[r].push(n),i.uniform=n}return n}getArrayCount(e){let t=null;return e.isArrayNode?t=e.count:e.isVarNode&&e.node.isArrayNode&&(t=e.node.count),t}getVarFromNode(e,t=null,r=e.getNodeType(this),s=this.shaderStage,i=!1){const n=this.getDataFromNode(e,s);let o=n.variable;if(void 0===o){const a=i?"_const":"_var",u=this.vars[s]||(this.vars[s]=[]),l=this.vars[a]||(this.vars[a]=0);null===t&&(t=(i?"nodeConst":"nodeVar")+l,this.vars[a]++);const d=this.getArrayCount(e);o=new DT(t,r,i,d),i||u.push(o),n.variable=o}return o}isDeterministic(e){if(e.isMathNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode))&&(!e.cNode||this.isDeterministic(e.cNode));if(e.isOperatorNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode));if(e.isArrayNode){if(null!==e.values)for(const t of e.values)if(!this.isDeterministic(t))return!1;return!0}return!!e.isConstNode}getVaryingFromNode(e,t=null,r=e.getNodeType(this)){const s=this.getDataFromNode(e,"any");let i=s.varying;if(void 0===i){const e=this.varyings,n=e.length;null===t&&(t="nodeVarying"+n),i=new VT(t,r),e.push(i),s.varying=i}return i}getCodeFromNode(e,t,r=this.shaderStage){const s=this.getDataFromNode(e);let i=s.code;if(void 0===i){const e=this.codes[r]||(this.codes[r]=[]),n=e.length;i=new OT("nodeCode"+n,t),e.push(i),s.code=i}return i}addFlowCodeHierarchy(e,t){const{flowCodes:r,flowCodeBlock:s}=this.getDataFromNode(e);let i=!0,n=t;for(;n;){if(!0===s.get(n)){i=!1;break}n=this.getDataFromNode(n).parentNodeBlock}if(i)for(const e of r)this.addLineFlowCode(e)}addLineFlowCodeBlock(e,t,r){const s=this.getDataFromNode(e),i=s.flowCodes||(s.flowCodes=[]),n=s.flowCodeBlock||(s.flowCodeBlock=new WeakMap);i.push(t),n.set(r,!0)}addLineFlowCode(e,t=null){return""===e||(null!==t&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e+=";\n"),this.flow.code+=e),this}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="\t",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),r=this.flowChildNode(e,t);return this.flowsData.set(e,r),r}addInclude(e){null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(e)}buildFunctionNode(e){const t=new lx,r=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=r,t}flowShaderNode(e){const t=e.layout,r={[Symbol.iterator](){let e=0;const t=Object.values(this);return{next:()=>({value:t[e],done:e++>=t.length})}}};for(const e of t.inputs)r[e.name]=new of(e.type,e.name);e.layout=null;const s=e.call(r),i=this.flowStagesNode(s,t.type);return e.layout=t,i}flowStagesNode(e,t=null){const r=this.flow,s=this.vars,i=this.cache,n=this.buildStage,o=this.stack,a={code:""};this.flow=a,this.vars={},this.cache=new kT,this.stack=uf();for(const r of Ls)this.setBuildStage(r),a.result=e.build(this,t);return a.vars=this.getVars(this.shaderStage),this.flow=r,this.vars=s,this.cache=i,this.stack=o,this.setBuildStage(n),a}getFunctionOperator(){return null}flowChildNode(e,t=null){const r=this.flow,s={code:""};return this.flow=s,s.result=e.build(this,t),this.flow=r,s}flowNodeFromShaderStage(e,t,r=null,s=null){const i=this.shaderStage;this.setShaderStage(e);const n=this.flowChildNode(t,r);return null!==s&&(n.code+=`${this.tab+s} = ${n.result};\n`),this.flowCode[e]=this.flowCode[e]+n.code,this.setShaderStage(i),n}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t,r=null){return`${null!==r?this.generateArrayDeclaration(e,r):this.getType(e)} ${t}`}getVars(e){let t="";const r=this.vars[e];if(void 0!==r)for(const e of r)t+=`${this.getVar(e.type,e.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let r="";if(void 0!==t)for(const e of t)r+=e.code+"\n";return r}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:e,material:t,renderer:r}=this;if(null!==t){let e=r.library.fromMaterial(t);null===e&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),e=new Nh),e.build(this)}else this.addFlow("compute",e);for(const e of Ls){this.setBuildStage(e),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const t of Ds){this.setShaderStage(t);const r=this.flowNodes[t];for(const t of r)"generate"===e?this.flowNode(t):t.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if("float"===t||"int"===t||"uint"===t)return new ZT(e);if("vec2"===t||"ivec2"===t||"uvec2"===t)return new JT(e);if("vec3"===t||"ivec3"===t||"uvec3"===t)return new e_(e);if("vec4"===t||"ivec4"===t||"uvec4"===t)return new t_(e);if("color"===t)return new r_(e);if("mat2"===t)return new s_(e);if("mat3"===t)return new i_(e);if("mat4"===t)return new n_(e);throw new Error(`Uniform "${t}" not declared.`)}format(e,t,r){if((t=this.getVectorType(t))===(r=this.getVectorType(r))||null===r||this.isReference(r))return e;const s=this.getTypeLength(t),i=this.getTypeLength(r);return 16===s&&9===i?`${this.getType(r)}(${e}[0].xyz, ${e}[1].xyz, ${e}[2].xyz)`:9===s&&4===i?`${this.getType(r)}(${e}[0].xy, ${e}[1].xy)`:s>4||i>4||0===i?e:s===i?`${this.getType(r)}( ${e} )`:s>i?this.format(`${e}.${"xyz".slice(0,i)}`,this.getTypeFromLength(i,this.getComponentType(t)),r):4===i&&s>1?`${this.getType(r)}( ${this.format(e,t,"vec3")}, 1.0 )`:2===s?`${this.getType(r)}( ${this.format(e,t,"vec2")}, 0.0 )`:(1===s&&i>1&&t!==this.getComponentType(r)&&(e=`${this.getType(this.getComponentType(r))}( ${e} )`),`${this.getType(r)}( ${e} )`)}getSignature(){return`// Three.js r${ze} - Node System\n`}createNodeMaterial(e="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${e}() instead.`)}}class d_{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let r=e.get(t);return void 0===r&&(r={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,r)),r}updateBeforeNode(e){const t=e.getUpdateBeforeType(),r=e.updateReference(this);if(t===Fs.FRAME){const{frameMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.frameId&&!1!==e.updateBefore(this)&&t.set(r,this.frameId)}else if(t===Fs.RENDER){const{renderMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.renderId&&!1!==e.updateBefore(this)&&t.set(r,this.renderId)}else t===Fs.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),r=e.updateReference(this);if(t===Fs.FRAME){const{frameMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.frameId&&!1!==e.updateAfter(this)&&t.set(r,this.frameId)}else if(t===Fs.RENDER){const{renderMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.renderId&&!1!==e.updateAfter(this)&&t.set(r,this.renderId)}else t===Fs.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),r=e.updateReference(this);if(t===Fs.FRAME){const{frameMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.frameId&&!1!==e.update(this)&&t.set(r,this.frameId)}else if(t===Fs.RENDER){const{renderMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.renderId&&!1!==e.update(this)&&t.set(r,this.renderId)}else t===Fs.OBJECT&&e.update(this)}update(){this.frameId++,void 0===this.lastTime&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class c_{constructor(e,t,r=null,s="",i=!1){this.type=e,this.name=t,this.count=r,this.qualifier=s,this.isConst=i}}c_.isNodeFunctionInput=!0;class h_ extends Bb{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setupDirect(){const e=this.colorNode;return{lightDirection:jx(this.light),lightColor:e}}}const p_=new o,g_=new o;let m_=null;class f_ extends Bb{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=fn(new r).setGroup(pn),this.halfWidth=fn(new r).setGroup(pn),this.updateType=Fs.RENDER}update(e){super.update(e);const{light:t}=this,r=e.camera.matrixWorldInverse;g_.identity(),p_.copy(t.matrixWorld),p_.premultiply(r),g_.extractRotation(p_),this.halfWidth.value.set(.5*t.width,0,0),this.halfHeight.value.set(0,.5*t.height,0),this.halfWidth.value.applyMatrix4(g_),this.halfHeight.value.applyMatrix4(g_)}setupDirectRectArea(e){let t,r;e.isAvailable("float32Filterable")?(t=Vu(m_.LTC_FLOAT_1),r=Vu(m_.LTC_FLOAT_2)):(t=Vu(m_.LTC_HALF_1),r=Vu(m_.LTC_HALF_2));const{colorNode:s,light:i}=this;return{lightColor:s,lightPosition:Hx(i),halfWidth:this.halfWidth,halfHeight:this.halfHeight,ltc_1:t,ltc_2:r}}static setLTC(e){m_=e}}class y_ extends Bb{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=fn(0).setGroup(pn),this.penumbraCosNode=fn(0).setGroup(pn),this.cutoffDistanceNode=fn(0).setGroup(pn),this.decayExponentNode=fn(0).setGroup(pn)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e){const{coneCosNode:t,penumbraCosNode:r}=this;return Ea(t,r,e)}setupDirect(e){const{colorNode:t,cutoffDistanceNode:r,decayExponentNode:s,light:i}=this,n=this.getLightVector(e),o=n.normalize(),a=o.dot(jx(i)),u=this.getSpotAttenuation(a),l=n.length(),d=Fb({lightDistance:l,cutoffDistance:r,decayExponent:s});let c=t.mul(u).mul(d);if(i.map){const t=zx(i,e.context.positionWorld),r=Vu(i.map,t.xy).onRenderUpdate((()=>i.map));c=t.mul(2).sub(1).abs().lessThan(1).all().select(c.mul(r),c)}return{lightColor:c,lightDirection:o}}}class x_ extends y_{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e){const t=this.light.iesMap;let r=null;if(t&&!0===t.isTexture){const s=e.acos().mul(1/Math.PI);r=Vu(t,$i(s,0),0).r}else r=super.getSpotAttenuation(e);return r}}class b_ extends Bb{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class T_ extends Bb{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=$x(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=fn(new e).setGroup(pn)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:r,lightDirectionNode:s}=this,i=Pl.dot(s).mul(.5).add(.5),n=Na(r,t,i);e.context.irradiance.addAssign(n)}}class __ extends Bb{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let e=0;e<9;e++)t.push(new r);this.lightProbe=Wu(t)}update(e){const{light:t}=this;super.update(e);for(let e=0;e<9;e++)this.lightProbe.array[e].copy(t.sh.coefficients[e]).multiplyScalar(t.intensity)}setup(e){const t=CT(Il,this.lightProbe);e.context.irradiance.addAssign(t)}}class v_{parseFunction(){console.warn("Abstract function.")}}class N_{constructor(e,t,r="",s=""){this.type=e,this.inputs=t,this.name=r,this.precision=s}getCode(){console.warn("Abstract function.")}}N_.isNodeFunction=!0;const S_=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,R_=/[a-z_0-9]+/gi,A_="#pragma main";class E_ extends N_{constructor(e){const{type:t,inputs:r,name:s,precision:i,inputsCode:n,blockCode:o,headerCode:a}=(e=>{const t=(e=e.trim()).indexOf(A_),r=-1!==t?e.slice(t+12):e,s=r.match(S_);if(null!==s&&5===s.length){const i=s[4],n=[];let o=null;for(;null!==(o=R_.exec(i));)n.push(o);const a=[];let u=0;for(;u<n.length;){const e="const"===n[u][0];!0===e&&u++;let t=n[u][0];"in"===t||"out"===t||"inout"===t?u++:t="";const r=n[u++][0];let s=Number.parseInt(n[u][0]);!1===Number.isNaN(s)?u++:s=null;const i=n[u++][0];a.push(new c_(r,i,s,t,e))}const l=r.substring(s[0].length),d=void 0!==s[3]?s[3]:"";return{type:s[2],inputs:a,name:d,precision:void 0!==s[1]?s[1]:"",inputsCode:i,blockCode:l,headerCode:-1!==t?e.slice(0,t):""}}throw new Error("FunctionNode: Function is not a GLSL code.")})(e);super(t,r,s,i),this.inputsCode=n,this.blockCode=o,this.headerCode=a}getCode(e=this.name){let t;const r=this.blockCode;if(""!==r){const{type:s,inputsCode:i,headerCode:n,precision:o}=this;let a=`${s} ${e} ( ${i.trim()} )`;""!==o&&(a=`${o} ${a}`),t=n+a+r}else t="";return t}}class C_ extends v_{parseFunction(e){return new E_(e)}}const w_=new WeakMap,M_=[],B_=[];class F_ extends Rm{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new d_,this.nodeBuilderCache=new Map,this.callHashCache=new Tm,this.groupsData=new Tm,this.cacheLib={}}updateGroup(e){const t=e.groupNode,r=t.name;if(r===gn.name)return!0;if(r===pn.name){const t=this.get(e),r=this.nodeFrame.renderId;return t.renderId!==r&&(t.renderId=r,!0)}if(r===hn.name){const t=this.get(e),r=this.nodeFrame.frameId;return t.frameId!==r&&(t.frameId=r,!0)}M_[0]=t,M_[1]=e;let s=this.groupsData.get(M_);return void 0===s&&this.groupsData.set(M_,s={}),M_.length=0,s.version!==t.version&&(s.version=t.version,!0)}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const{nodeBuilderCache:s}=this,i=this.getForRenderCacheKey(e);if(r=s.get(i),void 0===r){const t=this.backend.createNodeBuilder(e.object,this.renderer);t.scene=e.scene,t.material=e.material,t.camera=e.camera,t.context.material=e.material,t.lightsNode=e.lightsNode,t.environmentNode=this.getEnvironmentNode(e.scene),t.fogNode=this.getFogNode(e.scene),t.clippingContext=e.clippingContext,t.build(),r=this._createNodeBuilderState(t),s.set(i,r)}r.usedTimes++,t.nodeBuilderState=r}return r}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,0===t.usedTimes&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const s=this.backend.createNodeBuilder(e,this.renderer);s.build(),r=this._createNodeBuilderState(s),t.nodeBuilderState=r}return r}_createNodeBuilderState(e){return new PT(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.observer,e.transforms)}getEnvironmentNode(e){this.updateEnvironment(e);let t=null;if(e.environmentNode&&e.environmentNode.isNode)t=e.environmentNode;else{const r=this.get(e);r.environmentNode&&(t=r.environmentNode)}return t}getBackgroundNode(e){this.updateBackground(e);let t=null;if(e.backgroundNode&&e.backgroundNode.isNode)t=e.backgroundNode;else{const r=this.get(e);r.backgroundNode&&(t=r.backgroundNode)}return t}getFogNode(e){return this.updateFog(e),e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){M_[0]=e,M_[1]=t;const r=this.renderer.info.calls,s=this.callHashCache.get(M_)||{};if(s.callId!==r){const i=this.getEnvironmentNode(e),n=this.getFogNode(e);t&&B_.push(t.getCacheKey(!0)),i&&B_.push(i.getCacheKey()),n&&B_.push(n.getCacheKey()),B_.push(this.renderer.shadowMap.enabled?1:0),s.callId=r,s.cacheKey=fs(B_),this.callHashCache.set(M_,s),B_.length=0}return M_.length=0,s.cacheKey}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),r=e.background;if(r){const s=0===e.backgroundBlurriness&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&0===t.backgroundBlurriness;if(t.background!==r||s){const i=this.getCacheNode("background",r,(()=>{if(!0===r.isCubeTexture||r.mapping===K||r.mapping===Y||r.mapping===oe){if(e.backgroundBlurriness>0||r.mapping===oe)return Gg(r);{let e;return e=!0===r.isCubeTexture?Ql(r):Vu(r),$h(e)}}if(!0===r.isTexture)return Vu(r,jc.flipY()).setUpdateMatrix(!0);!0!==r.isColor&&console.error("WebGPUNodes: Unsupported background configuration.",r)}),s);t.backgroundNode=i,t.background=r,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}getCacheNode(e,t,r,s=!1){const i=this.cacheLib[e]||(this.cacheLib[e]=new WeakMap);let n=i.get(t);return(void 0===n||s)&&(n=r(),i.set(t,n)),n}updateFog(e){const t=this.get(e),r=e.fog;if(r){if(t.fog!==r){const e=this.getCacheNode("fog",r,(()=>{if(r.isFogExp2){const e=ed("color","color",r).setGroup(pn),t=ed("density","float",r).setGroup(pn);return _x(e,Tx(t))}if(r.isFog){const e=ed("color","color",r).setGroup(pn),t=ed("near","float",r).setGroup(pn),s=ed("far","float",r).setGroup(pn);return _x(e,bx(t,s))}console.error("THREE.Renderer: Unsupported fog configuration.",r)}));t.fogNode=e,t.fog=r}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),r=e.environment;if(r){if(t.environment!==r){const e=this.getCacheNode("environment",r,(()=>!0===r.isCubeTexture?Ql(r):!0===r.isTexture?Vu(r):void console.error("Nodes: Unsupported environment configuration.",r)));t.environmentNode=e,t.environment=r}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,r=null,s=null,i=null){const n=this.nodeFrame;return n.renderer=e,n.scene=t,n.object=r,n.camera=s,n.material=i,n}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace}hasOutputChange(e){return w_.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,r=this.getOutputCacheKey(),s=Vu(e,jc).renderOutput(t.toneMapping,t.currentColorSpace);return w_.set(e,r),s}updateBefore(e){const t=e.getNodeBuilderState();for(const r of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(r)}updateAfter(e){const t=e.getNodeBuilderState();for(const r of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(r)}updateForCompute(e){const t=this.getNodeFrame(),r=this.getForCompute(e);for(const e of r.updateNodes)t.updateNode(e)}updateForRender(e){const t=this.getNodeFrameForRender(e),r=e.getNodeBuilderState();for(const e of r.updateNodes)t.updateNode(e)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new d_,this.nodeBuilderCache=new Map,this.cacheLib={}}}const U_=new we;class P_{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",this.shadowPass=!1,this.viewNormalMatrix=new n,this.clippingGroupContexts=new WeakMap,this.intersectionPlanes=[],this.unionPlanes=[],this.parentVersion=null,null!==e&&(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix)}projectPlanes(e,t,r){const s=e.length;for(let i=0;i<s;i++){U_.copy(e[i]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const s=t[r+i],n=U_.normal;s.x=-n.x,s.y=-n.y,s.z=-n.z,s.w=U_.constant}}updateGlobal(e,t){this.shadowPass=null!==e.overrideMaterial&&e.overrideMaterial.isShadowPassMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let r=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const i=t.clippingPlanes,n=i.length;let o,a;if(this.clipIntersection?(o=this.intersectionPlanes,a=e.intersectionPlanes.length):(o=this.unionPlanes,a=e.unionPlanes.length),o.length!==a+n){o.length=a+n;for(let e=0;e<n;e++)o[a+e]=new s;r=!0}this.projectPlanes(i,o,a),r&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return void 0===t&&(t=new P_(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class I_{constructor(e,t){this.bundleGroup=e,this.camera=t}}const L_=[];class D_{constructor(){this.bundles=new Tm}get(e,t){const r=this.bundles;L_[0]=e,L_[1]=t;let s=r.get(L_);return void 0===s&&(s=new I_(e,t),r.set(L_,s)),L_.length=0,s}dispose(){this.bundles=new Tm}}class V_{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const r=this.getMaterialNodeClass(e.type);if(null!==r){t=new r;for(const r in e)t[r]=e[r]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"==typeof t||"object"==typeof t)throw new Error(`Base class ${t} is not a class.`);r.set(t,e)}}addClass(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t.name}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"!=typeof t)throw new Error(`Base class ${t.name} is not a class.`);r.set(t,e)}}}const O_=new Kx,G_=[];class k_ extends Tm{constructor(){super()}createNode(e=[]){return(new Kx).setLights(e)}getNode(e,t){if(e.isQuadMesh)return O_;G_[0]=e,G_[1]=t;let r=this.get(G_);return void 0===r&&(r=this.createNode(),this.set(G_,r)),G_.length=0,r}}class z_ extends ne{constructor(e=1,t=1,r={}){super(e,t,r),this.isXRRenderTarget=!0,this.hasExternalTextures=!1,this.autoAllocateDepthBuffer=!0}copy(e){return super.copy(e),this.hasExternalTextures=e.hasExternalTextures,this.autoAllocateDepthBuffer=e.autoAllocateDepthBuffer,this}}const $_=new r,W_=new r;class H_ extends a{constructor(e){super(),this.enabled=!1,this.isPresenting=!1,this.cameraAutoUpdate=!0,this._renderer=e,this._cameraL=new ie,this._cameraL.viewport=new s,this._cameraR=new ie,this._cameraR.viewport=new s,this._cameras=[this._cameraL,this._cameraR],this._cameraXR=new $e,this._currentDepthNear=null,this._currentDepthFar=null,this._controllers=[],this._controllerInputSources=[],this._xrRenderTarget=null,this._currentAnimationContext=null,this._currentAnimationLoop=null,this._currentPixelRatio=null,this._currentSize=new t,this._onSessionEvent=q_.bind(this),this._onSessionEnd=X_.bind(this),this._onInputSourcesChange=K_.bind(this),this._onAnimationFrame=Y_.bind(this),this._referenceSpace=null,this._referenceSpaceType="local-floor",this._customReferenceSpace=null,this._framebufferScaleFactor=1,this._foveation=1,this._session=null,this._glBaseLayer=null,this._glBinding=null,this._glProjLayer=null,this._xrFrame=null,this._useLayers="undefined"!=typeof XRWebGLBinding&&"createProjectionLayer"in XRWebGLBinding.prototype}getController(e){return this._getController(e).getTargetRaySpace()}getControllerGrip(e){return this._getController(e).getGripSpace()}getHand(e){return this._getController(e).getHandSpace()}getFoveation(){if(null!==this._glProjLayer||null!==this._glBaseLayer)return this._foveation}setFoveation(e){this._foveation=e,null!==this._glProjLayer&&(this._glProjLayer.fixedFoveation=e),null!==this._glBaseLayer&&void 0!==this._glBaseLayer.fixedFoveation&&(this._glBaseLayer.fixedFoveation=e)}getFramebufferScaleFactor(){return this._framebufferScaleFactor}setFramebufferScaleFactor(e){this._framebufferScaleFactor=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.")}getReferenceSpaceType(){return this._referenceSpaceType}setReferenceSpaceType(e){this._referenceSpaceType=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change reference space type while presenting.")}getReferenceSpace(){return this._customReferenceSpace||this._referenceSpace}setReferenceSpace(e){this._customReferenceSpace=e}getCamera(){return this._cameraXR}getEnvironmentBlendMode(){if(null!==this._session)return this._session.environmentBlendMode}getFrame(){return this._xrFrame}getSession(){return this._session}async setSession(e){const t=this._renderer,r=t.backend,s=t.getContext();if(this._session=e,null!==e){if(!0===r.isWebGPUBackend)throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');if(e.addEventListener("select",this._onSessionEvent),e.addEventListener("selectstart",this._onSessionEvent),e.addEventListener("selectend",this._onSessionEvent),e.addEventListener("squeeze",this._onSessionEvent),e.addEventListener("squeezestart",this._onSessionEvent),e.addEventListener("squeezeend",this._onSessionEvent),e.addEventListener("end",this._onSessionEnd),e.addEventListener("inputsourceschange",this._onInputSourcesChange),await r.makeXRCompatible(),this._currentPixelRatio=t.getPixelRatio(),t.getSize(this._currentSize),this._currentAnimationContext=t._animation.getContext(),this._currentAnimationLoop=t._animation.getAnimationLoop(),t._animation.stop(),!0===this._useLayers){let r=null,i=null,n=null;t.depth&&(n=t.stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24,r=t.stencil?Re:Ae,i=t.stencil?Ee:b);const o={colorFormat:s.RGBA8,depthFormat:n,scaleFactor:this._framebufferScaleFactor},a=new XRWebGLBinding(e,s),u=a.createProjectionLayer(o);this._glBinding=a,this._glProjLayer=u,e.updateRenderState({layers:[u]}),t.setPixelRatio(1),t.setSize(u.textureWidth,u.textureHeight,!1),this._xrRenderTarget=new z_(u.textureWidth,u.textureHeight,{format:de,type:Ce,colorSpace:t.outputColorSpace,depthTexture:new P(u.textureWidth,u.textureHeight,i,void 0,void 0,void 0,void 0,void 0,void 0,r),stencilBuffer:t.stencil,resolveDepthBuffer:!1===u.ignoreDepthValues,resolveStencilBuffer:!1===u.ignoreDepthValues}),this._xrRenderTarget.hasExternalTextures=!0}else{const r={antialias:t.samples>0,alpha:!0,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:this.getFramebufferScaleFactor()},i=new XRWebGLLayer(e,s,r);this._glBaseLayer=i,e.updateRenderState({baseLayer:i}),t.setPixelRatio(1),t.setSize(i.framebufferWidth,i.framebufferHeight,!1),this._xrRenderTarget=new z_(i.framebufferWidth,i.framebufferHeight,{format:de,type:Ce,colorSpace:t.outputColorSpace,stencilBuffer:t.stencil,resolveDepthBuffer:!1===i.ignoreDepthValues,resolveStencilBuffer:!1===i.ignoreDepthValues})}this.setFoveation(this.getFoveation()),this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType()),t._animation.setAnimationLoop(this._onAnimationFrame),t._animation.setContext(e),t._animation.start(),this.isPresenting=!0,this.dispatchEvent({type:"sessionstart"})}}updateCamera(e){const t=this._session;if(null===t)return;const r=e.near,s=e.far,i=this._cameraXR,n=this._cameraL,o=this._cameraR;i.near=o.near=n.near=r,i.far=o.far=n.far=s,this._currentDepthNear===i.near&&this._currentDepthFar===i.far||(t.updateRenderState({depthNear:i.near,depthFar:i.far}),this._currentDepthNear=i.near,this._currentDepthFar=i.far),n.layers.mask=2|e.layers.mask,o.layers.mask=4|e.layers.mask,i.layers.mask=n.layers.mask|o.layers.mask;const a=e.parent,u=i.cameras;j_(i,a);for(let e=0;e<u.length;e++)j_(u[e],a);2===u.length?function(e,t,r){$_.setFromMatrixPosition(t.matrixWorld),W_.setFromMatrixPosition(r.matrixWorld);const s=$_.distanceTo(W_),i=t.projectionMatrix.elements,n=r.projectionMatrix.elements,o=i[14]/(i[10]-1),a=i[14]/(i[10]+1),u=(i[9]+1)/i[5],l=(i[9]-1)/i[5],d=(i[8]-1)/i[0],c=(n[8]+1)/n[0],h=o*d,p=o*c,g=s/(-d+c),m=g*-d;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(m),e.translateZ(g),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),-1===i[10])e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{const t=o+g,r=a+g,i=h-m,n=p+(s-m),d=u*a/r*t,c=l*a/r*t;e.projectionMatrix.makePerspective(i,n,d,c,t,r),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}(i,n,o):i.projectionMatrix.copy(n.projectionMatrix),function(e,t,r){null===r?e.matrix.copy(t.matrixWorld):(e.matrix.copy(r.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld));e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*He*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}(e,i,a)}_getController(e){let t=this._controllers[e];return void 0===t&&(t=new We,this._controllers[e]=t),t}}function j_(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}function q_(e){const t=this._controllerInputSources.indexOf(e.inputSource);if(-1===t)return;const r=this._controllers[t];if(void 0!==r){const t=this.getReferenceSpace();r.update(e.inputSource,e.frame,t),r.dispatchEvent({type:e.type,data:e.inputSource})}}function X_(){const e=this._session,t=this._renderer;e.removeEventListener("select",this._onSessionEvent),e.removeEventListener("selectstart",this._onSessionEvent),e.removeEventListener("selectend",this._onSessionEvent),e.removeEventListener("squeeze",this._onSessionEvent),e.removeEventListener("squeezestart",this._onSessionEvent),e.removeEventListener("squeezeend",this._onSessionEvent),e.removeEventListener("end",this._onSessionEnd),e.removeEventListener("inputsourceschange",this._onInputSourcesChange);for(let e=0;e<this._controllers.length;e++){const t=this._controllerInputSources[e];null!==t&&(this._controllerInputSources[e]=null,this._controllers[e].disconnect(t))}this._currentDepthNear=null,this._currentDepthFar=null,t.backend.setXRTarget(null),t.setOutputRenderTarget(null),this._session=null,this._xrRenderTarget=null,this.isPresenting=!1,t._animation.stop(),t._animation.setAnimationLoop(this._currentAnimationLoop),t._animation.setContext(this._currentAnimationContext),t._animation.start(),t.setPixelRatio(this._currentPixelRatio),t.setSize(this._currentSize.width,this._currentSize.height,!1),this.dispatchEvent({type:"sessionend"})}function K_(e){const t=this._controllers,r=this._controllerInputSources;for(let s=0;s<e.removed.length;s++){const i=e.removed[s],n=r.indexOf(i);n>=0&&(r[n]=null,t[n].disconnect(i))}for(let s=0;s<e.added.length;s++){const i=e.added[s];let n=r.indexOf(i);if(-1===n){for(let e=0;e<t.length;e++){if(e>=r.length){r.push(i),n=e;break}if(null===r[e]){r[e]=i,n=e;break}}if(-1===n)break}const o=t[n];o&&o.connect(i)}}function Y_(e,t){if(void 0===t)return;const r=this._cameraXR,i=this._renderer,n=i.backend,o=this._glBaseLayer,a=this.getReferenceSpace(),u=t.getViewerPose(a);if(this._xrFrame=t,null!==u){const e=u.views;null!==this._glBaseLayer&&n.setXRTarget(o.framebuffer);let t=!1;e.length!==r.cameras.length&&(r.cameras.length=0,t=!0);for(let i=0;i<e.length;i++){const a=e[i];let u;if(!0===this._useLayers){const e=this._glBinding.getViewSubImage(this._glProjLayer,a);u=e.viewport,0===i&&n.setXRRenderTargetTextures(this._xrRenderTarget,e.colorTexture,this._glProjLayer.ignoreDepthValues?void 0:e.depthStencilTexture)}else u=o.getViewport(a);let l=this._cameras[i];void 0===l&&(l=new ie,l.layers.enable(i),l.viewport=new s,this._cameras[i]=l),l.matrix.fromArray(a.transform.matrix),l.matrix.decompose(l.position,l.quaternion,l.scale),l.projectionMatrix.fromArray(a.projectionMatrix),l.projectionMatrixInverse.copy(l.projectionMatrix).invert(),l.viewport.set(u.x,u.y,u.width,u.height),0===i&&(r.matrix.copy(l.matrix),r.matrix.decompose(r.position,r.quaternion,r.scale)),!0===t&&r.cameras.push(l)}i.setOutputRenderTarget(this._xrRenderTarget)}for(let e=0;e<this._controllers.length;e++){const r=this._controllerInputSources[e],s=this._controllers[e];null!==r&&void 0!==s&&s.update(r,t,a)}this._currentAnimationLoop&&this._currentAnimationLoop(e,t),t.detectedPlanes&&this.dispatchEvent({type:"planesdetected",data:t}),this._xrFrame=null}const Q_=new H,Z_=new t,J_=new s,ev=new qe,tv=new o,rv=new s;class sv{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:r=!1,alpha:i=!0,depth:n=!0,stencil:o=!1,antialias:a=!1,samples:u=0,getFallback:l=null,colorBufferType:d=ce}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=u||!0===a?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=r,this.outputColorSpace=k,this.toneMapping=p,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=n,this.stencil=o,this.info=new Im,this.nodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new V_,this.lighting=new k_,this._getFallback=l,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new s(0,0,this._width,this._height),this._scissor=new s(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new ey(new Nh),this._quad.material.name="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const c=!0===this.alpha?0:1;this._clearColor=new nf(0,0,0,c),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._outputRenderTarget=null,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._colorBufferType=d,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:je},this.xr=new H_(this),this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(e,t,r)=>{await this.compileAsync(e,t);const s=this._renderLists.get(e,t),i=this._renderContexts.get(e,t,this._renderTarget),n=e.overrideMaterial||r.material,o=this._objects.get(r,n,e,t,s.lightsNode,i,i.clippingContext),{fragmentShader:a,vertexShader:u}=o.getNodeBuilderState();return{fragmentShader:a,vertexShader:u}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return null!==this._initPromise||(this._initPromise=new Promise((async(e,t)=>{let r=this.backend;try{await r.init(this)}catch(e){if(null===this._getFallback)return void t(e);try{this.backend=r=this._getFallback(e),await r.init(this)}catch(e){return void t(e)}}this._nodes=new F_(this,r),this._animation=new bm(this._nodes,this.info),this._attributes=new Bm(r),this._background=new BT(this,this._nodes),this._geometries=new Pm(this._attributes,this.info),this._textures=new sf(this,r,this.info),this._pipelines=new km(r,this._nodes),this._bindings=new zm(r,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new Sm(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new Xm(this.lighting),this._bundles=new D_,this._renderContexts=new tf,this._animation.start(),this._initialized=!0,e(this)}))),this._initPromise}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,r=null){if(!0===this._isDeviceLost)return;!1===this._initialized&&await this.init();const s=this._nodes.nodeFrame,i=s.renderId,n=this._currentRenderContext,o=this._currentRenderObjectFunction,a=this._compilationPromises,u=!0===e.isScene?e:Q_;null===r&&(r=e);const l=this._renderTarget,d=this._renderContexts.get(r,t,l),c=this._activeMipmapLevel,h=[];this._currentRenderContext=d,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=h,s.renderId++,s.update(),d.depth=this.depth,d.stencil=this.stencil,d.clippingContext||(d.clippingContext=new P_),d.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,l);const p=this._renderLists.get(e,t);if(p.begin(),this._projectObject(e,t,0,p,d.clippingContext),r!==e&&r.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&p.pushLight(e)})),p.finish(),null!==l){this._textures.updateRenderTarget(l,c);const e=this._textures.get(l);d.textures=e.textures,d.depthTexture=e.depthTexture}else d.textures=null,d.depthTexture=null;this._background.update(u,p,d);const g=p.opaque,m=p.transparent,f=p.transparentDoublePass,y=p.lightsNode;!0===this.opaque&&g.length>0&&this._renderObjects(g,t,u,y),!0===this.transparent&&m.length>0&&this._renderTransparents(m,f,t,u,y),s.renderId=i,this._currentRenderContext=n,this._currentRenderObjectFunction=o,this._compilationPromises=a,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(h)}async renderAsync(e,t){!1===this._initialized&&await this.init(),this._renderScene(e,t)}async waitForGPU(){await this.backend.waitForGPU()}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getColorBufferType(){return this._colorBufferType}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:\n\nMessage: ${e.message}`;e.reason&&(t+=`\nReason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,r){const{bundleGroup:s,camera:i,renderList:n}=e,o=this._currentRenderContext,a=this._bundles.get(s,i),u=this.backend.get(a);void 0===u.renderContexts&&(u.renderContexts=new Set);const l=s.version!==u.version,d=!1===u.renderContexts.has(o)||l;if(u.renderContexts.add(o),d){this.backend.beginBundle(o),(void 0===u.renderObjects||l)&&(u.renderObjects=[]),this._currentRenderBundle=a;const e=n.opaque;!0===this.opaque&&e.length>0&&this._renderObjects(e,i,t,r),this._currentRenderBundle=null,this.backend.finishBundle(o,a),u.version=s.version}else{const{renderObjects:e}=u;for(let t=0,r=e.length;t<r;t++){const r=e[t];this._nodes.needsRefresh(r)&&(this._nodes.updateBefore(r),this._nodes.updateForRender(r),this._bindings.updateForRender(r),this._nodes.updateAfter(r))}}this.backend.addBundle(o,a)}render(e,t){if(!1===this._initialized)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this;if(!1===(e!==p)&&!1===(t!==le))return null;const{width:r,height:s}=this.getDrawingBufferSize(Z_),{depth:i,stencil:n}=this;let o=this._frameBufferTarget;return null===o&&(o=new ne(r,s,{depthBuffer:i,stencilBuffer:n,type:this._colorBufferType,format:de,colorSpace:le,generateMipmaps:!1,minFilter:j,magFilter:j,samples:this.samples}),o.isPostProcessingRenderTarget=!0,this._frameBufferTarget=o),o.depthBuffer=i,o.stencilBuffer=n,o.setSize(r,s),o.viewport.copy(this._viewport),o.scissor.copy(this._scissor),o.viewport.multiplyScalar(this._pixelRatio),o.scissor.multiplyScalar(this._pixelRatio),o.scissorTest=this._scissorTest,o}_renderScene(e,t,r=!0){if(!0===this._isDeviceLost)return;const s=r?this._getFrameBufferTarget():null,i=this._nodes.nodeFrame,n=i.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,u=!0===e.isScene?e:Q_,l=this._renderTarget||this._outputRenderTarget,d=this._activeCubeFace,c=this._activeMipmapLevel;let h;null!==s?(h=s,this.setRenderTarget(h)):h=l;const p=this._renderContexts.get(e,t,h);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,i.renderId=this.info.calls;const g=this.coordinateSystem,m=this.xr;if(t.coordinateSystem!==g&&!1===m.isPresenting&&(t.coordinateSystem=g,t.updateProjectionMatrix(),t.isArrayCamera))for(const e of t.cameras)e.coordinateSystem=g,e.updateProjectionMatrix();!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===m.enabled&&!0===m.isPresenting&&(!0===m.cameraAutoUpdate&&m.updateCamera(t),t=m.getCamera());let f=this._viewport,y=this._scissor,x=this._pixelRatio;null!==h&&(f=h.viewport,y=h.scissor,x=1),this.getDrawingBufferSize(Z_),J_.set(0,0,Z_.width,Z_.height);const b=void 0===f.minDepth?0:f.minDepth,T=void 0===f.maxDepth?1:f.maxDepth;p.viewportValue.copy(f).multiplyScalar(x).floor(),p.viewportValue.width>>=c,p.viewportValue.height>>=c,p.viewportValue.minDepth=b,p.viewportValue.maxDepth=T,p.viewport=!1===p.viewportValue.equals(J_),p.scissorValue.copy(y).multiplyScalar(x).floor(),p.scissor=this._scissorTest&&!1===p.scissorValue.equals(J_),p.scissorValue.width>>=c,p.scissorValue.height>>=c,p.clippingContext||(p.clippingContext=new P_),p.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,h),tv.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),ev.setFromProjectionMatrix(tv,g);const _=this._renderLists.get(e,t);if(_.begin(),this._projectObject(e,t,0,_,p.clippingContext),_.finish(),!0===this.sortObjects&&_.sort(this._opaqueSort,this._transparentSort),null!==h){this._textures.updateRenderTarget(h,c);const e=this._textures.get(h);p.textures=e.textures,p.depthTexture=e.depthTexture,p.width=e.width,p.height=e.height,p.renderTarget=h,p.depth=h.depthBuffer,p.stencil=h.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=c,p.height>>=c,p.activeCubeFace=d,p.activeMipmapLevel=c,p.occlusionQueryCount=_.occlusionQueryCount,this._background.update(u,_,p),this.backend.beginRender(p);const{bundles:v,lightsNode:N,transparentDoublePass:S,transparent:R,opaque:A}=_;return v.length>0&&this._renderBundles(v,u,N),!0===this.opaque&&A.length>0&&this._renderObjects(A,t,u,N),!0===this.transparent&&R.length>0&&this._renderTransparents(R,S,t,u,N),this.backend.finishRender(p),i.renderId=n,this._currentRenderContext=o,this._currentRenderObjectFunction=a,null!==s&&(this.setRenderTarget(l,d,c),this._renderOutput(h)),u.onAfterRender(this,e,t,h),p}_renderOutput(e){const t=this._quad;this._nodes.hasOutputChange(e.texture)&&(t.material.fragmentNode=this._nodes.getOutputNode(e.texture),t.material.needsUpdate=!0);const r=this.autoClear,s=this.xr.enabled;this.autoClear=!1,this.xr.enabled=!1,this._renderScene(t,t.camera,!1),this.autoClear=r,this.xr.enabled=s}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){!1===this._initialized&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,r){this._width=e,this._height=t,this._pixelRatio=r,this.domElement.width=Math.floor(e*r),this.domElement.height=Math.floor(t*r),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setSize(e,t,r=!0){this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),!0===r&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,r,s){const i=this._scissor;e.isVector4?i.copy(e):i.set(e,t,r,s)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,r,s,i=0,n=1){const o=this._viewport;e.isVector4?o.copy(e):o.set(e,t,r,s),o.minDepth=i,o.maxDepth=n}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,r=!0){if(!1===this._initialized)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,r);const s=this._renderTarget||this._getFrameBufferTarget();let i=null;if(null!==s){this._textures.updateRenderTarget(s);const e=this._textures.get(s);i=this._renderContexts.getForClear(s),i.textures=e.textures,i.depthTexture=e.depthTexture,i.width=e.width,i.height=e.height,i.renderTarget=s,i.depth=s.depthBuffer,i.stencil=s.stencilBuffer,i.clearColorValue=this.backend.getClearColor(),i.activeCubeFace=this.getActiveCubeFace(),i.activeMipmapLevel=this.getActiveMipmapLevel()}this.backend.clear(e,t,r,i),null!==s&&null===this._renderTarget&&this._renderOutput(s)}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,r=!0){!1===this._initialized&&await this.init(),this.clear(e,t,r)}async clearColorAsync(){this.clearAsync(!0,!1,!1)}async clearDepthAsync(){this.clearAsync(!1,!0,!1)}async clearStencilAsync(){this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this.isOutputTarget?this.toneMapping:p}get currentColorSpace(){return this.isOutputTarget?this.outputColorSpace:le}get isOutputTarget(){return this._renderTarget===this._outputRenderTarget||null===this._renderTarget}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),null!==this._frameBufferTarget&&this._frameBufferTarget.dispose(),Object.values(this.backend.timestampQueryPool).forEach((e=>{null!==e&&e.dispose()})),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,r=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=r}getRenderTarget(){return this._renderTarget}setOutputRenderTarget(e){this._outputRenderTarget=e}getOutputRenderTarget(){return this._outputRenderTarget}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e){if(!0===this._isDeviceLost)return;if(!1===this._initialized)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const t=this._nodes.nodeFrame,r=t.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,t.renderId=this.info.calls;const s=this.backend,i=this._pipelines,n=this._bindings,o=this._nodes,a=Array.isArray(e)?e:[e];if(void 0===a[0]||!0!==a[0].isComputeNode)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");s.beginCompute(e);for(const t of a){if(!1===i.has(t)){const e=()=>{t.removeEventListener("dispose",e),i.delete(t),n.delete(t),o.delete(t)};t.addEventListener("dispose",e);const r=t.onInitFunction;null!==r&&r.call(t,{renderer:this})}o.updateForCompute(t),n.updateForCompute(t);const r=n.getForCompute(t),a=i.getForCompute(t,r);s.compute(e,t,r,a)}s.finishCompute(e),t.renderId=r}async computeAsync(e){!1===this._initialized&&await this.init(),this.compute(e)}async hasFeatureAsync(e){return!1===this._initialized&&await this.init(),this.backend.hasFeature(e)}async resolveTimestampsAsync(e="render"){return!1===this._initialized&&await this.init(),this.backend.resolveTimestampsAsync(e)}hasFeature(e){return!1===this._initialized?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){!1===this._initialized&&await this.init(),this._textures.updateTexture(e)}initTexture(e){!1===this._initialized&&console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(null!==t)if(t.isVector2)t=rv.set(t.x,t.y,e.image.width,e.image.height).floor();else{if(!t.isVector4)return void console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");t=rv.copy(t).floor()}else t=rv.set(0,0,e.image.width,e.image.height);let r,s=this._currentRenderContext;null!==s?r=s.renderTarget:(r=this._renderTarget||this._getFrameBufferTarget(),null!==r&&(this._textures.updateRenderTarget(r),s=this._textures.get(r))),this._textures.updateTexture(e,{renderTarget:r}),this.backend.copyFramebufferToTexture(e,s,t)}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,r,s,i,n)}async readRenderTargetPixelsAsync(e,t,r,s,i,n=0,o=0){return this.backend.copyTextureToBuffer(e.textures[n],t,r,s,i,o)}_projectObject(e,t,r,s,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)r=e.renderOrder,e.isClippingGroup&&e.enabled&&(i=i.getGroupContext(e));else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)s.pushLight(e);else if(e.isSprite){if(!e.frustumCulled||ev.intersectsSprite(e)){!0===this.sortObjects&&rv.setFromMatrixPosition(e.matrixWorld).applyMatrix4(tv);const{geometry:t,material:n}=e;n.visible&&s.push(e,t,n,r,rv.z,null,i)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||ev.intersectsObject(e))){const{geometry:t,material:n}=e;if(!0===this.sortObjects&&(null===t.boundingSphere&&t.computeBoundingSphere(),rv.copy(t.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(tv)),Array.isArray(n)){const o=t.groups;for(let a=0,u=o.length;a<u;a++){const u=o[a],l=n[u.materialIndex];l&&l.visible&&s.push(e,t,l,r,rv.z,u,i)}}else n.visible&&s.push(e,t,n,r,rv.z,null,i)}if(!0===e.isBundleGroup&&void 0!==this.backend.beginBundle){const r=s;(s=this._renderLists.get(e,t)).begin(),r.pushBundle({bundleGroup:e,camera:t,renderList:s}),s.finish()}const n=e.children;for(let e=0,o=n.length;e<o;e++)this._projectObject(n[e],t,r,s,i)}_renderBundles(e,t,r){for(const s of e)this._renderBundle(s,t,r)}_renderTransparents(e,t,r,s,i){if(t.length>0){for(const{material:e}of t)e.side=v;this._renderObjects(t,r,s,i,"backSide");for(const{material:e}of t)e.side=Xe;this._renderObjects(e,r,s,i);for(const{material:e}of t)e.side=Ne}else this._renderObjects(e,r,s,i)}_renderObjects(e,t,r,s,i=null){for(let n=0,o=e.length;n<o;n++){const{object:o,geometry:a,material:u,group:l,clippingContext:d}=e[n];this._currentRenderObjectFunction(o,r,t,a,u,l,s,d,i)}}renderObject(e,t,r,s,i,n,o,a=null,u=null){let l,d,c;if(e.onBeforeRender(this,t,r,s,i,n),null!==t.overrideMaterial){const e=t.overrideMaterial;i.positionNode&&i.positionNode.isNode&&(l=e.positionNode,e.positionNode=i.positionNode),e.alphaTest=i.alphaTest,e.alphaMap=i.alphaMap,e.transparent=i.transparent||i.transmission>0,e.isShadowPassMaterial&&(e.side=null===i.shadowSide?i.side:i.shadowSide,i.depthNode&&i.depthNode.isNode&&(c=e.depthNode,e.depthNode=i.depthNode),i.castShadowNode&&i.castShadowNode.isNode&&(d=e.colorNode,e.colorNode=i.castShadowNode)),i=e}!0===i.transparent&&i.side===Ne&&!1===i.forceSinglePass?(i.side=v,this._handleObjectFunction(e,i,t,r,o,n,a,"backSide"),i.side=Xe,this._handleObjectFunction(e,i,t,r,o,n,a,u),i.side=Ne):this._handleObjectFunction(e,i,t,r,o,n,a,u),void 0!==l&&(t.overrideMaterial.positionNode=l),void 0!==c&&(t.overrideMaterial.depthNode=c),void 0!==d&&(t.overrideMaterial.colorNode=d),e.onAfterRender(this,t,r,s,i,n)}_renderObjectDirect(e,t,r,s,i,n,o,a){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=n;const l=this._nodes.needsRefresh(u);if(l&&(this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u)),this._pipelines.updateForRender(u),null!==this._currentRenderBundle){this.backend.get(this._currentRenderBundle).renderObjects.push(u),u.bundle=this._currentRenderBundle.bundleGroup}this.backend.draw(u,this.info),l&&this._nodes.updateAfter(u)}_createObjectPipeline(e,t,r,s,i,n,o,a){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=n,this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u),this._pipelines.getForRender(u,this._compilationPromises),this._nodes.updateAfter(u)}get compile(){return this.compileAsync}}class iv{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}class nv extends iv{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return(e=this._buffer.byteLength)+(Mm-e%Mm)%Mm;var e}get buffer(){return this._buffer}update(){return!0}}class ov extends nv{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let av=0;class uv extends ov{constructor(e,t){super("UniformBuffer_"+av++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class lv extends ov{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return-1!==t&&this.uniforms.splice(t,1),this}get values(){return null===this._values&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(null===e){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){let e=0;for(let t=0,r=this.uniforms.length;t<r;t++){const r=this.uniforms[t],{boundary:s,itemSize:i}=r,n=e%Mm;0!==n&&Mm-n-s<0?e+=Mm-n:n%s!=0&&(e+=n%s),r.offset=e/this.bytesPerElement,e+=i*this.bytesPerElement}return Math.ceil(e/Mm)*Mm}update(){let e=!1;for(const t of this.uniforms)!0===this.updateByType(t)&&(e=!0);return e}updateByType(e){return e.isNumberUniform?this.updateNumber(e):e.isVector2Uniform?this.updateVector2(e):e.isVector3Uniform?this.updateVector3(e):e.isVector4Uniform?this.updateVector4(e):e.isColorUniform?this.updateColor(e):e.isMatrix3Uniform?this.updateMatrix3(e):e.isMatrix4Uniform?this.updateMatrix4(e):void console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i]!==s){this._getBufferForType(n)[i]=r[i]=s,t=!0}return t}updateVector2(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,t=!0}return t}updateVector3(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,t=!0}return t}updateVector4(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z||r[i+4]!==s.w){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,e[i+3]=r[i+3]=s.w,t=!0}return t}updateColor(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.r||r[i+1]!==s.g||r[i+2]!==s.b){const e=this.buffer;e[i+0]=r[i+0]=s.r,e[i+1]=r[i+1]=s.g,e[i+2]=r[i+2]=s.b,t=!0}return t}updateMatrix3(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(r[i+0]!==s[0]||r[i+1]!==s[1]||r[i+2]!==s[2]||r[i+4]!==s[3]||r[i+5]!==s[4]||r[i+6]!==s[5]||r[i+8]!==s[6]||r[i+9]!==s[7]||r[i+10]!==s[8]){const e=this.buffer;e[i+0]=r[i+0]=s[0],e[i+1]=r[i+1]=s[1],e[i+2]=r[i+2]=s[2],e[i+4]=r[i+4]=s[3],e[i+5]=r[i+5]=s[4],e[i+6]=r[i+6]=s[5],e[i+8]=r[i+8]=s[6],e[i+9]=r[i+9]=s[7],e[i+10]=r[i+10]=s[8],t=!0}return t}updateMatrix4(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(!1===function(e,t,r){for(let s=0,i=t.length;s<i;s++)if(e[r+s]!==t[s])return!1;return!0}(r,s,i)){this.buffer.set(s,i),function(e,t,r){for(let s=0,i=t.length;s<i;s++)e[r+s]=t[s]}(r,s,i),t=!0}return t}_getBufferForType(e){return"int"===e||"ivec2"===e||"ivec3"===e||"ivec4"===e?new Int32Array(this.buffer.buffer):"uint"===e||"uvec2"===e||"uvec3"===e||"uvec4"===e?new Uint32Array(this.buffer.buffer):this.buffer}}let dv=0;class cv extends lv{constructor(e,t){super(e),this.id=dv++,this.groupNode=t,this.isNodeUniformsGroup=!0}}let hv=0;class pv extends iv{constructor(e,t){super(e),this.id=hv++,this.texture=t,this.version=t?t.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(e){const{texture:t}=this;return e!==this.generation?(this.generation=e,!0):t.isVideoTexture}update(){const{texture:e,version:t}=this;return t!==e.version&&(this.version=e.version,!0)}}class gv extends pv{constructor(e,t,r,s=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r,this.access=s}needsBindingsUpdate(e){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(e)}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class mv extends gv{constructor(e,t,r,s=null){super(e,t,r,s),this.isSampledCubeTexture=!0}}class fv extends gv{constructor(e,t,r,s=null){super(e,t,r,s),this.isSampledTexture3D=!0}}const yv={textureDimensions:"textureSize",equals:"equal"},xv={low:"lowp",medium:"mediump",high:"highp"},bv={swizzleAssign:!0,storageBuffer:!1},Tv="\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\n";class _v extends l_{constructor(e,t){super(e,t,new C_),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]},this.useComparisonMethod=!0}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==x}getMethod(e){return yv[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(this.getType(e.type)+" "+e.name);return`${this.getType(t.type)} ${t.name}( ${s.join(", ")} ) {\n\n\t${r.vars}\n\n${r.code}\n\treturn ${r.result};\n\n}`}setupPBO(e){const t=e.value;if(void 0===t.pbo){const e=t.array,r=t.count*t.itemSize,{itemSize:s}=t,i=t.array.constructor.name.toLowerCase().includes("int");let n=i?Ye:Qe;2===s?n=i?tt:Le:3===s?n=i?rt:st:4===s&&(n=i?it:de);const o={Float32Array:B,Uint8Array:Ce,Uint16Array:et,Uint32Array:b,Int8Array:Je,Int16Array:Ze,Int32Array:T,Uint8ClampedArray:Ce},a=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(r/s))));let u=Math.ceil(r/s/a);a*u*s<r&&u++;const l=a*u*s,d=new e.constructor(l);d.set(e,0),t.array=d;const c=new Ke(t.array,a,u,n,o[t.array.constructor.name]||B);c.needsUpdate=!0,c.isPBOTexture=!0;const h=new Du(c,null,null);h.setPrecision("high"),t.pboNode=h,t.pbo=h.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&!0!==e.node.isTextureNode&&!0!==e.node.isBufferNode?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:r}=e,s=t.value;if(this.renderer.backend.has(s)){this.renderer.backend.get(s).pbo=s.pbo}const i=this.getUniformFromNode(s.pboNode,"texture",this.shaderStage,this.context.label),n=this.getPropertyName(i);this.increaseUsage(r);const o=r.build(this,"uint"),a=this.getDataFromNode(e);let u=a.propertyName;if(void 0===u){const r=this.getVarFromNode(e);u=this.getPropertyName(r);const i=this.getDataFromNode(t);let l=i.propertySizeName;void 0===l&&(l=u+"Size",this.getVarFromNode(t,l,"uint"),this.addLineFlowCode(`${l} = uint( textureSize( ${n}, 0 ).x )`,e),i.propertySizeName=l);const{itemSize:d}=s,c="."+Vs.join("").slice(0,d),h=`ivec2(${o} % ${l}, ${o} / ${l})`,p=this.generateTextureLoad(null,n,h,null,"0");let g="vec4";s.pbo.type===b?g="uvec4":s.pbo.type===T&&(g="ivec4"),this.addLineFlowCode(`${u} = ${g}(${p})${c}`,e),a.propertyName=u}return u}generateTextureLoad(e,t,r,s,i="0"){return s?`texelFetch( ${t}, ivec3( ${r}, ${s} ), ${i} )`:`texelFetch( ${t}, ${r}, ${i} )`}generateTexture(e,t,r,s){return e.isDepthTexture?`texture( ${t}, ${r} ).x`:(s&&(r=`vec3( ${r}, ${s} )`),`texture( ${t}, ${r} )`)}generateTextureLevel(e,t,r,s){return`textureLod( ${t}, ${r}, ${s} )`}generateTextureBias(e,t,r,s){return`texture( ${t}, ${r}, ${s} )`}generateTextureGrad(e,t,r,s){return`textureGrad( ${t}, ${r}, ${s[0]}, ${s[1]} )`}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`texture( ${t}, vec3( ${r}, ${s} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`${this.getVar(e.type,e.name,e.count)};`);return t.join("\n\t")}getUniforms(e){const t=this.uniforms[e],r=[],s={};for(const i of t){let t=null,n=!1;if("texture"===i.type||"texture3D"===i.type){const e=i.node.value;let r="";!0!==e.isDataTexture&&!0!==e.isData3DTexture||(e.type===b?r="u":e.type===T&&(r="i")),t="texture3D"===i.type?`${r}sampler3D ${i.name};`:e.compareFunction?`sampler2DShadow ${i.name};`:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?`${r}sampler2DArray ${i.name};`:`${r}sampler2D ${i.name};`}else if("cubeTexture"===i.type)t=`samplerCube ${i.name};`;else if("buffer"===i.type){const e=i.node,r=this.getType(e.bufferType),s=e.bufferCount,n=s>0?s:"";t=`${e.name} {\n\t${r} ${i.name}[${n}];\n};\n`}else{t=`${this.getVectorType(i.type)} ${this.getPropertyName(i,e)};`,n=!0}const o=i.node.precision;if(null!==o&&(t=xv[o]+" "+t),n){t="\t"+t;const e=i.groupNode.name;(s[e]||(s[e]=[])).push(t)}else t="uniform "+t,r.push(t)}let i="";for(const t in s){const r=s[t];i+=this._getGLSLUniformStruct(e+"_"+t,r.join("\n"))+"\n"}return i+=r.join("\n"),i}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==T){let r=e;e.isInterleavedBufferAttribute&&(r=e.data);const s=r.array;!1==(s instanceof Uint32Array||s instanceof Int32Array)&&(t=t.slice(1))}return t}getAttributes(e){let t="";if("vertex"===e||"compute"===e){const e=this.getAttributesArray();let r=0;for(const s of e)t+=`layout( location = ${r++} ) in ${s.type} ${s.name};\n`}return t}getStructMembers(e){const t=[];for(const r of e.members)t.push(`\t${r.type} ${r.name};`);return t.join("\n")}getStructs(e){const t=[],r=this.structs[e],s=[];for(const e of r)if(e.output)for(const t of e.members)s.push(`layout( location = ${t.index} ) out ${t.type} ${t.name};`);else{let r="struct "+e.name+" {\n";r+=this.getStructMembers(e),r+="\n};\n",t.push(r)}return 0===s.length&&s.push("layout( location = 0 ) out vec4 fragColor;"),"\n"+s.join("\n")+"\n\n"+t.join("\n")}getVaryings(e){let t="";const r=this.varyings;if("vertex"===e||"compute"===e)for(const s of r){"compute"===e&&(s.needsInterpolation=!0);const r=this.getType(s.type);if(s.needsInterpolation){t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""} out ${r} ${s.name};\n`}else t+=`${r} ${s.name};\n`}else if("fragment"===e)for(const e of r)if(e.needsInterpolation){const r=this.getType(e.type);t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}in ${r} ${e.name};\n`}for(const r of this.builtins[e])t+=`${r};\n`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce(((e,t)=>e*t),1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,r=this.shaderStage){const s=this.extensions[r]||(this.extensions[r]=new Map);!1===s.has(e)&&s.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if("vertex"===e){const t=this.renderer.backend.extensions;this.object.isBatchedMesh&&t.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const r=this.extensions[e];if(void 0!==r)for(const{name:e,behavior:s}of r.values())t.push(`#extension ${e} : ${s}`);return t.join("\n")}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=bv[e];if(void 0===t){let r;switch(t=!1,e){case"float32Filterable":r="OES_texture_float_linear";break;case"clipDistance":r="WEBGL_clip_cull_distance"}if(void 0!==r){const e=this.renderer.backend.extensions;e.has(r)&&(e.get(r),t=!0)}bv[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let r=0;r<e.length;r++){const s=e[r],i=this.getPropertyName(s.attributeNode);t+=`${s.varyingName} = ${i};\n\t`}return t}_getGLSLUniformStruct(e,t){return`\nlayout( std140 ) uniform ${e} {\n${t}\n};`}_getGLSLVertexCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions\n${e.extensions}\n\n// precision\n${Tv}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// attributes\n${e.attributes}\n\n// codes\n${e.codes}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// transforms\n\t${e.transforms}\n\n\t// flow\n\t${e.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`}_getGLSLFragmentCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// precision\n${Tv}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// codes\n${e.codes}\n\n// structs\n${e.structs}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let r="// code\n\n";r+=this.flowCode[t];const s=this.flowNodes[t],i=s[s.length-1];for(const e of s){const s=this.getFlowData(e),n=e.name;n&&(r.length>0&&(r+="\n"),r+=`\t// flow -> ${n}\n\t`),r+=`${s.code}\n\t`,e===i&&"compute"!==t&&(r+="// result\n\t","vertex"===t?(r+="gl_Position = ",r+=`${s.result};`):"fragment"===t&&(e.outputNode.isOutputStructNode||(r+="fragColor = ",r+=`${s.result};`)))}const n=e[t];n.extensions=this.getExtensions(t),n.uniforms=this.getUniforms(t),n.attributes=this.getAttributes(t),n.varyings=this.getVaryings(t),n.vars=this.getVars(t),n.structs=this.getStructs(t),n.codes=this.getCodes(t),n.transforms=this.getTransforms(t),n.flow=r}null!==this.material?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);let o=n.uniformGPU;if(void 0===o){const s=e.groupNode,a=s.name,u=this.getBindGroupArray(a,r);if("texture"===t)o=new gv(i.name,i.node,s),u.push(o);else if("cubeTexture"===t)o=new mv(i.name,i.node,s),u.push(o);else if("texture3D"===t)o=new fv(i.name,i.node,s),u.push(o);else if("buffer"===t){e.name=`NodeBuffer_${e.id}`,i.name=`buffer${e.id}`;const t=new uv(e,s);t.name=e.name,u.push(t),o=t}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let n=e[a];void 0===n&&(n=new cv(r+"_"+a,s),e[a]=n,u.push(n)),o=this.getNodeUniform(i,t),n.addUniform(o)}n.uniformGPU=o}return i}}let vv=null,Nv=null;class Sv{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null,this.timestampQueryPool={render:null,compute:null}}async init(e){this.renderer=e}get coordinateSystem(){}beginRender(){}finishRender(){}beginCompute(){}finishCompute(){}draw(){}compute(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}updateBinding(){}createRenderPipeline(){}createComputePipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}destroySampler(){}createDefaultTexture(){}createTexture(){}updateTexture(){}generateMipmaps(){}destroyTexture(){}async copyTextureToBuffer(){}copyTextureToTexture(){}copyFramebufferToTexture(){}createAttribute(){}createIndexAttribute(){}createStorageAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}updateViewport(){}isOccluded(){}async resolveTimestampsAsync(e="render"){if(!this.trackTimestamp)return void nt("WebGPURenderer: Timestamp tracking is disabled.");const t=this.timestampQueryPool[e];if(!t)return void nt(`WebGPURenderer: No timestamp query pool for type '${e}' found.`);const r=await t.resolveQueriesAsync();return this.renderer.info[e].timestamp=r,r}async waitForGPU(){}async getArrayBufferAsync(){}async hasFeatureAsync(){}hasFeature(){}getMaxAnisotropy(){}getDrawingBufferSize(){return vv=vv||new t,this.renderer.getDrawingBufferSize(vv)}setScissorTest(){}getClearColor(){const e=this.renderer;return Nv=Nv||new nf,e.getClearColor(Nv),Nv.getRGB(Nv),Nv}getDomElement(){let e=this.domElement;return null===e&&(e=void 0!==this.parameters.canvas?this.parameters.canvas:ot(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${ze} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let Rv,Av,Ev=0;class Cv{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[1^this.activeBufferIndex]}switchBuffers(){this.activeBufferIndex^=1}}class wv{constructor(e){this.backend=e}createAttribute(e,t){const r=this.backend,{gl:s}=r,i=e.array,n=e.usage||s.STATIC_DRAW,o=e.isInterleavedBufferAttribute?e.data:e,a=r.get(o);let u,l=a.bufferGPU;if(void 0===l&&(l=this._createBuffer(s,t,i,n),a.bufferGPU=l,a.bufferType=t,a.version=o.version),i instanceof Float32Array)u=s.FLOAT;else if(i instanceof Uint16Array)u=e.isFloat16BufferAttribute?s.HALF_FLOAT:s.UNSIGNED_SHORT;else if(i instanceof Int16Array)u=s.SHORT;else if(i instanceof Uint32Array)u=s.UNSIGNED_INT;else if(i instanceof Int32Array)u=s.INT;else if(i instanceof Int8Array)u=s.BYTE;else if(i instanceof Uint8Array)u=s.UNSIGNED_BYTE;else{if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+i);u=s.UNSIGNED_BYTE}let d={bufferGPU:l,bufferType:t,type:u,byteLength:i.byteLength,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:u===s.INT||u===s.UNSIGNED_INT||e.gpuType===T,id:Ev++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const e=this._createBuffer(s,t,i,n);d=new Cv(d,e)}r.set(e,d)}updateAttribute(e){const t=this.backend,{gl:r}=t,s=e.array,i=e.isInterleavedBufferAttribute?e.data:e,n=t.get(i),o=n.bufferType,a=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(r.bindBuffer(o,n.bufferGPU),0===a.length)r.bufferSubData(o,0,s);else{for(let e=0,t=a.length;e<t;e++){const t=a[e];r.bufferSubData(o,t.start*s.BYTES_PER_ELEMENT,s,t.start,t.count)}i.clearUpdateRanges()}r.bindBuffer(o,null),n.version=i.version}destroyAttribute(e){const t=this.backend,{gl:r}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const s=t.get(e);r.deleteBuffer(s.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:r}=t,s=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:i}=t.get(s),n=e.array,o=n.byteLength;r.bindBuffer(r.COPY_READ_BUFFER,i);const a=r.createBuffer();r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.bufferData(r.COPY_WRITE_BUFFER,o,r.STREAM_READ),r.copyBufferSubData(r.COPY_READ_BUFFER,r.COPY_WRITE_BUFFER,0,0,o),await t.utils._clientWaitAsync();const u=new e.array.constructor(n.length);return r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.getBufferSubData(r.COPY_WRITE_BUFFER,0,u),r.deleteBuffer(a),r.bindBuffer(r.COPY_READ_BUFFER,null),r.bindBuffer(r.COPY_WRITE_BUFFER,null),u.buffer}_createBuffer(e,t,r,s){const i=e.createBuffer();return e.bindBuffer(t,i),e.bufferData(t,r,s),e.bindBuffer(t,null),i}}class Mv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentVAO=null,this.currentIndex=null,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},this._init()}_init(){const e=this.gl;Rv={[lt]:e.FUNC_ADD,[ut]:e.FUNC_SUBTRACT,[at]:e.FUNC_REVERSE_SUBTRACT},Av={[Tt]:e.ZERO,[bt]:e.ONE,[xt]:e.SRC_COLOR,[yt]:e.SRC_ALPHA,[ft]:e.SRC_ALPHA_SATURATE,[mt]:e.DST_COLOR,[gt]:e.DST_ALPHA,[pt]:e.ONE_MINUS_SRC_COLOR,[ht]:e.ONE_MINUS_SRC_ALPHA,[ct]:e.ONE_MINUS_DST_COLOR,[dt]:e.ONE_MINUS_DST_ALPHA};const t=e.getParameter(e.SCISSOR_BOX),r=e.getParameter(e.VIEWPORT);this.currentScissor=(new s).fromArray(t),this.currentViewport=(new s).fromArray(r),this._tempVec4=new s}enable(e){const{enabled:t}=this;!0!==t[e]&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;!1!==t[e]&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==_t?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===vt?t.cullFace(t.BACK):e===Nt?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:r}=this;e!==t&&(r.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,r,s,i,n,o,a){const{gl:u}=this;if(e!==O){if(!1===this.currentBlendingEnabled&&(this.enable(u.BLEND),this.currentBlendingEnabled=!0),e===St)i=i||t,n=n||r,o=o||s,t===this.currentBlendEquation&&i===this.currentBlendEquationAlpha||(u.blendEquationSeparate(Rv[t],Rv[i]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=i),r===this.currentBlendSrc&&s===this.currentBlendDst&&n===this.currentBlendSrcAlpha&&o===this.currentBlendDstAlpha||(u.blendFuncSeparate(Av[r],Av[s],Av[n],Av[o]),this.currentBlendSrc=r,this.currentBlendDst=s,this.currentBlendSrcAlpha=n,this.currentBlendDstAlpha=o),this.currentBlending=e,this.currentPremultipledAlpha=!1;else if(e!==this.currentBlending||a!==this.currentPremultipledAlpha){if(this.currentBlendEquation===lt&&this.currentBlendEquationAlpha===lt||(u.blendEquation(u.FUNC_ADD),this.currentBlendEquation=lt,this.currentBlendEquationAlpha=lt),a)switch(e){case L:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case Et:u.blendFunc(u.ONE,u.ONE);break;case At:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case Rt:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case L:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case Et:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case At:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case Rt:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=a}}else!0===this.currentBlendingEnabled&&(this.disable(u.BLEND),this.currentBlendingEnabled=!1)}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case It:t.depthFunc(t.NEVER);break;case Pt:t.depthFunc(t.ALWAYS);break;case Ut:t.depthFunc(t.LESS);break;case Ft:t.depthFunc(t.LEQUAL);break;case Bt:t.depthFunc(t.EQUAL);break;case Mt:t.depthFunc(t.GEQUAL);break;case wt:t.depthFunc(t.GREATER);break;case Ct:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}scissor(e,t,r,s){const i=this._tempVec4.set(e,t,r,s);if(!1===this.currentScissor.equals(i)){const{gl:e}=this;e.scissor(i.x,i.y,i.z,i.w),this.currentScissor.copy(i)}}viewport(e,t,r,s){const i=this._tempVec4.set(e,t,r,s);if(!1===this.currentViewport.equals(i)){const{gl:e}=this;e.viewport(i.x,i.y,i.z,i.w),this.currentViewport.copy(i)}}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,r){this.currentStencilFunc===e&&this.currentStencilRef===t&&this.currentStencilFuncMask===r||(this.gl.stencilFunc(e,t,r),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=r)}setStencilOp(e,t,r){this.currentStencilFail===e&&this.currentStencilZFail===t&&this.currentStencilZPass===r||(this.gl.stencilOp(e,t,r),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=r)}setMaterial(e,t,r){const{gl:s}=this;e.side===Ne?this.disable(s.CULL_FACE):this.enable(s.CULL_FACE);let i=e.side===v;t&&(i=!i),this.setFlipSided(i),e.blending===L&&!1===e.transparent?this.setBlending(O):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const n=e.stencilWrite;if(this.setStencilTest(n),n&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage&&this.backend.renderer.samples>1?this.enable(s.SAMPLE_ALPHA_TO_COVERAGE):this.disable(s.SAMPLE_ALPHA_TO_COVERAGE),r>0&&this.currentClippingPlanes!==r){const e=12288;for(let t=0;t<8;t++)t<r?this.enable(e+t):this.disable(e+t)}}setPolygonOffset(e,t,r){const{gl:s}=this;e?(this.enable(s.POLYGON_OFFSET_FILL),this.currentPolygonOffsetFactor===t&&this.currentPolygonOffsetUnits===r||(s.polygonOffset(t,r),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=r)):this.disable(s.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e&&(this.gl.useProgram(e),this.currentProgram=e,!0)}setVertexState(e,t=null){const r=this.gl;return(this.currentVAO!==e||this.currentIndex!==t)&&(r.bindVertexArray(e),null!==t&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t),this.currentVAO=e,this.currentIndex=t,!0)}resetVertexState(){const e=this.gl;e.bindVertexArray(null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),this.currentVAO=null,this.currentIndex=null}bindFramebuffer(e,t){const{gl:r,currentBoundFramebuffers:s}=this;return s[e]!==t&&(r.bindFramebuffer(e,t),s[e]=t,e===r.DRAW_FRAMEBUFFER&&(s[r.FRAMEBUFFER]=t),e===r.FRAMEBUFFER&&(s[r.DRAW_FRAMEBUFFER]=t),!0)}drawBuffers(e,t){const{gl:r}=this;let s=[],i=!1;if(null!==e.textures){s=this.currentDrawbuffers.get(t),void 0===s&&(s=[],this.currentDrawbuffers.set(t,s));const n=e.textures;if(s.length!==n.length||s[0]!==r.COLOR_ATTACHMENT0){for(let e=0,t=n.length;e<t;e++)s[e]=r.COLOR_ATTACHMENT0+e;s.length=n.length,i=!0}}else s[0]!==r.BACK&&(s[0]=r.BACK,i=!0);i&&r.drawBuffers(s)}activeTexture(e){const{gl:t,currentTextureSlot:r,maxTextures:s}=this;void 0===e&&(e=t.TEXTURE0+s-1),r!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,r){const{gl:s,currentTextureSlot:i,currentBoundTextures:n,maxTextures:o}=this;void 0===r&&(r=null===i?s.TEXTURE0+o-1:i);let a=n[r];void 0===a&&(a={type:void 0,texture:void 0},n[r]=a),a.type===e&&a.texture===t||(i!==r&&(s.activeTexture(r),this.currentTextureSlot=r),s.bindTexture(e,t),a.type=e,a.texture=t)}bindBufferBase(e,t,r){const{gl:s}=this,i=`${e}-${t}`;return this.currentBoundBufferBases[i]!==r&&(s.bindBufferBase(e,t,r),this.currentBoundBufferBases[i]=r,!0)}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:r}=this,s=r[t];void 0!==s&&void 0!==s.type&&(e.bindTexture(s.type,null),s.type=void 0,s.texture=void 0)}}class Bv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=x){const{gl:r,extensions:s}=this;let i;if(e===Ce)return r.UNSIGNED_BYTE;if(e===Lt)return r.UNSIGNED_SHORT_4_4_4_4;if(e===Dt)return r.UNSIGNED_SHORT_5_5_5_1;if(e===Vt)return r.UNSIGNED_INT_5_9_9_9_REV;if(e===Je)return r.BYTE;if(e===Ze)return r.SHORT;if(e===et)return r.UNSIGNED_SHORT;if(e===T)return r.INT;if(e===b)return r.UNSIGNED_INT;if(e===B)return r.FLOAT;if(e===ce)return r.HALF_FLOAT;if(e===Ot)return r.ALPHA;if(e===st)return r.RGB;if(e===de)return r.RGBA;if(e===Gt)return r.LUMINANCE;if(e===kt)return r.LUMINANCE_ALPHA;if(e===Ae)return r.DEPTH_COMPONENT;if(e===Re)return r.DEPTH_STENCIL;if(e===Qe)return r.RED;if(e===Ye)return r.RED_INTEGER;if(e===Le)return r.RG;if(e===tt)return r.RG_INTEGER;if(e===it)return r.RGBA_INTEGER;if(e===zt||e===$t||e===Wt||e===Ht)if(t===k){if(i=s.get("WEBGL_compressed_texture_s3tc_srgb"),null===i)return null;if(e===zt)return i.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===$t)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===Wt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Ht)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(i=s.get("WEBGL_compressed_texture_s3tc"),null===i)return null;if(e===zt)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===$t)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===Wt)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Ht)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(e===jt||e===qt||e===Xt||e===Kt){if(i=s.get("WEBGL_compressed_texture_pvrtc"),null===i)return null;if(e===jt)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===qt)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===Xt)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===Kt)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(e===Yt||e===Qt||e===Zt){if(i=s.get("WEBGL_compressed_texture_etc"),null===i)return null;if(e===Yt||e===Qt)return t===k?i.COMPRESSED_SRGB8_ETC2:i.COMPRESSED_RGB8_ETC2;if(e===Zt)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:i.COMPRESSED_RGBA8_ETC2_EAC}if(e===Jt||e===er||e===tr||e===rr||e===sr||e===ir||e===nr||e===or||e===ar||e===ur||e===lr||e===dr||e===cr||e===hr){if(i=s.get("WEBGL_compressed_texture_astc"),null===i)return null;if(e===Jt)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:i.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===er)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:i.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===tr)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:i.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===rr)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:i.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===sr)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:i.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===ir)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:i.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===nr)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:i.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===or)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:i.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===ar)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:i.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===ur)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:i.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===lr)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:i.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===dr)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:i.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===cr)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:i.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===hr)return t===k?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:i.COMPRESSED_RGBA_ASTC_12x12_KHR}if(e===pr){if(i=s.get("EXT_texture_compression_bptc"),null===i)return null;if(e===pr)return t===k?i.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:i.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(e===gr||e===mr||e===fr||e===yr){if(i=s.get("EXT_texture_compression_rgtc"),null===i)return null;if(e===pr)return i.COMPRESSED_RED_RGTC1_EXT;if(e===mr)return i.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===fr)return i.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===yr)return i.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return e===Ee?r.UNSIGNED_INT_24_8:void 0!==r[e]?r[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise(((r,s)=>{!function i(){const n=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(n===e.WAIT_FAILED)return e.deleteSync(t),void s();n!==e.TIMEOUT_EXPIRED?(e.deleteSync(t),r()):requestAnimationFrame(i)}()}))}}let Fv,Uv,Pv,Iv=!1;class Lv{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},!1===Iv&&(this._init(),Iv=!0)}_init(){const e=this.gl;Fv={[Tr]:e.REPEAT,[br]:e.CLAMP_TO_EDGE,[xr]:e.MIRRORED_REPEAT},Uv={[vr]:e.NEAREST,[_r]:e.NEAREST_MIPMAP_NEAREST,[Ge]:e.NEAREST_MIPMAP_LINEAR,[j]:e.LINEAR,[Oe]:e.LINEAR_MIPMAP_NEAREST,[U]:e.LINEAR_MIPMAP_LINEAR},Pv={[wr]:e.NEVER,[Cr]:e.ALWAYS,[Pe]:e.LESS,[Er]:e.LEQUAL,[Ar]:e.EQUAL,[Rr]:e.GEQUAL,[Sr]:e.GREATER,[Nr]:e.NOTEQUAL}}getGLTextureType(e){const{gl:t}=this;let r;return r=!0===e.isCubeTexture?t.TEXTURE_CUBE_MAP:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?t.TEXTURE_2D_ARRAY:!0===e.isData3DTexture?t.TEXTURE_3D:t.TEXTURE_2D,r}getInternalFormat(e,t,r,s,i=!1){const{gl:n,extensions:o}=this;if(null!==e){if(void 0!==n[e])return n[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let a=t;return t===n.RED&&(r===n.FLOAT&&(a=n.R32F),r===n.HALF_FLOAT&&(a=n.R16F),r===n.UNSIGNED_BYTE&&(a=n.R8),r===n.UNSIGNED_SHORT&&(a=n.R16),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RED_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.R8UI),r===n.UNSIGNED_SHORT&&(a=n.R16UI),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RG&&(r===n.FLOAT&&(a=n.RG32F),r===n.HALF_FLOAT&&(a=n.RG16F),r===n.UNSIGNED_BYTE&&(a=n.RG8),r===n.UNSIGNED_SHORT&&(a=n.RG16),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RG_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RG8UI),r===n.UNSIGNED_SHORT&&(a=n.RG16UI),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RGB&&(r===n.FLOAT&&(a=n.RGB32F),r===n.HALF_FLOAT&&(a=n.RGB16F),r===n.UNSIGNED_BYTE&&(a=n.RGB8),r===n.UNSIGNED_SHORT&&(a=n.RGB16),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I),r===n.UNSIGNED_BYTE&&(a=s===k&&!1===i?n.SRGB8:n.RGB8),r===n.UNSIGNED_SHORT_5_6_5&&(a=n.RGB565),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGB4),r===n.UNSIGNED_INT_5_9_9_9_REV&&(a=n.RGB9_E5)),t===n.RGB_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGB8UI),r===n.UNSIGNED_SHORT&&(a=n.RGB16UI),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I)),t===n.RGBA&&(r===n.FLOAT&&(a=n.RGBA32F),r===n.HALF_FLOAT&&(a=n.RGBA16F),r===n.UNSIGNED_BYTE&&(a=n.RGBA8),r===n.UNSIGNED_SHORT&&(a=n.RGBA16),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I),r===n.UNSIGNED_BYTE&&(a=s===k&&!1===i?n.SRGB8_ALPHA8:n.RGBA8),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGBA4),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1)),t===n.RGBA_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGBA8UI),r===n.UNSIGNED_SHORT&&(a=n.RGBA16UI),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I)),t===n.DEPTH_COMPONENT&&(r===n.UNSIGNED_SHORT&&(a=n.DEPTH_COMPONENT16),r===n.UNSIGNED_INT&&(a=n.DEPTH_COMPONENT24),r===n.FLOAT&&(a=n.DEPTH_COMPONENT32F)),t===n.DEPTH_STENCIL&&r===n.UNSIGNED_INT_24_8&&(a=n.DEPTH24_STENCIL8),a!==n.R16F&&a!==n.R32F&&a!==n.RG16F&&a!==n.RG32F&&a!==n.RGBA16F&&a!==n.RGBA32F||o.get("EXT_color_buffer_float"),a}setTextureParameters(e,t){const{gl:r,extensions:s,backend:i}=this;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,t.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,t.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,r.NONE),r.texParameteri(e,r.TEXTURE_WRAP_S,Fv[t.wrapS]),r.texParameteri(e,r.TEXTURE_WRAP_T,Fv[t.wrapT]),e!==r.TEXTURE_3D&&e!==r.TEXTURE_2D_ARRAY||r.texParameteri(e,r.TEXTURE_WRAP_R,Fv[t.wrapR]),r.texParameteri(e,r.TEXTURE_MAG_FILTER,Uv[t.magFilter]);const n=void 0!==t.mipmaps&&t.mipmaps.length>0,o=t.minFilter===j&&n?U:t.minFilter;if(r.texParameteri(e,r.TEXTURE_MIN_FILTER,Uv[o]),t.compareFunction&&(r.texParameteri(e,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(e,r.TEXTURE_COMPARE_FUNC,Pv[t.compareFunction])),!0===s.has("EXT_texture_filter_anisotropic")){if(t.magFilter===vr)return;if(t.minFilter!==Ge&&t.minFilter!==U)return;if(t.type===B&&!1===s.has("OES_texture_float_linear"))return;if(t.anisotropy>1){const n=s.get("EXT_texture_filter_anisotropic");r.texParameterf(e,n.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,i.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:r,defaultTextures:s}=this,i=this.getGLTextureType(e);let n=s[i];void 0===n&&(n=t.createTexture(),r.state.bindTexture(i,n),t.texParameteri(i,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(i,t.TEXTURE_MAG_FILTER,t.NEAREST),s[i]=n),r.set(e,{textureGPU:n,glTextureType:i,isDefault:!0})}createTexture(e,t){const{gl:r,backend:s}=this,{levels:i,width:n,height:o,depth:a}=t,u=s.utils.convert(e.format,e.colorSpace),l=s.utils.convert(e.type),d=this.getInternalFormat(e.internalFormat,u,l,e.colorSpace,e.isVideoTexture),c=r.createTexture(),h=this.getGLTextureType(e);s.state.bindTexture(h,c),this.setTextureParameters(h,e),e.isDataArrayTexture||e.isCompressedArrayTexture?r.texStorage3D(r.TEXTURE_2D_ARRAY,i,d,n,o,a):e.isData3DTexture?r.texStorage3D(r.TEXTURE_3D,i,d,n,o,a):e.isVideoTexture||r.texStorage2D(h,i,d,n,o),s.set(e,{textureGPU:c,glTextureType:h,glFormat:u,glType:l,glInternalFormat:d})}copyBufferToTexture(e,t){const{gl:r,backend:s}=this,{textureGPU:i,glTextureType:n,glFormat:o,glType:a}=s.get(t),{width:u,height:l}=t.source.data;r.bindBuffer(r.PIXEL_UNPACK_BUFFER,e),s.state.bindTexture(n,i),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,!1),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),r.texSubImage2D(n,0,0,0,u,l,o,a,0),r.bindBuffer(r.PIXEL_UNPACK_BUFFER,null),s.state.unbindTexture()}updateTexture(e,t){const{gl:r}=this,{width:s,height:i}=t,{textureGPU:n,glTextureType:o,glFormat:a,glType:u,glInternalFormat:l}=this.backend.get(e);if(e.isRenderTargetTexture||void 0===n)return;const d=e=>e.isDataTexture?e.image.data:"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||e instanceof OffscreenCanvas?e:e.data;if(this.backend.state.bindTexture(o,n),this.setTextureParameters(o,e),e.isCompressedTexture){const s=e.mipmaps,i=t.image;for(let t=0;t<s.length;t++){const n=s[t];e.isCompressedArrayTexture?e.format!==r.RGBA?null!==a?r.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,n.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,u,n.data):null!==a?r.compressedTexSubImage2D(r.TEXTURE_2D,t,0,0,n.width,n.height,a,n.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const e=t.images;for(let t=0;t<6;t++){const n=d(e[t]);r.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,s,i,a,u,n)}}else if(e.isDataArrayTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isData3DTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_3D,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isVideoTexture)e.update(),r.texImage2D(o,0,l,a,u,t.image);else{const e=d(t.image);r.texSubImage2D(o,0,0,0,s,i,a,u,e)}}generateMipmaps(e){const{gl:t,backend:r}=this,{textureGPU:s,glTextureType:i}=r.get(e);r.state.bindTexture(i,s),t.generateMipmap(i)}deallocateRenderBuffers(e){const{gl:t,backend:r}=this;if(e){const s=r.get(e);if(s.renderBufferStorageSetup=void 0,s.framebuffers){for(const e in s.framebuffers)t.deleteFramebuffer(s.framebuffers[e]);delete s.framebuffers}if(s.depthRenderbuffer&&(t.deleteRenderbuffer(s.depthRenderbuffer),delete s.depthRenderbuffer),s.stencilRenderbuffer&&(t.deleteRenderbuffer(s.stencilRenderbuffer),delete s.stencilRenderbuffer),s.msaaFrameBuffer&&(t.deleteFramebuffer(s.msaaFrameBuffer),delete s.msaaFrameBuffer),s.msaaRenderbuffers){for(let e=0;e<s.msaaRenderbuffers.length;e++)t.deleteRenderbuffer(s.msaaRenderbuffers[e]);delete s.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:r}=this,{textureGPU:s,renderTarget:i}=r.get(e);this.deallocateRenderBuffers(i),t.deleteTexture(s),r.delete(e)}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){const{gl:o,backend:a}=this,{state:u}=this.backend,{textureGPU:l,glTextureType:d,glType:c,glFormat:h}=a.get(t);let p,g,m,f,y,x,b,T,_;u.bindTexture(d,l);const v=e.isCompressedTexture?e.mipmaps[n]:e.image;if(null!==r)p=r.max.x-r.min.x,g=r.max.y-r.min.y,m=r.isBox3?r.max.z-r.min.z:1,f=r.min.x,y=r.min.y,x=r.isBox3?r.min.z:0;else{const t=Math.pow(2,-i);p=Math.floor(v.width*t),g=Math.floor(v.height*t),m=e.isDataArrayTexture?v.depth:e.isData3DTexture?Math.floor(v.depth*t):1,f=0,y=0,x=0}null!==s?(b=s.x,T=s.y,_=s.z):(b=0,T=0,_=0),o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,t.flipY),o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),o.pixelStorei(o.UNPACK_ALIGNMENT,t.unpackAlignment);const N=o.getParameter(o.UNPACK_ROW_LENGTH),S=o.getParameter(o.UNPACK_IMAGE_HEIGHT),R=o.getParameter(o.UNPACK_SKIP_PIXELS),A=o.getParameter(o.UNPACK_SKIP_ROWS),E=o.getParameter(o.UNPACK_SKIP_IMAGES);o.pixelStorei(o.UNPACK_ROW_LENGTH,v.width),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,v.height),o.pixelStorei(o.UNPACK_SKIP_PIXELS,f),o.pixelStorei(o.UNPACK_SKIP_ROWS,y),o.pixelStorei(o.UNPACK_SKIP_IMAGES,x);const C=t.isDataArrayTexture||t.isData3DTexture;if(e.isRenderTargetTexture||e.isDepthTexture){const r=a.get(e),s=a.get(t),i=a.get(r.renderTarget),n=a.get(s.renderTarget),l=i.framebuffers[r.cacheKey],d=n.framebuffers[s.cacheKey];u.bindFramebuffer(o.READ_FRAMEBUFFER,l),u.bindFramebuffer(o.DRAW_FRAMEBUFFER,d);let c=o.COLOR_BUFFER_BIT;e.isDepthTexture&&(c=o.DEPTH_BUFFER_BIT),o.blitFramebuffer(f,y,p,g,b,T,p,g,c,o.NEAREST),u.bindFramebuffer(o.READ_FRAMEBUFFER,null),u.bindFramebuffer(o.DRAW_FRAMEBUFFER,null)}else C?e.isDataTexture||e.isData3DTexture?o.texSubImage3D(d,n,b,T,_,p,g,m,h,c,v.data):t.isCompressedArrayTexture?o.compressedTexSubImage3D(d,n,b,T,_,p,g,m,h,v.data):o.texSubImage3D(d,n,b,T,_,p,g,m,h,c,v):e.isDataTexture?o.texSubImage2D(d,n,b,T,p,g,h,c,v.data):e.isCompressedTexture?o.compressedTexSubImage2D(d,n,b,T,v.width,v.height,h,v.data):o.texSubImage2D(d,n,b,T,p,g,h,c,v);o.pixelStorei(o.UNPACK_ROW_LENGTH,N),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,S),o.pixelStorei(o.UNPACK_SKIP_PIXELS,R),o.pixelStorei(o.UNPACK_SKIP_ROWS,A),o.pixelStorei(o.UNPACK_SKIP_IMAGES,E),0===n&&t.generateMipmaps&&o.generateMipmap(d),u.unbindTexture()}copyFramebufferToTexture(e,t,r){const{gl:s}=this,{state:i}=this.backend,{textureGPU:n}=this.backend.get(e),{x:o,y:a,z:u,w:l}=r,d=!0===e.isDepthTexture||t.renderTarget&&t.renderTarget.samples>0,c=t.renderTarget?t.renderTarget.height:this.backend.getDrawingBufferSize().y;if(d){const r=0!==o||0!==a;let d,h;if(!0===e.isDepthTexture?(d=s.DEPTH_BUFFER_BIT,h=s.DEPTH_ATTACHMENT,t.stencil&&(d|=s.STENCIL_BUFFER_BIT)):(d=s.COLOR_BUFFER_BIT,h=s.COLOR_ATTACHMENT0),r){const e=this.backend.get(t.renderTarget),r=e.framebuffers[t.getCacheKey()],h=e.msaaFrameBuffer;i.bindFramebuffer(s.DRAW_FRAMEBUFFER,r),i.bindFramebuffer(s.READ_FRAMEBUFFER,h);const p=c-a-l;s.blitFramebuffer(o,p,o+u,p+l,o,p,o+u,p+l,d,s.NEAREST),i.bindFramebuffer(s.READ_FRAMEBUFFER,r),i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,p,u,l),i.unbindTexture()}else{const e=s.createFramebuffer();i.bindFramebuffer(s.DRAW_FRAMEBUFFER,e),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,h,s.TEXTURE_2D,n,0),s.blitFramebuffer(0,0,u,l,0,0,u,l,d,s.NEAREST),s.deleteFramebuffer(e)}}else i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,c-l-a,u,l),i.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t,r,s=!1){const{gl:i}=this,n=t.renderTarget,{depthTexture:o,depthBuffer:a,stencilBuffer:u,width:l,height:d}=n;if(i.bindRenderbuffer(i.RENDERBUFFER,e),a&&!u){let t=i.DEPTH_COMPONENT24;if(!0===s){this.extensions.get("WEBGL_multisampled_render_to_texture").renderbufferStorageMultisampleEXT(i.RENDERBUFFER,n.samples,t,l,d)}else r>0?(o&&o.isDepthTexture&&o.type===i.FLOAT&&(t=i.DEPTH_COMPONENT32F),i.renderbufferStorageMultisample(i.RENDERBUFFER,r,t,l,d)):i.renderbufferStorage(i.RENDERBUFFER,t,l,d);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,e)}else a&&u&&(r>0?i.renderbufferStorageMultisample(i.RENDERBUFFER,r,i.DEPTH24_STENCIL8,l,d):i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,l,d),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,e))}async copyTextureToBuffer(e,t,r,s,i,n){const{backend:o,gl:a}=this,{textureGPU:u,glFormat:l,glType:d}=this.backend.get(e),c=a.createFramebuffer();a.bindFramebuffer(a.READ_FRAMEBUFFER,c);const h=e.isCubeTexture?a.TEXTURE_CUBE_MAP_POSITIVE_X+n:a.TEXTURE_2D;a.framebufferTexture2D(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,h,u,0);const p=this._getTypedArrayType(d),g=s*i*this._getBytesPerTexel(d,l),m=a.createBuffer();a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.bufferData(a.PIXEL_PACK_BUFFER,g,a.STREAM_READ),a.readPixels(t,r,s,i,l,d,0),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),await o.utils._clientWaitAsync();const f=new p(g/p.BYTES_PER_ELEMENT);return a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,f),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),a.deleteFramebuffer(c),f}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_5_5_1)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_6_5)return Uint16Array;if(e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:r}=this;let s=0;return e===r.UNSIGNED_BYTE&&(s=1),e!==r.UNSIGNED_SHORT_4_4_4_4&&e!==r.UNSIGNED_SHORT_5_5_5_1&&e!==r.UNSIGNED_SHORT_5_6_5&&e!==r.UNSIGNED_SHORT&&e!==r.HALF_FLOAT||(s=2),e!==r.UNSIGNED_INT&&e!==r.FLOAT||(s=4),t===r.RGBA?4*s:t===r.RGB?3*s:t===r.ALPHA?s:void 0}}class Dv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return void 0===t&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class Vv{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(null!==this.maxAnisotropy)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(!0===t.has("EXT_texture_filter_anisotropic")){const r=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const Ov={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class Gv{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:r,mode:s,object:i,type:n,info:o,index:a}=this;0!==a?r.drawElements(s,t,n,e):r.drawArrays(s,e,t),o.update(i,t,1)}renderInstances(e,t,r){const{gl:s,mode:i,type:n,index:o,object:a,info:u}=this;0!==r&&(0!==o?s.drawElementsInstanced(i,t,n,e,r):s.drawArraysInstanced(i,e,t,r),u.update(a,t,r))}renderMultiDraw(e,t,r){const{extensions:s,mode:i,object:n,info:o}=this;if(0===r)return;const a=s.get("WEBGL_multi_draw");if(null===a)for(let s=0;s<r;s++)this.render(e[s],t[s]);else{0!==this.index?a.multiDrawElementsWEBGL(i,t,0,this.type,e,0,r):a.multiDrawArraysWEBGL(i,e,0,t,0,r);let s=0;for(let e=0;e<r;e++)s+=t[e];o.update(n,s,1)}}renderMultiDrawInstances(e,t,r,s){const{extensions:i,mode:n,object:o,info:a}=this;if(0===r)return;const u=i.get("WEBGL_multi_draw");if(null===u)for(let i=0;i<r;i++)this.renderInstances(e[i],t[i],s[i]);else{0!==this.index?u.multiDrawElementsInstancedWEBGL(n,t,0,this.type,e,0,s,0,r):u.multiDrawArraysInstancedWEBGL(n,e,0,t,0,s,0,r);let i=0;for(let e=0;e<r;e++)i+=t[e]*s[e];a.update(o,i,1)}}}class kv{constructor(e=256){this.trackTimestamp=!0,this.maxQueries=e,this.currentQueryIndex=0,this.queryOffsets=new Map,this.isDisposed=!1,this.lastValue=0,this.pendingResolve=!1}allocateQueriesForContext(){}async resolveQueriesAsync(){}dispose(){}}class zv extends kv{constructor(e,t,r=2048){if(super(r),this.gl=e,this.type=t,this.ext=e.getExtension("EXT_disjoint_timer_query_webgl2")||e.getExtension("EXT_disjoint_timer_query"),!this.ext)return console.warn("EXT_disjoint_timer_query not supported; timestamps will be disabled."),void(this.trackTimestamp=!1);this.queries=[];for(let t=0;t<this.maxQueries;t++)this.queries.push(e.createQuery());this.activeQuery=null,this.queryStates=new Map}allocateQueriesForContext(e){if(!this.trackTimestamp)return null;if(this.currentQueryIndex+2>this.maxQueries)return nt(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryStates.set(t,"inactive"),this.queryOffsets.set(e.id,t),t}beginQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null==t)return;if(null!==this.activeQuery)return;const r=this.queries[t];if(r)try{"inactive"===this.queryStates.get(t)&&(this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,r),this.activeQuery=t,this.queryStates.set(t,"started"))}catch(e){console.error("Error in beginQuery:",e),this.activeQuery=null,this.queryStates.set(t,"inactive")}}endQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null!=t&&this.activeQuery===t)try{this.gl.endQuery(this.ext.TIME_ELAPSED_EXT),this.queryStates.set(t,"ended"),this.activeQuery=null}catch(e){console.error("Error in endQuery:",e),this.queryStates.set(t,"inactive"),this.activeQuery=null}}async resolveQueriesAsync(){if(!this.trackTimestamp||this.pendingResolve)return this.lastValue;this.pendingResolve=!0;try{const e=[];for(const[t,r]of this.queryStates)if("ended"===r){const r=this.queries[t];e.push(this.resolveQuery(r))}if(0===e.length)return this.lastValue;const t=(await Promise.all(e)).reduce(((e,t)=>e+t),0);return this.lastValue=t,this.currentQueryIndex=0,this.queryOffsets.clear(),this.queryStates.clear(),this.activeQuery=null,t}catch(e){return console.error("Error resolving queries:",e),this.lastValue}finally{this.pendingResolve=!1}}async resolveQuery(e){return new Promise((t=>{if(this.isDisposed)return void t(this.lastValue);let r,s=!1;const i=e=>{s||(s=!0,r&&(clearTimeout(r),r=null),t(e))},n=()=>{if(this.isDisposed)i(this.lastValue);else try{if(this.gl.getParameter(this.ext.GPU_DISJOINT_EXT))return void i(this.lastValue);if(!this.gl.getQueryParameter(e,this.gl.QUERY_RESULT_AVAILABLE))return void(r=setTimeout(n,1));const s=this.gl.getQueryParameter(e,this.gl.QUERY_RESULT);t(Number(s)/1e6)}catch(e){console.error("Error checking query:",e),t(this.lastValue)}};n()}))}dispose(){if(!this.isDisposed&&(this.isDisposed=!0,this.trackTimestamp)){for(const e of this.queries)this.gl.deleteQuery(e);this.queries=[],this.queryStates.clear(),this.queryOffsets.clear(),this.lastValue=0,this.activeQuery=null}}}class $v extends Sv{constructor(e={}){super(e),this.isWebGLBackend=!0,this.attributeUtils=null,this.extensions=null,this.capabilities=null,this.textureUtils=null,this.bufferRenderer=null,this.gl=null,this.state=null,this.utils=null,this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.disjoint=null,this.parallel=null,this.trackTimestamp=!0===e.trackTimestamp,this._currentContext=null,this._knownBindings=new WeakSet,this._supportsInvalidateFramebuffer="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),this._xrFramebuffer=null}init(e){super.init(e);const t=this.parameters,r={antialias:e.samples>0,alpha:!0,depth:e.depth,stencil:e.stencil},s=void 0!==t.context?t.context:e.domElement.getContext("webgl2",r);function i(t){t.preventDefault();const r={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(r)}this._onContextLost=i,e.domElement.addEventListener("webglcontextlost",i,!1),this.gl=s,this.extensions=new Dv(this),this.capabilities=new Vv(this),this.attributeUtils=new wv(this),this.textureUtils=new Lv(this),this.bufferRenderer=new Gv(this),this.state=new Mv(this),this.utils=new Bv(this),this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile")}get coordinateSystem(){return l}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}async makeXRCompatible(){!0!==this.gl.getContextAttributes().xrCompatible&&await this.gl.makeXRCompatible()}setXRTarget(e){this._xrFramebuffer=e}setXRRenderTargetTextures(e,t,r=null){const s=this.gl;if(this.set(e.texture,{textureGPU:t,glInternalFormat:s.RGBA8}),null!==r){const t=e.stencilBuffer?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24;this.set(e.depthTexture,{textureGPU:r,glInternalFormat:t}),e.autoAllocateDepthBuffer=!1,!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided")}}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t]||(this.timestampQueryPool[t]=new zv(this.gl,t,2048));const r=this.timestampQueryPool[t];null!==r.allocateQueriesForContext(e)&&r.beginQuery(e)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t].endQuery(e)}getContext(){return this.gl}beginRender(e){const{state:t,gl:r}=this,s=this.get(e);if(e.viewport?this.updateViewport(e):t.viewport(0,0,r.drawingBufferWidth,r.drawingBufferHeight),e.scissor){const{x:r,y:s,width:i,height:n}=e.scissorValue;t.scissor(r,e.height-n-s,i,n)}this.initTimestampQuery(e),s.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1);const i=e.occlusionQueryCount;i>0&&(s.currentOcclusionQueries=s.occlusionQueries,s.currentOcclusionQueryObjects=s.occlusionQueryObjects,s.lastOcclusionObject=null,s.occlusionQueries=new Array(i),s.occlusionQueryObjects=new Array(i),s.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:r}=this,s=this.get(e),i=s.previousContext;r.resetVertexState();const n=e.occlusionQueryCount;n>0&&(n>s.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const o=e.textures;if(null!==o)for(let e=0;e<o.length;e++){const t=o[e];t.generateMipmaps&&this.generateMipmaps(t)}if(this._currentContext=i,null!==e.textures&&e.renderTarget){const s=this.get(e.renderTarget),{samples:i}=e.renderTarget;if(i>0&&!1===this._useMultisampledRTT(e.renderTarget)){const i=s.framebuffers[e.getCacheKey()],n=t.COLOR_BUFFER_BIT,o=s.msaaFrameBuffer,a=e.textures;r.bindFramebuffer(t.READ_FRAMEBUFFER,o),r.bindFramebuffer(t.DRAW_FRAMEBUFFER,i);for(let r=0;r<a.length;r++)if(e.scissor){const{x:r,y:i,width:o,height:a}=e.scissorValue,u=e.height-a-i;t.blitFramebuffer(r,u,r+o,u+a,r,u,r+o,u+a,n,t.NEAREST),!0===this._supportsInvalidateFramebuffer&&t.invalidateSubFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray,r,u,o,a)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,n,t.NEAREST),!0===this._supportsInvalidateFramebuffer&&t.invalidateFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray)}}null!==i&&(this._setFramebuffer(i),i.viewport?this.updateViewport(i):r.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight)),this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet,{gl:i}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const n=()=>{let o=0;for(let t=0;t<r.length;t++){const n=r[t];null!==n&&(i.getQueryParameter(n,i.QUERY_RESULT_AVAILABLE)&&(0===i.getQueryParameter(n,i.QUERY_RESULT)&&e.add(s[t]),r[t]=null,i.deleteQuery(n),o++))}o<r.length?requestAnimationFrame(n):t.occluded=e};n()}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}updateViewport(e){const{state:t}=this,{x:r,y:s,width:i,height:n}=e.viewportValue;t.viewport(r,e.height-n-s,i,n)}setScissorTest(e){this.state.setScissorTest(e)}getClearColor(){const e=super.getClearColor();return e.r*=e.a,e.g*=e.a,e.b*=e.a,e}clear(e,t,r,s=null,i=!0){const{gl:n,renderer:o}=this;if(null===s){s={textures:null,clearColorValue:this.getClearColor()}}let a=0;if(e&&(a|=n.COLOR_BUFFER_BIT),t&&(a|=n.DEPTH_BUFFER_BIT),r&&(a|=n.STENCIL_BUFFER_BIT),0!==a){let u;u=s.clearColorValue?s.clearColorValue:this.getClearColor();const l=o.getClearDepth(),d=o.getClearStencil();if(t&&this.state.setDepthMask(!0),null===s.textures)n.clearColor(u.r,u.g,u.b,u.a),n.clear(a);else{if(i&&this._setFramebuffer(s),e)for(let e=0;e<s.textures.length;e++)0===e?n.clearBufferfv(n.COLOR,e,[u.r,u.g,u.b,u.a]):n.clearBufferfv(n.COLOR,e,[0,0,0,1]);t&&r?n.clearBufferfi(n.DEPTH_STENCIL,0,l,d):t?n.clearBufferfv(n.DEPTH,0,[l]):r&&n.clearBufferiv(n.STENCIL,0,[d])}}}beginCompute(e){const{state:t,gl:r}=this;t.bindFramebuffer(r.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,r,s){const{state:i,gl:n}=this;!1===this.discard&&(n.enable(n.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:o,transformBuffers:a,attributes:u}=this.get(s),l=this._getVaoKey(u),d=this.vaoCache[l];void 0===d?this._createVao(u):i.setVertexState(d),i.useProgram(o),this._bindUniforms(r);const c=this._getTransformFeedback(a);n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,c),n.beginTransformFeedback(n.POINTS),u[0].isStorageInstancedBufferAttribute?n.drawArraysInstanced(n.POINTS,0,1,t.count):n.drawArrays(n.POINTS,0,t.count),n.endTransformFeedback(),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,null);for(let e=0;e<a.length;e++){const t=a[e];t.pbo&&this.textureUtils.copyBufferToTexture(t.transformBuffer,t.pbo),t.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}draw(e){const{object:t,pipeline:r,material:s,context:i,hardwareClippingPlanes:n}=e,{programGPU:o}=this.get(r),{gl:a,state:u}=this,l=this.get(i),d=e.getDrawParameters();if(null===d)return;this._bindUniforms(e.getBindings());const c=t.isMesh&&t.matrixWorld.determinant()<0;u.setMaterial(s,c,n),u.useProgram(o);const h=this.get(e);let p=h.staticVao;if(void 0===p||h.geometryId!==e.geometry.id){const t=this._getVaoKey(e.getAttributes());if(p=this.vaoCache[t],void 0===p){let t;({vaoGPU:p,staticVao:t}=this._createVao(e.getAttributes())),t&&(h.staticVao=p,h.geometryId=e.geometry.id)}}const g=e.getIndex(),m=null!==g?this.get(g).bufferGPU:null;u.setVertexState(p,m);const f=l.lastOcclusionObject;if(f!==t&&void 0!==f){if(null!==f&&!0===f.occlusionTest&&(a.endQuery(a.ANY_SAMPLES_PASSED),l.occlusionQueryIndex++),!0===t.occlusionTest){const e=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,e),l.occlusionQueries[l.occlusionQueryIndex]=e,l.occlusionQueryObjects[l.occlusionQueryIndex]=t}l.lastOcclusionObject=t}const y=this.bufferRenderer;t.isPoints?y.mode=a.POINTS:t.isLineSegments?y.mode=a.LINES:t.isLine?y.mode=a.LINE_STRIP:t.isLineLoop?y.mode=a.LINE_LOOP:!0===s.wireframe?(u.setLineWidth(s.wireframeLinewidth*this.renderer.getPixelRatio()),y.mode=a.LINES):y.mode=a.TRIANGLES;const{vertexCount:x,instanceCount:b}=d;let{firstVertex:T}=d;if(y.object=t,null!==g){T*=g.array.BYTES_PER_ELEMENT;const e=this.get(g);y.index=g.count,y.type=e.type}else y.index=0;const _=()=>{t.isBatchedMesh?null!==t._multiDrawInstances?(nt("THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),y.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances)):this.hasFeature("WEBGL_multi_draw")?y.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):nt("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):b>1?y.renderInstances(T,x,b):y.render(T,x)};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){const r=this.get(e.camera),s=e.camera.cameras,i=e.getBindingGroup("cameraIndex").bindings[0];if(void 0===r.indexesGPU||r.indexesGPU.length!==s.length){const e=new Uint32Array([0,0,0,0]),t=[];for(let r=0,i=s.length;r<i;r++){const s=a.createBuffer();e[0]=r,a.bindBuffer(a.UNIFORM_BUFFER,s),a.bufferData(a.UNIFORM_BUFFER,e,a.STATIC_DRAW),t.push(s)}r.indexesGPU=t}const n=this.get(i),o=this.renderer.getPixelRatio();for(let i=0,l=s.length;i<l;i++){const l=s[i];if(t.layers.test(l.layers)){const t=l.viewport,s=t.x*o,d=t.y*o,c=t.width*o,h=t.height*o;u.viewport(Math.floor(s),Math.floor(e.context.height-h-d),Math.floor(c),Math.floor(h)),u.bindBufferBase(a.UNIFORM_BUFFER,n.index,r.indexesGPU[i]),_()}}}else _()}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new _v(e,t)}createProgram(e){const t=this.gl,{stage:r,code:s}=e,i="fragment"===r?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(i,s),t.compileShader(i),this.set(e,{shaderGPU:i})}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){const r=this.gl,s=e.pipeline,{fragmentProgram:i,vertexProgram:n}=s,o=r.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU;if(r.attachShader(o,a),r.attachShader(o,u),r.linkProgram(o),this.set(s,{programGPU:o,fragmentShader:a,vertexShader:u}),null!==t&&this.parallel){const i=new Promise((t=>{const i=this.parallel,n=()=>{r.getProgramParameter(o,i.COMPLETION_STATUS_KHR)?(this._completeCompile(e,s),t()):requestAnimationFrame(n)};n()}));t.push(i)}else this._completeCompile(e,s)}_handleSource(e,t){const r=e.split("\n"),s=[],i=Math.max(t-6,0),n=Math.min(t+6,r.length);for(let e=i;e<n;e++){const i=e+1;s.push(`${i===t?">":" "} ${i}: ${r[e]}`)}return s.join("\n")}_getShaderErrors(e,t,r){const s=e.getShaderParameter(t,e.COMPILE_STATUS),i=e.getShaderInfoLog(t).trim();if(s&&""===i)return"";const n=/ERROR: 0:(\d+)/.exec(i);if(n){const s=parseInt(n[1]);return r.toUpperCase()+"\n\n"+i+"\n\n"+this._handleSource(e.getShaderSource(t),s)}return i}_logProgramError(e,t,r){if(this.renderer.debug.checkShaderErrors){const s=this.gl,i=s.getProgramInfoLog(e).trim();if(!1===s.getProgramParameter(e,s.LINK_STATUS))if("function"==typeof this.renderer.debug.onShaderError)this.renderer.debug.onShaderError(s,e,r,t);else{const n=this._getShaderErrors(s,r,"vertex"),o=this._getShaderErrors(s,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(e,s.VALIDATE_STATUS)+"\n\nProgram Info Log: "+i+"\n"+n+"\n"+o)}else""!==i&&console.warn("THREE.WebGLProgram: Program Info Log:",i)}}_completeCompile(e,t){const{state:r,gl:s}=this,i=this.get(t),{programGPU:n,fragmentShader:o,vertexShader:a}=i;!1===s.getProgramParameter(n,s.LINK_STATUS)&&this._logProgramError(n,o,a),r.useProgram(n);const u=e.getBindings();this._setupBindings(u,n),this.set(t,{programGPU:n})}createComputePipeline(e,t){const{state:r,gl:s}=this,i={stage:"fragment",code:"#version 300 es\nprecision highp float;\nvoid main() {}"};this.createProgram(i);const{computeProgram:n}=e,o=s.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU,l=n.transforms,d=[],c=[];for(let e=0;e<l.length;e++){const t=l[e];d.push(t.varyingName),c.push(t.attributeNode)}s.attachShader(o,a),s.attachShader(o,u),s.transformFeedbackVaryings(o,d,s.SEPARATE_ATTRIBS),s.linkProgram(o),!1===s.getProgramParameter(o,s.LINK_STATUS)&&this._logProgramError(o,a,u),r.useProgram(o),this._setupBindings(t,o);const h=n.attributes,p=[],g=[];for(let e=0;e<h.length;e++){const t=h[e].node.attribute;p.push(t),this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER)}for(let e=0;e<c.length;e++){const t=c[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER);const r=this.get(t);g.push(r)}this.set(e,{programGPU:o,transformBuffers:g,attributes:p})}createBindings(e,t){if(!1===this._knownBindings.has(t)){this._knownBindings.add(t);let e=0,r=0;for(const s of t){this.set(s,{textures:r,uniformBuffers:e});for(const t of s.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&r++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,r=this.get(e);let s=r.uniformBuffers,i=r.textures;for(const r of e.bindings)if(r.isUniformsGroup||r.isUniformBuffer){const e=r.buffer,i=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),this.set(r,{index:s++,bufferGPU:i})}else if(r.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(r.texture);this.set(r,{index:i++,textureGPU:e,glTextureType:t})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const r=this.get(e).bufferGPU,s=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,s,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}hasFeature(e){const t=Object.keys(Ov).filter((t=>Ov[t]===e)),r=this.extensions;for(let e=0;e<t.length;e++)if(r.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){this.textureUtils.copyTextureToTexture(e,t,r,s,i,n)}copyFramebufferToTexture(e,t,r){this.textureUtils.copyFramebufferToTexture(e,t,r)}_setFramebuffer(e){const{gl:t,state:r}=this;let s=null;if(null!==e.textures){const i=e.renderTarget,n=this.get(i),{samples:o,depthBuffer:a,stencilBuffer:u}=i,l=!0===i.isWebGLCubeRenderTarget,d=!0===i.isRenderTarget3D,c=!0===i.isRenderTargetArray,h=!0===i.isXRRenderTarget,p=!0===h&&!0===i.hasExternalTextures;let g=n.msaaFrameBuffer,m=n.depthRenderbuffer;const f=this.extensions.get("WEBGL_multisampled_render_to_texture"),y=this._useMultisampledRTT(i),x=Qm(e);let b;if(l?(n.cubeFramebuffers||(n.cubeFramebuffers={}),b=n.cubeFramebuffers[x]):h&&!1===p?b=this._xrFramebuffer:(n.framebuffers||(n.framebuffers={}),b=n.framebuffers[x]),void 0===b){b=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,b);const s=e.textures;if(l){n.cubeFramebuffers[x]=b;const{textureGPU:e}=this.get(s[0]),r=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+r,e,0)}else{n.framebuffers[x]=b;for(let r=0;r<s.length;r++){const i=s[r],n=this.get(i);n.renderTarget=e.renderTarget,n.cacheKey=x;const a=t.COLOR_ATTACHMENT0+r;if(d||c){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,a,n.textureGPU,0,e)}else y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,a,t.TEXTURE_2D,n.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,a,t.TEXTURE_2D,n.textureGPU,0)}r.drawBuffers(e,b)}if(i.isXRRenderTarget&&!0===i.autoAllocateDepthBuffer){const r=t.createRenderbuffer();this.textureUtils.setupRenderBufferStorage(r,e,0,y),n.xrDepthRenderbuffer=r}else if(null!==e.depthTexture){const r=this.get(e.depthTexture),s=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;r.renderTarget=e.renderTarget,r.cacheKey=x,y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0)}}else if(h&&p){r.bindFramebuffer(t.FRAMEBUFFER,b);const s=this.get(e.textures[0]);y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0);const a=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(!0===i.autoAllocateDepthBuffer){const e=n.xrDepthRenderbuffer;t.bindRenderbuffer(t.RENDERBUFFER,e),t.framebufferRenderbuffer(t.FRAMEBUFFER,a,t.RENDERBUFFER,e)}else{const r=this.get(e.depthTexture);y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,a,t.TEXTURE_2D,r.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,a,t.TEXTURE_2D,r.textureGPU,0)}}if(o>0&&!1===y){if(void 0===g){const s=[];g=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,g);const i=[],l=e.textures;for(let r=0;r<l.length;r++){if(i[r]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,i[r]),s.push(t.COLOR_ATTACHMENT0+r),a){const e=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(e)}const n=e.textures[r],l=this.get(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,o,l.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r,t.RENDERBUFFER,i[r])}if(n.msaaFrameBuffer=g,n.msaaRenderbuffers=i,void 0===m){m=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(m,e,o),n.depthRenderbuffer=m;const r=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(r)}n.invalidationArray=s}s=n.msaaFrameBuffer}else s=b}r.bindFramebuffer(t.FRAMEBUFFER,s)}_getVaoKey(e){let t="";for(let r=0;r<e.length;r++){t+=":"+this.get(e[r]).id}return t}_createVao(e){const{gl:t}=this,r=t.createVertexArray();let s="",i=!0;t.bindVertexArray(r);for(let r=0;r<e.length;r++){const n=e[r],o=this.get(n);let a,u;s+=":"+o.id,t.bindBuffer(t.ARRAY_BUFFER,o.bufferGPU),t.enableVertexAttribArray(r),(n.isStorageBufferAttribute||n.isStorageInstancedBufferAttribute)&&(i=!1),!0===n.isInterleavedBufferAttribute?(a=n.data.stride*o.bytesPerElement,u=n.offset*o.bytesPerElement):(a=0,u=0),o.isInteger?t.vertexAttribIPointer(r,n.itemSize,o.type,a,u):t.vertexAttribPointer(r,n.itemSize,o.type,n.normalized,a,u),n.isInstancedBufferAttribute&&!n.isInterleavedBufferAttribute?t.vertexAttribDivisor(r,n.meshPerAttribute):n.isInterleavedBufferAttribute&&n.data.isInstancedInterleavedBuffer&&t.vertexAttribDivisor(r,n.data.meshPerAttribute)}return t.bindBuffer(t.ARRAY_BUFFER,null),this.vaoCache[s]=r,{vaoGPU:r,staticVao:i}}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let r=this.transformFeedbackCache[t];if(void 0!==r)return r;const{gl:s}=this;r=s.createTransformFeedback(),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,r);for(let t=0;t<e.length;t++){const r=e[t];s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,t,r.transformBuffer)}return s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=r,r}_setupBindings(e,t){const r=this.gl;for(const s of e)for(const e of s.bindings){const s=this.get(e).index;if(e.isUniformsGroup||e.isUniformBuffer){const i=r.getUniformBlockIndex(t,e.name);r.uniformBlockBinding(t,i,s)}else if(e.isSampledTexture){const i=r.getUniformLocation(t,e.name);r.uniform1i(i,s)}}}_bindUniforms(e){const{gl:t,state:r}=this;for(const s of e)for(const e of s.bindings){const s=this.get(e),i=s.index;e.isUniformsGroup||e.isUniformBuffer?r.bindBufferBase(t.UNIFORM_BUFFER,i,s.bufferGPU):e.isSampledTexture&&r.bindTexture(s.glTextureType,s.textureGPU,t.TEXTURE0+i)}}_useMultisampledRTT(e){return e.samples>0&&!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&!1!==e.autoAllocateDepthBuffer}dispose(){const e=this.extensions.get("WEBGL_lose_context");e&&e.loseContext(),this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}const Wv="point-list",Hv="line-list",jv="line-strip",qv="triangle-list",Xv="triangle-strip",Kv="never",Yv="less",Qv="equal",Zv="less-equal",Jv="greater",eN="not-equal",tN="greater-equal",rN="always",sN="store",iN="load",nN="clear",oN="ccw",aN="none",uN="front",lN="back",dN="uint16",cN="uint32",hN={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},pN="clamp-to-edge",gN="repeat",mN="mirror-repeat",fN="linear",yN="nearest",xN="zero",bN="one",TN="src",_N="one-minus-src",vN="src-alpha",NN="one-minus-src-alpha",SN="dst",RN="one-minus-dst",AN="dst-alpha",EN="one-minus-dst-alpha",CN="src-alpha-saturated",wN="constant",MN="one-minus-constant",BN="add",FN="subtract",UN="reverse-subtract",PN="min",IN="max",LN=0,DN=15,VN="keep",ON="zero",GN="replace",kN="invert",zN="increment-clamp",$N="decrement-clamp",WN="increment-wrap",HN="decrement-wrap",jN="storage",qN="read-only-storage",XN="write-only",KN="read-only",YN="read-write",QN="float",ZN="unfilterable-float",JN="depth",eS="sint",tS="uint",rS="2d",sS="3d",iS="2d",nS="2d-array",oS="cube",aS="3d",uS="all",lS="vertex",dS="instance",cS={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"};class hS extends iv{constructor(e,t){super(e),this.texture=t,this.version=t?t.version:0,this.isSampler=!0}}class pS extends hS{constructor(e,t,r){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r}update(){this.texture=this.textureNode.value}}class gS extends nv{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let mS=0;class fS extends gS{constructor(e,t){super("StorageBuffer_"+mS++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:Ps.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class yS extends Rm{constructor(e){super(),this.device=e;this.mipmapSampler=e.createSampler({minFilter:fN}),this.flipYSampler=e.createSampler({minFilter:yN}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:"\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n"}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n"}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n"})}getTransferPipeline(e){let t=this.transferPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:Xv,stripIndexFormat:cN},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:Xv,stripIndexFormat:cN},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,r=0){const s=t.format,{width:i,height:n}=t.size,o=this.getTransferPipeline(s),a=this.getFlipYPipeline(s),u=this.device.createTexture({size:{width:i,height:n,depthOrArrayLayers:1},format:s,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),l=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:iS,baseArrayLayer:r}),d=u.createView({baseMipLevel:0,mipLevelCount:1,dimension:iS,baseArrayLayer:0}),c=this.device.createCommandEncoder({}),h=(e,t,r)=>{const s=e.getBindGroupLayout(0),i=this.device.createBindGroup({layout:s,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),n=c.beginRenderPass({colorAttachments:[{view:r,loadOp:nN,storeOp:sN,clearValue:[0,0,0,0]}]});n.setPipeline(e),n.setBindGroup(0,i),n.draw(4,1,0,0),n.end()};h(o,l,d),h(a,d,l),this.device.queue.submit([c.finish()]),u.destroy()}generateMipmaps(e,t,r=0){const s=this.get(e);void 0===s.useCount&&(s.useCount=0,s.layers=[]);const i=s.layers[r]||this._mipmapCreateBundles(e,t,r),n=this.device.createCommandEncoder({});this._mipmapRunBundles(n,i),this.device.queue.submit([n.finish()]),0!==s.useCount&&(s.layers[r]=i),s.useCount++}_mipmapCreateBundles(e,t,r){const s=this.getTransferPipeline(t.format),i=s.getBindGroupLayout(0);let n=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:iS,baseArrayLayer:r});const o=[];for(let a=1;a<t.mipLevelCount;a++){const u=this.device.createBindGroup({layout:i,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:n}]}),l=e.createView({baseMipLevel:a,mipLevelCount:1,dimension:iS,baseArrayLayer:r}),d={colorAttachments:[{view:l,loadOp:nN,storeOp:sN,clearValue:[0,0,0,0]}]},c=this.device.createRenderBundleEncoder({colorFormats:[t.format]});c.setPipeline(s),c.setBindGroup(0,u),c.draw(4,1,0,0),o.push({renderBundles:[c.finish()],passDescriptor:d}),n=l}return o}_mipmapRunBundles(e,t){const r=t.length;for(let s=0;s<r;s++){const r=t[s],i=e.beginRenderPass(r.passDescriptor);i.executeBundles(r.renderBundles),i.end()}}}const xS={[wr]:"never",[Pe]:"less",[Ar]:"equal",[Er]:"less-equal",[Sr]:"greater",[Rr]:"greater-equal",[Cr]:"always",[Nr]:"not-equal"},bS=[0,1,3,2,4,5];class TS{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new P,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,r=t.device,s=t.get(e),i={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};i.magFilter===fN&&i.minFilter===fN&&i.mipmapFilter===fN&&(i.maxAnisotropy=e.anisotropy),e.isDepthTexture&&null!==e.compareFunction&&(i.compare=xS[e.compareFunction]),s.sampler=r.createSampler(i)}createDefaultTexture(e){let t;const r=_S(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(r):e.isVideoTexture?this.backend.get(e).externalTexture=this._getDefaultVideoFrame():t=this._getDefaultTextureGPU(r),this.backend.get(e).texture=t}createTexture(e,t={}){const r=this.backend,s=r.get(e);if(s.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:i,height:n,depth:o,levels:a}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const u=this._getDimension(e),l=e.internalFormat||t.format||_S(e,r.device);s.format=l;const{samples:d,primarySamples:c,isMSAA:h}=r.utils.getTextureSampleData(e);let p=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(p|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&!0!==e.isCompressedArrayTexture&&(p|=GPUTextureUsage.RENDER_ATTACHMENT);const g={label:e.name,size:{width:i,height:n,depthOrArrayLayers:o},mipLevelCount:a,sampleCount:c,dimension:u,format:l,usage:p};if(e.isVideoTexture){const t=e.source.data,r=new VideoFrame(t);g.size.width=r.displayWidth,g.size.height=r.displayHeight,r.close(),s.externalTexture=t}else{if(void 0===l)return console.warn("WebGPURenderer: Texture format not supported."),void this.createDefaultTexture(e);s.texture=r.device.createTexture(g)}if(h){const e=Object.assign({},g);e.label=e.label+"-msaa",e.sampleCount=d,s.msaaTexture=r.device.createTexture(e)}s.initialized=!0,s.textureDescriptorGPU=g}destroyTexture(e){const t=this.backend,r=t.get(e);void 0!==r.texture&&r.texture.destroy(),void 0!==r.msaaTexture&&r.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const r=e.image.depth||1;for(let e=0;e<r;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:r}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:r,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const r=this.backend,{width:s,height:i}=r.getDrawingBufferSize(),n=this.depthTexture,o=r.get(n).texture;let a,u;if(t?(a=Re,u=Ee):e&&(a=Ae,u=b),void 0!==o){if(n.image.width===s&&n.image.height===i&&n.format===a&&n.type===u)return o;this.destroyTexture(n)}return n.name="depthBuffer",n.format=a,n.type=u,n.image.width=s,n.image.height=i,this.createTexture(n,{width:s,height:i}),r.get(n).texture}updateTexture(e,t){const r=this.backend.get(e),{textureDescriptorGPU:s}=r;if(!e.isRenderTargetTexture&&void 0!==s){if(e.isDataTexture)this._copyBufferToTexture(t.image,r.texture,s,0,e.flipY);else if(e.isDataArrayTexture||e.isData3DTexture)for(let i=0;i<t.image.depth;i++)this._copyBufferToTexture(t.image,r.texture,s,i,e.flipY,i);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,r.texture,s);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,r.texture,s,e.flipY);else if(e.isVideoTexture){const t=e.source.data;r.externalTexture=t}else this._copyImageToTexture(t.image,r.texture,s,0,e.flipY);r.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,r,s,i,n){const o=this.backend.device,a=this.backend.get(e),u=a.texture,l=a.textureDescriptorGPU.format,d=this._getBytesPerTexel(l);let c=s*d;c=256*Math.ceil(c/256);const h=o.createBuffer({size:s*i*d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=o.createCommandEncoder();p.copyTextureToBuffer({texture:u,origin:{x:t,y:r,z:n}},{buffer:h,bytesPerRow:c},{width:s,height:i});const g=this._getTypedArrayType(l);o.queue.submit([p.finish()]),await h.mapAsync(GPUMapMode.READ);return new g(h.getMappedRange())}_isEnvironmentTexture(e){const t=e.mapping;return t===K||t===Y||t===S||t===R}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new he;r.minFilter=vr,r.magFilter=vr,this.createTexture(r,{width:1,height:1,format:e}),this.defaultTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new X;r.minFilter=vr,r.magFilter=vr,this.createTexture(r,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultVideoFrame(){let e=this.defaultVideoFrame;if(null===e){const t={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=e=new VideoFrame(new Uint8Array([0,0,0,255]),t)}return e}_copyCubeMapToTexture(e,t,r,s){for(let i=0;i<6;i++){const n=e[i],o=!0===s?bS[i]:i;n.isDataTexture?this._copyBufferToTexture(n.image,t,r,o,s):this._copyImageToTexture(n,t,r,o,s)}}_copyImageToTexture(e,t,r,s,i){this.backend.device.queue.copyExternalImageToTexture({source:e,flipY:i},{texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},{width:e.width,height:e.height,depthOrArrayLayers:1})}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new yS(this.backend.device)),e}_generateMipmaps(e,t,r=0){this._getPassUtils().generateMipmaps(e,t,r)}_flipY(e,t,r=0){this._getPassUtils().flipY(e,t,r)}_copyBufferToTexture(e,t,r,s,i,n=0){const o=this.backend.device,a=e.data,u=this._getBytesPerTexel(r.format),l=e.width*u;o.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},a,{offset:e.width*e.height*u*n,bytesPerRow:l},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===i&&this._flipY(t,r,s)}_copyCompressedBufferToTexture(e,t,r){const s=this.backend.device,i=this._getBlockData(r.format),n=r.size.depthOrArrayLayers>1;for(let o=0;o<e.length;o++){const a=e[o],u=a.width,l=a.height,d=n?r.size.depthOrArrayLayers:1,c=Math.ceil(u/i.width)*i.byteLength,h=c*Math.ceil(l/i.height);for(let e=0;e<d;e++)s.queue.writeTexture({texture:t,mipLevel:o,origin:{x:0,y:0,z:e}},a.data,{offset:e*h,bytesPerRow:c,rowsPerImage:Math.ceil(l/i.height)},{width:Math.ceil(u/i.width)*i.width,height:Math.ceil(l/i.height)*i.height,depthOrArrayLayers:1})}}_getBlockData(e){return e===hN.BC1RGBAUnorm||e===hN.BC1RGBAUnormSRGB?{byteLength:8,width:4,height:4}:e===hN.BC2RGBAUnorm||e===hN.BC2RGBAUnormSRGB||e===hN.BC3RGBAUnorm||e===hN.BC3RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===hN.BC4RUnorm||e===hN.BC4RSnorm?{byteLength:8,width:4,height:4}:e===hN.BC5RGUnorm||e===hN.BC5RGSnorm||e===hN.BC6HRGBUFloat||e===hN.BC6HRGBFloat||e===hN.BC7RGBAUnorm||e===hN.BC7RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===hN.ETC2RGB8Unorm||e===hN.ETC2RGB8UnormSRGB||e===hN.ETC2RGB8A1Unorm||e===hN.ETC2RGB8A1UnormSRGB?{byteLength:8,width:4,height:4}:e===hN.ETC2RGBA8Unorm||e===hN.ETC2RGBA8UnormSRGB?{byteLength:16,width:4,height:4}:e===hN.EACR11Unorm||e===hN.EACR11Snorm?{byteLength:8,width:4,height:4}:e===hN.EACRG11Unorm||e===hN.EACRG11Snorm||e===hN.ASTC4x4Unorm||e===hN.ASTC4x4UnormSRGB?{byteLength:16,width:4,height:4}:e===hN.ASTC5x4Unorm||e===hN.ASTC5x4UnormSRGB?{byteLength:16,width:5,height:4}:e===hN.ASTC5x5Unorm||e===hN.ASTC5x5UnormSRGB?{byteLength:16,width:5,height:5}:e===hN.ASTC6x5Unorm||e===hN.ASTC6x5UnormSRGB?{byteLength:16,width:6,height:5}:e===hN.ASTC6x6Unorm||e===hN.ASTC6x6UnormSRGB?{byteLength:16,width:6,height:6}:e===hN.ASTC8x5Unorm||e===hN.ASTC8x5UnormSRGB?{byteLength:16,width:8,height:5}:e===hN.ASTC8x6Unorm||e===hN.ASTC8x6UnormSRGB?{byteLength:16,width:8,height:6}:e===hN.ASTC8x8Unorm||e===hN.ASTC8x8UnormSRGB?{byteLength:16,width:8,height:8}:e===hN.ASTC10x5Unorm||e===hN.ASTC10x5UnormSRGB?{byteLength:16,width:10,height:5}:e===hN.ASTC10x6Unorm||e===hN.ASTC10x6UnormSRGB?{byteLength:16,width:10,height:6}:e===hN.ASTC10x8Unorm||e===hN.ASTC10x8UnormSRGB?{byteLength:16,width:10,height:8}:e===hN.ASTC10x10Unorm||e===hN.ASTC10x10UnormSRGB?{byteLength:16,width:10,height:10}:e===hN.ASTC12x10Unorm||e===hN.ASTC12x10UnormSRGB?{byteLength:16,width:12,height:10}:e===hN.ASTC12x12Unorm||e===hN.ASTC12x12UnormSRGB?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=pN;return e===Tr?t=gN:e===xr&&(t=mN),t}_convertFilterMode(e){let t=fN;return e!==vr&&e!==_r&&e!==Ge||(t=yN),t}_getBytesPerTexel(e){return e===hN.R8Unorm||e===hN.R8Snorm||e===hN.R8Uint||e===hN.R8Sint?1:e===hN.R16Uint||e===hN.R16Sint||e===hN.R16Float||e===hN.RG8Unorm||e===hN.RG8Snorm||e===hN.RG8Uint||e===hN.RG8Sint?2:e===hN.R32Uint||e===hN.R32Sint||e===hN.R32Float||e===hN.RG16Uint||e===hN.RG16Sint||e===hN.RG16Float||e===hN.RGBA8Unorm||e===hN.RGBA8UnormSRGB||e===hN.RGBA8Snorm||e===hN.RGBA8Uint||e===hN.RGBA8Sint||e===hN.BGRA8Unorm||e===hN.BGRA8UnormSRGB||e===hN.RGB9E5UFloat||e===hN.RGB10A2Unorm||e===hN.RG11B10UFloat||e===hN.Depth32Float||e===hN.Depth24Plus||e===hN.Depth24PlusStencil8||e===hN.Depth32FloatStencil8?4:e===hN.RG32Uint||e===hN.RG32Sint||e===hN.RG32Float||e===hN.RGBA16Uint||e===hN.RGBA16Sint||e===hN.RGBA16Float?8:e===hN.RGBA32Uint||e===hN.RGBA32Sint||e===hN.RGBA32Float?16:void 0}_getTypedArrayType(e){return e===hN.R8Uint?Uint8Array:e===hN.R8Sint?Int8Array:e===hN.R8Unorm?Uint8Array:e===hN.R8Snorm?Int8Array:e===hN.RG8Uint?Uint8Array:e===hN.RG8Sint?Int8Array:e===hN.RG8Unorm?Uint8Array:e===hN.RG8Snorm?Int8Array:e===hN.RGBA8Uint?Uint8Array:e===hN.RGBA8Sint?Int8Array:e===hN.RGBA8Unorm?Uint8Array:e===hN.RGBA8Snorm?Int8Array:e===hN.R16Uint?Uint16Array:e===hN.R16Sint?Int16Array:e===hN.RG16Uint?Uint16Array:e===hN.RG16Sint?Int16Array:e===hN.RGBA16Uint?Uint16Array:e===hN.RGBA16Sint?Int16Array:e===hN.R16Float||e===hN.RG16Float||e===hN.RGBA16Float?Uint16Array:e===hN.R32Uint?Uint32Array:e===hN.R32Sint?Int32Array:e===hN.R32Float?Float32Array:e===hN.RG32Uint?Uint32Array:e===hN.RG32Sint?Int32Array:e===hN.RG32Float?Float32Array:e===hN.RGBA32Uint?Uint32Array:e===hN.RGBA32Sint?Int32Array:e===hN.RGBA32Float?Float32Array:e===hN.BGRA8Unorm||e===hN.BGRA8UnormSRGB?Uint8Array:e===hN.RGB10A2Unorm||e===hN.RGB9E5UFloat||e===hN.RG11B10UFloat?Uint32Array:e===hN.Depth32Float?Float32Array:e===hN.Depth24Plus||e===hN.Depth24PlusStencil8?Uint32Array:e===hN.Depth32FloatStencil8?Float32Array:void 0}_getDimension(e){let t;return t=e.isData3DTexture?sS:rS,t}}function _S(e,t=null){const r=e.format,s=e.type,i=e.colorSpace;let n;if(!0===e.isCompressedTexture||!0===e.isCompressedArrayTexture)switch(r){case $t:n=i===k?hN.BC1RGBAUnormSRGB:hN.BC1RGBAUnorm;break;case Wt:n=i===k?hN.BC2RGBAUnormSRGB:hN.BC2RGBAUnorm;break;case Ht:n=i===k?hN.BC3RGBAUnormSRGB:hN.BC3RGBAUnorm;break;case Qt:n=i===k?hN.ETC2RGB8UnormSRGB:hN.ETC2RGB8Unorm;break;case Zt:n=i===k?hN.ETC2RGBA8UnormSRGB:hN.ETC2RGBA8Unorm;break;case Jt:n=i===k?hN.ASTC4x4UnormSRGB:hN.ASTC4x4Unorm;break;case er:n=i===k?hN.ASTC5x4UnormSRGB:hN.ASTC5x4Unorm;break;case tr:n=i===k?hN.ASTC5x5UnormSRGB:hN.ASTC5x5Unorm;break;case rr:n=i===k?hN.ASTC6x5UnormSRGB:hN.ASTC6x5Unorm;break;case sr:n=i===k?hN.ASTC6x6UnormSRGB:hN.ASTC6x6Unorm;break;case ir:n=i===k?hN.ASTC8x5UnormSRGB:hN.ASTC8x5Unorm;break;case nr:n=i===k?hN.ASTC8x6UnormSRGB:hN.ASTC8x6Unorm;break;case or:n=i===k?hN.ASTC8x8UnormSRGB:hN.ASTC8x8Unorm;break;case ar:n=i===k?hN.ASTC10x5UnormSRGB:hN.ASTC10x5Unorm;break;case ur:n=i===k?hN.ASTC10x6UnormSRGB:hN.ASTC10x6Unorm;break;case lr:n=i===k?hN.ASTC10x8UnormSRGB:hN.ASTC10x8Unorm;break;case dr:n=i===k?hN.ASTC10x10UnormSRGB:hN.ASTC10x10Unorm;break;case cr:n=i===k?hN.ASTC12x10UnormSRGB:hN.ASTC12x10Unorm;break;case hr:n=i===k?hN.ASTC12x12UnormSRGB:hN.ASTC12x12Unorm;break;case de:n=i===k?hN.RGBA8UnormSRGB:hN.RGBA8Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}else switch(r){case de:switch(s){case Je:n=hN.RGBA8Snorm;break;case Ze:n=hN.RGBA16Sint;break;case et:n=hN.RGBA16Uint;break;case b:n=hN.RGBA32Uint;break;case T:n=hN.RGBA32Sint;break;case Ce:n=i===k?hN.RGBA8UnormSRGB:hN.RGBA8Unorm;break;case ce:n=hN.RGBA16Float;break;case B:n=hN.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",s)}break;case st:if(s===Vt)n=hN.RGB9E5UFloat;else console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",s);break;case Qe:switch(s){case Je:n=hN.R8Snorm;break;case Ze:n=hN.R16Sint;break;case et:n=hN.R16Uint;break;case b:n=hN.R32Uint;break;case T:n=hN.R32Sint;break;case Ce:n=hN.R8Unorm;break;case ce:n=hN.R16Float;break;case B:n=hN.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",s)}break;case Le:switch(s){case Je:n=hN.RG8Snorm;break;case Ze:n=hN.RG16Sint;break;case et:n=hN.RG16Uint;break;case b:n=hN.RG32Uint;break;case T:n=hN.RG32Sint;break;case Ce:n=hN.RG8Unorm;break;case ce:n=hN.RG16Float;break;case B:n=hN.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",s)}break;case Ae:switch(s){case et:n=hN.Depth16Unorm;break;case b:n=hN.Depth24Plus;break;case B:n=hN.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",s)}break;case Re:switch(s){case Ee:n=hN.Depth24PlusStencil8;break;case B:t&&!1===t.features.has(cS.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),n=hN.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",s)}break;case Ye:switch(s){case T:n=hN.R32Sint;break;case b:n=hN.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",s)}break;case tt:switch(s){case T:n=hN.RG32Sint;break;case b:n=hN.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",s)}break;case it:switch(s){case T:n=hN.RGBA32Sint;break;case b:n=hN.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",s)}break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}return n}const vS=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,NS=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/gi,SS={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_depth_multisampled_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"};class RS extends N_{constructor(e){const{type:t,inputs:r,name:s,inputsCode:i,blockCode:n,outputType:o}=(e=>{const t=(e=e.trim()).match(vS);if(null!==t&&4===t.length){const r=t[2],s=[];let i=null;for(;null!==(i=NS.exec(r));)s.push({name:i[1],type:i[2]});const n=[];for(let e=0;e<s.length;e++){const{name:t,type:r}=s[e];let i=r;i.startsWith("ptr")?i="pointer":(i.startsWith("texture")&&(i=r.split("<")[0]),i=SS[i]),n.push(new c_(i,t))}const o=e.substring(t[0].length),a=t[3]||"void",u=void 0!==t[1]?t[1]:"";return{type:SS[a]||a,inputs:n,name:u,inputsCode:r,blockCode:o,outputType:a}}throw new Error("FunctionNode: Function is not a WGSL code.")})(e);super(t,r,s),this.inputsCode=i,this.blockCode=n,this.outputType=o}getCode(e=this.name){const t="void"!==this.outputType?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class AS extends v_{parseFunction(e){return new RS(e)}}const ES="undefined"!=typeof self?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},CS={[Ps.READ_ONLY]:"read",[Ps.WRITE_ONLY]:"write",[Ps.READ_WRITE]:"read_write"},wS={[Tr]:"repeat",[br]:"clamp",[xr]:"mirror"},MS={vertex:ES?ES.VERTEX:1,fragment:ES?ES.FRAGMENT:2,compute:ES?ES.COMPUTE:4},BS={instance:!0,swizzleAssign:!1,storageBuffer:!0},FS={"^^":"tsl_xor"},US={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},PS={},IS={tsl_xor:new ax("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new ax("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new ax("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new ax("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new ax("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new ax("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new ax("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new ax("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new ax("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new ax("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new ax("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new ax("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new ax("\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n")},LS={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};"undefined"!=typeof navigator&&/Windows/g.test(navigator.userAgent)&&(IS.pow_float=new ax("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),IS.pow_vec2=new ax("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[IS.pow_float]),IS.pow_vec3=new ax("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[IS.pow_float]),IS.pow_vec4=new ax("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[IS.pow_float]),LS.pow_float="tsl_pow_float",LS.pow_vec2="tsl_pow_vec2",LS.pow_vec3="tsl_pow_vec3",LS.pow_vec4="tsl_pow_vec4");let DS="";!0!==("undefined"!=typeof navigator&&/Firefox|Deno/g.test(navigator.userAgent))&&(DS+="diagnostic( off, derivative_uniformity );\n");class VS extends l_{constructor(e,t){super(e,t,new AS),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==x}_generateTextureSample(e,t,r,s,i=this.shaderStage){return"fragment"===i?s?`textureSample( ${t}, ${t}_sampler, ${r}, ${s} )`:`textureSample( ${t}, ${t}_sampler, ${r} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r):this.generateTextureLod(e,t,r,s,"0")}_generateVideoSample(e,t,r=this.shaderStage){if("fragment"===r)return`textureSampleBaseClampToEdge( ${e}, ${e}_sampler, vec2<f32>( ${t}.x, 1.0 - ${t}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${r} shader.`)}_generateTextureSampleLevel(e,t,r,s,i,n=this.shaderStage){return"fragment"!==n&&"compute"!==n||!1!==this.isUnfilterable(e)?this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r,s):this.generateTextureLod(e,t,r,i,s):`textureSampleLevel( ${t}, ${t}_sampler, ${r}, ${s} )`}generateWrapFunction(e){const t=`tsl_coord_${wS[e.wrapS]}S_${wS[e.wrapT]}_${e.isData3DTexture?"3d":"2d"}T`;let r=PS[t];if(void 0===r){const s=[],i=e.isData3DTexture?"vec3f":"vec2f";let n=`fn ${t}( coord : ${i} ) -> ${i} {\n\n\treturn ${i}(\n`;const o=(e,t)=>{e===Tr?(s.push(IS.repeatWrapping_float),n+=`\t\ttsl_repeatWrapping_float( coord.${t} )`):e===br?(s.push(IS.clampWrapping_float),n+=`\t\ttsl_clampWrapping_float( coord.${t} )`):e===xr?(s.push(IS.mirrorWrapping_float),n+=`\t\ttsl_mirrorWrapping_float( coord.${t} )`):(n+=`\t\tcoord.${t}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${e}" for vertex shader.`))};o(e.wrapS,"x"),n+=",\n",o(e.wrapT,"y"),e.isData3DTexture&&(n+=",\n",o(e.wrapR,"z")),n+="\n\t);\n\n}\n",PS[t]=r=new ax(n,s)}return r.build(this),t}generateArrayDeclaration(e,t){return`array< ${this.getType(e)}, ${t} >`}generateTextureDimension(e,t,r){const s=this.getDataFromNode(e,this.shaderStage,this.globalCache);void 0===s.dimensionsSnippet&&(s.dimensionsSnippet={});let i=s.dimensionsSnippet[r];if(void 0===s.dimensionsSnippet[r]){let n,o;const{primarySamples:a}=this.renderer.backend.utils.getTextureSampleData(e),u=a>1;o=e.isData3DTexture?"vec3<u32>":"vec2<u32>",n=u||e.isVideoTexture||e.isStorageTexture?t:`${t}${r?`, u32( ${r} )`:""}`,i=new ka(new Ru(`textureDimensions( ${n} )`,o)),s.dimensionsSnippet[r]=i,(e.isDataArrayTexture||e.isData3DTexture)&&(s.arrayLayerCount=new ka(new Ru(`textureNumLayers(${t})`,"u32"))),e.isTextureCube&&(s.cubeFaceCount=new ka(new Ru("6u","u32")))}return i.build(this)}generateFilteredTexture(e,t,r,s="0u"){this._include("biquadraticTexture");return`tsl_biquadraticTexture( ${t}, ${this.generateWrapFunction(e)}( ${r} ), ${this.generateTextureDimension(e,t,s)}, u32( ${s} ) )`}generateTextureLod(e,t,r,s,i="0u"){const n=this.generateWrapFunction(e),o=this.generateTextureDimension(e,t,i),a=e.isData3DTexture?"vec3":"vec2",u=`${a}<u32>(${n}(${r}) * ${a}<f32>(${o}))`;return this.generateTextureLoad(e,t,u,s,i)}generateTextureLoad(e,t,r,s,i="0u"){return!0===e.isVideoTexture||!0===e.isStorageTexture?`textureLoad( ${t}, ${r} )`:s?`textureLoad( ${t}, ${r}, ${s}, u32( ${i} ) )`:`textureLoad( ${t}, ${r}, u32( ${i} ) )`}generateTextureStore(e,t,r,s){return`textureStore( ${t}, ${r}, ${s} )`}isSampleCompare(e){return!0===e.isDepthTexture&&null!==e.compareFunction}isUnfilterable(e){return"float"!==this.getComponentTypeFromTexture(e)||!this.isAvailable("float32Filterable")&&!0===e.isDataTexture&&e.type===B||!1===this.isSampleCompare(e)&&e.minFilter===vr&&e.magFilter===vr||this.renderer.backend.utils.getTextureSampleData(e).primarySamples>1}generateTexture(e,t,r,s,i=this.shaderStage){let n=null;return n=!0===e.isVideoTexture?this._generateVideoSample(t,r,i):this.isUnfilterable(e)?this.generateTextureLod(e,t,r,s,"0",i):this._generateTextureSample(e,t,r,s,i),n}generateTextureGrad(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleGrad( ${t}, ${t}_sampler, ${r},  ${s[0]}, ${s[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${n} shader.`)}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleCompare( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}generateTextureLevel(e,t,r,s,i,n=this.shaderStage){let o=null;return o=!0===e.isVideoTexture?this._generateVideoSample(t,r,n):this._generateTextureSampleLevel(e,t,r,s,i,n),o}generateTextureBias(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleBias( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${n} shader.`)}getPropertyName(e,t=this.shaderStage){if(!0===e.isNodeVarying&&!0===e.needsInterpolation){if("vertex"===t)return`varyings.${e.name}`}else if(!0===e.isNodeUniform){const t=e.name,r=e.type;return"texture"===r||"cubeTexture"===r||"storageTexture"===r||"texture3D"===r?t:"buffer"===r||"storageBuffer"===r||"indirectStorageBuffer"===r?this.isCustomStruct(e)?t:t+".value":e.groupNode.name+"."+t}return super.getPropertyName(e)}getOutputStructName(){return"output"}getFunctionOperator(e){const t=FS[e];return void 0!==t?(this._include(t),t):null}getNodeAccess(e,t){return"compute"!==t?Ps.READ_ONLY:e.access}getStorageAccess(e,t){return CS[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);if(void 0===n.uniformGPU){let o;const a=e.groupNode,u=a.name,l=this.getBindGroupArray(u,r);if("texture"===t||"cubeTexture"===t||"storageTexture"===t||"texture3D"===t){let s=null;const n=this.getNodeAccess(e,r);if("texture"===t||"storageTexture"===t?s=new gv(i.name,i.node,a,n):"cubeTexture"===t?s=new mv(i.name,i.node,a,n):"texture3D"===t&&(s=new fv(i.name,i.node,a,n)),s.store=!0===e.isStorageTextureNode,s.setVisibility(MS[r]),"fragment"!==r&&"compute"!==r||!1!==this.isUnfilterable(e.value)||!1!==s.store)l.push(s),o=[s];else{const e=new pS(`${i.name}_sampler`,i.node,a);e.setVisibility(MS[r]),l.push(e,s),o=[e,s]}}else if("buffer"===t||"storageBuffer"===t||"indirectStorageBuffer"===t){const n=new("buffer"===t?uv:fS)(e,a);n.setVisibility(MS[r]),l.push(n),o=n,i.name=s||"NodeBuffer_"+i.id}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let s=e[u];void 0===s&&(s=new cv(u,a),s.setVisibility(MS[r]),e[u]=s,l.push(s)),o=this.getNodeUniform(i,t),s.addUniform(o)}n.uniformGPU=o}return i}getBuiltin(e,t,r,s=this.shaderStage){const i=this.builtins[s]||(this.builtins[s]=new Map);return!1===i.has(e)&&i.set(e,{name:e,property:t,type:r}),t}hasBuiltin(e,t=this.shaderStage){return void 0!==this.builtins[t]&&this.builtins[t].has(e)}getVertexIndex(){return"vertex"===this.shaderStage?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(e.name+" : "+this.getType(e.type));let i=`fn ${t.name}( ${s.join(", ")} ) -> ${this.getType(t.type)} {\n${r.vars}\n${r.code}\n`;return r.result&&(i+=`\treturn ${r.result};\n`),i+="\n}\n",i}getInstanceIndex(){return"vertex"===this.shaderStage?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],r=this.directives[e];if(void 0!==r)for(const e of r)t.push(`enable ${e};`);return t.join("\n")}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],r=this.builtins[e];if(void 0!==r)for(const{name:e,property:s,type:i}of r.values())t.push(`@builtin( ${e} ) ${s} : ${i}`);return t.join(",\n\t")}getScopedArray(e,t,r,s){return!1===this.scopedArrays.has(e)&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:r,bufferCount:s}),e}getScopedArrays(e){if("compute"!==e)return;const t=[];for(const{name:e,scope:r,bufferType:s,bufferCount:i}of this.scopedArrays.values()){const n=this.getType(s);t.push(`var<${r}> ${e}: array< ${n}, ${i} >;`)}return t.join("\n")}getAttributes(e){const t=[];if("compute"===e&&(this.getBuiltin("global_invocation_id","globalId","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),"vertex"===e||"compute"===e){const e=this.getBuiltins("attribute");e&&t.push(e);const r=this.getAttributesArray();for(let e=0,s=r.length;e<s;e++){const s=r[e],i=s.name,n=this.getType(s.type);t.push(`@location( ${e} ) ${i} : ${n}`)}}return t.join(",\n\t")}getStructMembers(e){const t=[];for(const r of e.members){const s=e.output?"@location( "+r.index+" ) ":"";let i=this.getType(r.type);r.atomic&&(i="atomic< "+i+" >"),t.push(`\t${s+r.name} : ${i}`)}return e.output&&t.push(`\t${this.getBuiltins("output")}`),t.join(",\n")}getStructs(e){let t="";const r=this.structs[e];if(r.length>0){const e=[];for(const t of r){let r=`struct ${t.name} {\n`;r+=this.getStructMembers(t),r+="\n};",e.push(r)}t="\n"+e.join("\n\n")+"\n"}return t}getVar(e,t,r=null){let s=`var ${t} : `;return s+=null!==r?this.generateArrayDeclaration(e,r):this.getType(e),s}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`\t${this.getVar(e.type,e.name,e.count)};`);return`\n${t.join("\n")}\n`}getVaryings(e){const t=[];if("vertex"===e&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),"vertex"===e||"fragment"===e){const r=this.varyings,s=this.vars[e];for(let i=0;i<r.length;i++){const n=r[i];if(n.needsInterpolation){let e=`@location( ${i} )`;/^(int|uint|ivec|uvec)/.test(n.type)&&(e+=" @interpolate( flat )"),t.push(`${e} ${n.name} : ${this.getType(n.type)}`)}else"vertex"===e&&!1===s.includes(n)&&s.push(n)}}const r=this.getBuiltins(e);r&&t.push(r);const s=t.join(",\n\t");return"vertex"===e?this._getWGSLStruct("VaryingsStruct","\t"+s):s}isCustomStruct(e){return e.value.isStorageBufferAttribute&&null!==e.node.structTypeNode}getUniforms(e){const t=this.uniforms[e],r=[],s=[],i=[],n={};for(const i of t){const t=i.groupNode.name,o=this.bindingsIndexes[t];if("texture"===i.type||"cubeTexture"===i.type||"storageTexture"===i.type||"texture3D"===i.type){const t=i.node.value;let s;"fragment"!==e&&"compute"!==e||!1!==this.isUnfilterable(t)||!0===i.node.isStorageTextureNode||(this.isSampleCompare(t)?r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler_comparison;`):r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler;`));let n="";const{primarySamples:a}=this.renderer.backend.utils.getTextureSampleData(t);if(a>1&&(n="_multisampled"),!0===t.isCubeTexture)s="texture_cube<f32>";else if(!0===t.isDataArrayTexture||!0===t.isCompressedArrayTexture)s="texture_2d_array<f32>";else if(!0===t.isDepthTexture)s=`texture_depth${n}_2d`;else if(!0===t.isVideoTexture)s="texture_external";else if(!0===t.isData3DTexture)s="texture_3d<f32>";else if(!0===i.node.isStorageTextureNode){s=`texture_storage_2d<${_S(t)}, ${this.getStorageAccess(i.node,e)}>`}else{s=`texture${n}_2d<${this.getComponentTypeFromTexture(t).charAt(0)}32>`}r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name} : ${s};`)}else if("buffer"===i.type||"storageBuffer"===i.type||"indirectStorageBuffer"===i.type){const t=i.node,r=this.getType(t.getNodeType(this)),n=t.bufferCount,a=n>0&&"buffer"===i.type?", "+n:"",u=t.isStorageBufferNode?`storage, ${this.getStorageAccess(t,e)}`:"uniform";if(this.isCustomStruct(i))s.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var<${u}> ${i.name} : ${r};`);else{const e=`\tvalue : array< ${t.isAtomic?`atomic<${r}>`:`${r}`}${a} >`;s.push(this._getWGSLStructBinding(i.name,e,u,o.binding++,o.group))}}else{const e=this.getType(this.getVectorType(i.type)),t=i.groupNode.name;(n[t]||(n[t]={index:o.binding++,id:o.group,snippets:[]})).snippets.push(`\t${i.name} : ${e}`)}}for(const e in n){const t=n[e];i.push(this._getWGSLStructBinding(e,t.snippets.join(",\n"),"uniform",t.index,t.id))}let o=r.join("\n");return o+=s.join("\n"),o+=i.join("\n"),o}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){this.shaderStage=t;const r=e[t];r.uniforms=this.getUniforms(t),r.attributes=this.getAttributes(t),r.varyings=this.getVaryings(t),r.structs=this.getStructs(t),r.vars=this.getVars(t),r.codes=this.getCodes(t),r.directives=this.getDirectives(t),r.scopedArrays=this.getScopedArrays(t);let s="// code\n\n";s+=this.flowCode[t];const i=this.flowNodes[t],n=i[i.length-1],o=n.outputNode,a=void 0!==o&&!0===o.isOutputStructNode;for(const e of i){const i=this.getFlowData(e),u=e.name;if(u&&(s.length>0&&(s+="\n"),s+=`\t// flow -> ${u}\n`),s+=`${i.code}\n\t`,e===n&&"compute"!==t)if(s+="// result\n\n\t","vertex"===t)s+=`varyings.Vertex = ${i.result};`;else if("fragment"===t)if(a)r.returnType=o.getNodeType(this),r.structs+="var<private> output : "+r.returnType+";",s+=`return ${i.result};`;else{let e="\t@location(0) color: vec4<f32>";const t=this.getBuiltins("output");t&&(e+=",\n\t"+t),r.returnType="OutputStruct",r.structs+=this._getWGSLStruct("OutputStruct",e),r.structs+="\nvar<private> output : OutputStruct;",s+=`output.color = ${i.result};\n\n\treturn output;`}}r.flow=s}this.shaderStage=null,null!==this.material?(this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment)):this.computeShader=this._getWGSLComputeCode(e.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(e,t=null){let r;return null!==t&&(r=this._getWGSLMethod(e+"_"+t)),void 0===r&&(r=this._getWGSLMethod(e)),r||e}getType(e){return US[e]||e}isAvailable(e){let t=BS[e];return void 0===t&&("float32Filterable"===e?t=this.renderer.hasFeature("float32-filterable"):"clipDistance"===e&&(t=this.renderer.hasFeature("clip-distances")),BS[e]=t),t}_getWGSLMethod(e){return void 0!==IS[e]&&this._include(e),LS[e]}_include(e){const t=IS[e];return t.build(this),null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${e.codes}\n\n@vertex\nfn main( ${e.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n\treturn varyings;\n\n}\n`}_getWGSLFragmentCode(e){return`${this.getSignature()}\n// global\n${DS}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@fragment\nfn main( ${e.varyings} ) -> ${e.returnType} {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLComputeCode(e,t){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${e.scopedArrays}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@compute @workgroup_size( ${t} )\nfn main( ${e.attributes} ) {\n\n\t// system\n\tinstanceIndex = globalId.x + globalId.y * numWorkgroups.x * u32(${t}) + globalId.z * numWorkgroups.x * numWorkgroups.y * u32(${t});\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLStruct(e,t){return`\nstruct ${e} {\n${t}\n};`}_getWGSLStructBinding(e,t,r,s=0,i=0){const n=e+"Struct";return`${this._getWGSLStruct(n,t)}\n@binding( ${s} ) @group( ${i} )\nvar<${r}> ${e} : ${n};`}}class OS{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return null!==e.depthTexture?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=hN.Depth24PlusStencil8:e.depth&&(t=hN.Depth24Plus),t}getTextureFormatGPU(e){return this.backend.get(e).format}getTextureSampleData(e){let t;if(e.isFramebufferTexture)t=1;else if(e.isDepthTexture&&!e.renderTarget){const e=this.backend.renderer,r=e.getRenderTarget();t=r?r.samples:e.samples}else e.renderTarget&&(t=e.renderTarget.samples);t=t||1;const r=t>1&&null!==e.renderTarget&&!0!==e.isDepthTexture&&!0!==e.isFramebufferTexture;return{samples:t,primarySamples:r?1:t,isMSAA:r}}getCurrentColorFormat(e){let t;return t=null!==e.textures?this.getTextureFormatGPU(e.textures[0]):this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return null!==e.textures?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){return e.isPoints?Wv:e.isLineSegments||e.isMesh&&!0===t.wireframe?Hv:e.isLine?jv:e.isMesh?qv:void 0}getSampleCount(e){let t=1;return e>1&&(t=Math.pow(2,Math.floor(Math.log2(e))),2===t&&(t=4)),t}getSampleCountRenderContext(e){return null!==e.textures?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){const e=this.backend.parameters.outputType;if(void 0===e)return navigator.gpu.getPreferredCanvasFormat();if(e===Ce)return hN.BGRA8Unorm;if(e===ce)return hN.RGBA16Float;throw new Error("Unsupported outputType")}}const GS=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),kS=new Map([[ke,["float16"]]]),zS=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class $S{constructor(e){this.backend=e}createAttribute(e,t){const r=this._getBufferAttribute(e),s=this.backend,i=s.get(r);let n=i.buffer;if(void 0===n){const o=s.device;let a=r.array;if(!1===e.normalized)if(a.constructor===Int16Array)a=new Int32Array(a);else if(a.constructor===Uint16Array&&(a=new Uint32Array(a),t&GPUBufferUsage.INDEX))for(let e=0;e<a.length;e++)65535===a[e]&&(a[e]=4294967295);if(r.array=a,(r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute)&&3===r.itemSize){a=new a.constructor(4*r.count);for(let e=0;e<r.count;e++)a.set(r.array.subarray(3*e,3*e+3),4*e);r.itemSize=4,r.array=a,i._force3to4BytesAlignment=!0}const u=a.byteLength+(4-a.byteLength%4)%4;n=o.createBuffer({label:r.name,size:u,usage:t,mappedAtCreation:!0}),new a.constructor(n.getMappedRange()).set(a),n.unmap(),i.buffer=n}}updateAttribute(e){const t=this._getBufferAttribute(e),r=this.backend,s=r.device,i=r.get(t),n=r.get(t).buffer;let o=t.array;if(!0===i._force3to4BytesAlignment){o=new o.constructor(4*t.count);for(let e=0;e<t.count;e++)o.set(t.array.subarray(3*e,3*e+3),4*e);t.array=o}const a=this._isTypedArray(o),u=t.updateRanges;if(0===u.length)s.queue.writeBuffer(n,0,o,0);else{const e=a?1:o.BYTES_PER_ELEMENT;for(let t=0,r=u.length;t<r;t++){const r=u[t];let l,d;if(!0===i._force3to4BytesAlignment){l=4*Math.floor(r.start/3)*e,d=4*Math.ceil(r.count/3)*e}else l=r.start*e,d=r.count*e;const c=l*(a?o.BYTES_PER_ELEMENT:1);s.queue.writeBuffer(n,c,o,l,d)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),r=new Map;for(let e=0;e<t.length;e++){const s=t[e],i=s.array.BYTES_PER_ELEMENT,n=this._getBufferAttribute(s);let o=r.get(n);if(void 0===o){let e,t;!0===s.isInterleavedBufferAttribute?(e=s.data.stride*i,t=s.data.isInstancedInterleavedBuffer?dS:lS):(e=s.itemSize*i,t=s.isInstancedBufferAttribute?dS:lS),!1!==s.normalized||s.array.constructor!==Int16Array&&s.array.constructor!==Uint16Array||(e=4),o={arrayStride:e,attributes:[],stepMode:t},r.set(n,o)}const a=this._getVertexFormat(s),u=!0===s.isInterleavedBufferAttribute?s.offset*i:0;o.attributes.push({shaderLocation:e,offset:u,format:a})}return Array.from(r.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,r=t.device,s=t.get(this._getBufferAttribute(e)).buffer,i=s.size,n=r.createBuffer({label:`${e.name}_readback`,size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),o=r.createCommandEncoder({label:`readback_encoder_${e.name}`});o.copyBufferToBuffer(s,0,n,0,i);const a=o.finish();r.queue.submit([a]),await n.mapAsync(GPUMapMode.READ);const u=n.getMappedRange(),l=new e.array.constructor(u.slice(0));return n.unmap(),l.buffer}_getVertexFormat(e){const{itemSize:t,normalized:r}=e,s=e.array.constructor,i=e.constructor;let n;if(1===t)n=zS.get(s);else{const e=(kS.get(i)||GS.get(s))[r?1:0];if(e){const r=s.BYTES_PER_ELEMENT*t,i=4*Math.floor((r+3)/4)/s.BYTES_PER_ELEMENT;if(i%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");n=`${e}x${i}`}}return n||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),n}_isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class WS{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,r=t.device,s=[];let i=0;for(const r of e.bindings){const e={binding:i++,visibility:r.visibility};if(r.isUniformBuffer||r.isStorageBuffer){const t={};r.isStorageBuffer&&(4&r.visibility&&(r.access===Ps.READ_WRITE||r.access===Ps.WRITE_ONLY)?t.type=jN:t.type=qN),e.buffer=t}else if(r.isSampler){const t={};r.texture.isDepthTexture&&null!==r.texture.compareFunction&&(t.type="comparison"),e.sampler=t}else if(r.isSampledTexture&&r.texture.isVideoTexture)e.externalTexture={};else if(r.isSampledTexture&&r.store){const t={};t.format=this.backend.get(r.texture).texture.format;const s=r.access;t.access=s===Ps.READ_WRITE?YN:s===Ps.WRITE_ONLY?XN:KN,e.storageTexture=t}else if(r.isSampledTexture){const s={},{primarySamples:i}=t.utils.getTextureSampleData(r.texture);if(i>1&&(s.multisampled=!0,r.texture.isDepthTexture||(s.sampleType=ZN)),r.texture.isDepthTexture)s.sampleType=JN;else if(r.texture.isDataTexture||r.texture.isDataArrayTexture||r.texture.isData3DTexture){const e=r.texture.type;e===T?s.sampleType=eS:e===b?s.sampleType=tS:e===B&&(this.backend.hasFeature("float32-filterable")?s.sampleType=QN:s.sampleType=ZN)}r.isSampledCubeTexture?s.viewDimension=oS:r.texture.isDataArrayTexture||r.texture.isCompressedArrayTexture?s.viewDimension=nS:r.isSampledTexture3D&&(s.viewDimension=aS),e.texture=s}else console.error(`WebGPUBindingUtils: Unsupported binding "${r}".`);s.push(e)}return r.createBindGroupLayout({entries:s})}createBindings(e,t,r,s=0){const{backend:i,bindGroupLayoutCache:n}=this,o=i.get(e);let a,u=n.get(e.bindingsReference);void 0===u&&(u=this.createBindingsLayout(e),n.set(e.bindingsReference,u)),r>0&&(void 0===o.groups&&(o.groups=[],o.versions=[]),o.versions[r]===s&&(a=o.groups[r])),void 0===a&&(a=this.createBindGroup(e,u),r>0&&(o.groups[r]=a,o.versions[r]=s)),o.group=a,o.layout=u}updateBinding(e){const t=this.backend,r=t.device,s=e.buffer,i=t.get(e).buffer;r.queue.writeBuffer(i,0,s,0)}createBindGroupIndex(e,t){const r=this.backend.device,s=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,i=e[0],n=r.createBuffer({label:"bindingCameraIndex_"+i,size:16,usage:s});r.queue.writeBuffer(n,0,e,0);const o=[{binding:0,resource:{buffer:n}}];return r.createBindGroup({label:"bindGroupCameraIndex_"+i,layout:t,entries:o})}createBindGroup(e,t){const r=this.backend,s=r.device;let i=0;const n=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=r.get(t);if(void 0===e.buffer){const r=t.byteLength,i=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,n=s.createBuffer({label:"bindingBuffer_"+t.name,size:r,usage:i});e.buffer=n}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=r.get(t);if(void 0===e.buffer){const s=t.attribute;e.buffer=r.get(s).buffer}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isSampler){const e=r.get(t.texture);n.push({binding:i,resource:e.sampler})}else if(t.isSampledTexture){const e=r.get(t.texture);let o;if(void 0!==e.externalTexture)o=s.importExternalTexture({source:e.externalTexture});else{const r=t.store?1:e.texture.mipLevelCount,s=`view-${e.texture.width}-${e.texture.height}-${r}`;if(o=e[s],void 0===o){const i=uS;let n;n=t.isSampledCubeTexture?oS:t.isSampledTexture3D?aS:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?nS:iS,o=e[s]=e.texture.createView({aspect:i,dimension:n,mipLevelCount:r})}}n.push({binding:i,resource:o})}i++}return s.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:n})}}class HS{constructor(e){this.backend=e}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:r,material:s,geometry:i,pipeline:n}=e,{vertexProgram:o,fragmentProgram:a}=n,u=this.backend,l=u.device,d=u.utils,c=u.get(n),h=[];for(const t of e.getBindings()){const e=u.get(t);h.push(e.layout)}const p=u.attributeUtils.createShaderVertexBuffers(e);let g;!0===s.transparent&&s.blending!==O&&(g=this._getBlending(s));let m={};!0===s.stencilWrite&&(m={compare:this._getStencilCompare(s),failOp:this._getStencilOperation(s.stencilFail),depthFailOp:this._getStencilOperation(s.stencilZFail),passOp:this._getStencilOperation(s.stencilZPass)});const f=this._getColorWriteMask(s),y=[];if(null!==e.context.textures){const t=e.context.textures;for(let e=0;e<t.length;e++){const r=d.getTextureFormatGPU(t[e]);y.push({format:r,blend:g,writeMask:f})}}else{const t=d.getCurrentColorFormat(e.context);y.push({format:t,blend:g,writeMask:f})}const x=u.get(o).module,b=u.get(a).module,T=this._getPrimitiveState(r,i,s),_=this._getDepthCompare(s),v=d.getCurrentDepthStencilFormat(e.context),N=this._getSampleCount(e.context),S={label:`renderPipeline_${s.name||s.type}_${s.id}`,vertex:Object.assign({},x,{buffers:p}),fragment:Object.assign({},b,{targets:y}),primitive:T,multisample:{count:N,alphaToCoverageEnabled:s.alphaToCoverage&&N>1},layout:l.createPipelineLayout({bindGroupLayouts:h})},R={},A=e.context.depth,E=e.context.stencil;if(!0!==A&&!0!==E||(!0===A&&(R.format=v,R.depthWriteEnabled=s.depthWrite,R.depthCompare=_),!0===E&&(R.stencilFront=m,R.stencilBack={},R.stencilReadMask=s.stencilFuncMask,R.stencilWriteMask=s.stencilWriteMask),!0===s.polygonOffset&&(R.depthBias=s.polygonOffsetUnits,R.depthBiasSlopeScale=s.polygonOffsetFactor,R.depthBiasClamp=0),S.depthStencil=R),null===t)c.pipeline=l.createRenderPipeline(S);else{const e=new Promise((e=>{l.createRenderPipelineAsync(S).then((t=>{c.pipeline=t,e()}))}));t.push(e)}}createBundleEncoder(e){const t=this.backend,{utils:r,device:s}=t,i=r.getCurrentDepthStencilFormat(e),n={label:"renderBundleEncoder",colorFormats:[r.getCurrentColorFormat(e)],depthStencilFormat:i,sampleCount:this._getSampleCount(e)};return s.createRenderBundleEncoder(n)}createComputePipeline(e,t){const r=this.backend,s=r.device,i=r.get(e.computeProgram).module,n=r.get(e),o=[];for(const e of t){const t=r.get(e);o.push(t.layout)}n.pipeline=s.createComputePipeline({compute:i,layout:s.createPipelineLayout({bindGroupLayouts:o})})}_getBlending(e){let t,r;const s=e.blending,i=e.blendSrc,n=e.blendDst,o=e.blendEquation;if(s===St){const s=null!==e.blendSrcAlpha?e.blendSrcAlpha:i,a=null!==e.blendDstAlpha?e.blendDstAlpha:n,u=null!==e.blendEquationAlpha?e.blendEquationAlpha:o;t={srcFactor:this._getBlendFactor(i),dstFactor:this._getBlendFactor(n),operation:this._getBlendOperation(o)},r={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(a),operation:this._getBlendOperation(u)}}else{const i=(e,s,i,n)=>{t={srcFactor:e,dstFactor:s,operation:BN},r={srcFactor:i,dstFactor:n,operation:BN}};if(e.premultipliedAlpha)switch(s){case L:i(bN,NN,bN,NN);break;case Et:i(bN,bN,bN,bN);break;case At:i(xN,_N,xN,bN);break;case Rt:i(xN,TN,xN,vN)}else switch(s){case L:i(vN,NN,bN,NN);break;case Et:i(vN,bN,vN,bN);break;case At:i(xN,_N,xN,bN);break;case Rt:i(xN,TN,xN,TN)}}if(void 0!==t&&void 0!==r)return{color:t,alpha:r};console.error("THREE.WebGPURenderer: Invalid blending: ",s)}_getBlendFactor(e){let t;switch(e){case Tt:t=xN;break;case bt:t=bN;break;case xt:t=TN;break;case pt:t=_N;break;case yt:t=vN;break;case ht:t=NN;break;case mt:t=SN;break;case ct:t=RN;break;case gt:t=AN;break;case dt:t=EN;break;case ft:t=CN;break;case 211:t=wN;break;case 212:t=MN;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const r=e.stencilFunc;switch(r){case Dr:t=Kv;break;case Lr:t=rN;break;case Ir:t=Yv;break;case Pr:t=Zv;break;case Ur:t=Qv;break;case Fr:t=tN;break;case Br:t=Jv;break;case Mr:t=eN;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",r)}return t}_getStencilOperation(e){let t;switch(e){case Hr:t=VN;break;case Wr:t=ON;break;case $r:t=GN;break;case zr:t=kN;break;case kr:t=zN;break;case Gr:t=$N;break;case Or:t=WN;break;case Vr:t=HN;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case lt:t=BN;break;case ut:t=FN;break;case at:t=UN;break;case qr:t=PN;break;case jr:t=IN;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,r){const s={},i=this.backend.utils;switch(s.topology=i.getPrimitiveTopology(e,r),null!==t.index&&!0===e.isLine&&!0!==e.isLineSegments&&(s.stripIndexFormat=t.index.array instanceof Uint16Array?dN:cN),r.side){case Xe:s.frontFace=oN,s.cullMode=lN;break;case v:s.frontFace=oN,s.cullMode=uN;break;case Ne:s.frontFace=oN,s.cullMode=aN;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",r.side)}return s}_getColorWriteMask(e){return!0===e.colorWrite?DN:LN}_getDepthCompare(e){let t;if(!1===e.depthTest)t=rN;else{const r=e.depthFunc;switch(r){case It:t=Kv;break;case Pt:t=rN;break;case Ut:t=Yv;break;case Ft:t=Zv;break;case Bt:t=Qv;break;case Mt:t=tN;break;case wt:t=Jv;break;case Ct:t=eN;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",r)}}return t}}class jS extends kv{constructor(e,t,r=2048){super(r),this.device=e,this.type=t,this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxQueries,label:`queryset_global_timestamp_${t}`});const s=8*this.maxQueries;this.resolveBuffer=this.device.createBuffer({label:`buffer_timestamp_resolve_${t}`,size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.resultBuffer=this.device.createBuffer({label:`buffer_timestamp_result_${t}`,size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})}allocateQueriesForContext(e){if(!this.trackTimestamp||this.isDisposed)return null;if(this.currentQueryIndex+2>this.maxQueries)return nt(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryOffsets.set(e.id,t),t}async resolveQueriesAsync(){if(!this.trackTimestamp||0===this.currentQueryIndex||this.isDisposed)return this.lastValue;if(this.pendingResolve)return this.pendingResolve;this.pendingResolve=this._resolveQueries();try{return await this.pendingResolve}finally{this.pendingResolve=null}}async _resolveQueries(){if(this.isDisposed)return this.lastValue;try{if("unmapped"!==this.resultBuffer.mapState)return this.lastValue;const e=new Map(this.queryOffsets),t=this.currentQueryIndex,r=8*t;this.currentQueryIndex=0,this.queryOffsets.clear();const s=this.device.createCommandEncoder();s.resolveQuerySet(this.querySet,0,t,this.resolveBuffer,0),s.copyBufferToBuffer(this.resolveBuffer,0,this.resultBuffer,0,r);const i=s.finish();if(this.device.queue.submit([i]),"unmapped"!==this.resultBuffer.mapState)return this.lastValue;if(await this.resultBuffer.mapAsync(GPUMapMode.READ,0,r),this.isDisposed)return"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue;const n=new BigUint64Array(this.resultBuffer.getMappedRange(0,r));let o=0;for(const[,t]of e){const e=n[t],r=n[t+1];o+=Number(r-e)/1e6}return this.resultBuffer.unmap(),this.lastValue=o,o}catch(e){return console.error("Error resolving queries:",e),"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue}}async dispose(){if(!this.isDisposed){if(this.isDisposed=!0,this.pendingResolve)try{await this.pendingResolve}catch(e){console.error("Error waiting for pending resolve:",e)}if(this.resultBuffer&&"mapped"===this.resultBuffer.mapState)try{this.resultBuffer.unmap()}catch(e){console.error("Error unmapping buffer:",e)}this.querySet&&(this.querySet.destroy(),this.querySet=null),this.resolveBuffer&&(this.resolveBuffer.destroy(),this.resolveBuffer=null),this.resultBuffer&&(this.resultBuffer.destroy(),this.resultBuffer=null),this.queryOffsets.clear(),this.pendingResolve=null}}}class qS extends Sv{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=void 0===e.alpha||e.alpha,this.parameters.requiredLimits=void 0===e.requiredLimits?{}:e.requiredLimits,this.trackTimestamp=!0===e.trackTimestamp,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new OS(this),this.attributeUtils=new $S(this),this.bindingUtils=new WS(this),this.pipelineUtils=new HS(this),this.textureUtils=new TS(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let r;if(void 0===t.device){const e={powerPreference:t.powerPreference},s="undefined"!=typeof navigator?await navigator.gpu.requestAdapter(e):null;if(null===s)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const i=Object.values(cS),n=[];for(const e of i)s.features.has(e)&&n.push(e);const o={requiredFeatures:n,requiredLimits:t.requiredLimits};r=await s.requestDevice(o)}else r=t.device;r.lost.then((t=>{const r={api:"WebGPU",message:t.message||"Unknown reason",reason:t.reason||null,originalEvent:t};e.onDeviceLost(r)}));const s=void 0!==t.context?t.context:e.domElement.getContext("webgpu");this.device=r,this.context=s;const i=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(cS.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:i}),this.updateSize()}get coordinateSystem(){return d}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(null===e){const t=this.renderer;e={colorAttachments:[{view:null}]},!0!==this.renderer.depth&&!0!==this.renderer.stencil||(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(t.depth,t.stencil).createView()});const r=e.colorAttachments[0];this.renderer.samples>0?r.view=this.colorBuffer.createView():r.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_getRenderPassDescriptor(e,t={}){const r=e.renderTarget,s=this.get(r);let i=s.descriptors;if(void 0===i||s.width!==r.width||s.height!==r.height||s.dimensions!==r.dimensions||s.activeMipmapLevel!==e.activeMipmapLevel||s.activeCubeFace!==e.activeCubeFace||s.samples!==r.samples){i={},s.descriptors=i;const e=()=>{r.removeEventListener("dispose",e),this.delete(r)};!1===r.hasEventListener("dispose",e)&&r.addEventListener("dispose",e)}const n=e.getCacheKey();let o=i[n];if(void 0===o){const t=e.textures,a=[];let u;for(let s=0;s<t.length;s++){const i=this.get(t[s]),n={label:`colorAttachment_${s}`,baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,arrayLayerCount:1,dimension:iS};r.isRenderTarget3D?(u=e.activeCubeFace,n.baseArrayLayer=0,n.dimension=aS,n.depthOrArrayLayers=t[s].image.depth):r.isRenderTargetArray&&(n.dimension=nS,n.depthOrArrayLayers=t[s].image.depth);const o=i.texture.createView(n);let l,d;void 0!==i.msaaTexture?(l=i.msaaTexture.createView(),d=o):(l=o,d=void 0),a.push({view:l,resolveTarget:d,depthSlice:u})}if(o={textureViews:a},e.depth){const t=this.get(e.depthTexture);o.depthStencilView=t.texture.createView()}i[n]=o,s.width=r.width,s.height=r.height,s.samples=r.samples,s.activeMipmapLevel=e.activeMipmapLevel,s.activeCubeFace=e.activeCubeFace,s.dimensions=r.dimensions}const a={colorAttachments:[]};for(let e=0;e<o.textureViews.length;e++){const r=o.textureViews[e];let s={r:0,g:0,b:0,a:1};0===e&&t.clearValue&&(s=t.clearValue),a.colorAttachments.push({view:r.view,depthSlice:r.depthSlice,resolveTarget:r.resolveTarget,loadOp:t.loadOp||iN,storeOp:t.storeOp||sN,clearValue:s})}return o.depthStencilView&&(a.depthStencilAttachment={view:o.depthStencilView}),a}beginRender(e){const t=this.get(e),r=this.device,s=e.occlusionQueryCount;let i,n;s>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,i=r.createQuerySet({type:"occlusion",count:s,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=i,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(s),t.lastOcclusionObject=null),n=null===e.textures?this._getDefaultRenderPassDescriptor():this._getRenderPassDescriptor(e,{loadOp:iN}),this.initTimestampQuery(e,n),n.occlusionQuerySet=i;const o=n.depthStencilAttachment;if(null!==e.textures){const t=n.colorAttachments;for(let r=0;r<t.length;r++){const s=t[r];e.clearColor?(s.clearValue=0===r?e.clearColorValue:{r:0,g:0,b:0,a:1},s.loadOp=nN,s.storeOp=sN):(s.loadOp=iN,s.storeOp=sN)}}else{const t=n.colorAttachments[0];e.clearColor?(t.clearValue=e.clearColorValue,t.loadOp=nN,t.storeOp=sN):(t.loadOp=iN,t.storeOp=sN)}e.depth&&(e.clearDepth?(o.depthClearValue=e.clearDepthValue,o.depthLoadOp=nN,o.depthStoreOp=sN):(o.depthLoadOp=iN,o.depthStoreOp=sN)),e.stencil&&(e.clearStencil?(o.stencilClearValue=e.clearStencilValue,o.stencilLoadOp=nN,o.stencilStoreOp=sN):(o.stencilLoadOp=iN,o.stencilStoreOp=sN));const a=r.createCommandEncoder({label:"renderContext_"+e.id}),u=a.beginRenderPass(n);if(t.descriptor=n,t.encoder=a,t.currentPass=u,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[],e.viewport&&this.updateViewport(e),e.scissor){const{x:t,y:r,width:s,height:i}=e.scissorValue;u.setScissorRect(t,r,s,i)}}finishRender(e){const t=this.get(e),r=e.occlusionQueryCount;if(t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),r>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery(),t.currentPass.end(),r>0){const s=8*r;let i=this.occludedResolveCache.get(s);void 0===i&&(i=this.device.createBuffer({size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(s,i));const n=this.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,r,i,0),t.encoder.copyBufferToBuffer(i,0,n,0,s),t.occlusionQueryBuffer=n,this.resolveOccludedAsync(e)}if(this.device.queue.submit([t.encoder.finish()]),null!==e.textures){const t=e.textures;for(let e=0;e<t.length;e++){const r=t[e];!0===r.generateMipmaps&&this.textureUtils.generateMipmaps(r)}}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await r.mapAsync(GPUMapMode.READ);const i=r.getMappedRange(),n=new BigUint64Array(i);for(let t=0;t<s.length;t++)n[t]===BigInt(0)&&e.add(s[t]);r.destroy(),t.occluded=e}}updateViewport(e){const{currentPass:t}=this.get(e),{x:r,y:s,width:i,height:n,minDepth:o,maxDepth:a}=e.viewportValue;t.setViewport(r,s,i,n,o,a)}getClearColor(){const e=super.getClearColor();return!0===this.renderer.alpha&&(e.r*=e.a,e.g*=e.a,e.b*=e.a),e}clear(e,t,r,s=null){const i=this.device,n=this.renderer;let o,a,u,l,d=[];if(e){const e=this.getClearColor();a={r:e.r,g:e.g,b:e.b,a:e.a}}if(null===s){u=n.depth,l=n.stencil;const t=this._getDefaultRenderPassDescriptor();if(e){d=t.colorAttachments;const e=d[0];e.clearValue=a,e.loadOp=nN,e.storeOp=sN}(u||l)&&(o=t.depthStencilAttachment)}else{u=s.depth,l=s.stencil;const i={loadOp:e?nN:iN,clearValue:e?a:void 0};u&&(i.depthLoadOp=t?nN:iN,i.depthClearValue=t?n.getClearDepth():void 0,i.depthStoreOp=sN),l&&(i.stencilLoadOp=r?nN:iN,i.stencilClearValue=r?n.getClearStencil():void 0,i.stencilStoreOp=sN);const c=this._getRenderPassDescriptor(s,i);d=c.colorAttachments,o=c.depthStencilAttachment}u&&o&&void 0===o.depthLoadOp&&(t?(o.depthLoadOp=nN,o.depthClearValue=n.getClearDepth(),o.depthStoreOp=sN):(o.depthLoadOp=iN,o.depthStoreOp=sN)),l&&o&&void 0===o.stencilLoadOp&&(r?(o.stencilLoadOp=nN,o.stencilClearValue=n.getClearStencil(),o.stencilStoreOp=sN):(o.stencilLoadOp=iN,o.stencilStoreOp=sN));const c=i.createCommandEncoder({label:"clear"});c.beginRenderPass({colorAttachments:d,depthStencilAttachment:o}).end(),i.queue.submit([c.finish()])}beginCompute(e){const t=this.get(e),r={label:"computeGroup_"+e.id};this.initTimestampQuery(e,r),t.cmdEncoderGPU=this.device.createCommandEncoder({label:"computeGroup_"+e.id}),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(r)}compute(e,t,r,s){const{passEncoderGPU:i}=this.get(e),n=this.get(s).pipeline;i.setPipeline(n);for(let e=0,t=r.length;e<t;e++){const t=r[e],s=this.get(t);i.setBindGroup(e,s.group)}const o=this.device.limits.maxComputeWorkgroupsPerDimension,a=this.get(t);void 0===a.dispatchSize&&(a.dispatchSize={x:0,y:1,z:1});const{dispatchSize:u}=a;t.dispatchCount>o?(u.x=Math.min(t.dispatchCount,o),u.y=Math.ceil(t.dispatchCount/o)):u.x=t.dispatchCount,i.dispatchWorkgroups(u.x,u.y,u.z)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:r,material:s,context:i,pipeline:n}=e,o=e.getBindings(),a=this.get(i),u=this.get(n).pipeline,l=a.currentSets,d=a.currentPass,c=e.getDrawParameters();if(null===c)return;l.pipeline!==u&&(d.setPipeline(u),l.pipeline=u);const h=l.bindingGroups;for(let e=0,t=o.length;e<t;e++){const t=o[e],r=this.get(t);h[t.index]!==t.id&&(d.setBindGroup(t.index,r.group),h[t.index]=t.id)}const p=e.getIndex(),g=null!==p;if(!0===g&&l.index!==p){const e=this.get(p).buffer,t=p.array instanceof Uint16Array?dN:cN;d.setIndexBuffer(e,t),l.index=p}const m=e.getVertexBuffers();for(let e=0,t=m.length;e<t;e++){const t=m[e];if(l.attributes[e]!==t){const r=this.get(t).buffer;d.setVertexBuffer(e,r),l.attributes[e]=t}}if(void 0!==a.occlusionQuerySet){const e=a.lastOcclusionObject;e!==r&&(null!==e&&!0===e.occlusionTest&&(d.endOcclusionQuery(),a.occlusionQueryIndex++),!0===r.occlusionTest&&(d.beginOcclusionQuery(a.occlusionQueryIndex),a.occlusionQueryObjects[a.occlusionQueryIndex]=r),a.lastOcclusionObject=r)}!0===i.stencil&&!0===s.stencilWrite&&a.currentStencilRef!==s.stencilRef&&(d.setStencilReference(s.stencilRef),a.currentStencilRef=s.stencilRef);const f=()=>{if(!0===r.isBatchedMesh){const e=r._multiDrawStarts,s=r._multiDrawCounts,i=r._multiDrawCount,n=r._multiDrawInstances;null!==n&&nt("THREE.WebGPUBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");for(let o=0;o<i;o++){const i=n?n[o]:1,a=i>1?0:o;!0===g?d.drawIndexed(s[o],i,e[o]/p.array.BYTES_PER_ELEMENT,0,a):d.draw(s[o],i,e[o],a),t.update(r,s[o],i)}}else if(!0===g){const{vertexCount:s,instanceCount:i,firstVertex:n}=c,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;d.drawIndexedIndirect(e,0)}else d.drawIndexed(s,i,n,0,0);t.update(r,s,i)}else{const{vertexCount:s,instanceCount:i,firstVertex:n}=c,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;d.drawIndirect(e,0)}else d.draw(s,i,n,0);t.update(r,s,i)}};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){const t=this.get(e.camera),s=e.camera.cameras,n=e.getBindingGroup("cameraIndex");if(void 0===t.indexesGPU||t.indexesGPU.length!==s.length){const e=this.get(n),r=[],i=new Uint32Array([0,0,0,0]);for(let t=0,n=s.length;t<n;t++){i[0]=t;const s=this.bindingUtils.createBindGroupIndex(i,e.layout);r.push(s)}t.indexesGPU=r}const o=this.renderer.getPixelRatio();for(let e=0,a=s.length;e<a;e++){const a=s[e];if(r.layers.test(a.layers)){const r=a.viewport;d.setViewport(Math.floor(r.x*o),Math.floor(r.y*o),Math.floor(r.width*o),Math.floor(r.height*o),i.viewportValue.minDepth,i.viewportValue.maxDepth),d.setBindGroup(n.index,t.indexesGPU[e]),f()}}}else f()}needsRenderUpdate(e){const t=this.get(e),{object:r,material:s}=e,i=this.utils,n=i.getSampleCountRenderContext(e.context),o=i.getCurrentColorSpace(e.context),a=i.getCurrentColorFormat(e.context),u=i.getCurrentDepthStencilFormat(e.context),l=i.getPrimitiveTopology(r,s);let d=!1;return t.material===s&&t.materialVersion===s.version&&t.transparent===s.transparent&&t.blending===s.blending&&t.premultipliedAlpha===s.premultipliedAlpha&&t.blendSrc===s.blendSrc&&t.blendDst===s.blendDst&&t.blendEquation===s.blendEquation&&t.blendSrcAlpha===s.blendSrcAlpha&&t.blendDstAlpha===s.blendDstAlpha&&t.blendEquationAlpha===s.blendEquationAlpha&&t.colorWrite===s.colorWrite&&t.depthWrite===s.depthWrite&&t.depthTest===s.depthTest&&t.depthFunc===s.depthFunc&&t.stencilWrite===s.stencilWrite&&t.stencilFunc===s.stencilFunc&&t.stencilFail===s.stencilFail&&t.stencilZFail===s.stencilZFail&&t.stencilZPass===s.stencilZPass&&t.stencilFuncMask===s.stencilFuncMask&&t.stencilWriteMask===s.stencilWriteMask&&t.side===s.side&&t.alphaToCoverage===s.alphaToCoverage&&t.sampleCount===n&&t.colorSpace===o&&t.colorFormat===a&&t.depthStencilFormat===u&&t.primitiveTopology===l&&t.clippingContextCacheKey===e.clippingContextCacheKey||(t.material=s,t.materialVersion=s.version,t.transparent=s.transparent,t.blending=s.blending,t.premultipliedAlpha=s.premultipliedAlpha,t.blendSrc=s.blendSrc,t.blendDst=s.blendDst,t.blendEquation=s.blendEquation,t.blendSrcAlpha=s.blendSrcAlpha,t.blendDstAlpha=s.blendDstAlpha,t.blendEquationAlpha=s.blendEquationAlpha,t.colorWrite=s.colorWrite,t.depthWrite=s.depthWrite,t.depthTest=s.depthTest,t.depthFunc=s.depthFunc,t.stencilWrite=s.stencilWrite,t.stencilFunc=s.stencilFunc,t.stencilFail=s.stencilFail,t.stencilZFail=s.stencilZFail,t.stencilZPass=s.stencilZPass,t.stencilFuncMask=s.stencilFuncMask,t.stencilWriteMask=s.stencilWriteMask,t.side=s.side,t.alphaToCoverage=s.alphaToCoverage,t.sampleCount=n,t.colorSpace=o,t.colorFormat=a,t.depthStencilFormat=u,t.primitiveTopology=l,t.clippingContextCacheKey=e.clippingContextCacheKey,d=!0),d}getRenderCacheKey(e){const{object:t,material:r}=e,s=this.utils,i=e.context;return[r.transparent,r.blending,r.premultipliedAlpha,r.blendSrc,r.blendDst,r.blendEquation,r.blendSrcAlpha,r.blendDstAlpha,r.blendEquationAlpha,r.colorWrite,r.depthWrite,r.depthTest,r.depthFunc,r.stencilWrite,r.stencilFunc,r.stencilFail,r.stencilZFail,r.stencilZPass,r.stencilFuncMask,r.stencilWriteMask,r.side,s.getSampleCountRenderContext(i),s.getCurrentColorSpace(i),s.getCurrentColorFormat(i),s.getCurrentDepthStencilFormat(i),s.getPrimitiveTopology(t,r),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}initTimestampQuery(e,t){if(!this.trackTimestamp)return;const r=e.isComputeNode?"compute":"render";this.timestampQueryPool[r]||(this.timestampQueryPool[r]=new jS(this.device,r,2048));const s=this.timestampQueryPool[r],i=s.allocateQueriesForContext(e);t.timestampWrites={querySet:s.querySet,beginningOfPassWriteIndex:i,endOfPassWriteIndex:i+1}}createNodeBuilder(e,t){return new VS(e,t)}createProgram(e){this.get(e).module={module:this.device.createShaderModule({code:e.code,label:e.stage+(""!==e.name?`_${e.name}`:"")}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const r=this.get(e),s=r.currentPass.finish();this.get(t).bundleGPU=s,r.currentSets=r._currentSets,r.currentPass=r._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){let o=0,a=0,u=0,l=0,d=0,c=0,h=e.image.width,p=e.image.height,g=1;null!==r&&(!0===r.isBox3?(l=r.min.x,d=r.min.y,c=r.min.z,h=r.max.x-r.min.x,p=r.max.y-r.min.y,g=r.max.z-r.min.z):(l=r.min.x,d=r.min.y,h=r.max.x-r.min.x,p=r.max.y-r.min.y,g=1)),null!==s&&(o=s.x,a=s.y,u=s.z||0);const m=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),f=this.get(e).texture,y=this.get(t).texture;m.copyTextureToTexture({texture:f,mipLevel:i,origin:{x:l,y:d,z:c}},{texture:y,mipLevel:n,origin:{x:o,y:a,z:u}},[h,p,g]),this.device.queue.submit([m.finish()]),0===n&&t.generateMipmaps&&this.textureUtils.generateMipmaps(t)}copyFramebufferToTexture(e,t,r){const s=this.get(t);let i=null;i=t.renderTarget?e.isDepthTexture?this.get(t.depthTexture).texture:this.get(t.textures[0]).texture:e.isDepthTexture?this.textureUtils.getDepthBuffer(t.depth,t.stencil):this.context.getCurrentTexture();const n=this.get(e).texture;if(i.format!==n.format)return void console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",i.format,n.format);let o;if(s.currentPass?(s.currentPass.end(),o=s.encoder):o=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),o.copyTextureToTexture({texture:i,origin:[r.x,r.y,0]},{texture:n},[r.z,r.w]),e.generateMipmaps&&this.textureUtils.generateMipmaps(e),s.currentPass){const{descriptor:e}=s;for(let t=0;t<e.colorAttachments.length;t++)e.colorAttachments[t].loadOp=iN;if(t.depth&&(e.depthStencilAttachment.depthLoadOp=iN),t.stencil&&(e.depthStencilAttachment.stencilLoadOp=iN),s.currentPass=o.beginRenderPass(e),s.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.viewport&&this.updateViewport(t),t.scissor){const{x:e,y:r,width:i,height:n}=t.scissorValue;s.currentPass.setScissorRect(e,r,i,n)}}else this.device.queue.submit([o.finish()])}}class XS extends Xr{constructor(e,t,r,s,i,n){super(e,t,r,s,i,n),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class KS extends V_{constructor(){super(),this.addMaterial(ip,"MeshPhongMaterial"),this.addMaterial(jg,"MeshStandardMaterial"),this.addMaterial(Xg,"MeshPhysicalMaterial"),this.addMaterial(em,"MeshToonMaterial"),this.addMaterial(Kh,"MeshBasicMaterial"),this.addMaterial(rp,"MeshLambertMaterial"),this.addMaterial(Ih,"MeshNormalMaterial"),this.addMaterial(im,"MeshMatcapMaterial"),this.addMaterial(Rh,"LineBasicMaterial"),this.addMaterial(Eh,"LineDashedMaterial"),this.addMaterial(dm,"PointsMaterial"),this.addMaterial(um,"SpriteMaterial"),this.addMaterial(pm,"ShadowMaterial"),this.addLight(Pb,Kr),this.addLight(h_,Yr),this.addLight(f_,Qr),this.addLight(y_,Xr),this.addLight(b_,Zr),this.addLight(T_,Jr),this.addLight(__,es),this.addLight(x_,XS),this.addToneMapping(Qy,ts),this.addToneMapping(Zy,rs),this.addToneMapping(Jy,ss),this.addToneMapping(tx,is),this.addToneMapping(nx,ns),this.addToneMapping(ox,os)}}class YS extends sv{constructor(e={}){let t;e.forceWebGL?t=$v:(t=qS,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new $v(e)));super(new t(e),e),this.library=new KS,this.isWebGPURenderer=!0}}class QS extends as{constructor(){super(),this.isBundleGroup=!0,this.type="BundleGroup",this.static=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}}class ZS{constructor(e,t=Qi(0,0,1,1)){this.renderer=e,this.outputNode=t,this.outputColorTransform=!0,this.needsUpdate=!0;const r=new Nh;r.name="PostProcessing",this._quadMesh=new ey(r)}render(){this._update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=p,e.outputColorSpace=le;const s=e.xr.enabled;e.xr.enabled=!1,this._quadMesh.render(e),e.xr.enabled=s,e.toneMapping=t,e.outputColorSpace=r}dispose(){this._quadMesh.material.dispose()}_update(){if(!0===this.needsUpdate){const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;this._quadMesh.material.fragmentNode=!0===this.outputColorTransform?wu(this.outputNode,t,r):this.outputNode.context({toneMapping:t,outputColorSpace:r}),this._quadMesh.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this._update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=p,e.outputColorSpace=le;const s=e.xr.enabled;e.xr.enabled=!1,await this._quadMesh.renderAsync(e),e.xr.enabled=s,e.toneMapping=t,e.outputColorSpace=r}}class JS extends he{constructor(e=1,t=1){super(),this.image={width:e,height:t},this.magFilter=j,this.minFilter=j,this.isStorageTexture=!0}}class eR extends uy{constructor(e,t){super(e,t,Uint32Array),this.isIndirectStorageBufferAttribute=!0}}class tR extends us{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,r,s){const i=new ls(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,(r=>{try{t(this.parse(JSON.parse(r)))}catch(t){s?s(t):console.error(t),this.manager.itemError(e)}}),r,s)}parseNodes(e){const t={};if(void 0!==e){for(const r of e){const{uuid:e,type:s}=r;t[e]=this.createNodeFromType(s),t[e].uuid=e}const r={nodes:t,textures:this.textures};for(const s of e){s.meta=r;t[s.uuid].deserialize(s),delete s.meta}}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const r={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=r,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return void 0===this.nodes[e]?(console.error("THREE.NodeLoader: Node type not found:",e),Oi()):Ci(new this.nodes[e])}}class rR extends ds{constructor(e){super(e),this.nodes={},this.nodeMaterials={}}parse(e){const t=super.parse(e),r=this.nodes,s=e.inputNodes;for(const e in s){const i=s[e];t[e]=r[i]}return t}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}createMaterialFromType(e){const t=this.nodeMaterials[e];return void 0!==t?new t:super.createMaterialFromType(e)}}class sR extends cs{constructor(e){super(e),this.nodes={},this.nodeMaterials={},this._nodesJSON=null}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}parse(e,t){this._nodesJSON=e.nodes;const r=super.parse(e,t);return this._nodesJSON=null,r}parseNodes(e,t){if(void 0!==e){const r=new tR;return r.setNodes(this.nodes),r.setTextures(t),r.parseNodes(e)}return{}}parseMaterials(e,t){const r={};if(void 0!==e){const s=this.parseNodes(this._nodesJSON,t),i=new rR;i.setTextures(t),i.setNodes(s),i.setNodeMaterials(this.nodeMaterials);for(let t=0,s=e.length;t<s;t++){const s=e[t];r[s.uuid]=i.parse(s)}}return r}}class iR extends as{constructor(){super(),this.isClippingGroup=!0,this.clippingPlanes=[],this.enabled=!0,this.clipIntersection=!1,this.clipShadows=!1}}export{is as ACESFilmicToneMapping,Oc as AONode,lt as AddEquation,Q as AddOperation,Et as AdditiveBlending,ns as AgXToneMapping,Ot as AlphaFormat,Cr as AlwaysCompare,Pt as AlwaysDepth,Lr as AlwaysStencilFunc,Zr as AmbientLight,b_ as AmbientLightNode,Bb as AnalyticLightNode,$e as ArrayCamera,ks as ArrayElementNode,an as ArrayNode,Xn as AssignNode,Mu as AttributeNode,v as BackSide,Wh as BasicEnvironmentNode,De as BasicShadowMap,Rc as BatchNode,$ as BoxGeometry,ue as BufferAttribute,cu as BufferAttributeNode,ae as BufferGeometry,Gu as BufferNode,Rd as BumpMapNode,QS as BundleGroup,Tu as BypassNode,Je as ByteType,xu as CacheNode,Se as Camera,ss as CineonToneMapping,br as ClampToEdgeWrapping,iR as ClippingGroup,ax as CodeNode,e as Color,c as ColorManagement,Ja as ColorSpaceNode,fu as ComputeNode,Qs as ConstNode,Va as ContextNode,zs as ConvertNode,q as CubeCamera,S as CubeReflectionMapping,R as CubeRefractionMapping,X as CubeTexture,Yl as CubeTextureNode,oe as CubeUVReflectionMapping,vt as CullFaceBack,Nt as CullFaceFront,_t as CullFaceNone,St as CustomBlending,M as DataArrayTexture,Ke as DataTexture,Gr as DecrementStencilOp,Vr as DecrementWrapStencilOp,Ae as DepthFormat,Re as DepthStencilFormat,P as DepthTexture,Yr as DirectionalLight,h_ as DirectionalLightNode,Ne as DoubleSide,gt as DstAlphaFactor,mt as DstColorFactor,y as DynamicDrawUsage,zg as EnvironmentNode,Ar as EqualCompare,Bt as EqualDepth,Ur as EqualStencilFunc,Lh as EquirectUVNode,K as EquirectangularReflectionMapping,Y as EquirectangularRefractionMapping,N as Euler,a as EventDispatcher,Ru as ExpressionNode,ls as FileLoader,ke as Float16BufferAttribute,Fe as Float32BufferAttribute,B as FloatType,F as FramebufferTexture,Cl as FrontFacingNode,Xe as FrontSide,qe as Frustum,Yn as FunctionCallNode,lx as FunctionNode,_f as FunctionOverloadingNode,C_ as GLSLNodeParser,Sr as GreaterCompare,wt as GreaterDepth,Rr as GreaterEqualCompare,Mt as GreaterEqualDepth,Fr as GreaterEqualStencilFunc,Br as GreaterStencilFunc,as as Group,ce as HalfFloatType,Jr as HemisphereLight,T_ as HemisphereLightNode,XS as IESSpotLight,x_ as IESSpotLightNode,kr as IncrementStencilOp,Or as IncrementWrapStencilOp,gc as IndexNode,eR as IndirectStorageBufferAttribute,_c as InstanceNode,w as InstancedBufferAttribute,C as InstancedInterleavedBuffer,Nc as InstancedMeshNode,T as IntType,m as InterleavedBuffer,f as InterleavedBufferAttribute,zr as InvertStencilOp,zc as IrradianceNode,Ws as JoinNode,Hr as KeepStencilOp,Pe as LessCompare,Ut as LessDepth,Er as LessEqualCompare,Ft as LessEqualDepth,Pr as LessEqualStencilFunc,Ir as LessStencilFunc,es as LightProbe,__ as LightProbeNode,k_ as Lighting,Gc as LightingContextNode,jh as LightingModel,Vc as LightingNode,Kx as LightsNode,Fh as Line2NodeMaterial,D as LineBasicMaterial,Rh as LineBasicNodeMaterial,V as LineDashedMaterial,Eh as LineDashedNodeMaterial,j as LinearFilter,Be as LinearMipMapLinearFilter,U as LinearMipmapLinearFilter,Oe as LinearMipmapNearestFilter,le as LinearSRGBColorSpace,ts as LinearToneMapping,us as Loader,Mc as LoopNode,kt as LuminanceAlphaFormat,Gt as LuminanceFormat,gf as MRTNode,tm as MatcapUVNode,I as Material,ds as MaterialLoader,Cd as MaterialNode,rd as MaterialReferenceNode,u as MathUtils,i as Matrix2,n as Matrix3,o as Matrix4,jr as MaxEquation,Iu as MaxMipLevelNode,Zs as MemberNode,W as Mesh,ee as MeshBasicMaterial,Kh as MeshBasicNodeMaterial,te as MeshLambertMaterial,rp as MeshLambertNodeMaterial,fe as MeshMatcapMaterial,im as MeshMatcapNodeMaterial,G as MeshNormalMaterial,Ih as MeshNormalNodeMaterial,re as MeshPhongMaterial,ip as MeshPhongNodeMaterial,ge as MeshPhysicalMaterial,Xg as MeshPhysicalNodeMaterial,Yg as MeshSSSNodeMaterial,pe as MeshStandardMaterial,jg as MeshStandardNodeMaterial,me as MeshToonMaterial,em as MeshToonNodeMaterial,qr as MinEquation,xr as MirroredRepeatWrapping,Z as MixOperation,ul as ModelNode,Lc as MorphNode,Rt as MultiplyBlending,J as MultiplyOperation,vr as NearestFilter,Ge as NearestMipmapLinearFilter,_r as NearestMipmapNearestFilter,os as NeutralToneMapping,wr as NeverCompare,It as NeverDepth,Dr as NeverStencilFunc,O as NoBlending,x as NoColorSpace,p as NoToneMapping,Gs as Node,Ps as NodeAccess,IT as NodeAttribute,l_ as NodeBuilder,kT as NodeCache,OT as NodeCode,d_ as NodeFrame,c_ as NodeFunctionInput,tR as NodeLoader,Nh as NodeMaterial,rR as NodeMaterialLoader,ps as NodeMaterialObserver,sR as NodeObjectLoader,Bs as NodeShaderStage,Us as NodeType,LT as NodeUniform,Fs as NodeUpdateType,Ms as NodeUtils,DT as NodeVar,VT as NodeVarying,L as NormalBlending,_d as NormalMapNode,Nr as NotEqualCompare,Ct as NotEqualDepth,Mr as NotEqualStencilFunc,Me as Object3D,tl as Object3DNode,cs as ObjectLoader,E as ObjectSpaceNormalMap,bt as OneFactor,dt as OneMinusDstAlphaFactor,ct as OneMinusDstColorFactor,ht as OneMinusSrcAlphaFactor,pt as OneMinusSrcColorFactor,se as OrthographicCamera,cf as OutputStructNode,je as PCFShadowMap,Bg as PMREMGenerator,Og as PMREMNode,of as ParameterNode,Ky as PassNode,ie as PerspectiveCamera,ep as PhongLightingModel,Xp as PhysicalLightingModel,we as Plane,Kr as PointLight,Pb as PointLightNode,gy as PointUVNode,xe as PointsMaterial,dm as PointsNodeMaterial,ZS as PostProcessing,Wy as PosterizeNode,yn as PropertyNode,ey as QuadMesh,fr as RED_GREEN_RGTC2_Format,gr as RED_RGTC1_Format,ze as REVISION,de as RGBAFormat,it as RGBAIntegerFormat,dr as RGBA_ASTC_10x10_Format,ar as RGBA_ASTC_10x5_Format,ur as RGBA_ASTC_10x6_Format,lr as RGBA_ASTC_10x8_Format,cr as RGBA_ASTC_12x10_Format,hr as RGBA_ASTC_12x12_Format,Jt as RGBA_ASTC_4x4_Format,er as RGBA_ASTC_5x4_Format,tr as RGBA_ASTC_5x5_Format,rr as RGBA_ASTC_6x5_Format,sr as RGBA_ASTC_6x6_Format,ir as RGBA_ASTC_8x5_Format,nr as RGBA_ASTC_8x6_Format,or as RGBA_ASTC_8x8_Format,pr as RGBA_BPTC_Format,Zt as RGBA_ETC2_EAC_Format,Kt as RGBA_PVRTC_2BPPV1_Format,Xt as RGBA_PVRTC_4BPPV1_Format,$t as RGBA_S3TC_DXT1_Format,Wt as RGBA_S3TC_DXT3_Format,Ht as RGBA_S3TC_DXT5_Format,st as RGBFormat,rt as RGBIntegerFormat,Yt as RGB_ETC1_Format,Qt as RGB_ETC2_Format,qt as RGB_PVRTC_2BPPV1_Format,jt as RGB_PVRTC_4BPPV1_Format,zt as RGB_S3TC_DXT1_Format,Le as RGFormat,tt as RGIntegerFormat,ry as RTTNode,Sx as RangeNode,Qr as RectAreaLight,f_ as RectAreaLightNode,Qe as RedFormat,Ye as RedIntegerFormat,Jl as ReferenceNode,Kf as ReflectorNode,rs as ReinhardToneMapping,vu as RemapNode,Cu as RenderOutputNode,ne as RenderTarget,ou as RendererReferenceNode,ob as RendererUtils,Tr as RepeatWrapping,$r as ReplaceStencilOp,at as ReverseSubtractEquation,nm as RotateNode,yr as SIGNED_RED_GREEN_RGTC2_Format,mr as SIGNED_RED_RGTC1_Format,k as SRGBColorSpace,h as SRGBTransfer,H as Scene,xy as SceneNode,Hc as ScreenNode,fx as ScriptableNode,cx as ScriptableValueNode,qs as SetNode,Yx as ShadowBaseNode,be as ShadowMaterial,bb as ShadowNode,pm as ShadowNodeMaterial,Ze as ShortType,Cc as SkinningNode,_ as Sphere,Ve as SphereGeometry,js as SplitNode,Xr as SpotLight,y_ as SpotLightNode,ye as SpriteMaterial,um as SpriteNodeMaterial,Bf as SpriteSheetUVNode,yt as SrcAlphaFactor,ft as SrcAlphaSaturateFactor,xt as SrcColorFactor,af as StackNode,g as StaticDrawUsage,ly as StorageArrayElementNode,uy as StorageBufferAttribute,cy as StorageBufferNode,ay as StorageInstancedBufferAttribute,JS as StorageTexture,vy as StorageTextureNode,df as StructNode,lf as StructTypeNode,ut as SubtractEquation,At as SubtractiveBlending,wT as TSL,A as TangentSpaceNormalMap,$s as TempNode,he as Texture,Ry as Texture3DNode,Du as TextureNode,Uu as TextureSizeNode,uu as ToneMappingNode,Yy as ToonOutlinePassNode,Uf as TriplanarTexturesNode,Ue as UVMapping,_e as Uint16BufferAttribute,Te as Uint32BufferAttribute,$u as UniformArrayNode,ln as UniformGroupNode,mn as UniformNode,Ce as UnsignedByteType,Ee as UnsignedInt248Type,Vt as UnsignedInt5999Type,b as UnsignedIntType,Lt as UnsignedShort4444Type,Dt as UnsignedShort5551Type,et as UnsignedShortType,Ey as UserDataNode,Ie as VSMShadowMap,ka as VarNode,ja as VaryingNode,t as Vector2,r as Vector3,s as Vector4,py as VertexColorNode,lh as ViewportDepthNode,ah as ViewportDepthTextureNode,wh as ViewportSharedTextureNode,sh as ViewportTextureNode,xm as VolumeNodeMaterial,l as WebGLCoordinateSystem,z as WebGLCubeRenderTarget,d as WebGPUCoordinateSystem,YS as WebGPURenderer,We as WebXRController,Tt as ZeroFactor,Wr as ZeroStencilOp,ot as createCanvasElement,Ls as defaultBuildStages,Is as defaultShaderStages,Ds as shaderStages,Vs as vectorComponents};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZWUud2ViZ3B1Lm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL21hdGVyaWFscy9ub2Rlcy9tYW5hZ2VyL05vZGVNYXRlcmlhbE9ic2VydmVyLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvTm9kZVV0aWxzLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvY29uc3RhbnRzLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy91dGlscy9BcnJheUVsZW1lbnROb2RlLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL0NvbnZlcnROb2RlLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvVGVtcE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvSm9pbk5vZGUuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvU3BsaXROb2RlLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL1NldE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvRmxpcE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9JbnB1dE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9Db25zdE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvTWVtYmVyTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy90c2wvVFNMQ29yZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL0FycmF5Tm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL1VuaWZvcm1Hcm91cE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9Vbmlmb3JtTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL1Byb3BlcnR5Tm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL0Fzc2lnbk5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29kZS9GdW5jdGlvbkNhbGxOb2RlLmpzIiwiLi4vc3JjL25vZGVzL21hdGgvT3BlcmF0b3JOb2RlLmpzIiwiLi4vc3JjL25vZGVzL21hdGgvTWF0aE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvbWF0aC9Db25kaXRpb25hbE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9Db250ZXh0Tm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL1Zhck5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9WYXJ5aW5nTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9kaXNwbGF5L0NvbG9yU3BhY2VGdW5jdGlvbnMuanMiLCIuLi9zcmMvbm9kZXMvZGlzcGxheS9Db2xvclNwYWNlTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvUmVmZXJlbmNlQmFzZU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL1JlbmRlcmVyUmVmZXJlbmNlTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9kaXNwbGF5L1RvbmVNYXBwaW5nTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvQnVmZmVyQXR0cmlidXRlTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9ncGdwdS9Db21wdXRlTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL0NhY2hlTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL0J5cGFzc05vZGUuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvUmVtYXBOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2NvZGUvRXhwcmVzc2lvbk5vZGUuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvRGlzY2FyZC5qcyIsIi4uL3NyYy9ub2Rlcy9kaXNwbGF5L1JlbmRlck91dHB1dE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9BdHRyaWJ1dGVOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9VVi5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvVGV4dHVyZVNpemVOb2RlLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL01heE1pcExldmVsTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvVGV4dHVyZU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL0J1ZmZlck5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL1VuaWZvcm1BcnJheU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL0NhbWVyYS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvT2JqZWN0M0ROb2RlLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9Nb2RlbE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL1Bvc2l0aW9uLmpzIiwiLi4vc3JjL25vZGVzL2Rpc3BsYXkvRnJvbnRGYWNpbmdOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9Ob3JtYWwuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL01hdGVyaWFsUHJvcGVydGllcy5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvUmVmbGVjdFZlY3Rvci5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvQ3ViZVRleHR1cmVOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9SZWZlcmVuY2VOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9NYXRlcmlhbFJlZmVyZW5jZU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL1RhbmdlbnQuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL0JpdGFuZ2VudC5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvQWNjZXNzb3JzVXRpbHMuanMiLCIuLi9zcmMvbm9kZXMvZGlzcGxheS9Ob3JtYWxNYXBOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2Rpc3BsYXkvQnVtcE1hcE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL01hdGVyaWFsTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvTW9kZWxWaWV3UHJvamVjdGlvbk5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9JbmRleE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL0luc3RhbmNlTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvSW5zdGFuY2VkTWVzaE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL0JhdGNoTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvU2tpbm5pbmdOb2RlLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL0xvb3BOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9Nb3JwaE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvbGlnaHRpbmcvTGlnaHRpbmdOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2xpZ2h0aW5nL0FPTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9saWdodGluZy9MaWdodGluZ0NvbnRleHROb2RlLmpzIiwiLi4vc3JjL25vZGVzL2xpZ2h0aW5nL0lycmFkaWFuY2VOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2Rpc3BsYXkvU2NyZWVuTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9kaXNwbGF5L1ZpZXdwb3J0VGV4dHVyZU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvZGlzcGxheS9WaWV3cG9ydERlcHRoVGV4dHVyZU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvZGlzcGxheS9WaWV3cG9ydERlcHRoTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvQnVpbHRpbk5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL0NsaXBwaW5nTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9mdW5jdGlvbnMvbWF0ZXJpYWwvZ2V0QWxwaGFIYXNoVGhyZXNob2xkLmpzIiwiLi4vc3JjL21hdGVyaWFscy9ub2Rlcy9Ob2RlTWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL25vZGVzL0xpbmVCYXNpY05vZGVNYXRlcmlhbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvbm9kZXMvTGluZURhc2hlZE5vZGVNYXRlcmlhbC5qcyIsIi4uL3NyYy9ub2Rlcy9kaXNwbGF5L1ZpZXdwb3J0U2hhcmVkVGV4dHVyZU5vZGUuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL25vZGVzL0xpbmUyTm9kZU1hdGVyaWFsLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL1BhY2tpbmcuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL25vZGVzL01lc2hOb3JtYWxOb2RlTWF0ZXJpYWwuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvRXF1aXJlY3RVVk5vZGUuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9DdWJlUmVuZGVyVGFyZ2V0LmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL0N1YmVNYXBOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2xpZ2h0aW5nL0Jhc2ljRW52aXJvbm1lbnROb2RlLmpzIiwiLi4vc3JjL25vZGVzL2xpZ2h0aW5nL0Jhc2ljTGlnaHRNYXBOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvTGlnaHRpbmdNb2RlbC5qcyIsIi4uL3NyYy9ub2Rlcy9mdW5jdGlvbnMvQmFzaWNMaWdodGluZ01vZGVsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9ub2Rlcy9NZXNoQmFzaWNOb2RlTWF0ZXJpYWwuanMiLCIuLi9zcmMvbm9kZXMvZnVuY3Rpb25zL0JTREYvRl9TY2hsaWNrLmpzIiwiLi4vc3JjL25vZGVzL2Z1bmN0aW9ucy9CU0RGL0JSREZfTGFtYmVydC5qcyIsIi4uL3NyYy9ub2Rlcy9mdW5jdGlvbnMvUGhvbmdMaWdodGluZ01vZGVsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9ub2Rlcy9NZXNoTGFtYmVydE5vZGVNYXRlcmlhbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvbm9kZXMvTWVzaFBob25nTm9kZU1hdGVyaWFsLmpzIiwiLi4vc3JjL25vZGVzL2Z1bmN0aW9ucy9tYXRlcmlhbC9nZXRHZW9tZXRyeVJvdWdobmVzcy5qcyIsIi4uL3NyYy9ub2Rlcy9mdW5jdGlvbnMvbWF0ZXJpYWwvZ2V0Um91Z2huZXNzLmpzIiwiLi4vc3JjL25vZGVzL2Z1bmN0aW9ucy9CU0RGL1ZfR0dYX1NtaXRoQ29ycmVsYXRlZC5qcyIsIi4uL3NyYy9ub2Rlcy9mdW5jdGlvbnMvQlNERi9WX0dHWF9TbWl0aENvcnJlbGF0ZWRfQW5pc290cm9waWMuanMiLCIuLi9zcmMvbm9kZXMvZnVuY3Rpb25zL0JTREYvRF9HR1guanMiLCIuLi9zcmMvbm9kZXMvZnVuY3Rpb25zL0JTREYvRF9HR1hfQW5pc290cm9waWMuanMiLCIuLi9zcmMvbm9kZXMvZnVuY3Rpb25zL0JTREYvQlJERl9HR1guanMiLCIuLi9zcmMvbm9kZXMvZnVuY3Rpb25zL0JTREYvREZHQXBwcm94LmpzIiwiLi4vc3JjL25vZGVzL2Z1bmN0aW9ucy9CU0RGL0Vudmlyb25tZW50QlJERi5qcyIsIi4uL3NyYy9ub2Rlcy9mdW5jdGlvbnMvQlNERi9TY2hsaWNrX3RvX0YwLmpzIiwiLi4vc3JjL25vZGVzL2Z1bmN0aW9ucy9CU0RGL0JSREZfU2hlZW4uanMiLCIuLi9zcmMvbm9kZXMvZnVuY3Rpb25zL0JTREYvTFRDLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9UZXh0dXJlQmljdWJpYy5qcyIsIi4uL3NyYy9ub2Rlcy9mdW5jdGlvbnMvUGh5c2ljYWxMaWdodGluZ01vZGVsLmpzIiwiLi4vc3JjL25vZGVzL3BtcmVtL1BNUkVNVXRpbHMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9leHRyYXMvUE1SRU1HZW5lcmF0b3IuanMiLCIuLi9zcmMvbm9kZXMvcG1yZW0vUE1SRU1Ob2RlLmpzIiwiLi4vc3JjL25vZGVzL2xpZ2h0aW5nL0Vudmlyb25tZW50Tm9kZS5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvbm9kZXMvTWVzaFN0YW5kYXJkTm9kZU1hdGVyaWFsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9ub2Rlcy9NZXNoUGh5c2ljYWxOb2RlTWF0ZXJpYWwuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL25vZGVzL01lc2hTU1NOb2RlTWF0ZXJpYWwuanMiLCIuLi9zcmMvbm9kZXMvZnVuY3Rpb25zL1Rvb25MaWdodGluZ01vZGVsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9ub2Rlcy9NZXNoVG9vbk5vZGVNYXRlcmlhbC5qcyIsIi4uL3NyYy9ub2Rlcy91dGlscy9NYXRjYXBVVk5vZGUuanMiLCIuLi9zcmMvbWF0ZXJpYWxzL25vZGVzL01lc2hNYXRjYXBOb2RlTWF0ZXJpYWwuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvUm90YXRlTm9kZS5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvbm9kZXMvU3ByaXRlTm9kZU1hdGVyaWFsLmpzIiwiLi4vc3JjL21hdGVyaWFscy9ub2Rlcy9Qb2ludHNOb2RlTWF0ZXJpYWwuanMiLCIuLi9zcmMvbm9kZXMvZnVuY3Rpb25zL1NoYWRvd01hc2tNb2RlbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvbm9kZXMvU2hhZG93Tm9kZU1hdGVyaWFsLmpzIiwiLi4vc3JjL25vZGVzL2Z1bmN0aW9ucy9Wb2x1bWV0cmljTGlnaHRpbmdNb2RlbC5qcyIsIi4uL3NyYy9tYXRlcmlhbHMvbm9kZXMvVm9sdW1lTm9kZU1hdGVyaWFsLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vQW5pbWF0aW9uLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vQ2hhaW5NYXAuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9SZW5kZXJPYmplY3QuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9SZW5kZXJPYmplY3RzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vRGF0YU1hcC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL0NvbnN0YW50cy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL0F0dHJpYnV0ZXMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9HZW9tZXRyaWVzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vSW5mby5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL1BpcGVsaW5lLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vUmVuZGVyUGlwZWxpbmUuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9Db21wdXRlUGlwZWxpbmUuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9Qcm9ncmFtbWFibGVTdGFnZS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL1BpcGVsaW5lcy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL0JpbmRpbmdzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vUmVuZGVyTGlzdC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL1JlbmRlckxpc3RzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vUmVuZGVyQ29udGV4dC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL1JlbmRlckNvbnRleHRzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vVGV4dHVyZXMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9Db2xvcjQuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9QYXJhbWV0ZXJOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvU3RhY2tOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvU3RydWN0VHlwZU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9TdHJ1Y3ROb2RlLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvT3V0cHV0U3RydWN0Tm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL01SVE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvbWF0aC9IYXNoLmpzIiwiLi4vc3JjL25vZGVzL21hdGgvTWF0aFV0aWxzLmpzIiwiLi4vc3JjL25vZGVzL21hdGgvVHJpTm9pc2UzRC5qcyIsIi4uL3NyYy9ub2Rlcy91dGlscy9GdW5jdGlvbk92ZXJsb2FkaW5nTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy91dGlscy9UaW1lci5qcyIsIi4uL3NyYy9ub2Rlcy91dGlscy9VVlV0aWxzLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL1Nwcml0ZVV0aWxzLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL1ZpZXdwb3J0VXRpbHMuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvU3ByaXRlU2hlZXRVVk5vZGUuanMiLCIuLi9zcmMvbm9kZXMvdXRpbHMvVHJpcGxhbmFyVGV4dHVyZXNOb2RlLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL1JlZmxlY3Rvck5vZGUuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9RdWFkTWVzaC5qcyIsIi4uL3NyYy9ub2Rlcy91dGlscy9SVFROb2RlLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL1Bvc3RQcm9jZXNzaW5nVXRpbHMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9TdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZS5qcyIsIi4uL3NyYy9ub2Rlcy91dGlscy9TdG9yYWdlQXJyYXlFbGVtZW50Tm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvU3RvcmFnZUJ1ZmZlck5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL1ZlcnRleENvbG9yTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvUG9pbnRVVk5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL1NjZW5lTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvU3RvcmFnZVRleHR1cmVOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9UZXh0dXJlM0ROb2RlLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9Vc2VyRGF0YU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvYWNjZXNzb3JzL1ZlbG9jaXR5Tm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9kaXNwbGF5L0JsZW5kTW9kZXMuanMiLCIuLi9zcmMvbm9kZXMvZGlzcGxheS9Db2xvckFkanVzdG1lbnQuanMiLCIuLi9zcmMvbm9kZXMvZGlzcGxheS9Qb3N0ZXJpemVOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2Rpc3BsYXkvUGFzc05vZGUuanMiLCIuLi9zcmMvbm9kZXMvZGlzcGxheS9Ub29uT3V0bGluZVBhc3NOb2RlLmpzIiwiLi4vc3JjL25vZGVzL2Rpc3BsYXkvVG9uZU1hcHBpbmdGdW5jdGlvbnMuanMiLCIuLi9zcmMvbm9kZXMvY29kZS9Db2RlTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb2RlL0Z1bmN0aW9uTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb2RlL1NjcmlwdGFibGVWYWx1ZU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29kZS9TY3JpcHRhYmxlTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9mb2cvRm9nLmpzIiwiLi4vc3JjL25vZGVzL2dlb21ldHJ5L1JhbmdlTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9ncGdwdS9Db21wdXRlQnVpbHRpbk5vZGUuanMiLCIuLi9zcmMvbm9kZXMvZ3BncHUvQmFycmllck5vZGUuanMiLCIuLi9zcmMvbm9kZXMvZ3BncHUvV29ya2dyb3VwSW5mb05vZGUuanMiLCIuLi9zcmMvbm9kZXMvZ3BncHUvQXRvbWljRnVuY3Rpb25Ob2RlLmpzIiwiLi4vc3JjL25vZGVzL2FjY2Vzc29ycy9MaWdodHMuanMiLCIuLi9zcmMvbm9kZXMvbGlnaHRpbmcvTGlnaHRzTm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9saWdodGluZy9TaGFkb3dCYXNlTm9kZS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL1JlbmRlcmVyVXRpbHMuanMiLCIuLi9zcmMvbm9kZXMvbGlnaHRpbmcvU2hhZG93Tm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9saWdodGluZy9Qb2ludFNoYWRvd05vZGUuanMiLCIuLi9zcmMvbm9kZXMvbGlnaHRpbmcvQW5hbHl0aWNMaWdodE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvbGlnaHRpbmcvTGlnaHRVdGlscy5qcyIsIi4uL3NyYy9ub2Rlcy9saWdodGluZy9Qb2ludExpZ2h0Tm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9wcm9jZWR1cmFsL0NoZWNrZXIuanMiLCIuLi9zcmMvbm9kZXMvc2hhcGVzL1NoYXBlcy5qcyIsIi4uL3NyYy9ub2Rlcy9tYXRlcmlhbHgvbGliL214X25vaXNlLmpzIiwiLi4vc3JjL25vZGVzL21hdGVyaWFseC9saWIvbXhfaHN2LmpzIiwiLi4vc3JjL25vZGVzL21hdGVyaWFseC9saWIvbXhfdHJhbnNmb3JtX2NvbG9yLmpzIiwiLi4vc3JjL25vZGVzL21hdGVyaWFseC9NYXRlcmlhbFhOb2Rlcy5qcyIsIi4uL3NyYy9ub2Rlcy9mdW5jdGlvbnMvbWF0ZXJpYWwvZ2V0UGFyYWxsYXhDb3JyZWN0Tm9ybWFsLmpzIiwiLi4vc3JjL25vZGVzL2Z1bmN0aW9ucy9tYXRlcmlhbC9nZXRTaElycmFkaWFuY2VBdC5qcyIsIi4uL3NyYy9ub2Rlcy90c2wvVFNMQmFzZS5qcyIsIi4uL3NyYy9ub2Rlcy9hY2Nlc3NvcnMvQXJyYXlzLmpzIiwiLi4vc3JjL25vZGVzL3V0aWxzL09zY2lsbGF0b3JzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vQmFja2dyb3VuZC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL0JpbmRHcm91cC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL25vZGVzL05vZGVCdWlsZGVyU3RhdGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9Ob2RlQXR0cmlidXRlLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvTm9kZVVuaWZvcm0uanMiLCIuLi9zcmMvbm9kZXMvY29yZS9Ob2RlVmFyLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvTm9kZVZhcnlpbmcuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9Ob2RlQ29kZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL05vZGVDYWNoZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL1N0cnVjdFR5cGUuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9Vbmlmb3JtLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vbm9kZXMvTm9kZVVuaWZvcm0uanMiLCIuLi9zcmMvbm9kZXMvY29yZS9Ob2RlQnVpbGRlci5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL05vZGVGcmFtZS5qcyIsIi4uL3NyYy9ub2Rlcy9jb3JlL05vZGVGdW5jdGlvbklucHV0LmpzIiwiLi4vc3JjL25vZGVzL2xpZ2h0aW5nL0RpcmVjdGlvbmFsTGlnaHROb2RlLmpzIiwiLi4vc3JjL25vZGVzL2xpZ2h0aW5nL1JlY3RBcmVhTGlnaHROb2RlLmpzIiwiLi4vc3JjL25vZGVzL2xpZ2h0aW5nL1Nwb3RMaWdodE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvbGlnaHRpbmcvSUVTU3BvdExpZ2h0Tm9kZS5qcyIsIi4uL3NyYy9ub2Rlcy9saWdodGluZy9BbWJpZW50TGlnaHROb2RlLmpzIiwiLi4vc3JjL25vZGVzL2xpZ2h0aW5nL0hlbWlzcGhlcmVMaWdodE5vZGUuanMiLCIuLi9zcmMvbm9kZXMvbGlnaHRpbmcvTGlnaHRQcm9iZU5vZGUuanMiLCIuLi9zcmMvbm9kZXMvY29yZS9Ob2RlUGFyc2VyLmpzIiwiLi4vc3JjL25vZGVzL2NvcmUvTm9kZUZ1bmN0aW9uLmpzIiwiLi4vc3JjL25vZGVzL3BhcnNlcnMvR0xTTE5vZGVGdW5jdGlvbi5qcyIsIi4uL3NyYy9ub2Rlcy9wYXJzZXJzL0dMU0xOb2RlUGFyc2VyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vbm9kZXMvTm9kZXMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9DbGlwcGluZ0NvbnRleHQuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9SZW5kZXJCdW5kbGUuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9SZW5kZXJCdW5kbGVzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vbm9kZXMvTm9kZUxpYnJhcnkuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9MaWdodGluZy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL1hSUmVuZGVyVGFyZ2V0LmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vWFJNYW5hZ2VyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vUmVuZGVyZXIuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9CaW5kaW5nLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vQnVmZmVyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vQnVmZmVyVXRpbHMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9Vbmlmb3JtQnVmZmVyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vbm9kZXMvTm9kZVVuaWZvcm1CdWZmZXIuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9Vbmlmb3Jtc0dyb3VwLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vbm9kZXMvTm9kZVVuaWZvcm1zR3JvdXAuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9TYW1wbGVkVGV4dHVyZS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL25vZGVzL05vZGVTYW1wbGVkVGV4dHVyZS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wtZmFsbGJhY2svbm9kZXMvR0xTTE5vZGVCdWlsZGVyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vQmFja2VuZC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wtZmFsbGJhY2svdXRpbHMvV2ViR0xBdHRyaWJ1dGVVdGlscy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wtZmFsbGJhY2svdXRpbHMvV2ViR0xTdGF0ZS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wtZmFsbGJhY2svdXRpbHMvV2ViR0xVdGlscy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wtZmFsbGJhY2svdXRpbHMvV2ViR0xUZXh0dXJlVXRpbHMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsLWZhbGxiYWNrL3V0aWxzL1dlYkdMRXh0ZW5zaW9ucy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wtZmFsbGJhY2svdXRpbHMvV2ViR0xDYXBhYmlsaXRpZXMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdsLWZhbGxiYWNrL3V0aWxzL1dlYkdMQ29uc3RhbnRzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC1mYWxsYmFjay9XZWJHTEJ1ZmZlclJlbmRlcmVyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vVGltZXN0YW1wUXVlcnlQb29sLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJnbC1mYWxsYmFjay91dGlscy9XZWJHTFRpbWVzdGFtcFF1ZXJ5UG9vbC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ2wtZmFsbGJhY2svV2ViR0xCYWNrZW5kLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJncHUvdXRpbHMvV2ViR1BVQ29uc3RhbnRzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vU2FtcGxlci5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL25vZGVzL05vZGVTYW1wbGVyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vU3RvcmFnZUJ1ZmZlci5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL25vZGVzL05vZGVTdG9yYWdlQnVmZmVyLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJncHUvdXRpbHMvV2ViR1BVVGV4dHVyZVBhc3NVdGlscy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ3B1L3V0aWxzL1dlYkdQVVRleHR1cmVVdGlscy5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ3B1L25vZGVzL1dHU0xOb2RlRnVuY3Rpb24uanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdwdS9ub2Rlcy9XR1NMTm9kZVBhcnNlci5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ3B1L25vZGVzL1dHU0xOb2RlQnVpbGRlci5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ3B1L3V0aWxzL1dlYkdQVVV0aWxzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJncHUvdXRpbHMvV2ViR1BVQXR0cmlidXRlVXRpbHMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdwdS91dGlscy9XZWJHUFVCaW5kaW5nVXRpbHMuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdwdS91dGlscy9XZWJHUFVQaXBlbGluZVV0aWxzLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJncHUvdXRpbHMvV2ViR1BVVGltZXN0YW1wUXVlcnlQb29sLmpzIiwiLi4vc3JjL3JlbmRlcmVycy93ZWJncHUvV2ViR1BVQmFja2VuZC5qcyIsIi4uL3NyYy9saWdodHMvd2ViZ3B1L0lFU1Nwb3RMaWdodC5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvd2ViZ3B1L25vZGVzL1N0YW5kYXJkTm9kZUxpYnJhcnkuanMiLCIuLi9zcmMvcmVuZGVyZXJzL3dlYmdwdS9XZWJHUFVSZW5kZXJlci5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL0J1bmRsZUdyb3VwLmpzIiwiLi4vc3JjL3JlbmRlcmVycy9jb21tb24vUG9zdFByb2Nlc3NpbmcuanMiLCIuLi9zcmMvcmVuZGVyZXJzL2NvbW1vbi9TdG9yYWdlVGV4dHVyZS5qcyIsIi4uL3NyYy9yZW5kZXJlcnMvY29tbW9uL0luZGlyZWN0U3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZS5qcyIsIi4uL3NyYy9sb2FkZXJzL25vZGVzL05vZGVMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9ub2Rlcy9Ob2RlTWF0ZXJpYWxMb2FkZXIuanMiLCIuLi9zcmMvbG9hZGVycy9ub2Rlcy9Ob2RlT2JqZWN0TG9hZGVyLmpzIiwiLi4vc3JjL29iamVjdHMvQ2xpcHBpbmdHcm91cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZWZyZXNoVW5pZm9ybXMgPSBbXG5cdCdhbHBoYU1hcCcsXG5cdCdhbHBoYVRlc3QnLFxuXHQnYW5pc290cm9weScsXG5cdCdhbmlzb3Ryb3B5TWFwJyxcblx0J2FuaXNvdHJvcHlSb3RhdGlvbicsXG5cdCdhb01hcCcsXG5cdCdhdHRlbnVhdGlvbkNvbG9yJyxcblx0J2F0dGVudWF0aW9uRGlzdGFuY2UnLFxuXHQnYnVtcE1hcCcsXG5cdCdjbGVhcmNvYXQnLFxuXHQnY2xlYXJjb2F0TWFwJyxcblx0J2NsZWFyY29hdE5vcm1hbE1hcCcsXG5cdCdjbGVhcmNvYXROb3JtYWxTY2FsZScsXG5cdCdjbGVhcmNvYXRSb3VnaG5lc3MnLFxuXHQnY29sb3InLFxuXHQnZGlzcGVyc2lvbicsXG5cdCdkaXNwbGFjZW1lbnRNYXAnLFxuXHQnZW1pc3NpdmUnLFxuXHQnZW1pc3NpdmVNYXAnLFxuXHQnZW52TWFwJyxcblx0J2dyYWRpZW50TWFwJyxcblx0J2lvcicsXG5cdCdpcmlkZXNjZW5jZScsXG5cdCdpcmlkZXNjZW5jZUlPUicsXG5cdCdpcmlkZXNjZW5jZU1hcCcsXG5cdCdpcmlkZXNjZW5jZVRoaWNrbmVzc01hcCcsXG5cdCdsaWdodE1hcCcsXG5cdCdtYXAnLFxuXHQnbWF0Y2FwJyxcblx0J21ldGFsbmVzcycsXG5cdCdtZXRhbG5lc3NNYXAnLFxuXHQnbm9ybWFsTWFwJyxcblx0J25vcm1hbFNjYWxlJyxcblx0J29wYWNpdHknLFxuXHQncm91Z2huZXNzJyxcblx0J3JvdWdobmVzc01hcCcsXG5cdCdzaGVlbicsXG5cdCdzaGVlbkNvbG9yJyxcblx0J3NoZWVuQ29sb3JNYXAnLFxuXHQnc2hlZW5Sb3VnaG5lc3NNYXAnLFxuXHQnc2hpbmluZXNzJyxcblx0J3NwZWN1bGFyJyxcblx0J3NwZWN1bGFyQ29sb3InLFxuXHQnc3BlY3VsYXJDb2xvck1hcCcsXG5cdCdzcGVjdWxhckludGVuc2l0eScsXG5cdCdzcGVjdWxhckludGVuc2l0eU1hcCcsXG5cdCdzcGVjdWxhck1hcCcsXG5cdCd0aGlja25lc3MnLFxuXHQndHJhbnNtaXNzaW9uJyxcblx0J3RyYW5zbWlzc2lvbk1hcCdcbl07XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyB1c2VkIGJ5IHtAbGluayBXZWJHUFVSZW5kZXJlcn0gYXMgbWFuYWdlbWVudCBjb21wb25lbnQuXG4gKiBJdCdzIHByaW1hcnkgcHVycG9zZSBpcyB0byBkZXRlcm1pbmUgd2hldGhlciByZW5kZXIgb2JqZWN0cyByZXF1aXJlIGFcbiAqIHJlZnJlc2ggcmlnaHQgYmVmb3JlIHRoZXkgYXJlIGdvaW5nIHRvIGJlIHJlbmRlcmVkIG9yIG5vdC5cbiAqL1xuY2xhc3MgTm9kZU1hdGVyaWFsT2JzZXJ2ZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUgbWF0ZXJpYWwgb2JzZXJ2ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGJ1aWxkZXIgKSB7XG5cblx0XHQvKipcblx0XHQgKiBBIG5vZGUgbWF0ZXJpYWwgY2FuIGJlIHVzZWQgYnkgbW9yZSB0aGFuIG9uZSByZW5kZXIgb2JqZWN0IHNvIHRoZVxuXHRcdCAqIG1vbml0b3IgbXVzdCBtYWludGFpbiBhIGxpc3Qgb2YgcmVuZGVyIG9iamVjdHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2Vha01hcDxSZW5kZXJPYmplY3QsT2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlck9iamVjdHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgbWF0ZXJpYWwgdXNlcyBub2RlIG9iamVjdHMgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0dGhpcy5oYXNOb2RlID0gdGhpcy5jb250YWluc05vZGUoIGJ1aWxkZXIgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG5vZGUgYnVpbGRlcidzIDNEIG9iamVjdCBpcyBhbmltYXRlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLmhhc0FuaW1hdGlvbiA9IGJ1aWxkZXIub2JqZWN0LmlzU2tpbm5lZE1lc2ggPT09IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBBIGxpc3Qgb2YgYWxsIHBvc3NpYmxlIG1hdGVyaWFsIHVuaWZvcm1zXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cblx0XHQgKi9cblx0XHR0aGlzLnJlZnJlc2hVbmlmb3JtcyA9IHJlZnJlc2hVbmlmb3JtcztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjdXJyZW50IHJlbmRlciBJRCBmcm9tIHRoZSBub2RlIGZyYW1lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5yZW5kZXJJZCA9IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdCBpcyB2ZXJpZmllZCBmb3IgdGhlIGZpcnN0IHRpbWUgb2YgdGhpcyBvYnNlcnZlci5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0IGlzIHZlcmlmaWVkIGZvciB0aGUgZmlyc3QgdGltZSBvZiB0aGlzIG9ic2VydmVyLlxuXHQgKi9cblx0Zmlyc3RJbml0aWFsaXphdGlvbiggcmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0Y29uc3QgaGFzSW5pdGlhbGl6ZWQgPSB0aGlzLnJlbmRlck9iamVjdHMuaGFzKCByZW5kZXJPYmplY3QgKTtcblxuXHRcdGlmICggaGFzSW5pdGlhbGl6ZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aGlzLmdldFJlbmRlck9iamVjdERhdGEoIHJlbmRlck9iamVjdCApO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgbW9uaXRvcmluZyBkYXRhIGZvciB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBtb25pdG9yaW5nIGRhdGEuXG5cdCAqL1xuXHRnZXRSZW5kZXJPYmplY3REYXRhKCByZW5kZXJPYmplY3QgKSB7XG5cblx0XHRsZXQgZGF0YSA9IHRoaXMucmVuZGVyT2JqZWN0cy5nZXQoIHJlbmRlck9iamVjdCApO1xuXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IHsgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QgfSA9IHJlbmRlck9iamVjdDtcblxuXHRcdFx0ZGF0YSA9IHtcblx0XHRcdFx0bWF0ZXJpYWw6IHRoaXMuZ2V0TWF0ZXJpYWxEYXRhKCBtYXRlcmlhbCApLFxuXHRcdFx0XHRnZW9tZXRyeToge1xuXHRcdFx0XHRcdGlkOiBnZW9tZXRyeS5pZCxcblx0XHRcdFx0XHRhdHRyaWJ1dGVzOiB0aGlzLmdldEF0dHJpYnV0ZXNEYXRhKCBnZW9tZXRyeS5hdHRyaWJ1dGVzICksXG5cdFx0XHRcdFx0aW5kZXhWZXJzaW9uOiBnZW9tZXRyeS5pbmRleCA/IGdlb21ldHJ5LmluZGV4LnZlcnNpb24gOiBudWxsLFxuXHRcdFx0XHRcdGRyYXdSYW5nZTogeyBzdGFydDogZ2VvbWV0cnkuZHJhd1JhbmdlLnN0YXJ0LCBjb3VudDogZ2VvbWV0cnkuZHJhd1JhbmdlLmNvdW50IH1cblx0XHRcdFx0fSxcblx0XHRcdFx0d29ybGRNYXRyaXg6IG9iamVjdC5tYXRyaXhXb3JsZC5jbG9uZSgpXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoIG9iamVjdC5jZW50ZXIgKSB7XG5cblx0XHRcdFx0ZGF0YS5jZW50ZXIgPSBvYmplY3QuY2VudGVyLmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzICkge1xuXG5cdFx0XHRcdGRhdGEubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVuZGVyT2JqZWN0LmJ1bmRsZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRkYXRhLnZlcnNpb24gPSByZW5kZXJPYmplY3QuYnVuZGxlLnZlcnNpb247XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkYXRhLm1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSByZW5kZXJPYmplY3QuY29udGV4dDtcblxuXHRcdFx0XHRkYXRhLmJ1ZmZlcldpZHRoID0gd2lkdGg7XG5cdFx0XHRcdGRhdGEuYnVmZmVySGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmVuZGVyT2JqZWN0cy5zZXQoIHJlbmRlck9iamVjdCwgZGF0YSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGF0dHJpYnV0ZSBkYXRhIHN0cnVjdHVyZSBob2xkaW5nIHRoZSBhdHRyaWJ1dGVzIHZlcnNpb25zIGZvclxuXHQgKiBtb25pdG9yaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlcyAtIFRoZSBnZW9tZXRyeSBhdHRyaWJ1dGVzLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCBmb3IgbW9uaXRvcmluZyB0aGUgdmVyc2lvbnMgb2YgYXR0cmlidXRlcy5cblx0ICovXG5cdGdldEF0dHJpYnV0ZXNEYXRhKCBhdHRyaWJ1dGVzICkge1xuXG5cdFx0Y29uc3QgYXR0cmlidXRlc0RhdGEgPSB7fTtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRhdHRyaWJ1dGVzRGF0YVsgbmFtZSBdID0ge1xuXHRcdFx0XHR2ZXJzaW9uOiBhdHRyaWJ1dGUudmVyc2lvblxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhdHRyaWJ1dGVzRGF0YTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGJ1aWxkZXIncyBtYXRlcmlhbCB1c2VzXG5cdCAqIG5vZGUgcHJvcGVydGllcy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgbm9kZSBidWlsZGVyJ3MgbWF0ZXJpYWwgdXNlcyBub2RlIHByb3BlcnRpZXMgb3Igbm90LlxuXHQgKi9cblx0Y29udGFpbnNOb2RlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBidWlsZGVyLm1hdGVyaWFsO1xuXG5cdFx0Zm9yICggY29uc3QgcHJvcGVydHkgaW4gbWF0ZXJpYWwgKSB7XG5cblx0XHRcdGlmICggbWF0ZXJpYWxbIHByb3BlcnR5IF0gJiYgbWF0ZXJpYWxbIHByb3BlcnR5IF0uaXNOb2RlIClcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJ1aWxkZXIucmVuZGVyZXIubm9kZXMubW9kZWxWaWV3TWF0cml4ICE9PSBudWxsIHx8IGJ1aWxkZXIucmVuZGVyZXIubm9kZXMubW9kZWxOb3JtYWxWaWV3TWF0cml4ICE9PSBudWxsIClcblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG1hdGVyaWFsIGRhdGEgc3RydWN0dXJlIGhvbGRpbmcgdGhlIG1hdGVyaWFsIHByb3BlcnR5IHZhbHVlcyBmb3Jcblx0ICogbW9uaXRvcmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgbWF0ZXJpYWwuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IGZvciBtb25pdG9yaW5nIG1hdGVyaWFsIHByb3BlcnRpZXMuXG5cdCAqL1xuXHRnZXRNYXRlcmlhbERhdGEoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHt9O1xuXG5cdFx0Zm9yICggY29uc3QgcHJvcGVydHkgb2YgdGhpcy5yZWZyZXNoVW5pZm9ybXMgKSB7XG5cblx0XHRcdGNvbnN0IHZhbHVlID0gbWF0ZXJpYWxbIHByb3BlcnR5IF07XG5cblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuY2xvbmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIHZhbHVlLmlzVGV4dHVyZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdGRhdGFbIHByb3BlcnR5IF0gPSB7IGlkOiB2YWx1ZS5pZCwgdmVyc2lvbjogdmFsdWUudmVyc2lvbiB9O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRkYXRhWyBwcm9wZXJ0eSBdID0gdmFsdWUuY2xvbmUoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGF0YVsgcHJvcGVydHkgXSA9IHZhbHVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0IGhhcyBub3QgY2hhbmdlZCBpdHMgc3RhdGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdCBoYXMgY2hhbmdlZCBpdHMgc3RhdGUgb3Igbm90LlxuXHQgKi9cblx0ZXF1YWxzKCByZW5kZXJPYmplY3QgKSB7XG5cblx0XHRjb25zdCB7IG9iamVjdCwgbWF0ZXJpYWwsIGdlb21ldHJ5IH0gPSByZW5kZXJPYmplY3Q7XG5cblx0XHRjb25zdCByZW5kZXJPYmplY3REYXRhID0gdGhpcy5nZXRSZW5kZXJPYmplY3REYXRhKCByZW5kZXJPYmplY3QgKTtcblxuXHRcdC8vIHdvcmxkIG1hdHJpeFxuXG5cdFx0aWYgKCByZW5kZXJPYmplY3REYXRhLndvcmxkTWF0cml4LmVxdWFscyggb2JqZWN0Lm1hdHJpeFdvcmxkICkgIT09IHRydWUgKSB7XG5cblx0XHRcdHJlbmRlck9iamVjdERhdGEud29ybGRNYXRyaXguY29weSggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdC8vIG1hdGVyaWFsXG5cblx0XHRjb25zdCBtYXRlcmlhbERhdGEgPSByZW5kZXJPYmplY3REYXRhLm1hdGVyaWFsO1xuXG5cdFx0Zm9yICggY29uc3QgcHJvcGVydHkgaW4gbWF0ZXJpYWxEYXRhICkge1xuXG5cdFx0XHRjb25zdCB2YWx1ZSA9IG1hdGVyaWFsRGF0YVsgcHJvcGVydHkgXTtcblx0XHRcdGNvbnN0IG10bFZhbHVlID0gbWF0ZXJpYWxbIHByb3BlcnR5IF07XG5cblx0XHRcdGlmICggdmFsdWUuZXF1YWxzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZS5lcXVhbHMoIG10bFZhbHVlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0dmFsdWUuY29weSggbXRsVmFsdWUgKTtcblxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG10bFZhbHVlLmlzVGV4dHVyZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRpZiAoIHZhbHVlLmlkICE9PSBtdGxWYWx1ZS5pZCB8fCB2YWx1ZS52ZXJzaW9uICE9PSBtdGxWYWx1ZS52ZXJzaW9uICkge1xuXG5cdFx0XHRcdFx0dmFsdWUuaWQgPSBtdGxWYWx1ZS5pZDtcblx0XHRcdFx0XHR2YWx1ZS52ZXJzaW9uID0gbXRsVmFsdWUudmVyc2lvbjtcblxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICE9PSBtdGxWYWx1ZSApIHtcblxuXHRcdFx0XHRtYXRlcmlhbERhdGFbIHByb3BlcnR5IF0gPSBtdGxWYWx1ZTtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWxEYXRhLnRyYW5zbWlzc2lvbiA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gcmVuZGVyT2JqZWN0LmNvbnRleHQ7XG5cblx0XHRcdGlmICggcmVuZGVyT2JqZWN0RGF0YS5idWZmZXJXaWR0aCAhPT0gd2lkdGggfHwgcmVuZGVyT2JqZWN0RGF0YS5idWZmZXJIZWlnaHQgIT09IGhlaWdodCApIHtcblxuXHRcdFx0XHRyZW5kZXJPYmplY3REYXRhLmJ1ZmZlcldpZHRoID0gd2lkdGg7XG5cdFx0XHRcdHJlbmRlck9iamVjdERhdGEuYnVmZmVySGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gZ2VvbWV0cnlcblxuXHRcdGNvbnN0IHN0b3JlZEdlb21ldHJ5RGF0YSA9IHJlbmRlck9iamVjdERhdGEuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cdFx0Y29uc3Qgc3RvcmVkQXR0cmlidXRlcyA9IHN0b3JlZEdlb21ldHJ5RGF0YS5hdHRyaWJ1dGVzO1xuXG5cdFx0Y29uc3Qgc3RvcmVkQXR0cmlidXRlTmFtZXMgPSBPYmplY3Qua2V5cyggc3RvcmVkQXR0cmlidXRlcyApO1xuXHRcdGNvbnN0IGN1cnJlbnRBdHRyaWJ1dGVOYW1lcyA9IE9iamVjdC5rZXlzKCBhdHRyaWJ1dGVzICk7XG5cblx0XHRpZiAoIHN0b3JlZEdlb21ldHJ5RGF0YS5pZCAhPT0gZ2VvbWV0cnkuaWQgKSB7XG5cblx0XHRcdHN0b3JlZEdlb21ldHJ5RGF0YS5pZCA9IGdlb21ldHJ5LmlkO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzdG9yZWRBdHRyaWJ1dGVOYW1lcy5sZW5ndGggIT09IGN1cnJlbnRBdHRyaWJ1dGVOYW1lcy5sZW5ndGggKSB7XG5cblx0XHRcdHJlbmRlck9iamVjdERhdGEuZ2VvbWV0cnkuYXR0cmlidXRlcyA9IHRoaXMuZ2V0QXR0cmlidXRlc0RhdGEoIGF0dHJpYnV0ZXMgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbXBhcmUgZWFjaCBhdHRyaWJ1dGVcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgb2Ygc3RvcmVkQXR0cmlidXRlTmFtZXMgKSB7XG5cblx0XHRcdGNvbnN0IHN0b3JlZEF0dHJpYnV0ZURhdGEgPSBzdG9yZWRBdHRyaWJ1dGVzWyBuYW1lIF07XG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGlmICggYXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gYXR0cmlidXRlIHdhcyByZW1vdmVkXG5cdFx0XHRcdGRlbGV0ZSBzdG9yZWRBdHRyaWJ1dGVzWyBuYW1lIF07XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHN0b3JlZEF0dHJpYnV0ZURhdGEudmVyc2lvbiAhPT0gYXR0cmlidXRlLnZlcnNpb24gKSB7XG5cblx0XHRcdFx0c3RvcmVkQXR0cmlidXRlRGF0YS52ZXJzaW9uID0gYXR0cmlidXRlLnZlcnNpb247XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY2hlY2sgaW5kZXhcblxuXHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0Y29uc3Qgc3RvcmVkSW5kZXhWZXJzaW9uID0gc3RvcmVkR2VvbWV0cnlEYXRhLmluZGV4VmVyc2lvbjtcblx0XHRjb25zdCBjdXJyZW50SW5kZXhWZXJzaW9uID0gaW5kZXggPyBpbmRleC52ZXJzaW9uIDogbnVsbDtcblxuXHRcdGlmICggc3RvcmVkSW5kZXhWZXJzaW9uICE9PSBjdXJyZW50SW5kZXhWZXJzaW9uICkge1xuXG5cdFx0XHRzdG9yZWRHZW9tZXRyeURhdGEuaW5kZXhWZXJzaW9uID0gY3VycmVudEluZGV4VmVyc2lvbjtcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdC8vIGNoZWNrIGRyYXdSYW5nZVxuXG5cdFx0aWYgKCBzdG9yZWRHZW9tZXRyeURhdGEuZHJhd1JhbmdlLnN0YXJ0ICE9PSBnZW9tZXRyeS5kcmF3UmFuZ2Uuc3RhcnQgfHwgc3RvcmVkR2VvbWV0cnlEYXRhLmRyYXdSYW5nZS5jb3VudCAhPT0gZ2VvbWV0cnkuZHJhd1JhbmdlLmNvdW50ICkge1xuXG5cdFx0XHRzdG9yZWRHZW9tZXRyeURhdGEuZHJhd1JhbmdlLnN0YXJ0ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLnN0YXJ0O1xuXHRcdFx0c3RvcmVkR2VvbWV0cnlEYXRhLmRyYXdSYW5nZS5jb3VudCA9IGdlb21ldHJ5LmRyYXdSYW5nZS5jb3VudDtcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIHRhcmdldHNcblxuXHRcdGlmICggcmVuZGVyT2JqZWN0RGF0YS5tb3JwaFRhcmdldEluZmx1ZW5jZXMgKSB7XG5cblx0XHRcdGxldCBtb3JwaENoYW5nZWQgPSBmYWxzZTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcmVuZGVyT2JqZWN0RGF0YS5tb3JwaFRhcmdldEluZmx1ZW5jZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggcmVuZGVyT2JqZWN0RGF0YS5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhPT0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICkge1xuXG5cdFx0XHRcdFx0bW9ycGhDaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtb3JwaENoYW5nZWQgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdC8vIGNlbnRlclxuXG5cdFx0aWYgKCByZW5kZXJPYmplY3REYXRhLmNlbnRlciApIHtcblxuXHRcdFx0aWYgKCByZW5kZXJPYmplY3REYXRhLmNlbnRlci5lcXVhbHMoIG9iamVjdC5jZW50ZXIgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0cmVuZGVyT2JqZWN0RGF0YS5jZW50ZXIuY29weSggb2JqZWN0LmNlbnRlciApO1xuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBidW5kbGVcblxuXHRcdGlmICggcmVuZGVyT2JqZWN0LmJ1bmRsZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0cmVuZGVyT2JqZWN0RGF0YS52ZXJzaW9uID0gcmVuZGVyT2JqZWN0LmJ1bmRsZS52ZXJzaW9uO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIHJlbmRlciBvYmplY3QgcmVxdWlyZXMgYSByZWZyZXNoLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QuXG5cdCAqIEBwYXJhbSB7Tm9kZUZyYW1lfSBub2RlRnJhbWUgLSBUaGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0IHJlcXVpcmVzIGEgcmVmcmVzaCBvciBub3QuXG5cdCAqL1xuXHRuZWVkc1JlZnJlc2goIHJlbmRlck9iamVjdCwgbm9kZUZyYW1lICkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc05vZGUgfHwgdGhpcy5oYXNBbmltYXRpb24gfHwgdGhpcy5maXJzdEluaXRpYWxpemF0aW9uKCByZW5kZXJPYmplY3QgKSApXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdGNvbnN0IHsgcmVuZGVySWQgfSA9IG5vZGVGcmFtZTtcblxuXHRcdGlmICggdGhpcy5yZW5kZXJJZCAhPT0gcmVuZGVySWQgKSB7XG5cblx0XHRcdHRoaXMucmVuZGVySWQgPSByZW5kZXJJZDtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpc1N0YXRpYyA9IHJlbmRlck9iamVjdC5vYmplY3Quc3RhdGljID09PSB0cnVlO1xuXHRcdGNvbnN0IGlzQnVuZGxlID0gcmVuZGVyT2JqZWN0LmJ1bmRsZSAhPT0gbnVsbCAmJiByZW5kZXJPYmplY3QuYnVuZGxlLnN0YXRpYyA9PT0gdHJ1ZSAmJiB0aGlzLmdldFJlbmRlck9iamVjdERhdGEoIHJlbmRlck9iamVjdCApLnZlcnNpb24gPT09IHJlbmRlck9iamVjdC5idW5kbGUudmVyc2lvbjtcblxuXHRcdGlmICggaXNTdGF0aWMgfHwgaXNCdW5kbGUgKVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0Y29uc3Qgbm90RXF1YWwgPSB0aGlzLmVxdWFscyggcmVuZGVyT2JqZWN0ICkgIT09IHRydWU7XG5cblx0XHRyZXR1cm4gbm90RXF1YWw7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVNYXRlcmlhbE9ic2VydmVyO1xuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCB7IE1hdHJpeDIgfSBmcm9tICcuLi8uLi9tYXRoL01hdHJpeDIuanMnO1xuaW1wb3J0IHsgTWF0cml4MyB9IGZyb20gJy4uLy4uL21hdGgvTWF0cml4My5qcyc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3I0LmpzJztcblxuLy8gY3lyYjUzIChjKSAyMDE4IGJyeWMgKGdpdGh1Yi5jb20vYnJ5YykuIExpY2Vuc2U6IFB1YmxpYyBkb21haW4uIEF0dHJpYnV0aW9uIGFwcHJlY2lhdGVkLlxuLy8gQSBmYXN0IGFuZCBzaW1wbGUgNjQtYml0IChvciA1My1iaXQpIHN0cmluZyBoYXNoIGZ1bmN0aW9uIHdpdGggZGVjZW50IGNvbGxpc2lvbiByZXNpc3RhbmNlLlxuLy8gTGFyZ2VseSBpbnNwaXJlZCBieSBNdXJtdXJIYXNoMi8zLCBidXQgd2l0aCBhIGZvY3VzIG9uIHNwZWVkL3NpbXBsaWNpdHkuXG4vLyBTZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzYxNjQ2MS9nZW5lcmF0ZS1hLWhhc2gtZnJvbS1zdHJpbmctaW4tamF2YXNjcmlwdC81MjE3MTQ4MCM1MjE3MTQ4MFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JyeWMvY29kZS9ibG9iL21hc3Rlci9qc2hhc2gvZXhwZXJpbWVudGFsL2N5cmI1My5qc1xuZnVuY3Rpb24gY3lyYjUzKCB2YWx1ZSwgc2VlZCA9IDAgKSB7XG5cblx0bGV0IGgxID0gMHhkZWFkYmVlZiBeIHNlZWQsIGgyID0gMHg0MWM2Y2U1NyBeIHNlZWQ7XG5cblx0aWYgKCB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5ICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCB2YWw7IGkgPCB2YWx1ZS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhbCA9IHZhbHVlWyBpIF07XG5cdFx0XHRoMSA9IE1hdGguaW11bCggaDEgXiB2YWwsIDI2NTQ0MzU3NjEgKTtcblx0XHRcdGgyID0gTWF0aC5pbXVsKCBoMiBeIHZhbCwgMTU5NzMzNDY3NyApO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGNoOyBpIDwgdmFsdWUubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjaCA9IHZhbHVlLmNoYXJDb2RlQXQoIGkgKTtcblx0XHRcdGgxID0gTWF0aC5pbXVsKCBoMSBeIGNoLCAyNjU0NDM1NzYxICk7XG5cdFx0XHRoMiA9IE1hdGguaW11bCggaDIgXiBjaCwgMTU5NzMzNDY3NyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRoMSA9IE1hdGguaW11bCggaDEgXiAoIGgxID4+PiAxNiApLCAyMjQ2ODIyNTA3ICk7XG5cdGgxIF49IE1hdGguaW11bCggaDIgXiAoIGgyID4+PiAxMyApLCAzMjY2NDg5OTA5ICk7XG5cdGgyID0gTWF0aC5pbXVsKCBoMiBeICggaDIgPj4+IDE2ICksIDIyNDY4MjI1MDcgKTtcblx0aDIgXj0gTWF0aC5pbXVsKCBoMSBeICggaDEgPj4+IDEzICksIDMyNjY0ODk5MDkgKTtcblxuXHRyZXR1cm4gNDI5NDk2NzI5NiAqICggMjA5NzE1MSAmIGgyICkgKyAoIGgxID4+PiAwICk7XG5cbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhIGhhc2ggZm9yIHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gYmUgaGFzaGVkLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgaGFzaC5cbiAqL1xuZXhwb3J0IGNvbnN0IGhhc2hTdHJpbmcgPSAoIHN0ciApID0+IGN5cmI1Myggc3RyICk7XG5cbi8qKlxuICogQ29tcHV0ZXMgYSBoYXNoIGZvciB0aGUgZ2l2ZW4gYXJyYXkuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIFRoZSBhcnJheSB0byBiZSBoYXNoZWQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBoYXNoLlxuICovXG5leHBvcnQgY29uc3QgaGFzaEFycmF5ID0gKCBhcnJheSApID0+IGN5cmI1MyggYXJyYXkgKTtcblxuLyoqXG4gKiBDb21wdXRlcyBhIGhhc2ggZm9yIHRoZSBnaXZlbiBsaXN0IG9mIHBhcmFtZXRlcnMuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHsuLi5udW1iZXJ9IHBhcmFtcyAtIEEgbGlzdCBvZiBwYXJhbWV0ZXJzLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgaGFzaC5cbiAqL1xuZXhwb3J0IGNvbnN0IGhhc2ggPSAoIC4uLnBhcmFtcyApID0+IGN5cmI1MyggcGFyYW1zICk7XG5cbi8qKlxuICogQ29tcHV0ZXMgYSBjYWNoZSBrZXkgZm9yIHRoZSBnaXZlbiBub2RlLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7T2JqZWN0fE5vZGV9IG9iamVjdCAtIFRoZSBvYmplY3QgdG8gYmUgaGFzaGVkLlxuICogQHBhcmFtIHtib29sZWFufSBbZm9yY2U9ZmFsc2VdIC0gV2hldGhlciB0byBmb3JjZSBhIGNhY2hlIGtleSBjb21wdXRhdGlvbiBvciBub3QuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBoYXNoLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FjaGVLZXkoIG9iamVjdCwgZm9yY2UgPSBmYWxzZSApIHtcblxuXHRjb25zdCB2YWx1ZXMgPSBbXTtcblxuXHRpZiAoIG9iamVjdC5pc05vZGUgPT09IHRydWUgKSB7XG5cblx0XHR2YWx1ZXMucHVzaCggb2JqZWN0LmlkICk7XG5cdFx0b2JqZWN0ID0gb2JqZWN0LmdldFNlbGYoKTtcblxuXHR9XG5cblx0Zm9yICggY29uc3QgeyBwcm9wZXJ0eSwgY2hpbGROb2RlIH0gb2YgZ2V0Tm9kZUNoaWxkcmVuKCBvYmplY3QgKSApIHtcblxuXHRcdHZhbHVlcy5wdXNoKCBjeXJiNTMoIHByb3BlcnR5LnNsaWNlKCAwLCAtIDQgKSApLCBjaGlsZE5vZGUuZ2V0Q2FjaGVLZXkoIGZvcmNlICkgKTtcblxuXHR9XG5cblx0cmV0dXJuIGN5cmI1MyggdmFsdWVzICk7XG5cbn1cblxuLyoqXG4gKiBUaGlzIGdlbmVyYXRvciBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBpdGVyYXRlIG92ZXIgdGhlIG5vZGUgY2hpbGRyZW5cbiAqIG9mIHRoZSBnaXZlbiBvYmplY3QuXG4gKlxuICogQGdlbmVyYXRvclxuICogQHBhcmFtIHtPYmplY3R9IG5vZGUgLSBUaGUgb2JqZWN0IHRvIGJlIGhhc2hlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3RvSlNPTj1mYWxzZV0gLSBXaGV0aGVyIHRvIHJldHVybiBKU09OIG9yIG5vdC5cbiAqIEB5aWVsZHMge09iamVjdH0gQSByZXN1bHQgbm9kZSBob2xkaW5nIHRoZSBwcm9wZXJ0eSwgaW5kZXggKGlmIGF2YWlsYWJsZSkgYW5kIHRoZSBjaGlsZCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24qIGdldE5vZGVDaGlsZHJlbiggbm9kZSwgdG9KU09OID0gZmFsc2UgKSB7XG5cblx0Zm9yICggY29uc3QgcHJvcGVydHkgaW4gbm9kZSApIHtcblxuXHRcdC8vIElnbm9yZSBwcml2YXRlIHByb3BlcnRpZXMuXG5cdFx0aWYgKCBwcm9wZXJ0eS5zdGFydHNXaXRoKCAnXycgKSA9PT0gdHJ1ZSApIGNvbnRpbnVlO1xuXG5cdFx0Y29uc3Qgb2JqZWN0ID0gbm9kZVsgcHJvcGVydHkgXTtcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggb2JqZWN0ICkgPT09IHRydWUgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgY2hpbGQgPSBvYmplY3RbIGkgXTtcblxuXHRcdFx0XHRpZiAoIGNoaWxkICYmICggY2hpbGQuaXNOb2RlID09PSB0cnVlIHx8IHRvSlNPTiAmJiB0eXBlb2YgY2hpbGQudG9KU09OID09PSAnZnVuY3Rpb24nICkgKSB7XG5cblx0XHRcdFx0XHR5aWVsZCB7IHByb3BlcnR5LCBpbmRleDogaSwgY2hpbGROb2RlOiBjaGlsZCB9O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb2JqZWN0ICYmIG9iamVjdC5pc05vZGUgPT09IHRydWUgKSB7XG5cblx0XHRcdHlpZWxkIHsgcHJvcGVydHksIGNoaWxkTm9kZTogb2JqZWN0IH07XG5cblx0XHR9IGVsc2UgaWYgKCB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyApIHtcblxuXHRcdFx0Zm9yICggY29uc3Qgc3ViUHJvcGVydHkgaW4gb2JqZWN0ICkge1xuXG5cdFx0XHRcdGNvbnN0IGNoaWxkID0gb2JqZWN0WyBzdWJQcm9wZXJ0eSBdO1xuXG5cdFx0XHRcdGlmICggY2hpbGQgJiYgKCBjaGlsZC5pc05vZGUgPT09IHRydWUgfHwgdG9KU09OICYmIHR5cGVvZiBjaGlsZC50b0pTT04gPT09ICdmdW5jdGlvbicgKSApIHtcblxuXHRcdFx0XHRcdHlpZWxkIHsgcHJvcGVydHksIGluZGV4OiBzdWJQcm9wZXJ0eSwgY2hpbGROb2RlOiBjaGlsZCB9O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jb25zdCB0eXBlRnJvbUxlbmd0aCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hcCggW1xuXHRbIDEsICdmbG9hdCcgXSxcblx0WyAyLCAndmVjMicgXSxcblx0WyAzLCAndmVjMycgXSxcblx0WyA0LCAndmVjNCcgXSxcblx0WyA5LCAnbWF0MycgXSxcblx0WyAxNiwgJ21hdDQnIF1cbl0gKTtcblxuY29uc3QgZGF0YUZyb21PYmplY3QgPSAvKkBfX1BVUkVfXyovIG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGF0YSB0eXBlIGZvciB0aGUgZ2l2ZW4gdGhlIGxlbmd0aC5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIC0gVGhlIGxlbmd0aC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGRhdGEgdHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGVGcm9tTGVuZ3RoKCBsZW5ndGggKSB7XG5cblx0cmV0dXJuIHR5cGVGcm9tTGVuZ3RoLmdldCggbGVuZ3RoICk7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0eXBlZCBhcnJheSBmb3IgdGhlIGdpdmVuIGRhdGEgdHlwZS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBkYXRhIHR5cGUuXG4gKiBAcmV0dXJuIHtUeXBlZEFycmF5fSBUaGUgdHlwZWQgYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlZEFycmF5RnJvbVR5cGUoIHR5cGUgKSB7XG5cblx0Ly8gSGFuZGxlIGNvbXBvbmVudCB0eXBlIGZvciB2ZWN0b3JzIGFuZCBtYXRyaWNlc1xuXHRpZiAoIC9baXVdP3ZlY1xcZC8udGVzdCggdHlwZSApICkge1xuXG5cdFx0Ly8gSGFuZGxlIGludCB2ZWN0b3JzXG5cdFx0aWYgKCB0eXBlLnN0YXJ0c1dpdGgoICdpdmVjJyApICkgcmV0dXJuIEludDMyQXJyYXk7XG5cdFx0Ly8gSGFuZGxlIHVpbnQgdmVjdG9yc1xuXHRcdGlmICggdHlwZS5zdGFydHNXaXRoKCAndXZlYycgKSApIHJldHVybiBVaW50MzJBcnJheTtcblx0XHQvLyBEZWZhdWx0IHRvIGZsb2F0IHZlY3RvcnNcblx0XHRyZXR1cm4gRmxvYXQzMkFycmF5O1xuXG5cdH1cblxuXHQvLyBIYW5kbGUgbWF0cmljZXMgKGFsd2F5cyBmbG9hdClcblx0aWYgKCAvbWF0XFxkLy50ZXN0KCB0eXBlICkgKSByZXR1cm4gRmxvYXQzMkFycmF5O1xuXG5cdC8vIEJhc2ljIHR5cGVzXG5cdGlmICggL2Zsb2F0Ly50ZXN0KCB0eXBlICkgKSByZXR1cm4gRmxvYXQzMkFycmF5O1xuXHRpZiAoIC91aW50Ly50ZXN0KCB0eXBlICkgKSByZXR1cm4gVWludDMyQXJyYXk7XG5cdGlmICggL2ludC8udGVzdCggdHlwZSApICkgcmV0dXJuIEludDMyQXJyYXk7XG5cblx0dGhyb3cgbmV3IEVycm9yKCBgVEhSRUUuTm9kZVV0aWxzOiBVbnN1cHBvcnRlZCB0eXBlOiAke3R5cGV9YCApO1xuXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbGVuZ3RoIGZvciB0aGUgZ2l2ZW4gZGF0YSB0eXBlLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIGRhdGEgdHlwZS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGxlbmd0aC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExlbmd0aEZyb21UeXBlKCB0eXBlICkge1xuXG5cdGlmICggL2Zsb2F0fGludHx1aW50Ly50ZXN0KCB0eXBlICkgKSByZXR1cm4gMTtcblx0aWYgKCAvdmVjMi8udGVzdCggdHlwZSApICkgcmV0dXJuIDI7XG5cdGlmICggL3ZlYzMvLnRlc3QoIHR5cGUgKSApIHJldHVybiAzO1xuXHRpZiAoIC92ZWM0Ly50ZXN0KCB0eXBlICkgKSByZXR1cm4gNDtcblx0aWYgKCAvbWF0Mi8udGVzdCggdHlwZSApICkgcmV0dXJuIDQ7XG5cdGlmICggL21hdDMvLnRlc3QoIHR5cGUgKSApIHJldHVybiA5O1xuXHRpZiAoIC9tYXQ0Ly50ZXN0KCB0eXBlICkgKSByZXR1cm4gMTY7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlRTTDogVW5zdXBwb3J0ZWQgdHlwZTonLCB0eXBlICk7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkYXRhIHR5cGUgZm9yIHRoZSBnaXZlbiB2YWx1ZS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgLSBUaGUgdmFsdWUuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZGF0YSB0eXBlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVUeXBlKCB2YWx1ZSApIHtcblxuXHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblxuXHRjb25zdCB0eXBlT2YgPSB0eXBlb2YgdmFsdWU7XG5cblx0aWYgKCB2YWx1ZS5pc05vZGUgPT09IHRydWUgKSB7XG5cblx0XHRyZXR1cm4gJ25vZGUnO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVPZiA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRyZXR1cm4gJ2Zsb2F0JztcblxuXHR9IGVsc2UgaWYgKCB0eXBlT2YgPT09ICdib29sZWFuJyApIHtcblxuXHRcdHJldHVybiAnYm9vbCc7XG5cblx0fSBlbHNlIGlmICggdHlwZU9mID09PSAnc3RyaW5nJyApIHtcblxuXHRcdHJldHVybiAnc3RyaW5nJztcblxuXHR9IGVsc2UgaWYgKCB0eXBlT2YgPT09ICdmdW5jdGlvbicgKSB7XG5cblx0XHRyZXR1cm4gJ3NoYWRlcic7XG5cblx0fSBlbHNlIGlmICggdmFsdWUuaXNWZWN0b3IyID09PSB0cnVlICkge1xuXG5cdFx0cmV0dXJuICd2ZWMyJztcblxuXHR9IGVsc2UgaWYgKCB2YWx1ZS5pc1ZlY3RvcjMgPT09IHRydWUgKSB7XG5cblx0XHRyZXR1cm4gJ3ZlYzMnO1xuXG5cdH0gZWxzZSBpZiAoIHZhbHVlLmlzVmVjdG9yNCA9PT0gdHJ1ZSApIHtcblxuXHRcdHJldHVybiAndmVjNCc7XG5cblx0fSBlbHNlIGlmICggdmFsdWUuaXNNYXRyaXgyID09PSB0cnVlICkge1xuXG5cdFx0cmV0dXJuICdtYXQyJztcblxuXHR9IGVsc2UgaWYgKCB2YWx1ZS5pc01hdHJpeDMgPT09IHRydWUgKSB7XG5cblx0XHRyZXR1cm4gJ21hdDMnO1xuXG5cdH0gZWxzZSBpZiAoIHZhbHVlLmlzTWF0cml4NCA9PT0gdHJ1ZSApIHtcblxuXHRcdHJldHVybiAnbWF0NCc7XG5cblx0fSBlbHNlIGlmICggdmFsdWUuaXNDb2xvciA9PT0gdHJ1ZSApIHtcblxuXHRcdHJldHVybiAnY29sb3InO1xuXG5cdH0gZWxzZSBpZiAoIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgKSB7XG5cblx0XHRyZXR1cm4gJ0FycmF5QnVmZmVyJztcblxuXHR9XG5cblx0cmV0dXJuIG51bGw7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZS9vYmplY3QgZm9yIHRoZSBnaXZlbiBkYXRhIHR5cGUgYW5kIHBhcmFtZXRlcnMuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgZ2l2ZW4gdHlwZS5cbiAqIEBwYXJhbSB7Li4uYW55fSBwYXJhbXMgLSBBIHBhcmFtZXRlciBsaXN0LlxuICogQHJldHVybiB7YW55fSBUaGUgdmFsdWUvb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVGcm9tVHlwZSggdHlwZSwgLi4ucGFyYW1zICkge1xuXG5cdGNvbnN0IGxhc3Q0ID0gdHlwZSA/IHR5cGUuc2xpY2UoIC0gNCApIDogdW5kZWZpbmVkO1xuXG5cdGlmICggcGFyYW1zLmxlbmd0aCA9PT0gMSApIHsgLy8gZW5zdXJlIHNhbWUgYmVoYXZpb3VyIGFzIGluIE5vZGVCdWlsZGVyLmZvcm1hdCgpXG5cblx0XHRpZiAoIGxhc3Q0ID09PSAndmVjMicgKSBwYXJhbXMgPSBbIHBhcmFtc1sgMCBdLCBwYXJhbXNbIDAgXSBdO1xuXHRcdGVsc2UgaWYgKCBsYXN0NCA9PT0gJ3ZlYzMnICkgcGFyYW1zID0gWyBwYXJhbXNbIDAgXSwgcGFyYW1zWyAwIF0sIHBhcmFtc1sgMCBdIF07XG5cdFx0ZWxzZSBpZiAoIGxhc3Q0ID09PSAndmVjNCcgKSBwYXJhbXMgPSBbIHBhcmFtc1sgMCBdLCBwYXJhbXNbIDAgXSwgcGFyYW1zWyAwIF0sIHBhcmFtc1sgMCBdIF07XG5cblx0fVxuXG5cdGlmICggdHlwZSA9PT0gJ2NvbG9yJyApIHtcblxuXHRcdHJldHVybiBuZXcgQ29sb3IoIC4uLnBhcmFtcyApO1xuXG5cdH0gZWxzZSBpZiAoIGxhc3Q0ID09PSAndmVjMicgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoIC4uLnBhcmFtcyApO1xuXG5cdH0gZWxzZSBpZiAoIGxhc3Q0ID09PSAndmVjMycgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFZlY3RvcjMoIC4uLnBhcmFtcyApO1xuXG5cdH0gZWxzZSBpZiAoIGxhc3Q0ID09PSAndmVjNCcgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFZlY3RvcjQoIC4uLnBhcmFtcyApO1xuXG5cdH0gZWxzZSBpZiAoIGxhc3Q0ID09PSAnbWF0MicgKSB7XG5cblx0XHRyZXR1cm4gbmV3IE1hdHJpeDIoIC4uLnBhcmFtcyApO1xuXG5cdH0gZWxzZSBpZiAoIGxhc3Q0ID09PSAnbWF0MycgKSB7XG5cblx0XHRyZXR1cm4gbmV3IE1hdHJpeDMoIC4uLnBhcmFtcyApO1xuXG5cdH0gZWxzZSBpZiAoIGxhc3Q0ID09PSAnbWF0NCcgKSB7XG5cblx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoIC4uLnBhcmFtcyApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGUgPT09ICdib29sJyApIHtcblxuXHRcdHJldHVybiBwYXJhbXNbIDAgXSB8fCBmYWxzZTtcblxuXHR9IGVsc2UgaWYgKCAoIHR5cGUgPT09ICdmbG9hdCcgKSB8fCAoIHR5cGUgPT09ICdpbnQnICkgfHwgKCB0eXBlID09PSAndWludCcgKSApIHtcblxuXHRcdHJldHVybiBwYXJhbXNbIDAgXSB8fCAwO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGUgPT09ICdzdHJpbmcnICkge1xuXG5cdFx0cmV0dXJuIHBhcmFtc1sgMCBdIHx8ICcnO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGUgPT09ICdBcnJheUJ1ZmZlcicgKSB7XG5cblx0XHRyZXR1cm4gYmFzZTY0VG9BcnJheUJ1ZmZlciggcGFyYW1zWyAwIF0gKTtcblxuXHR9XG5cblx0cmV0dXJuIG51bGw7XG5cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBvYmplY3QgZGF0YSB0aGF0IGNhbiBiZSBzaGFyZWQgYmV0d2VlbiBkaWZmZXJlbnQgcmVuZGVyaW5nIHN0ZXBzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBUaGUgb2JqZWN0IHRvIGdldCB0aGUgZGF0YSBmb3IuXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBvYmplY3QgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGFGcm9tT2JqZWN0KCBvYmplY3QgKSB7XG5cblx0bGV0IGRhdGEgPSBkYXRhRnJvbU9iamVjdC5nZXQoIG9iamVjdCApO1xuXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0ZGF0YSA9IHt9O1xuXHRcdGRhdGFGcm9tT2JqZWN0LnNldCggb2JqZWN0LCBkYXRhICk7XG5cblx0fVxuXG5cdHJldHVybiBkYXRhO1xuXG59XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGFycmF5IGJ1ZmZlciB0byBhIEJhc2U2NCBzdHJpbmcuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgLSBUaGUgYXJyYXkgYnVmZmVyLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgQmFzZTY0IHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFycmF5QnVmZmVyVG9CYXNlNjQoIGFycmF5QnVmZmVyICkge1xuXG5cdGxldCBjaGFycyA9ICcnO1xuXG5cdGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoIGFycmF5QnVmZmVyICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0Y2hhcnMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSggYXJyYXlbIGkgXSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYnRvYSggY2hhcnMgKTtcblxufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBCYXNlNjQgc3RyaW5nIHRvIGFuIGFycmF5IGJ1ZmZlci5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0IC0gVGhlIEJhc2U2NCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gVGhlIGFycmF5IGJ1ZmZlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NFRvQXJyYXlCdWZmZXIoIGJhc2U2NCApIHtcblxuXHRyZXR1cm4gVWludDhBcnJheS5mcm9tKCBhdG9iKCBiYXNlNjQgKSwgYyA9PiBjLmNoYXJDb2RlQXQoIDAgKSApLmJ1ZmZlcjtcblxufVxuIiwiLyoqXG4gKiBQb3NzaWJsZSBzaGFkZXIgc3RhZ2VzLlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBWRVJURVggVGhlIHZlcnRleCBzaGFkZXIgc3RhZ2UuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gRlJBR01FTlQgVGhlIGZyYWdtZW50IHNoYWRlciBzdGFnZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE5vZGVTaGFkZXJTdGFnZSA9IHtcblx0VkVSVEVYOiAndmVydGV4Jyxcblx0RlJBR01FTlQ6ICdmcmFnbWVudCdcbn07XG5cbi8qKlxuICogVXBkYXRlIHR5cGVzIG9mIGEgbm9kZS5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gTk9ORSBUaGUgdXBkYXRlIG1ldGhvZCBpcyBub3QgZXhlY3V0ZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gRlJBTUUgVGhlIHVwZGF0ZSBtZXRob2QgaXMgZXhlY3V0ZWQgcGVyIGZyYW1lLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFJFTkRFUiBUaGUgdXBkYXRlIG1ldGhvZCBpcyBleGVjdXRlZCBwZXIgcmVuZGVyLiBBIGZyYW1lIG1pZ2h0IGJlIHByb2R1Y2VkIGJ5IG11bHRpcGxlIHJlbmRlciBjYWxscyBzbyB0aGlzIHZhbHVlIGFsbG93cyBtb3JlIGRldGFpbGVkIHVwZGF0ZXMgdGhhbiBGUkFNRS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBPQkpFQ1QgVGhlIHVwZGF0ZSBtZXRob2QgaXMgZXhlY3V0ZWQgcGVyIHtAbGluayBPYmplY3QzRH0gdGhhdCB1c2VzIHRoZSBub2RlIGZvciByZW5kZXJpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBOb2RlVXBkYXRlVHlwZSA9IHtcblx0Tk9ORTogJ25vbmUnLFxuXHRGUkFNRTogJ2ZyYW1lJyxcblx0UkVOREVSOiAncmVuZGVyJyxcblx0T0JKRUNUOiAnb2JqZWN0J1xufTtcblxuLyoqXG4gKiBEYXRhIHR5cGVzIG9mIGEgbm9kZS5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gQk9PTEVBTiBCb29sZWFuIHR5cGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gSU5URUdFUiBJbnRlZ2VyIHR5cGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gRkxPQVQgRmxvYXQgdHlwZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBWRUNUT1IyIFR3by1kaW1lbnNpb25hbCB2ZWN0b3IgdHlwZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBWRUNUT1IzIFRocmVlLWRpbWVuc2lvbmFsIHZlY3RvciB0eXBlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFZFQ1RPUjQgRm91ci1kaW1lbnNpb25hbCB2ZWN0b3IgdHlwZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBNQVRSSVgyIDJ4MiBtYXRyaXggdHlwZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBNQVRSSVgzIDN4MyBtYXRyaXggdHlwZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBNQVRSSVg0IDR4NCBtYXRyaXggdHlwZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE5vZGVUeXBlID0ge1xuXHRCT09MRUFOOiAnYm9vbCcsXG5cdElOVEVHRVI6ICdpbnQnLFxuXHRGTE9BVDogJ2Zsb2F0Jyxcblx0VkVDVE9SMjogJ3ZlYzInLFxuXHRWRUNUT1IzOiAndmVjMycsXG5cdFZFQ1RPUjQ6ICd2ZWM0Jyxcblx0TUFUUklYMjogJ21hdDInLFxuXHRNQVRSSVgzOiAnbWF0MycsXG5cdE1BVFJJWDQ6ICdtYXQ0J1xufTtcblxuLyoqXG4gKiBBY2Nlc3MgdHlwZXMgb2YgYSBub2RlLiBUaGVzZSBhcmUgcmVsZXZhbnQgZm9yIGNvbXB1dGUgYW5kIHN0b3JhZ2UgdXNhZ2UuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFJFQURfT05MWSBSZWFkLW9ubHkgYWNjZXNzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gV1JJVEVfT05MWSBXcml0ZS1vbmx5IGFjY2Vzcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRUFEX1dSSVRFIFJlYWQgYW5kIHdyaXRlIGFjY2Vzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IE5vZGVBY2Nlc3MgPSB7XG5cdFJFQURfT05MWTogJ3JlYWRPbmx5Jyxcblx0V1JJVEVfT05MWTogJ3dyaXRlT25seScsXG5cdFJFQURfV1JJVEU6ICdyZWFkV3JpdGUnLFxufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTaGFkZXJTdGFnZXMgPSBbICdmcmFnbWVudCcsICd2ZXJ0ZXgnIF07XG5leHBvcnQgY29uc3QgZGVmYXVsdEJ1aWxkU3RhZ2VzID0gWyAnc2V0dXAnLCAnYW5hbHl6ZScsICdnZW5lcmF0ZScgXTtcbmV4cG9ydCBjb25zdCBzaGFkZXJTdGFnZXMgPSBbIC4uLmRlZmF1bHRTaGFkZXJTdGFnZXMsICdjb21wdXRlJyBdO1xuZXhwb3J0IGNvbnN0IHZlY3RvckNvbXBvbmVudHMgPSBbICd4JywgJ3knLCAneicsICd3JyBdO1xuIiwiaW1wb3J0IHsgTm9kZVVwZGF0ZVR5cGUgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBnZXROb2RlQ2hpbGRyZW4sIGdldENhY2hlS2V5LCBoYXNoIH0gZnJvbSAnLi9Ob2RlVXRpbHMuanMnO1xuXG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuLi8uLi9jb3JlL0V2ZW50RGlzcGF0Y2hlci5qcyc7XG5pbXBvcnQgeyBNYXRoVXRpbHMgfSBmcm9tICcuLi8uLi9tYXRoL01hdGhVdGlscy5qcyc7XG5cbmxldCBfbm9kZUlkID0gMDtcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgbm9kZXMuXG4gKlxuICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlclxuICovXG5jbGFzcyBOb2RlIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ05vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IG5vZGVUeXBlIC0gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlVHlwZSA9IG51bGwgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdHlwZS4gVGhpcyByZXByZXNlbnRzIHRoZSByZXN1bHQgdHlwZSBvZiB0aGUgbm9kZSAoZS5nLiBgZmxvYXRgIG9yIGB2ZWMzYCkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlVHlwZSA9IG5vZGVUeXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVwZGF0ZSB0eXBlIG9mIHRoZSBub2RlJ3Mge0BsaW5rIE5vZGUjdXBkYXRlfSBtZXRob2QuIFBvc3NpYmxlIHZhbHVlcyBhcmUgbGlzdGVkIGluIHtAbGluayBOb2RlVXBkYXRlVHlwZX0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0ICdub25lJ1xuXHRcdCAqL1xuXHRcdHRoaXMudXBkYXRlVHlwZSA9IE5vZGVVcGRhdGVUeXBlLk5PTkU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdXBkYXRlIHR5cGUgb2YgdGhlIG5vZGUncyB7QGxpbmsgTm9kZSN1cGRhdGVCZWZvcmV9IG1ldGhvZC4gUG9zc2libGUgdmFsdWVzIGFyZSBsaXN0ZWQgaW4ge0BsaW5rIE5vZGVVcGRhdGVUeXBlfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ25vbmUnXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVCZWZvcmVUeXBlID0gTm9kZVVwZGF0ZVR5cGUuTk9ORTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1cGRhdGUgdHlwZSBvZiB0aGUgbm9kZSdzIHtAbGluayBOb2RlI3VwZGF0ZUFmdGVyfSBtZXRob2QuIFBvc3NpYmxlIHZhbHVlcyBhcmUgbGlzdGVkIGluIHtAbGluayBOb2RlVXBkYXRlVHlwZX0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0ICdub25lJ1xuXHRcdCAqL1xuXHRcdHRoaXMudXBkYXRlQWZ0ZXJUeXBlID0gTm9kZVVwZGF0ZVR5cGUuTk9ORTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBVVUlEIG9mIHRoZSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLnV1aWQgPSBNYXRoVXRpbHMuZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdmVyc2lvbiBvZiB0aGUgbm9kZS4gVGhlIHZlcnNpb24gYXV0b21hdGljYWxseSBpcyBpbmNyZWFzZWQgd2hlbiB7QGxpbmsgTm9kZSNuZWVkc1VwZGF0ZX0gaXMgc2V0IHRvIGB0cnVlYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMudmVyc2lvbiA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoaXMgbm9kZSBpcyBnbG9iYWwgb3Igbm90LiBUaGlzIHByb3BlcnR5IGlzIHJlbGV2YW50IGZvciB0aGUgaW50ZXJuYWxcblx0XHQgKiBub2RlIGNhY2hpbmcgc3lzdGVtLiBBbGwgbm9kZXMgd2hpY2ggc2hvdWxkIGJlIGRlY2xhcmVkIGp1c3Qgb25jZSBzaG91bGRcblx0XHQgKiBzZXQgdGhpcyBmbGFnIHRvIGB0cnVlYCAoYSB0eXBpY2FsIGV4YW1wbGUgaXMge0BsaW5rIEF0dHJpYnV0ZU5vZGV9KS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5nbG9iYWwgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNOb2RlID0gdHJ1ZTtcblxuXHRcdC8vIHByaXZhdGVcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjYWNoZSBrZXkgb2YgdGhpcyBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fY2FjaGVLZXkgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhY2hlIGtleSAncyB2ZXJzaW9uLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLl9jYWNoZUtleVZlcnNpb24gPSAwO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfbm9kZUlkICsrIH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldCB0aGlzIHByb3BlcnR5IHRvIGB0cnVlYCB3aGVuIHRoZSBub2RlIHNob3VsZCBiZSByZWdlbmVyYXRlZC5cblx0ICpcblx0ICogQHR5cGUge2Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IGZhbHNlXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcblx0ICovXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgdHlwZSBvZiB0aGUgY2xhc3MuIFRoZSB2YWx1ZSBpcyB1c3VhbGx5IHRoZSBjb25zdHJ1Y3RvciBuYW1lLlxuXHQgKlxuXHQgKiBAdHlwZSB7c3RyaW5nfVxuIFx0ICogQHJlYWRvbmx5XG5cdCAqL1xuXHRnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZW5pZW50IG1ldGhvZCBmb3IgZGVmaW5pbmcge0BsaW5rIE5vZGUjdXBkYXRlfS5cblx0ICpcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgdXBkYXRlIG1ldGhvZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHVwZGF0ZVR5cGUgLSBUaGUgdXBkYXRlIHR5cGUuXG5cdCAqIEByZXR1cm4ge05vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdG9uVXBkYXRlKCBjYWxsYmFjaywgdXBkYXRlVHlwZSApIHtcblxuXHRcdHRoaXMudXBkYXRlVHlwZSA9IHVwZGF0ZVR5cGU7XG5cdFx0dGhpcy51cGRhdGUgPSBjYWxsYmFjay5iaW5kKCB0aGlzLmdldFNlbGYoKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZW5pZW50IG1ldGhvZCBmb3IgZGVmaW5pbmcge0BsaW5rIE5vZGUjdXBkYXRlfS4gU2ltaWxhciB0byB7QGxpbmsgTm9kZSNvblVwZGF0ZX0sIGJ1dFxuXHQgKiB0aGlzIG1ldGhvZCBhdXRvbWF0aWNhbGx5IHNldHMgdGhlIHVwZGF0ZSB0eXBlIHRvIGBGUkFNRWAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIHVwZGF0ZSBtZXRob2QuXG5cdCAqIEByZXR1cm4ge05vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdG9uRnJhbWVVcGRhdGUoIGNhbGxiYWNrICkge1xuXG5cdFx0cmV0dXJuIHRoaXMub25VcGRhdGUoIGNhbGxiYWNrLCBOb2RlVXBkYXRlVHlwZS5GUkFNRSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVuaWVudCBtZXRob2QgZm9yIGRlZmluaW5nIHtAbGluayBOb2RlI3VwZGF0ZX0uIFNpbWlsYXIgdG8ge0BsaW5rIE5vZGUjb25VcGRhdGV9LCBidXRcblx0ICogdGhpcyBtZXRob2QgYXV0b21hdGljYWxseSBzZXRzIHRoZSB1cGRhdGUgdHlwZSB0byBgUkVOREVSYC5cblx0ICpcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgdXBkYXRlIG1ldGhvZC5cblx0ICogQHJldHVybiB7Tm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0b25SZW5kZXJVcGRhdGUoIGNhbGxiYWNrICkge1xuXG5cdFx0cmV0dXJuIHRoaXMub25VcGRhdGUoIGNhbGxiYWNrLCBOb2RlVXBkYXRlVHlwZS5SRU5ERVIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlbmllbnQgbWV0aG9kIGZvciBkZWZpbmluZyB7QGxpbmsgTm9kZSN1cGRhdGV9LiBTaW1pbGFyIHRvIHtAbGluayBOb2RlI29uVXBkYXRlfSwgYnV0XG5cdCAqIHRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkgc2V0cyB0aGUgdXBkYXRlIHR5cGUgdG8gYE9CSkVDVGAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIHVwZGF0ZSBtZXRob2QuXG5cdCAqIEByZXR1cm4ge05vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdG9uT2JqZWN0VXBkYXRlKCBjYWxsYmFjayApIHtcblxuXHRcdHJldHVybiB0aGlzLm9uVXBkYXRlKCBjYWxsYmFjaywgTm9kZVVwZGF0ZVR5cGUuT0JKRUNUICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZW5pZW50IG1ldGhvZCBmb3IgZGVmaW5pbmcge0BsaW5rIE5vZGUjdXBkYXRlUmVmZXJlbmNlfS5cblx0ICpcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgdXBkYXRlIG1ldGhvZC5cblx0ICogQHJldHVybiB7Tm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0b25SZWZlcmVuY2UoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy51cGRhdGVSZWZlcmVuY2UgPSBjYWxsYmFjay5iaW5kKCB0aGlzLmdldFNlbGYoKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHRoaXNgIHJlZmVyZW5jZSBtaWdodCBwb2ludCB0byBhIFByb3h5IHNvIHRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkXG5cdCAqIHRvIGdldCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBhY3R1YWwgbm9kZSBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZX0gQSByZWZlcmVuY2UgdG8gdGhlIG5vZGUuXG5cdCAqL1xuXHRnZXRTZWxmKCkge1xuXG5cdFx0Ly8gUmV0dXJucyBub24tbm9kZSBvYmplY3QuXG5cblx0XHRyZXR1cm4gdGhpcy5zZWxmIHx8IHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBOb2RlcyBtaWdodCByZWZlciB0byBvdGhlciBvYmplY3RzIGxpa2UgbWF0ZXJpYWxzLiBUaGlzIG1ldGhvZCBhbGxvd3MgdG8gZHluYW1pY2FsbHkgdXBkYXRlIHRoZSByZWZlcmVuY2Vcblx0ICogdG8gc3VjaCBvYmplY3RzIGJhc2VkIG9uIGEgZ2l2ZW4gc3RhdGUgKGUuZy4gdGhlIGN1cnJlbnQgbm9kZSBmcmFtZSBvciBidWlsZGVyKS5cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IHN0YXRlIC0gVGhpcyBtZXRob2QgY2FuIGJlIGludm9jYXRlZCBpbiBkaWZmZXJlbnQgY29udGV4dHMgc28gYHN0YXRlYCBjYW4gcmVmZXIgdG8gYW55IG9iamVjdCB0eXBlLlxuXHQgKiBAcmV0dXJuIHthbnl9IFRoZSB1cGRhdGVkIHJlZmVyZW5jZS5cblx0ICovXG5cdHVwZGF0ZVJlZmVyZW5jZSggLypzdGF0ZSovICkge1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBCeSBkZWZhdWx0IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSB7QGxpbmsgTm9kZSNnbG9iYWx9IGZsYWcuIFRoaXMgbWV0aG9kXG5cdCAqIGNhbiBiZSBvdmVyd3JpdHRlbiBpbiBkZXJpdmVkIGNsYXNzZXMgaWYgYW4gYW5hbHl0aWNhbCB3YXkgaXMgcmVxdWlyZWQgdG8gZGV0ZXJtaW5lIHRoZVxuXHQgKiBnbG9iYWwgc3RhdHVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgbm9kZSBpcyBnbG9iYWwgb3Igbm90LlxuXHQgKi9cblx0aXNHbG9iYWwoIC8qYnVpbGRlciovICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2xvYmFsO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdG9yIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gaXRlcmF0ZSBvdmVyIHRoZSBjaGlsZCBub2Rlcy5cblx0ICpcblx0ICogQGdlbmVyYXRvclxuXHQgKiBAeWllbGRzIHtOb2RlfSBBIGNoaWxkIG5vZGUuXG5cdCAqL1xuXHQqIGdldENoaWxkcmVuKCkge1xuXG5cdFx0Zm9yICggY29uc3QgeyBjaGlsZE5vZGUgfSBvZiBnZXROb2RlQ2hpbGRyZW4oIHRoaXMgKSApIHtcblxuXHRcdFx0eWllbGQgY2hpbGROb2RlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQ2FsbGluZyB0aGlzIG1ldGhvZCBkaXNwYXRjaGVzIHRoZSBgZGlzcG9zZWAgZXZlbnQuIFRoaXMgZXZlbnQgY2FuIGJlIHVzZWRcblx0ICogdG8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXJzIGZvciBjbGVhbiB1cCB0YXNrcy5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGxiYWNrIGZvciB7QGxpbmsgTm9kZSN0cmF2ZXJzZX0uXG5cdCAqXG5cdCAqIEBjYWxsYmFjayB0cmF2ZXJzZUNhbGxiYWNrXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBjdXJyZW50IG5vZGUuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBDYW4gYmUgdXNlZCB0byB0cmF2ZXJzZSB0aHJvdWdoIHRoZSBub2RlJ3MgaGllcmFyY2h5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3RyYXZlcnNlQ2FsbGJhY2t9IGNhbGxiYWNrIC0gQSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIHBlciBub2RlLlxuXHQgKi9cblx0dHJhdmVyc2UoIGNhbGxiYWNrICkge1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdGZvciAoIGNvbnN0IGNoaWxkTm9kZSBvZiB0aGlzLmdldENoaWxkcmVuKCkgKSB7XG5cblx0XHRcdGNoaWxkTm9kZS50cmF2ZXJzZSggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNhY2hlIGtleSBmb3IgdGhpcyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtmb3JjZT1mYWxzZV0gLSBXaGVuIHNldCB0byBgdHJ1ZWAsIGEgcmVjb21wdXRhdGlvbiBvZiB0aGUgY2FjaGUga2V5IGlzIGZvcmNlZC5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY2FjaGUga2V5IG9mIHRoZSBub2RlLlxuXHQgKi9cblx0Z2V0Q2FjaGVLZXkoIGZvcmNlID0gZmFsc2UgKSB7XG5cblx0XHRmb3JjZSA9IGZvcmNlIHx8IHRoaXMudmVyc2lvbiAhPT0gdGhpcy5fY2FjaGVLZXlWZXJzaW9uO1xuXG5cdFx0aWYgKCBmb3JjZSA9PT0gdHJ1ZSB8fCB0aGlzLl9jYWNoZUtleSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fY2FjaGVLZXkgPSBoYXNoKCBnZXRDYWNoZUtleSggdGhpcywgZm9yY2UgKSwgdGhpcy5jdXN0b21DYWNoZUtleSgpICk7XG5cdFx0XHR0aGlzLl9jYWNoZUtleVZlcnNpb24gPSB0aGlzLnZlcnNpb247XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fY2FjaGVLZXk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZSBhIGN1c3RvbSBjYWNoZSBrZXkgZm9yIHRoaXMgbm9kZS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY2FjaGUga2V5IG9mIHRoZSBub2RlLlxuXHQgKi9cblx0Y3VzdG9tQ2FjaGVLZXkoKSB7XG5cblx0XHRyZXR1cm4gMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHJlZmVyZW5jZXMgdG8gdGhpcyBub2RlIHdoaWNoIGlzIGJ5IGRlZmF1bHQgYHRoaXNgLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRnZXRTY29wZSgpIHtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaGFzaCBvZiB0aGUgbm9kZSB3aGljaCBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBub2RlLiBCeSBkZWZhdWx0IGl0J3Ncblx0ICogdGhlIHtAbGluayBOb2RlI3V1aWR9IGhvd2V2ZXIgZGVyaXZlZCBub2RlIGNsYXNzZXMgbWlnaHQgaGF2ZSB0byBvdmVyd3JpdGUgdGhpcyBtZXRob2Rcblx0ICogZGVwZW5kaW5nIG9uIHRoZWlyIGltcGxlbWVudGF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoYXNoLlxuXHQgKi9cblx0Z2V0SGFzaCggLypidWlsZGVyKi8gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy51dWlkO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdXBkYXRlIHR5cGUgb2Yge0BsaW5rIE5vZGUjdXBkYXRlfS5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZVVwZGF0ZVR5cGV9IFRoZSB1cGRhdGUgdHlwZS5cblx0ICovXG5cdGdldFVwZGF0ZVR5cGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGVUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdXBkYXRlIHR5cGUgb2Yge0BsaW5rIE5vZGUjdXBkYXRlQmVmb3JlfS5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZVVwZGF0ZVR5cGV9IFRoZSB1cGRhdGUgdHlwZS5cblx0ICovXG5cdGdldFVwZGF0ZUJlZm9yZVR5cGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGVCZWZvcmVUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdXBkYXRlIHR5cGUgb2Yge0BsaW5rIE5vZGUjdXBkYXRlQWZ0ZXJ9LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtOb2RlVXBkYXRlVHlwZX0gVGhlIHVwZGF0ZSB0eXBlLlxuXHQgKi9cblx0Z2V0VXBkYXRlQWZ0ZXJUeXBlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlQWZ0ZXJUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2VydGFpbiB0eXBlcyBhcmUgY29tcG9zZWQgb2YgbXVsdGlwbGUgZWxlbWVudHMuIEZvciBleGFtcGxlIGEgYHZlYzNgXG5cdCAqIGlzIGNvbXBvc2VkIG9mIHRocmVlIGBmbG9hdGAgdmFsdWVzLiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSB0eXBlIG9mXG5cdCAqIHRoZXNlIGVsZW1lbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0eXBlIG9mIHRoZSBub2RlLlxuXHQgKi9cblx0Z2V0RWxlbWVudFR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCB0eXBlID0gdGhpcy5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXHRcdGNvbnN0IGVsZW1lbnRUeXBlID0gYnVpbGRlci5nZXRFbGVtZW50VHlwZSggdHlwZSApO1xuXG5cdFx0cmV0dXJuIGVsZW1lbnRUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbm9kZSBtZW1iZXIgdHlwZSBmb3IgdGhlIGdpdmVuIG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIG1lbWJlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgdHlwZSBvZiB0aGUgbm9kZS5cblx0ICovXG5cdGdldE1lbWJlclR5cGUoIC8qYnVpbGRlciwgbmFtZSovICkge1xuXG5cdFx0cmV0dXJuICd2b2lkJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG5vZGUncyB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0eXBlIG9mIHRoZSBub2RlLlxuXHQgKi9cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBub2RlUHJvcGVydGllcyA9IGJ1aWxkZXIuZ2V0Tm9kZVByb3BlcnRpZXMoIHRoaXMgKTtcblxuXHRcdGlmICggbm9kZVByb3BlcnRpZXMub3V0cHV0Tm9kZSApIHtcblxuXHRcdFx0cmV0dXJuIG5vZGVQcm9wZXJ0aWVzLm91dHB1dE5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm5vZGVUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgdXNlZCBkdXJpbmcgdGhlIGJ1aWxkIHByb2Nlc3Mgb2YgYSBub2RlIGFuZCBlbnN1cmVzXG5cdCAqIGVxdWFsIG5vZGVzIGFyZSBub3QgYnVpbHQgbXVsdGlwbGUgdGltZXMgYnV0IGp1c3Qgb25jZS4gRm9yIGV4YW1wbGUgaWZcblx0ICogYGF0dHJpYnV0ZSggJ3V2JyApYCBpcyB1c2VkIG11bHRpcGxlIHRpbWVzIGJ5IHRoZSB1c2VyLCB0aGUgYnVpbGRcblx0ICogcHJvY2VzcyBtYWtlcyBzdXJlIHRvIHByb2Nlc3MganVzdCB0aGUgZmlyc3Qgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIHNoYXJlZCBub2RlIGlmIHBvc3NpYmxlLiBPdGhlcndpc2UgYHRoaXNgIGlzIHJldHVybmVkLlxuXHQgKi9cblx0Z2V0U2hhcmVkKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgaGFzaCA9IHRoaXMuZ2V0SGFzaCggYnVpbGRlciApO1xuXHRcdGNvbnN0IG5vZGVGcm9tSGFzaCA9IGJ1aWxkZXIuZ2V0Tm9kZUZyb21IYXNoKCBoYXNoICk7XG5cblx0XHRyZXR1cm4gbm9kZUZyb21IYXNoIHx8IHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXByZXNlbnRzIHRoZSBzZXR1cCBzdGFnZSB3aGljaCBpcyB0aGUgZmlyc3Qgc3RlcCBvZiB0aGUgYnVpbGQgcHJvY2Vzcywgc2VlIHtAbGluayBOb2RlI2J1aWxkfSBtZXRob2QuXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG9mdGVuIG92ZXJ3cml0dGVuIGluIGRlcml2ZWQgbW9kdWxlcyB0byBwcmVwYXJlIHRoZSBub2RlIHdoaWNoIGlzIHVzZWQgYXMgdGhlIG91dHB1dC9yZXN1bHQuXG5cdCAqIFRoZSBvdXRwdXQgbm9kZSBtdXN0IGJlIHJldHVybmVkIGluIHRoZSBgcmV0dXJuYCBzdGF0ZW1lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4gez9Ob2RlfSBUaGUgb3V0cHV0IG5vZGUuXG5cdCAqL1xuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IG5vZGVQcm9wZXJ0aWVzID0gYnVpbGRlci5nZXROb2RlUHJvcGVydGllcyggdGhpcyApO1xuXG5cdFx0bGV0IGluZGV4ID0gMDtcblxuXHRcdGZvciAoIGNvbnN0IGNoaWxkTm9kZSBvZiB0aGlzLmdldENoaWxkcmVuKCkgKSB7XG5cblx0XHRcdG5vZGVQcm9wZXJ0aWVzWyAnbm9kZScgKyBpbmRleCArKyBdID0gY2hpbGROb2RlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIGEgb3V0cHV0Tm9kZSBpZiBleGlzdHMgb3IgbnVsbFxuXG5cdFx0cmV0dXJuIG5vZGVQcm9wZXJ0aWVzLm91dHB1dE5vZGUgfHwgbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlcHJlc2VudHMgdGhlIGFuYWx5emUgc3RhZ2Ugd2hpY2ggaXMgdGhlIHNlY29uZCBzdGVwIG9mIHRoZSBidWlsZCBwcm9jZXNzLCBzZWUge0BsaW5rIE5vZGUjYnVpbGR9IG1ldGhvZC5cblx0ICogVGhpcyBzdGFnZSBhbmFseXplcyB0aGUgbm9kZSBoaWVyYXJjaHkgYW5kIGVuc3VyZXMgZGVzY2VuZGVudCBub2RlcyBhcmUgYnVpbHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRhbmFseXplKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgdXNhZ2VDb3VudCA9IGJ1aWxkZXIuaW5jcmVhc2VVc2FnZSggdGhpcyApO1xuXG5cdFx0aWYgKCB1c2FnZUNvdW50ID09PSAxICkge1xuXG5cdFx0XHQvLyBub2RlIGZsb3cgY2hpbGRyZW5cblxuXHRcdFx0Y29uc3Qgbm9kZVByb3BlcnRpZXMgPSBidWlsZGVyLmdldE5vZGVQcm9wZXJ0aWVzKCB0aGlzICk7XG5cblx0XHRcdGZvciAoIGNvbnN0IGNoaWxkTm9kZSBvZiBPYmplY3QudmFsdWVzKCBub2RlUHJvcGVydGllcyApICkge1xuXG5cdFx0XHRcdGlmICggY2hpbGROb2RlICYmIGNoaWxkTm9kZS5pc05vZGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRjaGlsZE5vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlcHJlc2VudHMgdGhlIGdlbmVyYXRlIHN0YWdlIHdoaWNoIGlzIHRoZSB0aGlyZCBzdGVwIG9mIHRoZSBidWlsZCBwcm9jZXNzLCBzZWUge0BsaW5rIE5vZGUjYnVpbGR9IG1ldGhvZC5cblx0ICogVGhpcyBzdGF0ZSBidWlsZHMgdGhlIG91dHB1dCBub2RlIGFuZCByZXR1cm5zIHRoZSByZXN1bHRpbmcgc2hhZGVyIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBvdXRwdXQgLSBDYW4gYmUgdXNlZCB0byBkZWZpbmUgdGhlIG91dHB1dCB0eXBlLlxuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIHNoYWRlciBzdHJpbmcuXG5cdCAqL1xuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3QgeyBvdXRwdXROb2RlIH0gPSBidWlsZGVyLmdldE5vZGVQcm9wZXJ0aWVzKCB0aGlzICk7XG5cblx0XHRpZiAoIG91dHB1dE5vZGUgJiYgb3V0cHV0Tm9kZS5pc05vZGUgPT09IHRydWUgKSB7XG5cblx0XHRcdHJldHVybiBvdXRwdXROb2RlLmJ1aWxkKCBidWlsZGVyLCBvdXRwdXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBtZXRob2QgY2FuIGJlIGltcGxlbWVudGVkIHRvIHVwZGF0ZSB0aGUgbm9kZSdzIGludGVybmFsIHN0YXRlIGJlZm9yZSBpdCBpcyB1c2VkIHRvIHJlbmRlciBhbiBvYmplY3QuXG5cdCAqIFRoZSB7QGxpbmsgTm9kZSN1cGRhdGVCZWZvcmVUeXBlfSBwcm9wZXJ0eSBkZWZpbmVzIGhvdyBvZnRlbiB0aGUgdXBkYXRlIGlzIGV4ZWN1dGVkLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtOb2RlRnJhbWV9IGZyYW1lIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBmcmFtZS5cblx0ICogQHJldHVybiB7P2Jvb2xlYW59IEFuIG9wdGlvbmFsIGJvb2wgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgaW1wbGVtZW50YXRpb24gYWN0dWFsbHkgcGVyZm9ybWVkIGFuIHVwZGF0ZSBvciBub3QgKGUuZy4gZHVlIHRvIGNhY2hpbmcpLlxuXHQgKi9cblx0dXBkYXRlQmVmb3JlKCAvKmZyYW1lKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdBYnN0cmFjdCBmdW5jdGlvbi4nICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgbWV0aG9kIGNhbiBiZSBpbXBsZW1lbnRlZCB0byB1cGRhdGUgdGhlIG5vZGUncyBpbnRlcm5hbCBzdGF0ZSBhZnRlciBpdCB3YXMgdXNlZCB0byByZW5kZXIgYW4gb2JqZWN0LlxuXHQgKiBUaGUge0BsaW5rIE5vZGUjdXBkYXRlQWZ0ZXJUeXBlfSBwcm9wZXJ0eSBkZWZpbmVzIGhvdyBvZnRlbiB0aGUgdXBkYXRlIGlzIGV4ZWN1dGVkLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtOb2RlRnJhbWV9IGZyYW1lIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBmcmFtZS5cblx0ICogQHJldHVybiB7P2Jvb2xlYW59IEFuIG9wdGlvbmFsIGJvb2wgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgaW1wbGVtZW50YXRpb24gYWN0dWFsbHkgcGVyZm9ybWVkIGFuIHVwZGF0ZSBvciBub3QgKGUuZy4gZHVlIHRvIGNhY2hpbmcpLlxuXHQgKi9cblx0dXBkYXRlQWZ0ZXIoIC8qZnJhbWUqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ0Fic3RyYWN0IGZ1bmN0aW9uLicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBtZXRob2QgY2FuIGJlIGltcGxlbWVudGVkIHRvIHVwZGF0ZSB0aGUgbm9kZSdzIGludGVybmFsIHN0YXRlIHdoZW4gaXQgaXMgdXNlZCB0byByZW5kZXIgYW4gb2JqZWN0LlxuXHQgKiBUaGUge0BsaW5rIE5vZGUjdXBkYXRlVHlwZX0gcHJvcGVydHkgZGVmaW5lcyBob3cgb2Z0ZW4gdGhlIHVwZGF0ZSBpcyBleGVjdXRlZC5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7Tm9kZUZyYW1lfSBmcmFtZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IG5vZGUgZnJhbWUuXG5cdCAqIEByZXR1cm4gez9ib29sZWFufSBBbiBvcHRpb25hbCBib29sIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGltcGxlbWVudGF0aW9uIGFjdHVhbGx5IHBlcmZvcm1lZCBhbiB1cGRhdGUgb3Igbm90IChlLmcuIGR1ZSB0byBjYWNoaW5nKS5cblx0ICovXG5cdHVwZGF0ZSggLypmcmFtZSovICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnQWJzdHJhY3QgZnVuY3Rpb24uJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgcGVyZm9ybXMgdGhlIGJ1aWxkIG9mIGEgbm9kZS4gVGhlIGJlaGF2aW9yIG9mIHRoaXMgbWV0aG9kIGFzIHdlbGwgYXMgaXRzIHJldHVybiB2YWx1ZSBkZXBlbmRcblx0ICogb24gdGhlIGN1cnJlbnQgYnVpbGQgc3RhZ2UgKHNldHVwLCBhbmFseXplIG9yIGdlbmVyYXRlKS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBvdXRwdXQgLSBDYW4gYmUgdXNlZCB0byBkZWZpbmUgdGhlIG91dHB1dCB0eXBlLlxuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfSBXaGVuIHRoaXMgbWV0aG9kIGlzIGV4ZWN1dGVkIGluIHRoZSBzZXR1cCBvciBhbmFseXplIHN0YWdlLCBgbnVsbGAgaXMgcmV0dXJuZWQuIEluIHRoZSBnZW5lcmF0ZSBzdGFnZSwgdGhlIGdlbmVyYXRlZCBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0YnVpbGQoIGJ1aWxkZXIsIG91dHB1dCA9IG51bGwgKSB7XG5cblx0XHRjb25zdCByZWZOb2RlID0gdGhpcy5nZXRTaGFyZWQoIGJ1aWxkZXIgKTtcblxuXHRcdGlmICggdGhpcyAhPT0gcmVmTm9kZSApIHtcblxuXHRcdFx0cmV0dXJuIHJlZk5vZGUuYnVpbGQoIGJ1aWxkZXIsIG91dHB1dCApO1xuXG5cdFx0fVxuXG5cdFx0YnVpbGRlci5hZGROb2RlKCB0aGlzICk7XG5cdFx0YnVpbGRlci5hZGRDaGFpbiggdGhpcyApO1xuXG5cdFx0LyogQnVpbGQgc3RhZ2VzIGV4cGVjdGVkIHJlc3VsdHM6XG5cdFx0XHQtIFwic2V0dXBcIlx0XHQtPiBOb2RlXG5cdFx0XHQtIFwiYW5hbHl6ZVwiXHRcdC0+IG51bGxcblx0XHRcdC0gXCJnZW5lcmF0ZVwiXHQtPiBTdHJpbmdcblx0XHQqL1xuXHRcdGxldCByZXN1bHQgPSBudWxsO1xuXG5cdFx0Y29uc3QgYnVpbGRTdGFnZSA9IGJ1aWxkZXIuZ2V0QnVpbGRTdGFnZSgpO1xuXG5cdFx0aWYgKCBidWlsZFN0YWdlID09PSAnc2V0dXAnICkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZVJlZmVyZW5jZSggYnVpbGRlciApO1xuXG5cdFx0XHRjb25zdCBwcm9wZXJ0aWVzID0gYnVpbGRlci5nZXROb2RlUHJvcGVydGllcyggdGhpcyApO1xuXG5cdFx0XHRpZiAoIHByb3BlcnRpZXMuaW5pdGlhbGl6ZWQgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0Ly9jb25zdCBzdGFja05vZGVzQmVmb3JlU2V0dXAgPSBidWlsZGVyLnN0YWNrLm5vZGVzLmxlbmd0aDtcblxuXHRcdFx0XHRwcm9wZXJ0aWVzLmluaXRpYWxpemVkID0gdHJ1ZTtcblxuXHRcdFx0XHRjb25zdCBvdXRwdXROb2RlID0gdGhpcy5zZXR1cCggYnVpbGRlciApOyAvLyByZXR1cm4gYSBub2RlIG9yIG51bGxcblx0XHRcdFx0Y29uc3QgaXNOb2RlT3V0cHV0ID0gb3V0cHV0Tm9kZSAmJiBvdXRwdXROb2RlLmlzTm9kZSA9PT0gdHJ1ZTtcblxuXHRcdFx0XHQvKmlmICggaXNOb2RlT3V0cHV0ICYmIGJ1aWxkZXIuc3RhY2subm9kZXMubGVuZ3RoICE9PSBzdGFja05vZGVzQmVmb3JlU2V0dXAgKSB7XG5cblx0XHRcdFx0XHQvLyAhISBubyBvdXRwdXROb2RlICEhXG5cdFx0XHRcdFx0Ly9vdXRwdXROb2RlID0gYnVpbGRlci5zdGFjaztcblxuXHRcdFx0XHR9Ki9cblxuXHRcdFx0XHRmb3IgKCBjb25zdCBjaGlsZE5vZGUgb2YgT2JqZWN0LnZhbHVlcyggcHJvcGVydGllcyApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmlzTm9kZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0Y2hpbGROb2RlLmJ1aWxkKCBidWlsZGVyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggaXNOb2RlT3V0cHV0ICkge1xuXG5cdFx0XHRcdFx0b3V0cHV0Tm9kZS5idWlsZCggYnVpbGRlciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRwcm9wZXJ0aWVzLm91dHB1dE5vZGUgPSBvdXRwdXROb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBidWlsZFN0YWdlID09PSAnYW5hbHl6ZScgKSB7XG5cblx0XHRcdHRoaXMuYW5hbHl6ZSggYnVpbGRlciApO1xuXG5cdFx0fSBlbHNlIGlmICggYnVpbGRTdGFnZSA9PT0gJ2dlbmVyYXRlJyApIHtcblxuXHRcdFx0Y29uc3QgaXNHZW5lcmF0ZU9uY2UgPSB0aGlzLmdlbmVyYXRlLmxlbmd0aCA9PT0gMTtcblxuXHRcdFx0aWYgKCBpc0dlbmVyYXRlT25jZSApIHtcblxuXHRcdFx0XHRjb25zdCB0eXBlID0gdGhpcy5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXHRcdFx0XHRjb25zdCBub2RlRGF0YSA9IGJ1aWxkZXIuZ2V0RGF0YUZyb21Ob2RlKCB0aGlzICk7XG5cblx0XHRcdFx0cmVzdWx0ID0gbm9kZURhdGEuc25pcHBldDtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0cmVzdWx0ID0gdGhpcy5nZW5lcmF0ZSggYnVpbGRlciApIHx8ICcnO1xuXG5cdFx0XHRcdFx0bm9kZURhdGEuc25pcHBldCA9IHJlc3VsdDtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBub2RlRGF0YS5mbG93Q29kZXMgIT09IHVuZGVmaW5lZCAmJiBidWlsZGVyLmNvbnRleHQubm9kZUJsb2NrICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRidWlsZGVyLmFkZEZsb3dDb2RlSGllcmFyY2h5KCB0aGlzLCBidWlsZGVyLmNvbnRleHQubm9kZUJsb2NrICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCA9IGJ1aWxkZXIuZm9ybWF0KCByZXN1bHQsIHR5cGUsIG91dHB1dCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlc3VsdCA9IHRoaXMuZ2VuZXJhdGUoIGJ1aWxkZXIsIG91dHB1dCApIHx8ICcnO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRidWlsZGVyLnJlbW92ZUNoYWluKCB0aGlzICk7XG5cdFx0YnVpbGRlci5hZGRTZXF1ZW50aWFsTm9kZSggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNoaWxkIG5vZGVzIGFzIGEgSlNPTiBvYmplY3QuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0FycmF5PE9iamVjdD59IEFuIGl0ZXJhYmxlIGxpc3Qgb2Ygc2VyaWFsaXplZCBjaGlsZCBvYmplY3RzIGFzIEpTT04uXG5cdCAqL1xuXHRnZXRTZXJpYWxpemVDaGlsZHJlbigpIHtcblxuXHRcdHJldHVybiBnZXROb2RlQ2hpbGRyZW4oIHRoaXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlcmlhbGl6ZXMgdGhlIG5vZGUgdG8gSlNPTi5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgb3V0cHV0IEpTT04gb2JqZWN0LlxuXHQgKi9cblx0c2VyaWFsaXplKCBqc29uICkge1xuXG5cdFx0Y29uc3Qgbm9kZUNoaWxkcmVuID0gdGhpcy5nZXRTZXJpYWxpemVDaGlsZHJlbigpO1xuXG5cdFx0Y29uc3QgaW5wdXROb2RlcyA9IHt9O1xuXG5cdFx0Zm9yICggY29uc3QgeyBwcm9wZXJ0eSwgaW5kZXgsIGNoaWxkTm9kZSB9IG9mIG5vZGVDaGlsZHJlbiApIHtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaW5wdXROb2Rlc1sgcHJvcGVydHkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aW5wdXROb2Rlc1sgcHJvcGVydHkgXSA9IE51bWJlci5pc0ludGVnZXIoIGluZGV4ICkgPyBbXSA6IHt9O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbnB1dE5vZGVzWyBwcm9wZXJ0eSBdWyBpbmRleCBdID0gY2hpbGROb2RlLnRvSlNPTigganNvbi5tZXRhICkudXVpZDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpbnB1dE5vZGVzWyBwcm9wZXJ0eSBdID0gY2hpbGROb2RlLnRvSlNPTigganNvbi5tZXRhICkudXVpZDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBPYmplY3Qua2V5cyggaW5wdXROb2RlcyApLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGpzb24uaW5wdXROb2RlcyA9IGlucHV0Tm9kZXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXNlcmlhbGl6ZXMgdGhlIG5vZGUgZnJvbSB0aGUgZ2l2ZW4gSlNPTi5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgSlNPTiBvYmplY3QuXG5cdCAqL1xuXHRkZXNlcmlhbGl6ZSgganNvbiApIHtcblxuXHRcdGlmICgganNvbi5pbnB1dE5vZGVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IG5vZGVzID0ganNvbi5tZXRhLm5vZGVzO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBwcm9wZXJ0eSBpbiBqc29uLmlucHV0Tm9kZXMgKSB7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBqc29uLmlucHV0Tm9kZXNbIHByb3BlcnR5IF0gKSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGlucHV0QXJyYXkgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIGNvbnN0IHV1aWQgb2YganNvbi5pbnB1dE5vZGVzWyBwcm9wZXJ0eSBdICkge1xuXG5cdFx0XHRcdFx0XHRpbnB1dEFycmF5LnB1c2goIG5vZGVzWyB1dWlkIF0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXNbIHByb3BlcnR5IF0gPSBpbnB1dEFycmF5O1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBqc29uLmlucHV0Tm9kZXNbIHByb3BlcnR5IF0gPT09ICdvYmplY3QnICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgaW5wdXRPYmplY3QgPSB7fTtcblxuXHRcdFx0XHRcdGZvciAoIGNvbnN0IHN1YlByb3BlcnR5IGluIGpzb24uaW5wdXROb2Rlc1sgcHJvcGVydHkgXSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdXVpZCA9IGpzb24uaW5wdXROb2Rlc1sgcHJvcGVydHkgXVsgc3ViUHJvcGVydHkgXTtcblxuXHRcdFx0XHRcdFx0aW5wdXRPYmplY3RbIHN1YlByb3BlcnR5IF0gPSBub2Rlc1sgdXVpZCBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpc1sgcHJvcGVydHkgXSA9IGlucHV0T2JqZWN0O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zdCB1dWlkID0ganNvbi5pbnB1dE5vZGVzWyBwcm9wZXJ0eSBdO1xuXG5cdFx0XHRcdFx0dGhpc1sgcHJvcGVydHkgXSA9IG5vZGVzWyB1dWlkIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXJpYWxpemVzIHRoZSBub2RlIGludG8gdGhlIHRocmVlLmpzIEpTT04gT2JqZWN0L1NjZW5lIGZvcm1hdC5cblx0ICpcblx0ICogQHBhcmFtIHs/T2JqZWN0fSBtZXRhIC0gQW4gb3B0aW9uYWwgSlNPTiBvYmplY3QgdGhhdCBhbHJlYWR5IGhvbGRzIHNlcmlhbGl6ZWQgZGF0YSBmcm9tIG90aGVyIHNjZW5lIG9iamVjdHMuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIHNlcmlhbGl6ZWQgbm9kZS5cblx0ICovXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IHsgdXVpZCwgdHlwZSB9ID0gdGhpcztcblx0XHRjb25zdCBpc1Jvb3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdGlmICggaXNSb290ICkge1xuXG5cdFx0XHRtZXRhID0ge1xuXHRcdFx0XHR0ZXh0dXJlczoge30sXG5cdFx0XHRcdGltYWdlczoge30sXG5cdFx0XHRcdG5vZGVzOiB7fVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdC8vIHNlcmlhbGl6ZVxuXG5cdFx0bGV0IGRhdGEgPSBtZXRhLm5vZGVzWyB1dWlkIF07XG5cblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0ZGF0YSA9IHtcblx0XHRcdFx0dXVpZCxcblx0XHRcdFx0dHlwZSxcblx0XHRcdFx0bWV0YSxcblx0XHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0XHR2ZXJzaW9uOiA0LjYsXG5cdFx0XHRcdFx0dHlwZTogJ05vZGUnLFxuXHRcdFx0XHRcdGdlbmVyYXRvcjogJ05vZGUudG9KU09OJ1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoIGlzUm9vdCAhPT0gdHJ1ZSApIG1ldGEubm9kZXNbIGRhdGEudXVpZCBdID0gZGF0YTtcblxuXHRcdFx0dGhpcy5zZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdFx0ZGVsZXRlIGRhdGEubWV0YTtcblxuXHRcdH1cblxuXHRcdC8vIFRPRE86IENvcGllZCBmcm9tIE9iamVjdDNELnRvSlNPTlxuXG5cdFx0ZnVuY3Rpb24gZXh0cmFjdEZyb21DYWNoZSggY2FjaGUgKSB7XG5cblx0XHRcdGNvbnN0IHZhbHVlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4gY2FjaGUgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGF0YSA9IGNhY2hlWyBrZXkgXTtcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlcztcblxuXHRcdH1cblxuXHRcdGlmICggaXNSb290ICkge1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTtcblx0XHRcdGNvbnN0IGltYWdlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuaW1hZ2VzICk7XG5cdFx0XHRjb25zdCBub2RlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEubm9kZXMgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlcy5sZW5ndGggPiAwICkgZGF0YS50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdFx0aWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIGRhdGEuaW1hZ2VzID0gaW1hZ2VzO1xuXHRcdFx0aWYgKCBub2Rlcy5sZW5ndGggPiAwICkgZGF0YS5ub2RlcyA9IG5vZGVzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGU7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBlbGVtZW50IGFjY2VzcyBvbiBhbiBhcnJheS1saWtlXG4gKiBub2RlIGRhdGEgc3RydWN0dXJlcy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBBcnJheUVsZW1lbnROb2RlIGV4dGVuZHMgTm9kZSB7IC8vIEBUT0RPOiBJZiBleHRlbmRpbmcgZnJvbSBUZW1wTm9kZSBpdCBicmVha3Mgd2ViZ3B1X2NvbXB1dGVcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0FycmF5RWxlbWVudE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhbiBhcnJheSBlbGVtZW50IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBhcnJheS1saWtlIG5vZGUuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gaW5kZXhOb2RlIC0gVGhlIGluZGV4IG5vZGUgdGhhdCBkZWZpbmVzIHRoZSBlbGVtZW50IGFjY2Vzcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlLCBpbmRleE5vZGUgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGFycmF5LWxpa2Ugbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZSA9IG5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW5kZXggbm9kZSB0aGF0IGRlZmluZXMgdGhlIGVsZW1lbnQgYWNjZXNzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5pbmRleE5vZGUgPSBpbmRleE5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQXJyYXlFbGVtZW50Tm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzaW5jZSB0aGUgbm9kZSB0eXBlIGlzIGluZmVycmVkIGZyb20gdGhlIGFycmF5LWxpa2Ugbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub2RlLmdldEVsZW1lbnRUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3Qgbm9kZVNuaXBwZXQgPSB0aGlzLm5vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblx0XHRjb25zdCBpbmRleFNuaXBwZXQgPSB0aGlzLmluZGV4Tm9kZS5idWlsZCggYnVpbGRlciwgJ3VpbnQnICk7XG5cblx0XHRyZXR1cm4gYCR7IG5vZGVTbmlwcGV0IH1bICR7IGluZGV4U25pcHBldCB9IF1gO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBcnJheUVsZW1lbnROb2RlO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBpcyBwYXJ0IG9mIHRoZSBUU0wgY29yZSBhbmQgdXN1YWxseSBub3QgdXNlZCBpbiBhcHAgbGV2ZWwgY29kZS5cbiAqIEl0IHJlcHJlc2VudHMgYSBjb252ZXJ0IG9wZXJhdGlvbiBkdXJpbmcgdGhlIHNoYWRlciBnZW5lcmF0aW9uIHByb2Nlc3NcbiAqIG1lYW5pbmcgaXQgY29udmVydHMgdGhlIGRhdGEgdHlwZSBvZiBhIG5vZGUgdG8gYSB0YXJnZXQgZGF0YSB0eXBlLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIENvbnZlcnROb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdDb252ZXJ0Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNvbnZlcnQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgd2hpY2ggdHlwZSBzaG91bGQgYmUgY29udmVydGVkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29udmVydFRvIC0gVGhlIHRhcmdldCBub2RlIHR5cGUuIE11bHRpcGxlIHR5cGVzIGNhbiBiZSBkZWZpbmVkIGJ5IHNlcGFyYXRpbmcgdGhlbSB3aXRoIGEgYHxgIHNpZ24uXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZSwgY29udmVydFRvICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHdoaWNoIHR5cGUgc2hvdWxkIGJlIGNvbnZlcnRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZSA9IG5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGFyZ2V0IG5vZGUgdHlwZS4gTXVsdGlwbGUgdHlwZXMgY2FuIGJlIGRlZmluZWQgYnkgc2VwYXJhdGluZyB0aGVtIHdpdGggYSBgfGAgc2lnbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5jb252ZXJ0VG8gPSBjb252ZXJ0VG87XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzaW5jZSB0aGUgaW1wbGVtZW50YXRpb24gdHJpZXMgdG8gaW5mZXIgdGhlIGJlc3Rcblx0ICogbWF0Y2hpbmcgdHlwZSBmcm9tIHRoZSB7QGxpbmsgQ29udmVydE5vZGUjY29udmVydFRvfSBwcm9wZXJ0eS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCByZXF1ZXN0VHlwZSA9IHRoaXMubm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXG5cdFx0bGV0IGNvbnZlcnRUbyA9IG51bGw7XG5cblx0XHRmb3IgKCBjb25zdCBvdmVybG9hZGluZ1R5cGUgb2YgdGhpcy5jb252ZXJ0VG8uc3BsaXQoICd8JyApICkge1xuXG5cdFx0XHRpZiAoIGNvbnZlcnRUbyA9PT0gbnVsbCB8fCBidWlsZGVyLmdldFR5cGVMZW5ndGgoIHJlcXVlc3RUeXBlICkgPT09IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggb3ZlcmxvYWRpbmdUeXBlICkgKSB7XG5cblx0XHRcdFx0Y29udmVydFRvID0gb3ZlcmxvYWRpbmdUeXBlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29udmVydFRvO1xuXG5cdH1cblxuXHRzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5zZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdGRhdGEuY29udmVydFRvID0gdGhpcy5jb252ZXJ0VG87XG5cblx0fVxuXG5cdGRlc2VyaWFsaXplKCBkYXRhICkge1xuXG5cdFx0c3VwZXIuZGVzZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdHRoaXMuY29udmVydFRvID0gZGF0YS5jb252ZXJ0VG87XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyLCBvdXRwdXQgKSB7XG5cblx0XHRjb25zdCBub2RlID0gdGhpcy5ub2RlO1xuXHRcdGNvbnN0IHR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRjb25zdCBzbmlwcGV0ID0gbm9kZS5idWlsZCggYnVpbGRlciwgdHlwZSApO1xuXG5cdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBzbmlwcGV0LCB0eXBlLCBvdXRwdXQgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udmVydE5vZGU7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuL05vZGUuanMnO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIHVzZXMgY2FjaGUgbWFuYWdlbWVudCB0byBjcmVhdGUgdGVtcG9yYXJ5IHZhcmlhYmxlc1xuICogaWYgdGhlIG5vZGUgaXMgdXNlZCBtb3JlIHRoYW4gb25jZSB0byBwcmV2ZW50IGR1cGxpY2F0ZSBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhlIGNsYXNzIGFjdHMgYXMgYSBiYXNlIGNsYXNzIGZvciBtYW55IG90aGVyIG5vZGVzIHR5cGVzLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFRlbXBOb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdUZW1wTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgdGVtcCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IG5vZGVUeXBlIC0gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlVHlwZSA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggbm9kZVR5cGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNUZW1wTm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoaXMgbm9kZSBpcyB1c2VkIG1vcmUgdGhhbiBvbmNlIGluIGNvbnRleHQgb2Ygb3RoZXIgbm9kZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBBIGZsYWcgdGhhdCBpbmRpY2F0ZXMgaWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBkZXBlbmRlbmN5IHRvIG90aGVyIG5vZGVzLlxuXHQgKi9cblx0aGFzRGVwZW5kZW5jaWVzKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIGJ1aWxkZXIuZ2V0RGF0YUZyb21Ob2RlKCB0aGlzICkudXNhZ2VDb3VudCA+IDE7XG5cblx0fVxuXG5cdGJ1aWxkKCBidWlsZGVyLCBvdXRwdXQgKSB7XG5cblx0XHRjb25zdCBidWlsZFN0YWdlID0gYnVpbGRlci5nZXRCdWlsZFN0YWdlKCk7XG5cblx0XHRpZiAoIGJ1aWxkU3RhZ2UgPT09ICdnZW5lcmF0ZScgKSB7XG5cblx0XHRcdGNvbnN0IHR5cGUgPSBidWlsZGVyLmdldFZlY3RvclR5cGUoIHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIsIG91dHB1dCApICk7XG5cdFx0XHRjb25zdCBub2RlRGF0YSA9IGJ1aWxkZXIuZ2V0RGF0YUZyb21Ob2RlKCB0aGlzICk7XG5cblx0XHRcdGlmICggbm9kZURhdGEucHJvcGVydHlOYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBub2RlRGF0YS5wcm9wZXJ0eU5hbWUsIHR5cGUsIG91dHB1dCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlICE9PSAndm9pZCcgJiYgb3V0cHV0ICE9PSAndm9pZCcgJiYgdGhpcy5oYXNEZXBlbmRlbmNpZXMoIGJ1aWxkZXIgKSApIHtcblxuXHRcdFx0XHRjb25zdCBzbmlwcGV0ID0gc3VwZXIuYnVpbGQoIGJ1aWxkZXIsIHR5cGUgKTtcblxuXHRcdFx0XHRjb25zdCBub2RlVmFyID0gYnVpbGRlci5nZXRWYXJGcm9tTm9kZSggdGhpcywgbnVsbCwgdHlwZSApO1xuXHRcdFx0XHRjb25zdCBwcm9wZXJ0eU5hbWUgPSBidWlsZGVyLmdldFByb3BlcnR5TmFtZSggbm9kZVZhciApO1xuXG5cdFx0XHRcdGJ1aWxkZXIuYWRkTGluZUZsb3dDb2RlKCBgJHsgcHJvcGVydHlOYW1lIH0gPSAkeyBzbmlwcGV0IH1gLCB0aGlzICk7XG5cblx0XHRcdFx0bm9kZURhdGEuc25pcHBldCA9IHNuaXBwZXQ7XG5cdFx0XHRcdG5vZGVEYXRhLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcblxuXHRcdFx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIG5vZGVEYXRhLnByb3BlcnR5TmFtZSwgdHlwZSwgb3V0cHV0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBzdXBlci5idWlsZCggYnVpbGRlciwgb3V0cHV0ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRlbXBOb2RlO1xuIiwiaW1wb3J0IFRlbXBOb2RlIGZyb20gJy4uL2NvcmUvVGVtcE5vZGUuanMnO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIGlzIHBhcnQgb2YgdGhlIFRTTCBjb3JlIGFuZCB1c3VhbGx5IG5vdCB1c2VkIGluIGFwcCBsZXZlbCBjb2RlLlxuICogSXQgcmVwcmVzZW50cyBhIGpvaW4gb3BlcmF0aW9uIGR1cmluZyB0aGUgc2hhZGVyIGdlbmVyYXRpb24gcHJvY2Vzcy5cbiAqIEZvciBleGFtcGxlIGluIGNhbiBjb21wb3NlL2pvaW4gdHdvIHNpbmdsZSBmbG9hdHMgaW50byBhIGB2ZWMyYCB0eXBlLlxuICpcbiAqIEBhdWdtZW50cyBUZW1wTm9kZVxuICovXG5jbGFzcyBKb2luTm9kZSBleHRlbmRzIFRlbXBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0pvaW5Ob2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgam9pbiBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PE5vZGU+fSBub2RlcyAtIEFuIGFycmF5IG9mIG5vZGVzIHRoYXQgc2hvdWxkIGJlIGpvaW5lZC5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbbm9kZVR5cGU9bnVsbF0gLSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5vZGVzID0gW10sIG5vZGVUeXBlID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBub2RlVHlwZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgb2Ygbm9kZXMgdGhhdCBzaG91bGQgYmUgam9pbmVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE5vZGU+fVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZXMgPSBub2RlcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgbXVzdCBiZSBpbmZlcnJlZCBmcm9tIHRoZVxuXHQgKiBqb2luZWQgZGF0YSBsZW5ndGggaWYgbm90IGV4cGxpY2l0bHkgZGVmaW5lZC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybiBidWlsZGVyLmdldFZlY3RvclR5cGUoIHRoaXMubm9kZVR5cGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBidWlsZGVyLmdldFR5cGVGcm9tTGVuZ3RoKCB0aGlzLm5vZGVzLnJlZHVjZSggKCBjb3VudCwgY3VyICkgPT4gY291bnQgKyBidWlsZGVyLmdldFR5cGVMZW5ndGgoIGN1ci5nZXROb2RlVHlwZSggYnVpbGRlciApICksIDAgKSApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3QgdHlwZSA9IHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblx0XHRjb25zdCBub2RlcyA9IHRoaXMubm9kZXM7XG5cblx0XHRjb25zdCBwcmltaXRpdmVUeXBlID0gYnVpbGRlci5nZXRDb21wb25lbnRUeXBlKCB0eXBlICk7XG5cblx0XHRjb25zdCBzbmlwcGV0VmFsdWVzID0gW107XG5cblx0XHRmb3IgKCBjb25zdCBpbnB1dCBvZiBub2RlcyApIHtcblxuXHRcdFx0bGV0IGlucHV0U25pcHBldCA9IGlucHV0LmJ1aWxkKCBidWlsZGVyICk7XG5cblx0XHRcdGNvbnN0IGlucHV0UHJpbWl0aXZlVHlwZSA9IGJ1aWxkZXIuZ2V0Q29tcG9uZW50VHlwZSggaW5wdXQuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSApO1xuXG5cdFx0XHRpZiAoIGlucHV0UHJpbWl0aXZlVHlwZSAhPT0gcHJpbWl0aXZlVHlwZSApIHtcblxuXHRcdFx0XHRpbnB1dFNuaXBwZXQgPSBidWlsZGVyLmZvcm1hdCggaW5wdXRTbmlwcGV0LCBpbnB1dFByaW1pdGl2ZVR5cGUsIHByaW1pdGl2ZVR5cGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzbmlwcGV0VmFsdWVzLnB1c2goIGlucHV0U25pcHBldCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc25pcHBldCA9IGAkeyBidWlsZGVyLmdldFR5cGUoIHR5cGUgKSB9KCAkeyBzbmlwcGV0VmFsdWVzLmpvaW4oICcsICcgKSB9IClgO1xuXG5cdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBzbmlwcGV0LCB0eXBlLCBvdXRwdXQgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgSm9pbk5vZGU7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuaW1wb3J0IHsgdmVjdG9yQ29tcG9uZW50cyB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcblxuY29uc3QgX3N0cmluZ1ZlY3RvckNvbXBvbmVudHMgPSB2ZWN0b3JDb21wb25lbnRzLmpvaW4oICcnICk7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgaXMgcGFydCBvZiB0aGUgVFNMIGNvcmUgYW5kIHVzdWFsbHkgbm90IHVzZWQgaW4gYXBwIGxldmVsIGNvZGUuXG4gKiBgU3BsaXROb2RlYCByZXByZXNlbnRzIGEgcHJvcGVydHkgYWNjZXNzIG9wZXJhdGlvbiB3aGljaCBtZWFucyBpdCBpc1xuICogdXNlZCB0byBpbXBsZW1lbnQgYW55IGAueHl6d2AsIGAucmdiYWAgYW5kIGBzdHBxYCB1c2FnZSBvbiBub2RlIG9iamVjdHMuXG4gKiBGb3IgZXhhbXBsZTpcbiAqIGBgYGpzXG4gKiBjb25zdCByZWRWYWx1ZSA9IGNvbG9yLnI7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBTcGxpdE5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1NwbGl0Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHNwbGl0IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRoYXQgc2hvdWxkIGJlIGFjY2Vzc2VkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW2NvbXBvbmVudHM9J3gnXSAtIFRoZSBjb21wb25lbnRzIHRoYXQgc2hvdWxkIGJlIGFjY2Vzc2VkLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5vZGUsIGNvbXBvbmVudHMgPSAneCcgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdGhhdCBzaG91bGQgYmUgYWNjZXNzZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGUgPSBub2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvbXBvbmVudHMgdGhhdCBzaG91bGQgYmUgYWNjZXNzZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU3BsaXROb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZlY3RvciBsZW5ndGggd2hpY2ggaXMgY29tcHV0ZWQgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBjb21wb25lbnRzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB2ZWN0b3IgbGVuZ3RoLlxuXHQgKi9cblx0Z2V0VmVjdG9yTGVuZ3RoKCkge1xuXG5cdFx0bGV0IHZlY3Rvckxlbmd0aCA9IHRoaXMuY29tcG9uZW50cy5sZW5ndGg7XG5cblx0XHRmb3IgKCBjb25zdCBjIG9mIHRoaXMuY29tcG9uZW50cyApIHtcblxuXHRcdFx0dmVjdG9yTGVuZ3RoID0gTWF0aC5tYXgoIHZlY3RvckNvbXBvbmVudHMuaW5kZXhPZiggYyApICsgMSwgdmVjdG9yTGVuZ3RoICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmVjdG9yTGVuZ3RoO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY29tcG9uZW50IHR5cGUgb2YgdGhlIG5vZGUncyB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb21wb25lbnQgdHlwZS5cblx0ICovXG5cdGdldENvbXBvbmVudFR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gYnVpbGRlci5nZXRDb21wb25lbnRUeXBlKCB0aGlzLm5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgb3ZlcndyaXR0ZW4gc2luY2UgdGhlIG5vZGUgdHlwZSBpcyBpbmZlcnJlZCBmcm9tIHJlcXVlc3RlZCBjb21wb25lbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiBidWlsZGVyLmdldFR5cGVGcm9tTGVuZ3RoKCB0aGlzLmNvbXBvbmVudHMubGVuZ3RoLCB0aGlzLmdldENvbXBvbmVudFR5cGUoIGJ1aWxkZXIgKSApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3Qgbm9kZSA9IHRoaXMubm9kZTtcblx0XHRjb25zdCBub2RlVHlwZUxlbmd0aCA9IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggbm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApICk7XG5cblx0XHRsZXQgc25pcHBldCA9IG51bGw7XG5cblx0XHRpZiAoIG5vZGVUeXBlTGVuZ3RoID4gMSApIHtcblxuXHRcdFx0bGV0IHR5cGUgPSBudWxsO1xuXG5cdFx0XHRjb25zdCBjb21wb25lbnRzTGVuZ3RoID0gdGhpcy5nZXRWZWN0b3JMZW5ndGgoKTtcblxuXHRcdFx0aWYgKCBjb21wb25lbnRzTGVuZ3RoID49IG5vZGVUeXBlTGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIG5lZWRlZCBleHBhbmQgdGhlIGlucHV0IG5vZGVcblxuXHRcdFx0XHR0eXBlID0gYnVpbGRlci5nZXRUeXBlRnJvbUxlbmd0aCggdGhpcy5nZXRWZWN0b3JMZW5ndGgoKSwgdGhpcy5nZXRDb21wb25lbnRUeXBlKCBidWlsZGVyICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBub2RlU25pcHBldCA9IG5vZGUuYnVpbGQoIGJ1aWxkZXIsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCB0aGlzLmNvbXBvbmVudHMubGVuZ3RoID09PSBub2RlVHlwZUxlbmd0aCAmJiB0aGlzLmNvbXBvbmVudHMgPT09IF9zdHJpbmdWZWN0b3JDb21wb25lbnRzLnNsaWNlKCAwLCB0aGlzLmNvbXBvbmVudHMubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gdW5uZWNlc3Nhcnkgc3dpenpsZVxuXG5cdFx0XHRcdHNuaXBwZXQgPSBidWlsZGVyLmZvcm1hdCggbm9kZVNuaXBwZXQsIHR5cGUsIG91dHB1dCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHNuaXBwZXQgPSBidWlsZGVyLmZvcm1hdCggYCR7bm9kZVNuaXBwZXR9LiR7dGhpcy5jb21wb25lbnRzfWAsIHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSwgb3V0cHV0ICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGlnbm9yZSAuY29tcG9uZW50cyBpZiAubm9kZSByZXR1cm5zIGZsb2F0L2ludGVnZXJcblxuXHRcdFx0c25pcHBldCA9IG5vZGUuYnVpbGQoIGJ1aWxkZXIsIG91dHB1dCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNuaXBwZXQ7XG5cblx0fVxuXG5cdHNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLnNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0ZGF0YS5jb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzO1xuXG5cdH1cblxuXHRkZXNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLmRlc2VyaWFsaXplKCBkYXRhICk7XG5cblx0XHR0aGlzLmNvbXBvbmVudHMgPSBkYXRhLmNvbXBvbmVudHM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwbGl0Tm9kZTtcbiIsImltcG9ydCBUZW1wTm9kZSBmcm9tICcuLi9jb3JlL1RlbXBOb2RlLmpzJztcbmltcG9ydCB7IHZlY3RvckNvbXBvbmVudHMgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgaXMgcGFydCBvZiB0aGUgVFNMIGNvcmUgYW5kIHVzdWFsbHkgbm90IHVzZWQgaW4gYXBwIGxldmVsIGNvZGUuXG4gKiBgU2V0Tm9kZWAgcmVwcmVzZW50cyBhIHNldCBvcGVyYXRpb24gd2hpY2ggbWVhbnMgaXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgYW55XG4gKiBgc2V0WFlaVygpYCwgYHNldFJHQkEoKWAgYW5kIGBzZXRTVFBRKClgIG1ldGhvZCBpbnZvY2F0aW9ucyBvbiBub2RlIG9iamVjdHMuXG4gKiBGb3IgZXhhbXBsZTpcbiAqIGBgYGpzXG4gKiBtYXRlcmlhbExpbmUuY29sb3JOb2RlID0gY29sb3IoIDAsIDAsIDAgKS5zZXRSKCBmbG9hdCggMSApICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgU2V0Tm9kZSBleHRlbmRzIFRlbXBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1NldE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzZXQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBzb3VyY2VOb2RlIC0gVGhlIG5vZGUgdGhhdCBzaG91bGQgYmUgdXBkYXRlZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudHMgLSBUaGUgY29tcG9uZW50cyB0aGF0IHNob3VsZCBiZSB1cGRhdGVkLlxuXHQgKiBAcGFyYW0ge05vZGV9IHRhcmdldE5vZGUgLSBUaGUgdmFsdWUgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzb3VyY2VOb2RlLCBjb21wb25lbnRzLCB0YXJnZXROb2RlICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHRoYXQgc2hvdWxkIGJlIHVwZGF0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnNvdXJjZU5vZGUgPSBzb3VyY2VOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvbXBvbmVudHMgdGhhdCBzaG91bGQgYmUgdXBkYXRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5jb21wb25lbnRzID0gY29tcG9uZW50cztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2YWx1ZSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy50YXJnZXROb2RlID0gdGFyZ2V0Tm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgaXMgaW5mZXJyZWQgZnJvbSB7QGxpbmsgU2V0Tm9kZSNzb3VyY2VOb2RlfS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zb3VyY2VOb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBzb3VyY2VOb2RlLCBjb21wb25lbnRzLCB0YXJnZXROb2RlIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3Qgc291cmNlVHlwZSA9IHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IGNvbXBvbmVudFR5cGUgPSBidWlsZGVyLmdldENvbXBvbmVudFR5cGUoIHRhcmdldE5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSApO1xuXHRcdGNvbnN0IHRhcmdldFR5cGUgPSBidWlsZGVyLmdldFR5cGVGcm9tTGVuZ3RoKCBjb21wb25lbnRzLmxlbmd0aCwgY29tcG9uZW50VHlwZSApO1xuXG5cdFx0Y29uc3QgdGFyZ2V0U25pcHBldCA9IHRhcmdldE5vZGUuYnVpbGQoIGJ1aWxkZXIsIHRhcmdldFR5cGUgKTtcblx0XHRjb25zdCBzb3VyY2VTbmlwcGV0ID0gc291cmNlTm9kZS5idWlsZCggYnVpbGRlciwgc291cmNlVHlwZSApO1xuXG5cdFx0Y29uc3QgbGVuZ3RoID0gYnVpbGRlci5nZXRUeXBlTGVuZ3RoKCBzb3VyY2VUeXBlICk7XG5cdFx0Y29uc3Qgc25pcHBldFZhbHVlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjb21wb25lbnQgPSB2ZWN0b3JDb21wb25lbnRzWyBpIF07XG5cblx0XHRcdGlmICggY29tcG9uZW50ID09PSBjb21wb25lbnRzWyAwIF0gKSB7XG5cblx0XHRcdFx0c25pcHBldFZhbHVlcy5wdXNoKCB0YXJnZXRTbmlwcGV0ICk7XG5cblx0XHRcdFx0aSArPSBjb21wb25lbnRzLmxlbmd0aCAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c25pcHBldFZhbHVlcy5wdXNoKCBzb3VyY2VTbmlwcGV0ICsgJy4nICsgY29tcG9uZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBgJHsgYnVpbGRlci5nZXRUeXBlKCBzb3VyY2VUeXBlICkgfSggJHsgc25pcHBldFZhbHVlcy5qb2luKCAnLCAnICkgfSApYDtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2V0Tm9kZTtcbiIsImltcG9ydCBUZW1wTm9kZSBmcm9tICcuLi9jb3JlL1RlbXBOb2RlLmpzJztcbmltcG9ydCB7IHZlY3RvckNvbXBvbmVudHMgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgaXMgcGFydCBvZiB0aGUgVFNMIGNvcmUgYW5kIHVzdWFsbHkgbm90IHVzZWQgaW4gYXBwIGxldmVsIGNvZGUuXG4gKiBJdCByZXByZXNlbnRzIGEgZmxpcCBvcGVyYXRpb24gZHVyaW5nIHRoZSBzaGFkZXIgZ2VuZXJhdGlvbiBwcm9jZXNzXG4gKiBtZWFuaW5nIGl0IGZsaXBzIG5vcm1hbGl6ZWQgdmFsdWVzIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtdWxhOlxuICogYGBgXG4gKiB4ID0gMSAtIHg7XG4gKiBgYGBcbiAqIGBGbGlwTm9kZWAgaXMgaW50ZXJuYWxseSB1c2VkIHRvIGltcGxlbWVudCBhbnkgYGZsaXBYWVpXKClgLCBgZmxpcFJHQkEoKWAgYW5kXG4gKiBgZmxpcFNUUFEoKWAgbWV0aG9kIGludm9jYXRpb25zIG9uIG5vZGUgb2JqZWN0cy4gRm9yIGV4YW1wbGU6XG4gKiBgYGBqc1xuICogdXZOb2RlID0gdXZOb2RlLmZsaXBZKCk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgRmxpcE5vZGUgZXh0ZW5kcyBUZW1wTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdGbGlwTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGZsaXAgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBzb3VyY2VOb2RlIC0gVGhlIG5vZGUgd2hpY2ggY29tcG9uZW50KHMpIHNob3VsZCBiZSBmbGlwcGVkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50cyAtIFRoZSBjb21wb25lbnRzIHRoYXQgc2hvdWxkIGJlIGZsaXBwZWQgZS5nLiBgJ3gnYCBvciBgJ3h5J2AuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggc291cmNlTm9kZSwgY29tcG9uZW50cyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB3aGljaCBjb21wb25lbnQocykgc2hvdWxkIGJlIGZsaXBwZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnNvdXJjZU5vZGUgPSBzb3VyY2VOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvbXBvbmVudHMgdGhhdCBzaG91bGQgYmUgZmxpcHBlZCBlLmcuIGAneCdgIG9yIGAneHknYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5jb21wb25lbnRzID0gY29tcG9uZW50cztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgaXMgaW5mZXJyZWQgZnJvbSB0aGUgc291cmNlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc291cmNlTm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgY29tcG9uZW50cywgc291cmNlTm9kZSB9ID0gdGhpcztcblxuXHRcdGNvbnN0IHNvdXJjZVR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cdFx0Y29uc3Qgc291cmNlU25pcHBldCA9IHNvdXJjZU5vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IHNvdXJjZUNhY2hlID0gYnVpbGRlci5nZXRWYXJGcm9tTm9kZSggdGhpcyApO1xuXHRcdGNvbnN0IHNvdXJjZVByb3BlcnR5ID0gYnVpbGRlci5nZXRQcm9wZXJ0eU5hbWUoIHNvdXJjZUNhY2hlICk7XG5cblx0XHRidWlsZGVyLmFkZExpbmVGbG93Q29kZSggc291cmNlUHJvcGVydHkgKyAnID0gJyArIHNvdXJjZVNuaXBwZXQsIHRoaXMgKTtcblxuXHRcdGNvbnN0IGxlbmd0aCA9IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggc291cmNlVHlwZSApO1xuXHRcdGNvbnN0IHNuaXBwZXRWYWx1ZXMgPSBbXTtcblxuXHRcdGxldCBjb21wb25lbnRJbmRleCA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGNvbXBvbmVudCA9IHZlY3RvckNvbXBvbmVudHNbIGkgXTtcblxuXHRcdFx0aWYgKCBjb21wb25lbnQgPT09IGNvbXBvbmVudHNbIGNvbXBvbmVudEluZGV4IF0gKSB7XG5cblx0XHRcdFx0c25pcHBldFZhbHVlcy5wdXNoKCAnMS4wIC0gJyArICggc291cmNlUHJvcGVydHkgKyAnLicgKyBjb21wb25lbnQgKSApO1xuXG5cdFx0XHRcdGNvbXBvbmVudEluZGV4ICsrO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHNuaXBwZXRWYWx1ZXMucHVzaCggc291cmNlUHJvcGVydHkgKyAnLicgKyBjb21wb25lbnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGAkeyBidWlsZGVyLmdldFR5cGUoIHNvdXJjZVR5cGUgKSB9KCAkeyBzbmlwcGV0VmFsdWVzLmpvaW4oICcsICcgKSB9IClgO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBGbGlwTm9kZTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4vTm9kZS5qcyc7XG5pbXBvcnQgeyBnZXRWYWx1ZVR5cGUsIGdldFZhbHVlRnJvbVR5cGUsIGFycmF5QnVmZmVyVG9CYXNlNjQgfSBmcm9tICcuL05vZGVVdGlscy5qcyc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIGRhdGEgaW5wdXQgbm9kZXMuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgSW5wdXROb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdJbnB1dE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBpbnB1dCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2FueX0gdmFsdWUgLSBUaGUgdmFsdWUgb2YgdGhpcyBub2RlLiBUaGlzIGNhbiBiZSBhIGFueSBKUyBwcmltaXRpdmUsIGZ1bmN0aW9ucywgYXJyYXkgYnVmZmVycyBvciBldmVuIHRocmVlLmpzIG9iamVjdHMgKHZlY3RvciwgbWF0cmljZXMsIGNvbG9ycykuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gbm9kZVR5cGUgLSBUaGUgbm9kZSB0eXBlLiBJZiBubyBleHBsaWNpdCB0eXBlIGlzIGRlZmluZWQsIHRoZSBub2RlIHRyaWVzIHRvIGRlcml2ZSB0aGUgdHlwZSBmcm9tIGl0cyB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSwgbm9kZVR5cGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIG5vZGVUeXBlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzSW5wdXROb2RlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2YWx1ZSBvZiB0aGlzIG5vZGUuIFRoaXMgY2FuIGJlIGEgYW55IEpTIHByaW1pdGl2ZSwgZnVuY3Rpb25zLCBhcnJheSBidWZmZXJzIG9yIGV2ZW4gdGhyZWUuanMgb2JqZWN0cyAodmVjdG9yLCBtYXRyaWNlcywgY29sb3JzKS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHthbnl9XG5cdFx0ICovXG5cdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHByZWNpc2lvbiBvZiB0aGUgdmFsdWUgaW4gdGhlIHNoYWRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/KCdsb3cnfCdtZWRpdW0nfCdoaWdoJyl9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucHJlY2lzaW9uID0gbnVsbDtcblxuXHR9XG5cblx0Z2V0Tm9kZVR5cGUoIC8qYnVpbGRlciovICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSBudWxsICkge1xuXG5cdFx0XHRyZXR1cm4gZ2V0VmFsdWVUeXBlKCB0aGlzLnZhbHVlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5ub2RlVHlwZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGlucHV0IHR5cGUgb2YgdGhlIG5vZGUgd2hpY2ggaXMgYnkgZGVmYXVsdCB0aGUgbm9kZSB0eXBlLiBEZXJpdmVkIG1vZHVsZXNcblx0ICogbWlnaHQgb3ZlcndyaXRlIHRoaXMgbWV0aG9kIGFuZCB1c2UgYSBmaXhlZCB0eXBlIG9yIGNvbXB1dGUgb25lIGFuYWx5dGljYWxseS5cblx0ICpcblx0ICogQSB0eXBpY2FsIGV4YW1wbGUgZm9yIGRpZmZlcmVudCBpbnB1dCBhbmQgbm9kZSB0eXBlcyBhcmUgdGV4dHVyZXMuIFRoZSBpbnB1dCB0eXBlIG9mIGFcblx0ICogbm9ybWFsIFJHQkEgdGV4dHVyZSBpcyBgdGV4dHVyZWAgd2hlcmVhcyBpdHMgbm9kZSB0eXBlIGlzIGB2ZWM0YC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgaW5wdXQgdHlwZS5cblx0ICovXG5cdGdldElucHV0VHlwZSggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBwcmVjaXNpb24gdG8gdGhlIGdpdmVuIHZhbHVlLiBUaGUgbWV0aG9kIGNhbiBiZVxuXHQgKiBvdmVyd3JpdHRlbiBpbiBkZXJpdmVkIGNsYXNzZXMgaWYgdGhlIGZpbmFsIHByZWNpc2lvbiBtdXN0IGJlIGNvbXB1dGVkXG5cdCAqIGFuYWx5dGljYWxseS5cblx0ICpcblx0ICogQHBhcmFtIHsoJ2xvdyd8J21lZGl1bSd8J2hpZ2gnKX0gcHJlY2lzaW9uIC0gVGhlIHByZWNpc2lvbiBvZiB0aGUgaW5wdXQgdmFsdWUgaW4gdGhlIHNoYWRlci5cblx0ICogQHJldHVybiB7SW5wdXROb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRzZXRQcmVjaXNpb24oIHByZWNpc2lvbiApIHtcblxuXHRcdHRoaXMucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLnNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0ZGF0YS52YWx1ZSA9IHRoaXMudmFsdWU7XG5cblx0XHRpZiAoIHRoaXMudmFsdWUgJiYgdGhpcy52YWx1ZS50b0FycmF5ICkgZGF0YS52YWx1ZSA9IHRoaXMudmFsdWUudG9BcnJheSgpO1xuXG5cdFx0ZGF0YS52YWx1ZVR5cGUgPSBnZXRWYWx1ZVR5cGUoIHRoaXMudmFsdWUgKTtcblx0XHRkYXRhLm5vZGVUeXBlID0gdGhpcy5ub2RlVHlwZTtcblxuXHRcdGlmICggZGF0YS52YWx1ZVR5cGUgPT09ICdBcnJheUJ1ZmZlcicgKSBkYXRhLnZhbHVlID0gYXJyYXlCdWZmZXJUb0Jhc2U2NCggZGF0YS52YWx1ZSApO1xuXG5cdFx0ZGF0YS5wcmVjaXNpb24gPSB0aGlzLnByZWNpc2lvbjtcblxuXHR9XG5cblx0ZGVzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5kZXNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0dGhpcy5ub2RlVHlwZSA9IGRhdGEubm9kZVR5cGU7XG5cdFx0dGhpcy52YWx1ZSA9IEFycmF5LmlzQXJyYXkoIGRhdGEudmFsdWUgKSA/IGdldFZhbHVlRnJvbVR5cGUoIGRhdGEudmFsdWVUeXBlLCAuLi5kYXRhLnZhbHVlICkgOiBkYXRhLnZhbHVlO1xuXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBkYXRhLnByZWNpc2lvbiB8fCBudWxsO1xuXG5cdFx0aWYgKCB0aGlzLnZhbHVlICYmIHRoaXMudmFsdWUuZnJvbUFycmF5ICkgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuZnJvbUFycmF5KCBkYXRhLnZhbHVlICk7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCAvKmJ1aWxkZXIsIG91dHB1dCovICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnQWJzdHJhY3QgZnVuY3Rpb24uJyApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnB1dE5vZGU7XG4iLCJpbXBvcnQgSW5wdXROb2RlIGZyb20gJy4vSW5wdXROb2RlLmpzJztcblxuY29uc3QgX3JlZ051bSA9IC9mbG9hdHx1P2ludC87XG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIGNvbnN0YW50IHZhbHVlIGluIHRoZSBzaGFkZXIuXG4gKlxuICogQGF1Z21lbnRzIElucHV0Tm9kZVxuICovXG5jbGFzcyBDb25zdE5vZGUgZXh0ZW5kcyBJbnB1dE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnQ29uc3ROb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgaW5wdXQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoaXMgbm9kZS4gVXN1YWxseSBhIEpTIHByaW1pdGl2ZSBvciB0aHJlZS5qcyBvYmplY3QgKHZlY3RvciwgbWF0cml4LCBjb2xvcikuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gbm9kZVR5cGUgLSBUaGUgbm9kZSB0eXBlLiBJZiBubyBleHBsaWNpdCB0eXBlIGlzIGRlZmluZWQsIHRoZSBub2RlIHRyaWVzIHRvIGRlcml2ZSB0aGUgdHlwZSBmcm9tIGl0cyB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSwgbm9kZVR5cGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIHZhbHVlLCBub2RlVHlwZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0NvbnN0Tm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIHNoYWRlciBzdHJpbmcgb2YgdGhlIHZhbHVlIHdpdGggdGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBnZW5lcmF0ZWQgdmFsdWUgYXMgYSBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0Z2VuZXJhdGVDb25zdCggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiBidWlsZGVyLmdlbmVyYXRlQ29uc3QoIHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSwgdGhpcy52YWx1ZSApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3QgdHlwZSA9IHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdGlmICggX3JlZ051bS50ZXN0KCB0eXBlICkgJiYgX3JlZ051bS50ZXN0KCBvdXRwdXQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGJ1aWxkZXIuZ2VuZXJhdGVDb25zdCggb3V0cHV0LCB0aGlzLnZhbHVlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIHRoaXMuZ2VuZXJhdGVDb25zdCggYnVpbGRlciApLCB0eXBlLCBvdXRwdXQgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29uc3ROb2RlO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciByZXByZXNlbnRpbmcgbWVtYmVyIGFjY2VzcyBvbiBhbiBvYmplY3QtbGlrZVxuICogbm9kZSBkYXRhIHN0cnVjdHVyZXMuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgTWVtYmVyTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTWVtYmVyTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGFuIGFycmF5IGVsZW1lbnQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIGFycmF5LWxpa2Ugbm9kZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IC0gVGhlIHByb3BlcnR5IG5hbWUuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZSwgcHJvcGVydHkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGFycmF5LWxpa2Ugbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZSA9IG5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcHJvcGVydHkgbmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNNZW1iZXJOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub2RlLmdldE1lbWJlclR5cGUoIGJ1aWxkZXIsIHRoaXMucHJvcGVydHkgKTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBwcm9wZXJ0eU5hbWUgPSB0aGlzLm5vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHRcdHJldHVybiBwcm9wZXJ0eU5hbWUgKyAnLicgKyB0aGlzLnByb3BlcnR5O1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZW1iZXJOb2RlO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCBBcnJheUVsZW1lbnROb2RlIGZyb20gJy4uL3V0aWxzL0FycmF5RWxlbWVudE5vZGUuanMnO1xuaW1wb3J0IENvbnZlcnROb2RlIGZyb20gJy4uL3V0aWxzL0NvbnZlcnROb2RlLmpzJztcbmltcG9ydCBKb2luTm9kZSBmcm9tICcuLi91dGlscy9Kb2luTm9kZS5qcyc7XG5pbXBvcnQgU3BsaXROb2RlIGZyb20gJy4uL3V0aWxzL1NwbGl0Tm9kZS5qcyc7XG5pbXBvcnQgU2V0Tm9kZSBmcm9tICcuLi91dGlscy9TZXROb2RlLmpzJztcbmltcG9ydCBGbGlwTm9kZSBmcm9tICcuLi91dGlscy9GbGlwTm9kZS5qcyc7XG5pbXBvcnQgQ29uc3ROb2RlIGZyb20gJy4uL2NvcmUvQ29uc3ROb2RlLmpzJztcbmltcG9ydCBNZW1iZXJOb2RlIGZyb20gJy4uL3V0aWxzL01lbWJlck5vZGUuanMnO1xuaW1wb3J0IHsgZ2V0VmFsdWVGcm9tVHlwZSwgZ2V0VmFsdWVUeXBlIH0gZnJvbSAnLi4vY29yZS9Ob2RlVXRpbHMuanMnO1xuXG5sZXQgY3VycmVudFN0YWNrID0gbnVsbDtcblxuY29uc3QgTm9kZUVsZW1lbnRzID0gbmV3IE1hcCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkTWV0aG9kQ2hhaW5pbmcoIG5hbWUsIG5vZGVFbGVtZW50ICkge1xuXG5cdGlmICggTm9kZUVsZW1lbnRzLmhhcyggbmFtZSApICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCBgUmVkZWZpbml0aW9uIG9mIG1ldGhvZCBjaGFpbmluZyAkeyBuYW1lIH1gICk7XG5cdFx0cmV0dXJuO1xuXG5cdH1cblxuXHRpZiAoIHR5cGVvZiBub2RlRWxlbWVudCAhPT0gJ2Z1bmN0aW9uJyApIHRocm93IG5ldyBFcnJvciggYE5vZGUgZWxlbWVudCAkeyBuYW1lIH0gaXMgbm90IGEgZnVuY3Rpb25gICk7XG5cblx0Tm9kZUVsZW1lbnRzLnNldCggbmFtZSwgbm9kZUVsZW1lbnQgKTtcblxufVxuXG5jb25zdCBwYXJzZVN3aXp6bGUgPSAoIHByb3BzICkgPT4gcHJvcHMucmVwbGFjZSggL3J8cy9nLCAneCcgKS5yZXBsYWNlKCAvZ3x0L2csICd5JyApLnJlcGxhY2UoIC9ifHAvZywgJ3onICkucmVwbGFjZSggL2F8cS9nLCAndycgKTtcbmNvbnN0IHBhcnNlU3dpenpsZUFuZFNvcnQgPSAoIHByb3BzICkgPT4gcGFyc2VTd2l6emxlKCBwcm9wcyApLnNwbGl0KCAnJyApLnNvcnQoKS5qb2luKCAnJyApO1xuXG5jb25zdCBzaGFkZXJOb2RlSGFuZGxlciA9IHtcblxuXHRzZXR1cCggTm9kZUNsb3N1cmUsIHBhcmFtcyApIHtcblxuXHRcdGNvbnN0IGlucHV0cyA9IHBhcmFtcy5zaGlmdCgpO1xuXG5cdFx0cmV0dXJuIE5vZGVDbG9zdXJlKCBub2RlT2JqZWN0cyggaW5wdXRzICksIC4uLnBhcmFtcyApO1xuXG5cdH0sXG5cblx0Z2V0KCBub2RlLCBwcm9wLCBub2RlT2JqICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgbm9kZVsgcHJvcCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggbm9kZS5pc1N0YWNrTm9kZSAhPT0gdHJ1ZSAmJiBwcm9wID09PSAnYXNzaWduJyApIHtcblxuXHRcdFx0XHRyZXR1cm4gKCAuLi5wYXJhbXMgKSA9PiB7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RhY2suYXNzaWduKCBub2RlT2JqLCAuLi5wYXJhbXMgKTtcblxuXHRcdFx0XHRcdHJldHVybiBub2RlT2JqO1xuXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIE5vZGVFbGVtZW50cy5oYXMoIHByb3AgKSApIHtcblxuXHRcdFx0XHRjb25zdCBub2RlRWxlbWVudCA9IE5vZGVFbGVtZW50cy5nZXQoIHByb3AgKTtcblxuXHRcdFx0XHRyZXR1cm4gbm9kZS5pc1N0YWNrTm9kZSA/ICggLi4ucGFyYW1zICkgPT4gbm9kZU9iai5hZGQoIG5vZGVFbGVtZW50KCAuLi5wYXJhbXMgKSApIDogKCAuLi5wYXJhbXMgKSA9PiBub2RlRWxlbWVudCggbm9kZU9iaiwgLi4ucGFyYW1zICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHByb3AgPT09ICdzZWxmJyApIHtcblxuXHRcdFx0XHRyZXR1cm4gbm9kZTtcblxuXHRcdFx0fSBlbHNlIGlmICggcHJvcC5lbmRzV2l0aCggJ0Fzc2lnbicgKSAmJiBOb2RlRWxlbWVudHMuaGFzKCBwcm9wLnNsaWNlKCAwLCBwcm9wLmxlbmd0aCAtICdBc3NpZ24nLmxlbmd0aCApICkgKSB7XG5cblx0XHRcdFx0Y29uc3Qgbm9kZUVsZW1lbnQgPSBOb2RlRWxlbWVudHMuZ2V0KCBwcm9wLnNsaWNlKCAwLCBwcm9wLmxlbmd0aCAtICdBc3NpZ24nLmxlbmd0aCApICk7XG5cblx0XHRcdFx0cmV0dXJuIG5vZGUuaXNTdGFja05vZGUgPyAoIC4uLnBhcmFtcyApID0+IG5vZGVPYmouYXNzaWduKCBwYXJhbXNbIDAgXSwgbm9kZUVsZW1lbnQoIC4uLnBhcmFtcyApICkgOiAoIC4uLnBhcmFtcyApID0+IG5vZGVPYmouYXNzaWduKCBub2RlRWxlbWVudCggbm9kZU9iaiwgLi4ucGFyYW1zICkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggL15beHl6d3JnYmFzdHBxXXsxLDR9JC8udGVzdCggcHJvcCApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdC8vIGFjY2Vzc2luZyBwcm9wZXJ0aWVzICggc3dpenpsZSApXG5cblx0XHRcdFx0cHJvcCA9IHBhcnNlU3dpenpsZSggcHJvcCApO1xuXG5cdFx0XHRcdHJldHVybiBub2RlT2JqZWN0KCBuZXcgU3BsaXROb2RlKCBub2RlT2JqLCBwcm9wICkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggL15zZXRbWFlaV1JHQkFTVFBRXXsxLDR9JC8udGVzdCggcHJvcCApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdC8vIHNldCBwcm9wZXJ0aWVzICggc3dpenpsZSApIGFuZCBzb3J0IHRvIHh5encgc2VxdWVuY2VcblxuXHRcdFx0XHRwcm9wID0gcGFyc2VTd2l6emxlQW5kU29ydCggcHJvcC5zbGljZSggMyApLnRvTG93ZXJDYXNlKCkgKTtcblxuXHRcdFx0XHRyZXR1cm4gKCB2YWx1ZSApID0+IG5vZGVPYmplY3QoIG5ldyBTZXROb2RlKCBub2RlLCBwcm9wLCB2YWx1ZSApICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIC9eZmxpcFtYWVpXUkdCQVNUUFFdezEsNH0kLy50ZXN0KCBwcm9wICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Ly8gc2V0IHByb3BlcnRpZXMgKCBzd2l6emxlICkgYW5kIHNvcnQgdG8geHl6dyBzZXF1ZW5jZVxuXG5cdFx0XHRcdHByb3AgPSBwYXJzZVN3aXp6bGVBbmRTb3J0KCBwcm9wLnNsaWNlKCA0ICkudG9Mb3dlckNhc2UoKSApO1xuXG5cdFx0XHRcdHJldHVybiAoKSA9PiBub2RlT2JqZWN0KCBuZXcgRmxpcE5vZGUoIG5vZGVPYmplY3QoIG5vZGUgKSwgcHJvcCApICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHByb3AgPT09ICd3aWR0aCcgfHwgcHJvcCA9PT0gJ2hlaWdodCcgfHwgcHJvcCA9PT0gJ2RlcHRoJyApIHtcblxuXHRcdFx0XHQvLyBhY2Nlc3NpbmcgcHJvcGVydHlcblxuXHRcdFx0XHRpZiAoIHByb3AgPT09ICd3aWR0aCcgKSBwcm9wID0gJ3gnO1xuXHRcdFx0XHRlbHNlIGlmICggcHJvcCA9PT0gJ2hlaWdodCcgKSBwcm9wID0gJ3knO1xuXHRcdFx0XHRlbHNlIGlmICggcHJvcCA9PT0gJ2RlcHRoJyApIHByb3AgPSAneic7XG5cblx0XHRcdFx0cmV0dXJuIG5vZGVPYmplY3QoIG5ldyBTcGxpdE5vZGUoIG5vZGUsIHByb3AgKSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCAvXlxcZCskLy50ZXN0KCBwcm9wICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Ly8gYWNjZXNzaW5nIGFycmF5XG5cblx0XHRcdFx0cmV0dXJuIG5vZGVPYmplY3QoIG5ldyBBcnJheUVsZW1lbnROb2RlKCBub2RlT2JqLCBuZXcgQ29uc3ROb2RlKCBOdW1iZXIoIHByb3AgKSwgJ3VpbnQnICkgKSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCAvXmdldCQvLnRlc3QoIHByb3AgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHQvLyBhY2Nlc3NpbmcgcHJvcGVydGllc1xuXG5cdFx0XHRcdHJldHVybiAoIHZhbHVlICkgPT4gbm9kZU9iamVjdCggbmV3IE1lbWJlck5vZGUoIG5vZGVPYmosIHZhbHVlICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJlZmxlY3QuZ2V0KCBub2RlLCBwcm9wLCBub2RlT2JqICk7XG5cblx0fSxcblxuXHRzZXQoIG5vZGUsIHByb3AsIHZhbHVlLCBub2RlT2JqICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycgJiYgbm9kZVsgcHJvcCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIHNldHRpbmcgcHJvcGVydGllc1xuXG5cdFx0XHRpZiAoIC9eW3h5endyZ2Jhc3RwcV17MSw0fSQvLnRlc3QoIHByb3AgKSA9PT0gdHJ1ZSB8fCBwcm9wID09PSAnd2lkdGgnIHx8IHByb3AgPT09ICdoZWlnaHQnIHx8IHByb3AgPT09ICdkZXB0aCcgfHwgL15cXGQrJC8udGVzdCggcHJvcCApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5vZGVPYmpbIHByb3AgXS5hc3NpZ24oIHZhbHVlICk7XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBSZWZsZWN0LnNldCggbm9kZSwgcHJvcCwgdmFsdWUsIG5vZGVPYmogKTtcblxuXHR9XG5cbn07XG5cbmNvbnN0IG5vZGVPYmplY3RzQ2FjaGVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3Qgbm9kZUJ1aWxkZXJGdW5jdGlvbnNDYWNoZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbmNvbnN0IFNoYWRlck5vZGVPYmplY3QgPSBmdW5jdGlvbiAoIG9iaiwgYWx0VHlwZSA9IG51bGwgKSB7XG5cblx0Y29uc3QgdHlwZSA9IGdldFZhbHVlVHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSAnbm9kZScgKSB7XG5cblx0XHRsZXQgbm9kZU9iamVjdCA9IG5vZGVPYmplY3RzQ2FjaGVNYXAuZ2V0KCBvYmogKTtcblxuXHRcdGlmICggbm9kZU9iamVjdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRub2RlT2JqZWN0ID0gbmV3IFByb3h5KCBvYmosIHNoYWRlck5vZGVIYW5kbGVyICk7XG5cblx0XHRcdG5vZGVPYmplY3RzQ2FjaGVNYXAuc2V0KCBvYmosIG5vZGVPYmplY3QgKTtcblx0XHRcdG5vZGVPYmplY3RzQ2FjaGVNYXAuc2V0KCBub2RlT2JqZWN0LCBub2RlT2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbm9kZU9iamVjdDtcblxuXHR9IGVsc2UgaWYgKCAoIGFsdFR5cGUgPT09IG51bGwgJiYgKCB0eXBlID09PSAnZmxvYXQnIHx8IHR5cGUgPT09ICdib29sZWFuJyApICkgfHwgKCB0eXBlICYmIHR5cGUgIT09ICdzaGFkZXInICYmIHR5cGUgIT09ICdzdHJpbmcnICkgKSB7XG5cblx0XHRyZXR1cm4gbm9kZU9iamVjdCggZ2V0Q29uc3ROb2RlKCBvYmosIGFsdFR5cGUgKSApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGUgPT09ICdzaGFkZXInICkge1xuXG5cdFx0cmV0dXJuIEZuKCBvYmogKTtcblxuXHR9XG5cblx0cmV0dXJuIG9iajtcblxufTtcblxuY29uc3QgU2hhZGVyTm9kZU9iamVjdHMgPSBmdW5jdGlvbiAoIG9iamVjdHMsIGFsdFR5cGUgPSBudWxsICkge1xuXG5cdGZvciAoIGNvbnN0IG5hbWUgaW4gb2JqZWN0cyApIHtcblxuXHRcdG9iamVjdHNbIG5hbWUgXSA9IG5vZGVPYmplY3QoIG9iamVjdHNbIG5hbWUgXSwgYWx0VHlwZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gb2JqZWN0cztcblxufTtcblxuY29uc3QgU2hhZGVyTm9kZUFycmF5ID0gZnVuY3Rpb24gKCBhcnJheSwgYWx0VHlwZSA9IG51bGwgKSB7XG5cblx0Y29uc3QgbGVuID0gYXJyYXkubGVuZ3RoO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IGxlbjsgaSArKyApIHtcblxuXHRcdGFycmF5WyBpIF0gPSBub2RlT2JqZWN0KCBhcnJheVsgaSBdLCBhbHRUeXBlICk7XG5cblx0fVxuXG5cdHJldHVybiBhcnJheTtcblxufTtcblxuY29uc3QgU2hhZGVyTm9kZVByb3h5ID0gZnVuY3Rpb24gKCBOb2RlQ2xhc3MsIHNjb3BlID0gbnVsbCwgZmFjdG9yID0gbnVsbCwgc2V0dGluZ3MgPSBudWxsICkge1xuXG5cdGNvbnN0IGFzc2lnbk5vZGUgPSAoIG5vZGUgKSA9PiBub2RlT2JqZWN0KCBzZXR0aW5ncyAhPT0gbnVsbCA/IE9iamVjdC5hc3NpZ24oIG5vZGUsIHNldHRpbmdzICkgOiBub2RlICk7XG5cblx0aWYgKCBzY29wZSA9PT0gbnVsbCApIHtcblxuXHRcdHJldHVybiAoIC4uLnBhcmFtcyApID0+IHtcblxuXHRcdFx0cmV0dXJuIGFzc2lnbk5vZGUoIG5ldyBOb2RlQ2xhc3MoIC4uLm5vZGVBcnJheSggcGFyYW1zICkgKSApO1xuXG5cdFx0fTtcblxuXHR9IGVsc2UgaWYgKCBmYWN0b3IgIT09IG51bGwgKSB7XG5cblx0XHRmYWN0b3IgPSBub2RlT2JqZWN0KCBmYWN0b3IgKTtcblxuXHRcdHJldHVybiAoIC4uLnBhcmFtcyApID0+IHtcblxuXHRcdFx0cmV0dXJuIGFzc2lnbk5vZGUoIG5ldyBOb2RlQ2xhc3MoIHNjb3BlLCAuLi5ub2RlQXJyYXkoIHBhcmFtcyApLCBmYWN0b3IgKSApO1xuXG5cdFx0fTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cmV0dXJuICggLi4ucGFyYW1zICkgPT4ge1xuXG5cdFx0XHRyZXR1cm4gYXNzaWduTm9kZSggbmV3IE5vZGVDbGFzcyggc2NvcGUsIC4uLm5vZGVBcnJheSggcGFyYW1zICkgKSApO1xuXG5cdFx0fTtcblxuXHR9XG5cbn07XG5cbmNvbnN0IFNoYWRlck5vZGVJbW11dGFibGUgPSBmdW5jdGlvbiAoIE5vZGVDbGFzcywgLi4ucGFyYW1zICkge1xuXG5cdHJldHVybiBub2RlT2JqZWN0KCBuZXcgTm9kZUNsYXNzKCAuLi5ub2RlQXJyYXkoIHBhcmFtcyApICkgKTtcblxufTtcblxuY2xhc3MgU2hhZGVyQ2FsbE5vZGVJbnRlcm5hbCBleHRlbmRzIE5vZGUge1xuXG5cdGNvbnN0cnVjdG9yKCBzaGFkZXJOb2RlLCBpbnB1dE5vZGVzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuc2hhZGVyTm9kZSA9IHNoYWRlck5vZGU7XG5cdFx0dGhpcy5pbnB1dE5vZGVzID0gaW5wdXROb2RlcztcblxuXHR9XG5cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zaGFkZXJOb2RlLm5vZGVUeXBlIHx8IHRoaXMuZ2V0T3V0cHV0Tm9kZSggYnVpbGRlciApLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdGdldE1lbWJlclR5cGUoIGJ1aWxkZXIsIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPdXRwdXROb2RlKCBidWlsZGVyICkuZ2V0TWVtYmVyVHlwZSggYnVpbGRlciwgbmFtZSApO1xuXG5cdH1cblxuXHRjYWxsKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBzaGFkZXJOb2RlLCBpbnB1dE5vZGVzIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgcHJvcGVydGllcyA9IGJ1aWxkZXIuZ2V0Tm9kZVByb3BlcnRpZXMoIHNoYWRlck5vZGUgKTtcblx0XHRpZiAoIHByb3BlcnRpZXMub25jZU91dHB1dCApIHJldHVybiBwcm9wZXJ0aWVzLm9uY2VPdXRwdXQ7XG5cblx0XHQvL1xuXG5cdFx0bGV0IHJlc3VsdCA9IG51bGw7XG5cblx0XHRpZiAoIHNoYWRlck5vZGUubGF5b3V0ICkge1xuXG5cdFx0XHRsZXQgZnVuY3Rpb25Ob2Rlc0NhY2hlTWFwID0gbm9kZUJ1aWxkZXJGdW5jdGlvbnNDYWNoZU1hcC5nZXQoIGJ1aWxkZXIuY29uc3RydWN0b3IgKTtcblxuXHRcdFx0aWYgKCBmdW5jdGlvbk5vZGVzQ2FjaGVNYXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRmdW5jdGlvbk5vZGVzQ2FjaGVNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0XHRcdG5vZGVCdWlsZGVyRnVuY3Rpb25zQ2FjaGVNYXAuc2V0KCBidWlsZGVyLmNvbnN0cnVjdG9yLCBmdW5jdGlvbk5vZGVzQ2FjaGVNYXAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgZnVuY3Rpb25Ob2RlID0gZnVuY3Rpb25Ob2Rlc0NhY2hlTWFwLmdldCggc2hhZGVyTm9kZSApO1xuXG5cdFx0XHRpZiAoIGZ1bmN0aW9uTm9kZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGZ1bmN0aW9uTm9kZSA9IG5vZGVPYmplY3QoIGJ1aWxkZXIuYnVpbGRGdW5jdGlvbk5vZGUoIHNoYWRlck5vZGUgKSApO1xuXG5cdFx0XHRcdGZ1bmN0aW9uTm9kZXNDYWNoZU1hcC5zZXQoIHNoYWRlck5vZGUsIGZ1bmN0aW9uTm9kZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJ1aWxkZXIuYWRkSW5jbHVkZSggZnVuY3Rpb25Ob2RlICk7XG5cblx0XHRcdHJlc3VsdCA9IG5vZGVPYmplY3QoIGZ1bmN0aW9uTm9kZS5jYWxsKCBpbnB1dE5vZGVzICkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IGpzRnVuYyA9IHNoYWRlck5vZGUuanNGdW5jO1xuXHRcdFx0Y29uc3Qgb3V0cHV0Tm9kZSA9IGlucHV0Tm9kZXMgIT09IG51bGwgfHwganNGdW5jLmxlbmd0aCA+IDEgPyBqc0Z1bmMoIGlucHV0Tm9kZXMgfHwgW10sIGJ1aWxkZXIgKSA6IGpzRnVuYyggYnVpbGRlciApO1xuXG5cdFx0XHRyZXN1bHQgPSBub2RlT2JqZWN0KCBvdXRwdXROb2RlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHNoYWRlck5vZGUub25jZSApIHtcblxuXHRcdFx0cHJvcGVydGllcy5vbmNlT3V0cHV0ID0gcmVzdWx0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cblx0Z2V0T3V0cHV0Tm9kZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHByb3BlcnRpZXMgPSBidWlsZGVyLmdldE5vZGVQcm9wZXJ0aWVzKCB0aGlzICk7XG5cblx0XHRpZiAoIHByb3BlcnRpZXMub3V0cHV0Tm9kZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0cHJvcGVydGllcy5vdXRwdXROb2RlID0gdGhpcy5zZXR1cE91dHB1dCggYnVpbGRlciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb3BlcnRpZXMub3V0cHV0Tm9kZTtcblxuXHR9XG5cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPdXRwdXROb2RlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdHNldHVwT3V0cHV0KCBidWlsZGVyICkge1xuXG5cdFx0YnVpbGRlci5hZGRTdGFjaygpO1xuXG5cdFx0YnVpbGRlci5zdGFjay5vdXRwdXROb2RlID0gdGhpcy5jYWxsKCBidWlsZGVyICk7XG5cblx0XHRyZXR1cm4gYnVpbGRlci5yZW1vdmVTdGFjaygpO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3Qgb3V0cHV0Tm9kZSA9IHRoaXMuZ2V0T3V0cHV0Tm9kZSggYnVpbGRlciApO1xuXG5cdFx0cmV0dXJuIG91dHB1dE5vZGUuYnVpbGQoIGJ1aWxkZXIsIG91dHB1dCApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBTaGFkZXJOb2RlSW50ZXJuYWwgZXh0ZW5kcyBOb2RlIHtcblxuXHRjb25zdHJ1Y3RvcigganNGdW5jLCBub2RlVHlwZSApIHtcblxuXHRcdHN1cGVyKCBub2RlVHlwZSApO1xuXG5cdFx0dGhpcy5qc0Z1bmMgPSBqc0Z1bmM7XG5cdFx0dGhpcy5sYXlvdXQgPSBudWxsO1xuXG5cdFx0dGhpcy5nbG9iYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy5vbmNlID0gZmFsc2U7XG5cblx0fVxuXG5cdHNldExheW91dCggbGF5b3V0ICkge1xuXG5cdFx0dGhpcy5sYXlvdXQgPSBsYXlvdXQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2FsbCggaW5wdXRzID0gbnVsbCApIHtcblxuXHRcdG5vZGVPYmplY3RzKCBpbnB1dHMgKTtcblxuXHRcdHJldHVybiBub2RlT2JqZWN0KCBuZXcgU2hhZGVyQ2FsbE5vZGVJbnRlcm5hbCggdGhpcywgaW5wdXRzICkgKTtcblxuXHR9XG5cblx0c2V0dXAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jYWxsKCk7XG5cblx0fVxuXG59XG5cbmNvbnN0IGJvb2xzID0gWyBmYWxzZSwgdHJ1ZSBdO1xuY29uc3QgdWludHMgPSBbIDAsIDEsIDIsIDMgXTtcbmNvbnN0IGludHMgPSBbIC0gMSwgLSAyIF07XG5jb25zdCBmbG9hdHMgPSBbIDAuNSwgMS41LCAxIC8gMywgMWUtNiwgMWU2LCBNYXRoLlBJLCBNYXRoLlBJICogMiwgMSAvIE1hdGguUEksIDIgLyBNYXRoLlBJLCAxIC8gKCBNYXRoLlBJICogMiApLCBNYXRoLlBJIC8gMiBdO1xuXG5jb25zdCBib29sc0NhY2hlTWFwID0gbmV3IE1hcCgpO1xuZm9yICggY29uc3QgYm9vbCBvZiBib29scyApIGJvb2xzQ2FjaGVNYXAuc2V0KCBib29sLCBuZXcgQ29uc3ROb2RlKCBib29sICkgKTtcblxuY29uc3QgdWludHNDYWNoZU1hcCA9IG5ldyBNYXAoKTtcbmZvciAoIGNvbnN0IHVpbnQgb2YgdWludHMgKSB1aW50c0NhY2hlTWFwLnNldCggdWludCwgbmV3IENvbnN0Tm9kZSggdWludCwgJ3VpbnQnICkgKTtcblxuY29uc3QgaW50c0NhY2hlTWFwID0gbmV3IE1hcCggWyAuLi51aW50c0NhY2hlTWFwIF0ubWFwKCBlbCA9PiBuZXcgQ29uc3ROb2RlKCBlbC52YWx1ZSwgJ2ludCcgKSApICk7XG5mb3IgKCBjb25zdCBpbnQgb2YgaW50cyApIGludHNDYWNoZU1hcC5zZXQoIGludCwgbmV3IENvbnN0Tm9kZSggaW50LCAnaW50JyApICk7XG5cbmNvbnN0IGZsb2F0c0NhY2hlTWFwID0gbmV3IE1hcCggWyAuLi5pbnRzQ2FjaGVNYXAgXS5tYXAoIGVsID0+IG5ldyBDb25zdE5vZGUoIGVsLnZhbHVlICkgKSApO1xuZm9yICggY29uc3QgZmxvYXQgb2YgZmxvYXRzICkgZmxvYXRzQ2FjaGVNYXAuc2V0KCBmbG9hdCwgbmV3IENvbnN0Tm9kZSggZmxvYXQgKSApO1xuZm9yICggY29uc3QgZmxvYXQgb2YgZmxvYXRzICkgZmxvYXRzQ2FjaGVNYXAuc2V0KCAtIGZsb2F0LCBuZXcgQ29uc3ROb2RlKCAtIGZsb2F0ICkgKTtcblxuY29uc3QgY2FjaGVNYXBzID0geyBib29sOiBib29sc0NhY2hlTWFwLCB1aW50OiB1aW50c0NhY2hlTWFwLCBpbnRzOiBpbnRzQ2FjaGVNYXAsIGZsb2F0OiBmbG9hdHNDYWNoZU1hcCB9O1xuXG5jb25zdCBjb25zdE5vZGVzQ2FjaGVNYXAgPSBuZXcgTWFwKCBbIC4uLmJvb2xzQ2FjaGVNYXAsIC4uLmZsb2F0c0NhY2hlTWFwIF0gKTtcblxuY29uc3QgZ2V0Q29uc3ROb2RlID0gKCB2YWx1ZSwgdHlwZSApID0+IHtcblxuXHRpZiAoIGNvbnN0Tm9kZXNDYWNoZU1hcC5oYXMoIHZhbHVlICkgKSB7XG5cblx0XHRyZXR1cm4gY29uc3ROb2Rlc0NhY2hlTWFwLmdldCggdmFsdWUgKTtcblxuXHR9IGVsc2UgaWYgKCB2YWx1ZS5pc05vZGUgPT09IHRydWUgKSB7XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBuZXcgQ29uc3ROb2RlKCB2YWx1ZSwgdHlwZSApO1xuXG5cdH1cblxufTtcblxuY29uc3Qgc2FmZUdldE5vZGVUeXBlID0gKCBub2RlICkgPT4ge1xuXG5cdHRyeSB7XG5cblx0XHRyZXR1cm4gbm9kZS5nZXROb2RlVHlwZSgpO1xuXG5cdH0gY2F0Y2ggKCBfICkge1xuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9XG5cbn07XG5cbmNvbnN0IENvbnZlcnRUeXBlID0gZnVuY3Rpb24gKCB0eXBlLCBjYWNoZU1hcCA9IG51bGwgKSB7XG5cblx0cmV0dXJuICggLi4ucGFyYW1zICkgPT4ge1xuXG5cdFx0aWYgKCBwYXJhbXMubGVuZ3RoID09PSAwIHx8ICggISBbICdib29sJywgJ2Zsb2F0JywgJ2ludCcsICd1aW50JyBdLmluY2x1ZGVzKCB0eXBlICkgJiYgcGFyYW1zLmV2ZXJ5KCBwYXJhbSA9PiB0eXBlb2YgcGFyYW0gIT09ICdvYmplY3QnICkgKSApIHtcblxuXHRcdFx0cGFyYW1zID0gWyBnZXRWYWx1ZUZyb21UeXBlKCB0eXBlLCAuLi5wYXJhbXMgKSBdO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwYXJhbXMubGVuZ3RoID09PSAxICYmIGNhY2hlTWFwICE9PSBudWxsICYmIGNhY2hlTWFwLmhhcyggcGFyYW1zWyAwIF0gKSApIHtcblxuXHRcdFx0cmV0dXJuIG5vZGVPYmplY3QoIGNhY2hlTWFwLmdldCggcGFyYW1zWyAwIF0gKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwYXJhbXMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHRjb25zdCBub2RlID0gZ2V0Q29uc3ROb2RlKCBwYXJhbXNbIDAgXSwgdHlwZSApO1xuXHRcdFx0aWYgKCBzYWZlR2V0Tm9kZVR5cGUoIG5vZGUgKSA9PT0gdHlwZSApIHJldHVybiBub2RlT2JqZWN0KCBub2RlICk7XG5cdFx0XHRyZXR1cm4gbm9kZU9iamVjdCggbmV3IENvbnZlcnROb2RlKCBub2RlLCB0eXBlICkgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG5vZGVzID0gcGFyYW1zLm1hcCggcGFyYW0gPT4gZ2V0Q29uc3ROb2RlKCBwYXJhbSApICk7XG5cdFx0cmV0dXJuIG5vZGVPYmplY3QoIG5ldyBKb2luTm9kZSggbm9kZXMsIHR5cGUgKSApO1xuXG5cdH07XG5cbn07XG5cbi8vIGV4cG9ydHNcblxuZXhwb3J0IGNvbnN0IGRlZmluZWQgPSAoIHYgKSA9PiB0eXBlb2YgdiA9PT0gJ29iamVjdCcgJiYgdiAhPT0gbnVsbCA/IHYudmFsdWUgOiB2OyAvLyBUT0RPOiByZW1vdmUgYm9vbGVhbiBjb252ZXJzaW9uIGFuZCBkZWZpbmVkIGZ1bmN0aW9uXG5cbi8vIHV0aWxzXG5cbmV4cG9ydCBjb25zdCBnZXRDb25zdE5vZGVUeXBlID0gKCB2YWx1ZSApID0+ICggdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCApID8gKCB2YWx1ZS5ub2RlVHlwZSB8fCB2YWx1ZS5jb252ZXJ0VG8gfHwgKCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBudWxsICkgKSA6IG51bGw7XG5cbi8vIHNoYWRlciBub2RlIGJhc2VcblxuZXhwb3J0IGZ1bmN0aW9uIFNoYWRlck5vZGUoIGpzRnVuYywgbm9kZVR5cGUgKSB7XG5cblx0cmV0dXJuIG5ldyBQcm94eSggbmV3IFNoYWRlck5vZGVJbnRlcm5hbCgganNGdW5jLCBub2RlVHlwZSApLCBzaGFkZXJOb2RlSGFuZGxlciApO1xuXG59XG5cbmV4cG9ydCBjb25zdCBub2RlT2JqZWN0ID0gKCB2YWwsIGFsdFR5cGUgPSBudWxsICkgPT4gLyogbmV3ICovIFNoYWRlck5vZGVPYmplY3QoIHZhbCwgYWx0VHlwZSApO1xuZXhwb3J0IGNvbnN0IG5vZGVPYmplY3RzID0gKCB2YWwsIGFsdFR5cGUgPSBudWxsICkgPT4gbmV3IFNoYWRlck5vZGVPYmplY3RzKCB2YWwsIGFsdFR5cGUgKTtcbmV4cG9ydCBjb25zdCBub2RlQXJyYXkgPSAoIHZhbCwgYWx0VHlwZSA9IG51bGwgKSA9PiBuZXcgU2hhZGVyTm9kZUFycmF5KCB2YWwsIGFsdFR5cGUgKTtcbmV4cG9ydCBjb25zdCBub2RlUHJveHkgPSAoIC4uLnBhcmFtcyApID0+IG5ldyBTaGFkZXJOb2RlUHJveHkoIC4uLnBhcmFtcyApO1xuZXhwb3J0IGNvbnN0IG5vZGVJbW11dGFibGUgPSAoIC4uLnBhcmFtcyApID0+IG5ldyBTaGFkZXJOb2RlSW1tdXRhYmxlKCAuLi5wYXJhbXMgKTtcblxuZXhwb3J0IGNvbnN0IEZuID0gKCBqc0Z1bmMsIG5vZGVUeXBlICkgPT4ge1xuXG5cdGNvbnN0IHNoYWRlck5vZGUgPSBuZXcgU2hhZGVyTm9kZSgganNGdW5jLCBub2RlVHlwZSApO1xuXG5cdGNvbnN0IGZuID0gKCAuLi5wYXJhbXMgKSA9PiB7XG5cblx0XHRsZXQgaW5wdXRzO1xuXG5cdFx0bm9kZU9iamVjdHMoIHBhcmFtcyApO1xuXG5cdFx0aWYgKCBwYXJhbXNbIDAgXSAmJiBwYXJhbXNbIDAgXS5pc05vZGUgKSB7XG5cblx0XHRcdGlucHV0cyA9IFsgLi4ucGFyYW1zIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpbnB1dHMgPSBwYXJhbXNbIDAgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzaGFkZXJOb2RlLmNhbGwoIGlucHV0cyApO1xuXG5cdH07XG5cblx0Zm4uc2hhZGVyTm9kZSA9IHNoYWRlck5vZGU7XG5cblx0Zm4uc2V0TGF5b3V0ID0gKCBsYXlvdXQgKSA9PiB7XG5cblx0XHRzaGFkZXJOb2RlLnNldExheW91dCggbGF5b3V0ICk7XG5cblx0XHRyZXR1cm4gZm47XG5cblx0fTtcblxuXHRmbi5vbmNlID0gKCkgPT4ge1xuXG5cdFx0c2hhZGVyTm9kZS5vbmNlID0gdHJ1ZTtcblxuXHRcdHJldHVybiBmbjtcblxuXHR9O1xuXG5cdHJldHVybiBmbjtcblxufTtcblxuLyoqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBkZXByZWNhdGVkIHNpbmNlIHIxNjguIFVzZSB7QGxpbmsgRm59IGluc3RlYWQuXG4gKlxuICogQHBhcmFtICB7Li4uYW55fSBwYXJhbXNcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRzbEZuID0gKCAuLi5wYXJhbXMgKSA9PiB7IC8vIEBkZXByZWNhdGVkLCByMTY4XG5cblx0Y29uc29sZS53YXJuKCAnVFNMLlNoYWRlck5vZGU6IHRzbEZuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byBGbigpLicgKTtcblx0cmV0dXJuIEZuKCAuLi5wYXJhbXMgKTtcblxufTtcblxuLy9cblxuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b0dsb2JhbCcsICggbm9kZSApID0+IHtcblxuXHRub2RlLmdsb2JhbCA9IHRydWU7XG5cblx0cmV0dXJuIG5vZGU7XG5cbn0gKTtcblxuLy9cblxuZXhwb3J0IGNvbnN0IHNldEN1cnJlbnRTdGFjayA9ICggc3RhY2sgKSA9PiB7XG5cblx0aWYgKCBjdXJyZW50U3RhY2sgPT09IHN0YWNrICkge1xuXG5cdFx0Ly90aHJvdyBuZXcgRXJyb3IoICdTdGFjayBhbHJlYWR5IGRlZmluZWQuJyApO1xuXG5cdH1cblxuXHRjdXJyZW50U3RhY2sgPSBzdGFjaztcblxufTtcblxuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRTdGFjayA9ICgpID0+IGN1cnJlbnRTdGFjaztcblxuZXhwb3J0IGNvbnN0IElmID0gKCAuLi5wYXJhbXMgKSA9PiBjdXJyZW50U3RhY2suSWYoIC4uLnBhcmFtcyApO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kKCBub2RlICkge1xuXG5cdGlmICggY3VycmVudFN0YWNrICkgY3VycmVudFN0YWNrLmFkZCggbm9kZSApO1xuXG5cdHJldHVybiBub2RlO1xuXG59XG5cbmFkZE1ldGhvZENoYWluaW5nKCAnYXBwZW5kJywgYXBwZW5kICk7XG5cbi8vIHR5cGVzXG5cbmV4cG9ydCBjb25zdCBjb2xvciA9IG5ldyBDb252ZXJ0VHlwZSggJ2NvbG9yJyApO1xuXG5leHBvcnQgY29uc3QgZmxvYXQgPSBuZXcgQ29udmVydFR5cGUoICdmbG9hdCcsIGNhY2hlTWFwcy5mbG9hdCApO1xuZXhwb3J0IGNvbnN0IGludCA9IG5ldyBDb252ZXJ0VHlwZSggJ2ludCcsIGNhY2hlTWFwcy5pbnRzICk7XG5leHBvcnQgY29uc3QgdWludCA9IG5ldyBDb252ZXJ0VHlwZSggJ3VpbnQnLCBjYWNoZU1hcHMudWludCApO1xuZXhwb3J0IGNvbnN0IGJvb2wgPSBuZXcgQ29udmVydFR5cGUoICdib29sJywgY2FjaGVNYXBzLmJvb2wgKTtcblxuZXhwb3J0IGNvbnN0IHZlYzIgPSBuZXcgQ29udmVydFR5cGUoICd2ZWMyJyApO1xuZXhwb3J0IGNvbnN0IGl2ZWMyID0gbmV3IENvbnZlcnRUeXBlKCAnaXZlYzInICk7XG5leHBvcnQgY29uc3QgdXZlYzIgPSBuZXcgQ29udmVydFR5cGUoICd1dmVjMicgKTtcbmV4cG9ydCBjb25zdCBidmVjMiA9IG5ldyBDb252ZXJ0VHlwZSggJ2J2ZWMyJyApO1xuXG5leHBvcnQgY29uc3QgdmVjMyA9IG5ldyBDb252ZXJ0VHlwZSggJ3ZlYzMnICk7XG5leHBvcnQgY29uc3QgaXZlYzMgPSBuZXcgQ29udmVydFR5cGUoICdpdmVjMycgKTtcbmV4cG9ydCBjb25zdCB1dmVjMyA9IG5ldyBDb252ZXJ0VHlwZSggJ3V2ZWMzJyApO1xuZXhwb3J0IGNvbnN0IGJ2ZWMzID0gbmV3IENvbnZlcnRUeXBlKCAnYnZlYzMnICk7XG5cbmV4cG9ydCBjb25zdCB2ZWM0ID0gbmV3IENvbnZlcnRUeXBlKCAndmVjNCcgKTtcbmV4cG9ydCBjb25zdCBpdmVjNCA9IG5ldyBDb252ZXJ0VHlwZSggJ2l2ZWM0JyApO1xuZXhwb3J0IGNvbnN0IHV2ZWM0ID0gbmV3IENvbnZlcnRUeXBlKCAndXZlYzQnICk7XG5leHBvcnQgY29uc3QgYnZlYzQgPSBuZXcgQ29udmVydFR5cGUoICdidmVjNCcgKTtcblxuZXhwb3J0IGNvbnN0IG1hdDIgPSBuZXcgQ29udmVydFR5cGUoICdtYXQyJyApO1xuZXhwb3J0IGNvbnN0IG1hdDMgPSBuZXcgQ29udmVydFR5cGUoICdtYXQzJyApO1xuZXhwb3J0IGNvbnN0IG1hdDQgPSBuZXcgQ29udmVydFR5cGUoICdtYXQ0JyApO1xuXG5leHBvcnQgY29uc3Qgc3RyaW5nID0gKCB2YWx1ZSA9ICcnICkgPT4gbm9kZU9iamVjdCggbmV3IENvbnN0Tm9kZSggdmFsdWUsICdzdHJpbmcnICkgKTtcbmV4cG9ydCBjb25zdCBhcnJheUJ1ZmZlciA9ICggdmFsdWUgKSA9PiBub2RlT2JqZWN0KCBuZXcgQ29uc3ROb2RlKCB2YWx1ZSwgJ0FycmF5QnVmZmVyJyApICk7XG5cbmFkZE1ldGhvZENoYWluaW5nKCAndG9Db2xvcicsIGNvbG9yICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RvRmxvYXQnLCBmbG9hdCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b0ludCcsIGludCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b1VpbnQnLCB1aW50ICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RvQm9vbCcsIGJvb2wgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAndG9WZWMyJywgdmVjMiApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b0lWZWMyJywgaXZlYzIgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAndG9VVmVjMicsIHV2ZWMyICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RvQlZlYzInLCBidmVjMiApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b1ZlYzMnLCB2ZWMzICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RvSVZlYzMnLCBpdmVjMyApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b1VWZWMzJywgdXZlYzMgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAndG9CVmVjMycsIGJ2ZWMzICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RvVmVjNCcsIHZlYzQgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAndG9JVmVjNCcsIGl2ZWM0ICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RvVVZlYzQnLCB1dmVjNCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b0JWZWM0JywgYnZlYzQgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAndG9NYXQyJywgbWF0MiApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b01hdDMnLCBtYXQzICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RvTWF0NCcsIG1hdDQgKTtcblxuLy8gYmFzaWMgbm9kZXNcblxuZXhwb3J0IGNvbnN0IGVsZW1lbnQgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggQXJyYXlFbGVtZW50Tm9kZSApO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnQgPSAoIG5vZGUsIHR5cGVzICkgPT4gbm9kZU9iamVjdCggbmV3IENvbnZlcnROb2RlKCBub2RlT2JqZWN0KCBub2RlICksIHR5cGVzICkgKTtcbmV4cG9ydCBjb25zdCBzcGxpdCA9ICggbm9kZSwgY2hhbm5lbHMgKSA9PiBub2RlT2JqZWN0KCBuZXcgU3BsaXROb2RlKCBub2RlT2JqZWN0KCBub2RlICksIGNoYW5uZWxzICkgKTtcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICdlbGVtZW50JywgZWxlbWVudCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdjb252ZXJ0JywgY29udmVydCApO1xuIiwiaW1wb3J0IFRlbXBOb2RlIGZyb20gJy4vVGVtcE5vZGUuanMnO1xuaW1wb3J0IHsgYWRkTWV0aG9kQ2hhaW5pbmcsIG5vZGVPYmplY3QgfSBmcm9tICcuLi90c2wvVFNMQ29yZS5qcyc7XG5cbi8qKlxuICogQXJyYXlOb2RlIHJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIG5vZGVzLCB0eXBpY2FsbHkgY3JlYXRlZCB1c2luZyB0aGUge0BsaW5rIGFycmF5fSBmdW5jdGlvbi5cbiAqIGBgYGpzXG4gKiBjb25zdCBjb2xvcnMgPSBhcnJheSggW1xuICogXHR2ZWMzKCAxLCAwLCAwICksXG4gKiBcdHZlYzMoIDAsIDEsIDAgKSxcbiAqIFx0dmVjMyggMCwgMCwgMSApXG4gKiBdICk7XG4gKlxuICogY29uc3QgcmVkQ29sb3IgPSB0aW50Q29sb3JzLmVsZW1lbnQoIDAgKTtcbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgQXJyYXlOb2RlIGV4dGVuZHMgVGVtcE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnQXJyYXlOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXJyYXkgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHs/c3RyaW5nfSBub2RlVHlwZSAtIFRoZSBkYXRhIHR5cGUgb2YgdGhlIGVsZW1lbnRzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBTaXplIG9mIHRoZSBhcnJheS5cblx0ICogQHBhcmFtIHs/QXJyYXk8Tm9kZT59IFt2YWx1ZXM9bnVsbF0gLSBBcnJheSBkZWZhdWx0IHZhbHVlcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlVHlwZSwgY291bnQsIHZhbHVlcyA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggbm9kZVR5cGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEFycmF5IHNpemUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcblxuXHRcdC8qKlxuXHRcdCAqIEFycmF5IGRlZmF1bHQgdmFsdWVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9BcnJheTxOb2RlPn1cblx0XHQgKi9cblx0XHR0aGlzLnZhbHVlcyA9IHZhbHVlcztcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNBcnJheU5vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbm9kZSdzIHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHR5cGUgb2YgdGhlIG5vZGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ub2RlVHlwZSA9IHRoaXMudmFsdWVzWyAwIF0uZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm5vZGVUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbm9kZSdzIHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHR5cGUgb2YgdGhlIG5vZGUuXG5cdCAqL1xuXHRnZXRFbGVtZW50VHlwZSggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBidWlsZHMgdGhlIG91dHB1dCBub2RlIGFuZCByZXR1cm5zIHRoZSByZXN1bHRpbmcgYXJyYXkgYXMgYSBzaGFkZXIgc3RyaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBnZW5lcmF0ZWQgc2hhZGVyIHN0cmluZy5cblx0ICovXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgdHlwZSA9IHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdHJldHVybiBidWlsZGVyLmdlbmVyYXRlQXJyYXkoIHR5cGUsIHRoaXMuY291bnQsIHRoaXMudmFsdWVzICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFycmF5Tm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIGFycmF5IG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxOb2RlPn0gbm9kZVR5cGVPclZhbHVlcyAtIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZWxlbWVudCB0eXBlIChlLmcuLCAndmVjMycpXG4gKiBvciBhbiBhcnJheSBjb250YWluaW5nIHRoZSBkZWZhdWx0IHZhbHVlcyAoZS5nLiwgWyB2ZWMzKCkgXSkuXG4gKiBAcGFyYW0gez9udW1iZXJ9IFtjb3VudF0gLSBTaXplIG9mIHRoZSBhcnJheS5cbiAqIEByZXR1cm5zIHtBcnJheU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBhcnJheSA9ICggLi4ucGFyYW1zICkgPT4ge1xuXG5cdGxldCBub2RlO1xuXG5cdGlmICggcGFyYW1zLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdGNvbnN0IHZhbHVlcyA9IHBhcmFtc1sgMCBdO1xuXG5cdFx0bm9kZSA9IG5ldyBBcnJheU5vZGUoIG51bGwsIHZhbHVlcy5sZW5ndGgsIHZhbHVlcyApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRjb25zdCBub2RlVHlwZSA9IHBhcmFtc1sgMCBdO1xuXHRcdGNvbnN0IGNvdW50ID0gcGFyYW1zWyAxIF07XG5cblx0XHRub2RlID0gbmV3IEFycmF5Tm9kZSggbm9kZVR5cGUsIGNvdW50ICk7XG5cblx0fVxuXG5cdHJldHVybiBub2RlT2JqZWN0KCBub2RlICk7XG5cbn07XG5cbmFkZE1ldGhvZENoYWluaW5nKCAndG9BcnJheScsICggbm9kZSwgY291bnQgKSA9PiBhcnJheSggQXJyYXkoIGNvdW50ICkuZmlsbCggbm9kZSApICkgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4vTm9kZS5qcyc7XG5cbi8qKlxuICogVGhpcyBub2RlIGNhbiBiZSB1c2VkIHRvIGdyb3VwIHNpbmdsZSBpbnN0YW5jZXMgb2Yge0BsaW5rIFVuaWZvcm1Ob2RlfVxuICogYW5kIG1hbmFnZSB0aGVtIGFzIGEgdW5pZm9ybSBidWZmZXIuXG4gKlxuICogSW4gbW9zdCBjYXNlcywgdGhlIHByZWRlZmluZWQgbm9kZXMgYG9iamVjdEdyb3VwYCwgYHJlbmRlckdyb3VwYCBhbmQgYGZyYW1lR3JvdXBgXG4gKiB3aWxsIGJlIHVzZWQgd2hlbiBkZWZpbmluZyB0aGUge0BsaW5rIFVuaWZvcm1Ob2RlI2dyb3VwTm9kZX0gcHJvcGVydHkuXG4gKlxuICogLSBgb2JqZWN0R3JvdXBgOiBVbmlmb3JtIGJ1ZmZlciBwZXIgb2JqZWN0LlxuICogLSBgcmVuZGVyR3JvdXBgOiBTaGFyZWQgdW5pZm9ybSBidWZmZXIsIHVwZGF0ZWQgb25jZSBwZXIgcmVuZGVyIGNhbGwuXG4gKiAtIGBmcmFtZUdyb3VwYDogU2hhcmVkIHVuaWZvcm0gYnVmZmVyLCB1cGRhdGVkIG9uY2UgcGVyIGZyYW1lLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFVuaWZvcm1Hcm91cE5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1VuaWZvcm1Hcm91cE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB1bmlmb3JtIGdyb3VwIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHVuaWZvcm0gZ3JvdXAgbm9kZS5cblx0ICogQHBhcmFtIHtib29sZWFufSBbc2hhcmVkPWZhbHNlXSAtIFdoZXRoZXIgdGhpcyB1bmlmb3JtIGdyb3VwIG5vZGUgaXMgc2hhcmVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvcmRlcj0xXSAtIEluZmx1ZW5jZXMgdGhlIGludGVybmFsIHNvcnRpbmcuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmFtZSwgc2hhcmVkID0gZmFsc2UsIG9yZGVyID0gMSApIHtcblxuXHRcdHN1cGVyKCAnc3RyaW5nJyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIHVuaWZvcm0gZ3JvdXAgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhpcyB1bmlmb3JtIGdyb3VwIG5vZGUgaXMgc2hhcmVkIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5zaGFyZWQgPSBzaGFyZWQ7XG5cblx0XHQvKipcblx0XHQgKiBJbmZsdWVuY2VzIHRoZSBpbnRlcm5hbCBzb3J0aW5nLlxuXHRcdCAqIFRPRE86IEFkZCBkZXRhaWxzIHdoZW4gdGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgY2hhbmdlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMub3JkZXIgPSBvcmRlcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNVbmlmb3JtR3JvdXAgPSB0cnVlO1xuXG5cdH1cblxuXHRzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5zZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblx0XHRkYXRhLnZlcnNpb24gPSB0aGlzLnZlcnNpb247XG5cdFx0ZGF0YS5zaGFyZWQgPSB0aGlzLnNoYXJlZDtcblxuXHR9XG5cblx0ZGVzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5kZXNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0dGhpcy5uYW1lID0gZGF0YS5uYW1lO1xuXHRcdHRoaXMudmVyc2lvbiA9IGRhdGEudmVyc2lvbjtcblx0XHR0aGlzLnNoYXJlZCA9IGRhdGEuc2hhcmVkO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBVbmlmb3JtR3JvdXBOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSB1bmlmb3JtIGdyb3VwIG5vZGUgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHVuaWZvcm0gZ3JvdXAgbm9kZS5cbiAqIEByZXR1cm5zIHtVbmlmb3JtR3JvdXBOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdW5pZm9ybUdyb3VwID0gKCBuYW1lICkgPT4gbmV3IFVuaWZvcm1Hcm91cE5vZGUoIG5hbWUgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc2hhcmVkIHVuaWZvcm0gZ3JvdXAgbm9kZSB3aXRoIHRoZSBnaXZlbiBuYW1lIGFuZCBvcmRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHVuaWZvcm0gZ3JvdXAgbm9kZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3JkZXI9MF0gLSBJbmZsdWVuY2VzIHRoZSBpbnRlcm5hbCBzb3J0aW5nLlxuICogQHJldHVybnMge1VuaWZvcm1Hcm91cE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBzaGFyZWRVbmlmb3JtR3JvdXAgPSAoIG5hbWUsIG9yZGVyID0gMCApID0+IG5ldyBVbmlmb3JtR3JvdXBOb2RlKCBuYW1lLCB0cnVlLCBvcmRlciApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIGEgc2hhcmVkIHVuaWZvcm0gZ3JvdXAgbm9kZSB3aGljaCBpcyB1cGRhdGVkIG9uY2UgcGVyIGZyYW1lLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtVbmlmb3JtR3JvdXBOb2RlfVxuICovXG5leHBvcnQgY29uc3QgZnJhbWVHcm91cCA9IC8qQF9fUFVSRV9fKi8gc2hhcmVkVW5pZm9ybUdyb3VwKCAnZnJhbWUnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBzaGFyZWQgdW5pZm9ybSBncm91cCBub2RlIHdoaWNoIGlzIHVwZGF0ZWQgb25jZSBwZXIgcmVuZGVyLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtVbmlmb3JtR3JvdXBOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcmVuZGVyR3JvdXAgPSAvKkBfX1BVUkVfXyovIHNoYXJlZFVuaWZvcm1Hcm91cCggJ3JlbmRlcicgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhIHVuaWZvcm0gZ3JvdXAgbm9kZSB3aGljaCBpcyB1cGRhdGVkIG9uY2UgcGVyIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7VW5pZm9ybUdyb3VwTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IG9iamVjdEdyb3VwID0gLypAX19QVVJFX18qLyB1bmlmb3JtR3JvdXAoICdvYmplY3QnICk7XG4iLCJpbXBvcnQgSW5wdXROb2RlIGZyb20gJy4vSW5wdXROb2RlLmpzJztcbmltcG9ydCB7IG9iamVjdEdyb3VwIH0gZnJvbSAnLi9Vbmlmb3JtR3JvdXBOb2RlLmpzJztcbmltcG9ydCB7IG5vZGVPYmplY3QsIGdldENvbnN0Tm9kZVR5cGUgfSBmcm9tICcuLi90c2wvVFNMQ29yZS5qcyc7XG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIHVuaWZvcm0uXG4gKlxuICogQGF1Z21lbnRzIElucHV0Tm9kZVxuICovXG5jbGFzcyBVbmlmb3JtTm9kZSBleHRlbmRzIElucHV0Tm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdVbmlmb3JtTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHVuaWZvcm0gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoaXMgbm9kZS4gVXN1YWxseSBhIEpTIHByaW1pdGl2ZSBvciB0aHJlZS5qcyBvYmplY3QgKHZlY3RvciwgbWF0cml4LCBjb2xvciwgdGV4dHVyZSkuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gbm9kZVR5cGUgLSBUaGUgbm9kZSB0eXBlLiBJZiBubyBleHBsaWNpdCB0eXBlIGlzIGRlZmluZWQsIHRoZSBub2RlIHRyaWVzIHRvIGRlcml2ZSB0aGUgdHlwZSBmcm9tIGl0cyB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSwgbm9kZVR5cGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIHZhbHVlLCBub2RlVHlwZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1VuaWZvcm1Ob2RlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9yIGxhYmVsIG9mIHRoZSB1bmlmb3JtLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnJ1xuXHRcdCAqL1xuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVuaWZvcm0gZ3JvdXAgb2YgdGhpcyB1bmlmb3JtLiBCeSBkZWZhdWx0LCB1bmlmb3JtcyBhcmVcblx0XHQgKiBtYW5hZ2VkIHBlciBvYmplY3QgYnV0IHRoZXkgbWlnaHQgYmVsb25nIHRvIGEgc2hhcmVkIGdyb3VwXG5cdFx0ICogd2hpY2ggaXMgdXBkYXRlZCBwZXIgZnJhbWUgb3IgcmVuZGVyIGNhbGwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybUdyb3VwTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLmdyb3VwTm9kZSA9IG9iamVjdEdyb3VwO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUge0BsaW5rIFVuaWZvcm1Ob2RlI25hbWV9IHByb3BlcnR5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB1bmlmb3JtLlxuXHQgKiBAcmV0dXJuIHtVbmlmb3JtTm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0bGFiZWwoIG5hbWUgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB7QGxpbmsgVW5pZm9ybU5vZGUjZ3JvdXBOb2RlfSBwcm9wZXJ0eS5cblx0ICpcblx0ICogQHBhcmFtIHtVbmlmb3JtR3JvdXBOb2RlfSBncm91cCAtIFRoZSB1bmlmb3JtIGdyb3VwLlxuXHQgKiBAcmV0dXJuIHtVbmlmb3JtTm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0c2V0R3JvdXAoIGdyb3VwICkge1xuXG5cdFx0dGhpcy5ncm91cE5vZGUgPSBncm91cDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUge0BsaW5rIFVuaWZvcm1Ob2RlI2dyb3VwTm9kZX0uXG5cdCAqXG5cdCAqIEByZXR1cm4ge1VuaWZvcm1Hcm91cE5vZGV9IFRoZSB1bmlmb3JtIGdyb3VwLlxuXHQgKi9cblx0Z2V0R3JvdXAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ncm91cE5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBCeSBkZWZhdWx0LCB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSByZXN1bHQgb2Yge0BsaW5rIE5vZGUjZ2V0SGFzaH0gYnV0IGRlcml2ZWRcblx0ICogY2xhc3NlcyBtaWdodCBvdmVyd3JpdGUgdGhpcyBtZXRob2Qgd2l0aCBhIGRpZmZlcmVudCBpbXBsZW1lbnRhdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgdW5pZm9ybSBoYXNoLlxuXHQgKi9cblx0Z2V0VW5pZm9ybUhhc2goIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRIYXNoKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdG9uVXBkYXRlKCBjYWxsYmFjaywgdXBkYXRlVHlwZSApIHtcblxuXHRcdGNvbnN0IHNlbGYgPSB0aGlzLmdldFNlbGYoKTtcblxuXHRcdGNhbGxiYWNrID0gY2FsbGJhY2suYmluZCggc2VsZiApO1xuXG5cdFx0cmV0dXJuIHN1cGVyLm9uVXBkYXRlKCAoIGZyYW1lICkgPT4ge1xuXG5cdFx0XHRjb25zdCB2YWx1ZSA9IGNhbGxiYWNrKCBmcmFtZSwgc2VsZiApO1xuXG5cdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXG5cdFx0XHR9XG5cblx0IFx0fSwgdXBkYXRlVHlwZSApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3QgdHlwZSA9IHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IGhhc2ggPSB0aGlzLmdldFVuaWZvcm1IYXNoKCBidWlsZGVyICk7XG5cblx0XHRsZXQgc2hhcmVkTm9kZSA9IGJ1aWxkZXIuZ2V0Tm9kZUZyb21IYXNoKCBoYXNoICk7XG5cblx0XHRpZiAoIHNoYXJlZE5vZGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YnVpbGRlci5zZXRIYXNoTm9kZSggdGhpcywgaGFzaCApO1xuXG5cdFx0XHRzaGFyZWROb2RlID0gdGhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IHNoYXJlZE5vZGVUeXBlID0gc2hhcmVkTm9kZS5nZXRJbnB1dFR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IG5vZGVVbmlmb3JtID0gYnVpbGRlci5nZXRVbmlmb3JtRnJvbU5vZGUoIHNoYXJlZE5vZGUsIHNoYXJlZE5vZGVUeXBlLCBidWlsZGVyLnNoYWRlclN0YWdlLCB0aGlzLm5hbWUgfHwgYnVpbGRlci5jb250ZXh0LmxhYmVsICk7XG5cdFx0Y29uc3QgcHJvcGVydHlOYW1lID0gYnVpbGRlci5nZXRQcm9wZXJ0eU5hbWUoIG5vZGVVbmlmb3JtICk7XG5cblx0XHRpZiAoIGJ1aWxkZXIuY29udGV4dC5sYWJlbCAhPT0gdW5kZWZpbmVkICkgZGVsZXRlIGJ1aWxkZXIuY29udGV4dC5sYWJlbDtcblxuXHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggcHJvcGVydHlOYW1lLCB0eXBlLCBvdXRwdXQgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5pZm9ybU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHVuaWZvcm0gbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7YW55fSBhcmcxIC0gVGhlIHZhbHVlIG9mIHRoaXMgbm9kZS4gVXN1YWxseSBhIEpTIHByaW1pdGl2ZSBvciB0aHJlZS5qcyBvYmplY3QgKHZlY3RvciwgbWF0cml4LCBjb2xvciwgdGV4dHVyZSkuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FyZzJdIC0gVGhlIG5vZGUgdHlwZS4gSWYgbm8gZXhwbGljaXQgdHlwZSBpcyBkZWZpbmVkLCB0aGUgbm9kZSB0cmllcyB0byBkZXJpdmUgdGhlIHR5cGUgZnJvbSBpdHMgdmFsdWUuXG4gKiBAcmV0dXJucyB7VW5pZm9ybU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCB1bmlmb3JtID0gKCBhcmcxLCBhcmcyICkgPT4ge1xuXG5cdGNvbnN0IG5vZGVUeXBlID0gZ2V0Q29uc3ROb2RlVHlwZSggYXJnMiB8fCBhcmcxICk7XG5cblx0Ly8gQFRPRE86IGdldCBDb25zdE5vZGUgZnJvbSAudHJhdmVyc2UoKSBpbiB0aGUgZnV0dXJlXG5cdGNvbnN0IHZhbHVlID0gKCBhcmcxICYmIGFyZzEuaXNOb2RlID09PSB0cnVlICkgPyAoIGFyZzEubm9kZSAmJiBhcmcxLm5vZGUudmFsdWUgKSB8fCBhcmcxLnZhbHVlIDogYXJnMTtcblxuXHRyZXR1cm4gbm9kZU9iamVjdCggbmV3IFVuaWZvcm1Ob2RlKCB2YWx1ZSwgbm9kZVR5cGUgKSApO1xuXG59O1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IG5vZGVJbW11dGFibGUsIG5vZGVPYmplY3QgfSBmcm9tICcuLi90c2wvVFNMQ29yZS5qcyc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgc2hhZGVyIHByb3BlcnR5LiBJdCBjYW4gYmUgdXNlZFxuICogdG8gZXhwbGljaXRseSBkZWZpbmUgYSBwcm9wZXJ0eSBhbmQgYXNzaWduIGEgdmFsdWUgdG8gaXQuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHRocmVzaG9sZCA9IHByb3BlcnR5KCAnZmxvYXQnLCAndGhyZXNob2xkJyApLmFzc2lnbiggVEhSRVNIT0xEICk7XG4gKmBgYFxuICogYFByb3BlcnR5Tm9kZWAgaXMgdXNlZCBieSB0aGUgZW5naW5lIHRvIHByZWRlZmluZWQgY29tbW9uIG1hdGVyaWFsIHByb3BlcnRpZXNcbiAqIGZvciBUU0wgY29kZS5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBQcm9wZXJ0eU5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1Byb3BlcnR5Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHByb3BlcnR5IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBub2RlVHlwZSAtIFRoZSB0eXBlIG9mIHRoZSBub2RlLlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IFtuYW1lPW51bGxdIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IGluIHRoZSBzaGFkZXIuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Zhcnlpbmc9ZmFsc2VdIC0gV2hldGhlciB0aGlzIHByb3BlcnR5IGlzIGEgdmFyeWluZyBvciBub3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZVR5cGUsIG5hbWUgPSBudWxsLCB2YXJ5aW5nID0gZmFsc2UgKSB7XG5cblx0XHRzdXBlciggbm9kZVR5cGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSBpbiB0aGUgc2hhZGVyLiBJZiBubyBuYW1lIGlzIGRlZmluZWQsXG5cdFx0ICogdGhlIG5vZGUgc3lzdGVtIGF1dG8tZ2VuZXJhdGVzIG9uZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGlzIHByb3BlcnR5IGlzIGEgdmFyeWluZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMudmFyeWluZyA9IHZhcnlpbmc7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUHJvcGVydHlOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0Z2V0SGFzaCggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLm5hbWUgfHwgc3VwZXIuZ2V0SGFzaCggYnVpbGRlciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzbyBpdCBhbHdheXMgcmV0dXJucyBgdHJ1ZWAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBub2RlIGlzIGdsb2JhbCBvciBub3QuXG5cdCAqL1xuXHRpc0dsb2JhbCggLypidWlsZGVyKi8gKSB7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRsZXQgbm9kZVZhcjtcblxuXHRcdGlmICggdGhpcy52YXJ5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRub2RlVmFyID0gYnVpbGRlci5nZXRWYXJ5aW5nRnJvbU5vZGUoIHRoaXMsIHRoaXMubmFtZSApO1xuXHRcdFx0bm9kZVZhci5uZWVkc0ludGVycG9sYXRpb24gPSB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bm9kZVZhciA9IGJ1aWxkZXIuZ2V0VmFyRnJvbU5vZGUoIHRoaXMsIHRoaXMubmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJ1aWxkZXIuZ2V0UHJvcGVydHlOYW1lKCBub2RlVmFyICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3BlcnR5Tm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgcHJvcGVydHkgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgdGhlIG5vZGUuXG4gKiBAcGFyYW0gez9zdHJpbmd9IFtuYW1lPW51bGxdIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IGluIHRoZSBzaGFkZXIuXG4gKiBAcmV0dXJucyB7UHJvcGVydHlOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcHJvcGVydHkgPSAoIHR5cGUsIG5hbWUgKSA9PiBub2RlT2JqZWN0KCBuZXcgUHJvcGVydHlOb2RlKCB0eXBlLCBuYW1lICkgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgdmFyeWluZyBwcm9wZXJ0eSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiB0aGUgbm9kZS5cbiAqIEBwYXJhbSB7P3N0cmluZ30gW25hbWU9bnVsbF0gLSBUaGUgbmFtZSBvZiB0aGUgdmFyeWluZyBpbiB0aGUgc2hhZGVyLlxuICogQHJldHVybnMge1Byb3BlcnR5Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHZhcnlpbmdQcm9wZXJ0eSA9ICggdHlwZSwgbmFtZSApID0+IG5vZGVPYmplY3QoIG5ldyBQcm9wZXJ0eU5vZGUoIHR5cGUsIG5hbWUsIHRydWUgKSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYERpZmZ1c2VDb2xvcmAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTx2ZWM0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGRpZmZ1c2VDb2xvciA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAndmVjNCcsICdEaWZmdXNlQ29sb3InICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgRW1pc3NpdmVDb2xvcmAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGVtaXNzaXZlID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBQcm9wZXJ0eU5vZGUsICd2ZWMzJywgJ0VtaXNzaXZlQ29sb3InICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgUm91Z2huZXNzYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UHJvcGVydHlOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJvdWdobmVzcyA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAnZmxvYXQnLCAnUm91Z2huZXNzJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYE1ldGFsbmVzc2AuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtZXRhbG5lc3MgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ2Zsb2F0JywgJ01ldGFsbmVzcycgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgc2hhZGVyIHZhcmlhYmxlIGBDbGVhcmNvYXRgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtQcm9wZXJ0eU5vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgY2xlYXJjb2F0ID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBQcm9wZXJ0eU5vZGUsICdmbG9hdCcsICdDbGVhcmNvYXQnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgQ2xlYXJjb2F0Um91Z2huZXNzYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UHJvcGVydHlOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNsZWFyY29hdFJvdWdobmVzcyA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAnZmxvYXQnLCAnQ2xlYXJjb2F0Um91Z2huZXNzJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYFNoZWVuYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UHJvcGVydHlOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3Qgc2hlZW4gPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ3ZlYzMnLCAnU2hlZW4nICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgU2hlZW5Sb3VnaG5lc3NgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtQcm9wZXJ0eU5vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3Qgc2hlZW5Sb3VnaG5lc3MgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ2Zsb2F0JywgJ1NoZWVuUm91Z2huZXNzJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYElyaWRlc2NlbmNlYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UHJvcGVydHlOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlyaWRlc2NlbmNlID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBQcm9wZXJ0eU5vZGUsICdmbG9hdCcsICdJcmlkZXNjZW5jZScgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgc2hhZGVyIHZhcmlhYmxlIGBJcmlkZXNjZW5jZUlPUmAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBpcmlkZXNjZW5jZUlPUiA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAnZmxvYXQnLCAnSXJpZGVzY2VuY2VJT1InICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgSXJpZGVzY2VuY2VUaGlja25lc3NgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtQcm9wZXJ0eU5vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgaXJpZGVzY2VuY2VUaGlja25lc3MgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ2Zsb2F0JywgJ0lyaWRlc2NlbmNlVGhpY2tuZXNzJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYEFscGhhVGAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBhbHBoYVQgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ2Zsb2F0JywgJ0FscGhhVCcgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgc2hhZGVyIHZhcmlhYmxlIGBBbmlzb3Ryb3B5YC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UHJvcGVydHlOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGFuaXNvdHJvcHkgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ2Zsb2F0JywgJ0FuaXNvdHJvcHknICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgQW5pc290cm9weVRgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtQcm9wZXJ0eU5vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBhbmlzb3Ryb3B5VCA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAndmVjMycsICdBbmlzb3Ryb3B5VCcgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgc2hhZGVyIHZhcmlhYmxlIGBBbmlzb3Ryb3B5QmAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGFuaXNvdHJvcHlCID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBQcm9wZXJ0eU5vZGUsICd2ZWMzJywgJ0FuaXNvdHJvcHlCJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYFNwZWN1bGFyQ29sb3JgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtQcm9wZXJ0eU5vZGU8Y29sb3I+fVxuICovXG5leHBvcnQgY29uc3Qgc3BlY3VsYXJDb2xvciA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAnY29sb3InLCAnU3BlY3VsYXJDb2xvcicgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgc2hhZGVyIHZhcmlhYmxlIGBTcGVjdWxhckY5MGAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBzcGVjdWxhckY5MCA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAnZmxvYXQnLCAnU3BlY3VsYXJGOTAnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgU2hpbmluZXNzYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UHJvcGVydHlOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHNoaW5pbmVzcyA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAnZmxvYXQnLCAnU2hpbmluZXNzJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYE91dHB1dGAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTx2ZWM0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG91dHB1dCA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAndmVjNCcsICdPdXRwdXQnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgZGFzaFNpemVgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtQcm9wZXJ0eU5vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgZGFzaFNpemUgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ2Zsb2F0JywgJ2Rhc2hTaXplJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYGdhcFNpemVgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtQcm9wZXJ0eU5vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgZ2FwU2l6ZSA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAnZmxvYXQnLCAnZ2FwU2l6ZScgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgc2hhZGVyIHZhcmlhYmxlIGBwb2ludFdpZHRoYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UHJvcGVydHlOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHBvaW50V2lkdGggPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ2Zsb2F0JywgJ3BvaW50V2lkdGgnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgSU9SYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UHJvcGVydHlOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlvciA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAnZmxvYXQnLCAnSU9SJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYFRyYW5zbWlzc2lvbmAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc21pc3Npb24gPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ2Zsb2F0JywgJ1RyYW5zbWlzc2lvbicgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgc2hhZGVyIHZhcmlhYmxlIGBUaGlja25lc3NgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtQcm9wZXJ0eU5vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgdGhpY2tuZXNzID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBQcm9wZXJ0eU5vZGUsICdmbG9hdCcsICdUaGlja25lc3MnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoYWRlciB2YXJpYWJsZSBgQXR0ZW51YXRpb25EaXN0YW5jZWAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1Byb3BlcnR5Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBhdHRlbnVhdGlvbkRpc3RhbmNlID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBQcm9wZXJ0eU5vZGUsICdmbG9hdCcsICdBdHRlbnVhdGlvbkRpc3RhbmNlJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGFkZXIgdmFyaWFibGUgYEF0dGVudWF0aW9uQ29sb3JgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtQcm9wZXJ0eU5vZGU8Y29sb3I+fVxuICovXG5leHBvcnQgY29uc3QgYXR0ZW51YXRpb25Db2xvciA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggUHJvcGVydHlOb2RlLCAnY29sb3InLCAnQXR0ZW51YXRpb25Db2xvcicgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgc2hhZGVyIHZhcmlhYmxlIGBEaXNwZXJzaW9uYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UHJvcGVydHlOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGRpc3BlcnNpb24gPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFByb3BlcnR5Tm9kZSwgJ2Zsb2F0JywgJ0Rpc3BlcnNpb24nICk7XG4iLCJpbXBvcnQgVGVtcE5vZGUgZnJvbSAnLi4vY29yZS9UZW1wTm9kZS5qcyc7XG5pbXBvcnQgeyBhZGRNZXRob2RDaGFpbmluZywgbm9kZVByb3h5IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuaW1wb3J0IHsgdmVjdG9yQ29tcG9uZW50cyB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBUaGVzZSBub2RlIHJlcHJlc2VudHMgYW4gYXNzaWduIG9wZXJhdGlvbi4gTWVhbmluZyBhIG5vZGUgaXMgYXNzaWduZWRcbiAqIHRvIGFub3RoZXIgbm9kZS5cbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgQXNzaWduTm9kZSBleHRlbmRzIFRlbXBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0Fzc2lnbk5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBhc3NpZ24gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSB0YXJnZXROb2RlIC0gVGhlIHRhcmdldCBub2RlLlxuXHQgKiBAcGFyYW0ge05vZGV9IHNvdXJjZU5vZGUgLSBUaGUgc291cmNlIHR5cGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggdGFyZ2V0Tm9kZSwgc291cmNlTm9kZSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGFyZ2V0IG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnRhcmdldE5vZGUgPSB0YXJnZXROb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNvdXJjZSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5zb3VyY2VOb2RlID0gc291cmNlTm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhpcyBub2RlIGlzIHVzZWQgbW9yZSB0aGFuIG9uY2UgaW4gY29udGV4dCBvZiBvdGhlciBub2Rlcy4gVGhpcyBtZXRob2Rcblx0ICogaXMgb3ZlcndyaXR0ZW4gc2luY2UgaXQgYWx3YXlzIHJldHVybnMgYGZhbHNlYCAoYXNzaWducyBhcmUgdW5pcXVlKS5cblx0ICpcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gQSBmbGFnIHRoYXQgaW5kaWNhdGVzIGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgZGVwZW5kZW5jeSB0byBvdGhlciBub2Rlcy4gQWx3YXlzIGBmYWxzZWAuXG5cdCAqL1xuXHRoYXNEZXBlbmRlbmNpZXMoKSB7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdGdldE5vZGVUeXBlKCBidWlsZGVyLCBvdXRwdXQgKSB7XG5cblx0XHRyZXR1cm4gb3V0cHV0ICE9PSAndm9pZCcgPyB0aGlzLnRhcmdldE5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSA6ICd2b2lkJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgYSBzcGxpdCBpcyByZXF1aXJlZCB3aGVuIGFzc2lnbmluZyBzb3VyY2UgdG8gdGFyZ2V0LiBUaGlzIGNhbiBoYXBwZW4gd2hlbiB0aGUgY29tcG9uZW50IGxlbmd0aCBvZlxuXHQgKiB0YXJnZXQgYW5kIHNvdXJjZSBkYXRhIHR5cGUgZG9lcyBub3QgbWF0Y2guXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYSBzcGxpdCBpcyByZXF1aXJlZCB3aGVuIGFzc2lnbmluZyBzb3VyY2UgdG8gdGFyZ2V0LlxuXHQgKi9cblx0bmVlZHNTcGxpdEFzc2lnbiggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgdGFyZ2V0Tm9kZSB9ID0gdGhpcztcblxuXHRcdGlmICggYnVpbGRlci5pc0F2YWlsYWJsZSggJ3N3aXp6bGVBc3NpZ24nICkgPT09IGZhbHNlICYmIHRhcmdldE5vZGUuaXNTcGxpdE5vZGUgJiYgdGFyZ2V0Tm9kZS5jb21wb25lbnRzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdGNvbnN0IHRhcmdldExlbmd0aCA9IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggdGFyZ2V0Tm9kZS5ub2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICkgKTtcblx0XHRcdGNvbnN0IGFzc2lnbkRpZmZlcmVudFZlY3RvciA9IHZlY3RvckNvbXBvbmVudHMuam9pbiggJycgKS5zbGljZSggMCwgdGFyZ2V0TGVuZ3RoICkgIT09IHRhcmdldE5vZGUuY29tcG9uZW50cztcblxuXHRcdFx0cmV0dXJuIGFzc2lnbkRpZmZlcmVudFZlY3RvcjtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIsIG91dHB1dCApIHtcblxuXHRcdGNvbnN0IHsgdGFyZ2V0Tm9kZSwgc291cmNlTm9kZSB9ID0gdGhpcztcblxuXHRcdGNvbnN0IG5lZWRzU3BsaXRBc3NpZ24gPSB0aGlzLm5lZWRzU3BsaXRBc3NpZ24oIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IHRhcmdldFR5cGUgPSB0YXJnZXROb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRjb25zdCB0YXJnZXQgPSB0YXJnZXROb2RlLmNvbnRleHQoIHsgYXNzaWduOiB0cnVlIH0gKS5idWlsZCggYnVpbGRlciApO1xuXHRcdGNvbnN0IHNvdXJjZSA9IHNvdXJjZU5vZGUuYnVpbGQoIGJ1aWxkZXIsIHRhcmdldFR5cGUgKTtcblxuXHRcdGNvbnN0IHNvdXJjZVR5cGUgPSBzb3VyY2VOb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRjb25zdCBub2RlRGF0YSA9IGJ1aWxkZXIuZ2V0RGF0YUZyb21Ob2RlKCB0aGlzICk7XG5cblx0XHQvL1xuXG5cdFx0bGV0IHNuaXBwZXQ7XG5cblx0XHRpZiAoIG5vZGVEYXRhLmluaXRpYWxpemVkID09PSB0cnVlICkge1xuXG5cdFx0XHRpZiAoIG91dHB1dCAhPT0gJ3ZvaWQnICkge1xuXG5cdFx0XHRcdHNuaXBwZXQgPSB0YXJnZXQ7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG5lZWRzU3BsaXRBc3NpZ24gKSB7XG5cblx0XHRcdGNvbnN0IHNvdXJjZVZhciA9IGJ1aWxkZXIuZ2V0VmFyRnJvbU5vZGUoIHRoaXMsIG51bGwsIHRhcmdldFR5cGUgKTtcblx0XHRcdGNvbnN0IHNvdXJjZVByb3BlcnR5ID0gYnVpbGRlci5nZXRQcm9wZXJ0eU5hbWUoIHNvdXJjZVZhciApO1xuXG5cdFx0XHRidWlsZGVyLmFkZExpbmVGbG93Q29kZSggYCR7IHNvdXJjZVByb3BlcnR5IH0gPSAkeyBzb3VyY2UgfWAsIHRoaXMgKTtcblxuXHRcdFx0Y29uc3QgdGFyZ2V0Um9vdCA9IHRhcmdldE5vZGUubm9kZS5jb250ZXh0KCB7IGFzc2lnbjogdHJ1ZSB9ICkuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGFyZ2V0Tm9kZS5jb21wb25lbnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjb21wb25lbnQgPSB0YXJnZXROb2RlLmNvbXBvbmVudHNbIGkgXTtcblxuXHRcdFx0XHRidWlsZGVyLmFkZExpbmVGbG93Q29kZSggYCR7IHRhcmdldFJvb3QgfS4keyBjb21wb25lbnQgfSA9ICR7IHNvdXJjZVByb3BlcnR5IH1bICR7IGkgfSBdYCwgdGhpcyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb3V0cHV0ICE9PSAndm9pZCcgKSB7XG5cblx0XHRcdFx0c25pcHBldCA9IHRhcmdldDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c25pcHBldCA9IGAkeyB0YXJnZXQgfSA9ICR7IHNvdXJjZSB9YDtcblxuXHRcdFx0aWYgKCBvdXRwdXQgPT09ICd2b2lkJyB8fCBzb3VyY2VUeXBlID09PSAndm9pZCcgKSB7XG5cblx0XHRcdFx0YnVpbGRlci5hZGRMaW5lRmxvd0NvZGUoIHNuaXBwZXQsIHRoaXMgKTtcblxuXHRcdFx0XHRpZiAoIG91dHB1dCAhPT0gJ3ZvaWQnICkge1xuXG5cdFx0XHRcdFx0c25pcHBldCA9IHRhcmdldDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdG5vZGVEYXRhLmluaXRpYWxpemVkID0gdHJ1ZTtcblxuXHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggc25pcHBldCwgdGFyZ2V0VHlwZSwgb3V0cHV0ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFzc2lnbk5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhbiBhc3NpZ24gbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0Tm9kZSAtIFRoZSB0YXJnZXQgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gc291cmNlTm9kZSAtIFRoZSBzb3VyY2UgdHlwZS5cbiAqIEByZXR1cm5zIHtBc3NpZ25Ob2RlfVxuICovXG5leHBvcnQgY29uc3QgYXNzaWduID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIEFzc2lnbk5vZGUgKTtcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICdhc3NpZ24nLCBhc3NpZ24gKTtcbiIsImltcG9ydCBUZW1wTm9kZSBmcm9tICcuLi9jb3JlL1RlbXBOb2RlLmpzJztcbmltcG9ydCB7IGFkZE1ldGhvZENoYWluaW5nLCBub2RlQXJyYXksIG5vZGVPYmplY3QsIG5vZGVPYmplY3RzIH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIHJlcHJlc2VudHMgdGhlIGNhbGwgb2YgYSB7QGxpbmsgRnVuY3Rpb25Ob2RlfS4gRGV2ZWxvcGVycyBhcmUgdXN1YWxseSBub3QgY29uZnJvbnRlZFxuICogd2l0aCB0aGlzIG1vZHVsZSBzaW5jZSB0aGV5IHVzZSB0aGUgcHJlZGVmaW5lZCBUU0wgc3ludGF4IGB3Z3NsRm5gIGFuZCBgZ2xzbEZuYCB3aGljaCBlbmNhcHN1bGF0ZVxuICogdGhpcyBsb2dpYy5cbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgRnVuY3Rpb25DYWxsTm9kZSBleHRlbmRzIFRlbXBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0Z1bmN0aW9uQ2FsbE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBmdW5jdGlvbiBjYWxsIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P0Z1bmN0aW9uTm9kZX0gZnVuY3Rpb25Ob2RlIC0gVGhlIGZ1bmN0aW9uIG5vZGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgTm9kZT59IFtwYXJhbWV0ZXJzPXt9XSAtIFRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgZnVuY3Rpb24gY2FsbC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBmdW5jdGlvbk5vZGUgPSBudWxsLCBwYXJhbWV0ZXJzID0ge30gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGZ1bmN0aW9uIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0Z1bmN0aW9uTm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5mdW5jdGlvbk5vZGUgPSBmdW5jdGlvbk5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcGFyYW1ldGVycyBvZiB0aGUgZnVuY3Rpb24gY2FsbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBOb2RlPn1cblx0XHQgKiBAZGVmYXVsdCB7fVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBmdW5jdGlvbiBjYWxsIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgTm9kZT59IHBhcmFtZXRlcnMgLSBUaGUgcGFyYW1ldGVycyB0byBzZXQuXG5cdCAqIEByZXR1cm4ge0Z1bmN0aW9uQ2FsbE5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdHNldFBhcmFtZXRlcnMoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBmdW5jdGlvbiBjYWxsIG5vZGUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge09iamVjdDxzdHJpbmcsIE5vZGU+fSBUaGUgcGFyYW1ldGVycyBvZiB0aGlzIG5vZGUuXG5cdCAqL1xuXHRnZXRQYXJhbWV0ZXJzKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFyYW1ldGVycztcblxuXHR9XG5cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5mdW5jdGlvbk5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBwYXJhbXMgPSBbXTtcblxuXHRcdGNvbnN0IGZ1bmN0aW9uTm9kZSA9IHRoaXMuZnVuY3Rpb25Ob2RlO1xuXG5cdFx0Y29uc3QgaW5wdXRzID0gZnVuY3Rpb25Ob2RlLmdldElucHV0cyggYnVpbGRlciApO1xuXHRcdGNvbnN0IHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHRjb25zdCBnZW5lcmF0ZUlucHV0ID0gKCBub2RlLCBpbnB1dE5vZGUgKSA9PiB7XG5cblx0XHRcdGNvbnN0IHR5cGUgPSBpbnB1dE5vZGUudHlwZTtcblx0XHRcdGNvbnN0IHBvaW50ZXIgPSB0eXBlID09PSAncG9pbnRlcic7XG5cblx0XHRcdGxldCBvdXRwdXQ7XG5cblx0XHRcdGlmICggcG9pbnRlciApIG91dHB1dCA9ICcmJyArIG5vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblx0XHRcdGVsc2Ugb3V0cHV0ID0gbm9kZS5idWlsZCggYnVpbGRlciwgdHlwZSApO1xuXG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdFx0fTtcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggcGFyYW1ldGVycyApICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRwYXJhbXMucHVzaCggZ2VuZXJhdGVJbnB1dCggcGFyYW1ldGVyc1sgaSBdLCBpbnB1dHNbIGkgXSApICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IGlucHV0Tm9kZSBvZiBpbnB1dHMgKSB7XG5cblx0XHRcdFx0Y29uc3Qgbm9kZSA9IHBhcmFtZXRlcnNbIGlucHV0Tm9kZS5uYW1lIF07XG5cblx0XHRcdFx0aWYgKCBub2RlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRwYXJhbXMucHVzaCggZ2VuZXJhdGVJbnB1dCggbm9kZSwgaW5wdXROb2RlICkgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBgRnVuY3Rpb25DYWxsTm9kZTogSW5wdXQgJyR7aW5wdXROb2RlLm5hbWV9JyBub3QgZm91bmQgaW4gRnVuY3Rpb25Ob2RlLmAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTm9kZS5idWlsZCggYnVpbGRlciwgJ3Byb3BlcnR5JyApO1xuXG5cdFx0cmV0dXJuIGAke2Z1bmN0aW9uTmFtZX0oICR7cGFyYW1zLmpvaW4oICcsICcgKX0gKWA7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZ1bmN0aW9uQ2FsbE5vZGU7XG5cbmV4cG9ydCBjb25zdCBjYWxsID0gKCBmdW5jLCAuLi5wYXJhbXMgKSA9PiB7XG5cblx0cGFyYW1zID0gcGFyYW1zLmxlbmd0aCA+IDEgfHwgKCBwYXJhbXNbIDAgXSAmJiBwYXJhbXNbIDAgXS5pc05vZGUgPT09IHRydWUgKSA/IG5vZGVBcnJheSggcGFyYW1zICkgOiBub2RlT2JqZWN0cyggcGFyYW1zWyAwIF0gKTtcblxuXHRyZXR1cm4gbm9kZU9iamVjdCggbmV3IEZ1bmN0aW9uQ2FsbE5vZGUoIG5vZGVPYmplY3QoIGZ1bmMgKSwgcGFyYW1zICkgKTtcblxufTtcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICdjYWxsJywgY2FsbCApO1xuIiwiaW1wb3J0IFRlbXBOb2RlIGZyb20gJy4uL2NvcmUvVGVtcE5vZGUuanMnO1xuaW1wb3J0IHsgYWRkTWV0aG9kQ2hhaW5pbmcsIG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcblxuLyoqXG4gKiBUaGlzIG5vZGUgcmVwcmVzZW50cyBiYXNpYyBtYXRoZW1hdGljYWwgYW5kIGxvZ2ljYWwgb3BlcmF0aW9ucyBsaWtlIGFkZGl0aW9uLFxuICogc3VidHJhY3Rpb24gb3IgY29tcGFyaXNvbnMgKGUuZy4gYGVxdWFsKClgKS5cbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgT3BlcmF0b3JOb2RlIGV4dGVuZHMgVGVtcE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnT3BlcmF0b3JOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgb3BlcmF0b3Igbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG9wIC0gVGhlIG9wZXJhdG9yLlxuXHQgKiBAcGFyYW0ge05vZGV9IGFOb2RlIC0gVGhlIGZpcnN0IGlucHV0LlxuXHQgKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cblx0ICogQHBhcmFtIHsuLi5Ob2RlfSBwYXJhbXMgLSBBZGRpdGlvbmFsIGlucHV0IHBhcmFtZXRlcnMuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggb3AsIGFOb2RlLCBiTm9kZSwgLi4ucGFyYW1zICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdGlmICggcGFyYW1zLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGxldCBmaW5hbE9wID0gbmV3IE9wZXJhdG9yTm9kZSggb3AsIGFOb2RlLCBiTm9kZSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoIC0gMTsgaSArKyApIHtcblxuXHRcdFx0XHRmaW5hbE9wID0gbmV3IE9wZXJhdG9yTm9kZSggb3AsIGZpbmFsT3AsIHBhcmFtc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0YU5vZGUgPSBmaW5hbE9wO1xuXHRcdFx0Yk5vZGUgPSBwYXJhbXNbIHBhcmFtcy5sZW5ndGggLSAxIF07XG5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb3BlcmF0b3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMub3AgPSBvcDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBmaXJzdCBpbnB1dC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMuYU5vZGUgPSBhTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzZWNvbmQgaW5wdXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLmJOb2RlID0gYk5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzT3BlcmF0b3JOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgaXMgaW5mZXJyZWQgZnJvbSB0aGUgb3BlcmF0b3Jcblx0ICogYW5kIHRoZSBpbnB1dCBub2RlIHR5cGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gb3V0cHV0IC0gVGhlIGN1cnJlbnQgb3V0cHV0IHN0cmluZy5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIsIG91dHB1dCApIHtcblxuXHRcdGNvbnN0IG9wID0gdGhpcy5vcDtcblxuXHRcdGNvbnN0IGFOb2RlID0gdGhpcy5hTm9kZTtcblx0XHRjb25zdCBiTm9kZSA9IHRoaXMuYk5vZGU7XG5cblx0XHRjb25zdCB0eXBlQSA9IGFOb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cdFx0Y29uc3QgdHlwZUIgPSB0eXBlb2YgYk5vZGUgIT09ICd1bmRlZmluZWQnID8gYk5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSA6IG51bGw7XG5cblx0XHRpZiAoIHR5cGVBID09PSAndm9pZCcgfHwgdHlwZUIgPT09ICd2b2lkJyApIHtcblxuXHRcdFx0cmV0dXJuICd2b2lkJztcblxuXHRcdH0gZWxzZSBpZiAoIG9wID09PSAnJScgKSB7XG5cblx0XHRcdHJldHVybiB0eXBlQTtcblxuXHRcdH0gZWxzZSBpZiAoIG9wID09PSAnficgfHwgb3AgPT09ICcmJyB8fCBvcCA9PT0gJ3wnIHx8IG9wID09PSAnXicgfHwgb3AgPT09ICc+PicgfHwgb3AgPT09ICc8PCcgKSB7XG5cblx0XHRcdHJldHVybiBidWlsZGVyLmdldEludGVnZXJUeXBlKCB0eXBlQSApO1xuXG5cdFx0fSBlbHNlIGlmICggb3AgPT09ICchJyB8fCBvcCA9PT0gJz09JyB8fCBvcCA9PT0gJyYmJyB8fCBvcCA9PT0gJ3x8JyB8fCBvcCA9PT0gJ15eJyApIHtcblxuXHRcdFx0cmV0dXJuICdib29sJztcblxuXHRcdH0gZWxzZSBpZiAoIG9wID09PSAnPCcgfHwgb3AgPT09ICc+JyB8fCBvcCA9PT0gJzw9JyB8fCBvcCA9PT0gJz49JyApIHtcblxuXHRcdFx0Y29uc3QgdHlwZUxlbmd0aCA9IG91dHB1dCA/IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggb3V0cHV0ICkgOiBNYXRoLm1heCggYnVpbGRlci5nZXRUeXBlTGVuZ3RoKCB0eXBlQSApLCBidWlsZGVyLmdldFR5cGVMZW5ndGgoIHR5cGVCICkgKTtcblxuXHRcdFx0cmV0dXJuIHR5cGVMZW5ndGggPiAxID8gYGJ2ZWMkeyB0eXBlTGVuZ3RoIH1gIDogJ2Jvb2wnO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSGFuZGxlIG1hdHJpeCBvcGVyYXRpb25zXG5cdFx0XHRpZiAoIGJ1aWxkZXIuaXNNYXRyaXgoIHR5cGVBICkgKSB7XG5cblx0XHRcdFx0aWYgKCB0eXBlQiA9PT0gJ2Zsb2F0JyApIHtcblxuXHRcdFx0XHRcdHJldHVybiB0eXBlQTsgLy8gbWF0cml4ICogc2NhbGFyID0gbWF0cml4XG5cblx0XHRcdFx0fSBlbHNlIGlmICggYnVpbGRlci5pc1ZlY3RvciggdHlwZUIgKSApIHtcblxuXHRcdFx0XHRcdHJldHVybiBidWlsZGVyLmdldFZlY3RvckZyb21NYXRyaXgoIHR5cGVBICk7IC8vIG1hdHJpeCAqIHZlY3RvclxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGJ1aWxkZXIuaXNNYXRyaXgoIHR5cGVCICkgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gdHlwZUE7IC8vIG1hdHJpeCAqIG1hdHJpeFxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggYnVpbGRlci5pc01hdHJpeCggdHlwZUIgKSApIHtcblxuXHRcdFx0XHRpZiAoIHR5cGVBID09PSAnZmxvYXQnICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHR5cGVCOyAvLyBzY2FsYXIgKiBtYXRyaXggPSBtYXRyaXhcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBidWlsZGVyLmlzVmVjdG9yKCB0eXBlQSApICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIGJ1aWxkZXIuZ2V0VmVjdG9yRnJvbU1hdHJpeCggdHlwZUIgKTsgLy8gdmVjdG9yICogbWF0cml4XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIEhhbmRsZSBub24tbWF0cml4IGNhc2VzXG5cdFx0XHRpZiAoIGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggdHlwZUIgKSA+IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggdHlwZUEgKSApIHtcblxuXHRcdFx0XHQvLyBhbnl0eXBlIHggYW55dHlwZTogdXNlIHRoZSBncmVhdGVyIGxlbmd0aCB2ZWN0b3JcblxuXHRcdFx0XHRyZXR1cm4gdHlwZUI7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHR5cGVBO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3Qgb3AgPSB0aGlzLm9wO1xuXG5cdFx0Y29uc3QgYU5vZGUgPSB0aGlzLmFOb2RlO1xuXHRcdGNvbnN0IGJOb2RlID0gdGhpcy5iTm9kZTtcblxuXHRcdGNvbnN0IHR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyLCBvdXRwdXQgKTtcblxuXHRcdGxldCB0eXBlQSA9IG51bGw7XG5cdFx0bGV0IHR5cGVCID0gbnVsbDtcblxuXHRcdGlmICggdHlwZSAhPT0gJ3ZvaWQnICkge1xuXG5cdFx0XHR0eXBlQSA9IGFOb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cdFx0XHR0eXBlQiA9IHR5cGVvZiBiTm9kZSAhPT0gJ3VuZGVmaW5lZCcgPyBiTm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApIDogbnVsbDtcblxuXHRcdFx0aWYgKCBvcCA9PT0gJzwnIHx8IG9wID09PSAnPicgfHwgb3AgPT09ICc8PScgfHwgb3AgPT09ICc+PScgfHwgb3AgPT09ICc9PScgKSB7XG5cblx0XHRcdFx0aWYgKCBidWlsZGVyLmlzVmVjdG9yKCB0eXBlQSApICkge1xuXG5cdFx0XHRcdFx0dHlwZUIgPSB0eXBlQTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlQSAhPT0gdHlwZUIgKSB7XG5cblx0XHRcdFx0XHR0eXBlQSA9IHR5cGVCID0gJ2Zsb2F0JztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9wID09PSAnPj4nIHx8IG9wID09PSAnPDwnICkge1xuXG5cdFx0XHRcdHR5cGVBID0gdHlwZTtcblx0XHRcdFx0dHlwZUIgPSBidWlsZGVyLmNoYW5nZUNvbXBvbmVudFR5cGUoIHR5cGVCLCAndWludCcgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggYnVpbGRlci5pc01hdHJpeCggdHlwZUEgKSApIHtcblxuXHRcdFx0XHRpZiAoIHR5cGVCID09PSAnZmxvYXQnICkge1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCBtYXRyaXggdHlwZSBmb3IgdHlwZUEsIGJ1dCBlbnN1cmUgdHlwZUIgc3RheXMgZmxvYXRcblx0XHRcdFx0XHR0eXBlQiA9ICdmbG9hdCc7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggYnVpbGRlci5pc1ZlY3RvciggdHlwZUIgKSApIHtcblxuXHRcdFx0XHRcdC8vIG1hdHJpeCB4IHZlY3RvclxuXHRcdFx0XHRcdHR5cGVCID0gYnVpbGRlci5nZXRWZWN0b3JGcm9tTWF0cml4KCB0eXBlQSApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGJ1aWxkZXIuaXNNYXRyaXgoIHR5cGVCICkgKSB7XG5cdFx0XHRcdFx0Ly8gbWF0cml4IHggbWF0cml4IC0ga2VlcCBib3RoIHR5cGVzXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0eXBlQSA9IHR5cGVCID0gdHlwZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGJ1aWxkZXIuaXNNYXRyaXgoIHR5cGVCICkgKSB7XG5cblx0XHRcdFx0aWYgKCB0eXBlQSA9PT0gJ2Zsb2F0JyApIHtcblxuXHRcdFx0XHRcdC8vIEtlZXAgbWF0cml4IHR5cGUgZm9yIHR5cGVCLCBidXQgZW5zdXJlIHR5cGVBIHN0YXlzIGZsb2F0XG5cdFx0XHRcdFx0dHlwZUEgPSAnZmxvYXQnO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGJ1aWxkZXIuaXNWZWN0b3IoIHR5cGVBICkgKSB7XG5cblx0XHRcdFx0XHQvLyB2ZWN0b3IgeCBtYXRyaXhcblx0XHRcdFx0XHR0eXBlQSA9IGJ1aWxkZXIuZ2V0VmVjdG9yRnJvbU1hdHJpeCggdHlwZUIgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dHlwZUEgPSB0eXBlQiA9IHR5cGU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIGFueXR5cGUgeCBhbnl0eXBlXG5cblx0XHRcdFx0dHlwZUEgPSB0eXBlQiA9IHR5cGU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR5cGVBID0gdHlwZUIgPSB0eXBlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYSA9IGFOb2RlLmJ1aWxkKCBidWlsZGVyLCB0eXBlQSApO1xuXHRcdGNvbnN0IGIgPSB0eXBlb2YgYk5vZGUgIT09ICd1bmRlZmluZWQnID8gYk5vZGUuYnVpbGQoIGJ1aWxkZXIsIHR5cGVCICkgOiBudWxsO1xuXG5cdFx0Y29uc3Qgb3V0cHV0TGVuZ3RoID0gYnVpbGRlci5nZXRUeXBlTGVuZ3RoKCBvdXRwdXQgKTtcblx0XHRjb25zdCBmbk9wU25pcHBldCA9IGJ1aWxkZXIuZ2V0RnVuY3Rpb25PcGVyYXRvciggb3AgKTtcblxuXHRcdGlmICggb3V0cHV0ICE9PSAndm9pZCcgKSB7XG5cblx0XHRcdGlmICggb3AgPT09ICc8JyAmJiBvdXRwdXRMZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdGlmICggYnVpbGRlci51c2VDb21wYXJpc29uTWV0aG9kICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBgJHsgYnVpbGRlci5nZXRNZXRob2QoICdsZXNzVGhhbicsIG91dHB1dCApIH0oICR7IGEgfSwgJHsgYiB9IClgLCB0eXBlLCBvdXRwdXQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBgKCAkeyBhIH0gPCAkeyBiIH0gKWAsIHR5cGUsIG91dHB1dCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb3AgPT09ICc8PScgJiYgb3V0cHV0TGVuZ3RoID4gMSApIHtcblxuXHRcdFx0XHRpZiAoIGJ1aWxkZXIudXNlQ29tcGFyaXNvbk1ldGhvZCApIHtcblxuXHRcdFx0XHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggYCR7IGJ1aWxkZXIuZ2V0TWV0aG9kKCAnbGVzc1RoYW5FcXVhbCcsIG91dHB1dCApIH0oICR7IGEgfSwgJHsgYiB9IClgLCB0eXBlLCBvdXRwdXQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBgKCAkeyBhIH0gPD0gJHsgYiB9IClgLCB0eXBlLCBvdXRwdXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9wID09PSAnPicgJiYgb3V0cHV0TGVuZ3RoID4gMSApIHtcblxuXHRcdFx0XHRpZiAoIGJ1aWxkZXIudXNlQ29tcGFyaXNvbk1ldGhvZCApIHtcblxuXHRcdFx0XHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggYCR7IGJ1aWxkZXIuZ2V0TWV0aG9kKCAnZ3JlYXRlclRoYW4nLCBvdXRwdXQgKSB9KCAkeyBhIH0sICR7IGIgfSApYCwgdHlwZSwgb3V0cHV0ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggYCggJHsgYSB9ID4gJHsgYiB9IClgLCB0eXBlLCBvdXRwdXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9wID09PSAnPj0nICYmIG91dHB1dExlbmd0aCA+IDEgKSB7XG5cblx0XHRcdFx0aWYgKCBidWlsZGVyLnVzZUNvbXBhcmlzb25NZXRob2QgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIGAkeyBidWlsZGVyLmdldE1ldGhvZCggJ2dyZWF0ZXJUaGFuRXF1YWwnLCBvdXRwdXQgKSB9KCAkeyBhIH0sICR7IGIgfSApYCwgdHlwZSwgb3V0cHV0ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggYCggJHsgYSB9ID49ICR7IGIgfSApYCwgdHlwZSwgb3V0cHV0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvcCA9PT0gJyEnIHx8IG9wID09PSAnficgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBgKCR7b3B9JHthfSlgLCB0eXBlQSwgb3V0cHV0ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGZuT3BTbmlwcGV0ICkge1xuXG5cdFx0XHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggYCR7IGZuT3BTbmlwcGV0IH0oICR7IGEgfSwgJHsgYiB9IClgLCB0eXBlLCBvdXRwdXQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbWF0cml4IG9wZXJhdGlvbnNcblx0XHRcdFx0aWYgKCBidWlsZGVyLmlzTWF0cml4KCB0eXBlQSApICYmIHR5cGVCID09PSAnZmxvYXQnICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBgKCAkeyBiIH0gJHsgb3AgfSAkeyBhIH0gKWAsIHR5cGUsIG91dHB1dCApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVBID09PSAnZmxvYXQnICYmIGJ1aWxkZXIuaXNNYXRyaXgoIHR5cGVCICkgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIGAkeyBhIH0gJHsgb3AgfSAkeyBiIH1gLCB0eXBlLCBvdXRwdXQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBgKCAkeyBhIH0gJHsgb3AgfSAkeyBiIH0gKWAsIHR5cGUsIG91dHB1dCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdHlwZUEgIT09ICd2b2lkJyApIHtcblxuXHRcdFx0aWYgKCBmbk9wU25pcHBldCApIHtcblxuXHRcdFx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIGAkeyBmbk9wU25pcHBldCB9KCAkeyBhIH0sICR7IGIgfSApYCwgdHlwZSwgb3V0cHV0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBidWlsZGVyLmlzTWF0cml4KCB0eXBlQSApICYmIHR5cGVCID09PSAnZmxvYXQnICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBgJHsgYiB9ICR7IG9wIH0gJHsgYSB9YCwgdHlwZSwgb3V0cHV0ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggYCR7IGEgfSAkeyBvcCB9ICR7IGIgfWAsIHR5cGUsIG91dHB1dCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5zZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdGRhdGEub3AgPSB0aGlzLm9wO1xuXG5cdH1cblxuXHRkZXNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLmRlc2VyaWFsaXplKCBkYXRhICk7XG5cblx0XHR0aGlzLm9wID0gZGF0YS5vcDtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgT3BlcmF0b3JOb2RlO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFkZGl0aW9uIG9mIHR3byBvciBtb3JlIHZhbHVlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBhTm9kZSAtIFRoZSBmaXJzdCBpbnB1dC5cbiAqIEBwYXJhbSB7Tm9kZX0gYk5vZGUgLSBUaGUgc2Vjb25kIGlucHV0LlxuICogQHBhcmFtIHsuLi5Ob2RlfSBwYXJhbXMgLSBBZGRpdGlvbmFsIGlucHV0IHBhcmFtZXRlcnMuXG4gKiBAcmV0dXJucyB7T3BlcmF0b3JOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYWRkID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE9wZXJhdG9yTm9kZSwgJysnICk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3VidHJhY3Rpb24gb2YgdHdvIG9yIG1vcmUgdmFsdWUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IGFOb2RlIC0gVGhlIGZpcnN0IGlucHV0LlxuICogQHBhcmFtIHtOb2RlfSBiTm9kZSAtIFRoZSBzZWNvbmQgaW5wdXQuXG4gKiBAcGFyYW0gey4uLk5vZGV9IHBhcmFtcyAtIEFkZGl0aW9uYWwgaW5wdXQgcGFyYW1ldGVycy5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBzdWIgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT3BlcmF0b3JOb2RlLCAnLScgKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtdWx0aXBsaWNhdGlvbiBvZiB0d28gb3IgbW9yZSB2YWx1ZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEBwYXJhbSB7Li4uTm9kZX0gcGFyYW1zIC0gQWRkaXRpb25hbCBpbnB1dCBwYXJhbWV0ZXJzLlxuICogQHJldHVybnMge09wZXJhdG9yTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IG11bCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBPcGVyYXRvck5vZGUsICcqJyApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGRpdmlzaW9uIG9mIHR3byBvciBtb3JlIHZhbHVlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBhTm9kZSAtIFRoZSBmaXJzdCBpbnB1dC5cbiAqIEBwYXJhbSB7Tm9kZX0gYk5vZGUgLSBUaGUgc2Vjb25kIGlucHV0LlxuICogQHBhcmFtIHsuLi5Ob2RlfSBwYXJhbXMgLSBBZGRpdGlvbmFsIGlucHV0IHBhcmFtZXRlcnMuXG4gKiBAcmV0dXJucyB7T3BlcmF0b3JOb2RlfVxuICovXG5leHBvcnQgY29uc3QgZGl2ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE9wZXJhdG9yTm9kZSwgJy8nICk7XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIHJlbWFpbmRlciBvZiBkaXZpZGluZyB0aGUgZmlyc3Qgbm9kZSBieSB0aGUgc2Vjb25kLCBmb3IgaW50ZWdlciB2YWx1ZXMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IGFOb2RlIC0gVGhlIGZpcnN0IGlucHV0LlxuICogQHBhcmFtIHtOb2RlfSBiTm9kZSAtIFRoZSBzZWNvbmQgaW5wdXQuXG4gKiBAcmV0dXJucyB7T3BlcmF0b3JOb2RlfVxuICovXG5leHBvcnQgY29uc3QgbW9kSW50ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE9wZXJhdG9yTm9kZSwgJyUnICk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHR3byBub2RlcyBhcmUgZXF1YWwuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IGFOb2RlIC0gVGhlIGZpcnN0IGlucHV0LlxuICogQHBhcmFtIHtOb2RlfSBiTm9kZSAtIFRoZSBzZWNvbmQgaW5wdXQuXG4gKiBAcmV0dXJucyB7T3BlcmF0b3JOb2RlfVxuICovXG5leHBvcnQgY29uc3QgZXF1YWwgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT3BlcmF0b3JOb2RlLCAnPT0nICk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHR3byBub2RlcyBhcmUgbm90IGVxdWFsLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBhTm9kZSAtIFRoZSBmaXJzdCBpbnB1dC5cbiAqIEBwYXJhbSB7Tm9kZX0gYk5vZGUgLSBUaGUgc2Vjb25kIGlucHV0LlxuICogQHJldHVybnMge09wZXJhdG9yTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IG5vdEVxdWFsID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE9wZXJhdG9yTm9kZSwgJyE9JyApO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZmlyc3Qgbm9kZSBpcyBsZXNzIHRoYW4gdGhlIHNlY29uZC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzVGhhbiA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBPcGVyYXRvck5vZGUsICc8JyApO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZmlyc3Qgbm9kZSBpcyBncmVhdGVyIHRoYW4gdGhlIHNlY29uZC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBncmVhdGVyVGhhbiA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBPcGVyYXRvck5vZGUsICc+JyApO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZmlyc3Qgbm9kZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNlY29uZC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzVGhhbkVxdWFsID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE9wZXJhdG9yTm9kZSwgJzw9JyApO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZmlyc3Qgbm9kZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHNlY29uZC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBncmVhdGVyVGhhbkVxdWFsID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE9wZXJhdG9yTm9kZSwgJz49JyApO1xuXG4vKipcbiAqIFBlcmZvcm1zIGxvZ2ljYWwgQU5EIG9uIHR3byBub2Rlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBhbmQgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT3BlcmF0b3JOb2RlLCAnJiYnICk7XG5cbi8qKlxuICogUGVyZm9ybXMgbG9naWNhbCBPUiBvbiB0d28gbm9kZXMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IGFOb2RlIC0gVGhlIGZpcnN0IGlucHV0LlxuICogQHBhcmFtIHtOb2RlfSBiTm9kZSAtIFRoZSBzZWNvbmQgaW5wdXQuXG4gKiBAcmV0dXJucyB7T3BlcmF0b3JOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgb3IgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT3BlcmF0b3JOb2RlLCAnfHwnICk7XG5cbi8qKlxuICogUGVyZm9ybXMgbG9naWNhbCBOT1Qgb24gYSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBhTm9kZSAtIFRoZSBmaXJzdCBpbnB1dC5cbiAqIEBwYXJhbSB7Tm9kZX0gYk5vZGUgLSBUaGUgc2Vjb25kIGlucHV0LlxuICogQHJldHVybnMge09wZXJhdG9yTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IG5vdCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBPcGVyYXRvck5vZGUsICchJyApO1xuXG4vKipcbiAqIFBlcmZvcm1zIGxvZ2ljYWwgWE9SIG9uIHR3byBub2Rlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCB4b3IgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT3BlcmF0b3JOb2RlLCAnXl4nICk7XG5cbi8qKlxuICogUGVyZm9ybXMgYml0d2lzZSBBTkQgb24gdHdvIG5vZGVzLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBhTm9kZSAtIFRoZSBmaXJzdCBpbnB1dC5cbiAqIEBwYXJhbSB7Tm9kZX0gYk5vZGUgLSBUaGUgc2Vjb25kIGlucHV0LlxuICogQHJldHVybnMge09wZXJhdG9yTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGJpdEFuZCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBPcGVyYXRvck5vZGUsICcmJyApO1xuXG4vKipcbiAqIFBlcmZvcm1zIGJpdHdpc2UgTk9UIG9uIGEgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBiaXROb3QgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT3BlcmF0b3JOb2RlLCAnficgKTtcblxuLyoqXG4gKiBQZXJmb3JtcyBiaXR3aXNlIE9SIG9uIHR3byBub2Rlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBiaXRPciA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBPcGVyYXRvck5vZGUsICd8JyApO1xuXG4vKipcbiAqIFBlcmZvcm1zIGJpdHdpc2UgWE9SIG9uIHR3byBub2Rlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gYU5vZGUgLSBUaGUgZmlyc3QgaW5wdXQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHNlY29uZCBpbnB1dC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBiaXRYb3IgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT3BlcmF0b3JOb2RlLCAnXicgKTtcblxuLyoqXG4gKiBTaGlmdHMgYSBub2RlIHRvIHRoZSBsZWZ0LlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBhTm9kZSAtIFRoZSBub2RlIHRvIHNoaWZ0LlxuICogQHBhcmFtIHtOb2RlfSBiTm9kZSAtIFRoZSB2YWx1ZSB0byBzaGlmdC5cbiAqIEByZXR1cm5zIHtPcGVyYXRvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBzaGlmdExlZnQgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT3BlcmF0b3JOb2RlLCAnPDwnICk7XG5cbi8qKlxuICogU2hpZnRzIGEgbm9kZSB0byB0aGUgcmlnaHQuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IGFOb2RlIC0gVGhlIG5vZGUgdG8gc2hpZnQuXG4gKiBAcGFyYW0ge05vZGV9IGJOb2RlIC0gVGhlIHZhbHVlIHRvIHNoaWZ0LlxuICogQHJldHVybnMge09wZXJhdG9yTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHNoaWZ0UmlnaHQgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT3BlcmF0b3JOb2RlLCAnPj4nICk7XG5cbmFkZE1ldGhvZENoYWluaW5nKCAnYWRkJywgYWRkICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3N1YicsIHN1YiApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdtdWwnLCBtdWwgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnZGl2JywgZGl2ICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ21vZEludCcsIG1vZEludCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdlcXVhbCcsIGVxdWFsICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ25vdEVxdWFsJywgbm90RXF1YWwgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnbGVzc1RoYW4nLCBsZXNzVGhhbiApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdncmVhdGVyVGhhbicsIGdyZWF0ZXJUaGFuICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2xlc3NUaGFuRXF1YWwnLCBsZXNzVGhhbkVxdWFsICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2dyZWF0ZXJUaGFuRXF1YWwnLCBncmVhdGVyVGhhbkVxdWFsICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2FuZCcsIGFuZCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdvcicsIG9yICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ25vdCcsIG5vdCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd4b3InLCB4b3IgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnYml0QW5kJywgYml0QW5kICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2JpdE5vdCcsIGJpdE5vdCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdiaXRPcicsIGJpdE9yICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2JpdFhvcicsIGJpdFhvciApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdzaGlmdExlZnQnLCBzaGlmdExlZnQgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnc2hpZnRSaWdodCcsIHNoaWZ0UmlnaHQgKTtcblxuLyoqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBkZXByZWNhdGVkIHNpbmNlIHIxNjguIFVzZSB7QGxpbmsgbW9kSW50fSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSAgey4uLmFueX0gcGFyYW1zXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBjb25zdCByZW1haW5kZXIgPSAoIC4uLnBhcmFtcyApID0+IHsgLy8gQGRlcHJlY2F0ZWQsIHIxNjhcblxuXHRjb25zb2xlLndhcm4oICdUU0wuT3BlcmF0b3JOb2RlOiAucmVtYWluZGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubW9kSW50KCkuJyApO1xuXHRyZXR1cm4gbW9kSW50KCAuLi5wYXJhbXMgKTtcblxufTtcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICdyZW1haW5kZXInLCByZW1haW5kZXIgKTtcbiIsImltcG9ydCBUZW1wTm9kZSBmcm9tICcuLi9jb3JlL1RlbXBOb2RlLmpzJztcbmltcG9ydCB7IHN1YiwgbXVsLCBkaXYgfSBmcm9tICcuL09wZXJhdG9yTm9kZS5qcyc7XG5pbXBvcnQgeyBhZGRNZXRob2RDaGFpbmluZywgbm9kZU9iamVjdCwgbm9kZVByb3h5LCBmbG9hdCwgdmVjMiwgdmVjMywgdmVjNCwgRm4gfSBmcm9tICcuLi90c2wvVFNMQ29yZS5qcyc7XG5pbXBvcnQgeyBXZWJHTENvb3JkaW5hdGVTeXN0ZW0sIFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIFRoaXMgbm9kZSByZXByZXNlbnRzIGEgdmFyaWV0eSBvZiBtYXRoZW1hdGljYWwgbWV0aG9kcyBhdmFpbGFibGUgaW4gc2hhZGVycy5cbiAqIFRoZXkgYXJlIGRpdmlkZWQgaW50byB0aHJlZSBjYXRlZ29yaWVzOlxuICpcbiAqIC0gTWV0aG9kcyB3aXRoIG9uZSBpbnB1dCBsaWtlIGBzaW5gLCBgY29zYCBvciBgbm9ybWFsaXplYC5cbiAqIC0gTWV0aG9kcyB3aXRoIHR3byBpbnB1dHMgbGlrZSBgZG90YCwgYGNyb3NzYCBvciBgcG93YC5cbiAqIC0gTWV0aG9kcyB3aXRoIHRocmVlIGlucHV0cyBsaWtlIGBtaXhgLCBgY2xhbXBgIG9yIGBzbW9vdGhzdGVwYC5cbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgTWF0aE5vZGUgZXh0ZW5kcyBUZW1wTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdNYXRoTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1hdGggbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCAtIFRoZSBtZXRob2QgbmFtZS5cblx0ICogQHBhcmFtIHtOb2RlfSBhTm9kZSAtIFRoZSBmaXJzdCBpbnB1dC5cblx0ICogQHBhcmFtIHs/Tm9kZX0gW2JOb2RlPW51bGxdIC0gVGhlIHNlY29uZCBpbnB1dC5cblx0ICogQHBhcmFtIHs/Tm9kZX0gW2NOb2RlPW51bGxdIC0gVGhlIHRoaXJkIGlucHV0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG1ldGhvZCwgYU5vZGUsIGJOb2RlID0gbnVsbCwgY05vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBtZXRob2QgbmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5tZXRob2QgPSBtZXRob2Q7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZmlyc3QgaW5wdXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLmFOb2RlID0gYU5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2Vjb25kIGlucHV0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJOb2RlID0gYk5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGhpcmQgaW5wdXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY05vZGUgPSBjTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNNYXRoTm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgaW5wdXQgdHlwZSBpcyBpbmZlcnJlZCBmcm9tIHRoZSBub2RlIHR5cGVzIG9mIHRoZSBpbnB1dCBub2Rlcy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgaW5wdXQgdHlwZS5cblx0ICovXG5cdGdldElucHV0VHlwZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IGFUeXBlID0gdGhpcy5hTm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXHRcdGNvbnN0IGJUeXBlID0gdGhpcy5iTm9kZSA/IHRoaXMuYk5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSA6IG51bGw7XG5cdFx0Y29uc3QgY1R5cGUgPSB0aGlzLmNOb2RlID8gdGhpcy5jTm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApIDogbnVsbDtcblxuXHRcdGNvbnN0IGFMZW4gPSBidWlsZGVyLmlzTWF0cml4KCBhVHlwZSApID8gMCA6IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggYVR5cGUgKTtcblx0XHRjb25zdCBiTGVuID0gYnVpbGRlci5pc01hdHJpeCggYlR5cGUgKSA/IDAgOiBidWlsZGVyLmdldFR5cGVMZW5ndGgoIGJUeXBlICk7XG5cdFx0Y29uc3QgY0xlbiA9IGJ1aWxkZXIuaXNNYXRyaXgoIGNUeXBlICkgPyAwIDogYnVpbGRlci5nZXRUeXBlTGVuZ3RoKCBjVHlwZSApO1xuXG5cdFx0aWYgKCBhTGVuID4gYkxlbiAmJiBhTGVuID4gY0xlbiApIHtcblxuXHRcdFx0cmV0dXJuIGFUeXBlO1xuXG5cdFx0fSBlbHNlIGlmICggYkxlbiA+IGNMZW4gKSB7XG5cblx0XHRcdHJldHVybiBiVHlwZTtcblxuXHRcdH0gZWxzZSBpZiAoIGNMZW4gPiBhTGVuICkge1xuXG5cdFx0XHRyZXR1cm4gY1R5cGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYVR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgc2VsZWN0ZWQgbWV0aG9kIGFzIHdlbGwgYXMgdGhlIGlucHV0IHR5cGUgZGV0ZXJtaW5lIHRoZSBub2RlIHR5cGUgb2YgdGhpcyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IG1ldGhvZCA9IHRoaXMubWV0aG9kO1xuXG5cdFx0aWYgKCBtZXRob2QgPT09IE1hdGhOb2RlLkxFTkdUSCB8fCBtZXRob2QgPT09IE1hdGhOb2RlLkRJU1RBTkNFIHx8IG1ldGhvZCA9PT0gTWF0aE5vZGUuRE9UICkge1xuXG5cdFx0XHRyZXR1cm4gJ2Zsb2F0JztcblxuXHRcdH0gZWxzZSBpZiAoIG1ldGhvZCA9PT0gTWF0aE5vZGUuQ1JPU1MgKSB7XG5cblx0XHRcdHJldHVybiAndmVjMyc7XG5cblx0XHR9IGVsc2UgaWYgKCBtZXRob2QgPT09IE1hdGhOb2RlLkFMTCApIHtcblxuXHRcdFx0cmV0dXJuICdib29sJztcblxuXHRcdH0gZWxzZSBpZiAoIG1ldGhvZCA9PT0gTWF0aE5vZGUuRVFVQUxTICkge1xuXG5cdFx0XHRyZXR1cm4gYnVpbGRlci5jaGFuZ2VDb21wb25lbnRUeXBlKCB0aGlzLmFOb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICksICdib29sJyApO1xuXG5cdFx0fSBlbHNlIGlmICggbWV0aG9kID09PSBNYXRoTm9kZS5NT0QgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmFOb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRJbnB1dFR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIsIG91dHB1dCApIHtcblxuXHRcdGxldCBtZXRob2QgPSB0aGlzLm1ldGhvZDtcblxuXHRcdGNvbnN0IHR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cdFx0Y29uc3QgaW5wdXRUeXBlID0gdGhpcy5nZXRJbnB1dFR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IGEgPSB0aGlzLmFOb2RlO1xuXHRcdGNvbnN0IGIgPSB0aGlzLmJOb2RlO1xuXHRcdGNvbnN0IGMgPSB0aGlzLmNOb2RlO1xuXG5cdFx0Y29uc3QgY29vcmRpbmF0ZVN5c3RlbSA9IGJ1aWxkZXIucmVuZGVyZXIuY29vcmRpbmF0ZVN5c3RlbTtcblxuXHRcdGlmICggbWV0aG9kID09PSBNYXRoTm9kZS5UUkFOU0ZPUk1fRElSRUNUSU9OICkge1xuXG5cdFx0XHQvLyBkaXIgY2FuIGJlIGVpdGhlciBhIGRpcmVjdGlvbiB2ZWN0b3Igb3IgYSBub3JtYWwgdmVjdG9yXG5cdFx0XHQvLyB1cHBlci1sZWZ0IDN4MyBvZiBtYXRyaXggaXMgYXNzdW1lZCB0byBiZSBvcnRob2dvbmFsXG5cblx0XHRcdGxldCB0QSA9IGE7XG5cdFx0XHRsZXQgdEIgPSBiO1xuXG5cdFx0XHRpZiAoIGJ1aWxkZXIuaXNNYXRyaXgoIHRBLmdldE5vZGVUeXBlKCBidWlsZGVyICkgKSApIHtcblxuXHRcdFx0XHR0QiA9IHZlYzQoIHZlYzMoIHRCICksIDAuMCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRBID0gdmVjNCggdmVjMyggdEEgKSwgMC4wICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbXVsTm9kZSA9IG11bCggdEEsIHRCICkueHl6O1xuXG5cdFx0XHRyZXR1cm4gbm9ybWFsaXplKCBtdWxOb2RlICkuYnVpbGQoIGJ1aWxkZXIsIG91dHB1dCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWV0aG9kID09PSBNYXRoTm9kZS5ORUdBVEUgKSB7XG5cblx0XHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggJyggLSAnICsgYS5idWlsZCggYnVpbGRlciwgaW5wdXRUeXBlICkgKyAnICknLCB0eXBlLCBvdXRwdXQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1ldGhvZCA9PT0gTWF0aE5vZGUuT05FX01JTlVTICkge1xuXG5cdFx0XHRyZXR1cm4gc3ViKCAxLjAsIGEgKS5idWlsZCggYnVpbGRlciwgb3V0cHV0ICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtZXRob2QgPT09IE1hdGhOb2RlLlJFQ0lQUk9DQUwgKSB7XG5cblx0XHRcdHJldHVybiBkaXYoIDEuMCwgYSApLmJ1aWxkKCBidWlsZGVyLCBvdXRwdXQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1ldGhvZCA9PT0gTWF0aE5vZGUuRElGRkVSRU5DRSApIHtcblxuXHRcdFx0cmV0dXJuIGFicyggc3ViKCBhLCBiICkgKS5idWlsZCggYnVpbGRlciwgb3V0cHV0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBwYXJhbXMgPSBbXTtcblxuXHRcdFx0aWYgKCBtZXRob2QgPT09IE1hdGhOb2RlLkNST1NTIHx8IG1ldGhvZCA9PT0gTWF0aE5vZGUuTU9EICkge1xuXG5cdFx0XHRcdHBhcmFtcy5wdXNoKFxuXHRcdFx0XHRcdGEuYnVpbGQoIGJ1aWxkZXIsIHR5cGUgKSxcblx0XHRcdFx0XHRiLmJ1aWxkKCBidWlsZGVyLCB0eXBlIClcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICYmIG1ldGhvZCA9PT0gTWF0aE5vZGUuU1RFUCApIHtcblxuXHRcdFx0XHRwYXJhbXMucHVzaChcblx0XHRcdFx0XHRhLmJ1aWxkKCBidWlsZGVyLCBidWlsZGVyLmdldFR5cGVMZW5ndGgoIGEuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSApID09PSAxID8gJ2Zsb2F0JyA6IGlucHV0VHlwZSApLFxuXHRcdFx0XHRcdGIuYnVpbGQoIGJ1aWxkZXIsIGlucHV0VHlwZSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSBpZiAoICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICYmICggbWV0aG9kID09PSBNYXRoTm9kZS5NSU4gfHwgbWV0aG9kID09PSBNYXRoTm9kZS5NQVggKSApIHx8IG1ldGhvZCA9PT0gTWF0aE5vZGUuTU9EICkge1xuXG5cdFx0XHRcdHBhcmFtcy5wdXNoKFxuXHRcdFx0XHRcdGEuYnVpbGQoIGJ1aWxkZXIsIGlucHV0VHlwZSApLFxuXHRcdFx0XHRcdGIuYnVpbGQoIGJ1aWxkZXIsIGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggYi5nZXROb2RlVHlwZSggYnVpbGRlciApICkgPT09IDEgPyAnZmxvYXQnIDogaW5wdXRUeXBlIClcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWV0aG9kID09PSBNYXRoTm9kZS5SRUZSQUNUICkge1xuXG5cdFx0XHRcdHBhcmFtcy5wdXNoKFxuXHRcdFx0XHRcdGEuYnVpbGQoIGJ1aWxkZXIsIGlucHV0VHlwZSApLFxuXHRcdFx0XHRcdGIuYnVpbGQoIGJ1aWxkZXIsIGlucHV0VHlwZSApLFxuXHRcdFx0XHRcdGMuYnVpbGQoIGJ1aWxkZXIsICdmbG9hdCcgKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtZXRob2QgPT09IE1hdGhOb2RlLk1JWCApIHtcblxuXHRcdFx0XHRwYXJhbXMucHVzaChcblx0XHRcdFx0XHRhLmJ1aWxkKCBidWlsZGVyLCBpbnB1dFR5cGUgKSxcblx0XHRcdFx0XHRiLmJ1aWxkKCBidWlsZGVyLCBpbnB1dFR5cGUgKSxcblx0XHRcdFx0XHRjLmJ1aWxkKCBidWlsZGVyLCBidWlsZGVyLmdldFR5cGVMZW5ndGgoIGMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSApID09PSAxID8gJ2Zsb2F0JyA6IGlucHV0VHlwZSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtICYmIG1ldGhvZCA9PT0gTWF0aE5vZGUuQVRBTiAmJiBiICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bWV0aG9kID0gJ2F0YW4yJztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cGFyYW1zLnB1c2goIGEuYnVpbGQoIGJ1aWxkZXIsIGlucHV0VHlwZSApICk7XG5cdFx0XHRcdGlmICggYiAhPT0gbnVsbCApIHBhcmFtcy5wdXNoKCBiLmJ1aWxkKCBidWlsZGVyLCBpbnB1dFR5cGUgKSApO1xuXHRcdFx0XHRpZiAoIGMgIT09IG51bGwgKSBwYXJhbXMucHVzaCggYy5idWlsZCggYnVpbGRlciwgaW5wdXRUeXBlICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIGAkeyBidWlsZGVyLmdldE1ldGhvZCggbWV0aG9kLCB0eXBlICkgfSggJHtwYXJhbXMuam9pbiggJywgJyApfSApYCwgdHlwZSwgb3V0cHV0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLnNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0ZGF0YS5tZXRob2QgPSB0aGlzLm1ldGhvZDtcblxuXHR9XG5cblx0ZGVzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5kZXNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0dGhpcy5tZXRob2QgPSBkYXRhLm1ldGhvZDtcblxuXHR9XG5cbn1cblxuLy8gMSBpbnB1dFxuXG5NYXRoTm9kZS5BTEwgPSAnYWxsJztcbk1hdGhOb2RlLkFOWSA9ICdhbnknO1xuXG5NYXRoTm9kZS5SQURJQU5TID0gJ3JhZGlhbnMnO1xuTWF0aE5vZGUuREVHUkVFUyA9ICdkZWdyZWVzJztcbk1hdGhOb2RlLkVYUCA9ICdleHAnO1xuTWF0aE5vZGUuRVhQMiA9ICdleHAyJztcbk1hdGhOb2RlLkxPRyA9ICdsb2cnO1xuTWF0aE5vZGUuTE9HMiA9ICdsb2cyJztcbk1hdGhOb2RlLlNRUlQgPSAnc3FydCc7XG5NYXRoTm9kZS5JTlZFUlNFX1NRUlQgPSAnaW52ZXJzZXNxcnQnO1xuTWF0aE5vZGUuRkxPT1IgPSAnZmxvb3InO1xuTWF0aE5vZGUuQ0VJTCA9ICdjZWlsJztcbk1hdGhOb2RlLk5PUk1BTElaRSA9ICdub3JtYWxpemUnO1xuTWF0aE5vZGUuRlJBQ1QgPSAnZnJhY3QnO1xuTWF0aE5vZGUuU0lOID0gJ3Npbic7XG5NYXRoTm9kZS5DT1MgPSAnY29zJztcbk1hdGhOb2RlLlRBTiA9ICd0YW4nO1xuTWF0aE5vZGUuQVNJTiA9ICdhc2luJztcbk1hdGhOb2RlLkFDT1MgPSAnYWNvcyc7XG5NYXRoTm9kZS5BVEFOID0gJ2F0YW4nO1xuTWF0aE5vZGUuQUJTID0gJ2Ficyc7XG5NYXRoTm9kZS5TSUdOID0gJ3NpZ24nO1xuTWF0aE5vZGUuTEVOR1RIID0gJ2xlbmd0aCc7XG5NYXRoTm9kZS5ORUdBVEUgPSAnbmVnYXRlJztcbk1hdGhOb2RlLk9ORV9NSU5VUyA9ICdvbmVNaW51cyc7XG5NYXRoTm9kZS5ERkRYID0gJ2RGZHgnO1xuTWF0aE5vZGUuREZEWSA9ICdkRmR5Jztcbk1hdGhOb2RlLlJPVU5EID0gJ3JvdW5kJztcbk1hdGhOb2RlLlJFQ0lQUk9DQUwgPSAncmVjaXByb2NhbCc7XG5NYXRoTm9kZS5UUlVOQyA9ICd0cnVuYyc7XG5NYXRoTm9kZS5GV0lEVEggPSAnZndpZHRoJztcbk1hdGhOb2RlLlRSQU5TUE9TRSA9ICd0cmFuc3Bvc2UnO1xuXG4vLyAyIGlucHV0c1xuXG5NYXRoTm9kZS5CSVRDQVNUID0gJ2JpdGNhc3QnO1xuTWF0aE5vZGUuRVFVQUxTID0gJ2VxdWFscyc7XG5NYXRoTm9kZS5NSU4gPSAnbWluJztcbk1hdGhOb2RlLk1BWCA9ICdtYXgnO1xuTWF0aE5vZGUuTU9EID0gJ21vZCc7XG5NYXRoTm9kZS5TVEVQID0gJ3N0ZXAnO1xuTWF0aE5vZGUuUkVGTEVDVCA9ICdyZWZsZWN0Jztcbk1hdGhOb2RlLkRJU1RBTkNFID0gJ2Rpc3RhbmNlJztcbk1hdGhOb2RlLkRJRkZFUkVOQ0UgPSAnZGlmZmVyZW5jZSc7XG5NYXRoTm9kZS5ET1QgPSAnZG90Jztcbk1hdGhOb2RlLkNST1NTID0gJ2Nyb3NzJztcbk1hdGhOb2RlLlBPVyA9ICdwb3cnO1xuTWF0aE5vZGUuVFJBTlNGT1JNX0RJUkVDVElPTiA9ICd0cmFuc2Zvcm1EaXJlY3Rpb24nO1xuXG4vLyAzIGlucHV0c1xuXG5NYXRoTm9kZS5NSVggPSAnbWl4Jztcbk1hdGhOb2RlLkNMQU1QID0gJ2NsYW1wJztcbk1hdGhOb2RlLlJFRlJBQ1QgPSAncmVmcmFjdCc7XG5NYXRoTm9kZS5TTU9PVEhTVEVQID0gJ3Ntb290aHN0ZXAnO1xuTWF0aE5vZGUuRkFDRUZPUldBUkQgPSAnZmFjZWZvcndhcmQnO1xuXG5leHBvcnQgZGVmYXVsdCBNYXRoTm9kZTtcblxuLy8gMSBpbnB1dHNcblxuLyoqXG4gKiBBIHNtYWxsIHZhbHVlIHVzZWQgdG8gaGFuZGxlIGZsb2F0aW5nLXBvaW50IHByZWNpc2lvbiBlcnJvcnMuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgRVBTSUxPTiA9IC8qQF9fUFVSRV9fKi8gZmxvYXQoIDFlLTYgKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGluZmluaXR5LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IElORklOSVRZID0gLypAX19QVVJFX18qLyBmbG9hdCggMWU2ICk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBQSS5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBQSSA9IC8qQF9fUFVSRV9fKi8gZmxvYXQoIE1hdGguUEkgKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIFBJICogMi5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBQSTIgPSAvKkBfX1BVUkVfXyovIGZsb2F0KCBNYXRoLlBJICogMiApO1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGFsbCBjb21wb25lbnRzIG9mIGB4YCBhcmUgYHRydWVgLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlPGJvb2w+fVxuICovXG5leHBvcnQgY29uc3QgYWxsID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5BTEwgKTtcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgY29tcG9uZW50cyBvZiBgeGAgYXJlIGB0cnVlYC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZTxib29sPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGFueSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuQU5ZICk7XG5cbi8qKlxuICogQ29udmVydHMgYSBxdWFudGl0eSBpbiBkZWdyZWVzIHRvIHJhZGlhbnMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgaW5wdXQgaW4gZGVncmVlcy5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcmFkaWFucyA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuUkFESUFOUyApO1xuXG4vKipcbiAqIENvbnZlcnQgYSBxdWFudGl0eSBpbiByYWRpYW5zIHRvIGRlZ3JlZXMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgaW5wdXQgaW4gcmFkaWFucy5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgZGVncmVlcyA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuREVHUkVFUyApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG5hdHVyYWwgZXhwb25lbnRpYXRpb24gb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGV4cCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuRVhQICk7XG5cbi8qKlxuICogUmV0dXJucyAyIHJhaXNlZCB0byB0aGUgcG93ZXIgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGV4cDIgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLkVYUDIgKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuYXR1cmFsIGxvZ2FyaXRobSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgbG9nID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5MT0cgKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIDIgbG9nYXJpdGhtIG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBsb2cyID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5MT0cyICk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHNxcnQgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLlNRUlQgKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgaW52ZXJzZVNxcnQgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLklOVkVSU0VfU1FSVCApO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBuZWFyZXN0IGludGVnZXIgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBmbG9vciA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuRkxPT1IgKTtcblxuLyoqXG4gKiBGaW5kcyB0aGUgbmVhcmVzdCBpbnRlZ2VyIHRoYXQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjZWlsID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5DRUlMICk7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgdW5pdCB2ZWN0b3IgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoZSBvcmlnaW5hbCB2ZWN0b3IuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IHggLSBUaGUgaW5wdXQgdmVjdG9yLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemUgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLk5PUk1BTElaRSApO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBmcmFjdGlvbmFsIHBhcnQgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGZyYWN0ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5GUkFDVCApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHNpbmUgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHNpbiA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuU0lOICk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY29zaW5lIG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjb3MgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLkNPUyApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHRhbmdlbnQgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRhbiA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuVEFOICk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYXJjc2luZSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYXNpbiA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuQVNJTiApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFyY2Nvc2luZSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYWNvcyA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuQUNPUyApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFyYy10YW5nZW50IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKiBJZiB0d28gcGFyYW1ldGVycyBhcmUgcHJvdmlkZWQsIHRoZSByZXN1bHQgaXMgYGF0YW4yKHkveClgLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB5IC0gVGhlIHkgcGFyYW1ldGVyLlxuICogQHBhcmFtIHs/KE5vZGUgfCBudW1iZXIpfSB4IC0gVGhlIHggcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBhdGFuID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5BVEFOICk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGFicyA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuQUJTICk7XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIHNpZ24gb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHNpZ24gPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLlNJR04gKTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWN0b3IuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgbGVuZ3RoID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5MRU5HVEggKTtcblxuLyoqXG4gKiBOZWdhdGVzIHRoZSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyICgteCkuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBuZWdhdGUgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLk5FR0FURSApO1xuXG4vKipcbiAqIFJldHVybiBgMWAgbWludXMgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IG9uZU1pbnVzID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5PTkVfTUlOVVMgKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJ0aWFsIGRlcml2YXRpdmUgb2YgdGhlIHBhcmFtZXRlciB3aXRoIHJlc3BlY3QgdG8geC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGRGZHggPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLkRGRFggKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJ0aWFsIGRlcml2YXRpdmUgb2YgdGhlIHBhcmFtZXRlciB3aXRoIHJlc3BlY3QgdG8geS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGRGZHkgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLkRGRFkgKTtcblxuLyoqXG4gKiBSb3VuZHMgdGhlIHBhcmFtZXRlciB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgcm91bmQgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLlJPVU5EICk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVjaXByb2NhbCBvZiB0aGUgcGFyYW1ldGVyIGAoMS94KWAuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCByZWNpcHJvY2FsID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5SRUNJUFJPQ0FMICk7XG5cbi8qKlxuICogVHJ1bmNhdGVzIHRoZSBwYXJhbWV0ZXIsIHJlbW92aW5nIHRoZSBmcmFjdGlvbmFsIHBhcnQuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCB0cnVuYyA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuVFJVTkMgKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdW0gb2YgdGhlIGFic29sdXRlIGRlcml2YXRpdmVzIGluIHggYW5kIHkuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBmd2lkdGggPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLkZXSURUSCApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHRyYW5zcG9zZSBvZiBhIG1hdHJpeC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTxtYXQyfG1hdDN8bWF0ND59IHggLSBUaGUgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc3Bvc2UgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLlRSQU5TUE9TRSApO1xuXG4vLyAyIGlucHV0c1xuXG4vKipcbiAqIFJlaW50ZXJwcmV0IHRoZSBiaXQgcmVwcmVzZW50YXRpb24gb2YgYSB2YWx1ZSBpbiBvbmUgdHlwZSBhcyBhIHZhbHVlIGluIGFub3RoZXIgdHlwZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30geSAtIFRoZSBuZXcgdHlwZS5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYml0Y2FzdCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuQklUQ0FTVCApO1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGB4YCBlcXVhbHMgYHlgLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIGZpcnN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geSAtIFRoZSBzZWNvbmQgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGU8Ym9vbD59XG4gKi9cbmV4cG9ydCBjb25zdCBlcXVhbHMgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLkVRVUFMUyApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGxlc3NlciBvZiB0d28gdmFsdWVzLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIHkgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB5IC0gVGhlIHggcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBtaW4gPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLk1JTiApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdyZWF0ZXIgb2YgdHdvIHZhbHVlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSB5IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geSAtIFRoZSB4IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgbWF4ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5NQVggKTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgcmVtYWluZGVyIG9mIGRpdmlkaW5nIHRoZSBmaXJzdCBub2RlIGJ5IHRoZSBzZWNvbmQgb25lLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIHkgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB5IC0gVGhlIHggcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBtb2QgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLk1PRCApO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc3RlcCBmdW5jdGlvbiBieSBjb21wYXJpbmcgdHdvIHZhbHVlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSB5IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geSAtIFRoZSB4IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgc3RlcCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuU1RFUCApO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHJlZmxlY3Rpb24gZGlyZWN0aW9uIGZvciBhbiBpbmNpZGVudCB2ZWN0b3IuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMnx2ZWMzfHZlYzQ+fSBJIC0gVGhlIGluY2lkZW50IHZlY3Rvci5cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyfHZlYzN8dmVjND59IE4gLSBUaGUgbm9ybWFsIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtOb2RlPHZlYzJ8dmVjM3x2ZWM0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZmxlY3QgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLlJFRkxFQ1QgKTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMnx2ZWMzfHZlYzQ+fSB4IC0gVGhlIGZpcnN0IHBvaW50LlxuICogQHBhcmFtIHtOb2RlPHZlYzJ8dmVjM3x2ZWM0Pn0geSAtIFRoZSBzZWNvbmQgcG9pbnQuXG4gKiBAcmV0dXJucyB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBkaXN0YW5jZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuRElTVEFOQ0UgKTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhYnNvbHV0ZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHZhbHVlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBmaXJzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHkgLSBUaGUgc2Vjb25kIHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgZGlmZmVyZW5jZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuRElGRkVSRU5DRSApO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzJ8dmVjM3x2ZWM0Pn0geCAtIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge05vZGU8dmVjMnx2ZWMzfHZlYzQ+fSB5IC0gVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBkb3QgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLkRPVCApO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMnx2ZWMzfHZlYzQ+fSB4IC0gVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyfHZlYzN8dmVjND59IHkgLSBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtOb2RlPHZlYzJ8dmVjM3x2ZWM0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNyb3NzID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5DUk9TUyApO1xuXG4vKipcbiAqIFJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IHBhcmFtZXRlciByYWlzZWQgdG8gdGhlIHBvd2VyIG9mIHRoZSBzZWNvbmQgb25lLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIGZpcnN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geSAtIFRoZSBzZWNvbmQgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBwb3cgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLlBPVyApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHNxdWFyZSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIGZpcnN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcG93MiA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuUE9XLCAyICk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3ViZSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIGZpcnN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcG93MyA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuUE9XLCAzICk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZm91cnRoIHBvd2VyIG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgZmlyc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBwb3c0ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5QT1csIDQgKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSBkaXJlY3Rpb24gb2YgYSB2ZWN0b3IgYnkgYSBtYXRyaXggYW5kIHRoZW4gbm9ybWFsaXplcyB0aGUgcmVzdWx0LlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzJ8dmVjM3x2ZWM0Pn0gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbiB2ZWN0b3IuXG4gKiBAcGFyYW0ge05vZGU8bWF0MnxtYXQzfG1hdDQ+fSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1EaXJlY3Rpb24gPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggTWF0aE5vZGUsIE1hdGhOb2RlLlRSQU5TRk9STV9ESVJFQ1RJT04gKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdWJlIHJvb3Qgb2YgYSBudW1iZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IGEgLSBUaGUgZmlyc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjYnJ0ID0gKCBhICkgPT4gbXVsKCBzaWduKCBhICksIHBvdyggYWJzKCBhICksIDEuMCAvIDMuMCApICk7XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlY3Rvci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyfHZlYzN8dmVjND59IGEgLSBUaGUgdmVjdG9yLlxuICogQHJldHVybnMge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgbGVuZ3RoU3EgPSAoIGEgKSA9PiBkb3QoIGEsIGEgKTtcblxuLyoqXG4gKiBMaW5lYXJseSBpbnRlcnBvbGF0ZXMgYmV0d2VlbiB0d28gdmFsdWVzLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSBhIC0gVGhlIGZpcnN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0gYiAtIFRoZSBzZWNvbmQgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gdmFsdWUuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IG1peCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuTUlYICk7XG5cbi8qKlxuICogQ29uc3RyYWlucyBhIHZhbHVlIHRvIGxpZSBiZXR3ZWVuIHR3byBmdXJ0aGVyIHZhbHVlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY29uc3RyYWluLlxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSBbbG93PTBdIC0gVGhlIGxvd2VyIGJvdW5kLlxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSBbaGlnaD0xXSAtIFRoZSB1cHBlciBib3VuZC5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3QgY2xhbXAgPSAoIHZhbHVlLCBsb3cgPSAwLCBoaWdoID0gMSApID0+IG5vZGVPYmplY3QoIG5ldyBNYXRoTm9kZSggTWF0aE5vZGUuQ0xBTVAsIG5vZGVPYmplY3QoIHZhbHVlICksIG5vZGVPYmplY3QoIGxvdyApLCBub2RlT2JqZWN0KCBoaWdoICkgKSApO1xuXG4vKipcbiAqIENvbnN0cmFpbnMgYSB2YWx1ZSBiZXR3ZWVuIGAwYCBhbmQgYDFgLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjb25zdHJhaW4uXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHNhdHVyYXRlID0gKCB2YWx1ZSApID0+IGNsYW1wKCB2YWx1ZSApO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHJlZnJhY3Rpb24gZGlyZWN0aW9uIGZvciBhbiBpbmNpZGVudCB2ZWN0b3IuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMnx2ZWMzfHZlYzQ+fSBJIC0gVGhlIGluY2lkZW50IHZlY3Rvci5cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyfHZlYzN8dmVjND59IE4gLSBUaGUgbm9ybWFsIHZlY3Rvci5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGV0YSAtIFRoZSB0aGUgcmF0aW8gb2YgaW5kaWNlcyBvZiByZWZyYWN0aW9uLlxuICogQHJldHVybnMge05vZGU8dmVjMnx2ZWMzfHZlYzQ+fVxuICovXG5leHBvcnQgY29uc3QgcmVmcmFjdCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuUkVGUkFDVCApO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZhbHVlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0gbG93IC0gVGhlIHZhbHVlIG9mIHRoZSBsb3dlciBlZGdlIG9mIHRoZSBIZXJtaXRlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSBoaWdoIC0gVGhlIHZhbHVlIG9mIHRoZSB1cHBlciBlZGdlIG9mIHRoZSBIZXJtaXRlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSB4IC0gVGhlIHNvdXJjZSB2YWx1ZSBmb3IgaW50ZXJwb2xhdGlvbi5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgc21vb3Roc3RlcCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNYXRoTm9kZSwgTWF0aE5vZGUuU01PT1RIU1RFUCApO1xuXG4vKipcbiAqIFJldHVybnMgYSB2ZWN0b3IgcG9pbnRpbmcgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFzIGFub3RoZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMnx2ZWMzfHZlYzQ+fSBOIC0gVGhlIHZlY3RvciB0byBvcmllbnQuXG4gKiBAcGFyYW0ge05vZGU8dmVjMnx2ZWMzfHZlYzQ+fSBJIC0gVGhlIGluY2lkZW50IHZlY3Rvci5cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyfHZlYzN8dmVjND59IE5yZWYgLSBUaGUgcmVmZXJlbmNlIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtOb2RlPHZlYzJ8dmVjM3x2ZWM0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGZhY2VGb3J3YXJkID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1hdGhOb2RlLCBNYXRoTm9kZS5GQUNFRk9SV0FSRCApO1xuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gdmFsdWUgZm9yIHRoZSBnaXZlbiB1di5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyPn0gdXYgLSBUaGUgdXYgbm9kZS5cbiAqIEByZXR1cm5zIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmQgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdXYgXSApID0+IHtcblxuXHRjb25zdCBhID0gMTIuOTg5OCwgYiA9IDc4LjIzMywgYyA9IDQzNzU4LjU0NTM7XG5cdGNvbnN0IGR0ID0gZG90KCB1di54eSwgdmVjMiggYSwgYiApICksIHNuID0gbW9kKCBkdCwgUEkgKTtcblxuXHRyZXR1cm4gZnJhY3QoIHNpbiggc24gKS5tdWwoIGMgKSApO1xuXG59ICk7XG5cbi8qKlxuICogQWxpYXMgZm9yIGBtaXgoKWAgd2l0aCBhIGRpZmZlcmVudCBwYXJhbWV0ZXIgb3JkZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHQgLSBUaGUgaW50ZXJwb2xhdGlvbiB2YWx1ZS5cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0gZTEgLSBUaGUgZmlyc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtOb2RlIHwgbnVtYmVyfSBlMiAtIFRoZSBzZWNvbmQgcGFyYW1ldGVyLlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBtaXhFbGVtZW50ID0gKCB0LCBlMSwgZTIgKSA9PiBtaXgoIGUxLCBlMiwgdCApO1xuXG4vKipcbiAqIEFsaWFzIGZvciBgc21vb3Roc3RlcCgpYCB3aXRoIGEgZGlmZmVyZW50IHBhcmFtZXRlciBvcmRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0geCAtIFRoZSBzb3VyY2UgdmFsdWUgZm9yIGludGVycG9sYXRpb24uXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IGxvdyAtIFRoZSB2YWx1ZSBvZiB0aGUgbG93ZXIgZWRnZSBvZiB0aGUgSGVybWl0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Tm9kZSB8IG51bWJlcn0gaGlnaCAtIFRoZSB2YWx1ZSBvZiB0aGUgdXBwZXIgZWRnZSBvZiB0aGUgSGVybWl0ZSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgc21vb3Roc3RlcEVsZW1lbnQgPSAoIHgsIGxvdywgaGlnaCApID0+IHNtb290aHN0ZXAoIGxvdywgaGlnaCwgeCApO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFyYy10YW5nZW50IG9mIHRoZSBxdW90aWVudCBvZiBpdHMgcGFyYW1ldGVycy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBkZXByZWNhdGVkIHNpbmNlIHIxNzIuIFVzZSB7QGxpbmsgYXRhbn0gaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHkgLSBUaGUgeSBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge05vZGUgfCBudW1iZXJ9IHggLSBUaGUgeCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGF0YW4yID0gKCB5LCB4ICkgPT4geyAvLyBAZGVwcmVjYXRlZCwgcjE3MlxuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRTTDogXCJhdGFuMlwiIGlzIG92ZXJsb2FkZWQuIFVzZSBcImF0YW5cIiBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIGF0YW4oIHksIHggKTtcblxufTtcblxuLy8gR0xTTCBhbGlhcyBmdW5jdGlvblxuXG5leHBvcnQgY29uc3QgZmFjZWZvcndhcmQgPSBmYWNlRm9yd2FyZDtcbmV4cG9ydCBjb25zdCBpbnZlcnNlc3FydCA9IGludmVyc2VTcXJ0O1xuXG4vLyBNZXRob2QgY2hhaW5pbmdcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICdhbGwnLCBhbGwgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnYW55JywgYW55ICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2VxdWFscycsIGVxdWFscyApO1xuXG5hZGRNZXRob2RDaGFpbmluZyggJ3JhZGlhbnMnLCByYWRpYW5zICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2RlZ3JlZXMnLCBkZWdyZWVzICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2V4cCcsIGV4cCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdleHAyJywgZXhwMiApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdsb2cnLCBsb2cgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnbG9nMicsIGxvZzIgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnc3FydCcsIHNxcnQgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnaW52ZXJzZVNxcnQnLCBpbnZlcnNlU3FydCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdmbG9vcicsIGZsb29yICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2NlaWwnLCBjZWlsICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ25vcm1hbGl6ZScsIG5vcm1hbGl6ZSApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdmcmFjdCcsIGZyYWN0ICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3NpbicsIHNpbiApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdjb3MnLCBjb3MgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAndGFuJywgdGFuICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2FzaW4nLCBhc2luICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2Fjb3MnLCBhY29zICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2F0YW4nLCBhdGFuICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2FicycsIGFicyApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdzaWduJywgc2lnbiApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdsZW5ndGgnLCBsZW5ndGggKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnbGVuZ3RoU3EnLCBsZW5ndGhTcSApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICduZWdhdGUnLCBuZWdhdGUgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnb25lTWludXMnLCBvbmVNaW51cyApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdkRmR4JywgZEZkeCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdkRmR5JywgZEZkeSApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdyb3VuZCcsIHJvdW5kICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3JlY2lwcm9jYWwnLCByZWNpcHJvY2FsICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RydW5jJywgdHJ1bmMgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnZndpZHRoJywgZndpZHRoICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2F0YW4yJywgYXRhbjIgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnbWluJywgbWluICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ21heCcsIG1heCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdtb2QnLCBtb2QgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnc3RlcCcsIHN0ZXAgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAncmVmbGVjdCcsIHJlZmxlY3QgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnZGlzdGFuY2UnLCBkaXN0YW5jZSApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdkb3QnLCBkb3QgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnY3Jvc3MnLCBjcm9zcyApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdwb3cnLCBwb3cgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAncG93MicsIHBvdzIgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAncG93MycsIHBvdzMgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAncG93NCcsIHBvdzQgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAndHJhbnNmb3JtRGlyZWN0aW9uJywgdHJhbnNmb3JtRGlyZWN0aW9uICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ21peCcsIG1peEVsZW1lbnQgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnY2xhbXAnLCBjbGFtcCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdyZWZyYWN0JywgcmVmcmFjdCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdzbW9vdGhzdGVwJywgc21vb3Roc3RlcEVsZW1lbnQgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAnZmFjZUZvcndhcmQnLCBmYWNlRm9yd2FyZCApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdkaWZmZXJlbmNlJywgZGlmZmVyZW5jZSApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdzYXR1cmF0ZScsIHNhdHVyYXRlICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2NicnQnLCBjYnJ0ICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RyYW5zcG9zZScsIHRyYW5zcG9zZSApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICdyYW5kJywgcmFuZCApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnLi4vY29yZS9Qcm9wZXJ0eU5vZGUuanMnO1xuaW1wb3J0IHsgYWRkTWV0aG9kQ2hhaW5pbmcsIG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgbG9naWNhbCBgaWYvZWxzZWAgc3RhdGVtZW50LiBDYW4gYmUgdXNlZCBhcyBhbiBhbHRlcm5hdGl2ZVxuICogdG8gdGhlIGBJZigpYC9gRWxzZSgpYCBzeW50YXguXG4gKlxuICogVGhlIGNvcnJlc3BvbmRpbmcgVFNMIGBzZWxlY3QoKWAgbG9va3MgbGlrZSBzbzpcbiAqIGBgYGpzXG4gKiB2ZWxvY2l0eSA9IHBvc2l0aW9uLmdyZWF0ZXJUaGFuRXF1YWwoIGxpbWl0ICkuc2VsZWN0KCB2ZWxvY2l0eS5uZWdhdGUoKSwgdmVsb2NpdHkgKTtcbiAqIGBgYFxuICogVGhlIGBzZWxlY3QoKWAgbWV0aG9kIGlzIGNhbGxlZCBpbiBhIGNoYWluaW5nIGZhc2hpb24gb24gYSBjb25kaXRpb24uIFRoZSBwYXJhbWV0ZXIgbm9kZXMgb2YgYHNlbGVjdCgpYFxuICogZGV0ZXJtaW5lIHRoZSBvdXRjb21lIG9mIHRoZSBlbnRpcmUgc3RhdGVtZW50LlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIENvbmRpdGlvbmFsTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnQ29uZGl0aW9uYWxOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY29uZGl0aW9uYWwgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBjb25kTm9kZSAtIFRoZSBub2RlIHRoYXQgZGVmaW5lcyB0aGUgY29uZGl0aW9uLlxuXHQgKiBAcGFyYW0ge05vZGV9IGlmTm9kZSAtIFRoZSBub2RlIHRoYXQgaXMgZXZhbHVhdGUgd2hlbiB0aGUgY29uZGl0aW9uIGVuZHMgdXAgYHRydWVgLlxuXHQgKiBAcGFyYW0gez9Ob2RlfSBbZWxzZU5vZGU9bnVsbF0gLSBUaGUgbm9kZSB0aGF0IGlzIGV2YWx1YXRlIHdoZW4gdGhlIGNvbmRpdGlvbiBlbmRzIHVwIGBmYWxzZWAuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggY29uZE5vZGUsIGlmTm9kZSwgZWxzZU5vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHRoYXQgZGVmaW5lcyB0aGUgY29uZGl0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5jb25kTm9kZSA9IGNvbmROb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdGhhdCBpcyBldmFsdWF0ZSB3aGVuIHRoZSBjb25kaXRpb24gZW5kcyB1cCBgdHJ1ZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLmlmTm9kZSA9IGlmTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHRoYXQgaXMgZXZhbHVhdGUgd2hlbiB0aGUgY29uZGl0aW9uIGVuZHMgdXAgYGZhbHNlYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5lbHNlTm9kZSA9IGVsc2VOb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgb3ZlcndyaXR0ZW4gc2luY2UgdGhlIG5vZGUgdHlwZSBpcyBpbmZlcnJlZCBmcm9tIHRoZSBpZi9lbHNlXG5cdCAqIG5vZGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgaWZOb2RlLCBlbHNlTm9kZSB9ID0gYnVpbGRlci5nZXROb2RlUHJvcGVydGllcyggdGhpcyApO1xuXG5cdFx0aWYgKCBpZk5vZGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gZmFsbGJhY2sgc2V0dXBcblxuXHRcdFx0dGhpcy5zZXR1cCggYnVpbGRlciApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaWZUeXBlID0gaWZOb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRpZiAoIGVsc2VOb2RlICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBlbHNlVHlwZSA9IGVsc2VOb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRcdGlmICggYnVpbGRlci5nZXRUeXBlTGVuZ3RoKCBlbHNlVHlwZSApID4gYnVpbGRlci5nZXRUeXBlTGVuZ3RoKCBpZlR5cGUgKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gZWxzZVR5cGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpZlR5cGU7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgY29uZE5vZGUgPSB0aGlzLmNvbmROb2RlLmNhY2hlKCk7XG5cdFx0Y29uc3QgaWZOb2RlID0gdGhpcy5pZk5vZGUuY2FjaGUoKTtcblx0XHRjb25zdCBlbHNlTm9kZSA9IHRoaXMuZWxzZU5vZGUgPyB0aGlzLmVsc2VOb2RlLmNhY2hlKCkgOiBudWxsO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGN1cnJlbnROb2RlQmxvY2sgPSBidWlsZGVyLmNvbnRleHQubm9kZUJsb2NrO1xuXG5cdFx0YnVpbGRlci5nZXREYXRhRnJvbU5vZGUoIGlmTm9kZSApLnBhcmVudE5vZGVCbG9jayA9IGN1cnJlbnROb2RlQmxvY2s7XG5cdFx0aWYgKCBlbHNlTm9kZSAhPT0gbnVsbCApIGJ1aWxkZXIuZ2V0RGF0YUZyb21Ob2RlKCBlbHNlTm9kZSApLnBhcmVudE5vZGVCbG9jayA9IGN1cnJlbnROb2RlQmxvY2s7XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgcHJvcGVydGllcyA9IGJ1aWxkZXIuZ2V0Tm9kZVByb3BlcnRpZXMoIHRoaXMgKTtcblx0XHRwcm9wZXJ0aWVzLmNvbmROb2RlID0gY29uZE5vZGU7XG5cdFx0cHJvcGVydGllcy5pZk5vZGUgPSBpZk5vZGUuY29udGV4dCggeyBub2RlQmxvY2s6IGlmTm9kZSB9ICk7XG5cdFx0cHJvcGVydGllcy5lbHNlTm9kZSA9IGVsc2VOb2RlID8gZWxzZU5vZGUuY29udGV4dCggeyBub2RlQmxvY2s6IGVsc2VOb2RlIH0gKSA6IG51bGw7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyLCBvdXRwdXQgKSB7XG5cblx0XHRjb25zdCB0eXBlID0gdGhpcy5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXG5cdFx0Y29uc3Qgbm9kZURhdGEgPSBidWlsZGVyLmdldERhdGFGcm9tTm9kZSggdGhpcyApO1xuXG5cdFx0aWYgKCBub2RlRGF0YS5ub2RlUHJvcGVydHkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIG5vZGVEYXRhLm5vZGVQcm9wZXJ0eTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHsgY29uZE5vZGUsIGlmTm9kZSwgZWxzZU5vZGUgfSA9IGJ1aWxkZXIuZ2V0Tm9kZVByb3BlcnRpZXMoIHRoaXMgKTtcblxuXHRcdGNvbnN0IG5lZWRzT3V0cHV0ID0gb3V0cHV0ICE9PSAndm9pZCc7XG5cdFx0Y29uc3Qgbm9kZVByb3BlcnR5ID0gbmVlZHNPdXRwdXQgPyBwcm9wZXJ0eSggdHlwZSApLmJ1aWxkKCBidWlsZGVyICkgOiAnJztcblxuXHRcdG5vZGVEYXRhLm5vZGVQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblxuXHRcdGNvbnN0IG5vZGVTbmlwcGV0ID0gY29uZE5vZGUuYnVpbGQoIGJ1aWxkZXIsICdib29sJyApO1xuXG5cdFx0YnVpbGRlci5hZGRGbG93Q29kZSggYFxcbiR7IGJ1aWxkZXIudGFiIH1pZiAoICR7IG5vZGVTbmlwcGV0IH0gKSB7XFxuXFxuYCApLmFkZEZsb3dUYWIoKTtcblxuXHRcdGxldCBpZlNuaXBwZXQgPSBpZk5vZGUuYnVpbGQoIGJ1aWxkZXIsIHR5cGUgKTtcblxuXHRcdGlmICggaWZTbmlwcGV0ICkge1xuXG5cdFx0XHRpZiAoIG5lZWRzT3V0cHV0ICkge1xuXG5cdFx0XHRcdGlmU25pcHBldCA9IG5vZGVQcm9wZXJ0eSArICcgPSAnICsgaWZTbmlwcGV0ICsgJzsnO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmU25pcHBldCA9ICdyZXR1cm4gJyArIGlmU25pcHBldCArICc7JztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0YnVpbGRlci5yZW1vdmVGbG93VGFiKCkuYWRkRmxvd0NvZGUoIGJ1aWxkZXIudGFiICsgJ1xcdCcgKyBpZlNuaXBwZXQgKyAnXFxuXFxuJyArIGJ1aWxkZXIudGFiICsgJ30nICk7XG5cblx0XHRpZiAoIGVsc2VOb2RlICE9PSBudWxsICkge1xuXG5cdFx0XHRidWlsZGVyLmFkZEZsb3dDb2RlKCAnIGVsc2Uge1xcblxcbicgKS5hZGRGbG93VGFiKCk7XG5cblx0XHRcdGxldCBlbHNlU25pcHBldCA9IGVsc2VOb2RlLmJ1aWxkKCBidWlsZGVyLCB0eXBlICk7XG5cblx0XHRcdGlmICggZWxzZVNuaXBwZXQgKSB7XG5cblx0XHRcdFx0aWYgKCBuZWVkc091dHB1dCApIHtcblxuXHRcdFx0XHRcdGVsc2VTbmlwcGV0ID0gbm9kZVByb3BlcnR5ICsgJyA9ICcgKyBlbHNlU25pcHBldCArICc7JztcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZWxzZVNuaXBwZXQgPSAncmV0dXJuICcgKyBlbHNlU25pcHBldCArICc7JztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0YnVpbGRlci5yZW1vdmVGbG93VGFiKCkuYWRkRmxvd0NvZGUoIGJ1aWxkZXIudGFiICsgJ1xcdCcgKyBlbHNlU25pcHBldCArICdcXG5cXG4nICsgYnVpbGRlci50YWIgKyAnfVxcblxcbicgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJ1aWxkZXIuYWRkRmxvd0NvZGUoICdcXG5cXG4nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIG5vZGVQcm9wZXJ0eSwgdHlwZSwgb3V0cHV0ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbmRpdGlvbmFsTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgY29uZGl0aW9uYWwgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gY29uZE5vZGUgLSBUaGUgbm9kZSB0aGF0IGRlZmluZXMgdGhlIGNvbmRpdGlvbi5cbiAqIEBwYXJhbSB7Tm9kZX0gaWZOb2RlIC0gVGhlIG5vZGUgdGhhdCBpcyBldmFsdWF0ZSB3aGVuIHRoZSBjb25kaXRpb24gZW5kcyB1cCBgdHJ1ZWAuXG4gKiBAcGFyYW0gez9Ob2RlfSBbZWxzZU5vZGU9bnVsbF0gLSBUaGUgbm9kZSB0aGF0IGlzIGV2YWx1YXRlIHdoZW4gdGhlIGNvbmRpdGlvbiBlbmRzIHVwIGBmYWxzZWAuXG4gKiBAcmV0dXJucyB7Q29uZGl0aW9uYWxOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgc2VsZWN0ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIENvbmRpdGlvbmFsTm9kZSApO1xuXG5hZGRNZXRob2RDaGFpbmluZyggJ3NlbGVjdCcsIHNlbGVjdCApO1xuXG4vLyBEZXByZWNhdGVkXG5cbi8qKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSByMTY4LiBVc2Uge0BsaW5rIHNlbGVjdH0gaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gIHsuLi5hbnl9IHBhcmFtc1xuICogQHJldHVybnMge0NvbmRpdGlvbmFsTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbmQgPSAoIC4uLnBhcmFtcyApID0+IHsgLy8gQGRlcHJlY2F0ZWQsIHIxNjhcblxuXHRjb25zb2xlLndhcm4oICdUU0wuQ29uZGl0aW9uYWxOb2RlOiBjb25kKCkgaGFzIGJlZW4gcmVuYW1lZCB0byBzZWxlY3QoKS4nICk7XG5cdHJldHVybiBzZWxlY3QoIC4uLnBhcmFtcyApO1xuXG59O1xuXG5hZGRNZXRob2RDaGFpbmluZyggJ2NvbmQnLCBjb25kICk7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuL05vZGUuanMnO1xuaW1wb3J0IHsgYWRkTWV0aG9kQ2hhaW5pbmcsIG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcblxuLyoqXG4gKiBUaGlzIG5vZGUgY2FuIGJlIHVzZWQgYXMgYSBjb250ZXh0IG1hbmFnZW1lbnQgY29tcG9uZW50IGZvciBhbm90aGVyIG5vZGUuXG4gKiB7QGxpbmsgTm9kZUJ1aWxkZXJ9IHBlcmZvcm1zIGl0cyBub2RlIGJ1aWxkaW5nIHByb2Nlc3MgaW4gYSBzcGVjaWZpYyBjb250ZXh0IGFuZFxuICogdGhpcyBub2RlIGFsbG93cyB0aGUgbW9kaWZ5IHRoZSBjb250ZXh0LiBBIHR5cGljYWwgdXNlIGNhc2UgaXMgdG8gb3ZlcndyaXRlIGBnZXRVVigpYCBlLmcuOlxuICpcbiAqIGBgYGpzXG4gKm5vZGUuY29udGV4dCggeyBnZXRVVjogKCkgPT4gY3VzdG9tQ29vcmQgfSApO1xuICpgYGBcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIENvbnRleHROb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdDb250ZXh0Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNvbnRleHQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgd2hvc2UgY29udGV4dCBzaG91bGQgYmUgbW9kaWZpZWQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbdmFsdWU9e31dIC0gVGhlIG1vZGlmaWVkIGNvbnRleHQgZGF0YS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlLCB2YWx1ZSA9IHt9ICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNDb250ZXh0Tm9kZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB3aG9zZSBjb250ZXh0IHNob3VsZCBiZSBtb2RpZmllZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZSA9IG5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbW9kaWZpZWQgY29udGV4dCBkYXRhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKiBAZGVmYXVsdCB7fVxuXHRcdCAqL1xuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHRvIGVuc3VyZSBpdCByZXR1cm5zIHRoZSByZWZlcmVuY2UgdG8ge0BsaW5rIENvbnRleHROb2RlI25vZGV9LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtOb2RlfSBBIHJlZmVyZW5jZSB0byB7QGxpbmsgQ29udGV4dE5vZGUjbm9kZX0uXG5cdCAqL1xuXHRnZXRTY29wZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGUuZ2V0U2NvcGUoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHRvIGVuc3VyZSBpdCByZXR1cm5zIHRoZSB0eXBlIG9mIHtAbGluayBDb250ZXh0Tm9kZSNub2RlfS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdGFuYWx5emUoIGJ1aWxkZXIgKSB7XG5cblx0XHR0aGlzLm5vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBwcmV2aW91c0NvbnRleHQgPSBidWlsZGVyLmdldENvbnRleHQoKTtcblxuXHRcdGJ1aWxkZXIuc2V0Q29udGV4dCggeyAuLi5idWlsZGVyLmNvbnRleHQsIC4uLnRoaXMudmFsdWUgfSApO1xuXG5cdFx0Y29uc3Qgbm9kZSA9IHRoaXMubm9kZS5idWlsZCggYnVpbGRlciApO1xuXG5cdFx0YnVpbGRlci5zZXRDb250ZXh0KCBwcmV2aW91c0NvbnRleHQgKTtcblxuXHRcdHJldHVybiBub2RlO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3QgcHJldmlvdXNDb250ZXh0ID0gYnVpbGRlci5nZXRDb250ZXh0KCk7XG5cblx0XHRidWlsZGVyLnNldENvbnRleHQoIHsgLi4uYnVpbGRlci5jb250ZXh0LCAuLi50aGlzLnZhbHVlIH0gKTtcblxuXHRcdGNvbnN0IHNuaXBwZXQgPSB0aGlzLm5vZGUuYnVpbGQoIGJ1aWxkZXIsIG91dHB1dCApO1xuXG5cdFx0YnVpbGRlci5zZXRDb250ZXh0KCBwcmV2aW91c0NvbnRleHQgKTtcblxuXHRcdHJldHVybiBzbmlwcGV0O1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250ZXh0Tm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgY29udGV4dCBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgd2hvc2UgY29udGV4dCBzaG91bGQgYmUgbW9kaWZpZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gW3ZhbHVlPXt9XSAtIFRoZSBtb2RpZmllZCBjb250ZXh0IGRhdGEuXG4gKiBAcmV0dXJucyB7Q29udGV4dE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjb250ZXh0ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIENvbnRleHROb2RlICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBkZWZpbmluZyBhIGxhYmVsIGNvbnRleHQgdmFsdWUgZm9yIGEgZ2l2ZW4gbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHdob3NlIGNvbnRleHQgc2hvdWxkIGJlIG1vZGlmaWVkLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZS9sYWJlbCB0byBzZXQuXG4gKiBAcmV0dXJucyB7Q29udGV4dE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBsYWJlbCA9ICggbm9kZSwgbmFtZSApID0+IGNvbnRleHQoIG5vZGUsIHsgbGFiZWw6IG5hbWUgfSApO1xuXG5hZGRNZXRob2RDaGFpbmluZyggJ2NvbnRleHQnLCBjb250ZXh0ICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2xhYmVsJywgbGFiZWwgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4vTm9kZS5qcyc7XG5pbXBvcnQgeyBhZGRNZXRob2RDaGFpbmluZywgbm9kZVByb3h5IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgc2hhZGVyIHZhcmlhYmxlcyBhcyBub2Rlcy4gVmFyaWFibGVzIGFyZSBjcmVhdGVkIGZyb21cbiAqIGV4aXN0aW5nIG5vZGVzIGxpa2UgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZGVwdGggPSBzYW1wbGVEZXB0aCggdXZOb2RlICkudG9WYXIoICdkZXB0aCcgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFZhck5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1Zhck5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB2YXJpYWJsZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSBmb3Igd2hpY2ggYSB2YXJpYWJsZSBzaG91bGQgYmUgY3JlYXRlZC5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbbmFtZT1udWxsXSAtIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZWFkT25seT1mYWxzZV0gLSBUaGUgcmVhZC1vbmx5IGZsYWcuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZSwgbmFtZSA9IG51bGwsIHJlYWRPbmx5ID0gZmFsc2UgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgZm9yIHdoaWNoIGEgdmFyaWFibGUgc2hvdWxkIGJlIGNyZWF0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGUgPSBub2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlIGluIHRoZSBzaGFkZXIuIElmIG5vIG5hbWUgaXMgZGVmaW5lZCxcblx0XHQgKiB0aGUgbm9kZSBzeXN0ZW0gYXV0by1nZW5lcmF0ZXMgb25lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0XHQvKipcblx0XHQgKiBgVmFyTm9kZWAgc2V0cyB0aGlzIHByb3BlcnR5IHRvIGB0cnVlYCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2xvYmFsID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNWYXJOb2RlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqXG5cdFx0ICogVGhlIHJlYWQtb25seSBmbGFnLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLnJlYWRPbmx5ID0gcmVhZE9ubHk7XG5cblx0fVxuXG5cdGdldEhhc2goIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5uYW1lIHx8IHN1cGVyLmdldEhhc2goIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0Z2V0TWVtYmVyVHlwZSggYnVpbGRlciwgbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGUuZ2V0TWVtYmVyVHlwZSggYnVpbGRlciwgbmFtZSApO1xuXG5cdH1cblxuXHRnZXRFbGVtZW50VHlwZSggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGUuZ2V0RWxlbWVudFR5cGUoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBub2RlLCBuYW1lLCByZWFkT25seSB9ID0gdGhpcztcblx0XHRjb25zdCB7IHJlbmRlcmVyIH0gPSBidWlsZGVyO1xuXG5cdFx0Y29uc3QgaXNXZWJHUFVCYWNrZW5kID0gcmVuZGVyZXIuYmFja2VuZC5pc1dlYkdQVUJhY2tlbmQgPT09IHRydWU7XG5cblx0XHRsZXQgaXNEZXRlcm1pbmlzdGljID0gZmFsc2U7XG5cdFx0bGV0IHNob3VsZFRyZWF0QXNSZWFkT25seSA9IGZhbHNlO1xuXG5cdFx0aWYgKCByZWFkT25seSApIHtcblxuXHRcdFx0aXNEZXRlcm1pbmlzdGljID0gYnVpbGRlci5pc0RldGVybWluaXN0aWMoIG5vZGUgKTtcblxuXHRcdFx0c2hvdWxkVHJlYXRBc1JlYWRPbmx5ID0gaXNXZWJHUFVCYWNrZW5kID8gcmVhZE9ubHkgOiBpc0RldGVybWluaXN0aWM7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2ZWN0b3JUeXBlID0gYnVpbGRlci5nZXRWZWN0b3JUeXBlKCB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICkgKTtcblx0XHRjb25zdCBzbmlwcGV0ID0gbm9kZS5idWlsZCggYnVpbGRlciwgdmVjdG9yVHlwZSApO1xuXG5cdFx0Y29uc3Qgbm9kZVZhciA9IGJ1aWxkZXIuZ2V0VmFyRnJvbU5vZGUoIHRoaXMsIG5hbWUsIHZlY3RvclR5cGUsIHVuZGVmaW5lZCwgc2hvdWxkVHJlYXRBc1JlYWRPbmx5ICk7XG5cblx0XHRjb25zdCBwcm9wZXJ0eU5hbWUgPSBidWlsZGVyLmdldFByb3BlcnR5TmFtZSggbm9kZVZhciApO1xuXG5cdFx0bGV0IGRlY2xhcmF0aW9uUHJlZml4ID0gcHJvcGVydHlOYW1lO1xuXG5cdFx0aWYgKCBzaG91bGRUcmVhdEFzUmVhZE9ubHkgKSB7XG5cblx0XHRcdGlmICggaXNXZWJHUFVCYWNrZW5kICkge1xuXG5cdFx0XHRcdGRlY2xhcmF0aW9uUHJlZml4ID0gaXNEZXRlcm1pbmlzdGljXG5cdFx0XHRcdFx0PyBgY29uc3QgJHsgcHJvcGVydHlOYW1lIH1gXG5cdFx0XHRcdFx0OiBgbGV0ICR7IHByb3BlcnR5TmFtZSB9YDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCBjb3VudCA9IGJ1aWxkZXIuZ2V0QXJyYXlDb3VudCggbm9kZSApO1xuXG5cdFx0XHRcdGRlY2xhcmF0aW9uUHJlZml4ID0gYGNvbnN0ICR7IGJ1aWxkZXIuZ2V0VmFyKCBub2RlVmFyLnR5cGUsIHByb3BlcnR5TmFtZSwgY291bnQgKSB9YDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0YnVpbGRlci5hZGRMaW5lRmxvd0NvZGUoIGAkeyBkZWNsYXJhdGlvblByZWZpeCB9ID0gJHsgc25pcHBldCB9YCwgdGhpcyApO1xuXG5cdFx0cmV0dXJuIHByb3BlcnR5TmFtZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmFyTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgdmFyIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSBmb3Igd2hpY2ggYSB2YXJpYWJsZSBzaG91bGQgYmUgY3JlYXRlZC5cbiAqIEBwYXJhbSB7P3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSBpbiB0aGUgc2hhZGVyLlxuICogQHJldHVybnMge1Zhck5vZGV9XG4gKi9cbmNvbnN0IGNyZWF0ZVZhciA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBWYXJOb2RlICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHZhciBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgZm9yIHdoaWNoIGEgdmFyaWFibGUgc2hvdWxkIGJlIGNyZWF0ZWQuXG4gKiBAcGFyYW0gez9zdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdmFyaWFibGUgaW4gdGhlIHNoYWRlci5cbiAqIEByZXR1cm5zIHtWYXJOb2RlfVxuICovXG5leHBvcnQgY29uc3QgVmFyID0gKCBub2RlLCBuYW1lID0gbnVsbCApID0+IGNyZWF0ZVZhciggbm9kZSwgbmFtZSApLmFwcGVuZCgpO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBjb25zdCBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgZm9yIHdoaWNoIGEgY29uc3RhbnQgc2hvdWxkIGJlIGNyZWF0ZWQuXG4gKiBAcGFyYW0gez9zdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgY29uc3RhbnQgaW4gdGhlIHNoYWRlci5cbiAqIEByZXR1cm5zIHtWYXJOb2RlfVxuICovXG5leHBvcnQgY29uc3QgQ29uc3QgPSAoIG5vZGUsIG5hbWUgPSBudWxsICkgPT4gY3JlYXRlVmFyKCBub2RlLCBuYW1lLCB0cnVlICkuYXBwZW5kKCk7XG5cbi8vIE1ldGhvZCBjaGFpbmluZ1xuXG5hZGRNZXRob2RDaGFpbmluZyggJ3RvVmFyJywgVmFyICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ3RvQ29uc3QnLCBDb25zdCApO1xuXG4vLyBEZXByZWNhdGVkXG5cbi8qKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSByMTcwLiBVc2UgYFZhciggbm9kZSApYCBvciBgbm9kZS50b1ZhcigpYCBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7YW55fSBub2RlXG4gKiBAcmV0dXJucyB7VmFyTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRlbXAgPSAoIG5vZGUgKSA9PiB7IC8vIEBkZXByZWNhdGVkLCByMTcwXG5cblx0Y29uc29sZS53YXJuKCAnVFNMOiBcInRlbXAoIG5vZGUgKVwiIGlzIGRlcHJlY2F0ZWQuIFVzZSBcIlZhciggbm9kZSApXCIgb3IgXCJub2RlLnRvVmFyKClcIiBpbnN0ZWFkLicgKTtcblxuXHRyZXR1cm4gY3JlYXRlVmFyKCBub2RlICk7XG5cbn07XG5cbmFkZE1ldGhvZENoYWluaW5nKCAndGVtcCcsIHRlbXAgKTtcblxuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IE5vZGVTaGFkZXJTdGFnZSB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGFkZE1ldGhvZENoYWluaW5nLCBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQ29yZS5qcyc7XG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcHJlc2VudGluZyBzaGFkZXIgdmFyeWluZ3MgYXMgbm9kZXMuIFZhcnlpbmdzIGFyZSBjcmVhdGUgZnJvbVxuICogZXhpc3Rpbmcgbm9kZXMgbGlrZSB0aGUgZm9sbG93aW5nOlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwb3NpdGlvbkxvY2FsID0gcG9zaXRpb25HZW9tZXRyeS50b1ZhcnlpbmcoICd2UG9zaXRpb25Mb2NhbCcgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFZhcnlpbmdOb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdWYXJ5aW5nTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHZhcnlpbmcgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgZm9yIHdoaWNoIGEgdmFyeWluZyBzaG91bGQgYmUgY3JlYXRlZC5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHZhcnlpbmcgaW4gdGhlIHNoYWRlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlLCBuYW1lID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSBmb3Igd2hpY2ggYSB2YXJ5aW5nIHNob3VsZCBiZSBjcmVhdGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlID0gbm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSB2YXJ5aW5nIGluIHRoZSBzaGFkZXIuIElmIG5vIG5hbWUgaXMgZGVmaW5lZCxcblx0XHQgKiB0aGUgbm9kZSBzeXN0ZW0gYXV0by1nZW5lcmF0ZXMgb25lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzVmFyeWluZ05vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzbyBpdCBhbHdheXMgcmV0dXJucyBgdHJ1ZWAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBub2RlIGlzIGdsb2JhbCBvciBub3QuXG5cdCAqL1xuXHRpc0dsb2JhbCggLypidWlsZGVyKi8gKSB7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0Z2V0SGFzaCggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLm5hbWUgfHwgc3VwZXIuZ2V0SGFzaCggYnVpbGRlciApO1xuXG5cdH1cblxuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdC8vIFZhcnlpbmdOb2RlIGlzIGF1dG8gdHlwZVxuXG5cdFx0cmV0dXJuIHRoaXMubm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgcGVyZm9ybXMgdGhlIHNldHVwIG9mIGEgdmFyeWluZyBub2RlIHdpdGggdGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtOb2RlVmFyeWluZ30gVGhlIG5vZGUgdmFyeWluZyBmcm9tIHRoZSBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cFZhcnlpbmcoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBwcm9wZXJ0aWVzID0gYnVpbGRlci5nZXROb2RlUHJvcGVydGllcyggdGhpcyApO1xuXG5cdFx0bGV0IHZhcnlpbmcgPSBwcm9wZXJ0aWVzLnZhcnlpbmc7XG5cblx0XHRpZiAoIHZhcnlpbmcgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgbmFtZSA9IHRoaXMubmFtZTtcblx0XHRcdGNvbnN0IHR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRcdHByb3BlcnRpZXMudmFyeWluZyA9IHZhcnlpbmcgPSBidWlsZGVyLmdldFZhcnlpbmdGcm9tTm9kZSggdGhpcywgbmFtZSwgdHlwZSApO1xuXHRcdFx0cHJvcGVydGllcy5ub2RlID0gdGhpcy5ub2RlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdGhpcyBwcm9wZXJ0eSBjYW4gYmUgdXNlZCB0byBjaGVjayBpZiB0aGUgdmFyeWluZyBjYW4gYmUgb3B0aW1pemVkIGZvciBhIHZhcmlhYmxlXG5cdFx0dmFyeWluZy5uZWVkc0ludGVycG9sYXRpb24gfHwgKCB2YXJ5aW5nLm5lZWRzSW50ZXJwb2xhdGlvbiA9ICggYnVpbGRlci5zaGFkZXJTdGFnZSA9PT0gJ2ZyYWdtZW50JyApICk7XG5cblx0XHRyZXR1cm4gdmFyeWluZztcblxuXHR9XG5cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHR0aGlzLnNldHVwVmFyeWluZyggYnVpbGRlciApO1xuXG5cdH1cblxuXHRhbmFseXplKCBidWlsZGVyICkge1xuXG5cdFx0dGhpcy5zZXR1cFZhcnlpbmcoIGJ1aWxkZXIgKTtcblxuXHRcdHJldHVybiB0aGlzLm5vZGUuYW5hbHl6ZSggYnVpbGRlciApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHByb3BlcnRpZXMgPSBidWlsZGVyLmdldE5vZGVQcm9wZXJ0aWVzKCB0aGlzICk7XG5cdFx0Y29uc3QgdmFyeWluZyA9IHRoaXMuc2V0dXBWYXJ5aW5nKCBidWlsZGVyICk7XG5cblx0XHRjb25zdCBuZWVkc1JlYXNzaWduID0gYnVpbGRlci5zaGFkZXJTdGFnZSA9PT0gJ2ZyYWdtZW50JyAmJiBwcm9wZXJ0aWVzLnJlYXNzaWduUG9zaXRpb24gPT09IHRydWUgJiYgYnVpbGRlci5jb250ZXh0Lm5lZWRzUG9zaXRpb25SZWFzc2lnbjtcblxuXHRcdGlmICggcHJvcGVydGllcy5wcm9wZXJ0eU5hbWUgPT09IHVuZGVmaW5lZCB8fCBuZWVkc1JlYXNzaWduICkge1xuXG5cdFx0XHRjb25zdCB0eXBlID0gdGhpcy5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXHRcdFx0Y29uc3QgcHJvcGVydHlOYW1lID0gYnVpbGRlci5nZXRQcm9wZXJ0eU5hbWUoIHZhcnlpbmcsIE5vZGVTaGFkZXJTdGFnZS5WRVJURVggKTtcblxuXHRcdFx0Ly8gZm9yY2Ugbm9kZSBydW4gaW4gdmVydGV4IHN0YWdlXG5cdFx0XHRidWlsZGVyLmZsb3dOb2RlRnJvbVNoYWRlclN0YWdlKCBOb2RlU2hhZGVyU3RhZ2UuVkVSVEVYLCB0aGlzLm5vZGUsIHR5cGUsIHByb3BlcnR5TmFtZSApO1xuXG5cdFx0XHRwcm9wZXJ0aWVzLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcblxuXHRcdFx0aWYgKCBuZWVkc1JlYXNzaWduICkge1xuXG5cdFx0XHRcdC8vIG9uY2UgcmVhc3NpZ24gdmFyeWluZyBpbiBmcmFnbWVudCBzdGFnZVxuXHRcdFx0XHRwcm9wZXJ0aWVzLnJlYXNzaWduUG9zaXRpb24gPSBmYWxzZTtcblxuXHRcdFx0fSBlbHNlIGlmICggcHJvcGVydGllcy5yZWFzc2lnblBvc2l0aW9uID09PSB1bmRlZmluZWQgJiYgYnVpbGRlci5jb250ZXh0LmlzUG9zaXRpb25Ob2RlSW5wdXQgKSB7XG5cblx0XHRcdFx0cHJvcGVydGllcy5yZWFzc2lnblBvc2l0aW9uID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJ1aWxkZXIuZ2V0UHJvcGVydHlOYW1lKCB2YXJ5aW5nICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZhcnlpbmdOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSB2YXJ5aW5nIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSBmb3Igd2hpY2ggYSB2YXJ5aW5nIHNob3VsZCBiZSBjcmVhdGVkLlxuICogQHBhcmFtIHs/c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHZhcnlpbmcgaW4gdGhlIHNoYWRlci5cbiAqIEByZXR1cm5zIHtWYXJ5aW5nTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHZhcnlpbmcgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggVmFyeWluZ05vZGUgKTtcblxuLyoqXG4gKiBDb21wdXRlcyBhIG5vZGUgaW4gdGhlIHZlcnRleCBzdGFnZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHdoaWNoIHNob3VsZCBiZSBleGVjdXRlZCBpbiB0aGUgdmVydGV4IHN0YWdlLlxuICogQHJldHVybnMge1ZhcnlpbmdOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdmVydGV4U3RhZ2UgPSAoIG5vZGUgKSA9PiB2YXJ5aW5nKCBub2RlICk7XG5cbmFkZE1ldGhvZENoYWluaW5nKCAndG9WYXJ5aW5nJywgdmFyeWluZyApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b1ZlcnRleFN0YWdlJywgdmVydGV4U3RhZ2UgKTtcblxuLy8gRGVwcmVjYXRlZFxuXG5hZGRNZXRob2RDaGFpbmluZyggJ3ZhcnlpbmcnLCAoIC4uLnBhcmFtcyApID0+IHsgLy8gQGRlcHJlY2F0ZWQsIHIxNzNcblxuXHRjb25zb2xlLndhcm4oICdUU0wuVmFyeWluZ05vZGU6IC52YXJ5aW5nKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAudG9WYXJ5aW5nKCkuJyApO1xuXHRyZXR1cm4gdmFyeWluZyggLi4ucGFyYW1zICk7XG5cbn0gKTtcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICd2ZXJ0ZXhTdGFnZScsICggLi4ucGFyYW1zICkgPT4geyAvLyBAZGVwcmVjYXRlZCwgcjE3M1xuXG5cdGNvbnNvbGUud2FybiggJ1RTTC5WYXJ5aW5nTm9kZTogLnZlcnRleFN0YWdlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAudG9WZXJ0ZXhTdGFnZSgpLicgKTtcblx0cmV0dXJuIHZhcnlpbmcoIC4uLnBhcmFtcyApO1xuXG59ICk7XG4iLCJpbXBvcnQgeyBtaXggfSBmcm9tICcuLi9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IEZuIH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBjb2xvciB2YWx1ZSBmcm9tIHNSR0IgdG8gbGluZWFyLXNSR0IgY29sb3Igc3BhY2UuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IGNvbG9yIC0gVGhlIHNSR0IgY29sb3IuXG4gKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgbGluZWFyLXNSR0IgY29sb3IuXG4gKi9cbmV4cG9ydCBjb25zdCBzUkdCVHJhbnNmZXJFT1RGID0gLypAX19QVVJFX18qLyBGbiggKCBbIGNvbG9yIF0gKSA9PiB7XG5cblx0Y29uc3QgYSA9IGNvbG9yLm11bCggMC45NDc4NjcyOTg2ICkuYWRkKCAwLjA1MjEzMjcwMTQgKS5wb3coIDIuNCApO1xuXHRjb25zdCBiID0gY29sb3IubXVsKCAwLjA3NzM5OTM4MDggKTtcblx0Y29uc3QgZmFjdG9yID0gY29sb3IubGVzc1RoYW5FcXVhbCggMC4wNDA0NSApO1xuXG5cdGNvbnN0IHJnYlJlc3VsdCA9IG1peCggYSwgYiwgZmFjdG9yICk7XG5cblx0cmV0dXJuIHJnYlJlc3VsdDtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnc1JHQlRyYW5zZmVyRU9URicsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnY29sb3InLCB0eXBlOiAndmVjMycgfVxuXHRdXG59ICk7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGNvbG9yIHZhbHVlIGZyb20gbGluZWFyLXNSR0IgdG8gc1JHQiBjb2xvciBzcGFjZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gY29sb3IgLSBUaGUgbGluZWFyLXNSR0IgY29sb3IuXG4gKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgc1JHQiBjb2xvci5cbiAqL1xuZXhwb3J0IGNvbnN0IHNSR0JUcmFuc2Zlck9FVEYgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgY29sb3IgXSApID0+IHtcblxuXHRjb25zdCBhID0gY29sb3IucG93KCAwLjQxNjY2ICkubXVsKCAxLjA1NSApLnN1YiggMC4wNTUgKTtcblx0Y29uc3QgYiA9IGNvbG9yLm11bCggMTIuOTIgKTtcblx0Y29uc3QgZmFjdG9yID0gY29sb3IubGVzc1RoYW5FcXVhbCggMC4wMDMxMzA4ICk7XG5cblx0Y29uc3QgcmdiUmVzdWx0ID0gbWl4KCBhLCBiLCBmYWN0b3IgKTtcblxuXHRyZXR1cm4gcmdiUmVzdWx0O1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdzUkdCVHJhbnNmZXJPRVRGJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdjb2xvcicsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcbiIsImltcG9ydCBUZW1wTm9kZSBmcm9tICcuLi9jb3JlL1RlbXBOb2RlLmpzJztcbmltcG9ydCB7IGFkZE1ldGhvZENoYWluaW5nLCBtYXQzLCBub2RlT2JqZWN0LCB2ZWM0IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuXG5pbXBvcnQgeyBTUkdCVHJhbnNmZXIgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgQ29sb3JNYW5hZ2VtZW50IH0gZnJvbSAnLi4vLi4vbWF0aC9Db2xvck1hbmFnZW1lbnQuanMnO1xuaW1wb3J0IHsgc1JHQlRyYW5zZmVyRU9URiwgc1JHQlRyYW5zZmVyT0VURiB9IGZyb20gJy4vQ29sb3JTcGFjZUZ1bmN0aW9ucy5qcyc7XG5pbXBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXgzLmpzJztcblxuY29uc3QgV09SS0lOR19DT0xPUl9TUEFDRSA9ICdXb3JraW5nQ29sb3JTcGFjZSc7XG5jb25zdCBPVVRQVVRfQ09MT1JfU1BBQ0UgPSAnT3V0cHV0Q29sb3JTcGFjZSc7XG5cbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYSBjb2xvciBzcGFjZSBjb252ZXJzaW9uLiBNZWFuaW5nIGl0IGNvbnZlcnRzXG4gKiBhIGNvbG9yIHZhbHVlIGZyb20gYSBzb3VyY2UgdG8gYSB0YXJnZXQgY29sb3Igc3BhY2UuXG4gKlxuICogQGF1Z21lbnRzIFRlbXBOb2RlXG4gKi9cbmNsYXNzIENvbG9yU3BhY2VOb2RlIGV4dGVuZHMgVGVtcE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnQ29sb3JTcGFjZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBjb2xvciBzcGFjZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IGNvbG9yTm9kZSAtIFJlcHJlc2VudHMgdGhlIGNvbG9yIHRvIGNvbnZlcnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgLSBUaGUgc291cmNlIGNvbG9yIHNwYWNlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0IC0gVGhlIHRhcmdldCBjb2xvciBzcGFjZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjb2xvck5vZGUsIHNvdXJjZSwgdGFyZ2V0ICkge1xuXG5cdFx0c3VwZXIoICd2ZWM0JyApO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgY29sb3IgdG8gY29udmVydC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3JOb2RlID0gY29sb3JOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNvdXJjZSBjb2xvciBzcGFjZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGFyZ2V0IGNvbG9yIHNwYWNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnRhcmdldCA9IHRhcmdldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHJlc29sdmVzIHRoZSBjb25zdGFudHMgYFdPUktJTkdfQ09MT1JfU1BBQ0VgIGFuZFxuXHQgKiBgT1VUUFVUX0NPTE9SX1NQQUNFYCBiYXNlZCBvbiB0aGUgY3VycmVudCBjb25maWd1cmF0aW9uIG9mIHRoZVxuXHQgKiBjb2xvciBtYW5hZ2VtZW50IGFuZCByZW5kZXJlci5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yU3BhY2UgLSBUaGUgY29sb3Igc3BhY2UgdG8gcmVzb2x2ZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgcmVzb2x2ZWQgY29sb3Igc3BhY2UuXG5cdCAqL1xuXHRyZXNvbHZlQ29sb3JTcGFjZSggYnVpbGRlciwgY29sb3JTcGFjZSApIHtcblxuXHRcdGlmICggY29sb3JTcGFjZSA9PT0gV09SS0lOR19DT0xPUl9TUEFDRSApIHtcblxuXHRcdFx0cmV0dXJuIENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZTtcblxuXHRcdH0gZWxzZSBpZiAoIGNvbG9yU3BhY2UgPT09IE9VVFBVVF9DT0xPUl9TUEFDRSApIHtcblxuXHRcdFx0cmV0dXJuIGJ1aWxkZXIuY29udGV4dC5vdXRwdXRDb2xvclNwYWNlIHx8IGJ1aWxkZXIucmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb2xvclNwYWNlO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgY29sb3JOb2RlIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3Qgc291cmNlID0gdGhpcy5yZXNvbHZlQ29sb3JTcGFjZSggYnVpbGRlciwgdGhpcy5zb3VyY2UgKTtcblx0XHRjb25zdCB0YXJnZXQgPSB0aGlzLnJlc29sdmVDb2xvclNwYWNlKCBidWlsZGVyLCB0aGlzLnRhcmdldCApO1xuXG5cdFx0bGV0IG91dHB1dE5vZGUgPSBjb2xvck5vZGU7XG5cblx0XHRpZiAoIENvbG9yTWFuYWdlbWVudC5lbmFibGVkID09PSBmYWxzZSB8fCBzb3VyY2UgPT09IHRhcmdldCB8fCAhIHNvdXJjZSB8fCAhIHRhcmdldCApIHtcblxuXHRcdFx0cmV0dXJuIG91dHB1dE5vZGU7XG5cblx0XHR9XG5cblx0XHRpZiAoIENvbG9yTWFuYWdlbWVudC5nZXRUcmFuc2Zlciggc291cmNlICkgPT09IFNSR0JUcmFuc2ZlciApIHtcblxuXHRcdFx0b3V0cHV0Tm9kZSA9IHZlYzQoIHNSR0JUcmFuc2ZlckVPVEYoIG91dHB1dE5vZGUucmdiICksIG91dHB1dE5vZGUuYSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBDb2xvck1hbmFnZW1lbnQuZ2V0UHJpbWFyaWVzKCBzb3VyY2UgKSAhPT0gQ29sb3JNYW5hZ2VtZW50LmdldFByaW1hcmllcyggdGFyZ2V0ICkgKSB7XG5cblx0XHRcdG91dHB1dE5vZGUgPSB2ZWM0KFxuXHRcdFx0XHRtYXQzKCBDb2xvck1hbmFnZW1lbnQuX2dldE1hdHJpeCggbmV3IE1hdHJpeDMoKSwgc291cmNlLCB0YXJnZXQgKSApLm11bCggb3V0cHV0Tm9kZS5yZ2IgKSxcblx0XHRcdFx0b3V0cHV0Tm9kZS5hXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIHRhcmdldCApID09PSBTUkdCVHJhbnNmZXIgKSB7XG5cblx0XHRcdG91dHB1dE5vZGUgPSB2ZWM0KCBzUkdCVHJhbnNmZXJPRVRGKCBvdXRwdXROb2RlLnJnYiApLCBvdXRwdXROb2RlLmEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXROb2RlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2xvclNwYWNlTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNvbnZlcnRpbmcgYSBnaXZlbiBjb2xvciBub2RlIHRvIHRoZSBjdXJyZW50IG91dHB1dCBjb2xvciBzcGFjZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFJlcHJlc2VudHMgdGhlIG5vZGUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtDb2xvclNwYWNlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRvT3V0cHV0Q29sb3JTcGFjZSA9ICggbm9kZSApID0+IG5vZGVPYmplY3QoIG5ldyBDb2xvclNwYWNlTm9kZSggbm9kZU9iamVjdCggbm9kZSApLCBXT1JLSU5HX0NPTE9SX1NQQUNFLCBPVVRQVVRfQ09MT1JfU1BBQ0UgKSApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY29udmVydGluZyBhIGdpdmVuIGNvbG9yIG5vZGUgdG8gdGhlIGN1cnJlbnQgd29ya2luZyBjb2xvciBzcGFjZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFJlcHJlc2VudHMgdGhlIG5vZGUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtDb2xvclNwYWNlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRvV29ya2luZ0NvbG9yU3BhY2UgPSAoIG5vZGUgKSA9PiBub2RlT2JqZWN0KCBuZXcgQ29sb3JTcGFjZU5vZGUoIG5vZGVPYmplY3QoIG5vZGUgKSwgT1VUUFVUX0NPTE9SX1NQQUNFLCBXT1JLSU5HX0NPTE9SX1NQQUNFICkgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNvbnZlcnRpbmcgYSBnaXZlbiBjb2xvciBub2RlIGZyb20gdGhlIGN1cnJlbnQgd29ya2luZyBjb2xvciBzcGFjZSB0byB0aGUgZ2l2ZW4gY29sb3Igc3BhY2UuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBSZXByZXNlbnRzIHRoZSBub2RlIHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3JTcGFjZSAtIFRoZSB0YXJnZXQgY29sb3Igc3BhY2UuXG4gKiBAcmV0dXJucyB7Q29sb3JTcGFjZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCB3b3JraW5nVG9Db2xvclNwYWNlID0gKCBub2RlLCBjb2xvclNwYWNlICkgPT4gbm9kZU9iamVjdCggbmV3IENvbG9yU3BhY2VOb2RlKCBub2RlT2JqZWN0KCBub2RlICksIFdPUktJTkdfQ09MT1JfU1BBQ0UsIGNvbG9yU3BhY2UgKSApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY29udmVydGluZyBhIGdpdmVuIGNvbG9yIG5vZGUgZnJvbSB0aGUgZ2l2ZW4gY29sb3Igc3BhY2UgdG8gdGhlIGN1cnJlbnQgd29ya2luZyBjb2xvciBzcGFjZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFJlcHJlc2VudHMgdGhlIG5vZGUgdG8gY29udmVydC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvclNwYWNlIC0gVGhlIHNvdXJjZSBjb2xvciBzcGFjZS5cbiAqIEByZXR1cm5zIHtDb2xvclNwYWNlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbG9yU3BhY2VUb1dvcmtpbmcgPSAoIG5vZGUsIGNvbG9yU3BhY2UgKSA9PiBub2RlT2JqZWN0KCBuZXcgQ29sb3JTcGFjZU5vZGUoIG5vZGVPYmplY3QoIG5vZGUgKSwgY29sb3JTcGFjZSwgV09SS0lOR19DT0xPUl9TUEFDRSApICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjb252ZXJ0aW5nIGEgZ2l2ZW4gY29sb3Igbm9kZSBmcm9tIG9uZSBjb2xvciBzcGFjZSB0byBhbm90aGVyIG9uZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFJlcHJlc2VudHMgdGhlIG5vZGUgdG8gY29udmVydC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2VDb2xvclNwYWNlIC0gVGhlIHNvdXJjZSBjb2xvciBzcGFjZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRDb2xvclNwYWNlIC0gVGhlIHRhcmdldCBjb2xvciBzcGFjZS5cbiAqIEByZXR1cm5zIHtDb2xvclNwYWNlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnZlcnRDb2xvclNwYWNlID0gKCBub2RlLCBzb3VyY2VDb2xvclNwYWNlLCB0YXJnZXRDb2xvclNwYWNlICkgPT4gbm9kZU9iamVjdCggbmV3IENvbG9yU3BhY2VOb2RlKCBub2RlT2JqZWN0KCBub2RlICksIHNvdXJjZUNvbG9yU3BhY2UsIHRhcmdldENvbG9yU3BhY2UgKSApO1xuXG5hZGRNZXRob2RDaGFpbmluZyggJ3RvT3V0cHV0Q29sb3JTcGFjZScsIHRvT3V0cHV0Q29sb3JTcGFjZSApO1xuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b1dvcmtpbmdDb2xvclNwYWNlJywgdG9Xb3JraW5nQ29sb3JTcGFjZSApO1xuXG5hZGRNZXRob2RDaGFpbmluZyggJ3dvcmtpbmdUb0NvbG9yU3BhY2UnLCB3b3JraW5nVG9Db2xvclNwYWNlICk7XG5hZGRNZXRob2RDaGFpbmluZyggJ2NvbG9yU3BhY2VUb1dvcmtpbmcnLCBjb2xvclNwYWNlVG9Xb3JraW5nICk7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuaW1wb3J0IHsgTm9kZVVwZGF0ZVR5cGUgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyB1bmlmb3JtIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuaW1wb3J0IEFycmF5RWxlbWVudE5vZGUgZnJvbSAnLi4vdXRpbHMvQXJyYXlFbGVtZW50Tm9kZS5qcyc7XG5cbi8vIFRPRE86IEF2b2lkIGR1cGxpY2F0ZWQgY29kZSBhbmQgdWVzIG9ubHkgUmVmZXJlbmNlQmFzZU5vZGUgb3IgUmVmZXJlbmNlTm9kZVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgb25seSByZWxldmFudCBpZiB0aGUgcmVmZXJlbmNlZCBwcm9wZXJ0eSBpcyBhcnJheS1saWtlLlxuICogSW4gdGhpcyBjYXNlLCBgUmVmZXJlbmNlRWxlbWVudE5vZGVgIGFsbG93cyB0byByZWZlciB0byBhIHNwZWNpZmljXG4gKiBlbGVtZW50IGluc2lkZSB0aGUgZGF0YSBzdHJ1Y3R1cmUgdmlhIGFuIGluZGV4LlxuICpcbiAqIEBhdWdtZW50cyBBcnJheUVsZW1lbnROb2RlXG4gKi9cbmNsYXNzIFJlZmVyZW5jZUVsZW1lbnROb2RlIGV4dGVuZHMgQXJyYXlFbGVtZW50Tm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdSZWZlcmVuY2VFbGVtZW50Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlZmVyZW5jZSBlbGVtZW50IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVmZXJlbmNlQmFzZU5vZGV9IHJlZmVyZW5jZU5vZGUgLSBUaGUgcmVmZXJlbmNlIG5vZGUuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gaW5kZXhOb2RlIC0gVGhlIGluZGV4IG5vZGUgdGhhdCBkZWZpbmVzIHRoZSBlbGVtZW50IGFjY2Vzcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByZWZlcmVuY2VOb2RlLCBpbmRleE5vZGUgKSB7XG5cblx0XHRzdXBlciggcmVmZXJlbmNlTm9kZSwgaW5kZXhOb2RlICk7XG5cblx0XHQvKipcblx0XHQgKiBTaW1pbGFyIHRvIHtAbGluayBSZWZlcmVuY2VCYXNlTm9kZSNyZWZlcmVuY2V9LCBhbiBhZGRpdGlvbmFsXG5cdFx0ICogcHJvcGVydHkgcmVmZXJlbmNlcyB0byB0aGUgY3VycmVudCBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9SZWZlcmVuY2VCYXNlTm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5yZWZlcmVuY2VOb2RlID0gcmVmZXJlbmNlTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNSZWZlcmVuY2VFbGVtZW50Tm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzaW5jZSB0aGUgbm9kZSB0eXBlIGlzIGluZmVycmVkIGZyb21cblx0ICogdGhlIHVuaWZvcm0gdHlwZSBvZiB0aGUgcmVmZXJlbmNlIG5vZGUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucmVmZXJlbmNlTm9kZS51bmlmb3JtVHlwZTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBzbmlwcGV0ID0gc3VwZXIuZ2VuZXJhdGUoIGJ1aWxkZXIgKTtcblx0XHRjb25zdCBhcnJheVR5cGUgPSB0aGlzLnJlZmVyZW5jZU5vZGUuZ2V0Tm9kZVR5cGUoKTtcblx0XHRjb25zdCBlbGVtZW50VHlwZSA9IHRoaXMuZ2V0Tm9kZVR5cGUoKTtcblxuXHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggc25pcHBldCwgYXJyYXlUeXBlLCBlbGVtZW50VHlwZSApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIG5vZGVzIHdoaWNoIGVzdGFibGlzaGVzIGEgcmVmZXJlbmNlIHRvIGEgcHJvcGVydHkgb2YgYW5vdGhlciBvYmplY3QuXG4gKiBJbiB0aGlzIHdheSwgdGhlIHZhbHVlIG9mIHRoZSBub2RlIGlzIGF1dG9tYXRpY2FsbHkgbGlua2VkIHRvIHRoZSB2YWx1ZSBvZlxuICogcmVmZXJlbmNlZCBvYmplY3QuIFJlZmVyZW5jZSBub2RlcyBpbnRlcm5hbGx5IHJlcHJlc2VudCB0aGUgbGlua2VkIHZhbHVlXG4gKiBhcyBhIHVuaWZvcm0uXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgUmVmZXJlbmNlQmFzZU5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1JlZmVyZW5jZUJhc2VOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcmVmZXJlbmNlIGJhc2Ugbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRoZSBub2RlIHJlZmVycyB0by5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHVuaWZvcm1UeXBlIC0gVGhlIHVuaWZvcm0gdHlwZSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgcHJvcGVydHkgdmFsdWUuXG5cdCAqIEBwYXJhbSB7P09iamVjdH0gW29iamVjdD1udWxsXSAtIFRoZSBvYmplY3QgdGhlIHByb3BlcnR5IGJlbG9uZ3MgdG8uXG5cdCAqIEBwYXJhbSB7P251bWJlcn0gW2NvdW50PW51bGxdIC0gV2hlbiB0aGUgbGlua2VkIHByb3BlcnR5IGlzIGFuIGFycmF5LWxpa2UsIHRoaXMgcGFyYW1ldGVyIGRlZmluZXMgaXRzIGxlbmd0aC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwcm9wZXJ0eSwgdW5pZm9ybVR5cGUsIG9iamVjdCA9IG51bGwsIGNvdW50ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdGhlIG5vZGUgcmVmZXJzIHRvLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdW5pZm9ybSB0eXBlIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBwcm9wZXJ0eSB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy51bmlmb3JtVHlwZSA9IHVuaWZvcm1UeXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG9iamVjdCB0aGUgcHJvcGVydHkgYmVsb25ncyB0by5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gdGhlIGxpbmtlZCBwcm9wZXJ0eSBpcyBhbiBhcnJheSwgdGhpcyBwYXJhbWV0ZXIgZGVmaW5lcyBpdHMgbGVuZ3RoLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9udW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwcm9wZXJ0eSBuYW1lIG1pZ2h0IGhhdmUgZG90cyBzbyBuZXN0ZWQgcHJvcGVydGllcyBjYW4gYmUgcmVmZXJyZWQuXG5cdFx0ICogVGhlIGhpZXJhcmNoeSBvZiB0aGUgbmFtZXMgaXMgc3RvcmVkIGluc2lkZSB0aGlzIGFycmF5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PHN0cmluZz59XG5cdFx0ICovXG5cdFx0dGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydHkuc3BsaXQoICcuJyApO1xuXG5cdFx0LyoqXG5cdFx0ICogUG9pbnRzIHRvIHRoZSBjdXJyZW50IHJlZmVycmVkIG9iamVjdC4gVGhpcyBwcm9wZXJ0eSBleGlzdHMgbmV4dCB0byB7QGxpbmsgUmVmZXJlbmNlTm9kZSNvYmplY3R9XG5cdFx0ICogc2luY2UgdGhlIGZpbmFsIHJlZmVyZW5jZSBtaWdodCBiZSB1cGRhdGVkIGZyb20gY2FsbGluZyBjb2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9PYmplY3R9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucmVmZXJlbmNlID0gb2JqZWN0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVuaWZvcm0gbm9kZSB0aGF0IGhvbGRzIHRoZSB2YWx1ZSBvZiB0aGUgcmVmZXJlbmNlIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdW5pZm9ybSBncm91cCBvZiB0aGUgaW50ZXJuYWwgdW5pZm9ybS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtVbmlmb3JtR3JvdXBOb2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmdyb3VwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJ3cml0dGVuIHNpbmNlIHJlZmVyZW5jZSBub2RlcyBhcmUgdXBkYXRlZCBwZXIgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnb2JqZWN0J1xuXHRcdCAqL1xuXHRcdHRoaXMudXBkYXRlVHlwZSA9IE5vZGVVcGRhdGVUeXBlLk9CSkVDVDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHVuaWZvcm0gZ3JvdXAgZm9yIHRoaXMgcmVmZXJlbmNlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VW5pZm9ybUdyb3VwTm9kZX0gZ3JvdXAgLSBUaGUgdW5pZm9ybSBncm91cCB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1JlZmVyZW5jZUJhc2VOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRzZXRHcm91cCggZ3JvdXAgKSB7XG5cblx0XHR0aGlzLmdyb3VwID0gZ3JvdXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZW4gdGhlIHJlZmVycmVkIHByb3BlcnR5IGlzIGFycmF5LWxpa2UsIHRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkXG5cdCAqIHRvIGFjY2VzcyBlbGVtZW50cyB2aWEgYW4gaW5kZXggbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtJbmRleE5vZGV9IGluZGV4Tm9kZSAtIGluZGV4Tm9kZS5cblx0ICogQHJldHVybiB7UmVmZXJlbmNlRWxlbWVudE5vZGV9IEEgcmVmZXJlbmNlIHRvIGFuIGVsZW1lbnQuXG5cdCAqL1xuXHRlbGVtZW50KCBpbmRleE5vZGUgKSB7XG5cblx0XHRyZXR1cm4gbm9kZU9iamVjdCggbmV3IFJlZmVyZW5jZUVsZW1lbnROb2RlKCB0aGlzLCBub2RlT2JqZWN0KCBpbmRleE5vZGUgKSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBub2RlIHR5cGUgd2hpY2ggYXV0b21hdGljYWxseSBkZWZpbmVzIHRoZSBpbnRlcm5hbFxuXHQgKiB1bmlmb3JtIHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1bmlmb3JtVHlwZSAtIFRoZSB0eXBlIHRvIHNldC5cblx0ICovXG5cdHNldE5vZGVUeXBlKCB1bmlmb3JtVHlwZSApIHtcblxuXHRcdGNvbnN0IG5vZGUgPSB1bmlmb3JtKCBudWxsLCB1bmlmb3JtVHlwZSApLmdldFNlbGYoKTtcblxuXHRcdGlmICggdGhpcy5ncm91cCAhPT0gbnVsbCApIHtcblxuXHRcdFx0bm9kZS5zZXRHcm91cCggdGhpcy5ncm91cCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ub2RlID0gbm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgaXMgaW5mZXJyZWQgZnJvbVxuXHQgKiB0aGUgdHlwZSBvZiB0aGUgcmVmZXJlbmNlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCBidWlsZGVyICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vZGUgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudXBkYXRlUmVmZXJlbmNlKCBidWlsZGVyICk7XG5cdFx0XHR0aGlzLnVwZGF0ZVZhbHVlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5ub2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmcm9tIHRoZSBnaXZlbiByZWZlcnJlZCBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXRoaXMucmVmZXJlbmNlXSAtIFRoZSBvYmplY3QgdG8gcmV0cmlldmUgdGhlIHByb3BlcnR5IHZhbHVlIGZyb20uXG5cdCAqIEByZXR1cm4ge2FueX0gVGhlIHZhbHVlLlxuXHQgKi9cblx0Z2V0VmFsdWVGcm9tUmVmZXJlbmNlKCBvYmplY3QgPSB0aGlzLnJlZmVyZW5jZSApIHtcblxuXHRcdGNvbnN0IHsgcHJvcGVydGllcyB9ID0gdGhpcztcblxuXHRcdGxldCB2YWx1ZSA9IG9iamVjdFsgcHJvcGVydGllc1sgMCBdIF07XG5cblx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFsdWUgPSB2YWx1ZVsgcHJvcGVydGllc1sgaSBdIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbGxvd3MgdG8gdXBkYXRlIHRoZSByZWZlcmVuY2UgYmFzZWQgb24gdGhlIGdpdmVuIHN0YXRlLiBUaGUgc3RhdGUgaXMgb25seVxuXHQgKiBldmFsdWF0ZWQge0BsaW5rIFJlZmVyZW5jZUJhc2VOb2RlI29iamVjdH0gaXMgbm90IHNldC5cblx0ICpcblx0ICogQHBhcmFtIHsoTm9kZUZyYW1lfE5vZGVCdWlsZGVyKX0gc3RhdGUgLSBUaGUgY3VycmVudCBzdGF0ZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCByZWZlcmVuY2UuXG5cdCAqL1xuXHR1cGRhdGVSZWZlcmVuY2UoIHN0YXRlICkge1xuXG5cdFx0dGhpcy5yZWZlcmVuY2UgPSB0aGlzLm9iamVjdCAhPT0gbnVsbCA/IHRoaXMub2JqZWN0IDogc3RhdGUub2JqZWN0O1xuXG5cdFx0cmV0dXJuIHRoaXMucmVmZXJlbmNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG91dHB1dCBvZiB0aGUgcmVmZXJlbmNlIG5vZGUgaXMgdGhlIGludGVybmFsIHVuaWZvcm0gbm9kZS5cblx0ICpcblx0ICogQHJldHVybiB7VW5pZm9ybU5vZGV9IFRoZSBvdXRwdXQgbm9kZS5cblx0ICovXG5cdHNldHVwKCkge1xuXG5cdFx0dGhpcy51cGRhdGVWYWx1ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXMubm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHRvIHRvIHVwZGF0ZSB0aGUgaW50ZXJuYWwgdW5pZm9ybSB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlRnJhbWV9IGZyYW1lIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBmcmFtZS5cblx0ICovXG5cdHVwZGF0ZSggLypmcmFtZSovICkge1xuXG5cdFx0dGhpcy51cGRhdGVWYWx1ZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0cmlldmVzIHRoZSB2YWx1ZSBmcm9tIHRoZSByZWZlcnJlZCBvYmplY3QgcHJvcGVydHkgYW5kIHVzZXMgaXRcblx0ICogdG8gdXBkYXRlZCB0aGUgaW50ZXJuYWwgdW5pZm9ybS5cblx0ICovXG5cdHVwZGF0ZVZhbHVlKCkge1xuXG5cdFx0aWYgKCB0aGlzLm5vZGUgPT09IG51bGwgKSB0aGlzLnNldE5vZGVUeXBlKCB0aGlzLnVuaWZvcm1UeXBlICk7XG5cblx0XHRjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVGcm9tUmVmZXJlbmNlKCk7XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cblx0XHRcdHRoaXMubm9kZS5hcnJheSA9IHZhbHVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5ub2RlLnZhbHVlID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZmVyZW5jZUJhc2VOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSByZWZlcmVuY2UgYmFzZSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdGhlIG5vZGUgcmVmZXJzIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdW5pZm9ybSB0eXBlIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBUaGUgb2JqZWN0IHRoZSBwcm9wZXJ0eSBiZWxvbmdzIHRvLlxuICogQHJldHVybnMge1JlZmVyZW5jZUJhc2VOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcmVmZXJlbmNlID0gKCBuYW1lLCB0eXBlLCBvYmplY3QgKSA9PiBub2RlT2JqZWN0KCBuZXcgUmVmZXJlbmNlQmFzZU5vZGUoIG5hbWUsIHR5cGUsIG9iamVjdCApICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHJlZmVyZW5jZSBiYXNlIG5vZGUuIFVzZSB0aGlzIGZ1bmN0aW9uIGlmIHlvdSB3YW50IG5lZWQgYSByZWZlcmVuY2VcbiAqIHRvIGFuIGFycmF5LWxpa2UgcHJvcGVydHkgdGhhdCBzaG91bGQgYmUgcmVwcmVzZW50ZWQgYXMgYSB1bmlmb3JtIGJ1ZmZlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRoZSBub2RlIHJlZmVycyB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHVuaWZvcm0gdHlwZSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBUaGUgbnVtYmVyIG9mIHZhbHVlIGluc2lkZSB0aGUgYXJyYXktbGlrZSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gLSBBbiBhcnJheS1saWtlIG9iamVjdCB0aGUgcHJvcGVydHkgYmVsb25ncyB0by5cbiAqIEByZXR1cm5zIHtSZWZlcmVuY2VCYXNlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZmVyZW5jZUJ1ZmZlciA9ICggbmFtZSwgdHlwZSwgY291bnQsIG9iamVjdCApID0+IG5vZGVPYmplY3QoIG5ldyBSZWZlcmVuY2VCYXNlTm9kZSggbmFtZSwgdHlwZSwgb2JqZWN0LCBjb3VudCApICk7XG4iLCJpbXBvcnQgUmVmZXJlbmNlQmFzZU5vZGUgZnJvbSAnLi9SZWZlcmVuY2VCYXNlTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuaW1wb3J0IHsgcmVuZGVyR3JvdXAgfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Hcm91cE5vZGUuanMnO1xuXG4vKipcbiAqIFRoaXMgbm9kZSBpcyBhIHNwZWNpYWwgdHlwZSBvZiByZWZlcmVuY2Ugbm9kZSB3aGljaCBpcyBpbnRlbmRlZFxuICogZm9yIGxpbmtpbmcgcmVuZGVyZXIgcHJvcGVydGllcyB3aXRoIG5vZGUgdmFsdWVzLlxuICogYGBganNcbiAqIGNvbnN0IGV4cG9zdXJlTm9kZSA9IHJlbmRlcmVyUmVmZXJlbmNlKCAndG9uZU1hcHBpbmdFeHBvc3VyZScsICdmbG9hdCcsIHJlbmRlcmVyICk7XG4gKiBgYGBcbiAqIFdoZW4gY2hhbmdpbmcgYHJlbmRlcmVyLnRvbmVNYXBwaW5nRXhwb3N1cmVgLCB0aGUgbm9kZSB2YWx1ZSBvZiBgZXhwb3N1cmVOb2RlYCB3aWxsXG4gKiBhdXRvbWF0aWNhbGx5IGJlIHVwZGF0ZWQuXG4gKlxuICogQGF1Z21lbnRzIFJlZmVyZW5jZUJhc2VOb2RlXG4gKi9cbmNsYXNzIFJlbmRlcmVyUmVmZXJlbmNlTm9kZSBleHRlbmRzIFJlZmVyZW5jZUJhc2VOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1JlbmRlcmVyUmVmZXJlbmNlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlbmRlcmVyIHJlZmVyZW5jZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdGhlIG5vZGUgcmVmZXJzIHRvLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRUeXBlIC0gVGhlIHVuaWZvcm0gdHlwZSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgcHJvcGVydHkgdmFsdWUuXG5cdCAqIEBwYXJhbSB7P1JlbmRlcmVyfSBbcmVuZGVyZXI9bnVsbF0gLSBUaGUgcmVuZGVyZXIgdGhlIHByb3BlcnR5IGJlbG9uZ3MgdG8uIFdoZW4gbm8gcmVuZGVyZXIgaXMgc2V0LFxuXHQgKiB0aGUgbm9kZSByZWZlcnMgdG8gdGhlIHJlbmRlcmVyIG9mIHRoZSBjdXJyZW50IHN0YXRlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHByb3BlcnR5LCBpbnB1dFR5cGUsIHJlbmRlcmVyID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBwcm9wZXJ0eSwgaW5wdXRUeXBlLCByZW5kZXJlciApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlbmRlcmVyIHRoZSBwcm9wZXJ0eSBiZWxvbmdzIHRvLiBXaGVuIG5vIHJlbmRlcmVyIGlzIHNldCxcblx0XHQgKiB0aGUgbm9kZSByZWZlcnMgdG8gdGhlIHJlbmRlcmVyIG9mIHRoZSBjdXJyZW50IHN0YXRlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9SZW5kZXJlcn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXG5cdFx0dGhpcy5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHJlZmVyZW5jZSBiYXNlZCBvbiB0aGUgZ2l2ZW4gc3RhdGUuIFRoZSBzdGF0ZSBpcyBvbmx5IGV2YWx1YXRlZFxuXHQgKiB7QGxpbmsgUmVuZGVyZXJSZWZlcmVuY2VOb2RlI3JlbmRlcmVyfSBpcyBub3Qgc2V0LlxuXHQgKlxuXHQgKiBAcGFyYW0geyhOb2RlRnJhbWV8Tm9kZUJ1aWxkZXIpfSBzdGF0ZSAtIFRoZSBjdXJyZW50IHN0YXRlLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB1cGRhdGVkIHJlZmVyZW5jZS5cblx0ICovXG5cdHVwZGF0ZVJlZmVyZW5jZSggc3RhdGUgKSB7XG5cblx0XHR0aGlzLnJlZmVyZW5jZSA9IHRoaXMucmVuZGVyZXIgIT09IG51bGwgPyB0aGlzLnJlbmRlcmVyIDogc3RhdGUucmVuZGVyZXI7XG5cblx0XHRyZXR1cm4gdGhpcy5yZWZlcmVuY2U7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlbmRlcmVyUmVmZXJlbmNlTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgcmVuZGVyZXIgcmVmZXJlbmNlIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGUgbm9kZSByZWZlcnMgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB1bmlmb3JtIHR5cGUgdGhhdCBzaG91bGQgYmUgdXNlZCB0byByZXByZXNlbnQgdGhlIHByb3BlcnR5IHZhbHVlLlxuICogQHBhcmFtIHs/UmVuZGVyZXJ9IFtyZW5kZXJlcj1udWxsXSAtIFRoZSByZW5kZXJlciB0aGUgcHJvcGVydHkgYmVsb25ncyB0by4gV2hlbiBubyByZW5kZXJlciBpcyBzZXQsXG4gKiB0aGUgbm9kZSByZWZlcnMgdG8gdGhlIHJlbmRlcmVyIG9mIHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHJldHVybnMge1JlbmRlcmVyUmVmZXJlbmNlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlbmRlcmVyUmVmZXJlbmNlID0gKCBuYW1lLCB0eXBlLCByZW5kZXJlciA9IG51bGwgKSA9PiBub2RlT2JqZWN0KCBuZXcgUmVuZGVyZXJSZWZlcmVuY2VOb2RlKCBuYW1lLCB0eXBlLCByZW5kZXJlciApICk7XG4iLCJpbXBvcnQgVGVtcE5vZGUgZnJvbSAnLi4vY29yZS9UZW1wTm9kZS5qcyc7XG5pbXBvcnQgeyBhZGRNZXRob2RDaGFpbmluZywgbm9kZU9iamVjdCwgdmVjNCB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcbmltcG9ydCB7IHJlbmRlcmVyUmVmZXJlbmNlIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1JlbmRlcmVyUmVmZXJlbmNlTm9kZS5qcyc7XG5cbmltcG9ydCB7IE5vVG9uZU1hcHBpbmcgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgaGFzaCB9IGZyb20gJy4uL2NvcmUvTm9kZVV0aWxzLmpzJztcblxuLyoqXG4gKiBUaGlzIG5vZGUgcmVwcmVzZW50cyBhIHRvbmUgbWFwcGluZyBvcGVyYXRpb24uXG4gKlxuICogQGF1Z21lbnRzIFRlbXBOb2RlXG4gKi9cbmNsYXNzIFRvbmVNYXBwaW5nTm9kZSBleHRlbmRzIFRlbXBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1RvbmVNYXBwaW5nTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHRvbmUgbWFwcGluZyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdG9uZU1hcHBpbmcgLSBUaGUgdG9uZSBtYXBwaW5nIHR5cGUuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gZXhwb3N1cmVOb2RlIC0gVGhlIHRvbmUgbWFwcGluZyBleHBvc3VyZS5cblx0ICogQHBhcmFtIHtOb2RlfSBbY29sb3JOb2RlPW51bGxdIC0gVGhlIGNvbG9yIG5vZGUgdG8gcHJvY2Vzcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB0b25lTWFwcGluZywgZXhwb3N1cmVOb2RlID0gdG9uZU1hcHBpbmdFeHBvc3VyZSwgY29sb3JOb2RlID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCAndmVjMycgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0b25lIG1hcHBpbmcgdHlwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy50b25lTWFwcGluZyA9IHRvbmVNYXBwaW5nO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHRvbmUgbWFwcGluZyBleHBvc3VyZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmV4cG9zdXJlTm9kZSA9IGV4cG9zdXJlTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIGNvbG9yIHRvIHByb2Nlc3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3JOb2RlID0gY29sb3JOb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCBgY3VzdG9tQ2FjaGVLZXkoKWAgaW1wbGVtZW50YXRpb24gYnkgaW5jbHVkaW5nIHRoZSB0b25lXG5cdCAqIG1hcHBpbmcgdHlwZSBpbnRvIHRoZSBjYWNoZSBrZXkuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGhhc2guXG5cdCAqL1xuXHRjdXN0b21DYWNoZUtleSgpIHtcblxuXHRcdHJldHVybiBoYXNoKCB0aGlzLnRvbmVNYXBwaW5nICk7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgY29sb3JOb2RlID0gdGhpcy5jb2xvck5vZGUgfHwgYnVpbGRlci5jb250ZXh0LmNvbG9yO1xuXHRcdGNvbnN0IHRvbmVNYXBwaW5nID0gdGhpcy50b25lTWFwcGluZztcblxuXHRcdGlmICggdG9uZU1hcHBpbmcgPT09IE5vVG9uZU1hcHBpbmcgKSByZXR1cm4gY29sb3JOb2RlO1xuXG5cdFx0bGV0IG91dHB1dE5vZGUgPSBudWxsO1xuXG5cdFx0Y29uc3QgdG9uZU1hcHBpbmdGbiA9IGJ1aWxkZXIucmVuZGVyZXIubGlicmFyeS5nZXRUb25lTWFwcGluZ0Z1bmN0aW9uKCB0b25lTWFwcGluZyApO1xuXG5cdFx0aWYgKCB0b25lTWFwcGluZ0ZuICE9PSBudWxsICkge1xuXG5cdFx0XHRvdXRwdXROb2RlID0gdmVjNCggdG9uZU1hcHBpbmdGbiggY29sb3JOb2RlLnJnYiwgdGhpcy5leHBvc3VyZU5vZGUgKSwgY29sb3JOb2RlLmEgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUb25lTWFwcGluZ05vZGU6IFVuc3VwcG9ydGVkIFRvbmUgTWFwcGluZyBjb25maWd1cmF0aW9uLicsIHRvbmVNYXBwaW5nICk7XG5cblx0XHRcdG91dHB1dE5vZGUgPSBjb2xvck5vZGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0Tm9kZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9uZU1hcHBpbmdOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSB0b25lIG1hcHBpbmcgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXBwaW5nIC0gVGhlIHRvbmUgbWFwcGluZyB0eXBlLlxuICogQHBhcmFtIHtOb2RlPGZsb2F0PiB8IG51bWJlcn0gZXhwb3N1cmUgLSBUaGUgdG9uZSBtYXBwaW5nIGV4cG9zdXJlLlxuICogQHBhcmFtIHtOb2RlPHZlYzM+IHwgQ29sb3J9IGNvbG9yIC0gVGhlIGNvbG9yIG5vZGUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtUb25lTWFwcGluZ05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCB0b25lTWFwcGluZyA9ICggbWFwcGluZywgZXhwb3N1cmUsIGNvbG9yICkgPT4gbm9kZU9iamVjdCggbmV3IFRvbmVNYXBwaW5nTm9kZSggbWFwcGluZywgbm9kZU9iamVjdCggZXhwb3N1cmUgKSwgbm9kZU9iamVjdCggY29sb3IgKSApICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGdsb2JhbCB0b25lIG1hcHBpbmcgZXhwb3N1cmUgb2YgdGhlIHJlbmRlcmVyLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtSZW5kZXJlclJlZmVyZW5jZU5vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCB0b25lTWFwcGluZ0V4cG9zdXJlID0gLypAX19QVVJFX18qLyByZW5kZXJlclJlZmVyZW5jZSggJ3RvbmVNYXBwaW5nRXhwb3N1cmUnLCAnZmxvYXQnICk7XG5cbmFkZE1ldGhvZENoYWluaW5nKCAndG9uZU1hcHBpbmcnLCAoIGNvbG9yLCBtYXBwaW5nLCBleHBvc3VyZSApID0+IHRvbmVNYXBwaW5nKCBtYXBwaW5nLCBleHBvc3VyZSwgY29sb3IgKSApO1xuIiwiaW1wb3J0IElucHV0Tm9kZSBmcm9tICcuLi9jb3JlL0lucHV0Tm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlT2JqZWN0LCBhZGRNZXRob2RDaGFpbmluZyB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcbmltcG9ydCB7IHZhcnlpbmcgfSBmcm9tICcuLi9jb3JlL1ZhcnlpbmdOb2RlLmpzJztcblxuaW1wb3J0IHsgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi8uLi9jb3JlL0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IEludGVybGVhdmVkQnVmZmVyIH0gZnJvbSAnLi4vLi4vY29yZS9JbnRlcmxlYXZlZEJ1ZmZlci5qcyc7XG5pbXBvcnQgeyBTdGF0aWNEcmF3VXNhZ2UsIER5bmFtaWNEcmF3VXNhZ2UgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIEluIGVhcmxpZXIgYHRocmVlLmpzYCB2ZXJzaW9ucyBpdCB3YXMgb25seSBwb3NzaWJsZSB0byBkZWZpbmUgYXR0cmlidXRlIGRhdGFcbiAqIG9uIGdlb21ldHJ5IGxldmVsLiBXaXRoIGBCdWZmZXJBdHRyaWJ1dGVOb2RlYCwgaXQgaXMgYWxzbyBwb3NzaWJsZSB0byBkbyB0aGlzXG4gKiBvbiB0aGUgbm9kZSBsZXZlbC5cbiAqIGBgYGpzXG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KCk7XG4gKiBjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuICpcbiAqIGNvbnN0IGNvbG9ycyA9IFtdO1xuICogZm9yICggbGV0IGkgPSAwOyBpIDwgcG9zaXRpb24uY291bnQ7IGkgKysgKSB7XG4gKiBcdGNvbG9ycy5wdXNoKCAxLCAwLCAwICk7XG4gKiB9XG4gKlxuICogbWF0ZXJpYWwuY29sb3JOb2RlID0gYnVmZmVyQXR0cmlidXRlKCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcbiAqIGBgYFxuICogVGhpcyBuZXcgYXBwcm9hY2ggaXMgZXNwZWNpYWxseSBpbnRlcmVzdGluZyB3aGVuIGdlb21ldHJ5IGRhdGEgYXJlIGdlbmVyYXRlZCB2aWFcbiAqIGNvbXB1dGUgc2hhZGVycy4gVGhlIGJlbG93IGxpbmUgY29udmVydHMgYSBzdG9yYWdlIGJ1ZmZlciBpbnRvIGFuIGF0dHJpYnV0ZSBub2RlLlxuICogYGBganNcbiAqIG1hdGVyaWFsLnBvc2l0aW9uTm9kZSA9IHBvc2l0aW9uQnVmZmVyLnRvQXR0cmlidXRlKCk7XG4gKiBgYGBcbiAqIEBhdWdtZW50cyBJbnB1dE5vZGVcbiAqL1xuY2xhc3MgQnVmZmVyQXR0cmlidXRlTm9kZSBleHRlbmRzIElucHV0Tm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdCdWZmZXJBdHRyaWJ1dGVOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIGF0dHJpYnV0ZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZXxJbnRlcmxlYXZlZEJ1ZmZlcnxUeXBlZEFycmF5fSB2YWx1ZSAtIFRoZSBhdHRyaWJ1dGUgZGF0YS5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbYnVmZmVyVHlwZT1udWxsXSAtIFRoZSBidWZmZXIgdHlwZSAoZS5nLiBgJ3ZlYzMnYCkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYnVmZmVyU3RyaWRlPTBdIC0gVGhlIGJ1ZmZlciBzdHJpZGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYnVmZmVyT2Zmc2V0PTBdIC0gVGhlIGJ1ZmZlciBvZmZzZXQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggdmFsdWUsIGJ1ZmZlclR5cGUgPSBudWxsLCBidWZmZXJTdHJpZGUgPSAwLCBidWZmZXJPZmZzZXQgPSAwICkge1xuXG5cdFx0c3VwZXIoIHZhbHVlLCBidWZmZXJUeXBlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQnVmZmVyTm9kZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYnVmZmVyIHR5cGUgKGUuZy4gYCd2ZWMzJ2ApLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYnVmZmVyVHlwZSA9IGJ1ZmZlclR5cGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYnVmZmVyIHN0cmlkZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuYnVmZmVyU3RyaWRlID0gYnVmZmVyU3RyaWRlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJ1ZmZlciBvZmZzZXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmJ1ZmZlck9mZnNldCA9IGJ1ZmZlck9mZnNldDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1c2FnZSBwcm9wZXJ0eS4gU2V0IHRoaXMgdG8gYFRIUkVFLkR5bmFtaWNEcmF3VXNhZ2VgIHZpYSBgLnNldFVzYWdlKClgLFxuXHRcdCAqIGlmIHlvdSBhcmUgcGxhbm5pbmcgdG8gdXBkYXRlIHRoZSBhdHRyaWJ1dGUgZGF0YSBwZXIgZnJhbWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IFN0YXRpY0RyYXdVc2FnZVxuXHRcdCAqL1xuXHRcdHRoaXMudXNhZ2UgPSBTdGF0aWNEcmF3VXNhZ2U7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBhdHRyaWJ1dGUgaXMgaW5zdGFuY2VkIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5pbnN0YW5jZWQgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9CdWZmZXJBdHRyaWJ1dGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYXR0cmlidXRlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIGBCdWZmZXJBdHRyaWJ1dGVOb2RlYCBzZXRzIHRoaXMgcHJvcGVydHkgdG8gYHRydWVgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5nbG9iYWwgPSB0cnVlO1xuXG5cdFx0aWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0J1ZmZlckF0dHJpYnV0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5hdHRyaWJ1dGUgPSB2YWx1ZTtcblx0XHRcdHRoaXMudXNhZ2UgPSB2YWx1ZS51c2FnZTtcblx0XHRcdHRoaXMuaW5zdGFuY2VkID0gdmFsdWUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzaW5jZSB0aGUgYXR0cmlidXRlIGRhdGEgbWlnaHQgYmUgc2hhcmVkXG5cdCAqIGFuZCB0aHVzIHRoZSBoYXNoIHNob3VsZCBiZSBzaGFyZWQgYXMgd2VsbC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGFzaC5cblx0ICovXG5cdGdldEhhc2goIGJ1aWxkZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuYnVmZmVyU3RyaWRlID09PSAwICYmIHRoaXMuYnVmZmVyT2Zmc2V0ID09PSAwICkge1xuXG5cdFx0XHRsZXQgYnVmZmVyRGF0YSA9IGJ1aWxkZXIuZ2xvYmFsQ2FjaGUuZ2V0RGF0YSggdGhpcy52YWx1ZSApO1xuXG5cdFx0XHRpZiAoIGJ1ZmZlckRhdGEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRidWZmZXJEYXRhID0ge1xuXHRcdFx0XHRcdG5vZGU6IHRoaXNcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRidWlsZGVyLmdsb2JhbENhY2hlLnNldERhdGEoIHRoaXMudmFsdWUsIGJ1ZmZlckRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYnVmZmVyRGF0YS5ub2RlLnV1aWQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy51dWlkO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgb3ZlcndyaXR0ZW4gc2luY2UgdGhlIG5vZGUgdHlwZSBpcyBpbmZlcnJlZCBmcm9tXG5cdCAqIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5idWZmZXJUeXBlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJ1ZmZlclR5cGUgPSBidWlsZGVyLmdldFR5cGVGcm9tQXR0cmlidXRlKCB0aGlzLmF0dHJpYnV0ZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYnVmZmVyVHlwZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlcGVuZGluZyBvbiB3aGljaCB2YWx1ZSB3YXMgcGFzc2VkIHRvIHRoZSBub2RlLCBgc2V0dXAoKWAgYmVoYXZlc1xuXHQgKiBkaWZmZXJlbnRseS4gSWYgbm8gaW5zdGFuY2Ugb2YgYEJ1ZmZlckF0dHJpYnV0ZWAgd2FzIHBhc3NlZCwgdGhlIG1ldGhvZFxuXHQgKiBjcmVhdGVzIGFuIGludGVybmFsIGF0dHJpYnV0ZSBhbmQgY29uZmlndXJlcyBpdCByZXNwZWN0aXZlbHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5hdHRyaWJ1dGUgIT09IG51bGwgKSByZXR1cm47XG5cblx0XHRjb25zdCB0eXBlID0gdGhpcy5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXHRcdGNvbnN0IGFycmF5ID0gdGhpcy52YWx1ZTtcblx0XHRjb25zdCBpdGVtU2l6ZSA9IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggdHlwZSApO1xuXHRcdGNvbnN0IHN0cmlkZSA9IHRoaXMuYnVmZmVyU3RyaWRlIHx8IGl0ZW1TaXplO1xuXHRcdGNvbnN0IG9mZnNldCA9IHRoaXMuYnVmZmVyT2Zmc2V0O1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gYXJyYXkuaXNJbnRlcmxlYXZlZEJ1ZmZlciA9PT0gdHJ1ZSA/IGFycmF5IDogbmV3IEludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgc3RyaWRlICk7XG5cdFx0Y29uc3QgYnVmZmVyQXR0cmlidXRlID0gbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBidWZmZXIsIGl0ZW1TaXplLCBvZmZzZXQgKTtcblxuXHRcdGJ1ZmZlci5zZXRVc2FnZSggdGhpcy51c2FnZSApO1xuXG5cdFx0dGhpcy5hdHRyaWJ1dGUgPSBidWZmZXJBdHRyaWJ1dGU7XG5cdFx0dGhpcy5hdHRyaWJ1dGUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSB0aGlzLmluc3RhbmNlZDsgLy8gQFRPRE86IEFkZCBhIHBvc3NpYmxlOiBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZVxuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSBjb2RlIHNuaXBwZXQgb2YgdGhlIGJ1ZmZlciBhdHRyaWJ1dGUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIGNvZGUgc25pcHBldC5cblx0ICovXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3Qgbm9kZVR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRjb25zdCBub2RlQXR0cmlidXRlID0gYnVpbGRlci5nZXRCdWZmZXJBdHRyaWJ1dGVGcm9tTm9kZSggdGhpcywgbm9kZVR5cGUgKTtcblx0XHRjb25zdCBwcm9wZXJ0eU5hbWUgPSBidWlsZGVyLmdldFByb3BlcnR5TmFtZSggbm9kZUF0dHJpYnV0ZSApO1xuXG5cdFx0bGV0IG91dHB1dCA9IG51bGw7XG5cblx0XHRpZiAoIGJ1aWxkZXIuc2hhZGVyU3RhZ2UgPT09ICd2ZXJ0ZXgnIHx8IGJ1aWxkZXIuc2hhZGVyU3RhZ2UgPT09ICdjb21wdXRlJyApIHtcblxuXHRcdFx0dGhpcy5uYW1lID0gcHJvcGVydHlOYW1lO1xuXG5cdFx0XHRvdXRwdXQgPSBwcm9wZXJ0eU5hbWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBub2RlVmFyeWluZyA9IHZhcnlpbmcoIHRoaXMgKTtcblxuXHRcdFx0b3V0cHV0ID0gbm9kZVZhcnlpbmcuYnVpbGQoIGJ1aWxkZXIsIG5vZGVUeXBlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byByZXR1cm4gYSBmaXhlZCB2YWx1ZSBgJ2J1ZmZlckF0dHJpYnV0ZSdgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBpbnB1dCB0eXBlLlxuXHQgKi9cblx0Z2V0SW5wdXRUeXBlKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiAnYnVmZmVyQXR0cmlidXRlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGB1c2FnZWAgcHJvcGVydHkgdG8gdGhlIGdpdmVuIHZhbHVlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdXNhZ2UgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGVOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRzZXRVc2FnZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnVzYWdlID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuYXR0cmlidXRlICYmIHRoaXMuYXR0cmlidXRlLmlzQnVmZmVyQXR0cmlidXRlID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLmF0dHJpYnV0ZS51c2FnZSA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBgaW5zdGFuY2VkYCBwcm9wZXJ0eSB0byB0aGUgZ2l2ZW4gdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGVOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRzZXRJbnN0YW5jZWQoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5pbnN0YW5jZWQgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBCdWZmZXJBdHRyaWJ1dGVOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBidWZmZXIgYXR0cmlidXRlIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZXxJbnRlcmxlYXZlZEJ1ZmZlcnxUeXBlZEFycmF5fSBhcnJheSAtIFRoZSBhdHRyaWJ1dGUgZGF0YS5cbiAqIEBwYXJhbSB7P3N0cmluZ30gW3R5cGU9bnVsbF0gLSBUaGUgYnVmZmVyIHR5cGUgKGUuZy4gYCd2ZWMzJ2ApLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdHJpZGU9MF0gLSBUaGUgYnVmZmVyIHN0cmlkZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gVGhlIGJ1ZmZlciBvZmZzZXQuXG4gKiBAcmV0dXJucyB7QnVmZmVyQXR0cmlidXRlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGJ1ZmZlckF0dHJpYnV0ZSA9ICggYXJyYXksIHR5cGUgPSBudWxsLCBzdHJpZGUgPSAwLCBvZmZzZXQgPSAwICkgPT4gbm9kZU9iamVjdCggbmV3IEJ1ZmZlckF0dHJpYnV0ZU5vZGUoIGFycmF5LCB0eXBlLCBzdHJpZGUsIG9mZnNldCApICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGJ1ZmZlciBhdHRyaWJ1dGUgbm9kZSBidXQgd2l0aCBkeW5hbWljIGRyYXcgdXNhZ2UuXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiBpZiBhdHRyaWJ1dGUgZGF0YSBhcmUgdXBkYXRlZCBwZXIgZnJhbWUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZXxJbnRlcmxlYXZlZEJ1ZmZlcnxUeXBlZEFycmF5fSBhcnJheSAtIFRoZSBhdHRyaWJ1dGUgZGF0YS5cbiAqIEBwYXJhbSB7P3N0cmluZ30gW3R5cGU9bnVsbF0gLSBUaGUgYnVmZmVyIHR5cGUgKGUuZy4gYCd2ZWMzJ2ApLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdHJpZGU9MF0gLSBUaGUgYnVmZmVyIHN0cmlkZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gVGhlIGJ1ZmZlciBvZmZzZXQuXG4gKiBAcmV0dXJucyB7QnVmZmVyQXR0cmlidXRlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgPSAoIGFycmF5LCB0eXBlID0gbnVsbCwgc3RyaWRlID0gMCwgb2Zmc2V0ID0gMCApID0+IGJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIHR5cGUsIHN0cmlkZSwgb2Zmc2V0ICkuc2V0VXNhZ2UoIER5bmFtaWNEcmF3VXNhZ2UgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgYnVmZmVyIGF0dHJpYnV0ZSBub2RlIGJ1dCB3aXRoIGVuYWJsZWQgaW5zdGFuY2luZ1xuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJ8VHlwZWRBcnJheX0gYXJyYXkgLSBUaGUgYXR0cmlidXRlIGRhdGEuXG4gKiBAcGFyYW0gez9zdHJpbmd9IFt0eXBlPW51bGxdIC0gVGhlIGJ1ZmZlciB0eXBlIChlLmcuIGAndmVjMydgKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RyaWRlPTBdIC0gVGhlIGJ1ZmZlciBzdHJpZGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIFRoZSBidWZmZXIgb2Zmc2V0LlxuICogQHJldHVybnMge0J1ZmZlckF0dHJpYnV0ZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBpbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSAoIGFycmF5LCB0eXBlID0gbnVsbCwgc3RyaWRlID0gMCwgb2Zmc2V0ID0gMCApID0+IGJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIHR5cGUsIHN0cmlkZSwgb2Zmc2V0ICkuc2V0SW5zdGFuY2VkKCB0cnVlICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGJ1ZmZlciBhdHRyaWJ1dGUgbm9kZSBidXQgd2l0aCBkeW5hbWljIGRyYXcgdXNhZ2UgYW5kIGVuYWJsZWQgaW5zdGFuY2luZ1xuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJ8VHlwZWRBcnJheX0gYXJyYXkgLSBUaGUgYXR0cmlidXRlIGRhdGEuXG4gKiBAcGFyYW0gez9zdHJpbmd9IFt0eXBlPW51bGxdIC0gVGhlIGJ1ZmZlciB0eXBlIChlLmcuIGAndmVjMydgKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RyaWRlPTBdIC0gVGhlIGJ1ZmZlciBzdHJpZGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIFRoZSBidWZmZXIgb2Zmc2V0LlxuICogQHJldHVybnMge0J1ZmZlckF0dHJpYnV0ZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBpbnN0YW5jZWREeW5hbWljQnVmZmVyQXR0cmlidXRlID0gKCBhcnJheSwgdHlwZSA9IG51bGwsIHN0cmlkZSA9IDAsIG9mZnNldCA9IDAgKSA9PiBkeW5hbWljQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgdHlwZSwgc3RyaWRlLCBvZmZzZXQgKS5zZXRJbnN0YW5jZWQoIHRydWUgKTtcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICd0b0F0dHJpYnV0ZScsICggYnVmZmVyTm9kZSApID0+IGJ1ZmZlckF0dHJpYnV0ZSggYnVmZmVyTm9kZS52YWx1ZSApICk7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuaW1wb3J0IHsgTm9kZVVwZGF0ZVR5cGUgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBhZGRNZXRob2RDaGFpbmluZywgbm9kZU9iamVjdCB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcblxuLyoqXG4gKiBUT0RPXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgQ29tcHV0ZU5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0NvbXB1dGVOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY29tcHV0ZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IGNvbXB1dGVOb2RlIC0gVE9ET1xuXHQgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBUT0RPLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFt3b3JrZ3JvdXBTaXplPVs2NF1dIC0gVE9ETy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjb21wdXRlTm9kZSwgY291bnQsIHdvcmtncm91cFNpemUgPSBbIDY0IF0gKSB7XG5cblx0XHRzdXBlciggJ3ZvaWQnICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQ29tcHV0ZU5vZGUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVE9ET1xuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5jb21wdXRlTm9kZSA9IGNvbXB1dGVOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVE9ET1xuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLmNvdW50ID0gY291bnQ7XG5cblx0XHQvKipcblx0XHQgKiBUT0RPXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8bnVtYmVyPn1cblx0XHQgKiBAZGVmYXVsdCBbNjRdXG5cdFx0ICovXG5cdFx0dGhpcy53b3JrZ3JvdXBTaXplID0gd29ya2dyb3VwU2l6ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRPRE9cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwYXRjaENvdW50ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRPRE9cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy52ZXJzaW9uID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9yIGxhYmVsIG9mIHRoZSB1bmlmb3JtLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnJ1xuXHRcdCAqL1xuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGB1cGRhdGVCZWZvcmVUeXBlYCBpcyBzZXQgdG8gYE5vZGVVcGRhdGVUeXBlLk9CSkVDVGAgc2luY2Uge0BsaW5rIENvbXB1dGVOb2RlI3VwZGF0ZUJlZm9yZX1cblx0XHQgKiBpcyBleGVjdXRlZCBvbmNlIHBlciBvYmplY3QgYnkgZGVmYXVsdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ29iamVjdCdcblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZUJlZm9yZVR5cGUgPSBOb2RlVXBkYXRlVHlwZS5PQkpFQ1Q7XG5cblx0XHQvKipcblx0XHQgKiBUT0RPXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0Z1bmN0aW9ufVxuXHRcdCAqL1xuXHRcdHRoaXMub25Jbml0RnVuY3Rpb24gPSBudWxsO1xuXG5cdFx0dGhpcy51cGRhdGVEaXNwYXRjaENvdW50KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlcyB0aGUgYGRpc3Bvc2VgIGV2ZW50IGZvciB0aGlzIG5vZGUuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB7QGxpbmsgQ29tcHV0ZU5vZGUjbmFtZX0gcHJvcGVydHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHVuaWZvcm0uXG5cdCAqIEByZXR1cm4ge0NvbXB1dGVOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRsYWJlbCggbmFtZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRPRE9cblx0ICovXG5cdHVwZGF0ZURpc3BhdGNoQ291bnQoKSB7XG5cblx0XHRjb25zdCB7IGNvdW50LCB3b3JrZ3JvdXBTaXplIH0gPSB0aGlzO1xuXG5cdFx0bGV0IHNpemUgPSB3b3JrZ3JvdXBTaXplWyAwIF07XG5cblx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPCB3b3JrZ3JvdXBTaXplLmxlbmd0aDsgaSArKyApXG5cdFx0XHRzaXplICo9IHdvcmtncm91cFNpemVbIGkgXTtcblxuXHRcdHRoaXMuZGlzcGF0Y2hDb3VudCA9IE1hdGguY2VpbCggY291bnQgLyBzaXplICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETy5cblx0ICogQHJldHVybiB7Q29tcHV0ZU5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdG9uSW5pdCggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLm9uSW5pdEZ1bmN0aW9uID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBtZXRob2QgZXhlY3V0ZSB0aGUgY29tcHV0ZSBmb3IgdGhpcyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlQmVmb3JlKCB7IHJlbmRlcmVyIH0gKSB7XG5cblx0XHRyZW5kZXJlci5jb21wdXRlKCB0aGlzICk7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBzaGFkZXJTdGFnZSB9ID0gYnVpbGRlcjtcblxuXHRcdGlmICggc2hhZGVyU3RhZ2UgPT09ICdjb21wdXRlJyApIHtcblxuXHRcdFx0Y29uc3Qgc25pcHBldCA9IHRoaXMuY29tcHV0ZU5vZGUuYnVpbGQoIGJ1aWxkZXIsICd2b2lkJyApO1xuXG5cdFx0XHRpZiAoIHNuaXBwZXQgIT09ICcnICkge1xuXG5cdFx0XHRcdGJ1aWxkZXIuYWRkTGluZUZsb3dDb2RlKCBzbmlwcGV0LCB0aGlzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcHV0ZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGNvbXB1dGUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRPRE9cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIFRPRE8uXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFt3b3JrZ3JvdXBTaXplPVs2NF1dIC0gVE9ETy5cbiAqIEByZXR1cm5zIHtBdG9taWNGdW5jdGlvbk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjb21wdXRlID0gKCBub2RlLCBjb3VudCwgd29ya2dyb3VwU2l6ZSApID0+IG5vZGVPYmplY3QoIG5ldyBDb21wdXRlTm9kZSggbm9kZU9iamVjdCggbm9kZSApLCBjb3VudCwgd29ya2dyb3VwU2l6ZSApICk7XG5cbmFkZE1ldGhvZENoYWluaW5nKCAnY29tcHV0ZScsIGNvbXB1dGUgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4vTm9kZS5qcyc7XG5pbXBvcnQgeyBhZGRNZXRob2RDaGFpbmluZywgbm9kZU9iamVjdCB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcblxuLyoqXG4gKiBUaGlzIG5vZGUgY2FuIGJlIHVzZWQgYXMgYSBjYWNoZSBtYW5hZ2VtZW50IGNvbXBvbmVudCBmb3IgYW5vdGhlciBub2RlLlxuICogQ2FjaGluZyBpcyBpbiBnZW5lcmFsIHVzZWQgYnkgZGVmYXVsdCBpbiB7QGxpbmsgTm9kZUJ1aWxkZXJ9IGJ1dCB0aGlzIG5vZGVcbiAqIGFsbG93cyB0aGUgdXNhZ2Ugb2YgYSBzaGFyZWQgcGFyZW50IGNhY2hlIGR1cmluZyB0aGUgYnVpbGQgcHJvY2Vzcy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBDYWNoZU5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0NhY2hlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNhY2hlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRoYXQgc2hvdWxkIGJlIGNhY2hlZC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbcGFyZW50PXRydWVdIC0gV2hldGhlciB0aGlzIG5vZGUgcmVmZXJzIHRvIGEgc2hhcmVkIHBhcmVudCBjYWNoZSBvciBub3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZSwgcGFyZW50ID0gdHJ1ZSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB0aGF0IHNob3VsZCBiZSBjYWNoZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGUgPSBub2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGlzIG5vZGUgcmVmZXJzIHRvIGEgc2hhcmVkIHBhcmVudCBjYWNoZSBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQ2FjaGVOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBwcmV2aW91c0NhY2hlID0gYnVpbGRlci5nZXRDYWNoZSgpO1xuXHRcdGNvbnN0IGNhY2hlID0gYnVpbGRlci5nZXRDYWNoZUZyb21Ob2RlKCB0aGlzLCB0aGlzLnBhcmVudCApO1xuXG5cdFx0YnVpbGRlci5zZXRDYWNoZSggY2FjaGUgKTtcblxuXHRcdGNvbnN0IG5vZGVUeXBlID0gdGhpcy5ub2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRidWlsZGVyLnNldENhY2hlKCBwcmV2aW91c0NhY2hlICk7XG5cblx0XHRyZXR1cm4gbm9kZVR5cGU7XG5cblx0fVxuXG5cdGJ1aWxkKCBidWlsZGVyLCAuLi5wYXJhbXMgKSB7XG5cblx0XHRjb25zdCBwcmV2aW91c0NhY2hlID0gYnVpbGRlci5nZXRDYWNoZSgpO1xuXHRcdGNvbnN0IGNhY2hlID0gYnVpbGRlci5nZXRDYWNoZUZyb21Ob2RlKCB0aGlzLCB0aGlzLnBhcmVudCApO1xuXG5cdFx0YnVpbGRlci5zZXRDYWNoZSggY2FjaGUgKTtcblxuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLm5vZGUuYnVpbGQoIGJ1aWxkZXIsIC4uLnBhcmFtcyApO1xuXG5cdFx0YnVpbGRlci5zZXRDYWNoZSggcHJldmlvdXNDYWNoZSApO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENhY2hlTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgY2FjaGUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRoYXQgc2hvdWxkIGJlIGNhY2hlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmVudF0gLSBXaGV0aGVyIHRoaXMgbm9kZSByZWZlcnMgdG8gYSBzaGFyZWQgcGFyZW50IGNhY2hlIG9yIG5vdC5cbiAqIEByZXR1cm5zIHtDYWNoZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjYWNoZSA9ICggbm9kZSwgcGFyZW50ICkgPT4gbm9kZU9iamVjdCggbmV3IENhY2hlTm9kZSggbm9kZU9iamVjdCggbm9kZSApLCBwYXJlbnQgKSApO1xuXG5hZGRNZXRob2RDaGFpbmluZyggJ2NhY2hlJywgY2FjaGUgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4vTm9kZS5qcyc7XG5pbXBvcnQgeyBhZGRNZXRob2RDaGFpbmluZywgbm9kZVByb3h5IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuXG4vKipcbiAqIFRoZSBjbGFzcyBnZW5lcmF0ZXMgdGhlIGNvZGUgb2YgYSBnaXZlbiBub2RlIGJ1dCByZXR1cm5zIGFub3RoZXIgbm9kZSBpbiB0aGUgb3V0cHV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBjYWxsIGEgbWV0aG9kIG9yIG5vZGUgdGhhdCBkb2VzIG5vdCByZXR1cm4gYSB2YWx1ZSwgaS5lLlxuICogdHlwZSBgdm9pZGAgb24gYW4gaW5wdXQgd2hlcmUgcmV0dXJuaW5nIGEgdmFsdWUgaXMgcmVxdWlyZWQuIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIG1hdGVyaWFsLmNvbG9yTm9kZSA9IG15Q29sb3IuYnlwYXNzKCBydW5Wb2lkRm4oKSApXG4gKmBgYFxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIEJ5cGFzc05vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0J5cGFzc05vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBieXBhc3Mgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBvdXRwdXROb2RlIC0gVGhlIG91dHB1dCBub2RlLlxuXHQgKiBAcGFyYW0ge05vZGV9IGNhbGxOb2RlIC0gVGhlIGNhbGwgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBvdXRwdXROb2RlLCBjYWxsTm9kZSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQnlwYXNzTm9kZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb3V0cHV0IG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLm91dHB1dE5vZGUgPSBvdXRwdXROb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhbGwgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FsbE5vZGUgPSBjYWxsTm9kZTtcblxuXHR9XG5cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5vdXRwdXROb2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3Qgc25pcHBldCA9IHRoaXMuY2FsbE5vZGUuYnVpbGQoIGJ1aWxkZXIsICd2b2lkJyApO1xuXG5cdFx0aWYgKCBzbmlwcGV0ICE9PSAnJyApIHtcblxuXHRcdFx0YnVpbGRlci5hZGRMaW5lRmxvd0NvZGUoIHNuaXBwZXQsIHRoaXMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm91dHB1dE5vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnlwYXNzTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgYnlwYXNzIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IG91dHB1dE5vZGUgLSBUaGUgb3V0cHV0IG5vZGUuXG4gKiBAcGFyYW0ge05vZGV9IGNhbGxOb2RlIC0gVGhlIGNhbGwgbm9kZS5cbiAqIEByZXR1cm5zIHtCeXBhc3NOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYnlwYXNzID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIEJ5cGFzc05vZGUgKTtcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICdieXBhc3MnLCBieXBhc3MgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBmbG9hdCwgYWRkTWV0aG9kQ2hhaW5pbmcsIG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcblxuLyoqXG4gKiBUaGlzIG5vZGUgYWxsb3dzIHRvIHJlbWFwIGEgbm9kZSB2YWx1ZSBmcm9tIG9uZSByYW5nZSBpbnRvIGFub3RoZXIuIEUuZyBhIHZhbHVlIG9mXG4gKiBgMC40YCBpbiB0aGUgcmFuZ2UgYFsgMC4zLCAwLjUgXWAgc2hvdWxkIGJlIHJlbWFwcGVkIGludG8gdGhlIG5vcm1hbGl6ZWQgcmFuZ2UgYFsgMCwgMSBdYC5cbiAqIGBSZW1hcE5vZGVgIHRha2VzIGNhcmUgb2YgdGhhdCBhbmQgY29udmVydHMgdGhlIG9yaWdpbmFsIHZhbHVlIG9mIGAwLjRgIHRvIGAwLjVgLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFJlbWFwTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnUmVtYXBOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcmVtYXAgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdGhhdCBzaG91bGQgYmUgcmVtYXBwZWQuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gaW5Mb3dOb2RlIC0gVGhlIHNvdXJjZSBvciBjdXJyZW50IGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZS5cblx0ICogQHBhcmFtIHtOb2RlfSBpbkhpZ2hOb2RlIC0gVGhlIHNvdXJjZSBvciBjdXJyZW50IHVwcGVyIGJvdW5kIG9mIHRoZSByYW5nZS5cblx0ICogQHBhcmFtIHtOb2RlfSBbb3V0TG93Tm9kZT1mbG9hdCgwKV0gLSBUaGUgdGFyZ2V0IGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZS5cblx0ICogQHBhcmFtIHtOb2RlfSBbb3V0SGlnaE5vZGU9ZmxvYXQoMSldIC0gVGhlIHRhcmdldCB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZSwgaW5Mb3dOb2RlLCBpbkhpZ2hOb2RlLCBvdXRMb3dOb2RlID0gZmxvYXQoIDAgKSwgb3V0SGlnaE5vZGUgPSBmbG9hdCggMSApICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHRoYXQgc2hvdWxkIGJlIHJlbWFwcGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlID0gbm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzb3VyY2Ugb3IgY3VycmVudCBsb3dlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLmluTG93Tm9kZSA9IGluTG93Tm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzb3VyY2Ugb3IgY3VycmVudCB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLmluSGlnaE5vZGUgPSBpbkhpZ2hOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHRhcmdldCBsb3dlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBmbG9hdCgwKVxuXHRcdCAqL1xuXHRcdHRoaXMub3V0TG93Tm9kZSA9IG91dExvd05vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGFyZ2V0IHVwcGVyIGJvdW5kIG9mIHRoZSByYW5nZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqIEBkZWZhdWx0IGZsb2F0KDEpXG5cdFx0ICovXG5cdFx0dGhpcy5vdXRIaWdoTm9kZSA9IG91dEhpZ2hOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgbm9kZSB2YWx1ZSBzaG91bGQgYmUgY2xhbXBlZCBiZWZvcmVcblx0XHQgKiByZW1hcHBpbmcgaXQgdG8gdGhlIHRhcmdldCByYW5nZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmRvQ2xhbXAgPSB0cnVlO1xuXG5cdH1cblxuXHRzZXR1cCgpIHtcblxuXHRcdGNvbnN0IHsgbm9kZSwgaW5Mb3dOb2RlLCBpbkhpZ2hOb2RlLCBvdXRMb3dOb2RlLCBvdXRIaWdoTm9kZSwgZG9DbGFtcCB9ID0gdGhpcztcblxuXHRcdGxldCB0ID0gbm9kZS5zdWIoIGluTG93Tm9kZSApLmRpdiggaW5IaWdoTm9kZS5zdWIoIGluTG93Tm9kZSApICk7XG5cblx0XHRpZiAoIGRvQ2xhbXAgPT09IHRydWUgKSB0ID0gdC5jbGFtcCgpO1xuXG5cdFx0cmV0dXJuIHQubXVsKCBvdXRIaWdoTm9kZS5zdWIoIG91dExvd05vZGUgKSApLmFkZCggb3V0TG93Tm9kZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSZW1hcE5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHJlbWFwIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSB0aGF0IHNob3VsZCBiZSByZW1hcHBlZC5cbiAqIEBwYXJhbSB7Tm9kZX0gaW5Mb3dOb2RlIC0gVGhlIHNvdXJjZSBvciBjdXJyZW50IGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7Tm9kZX0gaW5IaWdoTm9kZSAtIFRoZSBzb3VyY2Ugb3IgY3VycmVudCB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge05vZGV9IFtvdXRMb3dOb2RlPWZsb2F0KDApXSAtIFRoZSB0YXJnZXQgbG93ZXIgYm91bmQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtOb2RlfSBbb3V0SGlnaE5vZGU9ZmxvYXQoMSldIC0gVGhlIHRhcmdldCB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcmV0dXJucyB7UmVtYXBOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcmVtYXAgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggUmVtYXBOb2RlLCBudWxsLCBudWxsLCB7IGRvQ2xhbXA6IGZhbHNlIH0gKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgcmVtYXAgbm9kZSwgYnV0IHdpdGggZW5hYmxlZCBjbGFtcGluZy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRoYXQgc2hvdWxkIGJlIHJlbWFwcGVkLlxuICogQHBhcmFtIHtOb2RlfSBpbkxvd05vZGUgLSBUaGUgc291cmNlIG9yIGN1cnJlbnQgbG93ZXIgYm91bmQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtOb2RlfSBpbkhpZ2hOb2RlIC0gVGhlIHNvdXJjZSBvciBjdXJyZW50IHVwcGVyIGJvdW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7Tm9kZX0gW291dExvd05vZGU9ZmxvYXQoMCldIC0gVGhlIHRhcmdldCBsb3dlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge05vZGV9IFtvdXRIaWdoTm9kZT1mbG9hdCgxKV0gLSBUaGUgdGFyZ2V0IHVwcGVyIGJvdW5kIG9mIHRoZSByYW5nZS5cbiAqIEByZXR1cm5zIHtSZW1hcE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCByZW1hcENsYW1wID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFJlbWFwTm9kZSApO1xuXG5hZGRNZXRob2RDaGFpbmluZyggJ3JlbWFwJywgcmVtYXAgKTtcbmFkZE1ldGhvZENoYWluaW5nKCAncmVtYXBDbGFtcCcsIHJlbWFwQ2xhbXAgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQ29yZS5qcyc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBjYW4gYmUgdXNlZCB0byBpbXBsZW1lbnQgYmFzaWMgZXhwcmVzc2lvbnMgaW4gc2hhZGVyIGNvZGUuXG4gKiBCYXNpYyBleGFtcGxlcyBmb3IgdGhhdCBhcmUgYHJldHVybmAsIGBjb250aW51ZWAgb3IgYGRpc2NhcmRgIHN0YXRlbWVudHMuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgRXhwcmVzc2lvbk5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0V4cHJlc3Npb25Ob2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZXhwcmVzc2lvbiBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3NuaXBwZXQ9JyddIC0gVGhlIG5hdGl2ZSBjb2RlIHNuaXBwZXQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbbm9kZVR5cGU9J3ZvaWQnXSAtIFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggc25pcHBldCA9ICcnLCBub2RlVHlwZSA9ICd2b2lkJyApIHtcblxuXHRcdHN1cGVyKCBub2RlVHlwZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hdGl2ZSBjb2RlIHNuaXBwZXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0ICcnXG5cdFx0ICovXG5cdFx0dGhpcy5zbmlwcGV0ID0gc25pcHBldDtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIsIG91dHB1dCApIHtcblxuXHRcdGNvbnN0IHR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cdFx0Y29uc3Qgc25pcHBldCA9IHRoaXMuc25pcHBldDtcblxuXHRcdGlmICggdHlwZSA9PT0gJ3ZvaWQnICkge1xuXG5cdFx0XHRidWlsZGVyLmFkZExpbmVGbG93Q29kZSggc25pcHBldCwgdGhpcyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBgKCAkeyBzbmlwcGV0IH0gKWAsIHR5cGUsIG91dHB1dCApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBFeHByZXNzaW9uTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIGV4cHJlc3Npb24gbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc25pcHBldD0nJ10gLSBUaGUgbmF0aXZlIGNvZGUgc25pcHBldC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbm9kZVR5cGU9J3ZvaWQnXSAtIFRoZSBub2RlIHR5cGUuXG4gKiBAcmV0dXJucyB7RXhwcmVzc2lvbk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBleHByZXNzaW9uID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIEV4cHJlc3Npb25Ob2RlICk7XG4iLCJpbXBvcnQgeyBzZWxlY3QgfSBmcm9tICcuLi9tYXRoL0NvbmRpdGlvbmFsTm9kZS5qcyc7XG5pbXBvcnQgeyBleHByZXNzaW9uIH0gZnJvbSAnLi4vY29kZS9FeHByZXNzaW9uTm9kZS5qcyc7XG5pbXBvcnQgeyBhZGRNZXRob2RDaGFpbmluZyB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYGRpc2NhcmRgIHNoYWRlciBvcGVyYXRpb24gaW4gVFNMLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHs/Q29uZGl0aW9uYWxOb2RlfSBjb25kaXRpb25hbCAtIEFuIG9wdGlvbmFsIGNvbmRpdGlvbmFsIG5vZGUuIEl0IGFsbG93cyB0byBkZWNpZGUgd2hldGhlciB0aGUgZGlzY2FyZCBzaG91bGQgYmUgZXhlY3V0ZWQgb3Igbm90LlxuICogQHJldHVybiB7Tm9kZX0gVGhlIGBkaXNjYXJkYCBleHByZXNzaW9uLlxuICovXG5leHBvcnQgY29uc3QgRGlzY2FyZCA9ICggY29uZGl0aW9uYWwgKSA9PiAoIGNvbmRpdGlvbmFsID8gc2VsZWN0KCBjb25kaXRpb25hbCwgZXhwcmVzc2lvbiggJ2Rpc2NhcmQnICkgKSA6IGV4cHJlc3Npb24oICdkaXNjYXJkJyApICkuYXBwZW5kKCk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGByZXR1cm5gIHNoYWRlciBvcGVyYXRpb24gaW4gVFNMLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHJldHVybiB7RXhwcmVzc2lvbk5vZGV9IFRoZSBgcmV0dXJuYCBleHByZXNzaW9uLlxuICovXG5leHBvcnQgY29uc3QgUmV0dXJuID0gKCkgPT4gZXhwcmVzc2lvbiggJ3JldHVybicgKS5hcHBlbmQoKTtcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICdkaXNjYXJkJywgRGlzY2FyZCApO1xuIiwiaW1wb3J0IFRlbXBOb2RlIGZyb20gJy4uL2NvcmUvVGVtcE5vZGUuanMnO1xuaW1wb3J0IHsgYWRkTWV0aG9kQ2hhaW5pbmcsIG5vZGVPYmplY3QgfSBmcm9tICcuLi90c2wvVFNMQ29yZS5qcyc7XG5cbmltcG9ydCB7IE5vQ29sb3JTcGFjZSwgTm9Ub25lTWFwcGluZyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBDb2xvck1hbmFnZW1lbnQgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yTWFuYWdlbWVudC5qcyc7XG5cbi8qKlxuICogTm9ybWFsbHksIHRvbmUgbWFwcGluZyBhbmQgY29sb3IgY29udmVyc2lvbiBoYXBwZW5zIGF1dG9tYXRpY2FsbHlcbiAqIGJlZm9yZSBvdXRwdXR0aW5nIHBpeGVsIHRvbyB0aGUgZGVmYXVsdCAoc2NyZWVuKSBmcmFtZWJ1ZmZlci4gSW4gY2VydGFpblxuICogcG9zdCBwcm9jZXNzaW5nIHNldHVwcyB0aGlzIGhhcHBlbnMgdG8gbGF0ZSBiZWNhdXNlIGNlcnRhaW4gZWZmZWN0c1xuICogcmVxdWlyZSBlLmcuIHNSR0IgaW5wdXQuIEZvciBzdWNoIHNjZW5hcmlvcywgYFJlbmRlck91dHB1dE5vZGVgIGNhbiBiZSB1c2VkXG4gKiB0byBhcHBseSB0b25lIG1hcHBpbmcgYW5kIGNvbG9yIHNwYWNlIGNvbnZlcnNpb24gYXQgYW4gYXJiaXRyYXJ5IHBvaW50XG4gKiBpbiB0aGUgZWZmZWN0IGNoYWluLlxuICpcbiAqIFdoZW4gYXBwbHlpbmcgdG9uZSBtYXBwaW5nIGFuZCBjb2xvciBzcGFjZSBjb252ZXJzaW9uIG1hbnVhbGx5IHdpdGggdGhpcyBub2RlLFxuICogeW91IGhhdmUgdG8gc2V0IHtAbGluayBQb3N0UHJvY2Vzc2luZyNvdXRwdXRDb2xvclRyYW5zZm9ybX0gdG8gYGZhbHNlYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcG9zdFByb2Nlc3NpbmcgPSBuZXcgUG9zdFByb2Nlc3NpbmcoIHJlbmRlcmVyICk7XG4gKiBwb3N0UHJvY2Vzc2luZy5vdXRwdXRDb2xvclRyYW5zZm9ybSA9IGZhbHNlO1xuICpcbiAqIGNvbnN0IHNjZW5lUGFzcyA9IHBhc3MoIHNjZW5lLCBjYW1lcmEgKTtcbiAqIGNvbnN0IG91dHB1dFBhc3MgPSByZW5kZXJPdXRwdXQoIHNjZW5lUGFzcyApO1xuICpcbiAqIHBvc3RQcm9jZXNzaW5nLm91dHB1dE5vZGUgPSBvdXRwdXRQYXNzO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIFRlbXBOb2RlXG4gKi9cbmNsYXNzIFJlbmRlck91dHB1dE5vZGUgZXh0ZW5kcyBUZW1wTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdSZW5kZXJPdXRwdXROb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcmVuZGVyIG91dHB1dCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IGNvbG9yTm9kZSAtIFRoZSBjb2xvciBub2RlIHRvIHByb2Nlc3MuXG5cdCAqIEBwYXJhbSB7P251bWJlcn0gdG9uZU1hcHBpbmcgLSBUaGUgdG9uZSBtYXBwaW5nIHR5cGUuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gb3V0cHV0Q29sb3JTcGFjZSAtIFRoZSBvdXRwdXQgY29sb3Igc3BhY2UuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggY29sb3JOb2RlLCB0b25lTWFwcGluZywgb3V0cHV0Q29sb3JTcGFjZSApIHtcblxuXHRcdHN1cGVyKCAndmVjNCcgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjb2xvciBub2RlIHRvIHByb2Nlc3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yTm9kZSA9IGNvbG9yTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0b25lIG1hcHBpbmcgdHlwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMudG9uZU1hcHBpbmcgPSB0b25lTWFwcGluZztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvdXRwdXQgY29sb3Igc3BhY2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLm91dHB1dENvbG9yU3BhY2UgPSBvdXRwdXRDb2xvclNwYWNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1JlbmRlck91dHB1dE5vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHRzZXR1cCggeyBjb250ZXh0IH0gKSB7XG5cblx0XHRsZXQgb3V0cHV0Tm9kZSA9IHRoaXMuY29sb3JOb2RlIHx8IGNvbnRleHQuY29sb3I7XG5cblx0XHQvLyB0b25lIG1hcHBpbmdcblxuXHRcdGNvbnN0IHRvbmVNYXBwaW5nID0gKCB0aGlzLnRvbmVNYXBwaW5nICE9PSBudWxsID8gdGhpcy50b25lTWFwcGluZyA6IGNvbnRleHQudG9uZU1hcHBpbmcgKSB8fCBOb1RvbmVNYXBwaW5nO1xuXHRcdGNvbnN0IG91dHB1dENvbG9yU3BhY2UgPSAoIHRoaXMub3V0cHV0Q29sb3JTcGFjZSAhPT0gbnVsbCA/IHRoaXMub3V0cHV0Q29sb3JTcGFjZSA6IGNvbnRleHQub3V0cHV0Q29sb3JTcGFjZSApIHx8IE5vQ29sb3JTcGFjZTtcblxuXHRcdGlmICggdG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSB7XG5cblx0XHRcdG91dHB1dE5vZGUgPSBvdXRwdXROb2RlLnRvbmVNYXBwaW5nKCB0b25lTWFwcGluZyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gd29ya2luZyB0byBvdXRwdXQgY29sb3Igc3BhY2VcblxuXHRcdGlmICggb3V0cHV0Q29sb3JTcGFjZSAhPT0gTm9Db2xvclNwYWNlICYmIG91dHB1dENvbG9yU3BhY2UgIT09IENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApIHtcblxuXHRcdFx0b3V0cHV0Tm9kZSA9IG91dHB1dE5vZGUud29ya2luZ1RvQ29sb3JTcGFjZSggb3V0cHV0Q29sb3JTcGFjZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dE5vZGU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlbmRlck91dHB1dE5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHBvc3Rlcml6ZSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBjb2xvciAtIFRoZSBjb2xvciBub2RlIHRvIHByb2Nlc3MuXG4gKiBAcGFyYW0gez9udW1iZXJ9IFt0b25lTWFwcGluZz1udWxsXSAtIFRoZSB0b25lIG1hcHBpbmcgdHlwZS5cbiAqIEBwYXJhbSB7P3N0cmluZ30gW291dHB1dENvbG9yU3BhY2U9bnVsbF0gLSBUaGUgb3V0cHV0IGNvbG9yIHNwYWNlLlxuICogQHJldHVybnMge1JlbmRlck91dHB1dE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXJPdXRwdXQgPSAoIGNvbG9yLCB0b25lTWFwcGluZyA9IG51bGwsIG91dHB1dENvbG9yU3BhY2UgPSBudWxsICkgPT4gbm9kZU9iamVjdCggbmV3IFJlbmRlck91dHB1dE5vZGUoIG5vZGVPYmplY3QoIGNvbG9yICksIHRvbmVNYXBwaW5nLCBvdXRwdXRDb2xvclNwYWNlICkgKTtcblxuYWRkTWV0aG9kQ2hhaW5pbmcoICdyZW5kZXJPdXRwdXQnLCByZW5kZXJPdXRwdXQgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4vTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlT2JqZWN0LCB2YXJ5aW5nIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBzaGFkZXIgYXR0cmlidXRlcyBhcyBub2Rlcy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBBdHRyaWJ1dGVOb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdBdHRyaWJ1dGVOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXR0cmlidXRlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZS5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBub2RlVHlwZSAtIFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYXR0cmlidXRlTmFtZSwgbm9kZVR5cGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIG5vZGVUeXBlICk7XG5cblx0XHQvKipcblx0XHQgKiBgQXR0cmlidXRlTm9kZWAgc2V0cyB0aGlzIHByb3BlcnR5IHRvIGB0cnVlYCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2xvYmFsID0gdHJ1ZTtcblxuXHRcdHRoaXMuX2F0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuXG5cdH1cblxuXHRnZXRIYXNoKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTmFtZSggYnVpbGRlciApO1xuXG5cdH1cblxuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdGxldCBub2RlVHlwZSA9IHRoaXMubm9kZVR5cGU7XG5cblx0XHRpZiAoIG5vZGVUeXBlID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVOYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGVOYW1lKCBidWlsZGVyICk7XG5cblx0XHRcdGlmICggYnVpbGRlci5oYXNHZW9tZXRyeUF0dHJpYnV0ZSggYXR0cmlidXRlTmFtZSApICkge1xuXG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGJ1aWxkZXIuZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICk7XG5cblx0XHRcdFx0bm9kZVR5cGUgPSBidWlsZGVyLmdldFR5cGVGcm9tQXR0cmlidXRlKCBhdHRyaWJ1dGUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRub2RlVHlwZSA9ICdmbG9hdCc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBub2RlVHlwZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGF0dHJpYnV0ZSBuYW1lIHRvIHRoZSBnaXZlbiB2YWx1ZS4gVGhlIG1ldGhvZCBjYW4gYmVcblx0ICogb3ZlcndyaXR0ZW4gaW4gZGVyaXZlZCBjbGFzc2VzIGlmIHRoZSBmaW5hbCBuYW1lIG11c3QgYmUgY29tcHV0ZWRcblx0ICogYW5hbHl0aWNhbGx5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge0F0dHJpYnV0ZU5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdHNldEF0dHJpYnV0ZU5hbWUoIGF0dHJpYnV0ZU5hbWUgKSB7XG5cblx0XHR0aGlzLl9hdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlTmFtZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYXR0cmlidXRlIG5hbWUgb2YgdGhpcyBub2RlLiBUaGUgbWV0aG9kIGNhbiBiZVxuXHQgKiBvdmVyd3JpdHRlbiBpbiBkZXJpdmVkIGNsYXNzZXMgaWYgdGhlIGZpbmFsIG5hbWUgbXVzdCBiZSBjb21wdXRlZFxuXHQgKiBhbmFseXRpY2FsbHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGF0dHJpYnV0ZSBuYW1lLlxuXHQgKi9cblx0Z2V0QXR0cmlidXRlTmFtZSggLypidWlsZGVyKi8gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fYXR0cmlidXRlTmFtZTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBhdHRyaWJ1dGVOYW1lID0gdGhpcy5nZXRBdHRyaWJ1dGVOYW1lKCBidWlsZGVyICk7XG5cdFx0Y29uc3Qgbm9kZVR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cdFx0Y29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBidWlsZGVyLmhhc0dlb21ldHJ5QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICk7XG5cblx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBidWlsZGVyLmdlb21ldHJ5LmdldEF0dHJpYnV0ZSggYXR0cmlidXRlTmFtZSApO1xuXHRcdFx0Y29uc3QgYXR0cmlidXRlVHlwZSA9IGJ1aWxkZXIuZ2V0VHlwZUZyb21BdHRyaWJ1dGUoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHRjb25zdCBub2RlQXR0cmlidXRlID0gYnVpbGRlci5nZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUgKTtcblxuXHRcdFx0aWYgKCBidWlsZGVyLnNoYWRlclN0YWdlID09PSAndmVydGV4JyApIHtcblxuXHRcdFx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIG5vZGVBdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlVHlwZSwgbm9kZVR5cGUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCBub2RlVmFyeWluZyA9IHZhcnlpbmcoIHRoaXMgKTtcblxuXHRcdFx0XHRyZXR1cm4gbm9kZVZhcnlpbmcuYnVpbGQoIGJ1aWxkZXIsIG5vZGVUeXBlICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggYEF0dHJpYnV0ZU5vZGU6IFZlcnRleCBhdHRyaWJ1dGUgXCIkeyBhdHRyaWJ1dGVOYW1lIH1cIiBub3QgZm91bmQgb24gZ2VvbWV0cnkuYCApO1xuXG5cdFx0XHRyZXR1cm4gYnVpbGRlci5nZW5lcmF0ZUNvbnN0KCBub2RlVHlwZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5zZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdGRhdGEuZ2xvYmFsID0gdGhpcy5nbG9iYWw7XG5cdFx0ZGF0YS5fYXR0cmlidXRlTmFtZSA9IHRoaXMuX2F0dHJpYnV0ZU5hbWU7XG5cblx0fVxuXG5cdGRlc2VyaWFsaXplKCBkYXRhICkge1xuXG5cdFx0c3VwZXIuZGVzZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdHRoaXMuZ2xvYmFsID0gZGF0YS5nbG9iYWw7XG5cdFx0dGhpcy5fYXR0cmlidXRlTmFtZSA9IGRhdGEuX2F0dHJpYnV0ZU5hbWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEF0dHJpYnV0ZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhbiBhdHRyaWJ1dGUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbm9kZVR5cGVdIC0gVGhlIG5vZGUgdHlwZS5cbiAqIEByZXR1cm5zIHtBdHRyaWJ1dGVOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYXR0cmlidXRlID0gKCBuYW1lLCBub2RlVHlwZSApID0+IG5vZGVPYmplY3QoIG5ldyBBdHRyaWJ1dGVOb2RlKCBuYW1lLCBub2RlVHlwZSApICk7XG4iLCJpbXBvcnQgeyBhdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0F0dHJpYnV0ZU5vZGUuanMnO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gdXYgYXR0cmlidXRlIG5vZGUgd2l0aCB0aGUgZ2l2ZW4gaW5kZXguXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gW2luZGV4PTBdIC0gVGhlIHV2IGluZGV4LlxuICogQHJldHVybiB7QXR0cmlidXRlTm9kZTx2ZWMyPn0gVGhlIHV2IGF0dHJpYnV0ZSBub2RlLlxuICovXG5leHBvcnQgY29uc3QgdXYgPSAoIGluZGV4ID0gMCApID0+IGF0dHJpYnV0ZSggJ3V2JyArICggaW5kZXggPiAwID8gaW5kZXggOiAnJyApLCAndmVjMicgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogQSBub2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgZGltZW5zaW9ucyBvZiBhIHRleHR1cmUuIFRoZSB0ZXh0dXJlIHNpemUgaXNcbiAqIHJldHJpZXZlZCBpbiB0aGUgc2hhZGVyIHZpYSBidWlsdC1pbiBzaGFkZXIgZnVuY3Rpb25zIGxpa2UgYHRleHR1cmVEaW1lbnNpb25zKClgXG4gKiBvciBgdGV4dHVyZVNpemUoKWAuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgVGV4dHVyZVNpemVOb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdUZXh0dXJlU2l6ZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB0ZXh0dXJlIHNpemUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlTm9kZX0gdGV4dHVyZU5vZGUgLSBBIHRleHR1cmUgbm9kZSB3aGljaCBzaXplIHNob3VsZCBiZSByZXRyaWV2ZWQuXG5cdCAqIEBwYXJhbSB7P05vZGU8aW50Pn0gW2xldmVsTm9kZT1udWxsXSAtIEEgbGV2ZWwgbm9kZSB3aGljaCBkZWZpbmVzIHRoZSByZXF1ZXN0ZWQgbWlwLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHRleHR1cmVOb2RlLCBsZXZlbE5vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoICd1dmVjMicgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNUZXh0dXJlU2l6ZU5vZGUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSB0ZXh0dXJlIG5vZGUgd2hpY2ggc2l6ZSBzaG91bGQgYmUgcmV0cmlldmVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1RleHR1cmVOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMudGV4dHVyZU5vZGUgPSB0ZXh0dXJlTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgbGV2ZWwgbm9kZSB3aGljaCBkZWZpbmVzIHRoZSByZXF1ZXN0ZWQgbWlwLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGU8aW50Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5sZXZlbE5vZGUgPSBsZXZlbE5vZGU7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyLCBvdXRwdXQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydHkgPSB0aGlzLnRleHR1cmVOb2RlLmJ1aWxkKCBidWlsZGVyLCAncHJvcGVydHknICk7XG5cdFx0Y29uc3QgbGV2ZWwgPSB0aGlzLmxldmVsTm9kZSA9PT0gbnVsbCA/ICcwJyA6IHRoaXMubGV2ZWxOb2RlLmJ1aWxkKCBidWlsZGVyLCAnaW50JyApO1xuXG5cdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBgJHsgYnVpbGRlci5nZXRNZXRob2QoICd0ZXh0dXJlRGltZW5zaW9ucycgKSB9KCAkeyB0ZXh0dXJlUHJvcGVydHkgfSwgJHsgbGV2ZWwgfSApYCwgdGhpcy5nZXROb2RlVHlwZSggYnVpbGRlciApLCBvdXRwdXQgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGV4dHVyZVNpemVOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSB0ZXh0dXJlIHNpemUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7VGV4dHVyZU5vZGV9IHRleHR1cmVOb2RlIC0gQSB0ZXh0dXJlIG5vZGUgd2hpY2ggc2l6ZSBzaG91bGQgYmUgcmV0cmlldmVkLlxuICogQHBhcmFtIHs/Tm9kZTxpbnQ+fSBbbGV2ZWxOb2RlPW51bGxdIC0gQSBsZXZlbCBub2RlIHdoaWNoIGRlZmluZXMgdGhlIHJlcXVlc3RlZCBtaXAuXG4gKiBAcmV0dXJucyB7VGV4dHVyZVNpemVOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdGV4dHVyZVNpemUgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggVGV4dHVyZVNpemVOb2RlICk7XG4iLCJpbXBvcnQgVW5pZm9ybU5vZGUgZnJvbSAnLi4vY29yZS9Vbmlmb3JtTm9kZS5qcyc7XG5pbXBvcnQgeyBOb2RlVXBkYXRlVHlwZSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWwgdHlwZSBvZiB1bmlmb3JtIG5vZGUgdGhhdCBjb21wdXRlcyB0aGVcbiAqIG1heGltdW0gbWlwbWFwIGxldmVsIGZvciBhIGdpdmVuIHRleHR1cmUgbm9kZS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbGV2ZWwgPSBtYXhNaXBMZXZlbCggdGV4dHVyZU5vZGUgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBVbmlmb3JtTm9kZVxuICovXG5jbGFzcyBNYXhNaXBMZXZlbE5vZGUgZXh0ZW5kcyBVbmlmb3JtTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdNYXhNaXBMZXZlbE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtYXggbWlwIGxldmVsIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZU5vZGV9IHRleHR1cmVOb2RlIC0gVGhlIHRleHR1cmUgbm9kZSB0byBjb21wdXRlIHRoZSBtYXggbWlwIGxldmVsIGZvci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB0ZXh0dXJlTm9kZSApIHtcblxuXHRcdHN1cGVyKCAwICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGV4dHVyZSBub2RlIHRvIGNvbXB1dGUgdGhlIG1heCBtaXAgbGV2ZWwgZm9yLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7VGV4dHVyZU5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5fdGV4dHVyZU5vZGUgPSB0ZXh0dXJlTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBgdXBkYXRlVHlwZWAgaXMgc2V0IHRvIGBOb2RlVXBkYXRlVHlwZS5GUkFNRWAgc2luY2UgdGhlIG5vZGUgdXBkYXRlc1xuXHRcdCAqIHRoZSB0ZXh0dXJlIG9uY2UgcGVyIGZyYW1lIGluIGl0cyB7QGxpbmsgTWF4TWlwTGV2ZWxOb2RlI3VwZGF0ZX0gbWV0aG9kLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnZnJhbWUnXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVUeXBlID0gTm9kZVVwZGF0ZVR5cGUuRlJBTUU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgdGV4dHVyZSBub2RlIHRvIGNvbXB1dGUgdGhlIG1heCBtaXAgbGV2ZWwgZm9yLlxuXHQgKlxuXHQgKiBAcmVhZG9ubHlcblx0ICogQHR5cGUge1RleHR1cmVOb2RlfVxuXHQgKi9cblx0Z2V0IHRleHR1cmVOb2RlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3RleHR1cmVOb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIHRleHR1cmUuXG5cdCAqXG5cdCAqIEByZWFkb25seVxuXHQgKiBAdHlwZSB7VGV4dHVyZX1cblx0ICovXG5cdGdldCB0ZXh0dXJlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3RleHR1cmVOb2RlLnZhbHVlO1xuXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gdGhpcy50ZXh0dXJlO1xuXHRcdGNvbnN0IGltYWdlcyA9IHRleHR1cmUuaW1hZ2VzO1xuXHRcdGNvbnN0IGltYWdlID0gKCBpbWFnZXMgJiYgaW1hZ2VzLmxlbmd0aCA+IDAgKSA/ICggKCBpbWFnZXNbIDAgXSAmJiBpbWFnZXNbIDAgXS5pbWFnZSApIHx8IGltYWdlc1sgMCBdICkgOiB0ZXh0dXJlLmltYWdlO1xuXG5cdFx0aWYgKCBpbWFnZSAmJiBpbWFnZS53aWR0aCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGltYWdlO1xuXG5cdFx0XHR0aGlzLnZhbHVlID0gTWF0aC5sb2cyKCBNYXRoLm1heCggd2lkdGgsIGhlaWdodCApICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1heE1pcExldmVsTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgbWF4IG1pcCBsZXZlbCBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtUZXh0dXJlTm9kZX0gdGV4dHVyZU5vZGUgLSBUaGUgdGV4dHVyZSBub2RlIHRvIGNvbXB1dGUgdGhlIG1heCBtaXAgbGV2ZWwgZm9yLlxuICogQHJldHVybnMge01heE1pcExldmVsTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IG1heE1pcExldmVsID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1heE1pcExldmVsTm9kZSApO1xuIiwiaW1wb3J0IFVuaWZvcm1Ob2RlLCB7IHVuaWZvcm0gfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Ob2RlLmpzJztcbmltcG9ydCB7IHV2IH0gZnJvbSAnLi9VVi5qcyc7XG5pbXBvcnQgeyB0ZXh0dXJlU2l6ZSB9IGZyb20gJy4vVGV4dHVyZVNpemVOb2RlLmpzJztcbmltcG9ydCB7IGNvbG9yU3BhY2VUb1dvcmtpbmcgfSBmcm9tICcuLi9kaXNwbGF5L0NvbG9yU3BhY2VOb2RlLmpzJztcbmltcG9ydCB7IGV4cHJlc3Npb24gfSBmcm9tICcuLi9jb2RlL0V4cHJlc3Npb25Ob2RlLmpzJztcbmltcG9ydCB7IG1heE1pcExldmVsIH0gZnJvbSAnLi4vdXRpbHMvTWF4TWlwTGV2ZWxOb2RlLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSwgdmVjMywgbm9kZU9iamVjdCwgaW50IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgTm9kZVVwZGF0ZVR5cGUgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cy5qcyc7XG5cbmltcG9ydCB7IEludFR5cGUsIFVuc2lnbmVkSW50VHlwZSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogVGhpcyB0eXBlIG9mIHVuaWZvcm0gbm9kZSByZXByZXNlbnRzIGEgMkQgdGV4dHVyZS5cbiAqXG4gKiBAYXVnbWVudHMgVW5pZm9ybU5vZGVcbiAqL1xuY2xhc3MgVGV4dHVyZU5vZGUgZXh0ZW5kcyBVbmlmb3JtTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdUZXh0dXJlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHRleHR1cmUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB2YWx1ZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0gez9Ob2RlPHZlYzJ8dmVjMz59IFt1dk5vZGU9bnVsbF0gLSBUaGUgdXYgbm9kZS5cblx0ICogQHBhcmFtIHs/Tm9kZTxpbnQ+fSBbbGV2ZWxOb2RlPW51bGxdIC0gVGhlIGxldmVsIG5vZGUuXG5cdCAqIEBwYXJhbSB7P05vZGU8ZmxvYXQ+fSBbYmlhc05vZGU9bnVsbF0gLSBUaGUgYmlhcyBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHZhbHVlLCB1dk5vZGUgPSBudWxsLCBsZXZlbE5vZGUgPSBudWxsLCBiaWFzTm9kZSA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggdmFsdWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNUZXh0dXJlTm9kZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPHZlYzJ8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudXZOb2RlID0gdXZOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgbWlwIGxldmVsIHRoYXQgc2hvdWxkIGJlIHNlbGVjdGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGludD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubGV2ZWxOb2RlID0gbGV2ZWxOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgYmlhcyB0byBiZSBhcHBsaWVkIGR1cmluZyBsZXZlbC1vZi1kZXRhaWwgY29tcHV0YXRpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJpYXNOb2RlID0gYmlhc05vZGU7XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIGEgcmVmZXJlbmNlIHZhbHVlIGEgdGV4dHVyZSBzYW1wbGUgaXMgY29tcGFyZWQgdG8uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNvbXBhcmVOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gdXNpbmcgdGV4dHVyZSBhcnJheXMsIHRoZSBkZXB0aCBub2RlIGRlZmluZXMgdGhlIGxheWVyIHRvIHNlbGVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxpbnQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmRlcHRoTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBXaGVuIGRlZmluZWQsIGEgdGV4dHVyZSBpcyBzYW1wbGVkIHVzaW5nIGV4cGxpY2l0IGdyYWRpZW50cy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/QXJyYXk8Tm9kZTx2ZWMyPj59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZ3JhZE5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0ZXh0dXJlIHZhbHVlcyBzaG91bGQgYmUgc2FtcGxlZCBvciBmZXRjaGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuc2FtcGxlciA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSB1diB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggc2hvdWxkIGJlXG5cdFx0ICogYXV0b21hdGljYWxseSB1cGRhdGVkIG9yIG5vdC4gVXNlIGBzZXRVcGRhdGVNYXRyaXgoKWBcblx0XHQgKiBpZiB5b3Ugd2FudCB0byBjaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVNYXRyaXggPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIEJ5IGRlZmF1bHQgdGhlIGB1cGRhdGUoKWAgbWV0aG9kIGlzIG5vdCBleGVjdXRlZC4gYHNldFVwZGF0ZU1hdHJpeCgpYFxuXHRcdCAqIHNldHMgdGhlIHZhbHVlIHRvIGBmcmFtZWAgd2hlbiB0aGUgdXYgdHJhbnNmb3JtYXRpb24gbWF0cml4IHNob3VsZFxuXHRcdCAqIGF1dG9tYXRpY2FsbHkgYmUgdXBkYXRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ25vbmUnXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVUeXBlID0gTm9kZVVwZGF0ZVR5cGUuTk9ORTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZWZlcmVuY2Ugbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5yZWZlcmVuY2VOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHZhbHVlIGlzIHN0b3JlZCBpbiBhIHByaXZhdGUgcHJvcGVydHkuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtUZXh0dXJlfVxuXHRcdCAqL1xuXHRcdHRoaXMuX3ZhbHVlID0gdmFsdWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdW5pZm9ybSBub2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgdXYgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P1VuaWZvcm1Ob2RlPG1hdDM+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX21hdHJpeFVuaWZvcm0gPSBudWxsO1xuXG5cdFx0dGhpcy5zZXRVcGRhdGVNYXRyaXgoIHV2Tm9kZSA9PT0gbnVsbCApO1xuXG5cdH1cblxuXHRzZXQgdmFsdWUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLnJlZmVyZW5jZU5vZGUgKSB7XG5cblx0XHRcdHRoaXMucmVmZXJlbmNlTm9kZS52YWx1ZSA9IHZhbHVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5fdmFsdWUgPSB2YWx1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSB0ZXh0dXJlIHZhbHVlLlxuXHQgKlxuXHQgKiBAdHlwZSB7VGV4dHVyZX1cblx0ICovXG5cdGdldCB2YWx1ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnJlZmVyZW5jZU5vZGUgPyB0aGlzLnJlZmVyZW5jZU5vZGUudmFsdWUgOiB0aGlzLl92YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHNpbmNlIHRoZSB1bmlmb3JtIGhhc2ggaXMgZGVmaW5lZCBieSB0aGUgdGV4dHVyZSdzIFVVSUQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVuaWZvcm0gaGFzaC5cblx0ICovXG5cdGdldFVuaWZvcm1IYXNoKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiB0aGlzLnZhbHVlLnV1aWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiBzaW5jZSB0aGUgbm9kZSB0eXBlIGlzIGluZmVycmVkIGZyb20gdGhlIHRleHR1cmUgdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Z2V0Tm9kZVR5cGUoIC8qYnVpbGRlciovICkge1xuXG5cdFx0aWYgKCB0aGlzLnZhbHVlLmlzRGVwdGhUZXh0dXJlID09PSB0cnVlICkgcmV0dXJuICdmbG9hdCc7XG5cblx0XHRpZiAoIHRoaXMudmFsdWUudHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlICkge1xuXG5cdFx0XHRyZXR1cm4gJ3V2ZWM0JztcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMudmFsdWUudHlwZSA9PT0gSW50VHlwZSApIHtcblxuXHRcdFx0cmV0dXJuICdpdmVjNCc7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gJ3ZlYzQnO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byByZXR1cm4gYSBmaXhlZCB2YWx1ZSBgJ3RleHR1cmUnYC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgaW5wdXQgdHlwZS5cblx0ICovXG5cdGdldElucHV0VHlwZSggLypidWlsZGVyKi8gKSB7XG5cblx0XHRyZXR1cm4gJ3RleHR1cmUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGRlZmF1bHQgdXZzIGJhc2VkIG9uIHRoZSBjdXJyZW50IHRleHR1cmUncyBjaGFubmVsLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBdHRyaWJ1dGVOb2RlPHZlYzI+fSBUaGUgZGVmYXVsdCB1dnMuXG5cdCAqL1xuXHRnZXREZWZhdWx0VVYoKSB7XG5cblx0XHRyZXR1cm4gdXYoIHRoaXMudmFsdWUuY2hhbm5lbCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXR0ZW4gdG8gYWx3YXlzIHJldHVybiB0aGUgdGV4dHVyZSByZWZlcmVuY2Ugb2YgdGhlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7YW55fSBzdGF0ZSAtIFRoaXMgbWV0aG9kIGNhbiBiZSBpbnZvY2F0ZWQgaW4gZGlmZmVyZW50IGNvbnRleHRzIHNvIGBzdGF0ZWAgY2FuIHJlZmVyIHRvIGFueSBvYmplY3QgdHlwZS5cblx0ICogQHJldHVybiB7VGV4dHVyZX0gVGhlIHRleHR1cmUgcmVmZXJlbmNlLlxuXHQgKi9cblx0dXBkYXRlUmVmZXJlbmNlKCAvKnN0YXRlKi8gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy52YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRyYW5zZm9ybXMgdGhlIGdpdmVuIHV2IG5vZGUgd2l0aCB0aGUgdGV4dHVyZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gdXZOb2RlIC0gVGhlIHV2IG5vZGUgdG8gdHJhbnNmb3JtLlxuXHQgKiBAcmV0dXJuIHtOb2RlfSBUaGUgdHJhbnNmb3JtZWQgdXYgbm9kZS5cblx0ICovXG5cdGdldFRyYW5zZm9ybWVkVVYoIHV2Tm9kZSApIHtcblxuXHRcdGlmICggdGhpcy5fbWF0cml4VW5pZm9ybSA9PT0gbnVsbCApIHRoaXMuX21hdHJpeFVuaWZvcm0gPSB1bmlmb3JtKCB0aGlzLnZhbHVlLm1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuX21hdHJpeFVuaWZvcm0ubXVsKCB2ZWMzKCB1dk5vZGUsIDEgKSApLnh5O1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB3aGV0aGVyIHRoZSB1diB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggc2hvdWxkIGF1dG9tYXRpY2FsbHkgYmUgdXBkYXRlZCBvciBub3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBUaGUgdXBkYXRlIHRvZ2dsZS5cblx0ICogQHJldHVybiB7VGV4dHVyZU5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdHNldFVwZGF0ZU1hdHJpeCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZU1hdHJpeCA9IHZhbHVlO1xuXHRcdHRoaXMudXBkYXRlVHlwZSA9IHZhbHVlID8gTm9kZVVwZGF0ZVR5cGUuUkVOREVSIDogTm9kZVVwZGF0ZVR5cGUuTk9ORTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSB1diBub2RlLiBEZXBlbmRpbmcgb24gdGhlIGJhY2tlbmQgYXMgd2VsbCBhcyB0ZXh0dXJlJ3MgaW1hZ2UgYW5kIHR5cGUsIGl0IG1pZ2h0IGJlIG5lY2Vzc2FyeVxuXHQgKiB0byBtb2RpZnkgdGhlIHV2IG5vZGUgZm9yIGNvcnJlY3Qgc2FtcGxpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gdXZOb2RlIC0gVGhlIHV2IG5vZGUgdG8gc2V0dXAuXG5cdCAqIEByZXR1cm4ge05vZGV9IFRoZSB1cGRhdGVkIHV2IG5vZGUuXG5cdCAqL1xuXHRzZXR1cFVWKCBidWlsZGVyLCB1dk5vZGUgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gdGhpcy52YWx1ZTtcblxuXHRcdGlmICggYnVpbGRlci5pc0ZsaXBZKCkgJiYgKCAoIHRleHR1cmUuaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCAmJiB0ZXh0dXJlLmZsaXBZID09PSB0cnVlICkgfHwgdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IHRydWUgfHwgdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSA9PT0gdHJ1ZSB8fCB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlID09PSB0cnVlICkgKSB7XG5cblx0XHRcdGlmICggdGhpcy5zYW1wbGVyICkge1xuXG5cdFx0XHRcdHV2Tm9kZSA9IHV2Tm9kZS5mbGlwWSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHV2Tm9kZSA9IHV2Tm9kZS5zZXRZKCBpbnQoIHRleHR1cmVTaXplKCB0aGlzLCB0aGlzLmxldmVsTm9kZSApLnkgKS5zdWIoIHV2Tm9kZS55ICkuc3ViKCAxICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHV2Tm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0ZXh0dXJlIG5vZGUgYnkgcHJlcGFyaW5nIHRoZSBpbnRlcm5hbCBub2RlcyBmb3IgY29kZSBnZW5lcmF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBwcm9wZXJ0aWVzID0gYnVpbGRlci5nZXROb2RlUHJvcGVydGllcyggdGhpcyApO1xuXHRcdHByb3BlcnRpZXMucmVmZXJlbmNlTm9kZSA9IHRoaXMucmVmZXJlbmNlTm9kZTtcblxuXHRcdC8vXG5cblx0XHRjb25zdCB0ZXh0dXJlID0gdGhpcy52YWx1ZTtcblxuXHRcdGlmICggISB0ZXh0dXJlIHx8IHRleHR1cmUuaXNUZXh0dXJlICE9PSB0cnVlICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5UU0w6IGB0ZXh0dXJlKCB2YWx1ZSApYCBmdW5jdGlvbiBleHBlY3RzIGEgdmFsaWQgaW5zdGFuY2Ugb2YgVEhSRUUuVGV4dHVyZSgpLicgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRsZXQgdXZOb2RlID0gdGhpcy51dk5vZGU7XG5cblx0XHRpZiAoICggdXZOb2RlID09PSBudWxsIHx8IGJ1aWxkZXIuY29udGV4dC5mb3JjZVVWQ29udGV4dCA9PT0gdHJ1ZSApICYmIGJ1aWxkZXIuY29udGV4dC5nZXRVViApIHtcblxuXHRcdFx0dXZOb2RlID0gYnVpbGRlci5jb250ZXh0LmdldFVWKCB0aGlzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoICEgdXZOb2RlICkgdXZOb2RlID0gdGhpcy5nZXREZWZhdWx0VVYoKTtcblxuXHRcdGlmICggdGhpcy51cGRhdGVNYXRyaXggPT09IHRydWUgKSB7XG5cblx0XHRcdHV2Tm9kZSA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRVViggdXZOb2RlICk7XG5cblx0XHR9XG5cblx0XHR1dk5vZGUgPSB0aGlzLnNldHVwVVYoIGJ1aWxkZXIsIHV2Tm9kZSApO1xuXG5cdFx0Ly9cblxuXHRcdGxldCBsZXZlbE5vZGUgPSB0aGlzLmxldmVsTm9kZTtcblxuXHRcdGlmICggbGV2ZWxOb2RlID09PSBudWxsICYmIGJ1aWxkZXIuY29udGV4dC5nZXRUZXh0dXJlTGV2ZWwgKSB7XG5cblx0XHRcdGxldmVsTm9kZSA9IGJ1aWxkZXIuY29udGV4dC5nZXRUZXh0dXJlTGV2ZWwoIHRoaXMgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRwcm9wZXJ0aWVzLnV2Tm9kZSA9IHV2Tm9kZTtcblx0XHRwcm9wZXJ0aWVzLmxldmVsTm9kZSA9IGxldmVsTm9kZTtcblx0XHRwcm9wZXJ0aWVzLmJpYXNOb2RlID0gdGhpcy5iaWFzTm9kZTtcblx0XHRwcm9wZXJ0aWVzLmNvbXBhcmVOb2RlID0gdGhpcy5jb21wYXJlTm9kZTtcblx0XHRwcm9wZXJ0aWVzLmdyYWROb2RlID0gdGhpcy5ncmFkTm9kZTtcblx0XHRwcm9wZXJ0aWVzLmRlcHRoTm9kZSA9IHRoaXMuZGVwdGhOb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSB1diBjb2RlIHNuaXBwZXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gdXZOb2RlIC0gVGhlIHV2IG5vZGUgdG8gZ2VuZXJhdGUgY29kZSBmb3IuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGdlbmVyYXRlZCBjb2RlIHNuaXBwZXQuXG5cdCAqL1xuXHRnZW5lcmF0ZVVWKCBidWlsZGVyLCB1dk5vZGUgKSB7XG5cblx0XHRyZXR1cm4gdXZOb2RlLmJ1aWxkKCBidWlsZGVyLCB0aGlzLnNhbXBsZXIgPT09IHRydWUgPyAndmVjMicgOiAnaXZlYzInICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIHNuaXBwZXQgZm9yIHRoZSB0ZXh0dXJlIHNhbXBsaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIHRleHR1cmUgcHJvcGVydHkuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1dlNuaXBwZXQgLSBUaGUgdXYgc25pcHBldC5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBsZXZlbFNuaXBwZXQgLSBUaGUgbGV2ZWwgc25pcHBldC5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBiaWFzU25pcHBldCAtIFRoZSBiaWFzIHNuaXBwZXQuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gZGVwdGhTbmlwcGV0IC0gVGhlIGRlcHRoIHNuaXBwZXQuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gY29tcGFyZVNuaXBwZXQgLSBUaGUgY29tcGFyZSBzbmlwcGV0LlxuXHQgKiBAcGFyYW0gez9BcnJheTxzdHJpbmc+fSBncmFkU25pcHBldCAtIFRoZSBncmFkIHNuaXBwZXQuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGdlbmVyYXRlZCBjb2RlIHNuaXBwZXQuXG5cdCAqL1xuXHRnZW5lcmF0ZVNuaXBwZXQoIGJ1aWxkZXIsIHRleHR1cmVQcm9wZXJ0eSwgdXZTbmlwcGV0LCBsZXZlbFNuaXBwZXQsIGJpYXNTbmlwcGV0LCBkZXB0aFNuaXBwZXQsIGNvbXBhcmVTbmlwcGV0LCBncmFkU25pcHBldCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSB0aGlzLnZhbHVlO1xuXG5cdFx0bGV0IHNuaXBwZXQ7XG5cblx0XHRpZiAoIGxldmVsU25pcHBldCApIHtcblxuXHRcdFx0c25pcHBldCA9IGJ1aWxkZXIuZ2VuZXJhdGVUZXh0dXJlTGV2ZWwoIHRleHR1cmUsIHRleHR1cmVQcm9wZXJ0eSwgdXZTbmlwcGV0LCBsZXZlbFNuaXBwZXQsIGRlcHRoU25pcHBldCApO1xuXG5cdFx0fSBlbHNlIGlmICggYmlhc1NuaXBwZXQgKSB7XG5cblx0XHRcdHNuaXBwZXQgPSBidWlsZGVyLmdlbmVyYXRlVGV4dHVyZUJpYXMoIHRleHR1cmUsIHRleHR1cmVQcm9wZXJ0eSwgdXZTbmlwcGV0LCBiaWFzU25pcHBldCwgZGVwdGhTbmlwcGV0ICk7XG5cblx0XHR9IGVsc2UgaWYgKCBncmFkU25pcHBldCApIHtcblxuXHRcdFx0c25pcHBldCA9IGJ1aWxkZXIuZ2VuZXJhdGVUZXh0dXJlR3JhZCggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGdyYWRTbmlwcGV0LCBkZXB0aFNuaXBwZXQgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGNvbXBhcmVTbmlwcGV0ICkge1xuXG5cdFx0XHRzbmlwcGV0ID0gYnVpbGRlci5nZW5lcmF0ZVRleHR1cmVDb21wYXJlKCB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgY29tcGFyZVNuaXBwZXQsIGRlcHRoU25pcHBldCApO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5zYW1wbGVyID09PSBmYWxzZSApIHtcblxuXHRcdFx0c25pcHBldCA9IGJ1aWxkZXIuZ2VuZXJhdGVUZXh0dXJlTG9hZCggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGRlcHRoU25pcHBldCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c25pcHBldCA9IGJ1aWxkZXIuZ2VuZXJhdGVUZXh0dXJlKCB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgZGVwdGhTbmlwcGV0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgY29kZSBzbmlwcGV0IG9mIHRoZSB0ZXh0dXJlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXQgLSBUaGUgY3VycmVudCBvdXRwdXQuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGdlbmVyYXRlZCBjb2RlIHNuaXBwZXQuXG5cdCAqL1xuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IHRoaXMudmFsdWU7XG5cblx0XHRjb25zdCBwcm9wZXJ0aWVzID0gYnVpbGRlci5nZXROb2RlUHJvcGVydGllcyggdGhpcyApO1xuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0eSA9IHN1cGVyLmdlbmVyYXRlKCBidWlsZGVyLCAncHJvcGVydHknICk7XG5cblx0XHRpZiAoIG91dHB1dCA9PT0gJ3NhbXBsZXInICkge1xuXG5cdFx0XHRyZXR1cm4gdGV4dHVyZVByb3BlcnR5ICsgJ19zYW1wbGVyJztcblxuXHRcdH0gZWxzZSBpZiAoIGJ1aWxkZXIuaXNSZWZlcmVuY2UoIG91dHB1dCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGV4dHVyZVByb3BlcnR5O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3Qgbm9kZURhdGEgPSBidWlsZGVyLmdldERhdGFGcm9tTm9kZSggdGhpcyApO1xuXG5cdFx0XHRsZXQgcHJvcGVydHlOYW1lID0gbm9kZURhdGEucHJvcGVydHlOYW1lO1xuXG5cdFx0XHRpZiAoIHByb3BlcnR5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnN0IHsgdXZOb2RlLCBsZXZlbE5vZGUsIGJpYXNOb2RlLCBjb21wYXJlTm9kZSwgZGVwdGhOb2RlLCBncmFkTm9kZSB9ID0gcHJvcGVydGllcztcblxuXHRcdFx0XHRjb25zdCB1dlNuaXBwZXQgPSB0aGlzLmdlbmVyYXRlVVYoIGJ1aWxkZXIsIHV2Tm9kZSApO1xuXHRcdFx0XHRjb25zdCBsZXZlbFNuaXBwZXQgPSBsZXZlbE5vZGUgPyBsZXZlbE5vZGUuYnVpbGQoIGJ1aWxkZXIsICdmbG9hdCcgKSA6IG51bGw7XG5cdFx0XHRcdGNvbnN0IGJpYXNTbmlwcGV0ID0gYmlhc05vZGUgPyBiaWFzTm9kZS5idWlsZCggYnVpbGRlciwgJ2Zsb2F0JyApIDogbnVsbDtcblx0XHRcdFx0Y29uc3QgZGVwdGhTbmlwcGV0ID0gZGVwdGhOb2RlID8gZGVwdGhOb2RlLmJ1aWxkKCBidWlsZGVyLCAnaW50JyApIDogbnVsbDtcblx0XHRcdFx0Y29uc3QgY29tcGFyZVNuaXBwZXQgPSBjb21wYXJlTm9kZSA/IGNvbXBhcmVOb2RlLmJ1aWxkKCBidWlsZGVyLCAnZmxvYXQnICkgOiBudWxsO1xuXHRcdFx0XHRjb25zdCBncmFkU25pcHBldCA9IGdyYWROb2RlID8gWyBncmFkTm9kZVsgMCBdLmJ1aWxkKCBidWlsZGVyLCAndmVjMicgKSwgZ3JhZE5vZGVbIDEgXS5idWlsZCggYnVpbGRlciwgJ3ZlYzInICkgXSA6IG51bGw7XG5cblx0XHRcdFx0Y29uc3Qgbm9kZVZhciA9IGJ1aWxkZXIuZ2V0VmFyRnJvbU5vZGUoIHRoaXMgKTtcblxuXHRcdFx0XHRwcm9wZXJ0eU5hbWUgPSBidWlsZGVyLmdldFByb3BlcnR5TmFtZSggbm9kZVZhciApO1xuXG5cdFx0XHRcdGNvbnN0IHNuaXBwZXQgPSB0aGlzLmdlbmVyYXRlU25pcHBldCggYnVpbGRlciwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGxldmVsU25pcHBldCwgYmlhc1NuaXBwZXQsIGRlcHRoU25pcHBldCwgY29tcGFyZVNuaXBwZXQsIGdyYWRTbmlwcGV0ICk7XG5cblx0XHRcdFx0YnVpbGRlci5hZGRMaW5lRmxvd0NvZGUoIGAke3Byb3BlcnR5TmFtZX0gPSAke3NuaXBwZXR9YCwgdGhpcyApO1xuXG5cdFx0XHRcdG5vZGVEYXRhLnNuaXBwZXQgPSBzbmlwcGV0O1xuXHRcdFx0XHRub2RlRGF0YS5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IHNuaXBwZXQgPSBwcm9wZXJ0eU5hbWU7XG5cdFx0XHRjb25zdCBub2RlVHlwZSA9IHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdFx0aWYgKCBidWlsZGVyLm5lZWRzVG9Xb3JraW5nQ29sb3JTcGFjZSggdGV4dHVyZSApICkge1xuXG5cdFx0XHRcdHNuaXBwZXQgPSBjb2xvclNwYWNlVG9Xb3JraW5nKCBleHByZXNzaW9uKCBzbmlwcGV0LCBub2RlVHlwZSApLCB0ZXh0dXJlLmNvbG9yU3BhY2UgKS5zZXR1cCggYnVpbGRlciApLmJ1aWxkKCBidWlsZGVyLCBub2RlVHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBidWlsZGVyLmZvcm1hdCggc25pcHBldCwgbm9kZVR5cGUsIG91dHB1dCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc2FtcGxlciB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFRoZSBzYW1wbGVyIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7VGV4dHVyZU5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdGV4dHVyZSBub2RlLlxuXHQgKi9cblx0c2V0U2FtcGxlciggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnNhbXBsZXIgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2FtcGxlciB2YWx1ZS5cblx0ICpcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIHNhbXBsZXIgdmFsdWUuXG5cdCAqL1xuXHRnZXRTYW1wbGVyKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2FtcGxlcjtcblxuXHR9XG5cblx0Ly8gQFRPRE86IE1vdmUgdG8gVFNMXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSByMTcyLiBVc2Uge0BsaW5rIFRleHR1cmVOb2RlI3NhbXBsZX0gaW5zdGVhZC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSB1dk5vZGUgLSBUaGUgdXYgbm9kZS5cblx0ICogQHJldHVybiB7VGV4dHVyZU5vZGV9IEEgdGV4dHVyZSBub2RlIHJlcHJlc2VudGluZyB0aGUgdGV4dHVyZSBzYW1wbGUuXG5cdCAqL1xuXHR1diggdXZOb2RlICkgeyAvLyBAZGVwcmVjYXRlZCwgcjE3MlxuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVGV4dHVyZU5vZGU6IC51digpIGhhcyBiZWVuIHJlbmFtZWQuIFVzZSAuc2FtcGxlKCkgaW5zdGVhZC4nICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zYW1wbGUoIHV2Tm9kZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2FtcGxlcyB0aGUgdGV4dHVyZSB3aXRoIHRoZSBnaXZlbiB1diBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IHV2Tm9kZSAtIFRoZSB1diBub2RlLlxuXHQgKiBAcmV0dXJuIHtUZXh0dXJlTm9kZX0gQSB0ZXh0dXJlIG5vZGUgcmVwcmVzZW50aW5nIHRoZSB0ZXh0dXJlIHNhbXBsZS5cblx0ICovXG5cdHNhbXBsZSggdXZOb2RlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZU5vZGUgPSB0aGlzLmNsb25lKCk7XG5cdFx0dGV4dHVyZU5vZGUudXZOb2RlID0gbm9kZU9iamVjdCggdXZOb2RlICk7XG5cdFx0dGV4dHVyZU5vZGUucmVmZXJlbmNlTm9kZSA9IHRoaXMuZ2V0U2VsZigpO1xuXG5cdFx0cmV0dXJuIG5vZGVPYmplY3QoIHRleHR1cmVOb2RlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTYW1wbGVzIGEgYmx1cnJlZCB2ZXJzaW9uIG9mIHRoZSB0ZXh0dXJlIGJ5IGRlZmluaW5nIGFuIGludGVybmFsIGJpYXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGFtb3VudE5vZGUgLSBIb3cgYmx1cnJlZCB0aGUgdGV4dHVyZSBzaG91bGQgYmUuXG5cdCAqIEByZXR1cm4ge1RleHR1cmVOb2RlfSBBIHRleHR1cmUgbm9kZSByZXByZXNlbnRpbmcgdGhlIHRleHR1cmUgc2FtcGxlLlxuXHQgKi9cblx0Ymx1ciggYW1vdW50Tm9kZSApIHtcblxuXHRcdGNvbnN0IHRleHR1cmVOb2RlID0gdGhpcy5jbG9uZSgpO1xuXHRcdHRleHR1cmVOb2RlLmJpYXNOb2RlID0gbm9kZU9iamVjdCggYW1vdW50Tm9kZSApLm11bCggbWF4TWlwTGV2ZWwoIHRleHR1cmVOb2RlICkgKTtcblx0XHR0ZXh0dXJlTm9kZS5yZWZlcmVuY2VOb2RlID0gdGhpcy5nZXRTZWxmKCk7XG5cblx0XHRyZXR1cm4gbm9kZU9iamVjdCggdGV4dHVyZU5vZGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNhbXBsZXMgYSBzcGVjaWZpYyBtaXAgb2YgdGhlIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZTxpbnQ+fSBsZXZlbE5vZGUgLSBUaGUgbWlwIGxldmVsIHRvIHNhbXBsZS5cblx0ICogQHJldHVybiB7VGV4dHVyZU5vZGV9IEEgdGV4dHVyZSBub2RlIHJlcHJlc2VudGluZyB0aGUgdGV4dHVyZSBzYW1wbGUuXG5cdCAqL1xuXHRsZXZlbCggbGV2ZWxOb2RlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZU5vZGUgPSB0aGlzLmNsb25lKCk7XG5cdFx0dGV4dHVyZU5vZGUubGV2ZWxOb2RlID0gbm9kZU9iamVjdCggbGV2ZWxOb2RlICk7XG5cdFx0dGV4dHVyZU5vZGUucmVmZXJlbmNlTm9kZSA9IHRoaXMuZ2V0U2VsZigpO1xuXG5cdFx0cmV0dXJuIG5vZGVPYmplY3QoIHRleHR1cmVOb2RlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0ZXh0dXJlIHNpemUgb2YgdGhlIHJlcXVlc3RlZCBsZXZlbC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlPGludD59IGxldmVsTm9kZSAtIFRoZSBsZXZlbCB0byBjb21wdXRlIHRoZSBzaXplIGZvci5cblx0ICogQHJldHVybiB7VGV4dHVyZVNpemVOb2RlfSBUaGUgdGV4dHVyZSBzaXplLlxuXHQgKi9cblx0c2l6ZSggbGV2ZWxOb2RlICkge1xuXG5cdFx0cmV0dXJuIHRleHR1cmVTaXplKCB0aGlzLCBsZXZlbE5vZGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNhbXBsZXMgdGhlIHRleHR1cmUgd2l0aCB0aGUgZ2l2ZW4gYmlhcy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gYmlhc05vZGUgLSBUaGUgYmlhcyBub2RlLlxuXHQgKiBAcmV0dXJuIHtUZXh0dXJlTm9kZX0gQSB0ZXh0dXJlIG5vZGUgcmVwcmVzZW50aW5nIHRoZSB0ZXh0dXJlIHNhbXBsZS5cblx0ICovXG5cdGJpYXMoIGJpYXNOb2RlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZU5vZGUgPSB0aGlzLmNsb25lKCk7XG5cdFx0dGV4dHVyZU5vZGUuYmlhc05vZGUgPSBub2RlT2JqZWN0KCBiaWFzTm9kZSApO1xuXHRcdHRleHR1cmVOb2RlLnJlZmVyZW5jZU5vZGUgPSB0aGlzLmdldFNlbGYoKTtcblxuXHRcdHJldHVybiBub2RlT2JqZWN0KCB0ZXh0dXJlTm9kZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2FtcGxlcyB0aGUgdGV4dHVyZSBieSBleGVjdXRpbmcgYSBjb21wYXJlIG9wZXJhdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gY29tcGFyZU5vZGUgLSBUaGUgbm9kZSB0aGF0IGRlZmluZXMgdGhlIGNvbXBhcmUgdmFsdWUuXG5cdCAqIEByZXR1cm4ge1RleHR1cmVOb2RlfSBBIHRleHR1cmUgbm9kZSByZXByZXNlbnRpbmcgdGhlIHRleHR1cmUgc2FtcGxlLlxuXHQgKi9cblx0Y29tcGFyZSggY29tcGFyZU5vZGUgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlTm9kZSA9IHRoaXMuY2xvbmUoKTtcblx0XHR0ZXh0dXJlTm9kZS5jb21wYXJlTm9kZSA9IG5vZGVPYmplY3QoIGNvbXBhcmVOb2RlICk7XG5cdFx0dGV4dHVyZU5vZGUucmVmZXJlbmNlTm9kZSA9IHRoaXMuZ2V0U2VsZigpO1xuXG5cdFx0cmV0dXJuIG5vZGVPYmplY3QoIHRleHR1cmVOb2RlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTYW1wbGVzIHRoZSB0ZXh0dXJlIHVzaW5nIGFuIGV4cGxpY2l0IGdyYWRpZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGU8dmVjMj59IGdyYWROb2RlWCAtIFRoZSBncmFkWCBub2RlLlxuXHQgKiBAcGFyYW0ge05vZGU8dmVjMj59IGdyYWROb2RlWSAtIFRoZSBncmFkWSBub2RlLlxuXHQgKiBAcmV0dXJuIHtUZXh0dXJlTm9kZX0gQSB0ZXh0dXJlIG5vZGUgcmVwcmVzZW50aW5nIHRoZSB0ZXh0dXJlIHNhbXBsZS5cblx0ICovXG5cdGdyYWQoIGdyYWROb2RlWCwgZ3JhZE5vZGVZICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZU5vZGUgPSB0aGlzLmNsb25lKCk7XG5cdFx0dGV4dHVyZU5vZGUuZ3JhZE5vZGUgPSBbIG5vZGVPYmplY3QoIGdyYWROb2RlWCApLCBub2RlT2JqZWN0KCBncmFkTm9kZVkgKSBdO1xuXHRcdHRleHR1cmVOb2RlLnJlZmVyZW5jZU5vZGUgPSB0aGlzLmdldFNlbGYoKTtcblxuXHRcdHJldHVybiBub2RlT2JqZWN0KCB0ZXh0dXJlTm9kZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2FtcGxlcyB0aGUgdGV4dHVyZSBieSBkZWZpbmluZyBhIGRlcHRoIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZTxpbnQ+fSBkZXB0aE5vZGUgLSBUaGUgZGVwdGggbm9kZS5cblx0ICogQHJldHVybiB7VGV4dHVyZU5vZGV9IEEgdGV4dHVyZSBub2RlIHJlcHJlc2VudGluZyB0aGUgdGV4dHVyZSBzYW1wbGUuXG5cdCAqL1xuXHRkZXB0aCggZGVwdGhOb2RlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZU5vZGUgPSB0aGlzLmNsb25lKCk7XG5cdFx0dGV4dHVyZU5vZGUuZGVwdGhOb2RlID0gbm9kZU9iamVjdCggZGVwdGhOb2RlICk7XG5cdFx0dGV4dHVyZU5vZGUucmVmZXJlbmNlTm9kZSA9IHRoaXMuZ2V0U2VsZigpO1xuXG5cdFx0cmV0dXJuIG5vZGVPYmplY3QoIHRleHR1cmVOb2RlICk7XG5cblx0fVxuXG5cdC8vIC0tXG5cblx0c2VyaWFsaXplKCBkYXRhICkge1xuXG5cdFx0c3VwZXIuc2VyaWFsaXplKCBkYXRhICk7XG5cblx0XHRkYXRhLnZhbHVlID0gdGhpcy52YWx1ZS50b0pTT04oIGRhdGEubWV0YSApLnV1aWQ7XG5cdFx0ZGF0YS5zYW1wbGVyID0gdGhpcy5zYW1wbGVyO1xuXHRcdGRhdGEudXBkYXRlTWF0cml4ID0gdGhpcy51cGRhdGVNYXRyaXg7XG5cdFx0ZGF0YS51cGRhdGVUeXBlID0gdGhpcy51cGRhdGVUeXBlO1xuXG5cdH1cblxuXHRkZXNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLmRlc2VyaWFsaXplKCBkYXRhICk7XG5cblx0XHR0aGlzLnZhbHVlID0gZGF0YS5tZXRhLnRleHR1cmVzWyBkYXRhLnZhbHVlIF07XG5cdFx0dGhpcy5zYW1wbGVyID0gZGF0YS5zYW1wbGVyO1xuXHRcdHRoaXMudXBkYXRlTWF0cml4ID0gZGF0YS51cGRhdGVNYXRyaXg7XG5cdFx0dGhpcy51cGRhdGVUeXBlID0gZGF0YS51cGRhdGVUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIHVwZGF0ZSBpcyB1c2VkIHRvIGltcGxlbWVudCB0aGUgdXBkYXRlIG9mIHRoZSB1diB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG5cdCAqL1xuXHR1cGRhdGUoKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gdGhpcy52YWx1ZTtcblx0XHRjb25zdCBtYXRyaXhVbmlmb3JtID0gdGhpcy5fbWF0cml4VW5pZm9ybTtcblxuXHRcdGlmICggbWF0cml4VW5pZm9ybSAhPT0gbnVsbCApIG1hdHJpeFVuaWZvcm0udmFsdWUgPSB0ZXh0dXJlLm1hdHJpeDtcblxuXHRcdGlmICggdGV4dHVyZS5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHR0ZXh0dXJlLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQ2xvbmVzIHRoZSB0ZXh0dXJlIG5vZGUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1RleHR1cmVOb2RlfSBUaGUgY2xvbmVkIHRleHR1cmUgbm9kZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0Y29uc3QgbmV3Tm9kZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLnZhbHVlLCB0aGlzLnV2Tm9kZSwgdGhpcy5sZXZlbE5vZGUsIHRoaXMuYmlhc05vZGUgKTtcblx0XHRuZXdOb2RlLnNhbXBsZXIgPSB0aGlzLnNhbXBsZXI7XG5cblx0XHRyZXR1cm4gbmV3Tm9kZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGV4dHVyZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHRleHR1cmUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7VGV4dHVyZX0gdmFsdWUgLSBUaGUgdGV4dHVyZS5cbiAqIEBwYXJhbSB7P05vZGU8dmVjMnx2ZWMzPn0gW3V2Tm9kZT1udWxsXSAtIFRoZSB1diBub2RlLlxuICogQHBhcmFtIHs/Tm9kZTxpbnQ+fSBbbGV2ZWxOb2RlPW51bGxdIC0gVGhlIGxldmVsIG5vZGUuXG4gKiBAcGFyYW0gez9Ob2RlPGZsb2F0Pn0gW2JpYXNOb2RlPW51bGxdIC0gVGhlIGJpYXMgbm9kZS5cbiAqIEByZXR1cm5zIHtUZXh0dXJlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggVGV4dHVyZU5vZGUgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgdGV4dHVyZSBub2RlIHRoYXQgZmV0Y2hlcy9sb2FkcyB0ZXhlbHMgd2l0aG91dCBpbnRlcnBvbGF0aW9uLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtUZXh0dXJlfSB2YWx1ZSAtIFRoZSB0ZXh0dXJlLlxuICogQHBhcmFtIHs/Tm9kZTx2ZWMyfHZlYzM+fSBbdXZOb2RlPW51bGxdIC0gVGhlIHV2IG5vZGUuXG4gKiBAcGFyYW0gez9Ob2RlPGludD59IFtsZXZlbE5vZGU9bnVsbF0gLSBUaGUgbGV2ZWwgbm9kZS5cbiAqIEBwYXJhbSB7P05vZGU8ZmxvYXQ+fSBbYmlhc05vZGU9bnVsbF0gLSBUaGUgYmlhcyBub2RlLlxuICogQHJldHVybnMge1RleHR1cmVOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdGV4dHVyZUxvYWQgPSAoIC4uLnBhcmFtcyApID0+IHRleHR1cmUoIC4uLnBhcmFtcyApLnNldFNhbXBsZXIoIGZhbHNlICk7XG5cbi8vZXhwb3J0IGNvbnN0IHRleHR1cmVMZXZlbCA9ICggdmFsdWUsIHV2LCBsZXZlbCApID0+IHRleHR1cmUoIHZhbHVlLCB1diApLmxldmVsKCBsZXZlbCApO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgdGV4dHVyZSBvciB0ZXh0dXJlIG5vZGUgdG8gYSBzYW1wbGVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtUZXh0dXJlTm9kZXxUZXh0dXJlfSBhVGV4dHVyZSAtIFRoZSB0ZXh0dXJlIG9yIHRleHR1cmUgbm9kZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBzYW1wbGVyID0gKCBhVGV4dHVyZSApID0+ICggYVRleHR1cmUuaXNOb2RlID09PSB0cnVlID8gYVRleHR1cmUgOiB0ZXh0dXJlKCBhVGV4dHVyZSApICkuY29udmVydCggJ3NhbXBsZXInICk7XG4iLCJpbXBvcnQgVW5pZm9ybU5vZGUgZnJvbSAnLi4vY29yZS9Vbmlmb3JtTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIEEgc3BlY2lhbCB0eXBlIG9mIHVuaWZvcm0gbm9kZSB3aGljaCByZXByZXNlbnRzIGFycmF5LWxpa2UgZGF0YVxuICogYXMgdW5pZm9ybSBidWZmZXJzLiBUaGUgYWNjZXNzIHVzdWFsbHkgaGFwcGVucyB2aWEgYGVsZW1lbnQoKWBcbiAqIHdoaWNoIHJldHVybnMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEFycmF5RWxlbWVudE5vZGV9LiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYnVmZmVyTm9kZSA9IGJ1ZmZlciggYXJyYXksICdtYXQ0JywgY291bnQgKTtcbiAqIGNvbnN0IG1hdHJpeE5vZGUgPSBidWZmZXJOb2RlLmVsZW1lbnQoIGluZGV4ICk7IC8vIGFjY2VzcyBhIG1hdHJpeCBmcm9tIHRoZSBidWZmZXJcbiAqIGBgYFxuICogSW4gZ2VuZXJhbCwgaXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBtb3JlIG1hbmFnZWQge0BsaW5rIFVuaWZvcm1BcnJheU5vZGV9XG4gKiBzaW5jZSBpdCBoYW5kbGVzIG1vcmUgaW5wdXQgdHlwZXMgYW5kIGF1dG9tYXRpY2FsbHkgY2FyZXMgYWJvdXQgYnVmZmVyIHBhZGRpbmdzLlxuICpcbiAqIEBhdWdtZW50cyBVbmlmb3JtTm9kZVxuICovXG5jbGFzcyBCdWZmZXJOb2RlIGV4dGVuZHMgVW5pZm9ybU5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnQnVmZmVyTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHZhbHVlIC0gQXJyYXktbGlrZSBidWZmZXIgZGF0YS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGJ1ZmZlclR5cGUgLSBUaGUgZGF0YSB0eXBlIG9mIHRoZSBidWZmZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYnVmZmVyQ291bnQ9MF0gLSBUaGUgY291bnQgb2YgYnVmZmVyIGVsZW1lbnRzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHZhbHVlLCBidWZmZXJUeXBlLCBidWZmZXJDb3VudCA9IDAgKSB7XG5cblx0XHRzdXBlciggdmFsdWUsIGJ1ZmZlclR5cGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNCdWZmZXJOb2RlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkYXRhIHR5cGUgb2YgdGhlIGJ1ZmZlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5idWZmZXJUeXBlID0gYnVmZmVyVHlwZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1bmlmb3JtIG5vZGUgdGhhdCBob2xkcyB0aGUgdmFsdWUgb2YgdGhlIHJlZmVyZW5jZSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5idWZmZXJDb3VudCA9IGJ1ZmZlckNvdW50O1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGRhdGEgdHlwZSBvZiB0aGUgYnVmZmVyIGVsZW1lbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBlbGVtZW50IHR5cGUuXG5cdCAqL1xuXHRnZXRFbGVtZW50VHlwZSggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdGVzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHRvIHJldHVybiBhIGZpeGVkIHZhbHVlIGAnYnVmZmVyJ2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGlucHV0IHR5cGUuXG5cdCAqL1xuXHRnZXRJbnB1dFR5cGUoIC8qYnVpbGRlciovICkge1xuXG5cdFx0cmV0dXJuICdidWZmZXInO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBCdWZmZXJOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBidWZmZXIgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlIC0gQXJyYXktbGlrZSBidWZmZXIgZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIGRhdGEgdHlwZSBvZiBhIGJ1ZmZlciBlbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0gVGhlIGNvdW50IG9mIGJ1ZmZlciBlbGVtZW50cy5cbiAqIEByZXR1cm5zIHtCdWZmZXJOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYnVmZmVyID0gKCB2YWx1ZSwgdHlwZSwgY291bnQgKSA9PiBub2RlT2JqZWN0KCBuZXcgQnVmZmVyTm9kZSggdmFsdWUsIHR5cGUsIGNvdW50ICkgKTtcbiIsImltcG9ydCB7IG5vZGVPYmplY3QgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBOb2RlVXBkYXRlVHlwZSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGdldFZhbHVlVHlwZSB9IGZyb20gJy4uL2NvcmUvTm9kZVV0aWxzLmpzJztcbmltcG9ydCBBcnJheUVsZW1lbnROb2RlIGZyb20gJy4uL3V0aWxzL0FycmF5RWxlbWVudE5vZGUuanMnO1xuaW1wb3J0IEJ1ZmZlck5vZGUgZnJvbSAnLi9CdWZmZXJOb2RlLmpzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBlbGVtZW50IGFjY2VzcyBvbiB1bmlmb3JtIGFycmF5IG5vZGVzLlxuICpcbiAqIEBhdWdtZW50cyBBcnJheUVsZW1lbnROb2RlXG4gKi9cbmNsYXNzIFVuaWZvcm1BcnJheUVsZW1lbnROb2RlIGV4dGVuZHMgQXJyYXlFbGVtZW50Tm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdVbmlmb3JtQXJyYXlFbGVtZW50Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1VuaWZvcm1BcnJheU5vZGV9IHVuaWZvcm1BcnJheU5vZGUgLSBUaGUgdW5pZm9ybSBhcnJheSBub2RlIHRvIGFjY2Vzcy5cblx0ICogQHBhcmFtIHtJbmRleE5vZGV9IGluZGV4Tm9kZSAtIFRoZSBpbmRleCBkYXRhIHRoYXQgZGVmaW5lIHRoZSBwb3NpdGlvbiBvZiB0aGUgYWNjZXNzZWQgZWxlbWVudCBpbiB0aGUgYXJyYXkuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggdW5pZm9ybUFycmF5Tm9kZSwgaW5kZXhOb2RlICkge1xuXG5cdFx0c3VwZXIoIHVuaWZvcm1BcnJheU5vZGUsIGluZGV4Tm9kZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0FycmF5QnVmZmVyRWxlbWVudE5vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHNuaXBwZXQgPSBzdXBlci5nZW5lcmF0ZSggYnVpbGRlciApO1xuXHRcdGNvbnN0IHR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCk7XG5cdFx0Y29uc3QgcGFkZGVkVHlwZSA9IHRoaXMubm9kZS5nZXRQYWRkZWRUeXBlKCk7XG5cblx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIHNuaXBwZXQsIHBhZGRlZFR5cGUsIHR5cGUgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBTaW1pbGFyIHRvIHtAbGluayBCdWZmZXJOb2RlfSB0aGlzIG1vZHVsZSByZXByZXNlbnRzIGFycmF5LWxpa2UgZGF0YSBhc1xuICogdW5pZm9ybSBidWZmZXJzLiBVbmxpa2Uge0BsaW5rIEJ1ZmZlck5vZGV9LCBpdCBjYW4gaGFuZGxlIG1vcmUgY29tbW9uXG4gKiBkYXRhIHR5cGVzIGluIHRoZSBhcnJheSAoZS5nIGB0aHJlZS5qc2AgcHJpbWl0aXZlcykgYW5kIGF1dG9tYXRpY2FsbHlcbiAqIG1hbmFnZSBidWZmZXIgcGFkZGluZy4gSXQgc2hvdWxkIGJlIHRoZSBmaXJzdCBjaG9pY2Ugd2hlbiB3b3JraW5nIHdpdGhcbiAqIHVuaWZvcm1zIGJ1ZmZlcnMuXG4gKiBgYGBqc1xuICogY29uc3QgdGludENvbG9ycyA9IHVuaWZvcm1BcnJheSggW1xuICogXHRuZXcgQ29sb3IoIDEsIDAsIDAgKSxcbiAqIFx0bmV3IENvbG9yKCAwLCAxLCAwICksXG4gKiBcdG5ldyBDb2xvciggMCwgMCwgMSApXG4gKiBdLCAnY29sb3InICk7XG4gKlxuICogY29uc3QgcmVkQ29sb3IgPSB0aW50Q29sb3JzLmVsZW1lbnQoIDAgKTtcbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyTm9kZVxuICovXG5jbGFzcyBVbmlmb3JtQXJyYXlOb2RlIGV4dGVuZHMgQnVmZmVyTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdVbmlmb3JtQXJyYXlOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdW5pZm9ybSBhcnJheSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PGFueT59IHZhbHVlIC0gQXJyYXkgaG9sZGluZyB0aGUgYnVmZmVyIGRhdGEuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gW2VsZW1lbnRUeXBlPW51bGxdIC0gVGhlIGRhdGEgdHlwZSBvZiBhIGJ1ZmZlciBlbGVtZW50LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHZhbHVlLCBlbGVtZW50VHlwZSA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggbnVsbCApO1xuXG5cdFx0LyoqXG5cdFx0ICogQXJyYXkgaG9sZGluZyB0aGUgYnVmZmVyIGRhdGEuIFVubGlrZSB7QGxpbmsgQnVmZmVyTm9kZX0sIHRoZSBhcnJheSBjYW5cblx0XHQgKiBob2xkIG51bWJlciBwcmltaXRpdmVzIGFzIHdlbGwgYXMgdGhyZWUuanMgb2JqZWN0cyBsaWtlIHZlY3RvcnMsIG1hdHJpY2VzXG5cdFx0ICogb3IgY29sb3JzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PGFueT59XG5cdFx0ICovXG5cdFx0dGhpcy5hcnJheSA9IHZhbHVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRhdGEgdHlwZSBvZiBhbiBhcnJheSBlbGVtZW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLmVsZW1lbnRUeXBlID0gZWxlbWVudFR5cGUgPT09IG51bGwgPyBnZXRWYWx1ZVR5cGUoIHZhbHVlWyAwIF0gKSA6IGVsZW1lbnRUeXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBhZGRlZCB0eXBlLiBVbmlmb3JtIGJ1ZmZlcnMgbXVzdCBjb25mb3JtIHRvIGEgY2VydGFpbiBidWZmZXIgbGF5b3V0XG5cdFx0ICogc28gYSBzZXBhcmF0ZSB0eXBlIGlzIGNvbXB1dGVkIHRvIGVuc3VyZSBjb3JyZWN0IGJ1ZmZlciBzaXplLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnBhZGRlZFR5cGUgPSB0aGlzLmdldFBhZGRlZFR5cGUoKTtcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJ3cml0dGVuIHNpbmNlIHVuaWZvcm0gYXJyYXkgbm9kZXMgYXJlIHVwZGF0ZWQgcGVyIHJlbmRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ3JlbmRlcidcblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZVR5cGUgPSBOb2RlVXBkYXRlVHlwZS5SRU5ERVI7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQXJyYXlCdWZmZXJOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgaXMgaW5mZXJyZWQgZnJvbSB0aGVcblx0ICoge0BsaW5rIFVuaWZvcm1BcnJheU5vZGUjcGFkZGVkVHlwZX0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiB0aGlzLnBhZGRlZFR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgZGF0YSB0eXBlIG9mIHRoZSBhcnJheSBlbGVtZW50cy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZWxlbWVudCB0eXBlLlxuXHQgKi9cblx0Z2V0RWxlbWVudFR5cGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50VHlwZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHBhZGRlZCB0eXBlIGJhc2VkIG9uIHRoZSBlbGVtZW50IHR5cGUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHBhZGRlZCB0eXBlLlxuXHQgKi9cblx0Z2V0UGFkZGVkVHlwZSgpIHtcblxuXHRcdGNvbnN0IGVsZW1lbnRUeXBlID0gdGhpcy5lbGVtZW50VHlwZTtcblxuXHRcdGxldCBwYWRkZWRUeXBlID0gJ3ZlYzQnO1xuXG5cdFx0aWYgKCBlbGVtZW50VHlwZSA9PT0gJ21hdDInICkge1xuXG5cdFx0XHRwYWRkZWRUeXBlID0gJ21hdDInO1xuXG5cdFx0fSBlbHNlIGlmICggL21hdC8udGVzdCggZWxlbWVudFR5cGUgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0cGFkZGVkVHlwZSA9ICdtYXQ0JztcblxuXHRcdH0gZWxzZSBpZiAoIGVsZW1lbnRUeXBlLmNoYXJBdCggMCApID09PSAnaScgKSB7XG5cblx0XHRcdHBhZGRlZFR5cGUgPSAnaXZlYzQnO1xuXG5cdFx0fSBlbHNlIGlmICggZWxlbWVudFR5cGUuY2hhckF0KCAwICkgPT09ICd1JyApIHtcblxuXHRcdFx0cGFkZGVkVHlwZSA9ICd1dmVjNCc7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcGFkZGVkVHlwZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSB1cGRhdGUgbWFrZXMgc3VyZSB0byBjb3JyZWN0bHkgdHJhbnNmZXIgdGhlIGRhdGEgZnJvbSB0aGUgKGNvbXBsZXgpIG9iamVjdHNcblx0ICogaW4gdGhlIGFycmF5IHRvIHRoZSBpbnRlcm5hbCwgY29ycmVjdGx5IHBhZGRlZCB2YWx1ZSBidWZmZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUZyYW1lfSBmcmFtZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IG5vZGUgZnJhbWUuXG5cdCAqL1xuXHR1cGRhdGUoIC8qZnJhbWUqLyApIHtcblxuXHRcdGNvbnN0IHsgYXJyYXksIHZhbHVlIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgZWxlbWVudFR5cGUgPSB0aGlzLmVsZW1lbnRUeXBlO1xuXG5cdFx0aWYgKCBlbGVtZW50VHlwZSA9PT0gJ2Zsb2F0JyB8fCBlbGVtZW50VHlwZSA9PT0gJ2ludCcgfHwgZWxlbWVudFR5cGUgPT09ICd1aW50JyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAqIDQ7XG5cblx0XHRcdFx0dmFsdWVbIGluZGV4IF0gPSBhcnJheVsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBlbGVtZW50VHlwZSA9PT0gJ2NvbG9yJyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAqIDQ7XG5cdFx0XHRcdGNvbnN0IHZlY3RvciA9IGFycmF5WyBpIF07XG5cblx0XHRcdFx0dmFsdWVbIGluZGV4IF0gPSB2ZWN0b3Iucjtcblx0XHRcdFx0dmFsdWVbIGluZGV4ICsgMSBdID0gdmVjdG9yLmc7XG5cdFx0XHRcdHZhbHVlWyBpbmRleCArIDIgXSA9IHZlY3Rvci5iIHx8IDA7XG5cdFx0XHRcdC8vdmFsdWVbIGluZGV4ICsgMyBdID0gdmVjdG9yLmEgfHwgMDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggZWxlbWVudFR5cGUgPT09ICdtYXQyJyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAqIDQ7XG5cdFx0XHRcdGNvbnN0IG1hdHJpeCA9IGFycmF5WyBpIF07XG5cblx0XHRcdFx0dmFsdWVbIGluZGV4IF0gPSBtYXRyaXguZWxlbWVudHNbIDAgXTtcblx0XHRcdFx0dmFsdWVbIGluZGV4ICsgMSBdID0gbWF0cml4LmVsZW1lbnRzWyAxIF07XG5cdFx0XHRcdHZhbHVlWyBpbmRleCArIDIgXSA9IG1hdHJpeC5lbGVtZW50c1sgMiBdO1xuXHRcdFx0XHR2YWx1ZVsgaW5kZXggKyAzIF0gPSBtYXRyaXguZWxlbWVudHNbIDMgXTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggZWxlbWVudFR5cGUgPT09ICdtYXQzJyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAqIDE2O1xuXHRcdFx0XHRjb25zdCBtYXRyaXggPSBhcnJheVsgaSBdO1xuXG5cdFx0XHRcdHZhbHVlWyBpbmRleCBdID0gbWF0cml4LmVsZW1lbnRzWyAwIF07XG5cdFx0XHRcdHZhbHVlWyBpbmRleCArIDEgXSA9IG1hdHJpeC5lbGVtZW50c1sgMSBdO1xuXHRcdFx0XHR2YWx1ZVsgaW5kZXggKyAyIF0gPSBtYXRyaXguZWxlbWVudHNbIDIgXTtcblxuXHRcdFx0XHR2YWx1ZVsgaW5kZXggKyA0IF0gPSBtYXRyaXguZWxlbWVudHNbIDMgXTtcblx0XHRcdFx0dmFsdWVbIGluZGV4ICsgNSBdID0gbWF0cml4LmVsZW1lbnRzWyA0IF07XG5cdFx0XHRcdHZhbHVlWyBpbmRleCArIDYgXSA9IG1hdHJpeC5lbGVtZW50c1sgNSBdO1xuXG5cdFx0XHRcdHZhbHVlWyBpbmRleCArIDggXSA9IG1hdHJpeC5lbGVtZW50c1sgNiBdO1xuXHRcdFx0XHR2YWx1ZVsgaW5kZXggKyA5IF0gPSBtYXRyaXguZWxlbWVudHNbIDcgXTtcblx0XHRcdFx0dmFsdWVbIGluZGV4ICsgMTAgXSA9IG1hdHJpeC5lbGVtZW50c1sgOCBdO1xuXG5cdFx0XHRcdHZhbHVlWyBpbmRleCArIDE1IF0gPSAxO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBlbGVtZW50VHlwZSA9PT0gJ21hdDQnICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5kZXggPSBpICogMTY7XG5cdFx0XHRcdGNvbnN0IG1hdHJpeCA9IGFycmF5WyBpIF07XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbWF0cml4LmVsZW1lbnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhbHVlWyBpbmRleCArIGkgXSA9IG1hdHJpeC5lbGVtZW50c1sgaSBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAqIDQ7XG5cdFx0XHRcdGNvbnN0IHZlY3RvciA9IGFycmF5WyBpIF07XG5cblx0XHRcdFx0dmFsdWVbIGluZGV4IF0gPSB2ZWN0b3IueDtcblx0XHRcdFx0dmFsdWVbIGluZGV4ICsgMSBdID0gdmVjdG9yLnk7XG5cdFx0XHRcdHZhbHVlWyBpbmRleCArIDIgXSA9IHZlY3Rvci56IHx8IDA7XG5cdFx0XHRcdHZhbHVlWyBpbmRleCArIDMgXSA9IHZlY3Rvci53IHx8IDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEltcGxlbWVudCB0aGUgdmFsdWUgYnVmZmVyIGNyZWF0aW9uIGJhc2VkIG9uIHRoZSBhcnJheSBkYXRhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtudWxsfVxuXHQgKi9cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBsZW5ndGggPSB0aGlzLmFycmF5Lmxlbmd0aDtcblx0XHRjb25zdCBlbGVtZW50VHlwZSA9IHRoaXMuZWxlbWVudFR5cGU7XG5cblx0XHRsZXQgYXJyYXlUeXBlID0gRmxvYXQzMkFycmF5O1xuXG5cdFx0Y29uc3QgcGFkZGVkVHlwZSA9IHRoaXMucGFkZGVkVHlwZTtcblx0XHRjb25zdCBwYWRkZWRFbGVtZW50TGVuZ3RoID0gYnVpbGRlci5nZXRUeXBlTGVuZ3RoKCBwYWRkZWRUeXBlICk7XG5cblx0XHRpZiAoIGVsZW1lbnRUeXBlLmNoYXJBdCggMCApID09PSAnaScgKSBhcnJheVR5cGUgPSBJbnQzMkFycmF5O1xuXHRcdGlmICggZWxlbWVudFR5cGUuY2hhckF0KCAwICkgPT09ICd1JyApIGFycmF5VHlwZSA9IFVpbnQzMkFycmF5O1xuXG5cdFx0dGhpcy52YWx1ZSA9IG5ldyBhcnJheVR5cGUoIGxlbmd0aCAqIHBhZGRlZEVsZW1lbnRMZW5ndGggKTtcblx0XHR0aGlzLmJ1ZmZlckNvdW50ID0gbGVuZ3RoO1xuXHRcdHRoaXMuYnVmZmVyVHlwZSA9IHBhZGRlZFR5cGU7XG5cblx0XHRyZXR1cm4gc3VwZXIuc2V0dXAoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0ZXMgdGhlIGRlZmF1bHQgYGVsZW1lbnQoKWAgbWV0aG9kIHRvIHByb3ZpZGUgZWxlbWVudCBhY2Nlc3Ncblx0ICogYmFzZWQgb24ge0BsaW5rIFVuaWZvcm1BcnJheU5vZGV9LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0luZGV4Tm9kZX0gaW5kZXhOb2RlIC0gVGhlIGluZGV4IG5vZGUuXG5cdCAqIEByZXR1cm4ge1VuaWZvcm1BcnJheUVsZW1lbnROb2RlfVxuXHQgKi9cblx0ZWxlbWVudCggaW5kZXhOb2RlICkge1xuXG5cdFx0cmV0dXJuIG5vZGVPYmplY3QoIG5ldyBVbmlmb3JtQXJyYXlFbGVtZW50Tm9kZSggdGhpcywgbm9kZU9iamVjdCggaW5kZXhOb2RlICkgKSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBVbmlmb3JtQXJyYXlOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gdW5pZm9ybSBhcnJheSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtBcnJheTxhbnk+fSB2YWx1ZXMgLSBBcnJheS1saWtlIGRhdGEuXG4gKiBAcGFyYW0gez9zdHJpbmd9IFtub2RlVHlwZV0gLSBUaGUgZGF0YSB0eXBlIG9mIHRoZSBhcnJheSBlbGVtZW50cy5cbiAqIEByZXR1cm5zIHtVbmlmb3JtQXJyYXlOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdW5pZm9ybUFycmF5ID0gKCB2YWx1ZXMsIG5vZGVUeXBlICkgPT4gbm9kZU9iamVjdCggbmV3IFVuaWZvcm1BcnJheU5vZGUoIHZhbHVlcywgbm9kZVR5cGUgKSApO1xuXG4vKipcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQGRlcHJlY2F0ZWQgc2luY2UgcjE2OC4gVXNlIHtAbGluayB1bmlmb3JtQXJyYXl9IGluc3RlYWQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSB2YWx1ZXMgLSBBcnJheS1saWtlIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gbm9kZVR5cGUgLSBUaGUgZGF0YSB0eXBlIG9mIHRoZSBhcnJheSBlbGVtZW50cy5cbiAqIEByZXR1cm5zIHtVbmlmb3JtQXJyYXlOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdW5pZm9ybXMgPSAoIHZhbHVlcywgbm9kZVR5cGUgKSA9PiB7IC8vIEBkZXByZWNhdGVkLCByMTY4XG5cblx0Y29uc29sZS53YXJuKCAnVFNMLlVuaWZvcm1BcnJheU5vZGU6IHVuaWZvcm1zKCkgaGFzIGJlZW4gcmVuYW1lZCB0byB1bmlmb3JtQXJyYXkoKS4nICk7XG5cdHJldHVybiBub2RlT2JqZWN0KCBuZXcgVW5pZm9ybUFycmF5Tm9kZSggdmFsdWVzLCBub2RlVHlwZSApICk7XG5cbn07XG4iLCJpbXBvcnQgeyB1bmlmb3JtIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtTm9kZS5qcyc7XG5pbXBvcnQgeyByZW5kZXJHcm91cCwgc2hhcmVkVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtR3JvdXBOb2RlLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgRm4gfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyB1bmlmb3JtQXJyYXkgfSBmcm9tICcuL1VuaWZvcm1BcnJheU5vZGUuanMnO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IGBpbmRleGAgdmFsdWUgb2YgdGhlIGNhbWVyYSBpZiB1c2VkIEFycmF5Q2FtZXJhLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtVbmlmb3JtTm9kZTx1aW50Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbWVyYUluZGV4ID0gLypAX19QVVJFX18qLyB1bmlmb3JtKCAwLCAndWludCcgKS5zZXRHcm91cCggc2hhcmVkVW5pZm9ybUdyb3VwKCAnY2FtZXJhSW5kZXgnICkgKS50b1ZhcnlpbmcoICd2X2NhbWVyYUluZGV4JyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBgbmVhcmAgdmFsdWUgb2YgdGhlIGNhbWVyYSB1c2VkIGZvciB0aGUgY3VycmVudCByZW5kZXIuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1VuaWZvcm1Ob2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbWVyYU5lYXIgPSAvKkBfX1BVUkVfXyovIHVuaWZvcm0oICdmbG9hdCcgKS5sYWJlbCggJ2NhbWVyYU5lYXInICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICkub25SZW5kZXJVcGRhdGUoICggeyBjYW1lcmEgfSApID0+IGNhbWVyYS5uZWFyICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGBmYXJgIHZhbHVlIG9mIHRoZSBjYW1lcmEgdXNlZCBmb3IgdGhlIGN1cnJlbnQgcmVuZGVyLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtVbmlmb3JtTm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBjYW1lcmFGYXIgPSAvKkBfX1BVUkVfXyovIHVuaWZvcm0oICdmbG9hdCcgKS5sYWJlbCggJ2NhbWVyYUZhcicgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKS5vblJlbmRlclVwZGF0ZSggKCB7IGNhbWVyYSB9ICkgPT4gY2FtZXJhLmZhciApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBwcm9qZWN0aW9uIG1hdHJpeCBvZiB0aGUgY2FtZXJhIHVzZWQgZm9yIHRoZSBjdXJyZW50IHJlbmRlci5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7VW5pZm9ybU5vZGU8bWF0ND59XG4gKi9cbmV4cG9ydCBjb25zdCBjYW1lcmFQcm9qZWN0aW9uTWF0cml4ID0gLypAX19QVVJFX18qLyAoIEZuKCAoIHsgY2FtZXJhIH0gKSA9PiB7XG5cblx0bGV0IGNhbWVyYVByb2plY3Rpb25NYXRyaXg7XG5cblx0aWYgKCBjYW1lcmEuaXNBcnJheUNhbWVyYSAmJiBjYW1lcmEuY2FtZXJhcy5sZW5ndGggPiAwICkge1xuXG5cdFx0Y29uc3QgbWF0cmljZXMgPSBbXTtcblxuXHRcdGZvciAoIGNvbnN0IHN1YkNhbWVyYSBvZiBjYW1lcmEuY2FtZXJhcyApIHtcblxuXHRcdFx0bWF0cmljZXMucHVzaCggc3ViQ2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGNhbWVyYVByb2plY3Rpb25NYXRyaWNlcyA9IHVuaWZvcm1BcnJheSggbWF0cmljZXMgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKS5sYWJlbCggJ2NhbWVyYVByb2plY3Rpb25NYXRyaWNlcycgKTtcblxuXHRcdGNhbWVyYVByb2plY3Rpb25NYXRyaXggPSBjYW1lcmFQcm9qZWN0aW9uTWF0cmljZXMuZWxlbWVudCggY2FtZXJhSW5kZXggKS50b1ZhciggJ2NhbWVyYVByb2plY3Rpb25NYXRyaXgnICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGNhbWVyYVByb2plY3Rpb25NYXRyaXggPSB1bmlmb3JtKCAnbWF0NCcgKS5sYWJlbCggJ2NhbWVyYVByb2plY3Rpb25NYXRyaXgnICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICkub25SZW5kZXJVcGRhdGUoICggeyBjYW1lcmEgfSApID0+IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fVxuXG5cdHJldHVybiBjYW1lcmFQcm9qZWN0aW9uTWF0cml4O1xuXG59ICkub25jZSgpICkoKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgaW52ZXJzZSBwcm9qZWN0aW9uIG1hdHJpeCBvZiB0aGUgY2FtZXJhIHVzZWQgZm9yIHRoZSBjdXJyZW50IHJlbmRlci5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7VW5pZm9ybU5vZGU8bWF0ND59XG4gKi9cbmV4cG9ydCBjb25zdCBjYW1lcmFQcm9qZWN0aW9uTWF0cml4SW52ZXJzZSA9IC8qQF9fUFVSRV9fKi8gdW5pZm9ybSggJ21hdDQnICkubGFiZWwoICdjYW1lcmFQcm9qZWN0aW9uTWF0cml4SW52ZXJzZScgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKS5vblJlbmRlclVwZGF0ZSggKCB7IGNhbWVyYSB9ICkgPT4gY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHZpZXcgbWF0cml4IG9mIHRoZSBjYW1lcmEgdXNlZCBmb3IgdGhlIGN1cnJlbnQgcmVuZGVyLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtVbmlmb3JtTm9kZTxtYXQ0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbWVyYVZpZXdNYXRyaXggPSAvKkBfX1BVUkVfXyovICggRm4oICggeyBjYW1lcmEgfSApID0+IHtcblxuXHRsZXQgY2FtZXJhVmlld01hdHJpeDtcblxuXHRpZiAoIGNhbWVyYS5pc0FycmF5Q2FtZXJhICYmIGNhbWVyYS5jYW1lcmFzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRjb25zdCBtYXRyaWNlcyA9IFtdO1xuXG5cdFx0Zm9yICggY29uc3Qgc3ViQ2FtZXJhIG9mIGNhbWVyYS5jYW1lcmFzICkge1xuXG5cdFx0XHRtYXRyaWNlcy5wdXNoKCBzdWJDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjYW1lcmFWaWV3TWF0cmljZXMgPSB1bmlmb3JtQXJyYXkoIG1hdHJpY2VzICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICkubGFiZWwoICdjYW1lcmFWaWV3TWF0cmljZXMnICk7XG5cblx0XHRjYW1lcmFWaWV3TWF0cml4ID0gY2FtZXJhVmlld01hdHJpY2VzLmVsZW1lbnQoIGNhbWVyYUluZGV4ICkudG9WYXIoICdjYW1lcmFWaWV3TWF0cml4JyApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRjYW1lcmFWaWV3TWF0cml4ID0gdW5pZm9ybSggJ21hdDQnICkubGFiZWwoICdjYW1lcmFWaWV3TWF0cml4JyApLnNldEdyb3VwKCByZW5kZXJHcm91cCApLm9uUmVuZGVyVXBkYXRlKCAoIHsgY2FtZXJhIH0gKSA9PiBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0fVxuXG5cdHJldHVybiBjYW1lcmFWaWV3TWF0cml4O1xuXG59ICkub25jZSgpICkoKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgd29ybGQgbWF0cml4IG9mIHRoZSBjYW1lcmEgdXNlZCBmb3IgdGhlIGN1cnJlbnQgcmVuZGVyLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtVbmlmb3JtTm9kZTxtYXQ0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbWVyYVdvcmxkTWF0cml4ID0gLypAX19QVVJFX18qLyB1bmlmb3JtKCAnbWF0NCcgKS5sYWJlbCggJ2NhbWVyYVdvcmxkTWF0cml4JyApLnNldEdyb3VwKCByZW5kZXJHcm91cCApLm9uUmVuZGVyVXBkYXRlKCAoIHsgY2FtZXJhIH0gKSA9PiBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgbm9ybWFsIG1hdHJpeCBvZiB0aGUgY2FtZXJhIHVzZWQgZm9yIHRoZSBjdXJyZW50IHJlbmRlci5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7VW5pZm9ybU5vZGU8bWF0Mz59XG4gKi9cbmV4cG9ydCBjb25zdCBjYW1lcmFOb3JtYWxNYXRyaXggPSAvKkBfX1BVUkVfXyovIHVuaWZvcm0oICdtYXQzJyApLmxhYmVsKCAnY2FtZXJhTm9ybWFsTWF0cml4JyApLnNldEdyb3VwKCByZW5kZXJHcm91cCApLm9uUmVuZGVyVXBkYXRlKCAoIHsgY2FtZXJhIH0gKSA9PiBjYW1lcmEubm9ybWFsTWF0cml4ICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHBvc2l0aW9uIGluIHdvcmxkIHNwYWNlIG9mIHRoZSBjYW1lcmEgdXNlZCBmb3IgdGhlIGN1cnJlbnQgcmVuZGVyLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtVbmlmb3JtTm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbWVyYVBvc2l0aW9uID0gLypAX19QVVJFX18qLyB1bmlmb3JtKCBuZXcgVmVjdG9yMygpICkubGFiZWwoICdjYW1lcmFQb3NpdGlvbicgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKS5vblJlbmRlclVwZGF0ZSggKCB7IGNhbWVyYSB9LCBzZWxmICkgPT4gc2VsZi52YWx1ZS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApICk7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuaW1wb3J0IHsgTm9kZVVwZGF0ZVR5cGUgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgVW5pZm9ybU5vZGUgZnJvbSAnLi4vY29yZS9Vbmlmb3JtTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFNwaGVyZSB9IGZyb20gJy4uLy4uL21hdGgvU3BoZXJlLmpzJztcblxuY29uc3QgX3NwaGVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFNwaGVyZSgpO1xuXG4vKipcbiAqIFRoaXMgbm9kZSBjYW4gYmUgdXNlZCB0byBhY2Nlc3MgdHJhbnNmb3JtYXRpb24gcmVsYXRlZCBtZXRyaWNzIG9mIDNEIG9iamVjdHMuXG4gKiBEZXBlbmRpbmcgb24gdGhlIHNlbGVjdGVkIHNjb3BlLCBhIGRpZmZlcmVudCBtZXRyaWMgaXMgcmVwcmVzZW50ZWQgYXMgYSB1bmlmb3JtXG4gKiBpbiB0aGUgc2hhZGVyLiBUaGUgZm9sbG93aW5nIHNjb3BlcyBhcmUgc3VwcG9ydGVkOlxuICpcbiAqIC0gYFBPU0lUSU9OYDogVGhlIG9iamVjdCdzIHBvc2l0aW9uIGluIHdvcmxkIHNwYWNlLlxuICogLSBgVklFV19QT1NJVElPTmA6IFRoZSBvYmplY3QncyBwb3NpdGlvbiBpbiB2aWV3L2NhbWVyYSBzcGFjZS5cbiAqIC0gYERJUkVDVElPTmA6IFRoZSBvYmplY3QncyBkaXJlY3Rpb24gaW4gd29ybGQgc3BhY2UuXG4gKiAtIGBTQ0FMRWA6IFRoZSBvYmplY3QncyBzY2FsZSBpbiB3b3JsZCBzcGFjZS5cbiAqIC0gYFdPUkxEX01BVFJJWGA6IFRoZSBvYmplY3QncyBtYXRyaXggaW4gd29ybGQgc3BhY2UuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgT2JqZWN0M0ROb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdPYmplY3QzRE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBvYmplY3QgM0Qgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHsoJ3Bvc2l0aW9uJ3wndmlld1Bvc2l0aW9uJ3wnZGlyZWN0aW9uJ3wnc2NhbGUnfCd3b3JsZE1hdHJpeCcpfSBzY29wZSAtIFRoZSBub2RlIHJlcHJlc2VudHMgYSBkaWZmZXJlbnQgdHlwZSBvZiB0cmFuc2Zvcm1hdGlvbiBkZXBlbmRpbmcgb24gdGhlIHNjb3BlLlxuXHQgKiBAcGFyYW0gez9PYmplY3QzRH0gW29iamVjdDNkPW51bGxdIC0gVGhlIDNEIG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzY29wZSwgb2JqZWN0M2QgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHJlcG9ydHMgYSBkaWZmZXJlbnQgdHlwZSBvZiB0cmFuc2Zvcm1hdGlvbiBkZXBlbmRpbmcgb24gdGhlIHNjb3BlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeygncG9zaXRpb24nfCd2aWV3UG9zaXRpb24nfCdkaXJlY3Rpb24nfCdzY2FsZSd8J3dvcmxkTWF0cml4Jyl9XG5cdFx0ICovXG5cdFx0dGhpcy5zY29wZSA9IHNjb3BlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIDNEIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/T2JqZWN0M0R9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMub2JqZWN0M2QgPSBvYmplY3QzZDtcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJ3cml0dGVuIHNpbmNlIHRoaXMgdHlwZSBvZiBub2RlIGlzIHVwZGF0ZWQgcGVyIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ29iamVjdCdcblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZVR5cGUgPSBOb2RlVXBkYXRlVHlwZS5PQkpFQ1Q7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgdmFsdWUgb2YgdGhlIG5vZGUgYXMgYSB1bmlmb3JtLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5fdW5pZm9ybU5vZGUgPSBuZXcgVW5pZm9ybU5vZGUoIG51bGwgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgaXMgaW5mZXJyZWQgZnJvbSB0aGUgc2NvcGUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuXG5cdFx0aWYgKCBzY29wZSA9PT0gT2JqZWN0M0ROb2RlLldPUkxEX01BVFJJWCApIHtcblxuXHRcdFx0cmV0dXJuICdtYXQ0JztcblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBPYmplY3QzRE5vZGUuUE9TSVRJT04gfHwgc2NvcGUgPT09IE9iamVjdDNETm9kZS5WSUVXX1BPU0lUSU9OIHx8IHNjb3BlID09PSBPYmplY3QzRE5vZGUuRElSRUNUSU9OIHx8IHNjb3BlID09PSBPYmplY3QzRE5vZGUuU0NBTEUgKSB7XG5cblx0XHRcdHJldHVybiAndmVjMyc7XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gT2JqZWN0M0ROb2RlLlJBRElVUyApIHtcblxuXHRcdFx0cmV0dXJuICdmbG9hdCc7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSB1bmlmb3JtIHZhbHVlIGRlcGVuZGluZyBvbiB0aGUgc2NvcGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUZyYW1lfSBmcmFtZSAtIFRoZSBjdXJyZW50IG5vZGUgZnJhbWUuXG5cdCAqL1xuXHR1cGRhdGUoIGZyYW1lICkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0ID0gdGhpcy5vYmplY3QzZDtcblx0XHRjb25zdCB1bmlmb3JtTm9kZSA9IHRoaXMuX3VuaWZvcm1Ob2RlO1xuXHRcdGNvbnN0IHNjb3BlID0gdGhpcy5zY29wZTtcblxuXHRcdGlmICggc2NvcGUgPT09IE9iamVjdDNETm9kZS5XT1JMRF9NQVRSSVggKSB7XG5cblx0XHRcdHVuaWZvcm1Ob2RlLnZhbHVlID0gb2JqZWN0Lm1hdHJpeFdvcmxkO1xuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE9iamVjdDNETm9kZS5QT1NJVElPTiApIHtcblxuXHRcdFx0dW5pZm9ybU5vZGUudmFsdWUgPSB1bmlmb3JtTm9kZS52YWx1ZSB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR1bmlmb3JtTm9kZS52YWx1ZS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE9iamVjdDNETm9kZS5TQ0FMRSApIHtcblxuXHRcdFx0dW5pZm9ybU5vZGUudmFsdWUgPSB1bmlmb3JtTm9kZS52YWx1ZSB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR1bmlmb3JtTm9kZS52YWx1ZS5zZXRGcm9tTWF0cml4U2NhbGUoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE9iamVjdDNETm9kZS5ESVJFQ1RJT04gKSB7XG5cblx0XHRcdHVuaWZvcm1Ob2RlLnZhbHVlID0gdW5pZm9ybU5vZGUudmFsdWUgfHwgbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0b2JqZWN0LmdldFdvcmxkRGlyZWN0aW9uKCB1bmlmb3JtTm9kZS52YWx1ZSApO1xuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE9iamVjdDNETm9kZS5WSUVXX1BPU0lUSU9OICkge1xuXG5cdFx0XHRjb25zdCBjYW1lcmEgPSBmcmFtZS5jYW1lcmE7XG5cblx0XHRcdHVuaWZvcm1Ob2RlLnZhbHVlID0gdW5pZm9ybU5vZGUudmFsdWUgfHwgbmV3IFZlY3RvcjMoKTtcblx0XHRcdHVuaWZvcm1Ob2RlLnZhbHVlLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHVuaWZvcm1Ob2RlLnZhbHVlLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE9iamVjdDNETm9kZS5SQURJVVMgKSB7XG5cblx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gZnJhbWUub2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdF9zcGhlcmUuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKS5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR1bmlmb3JtTm9kZS52YWx1ZSA9IF9zcGhlcmUucmFkaXVzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSBjb2RlIHNuaXBwZXQgb2YgdGhlIHVuaWZvcm0gbm9kZS4gVGhlIG5vZGUgdHlwZSBvZiB0aGUgdW5pZm9ybVxuXHQgKiBub2RlIGFsc28gZGVwZW5kcyBvbiB0aGUgc2VsZWN0ZWQgc2NvcGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGdlbmVyYXRlZCBjb2RlIHNuaXBwZXQuXG5cdCAqL1xuXHRnZW5lcmF0ZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcy5zY29wZTtcblxuXHRcdGlmICggc2NvcGUgPT09IE9iamVjdDNETm9kZS5XT1JMRF9NQVRSSVggKSB7XG5cblx0XHRcdHRoaXMuX3VuaWZvcm1Ob2RlLm5vZGVUeXBlID0gJ21hdDQnO1xuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE9iamVjdDNETm9kZS5QT1NJVElPTiB8fCBzY29wZSA9PT0gT2JqZWN0M0ROb2RlLlZJRVdfUE9TSVRJT04gfHwgc2NvcGUgPT09IE9iamVjdDNETm9kZS5ESVJFQ1RJT04gfHwgc2NvcGUgPT09IE9iamVjdDNETm9kZS5TQ0FMRSApIHtcblxuXHRcdFx0dGhpcy5fdW5pZm9ybU5vZGUubm9kZVR5cGUgPSAndmVjMyc7XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gT2JqZWN0M0ROb2RlLlJBRElVUyApIHtcblxuXHRcdFx0dGhpcy5fdW5pZm9ybU5vZGUubm9kZVR5cGUgPSAnZmxvYXQnO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX3VuaWZvcm1Ob2RlLmJ1aWxkKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdHNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLnNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0ZGF0YS5zY29wZSA9IHRoaXMuc2NvcGU7XG5cblx0fVxuXG5cdGRlc2VyaWFsaXplKCBkYXRhICkge1xuXG5cdFx0c3VwZXIuZGVzZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdHRoaXMuc2NvcGUgPSBkYXRhLnNjb3BlO1xuXG5cdH1cblxufVxuXG5PYmplY3QzRE5vZGUuV09STERfTUFUUklYID0gJ3dvcmxkTWF0cml4Jztcbk9iamVjdDNETm9kZS5QT1NJVElPTiA9ICdwb3NpdGlvbic7XG5PYmplY3QzRE5vZGUuU0NBTEUgPSAnc2NhbGUnO1xuT2JqZWN0M0ROb2RlLlZJRVdfUE9TSVRJT04gPSAndmlld1Bvc2l0aW9uJztcbk9iamVjdDNETm9kZS5ESVJFQ1RJT04gPSAnZGlyZWN0aW9uJztcbk9iamVjdDNETm9kZS5SQURJVVMgPSAncmFkaXVzJztcblxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0M0ROb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gb2JqZWN0IDNEIG5vZGUgdGhhdCByZXByZXNlbnRzIHRoZSBvYmplY3QncyBkaXJlY3Rpb24gaW4gd29ybGQgc3BhY2UuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0gez9PYmplY3QzRH0gW29iamVjdDNkPW51bGxdIC0gVGhlIDNEIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3QzRE5vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBvYmplY3REaXJlY3Rpb24gPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT2JqZWN0M0ROb2RlLCBPYmplY3QzRE5vZGUuRElSRUNUSU9OICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhbiBvYmplY3QgM0Qgbm9kZSB0aGF0IHJlcHJlc2VudHMgdGhlIG9iamVjdCdzIHdvcmxkIG1hdHJpeC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7P09iamVjdDNEfSBbb2JqZWN0M2Q9bnVsbF0gLSBUaGUgM0Qgb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdDNETm9kZTxtYXQ0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG9iamVjdFdvcmxkTWF0cml4ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE9iamVjdDNETm9kZSwgT2JqZWN0M0ROb2RlLldPUkxEX01BVFJJWCApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gb2JqZWN0IDNEIG5vZGUgdGhhdCByZXByZXNlbnRzIHRoZSBvYmplY3QncyBwb3NpdGlvbiBpbiB3b3JsZCBzcGFjZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7P09iamVjdDNEfSBbb2JqZWN0M2Q9bnVsbF0gLSBUaGUgM0Qgb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdDNETm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG9iamVjdFBvc2l0aW9uID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE9iamVjdDNETm9kZSwgT2JqZWN0M0ROb2RlLlBPU0lUSU9OICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhbiBvYmplY3QgM0Qgbm9kZSB0aGF0IHJlcHJlc2VudHMgdGhlIG9iamVjdCdzIHNjYWxlIGluIHdvcmxkIHNwYWNlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHs/T2JqZWN0M0R9IFtvYmplY3QzZD1udWxsXSAtIFRoZSAzRCBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0M0ROb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3Qgb2JqZWN0U2NhbGUgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT2JqZWN0M0ROb2RlLCBPYmplY3QzRE5vZGUuU0NBTEUgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIG9iamVjdCAzRCBub2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgcG9zaXRpb24gaW4gdmlldy9jYW1lcmEgc3BhY2UuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0gez9PYmplY3QzRH0gW29iamVjdDNkPW51bGxdIC0gVGhlIDNEIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3QzRE5vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBvYmplY3RWaWV3UG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT2JqZWN0M0ROb2RlLCBPYmplY3QzRE5vZGUuVklFV19QT1NJVElPTiApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gb2JqZWN0IDNEIG5vZGUgdGhhdCByZXByZXNlbnRzIHRoZSBvYmplY3QncyByYWRpdXMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0gez9PYmplY3QzRH0gW29iamVjdDNkPW51bGxdIC0gVGhlIDNEIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3QzRE5vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBvYmplY3RSYWRpdXMgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggT2JqZWN0M0ROb2RlLCBPYmplY3QzRE5vZGUuUkFESVVTICk7XG4iLCJpbXBvcnQgT2JqZWN0M0ROb2RlIGZyb20gJy4vT2JqZWN0M0ROb2RlLmpzJztcbmltcG9ydCB7IEZuLCBub2RlSW1tdXRhYmxlIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgdW5pZm9ybSB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybU5vZGUuanMnO1xuXG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IGNhbWVyYVZpZXdNYXRyaXggfSBmcm9tICcuL0NhbWVyYS5qcyc7XG5pbXBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXgzLmpzJztcblxuLyoqXG4gKiBUaGlzIHR5cGUgb2Ygbm9kZSBpcyBhIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYE9iamVjdDNETm9kZWBcbiAqIHdpdGggbGFyZ2VyIHNldCBvZiBtb2RlbCByZWxhdGVkIG1ldHJpY3MuIFVubGlrZSBgT2JqZWN0M0ROb2RlYCxcbiAqIGBNb2RlbE5vZGVgIGV4dHJhY3RzIHRoZSByZWZlcmVuY2UgdG8gdGhlIDNEIG9iamVjdCBmcm9tIHRoZVxuICogY3VycmVudCBub2RlIGZyYW1lIHN0YXRlLlxuICpcbiAqIEBhdWdtZW50cyBPYmplY3QzRE5vZGVcbiAqL1xuY2xhc3MgTW9kZWxOb2RlIGV4dGVuZHMgT2JqZWN0M0ROb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ01vZGVsTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG9iamVjdCBtb2RlbCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0geygncG9zaXRpb24nfCd2aWV3UG9zaXRpb24nfCdkaXJlY3Rpb24nfCdzY2FsZSd8J3dvcmxkTWF0cml4Jyl9IHNjb3BlIC0gVGhlIG5vZGUgcmVwcmVzZW50cyBhIGRpZmZlcmVudCB0eXBlIG9mIHRyYW5zZm9ybWF0aW9uIGRlcGVuZGluZyBvbiB0aGUgc2NvcGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggc2NvcGUgKSB7XG5cblx0XHRzdXBlciggc2NvcGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEV4dHJhY3RzIHRoZSBtb2RlbCByZWZlcmVuY2UgZnJvbSB0aGUgZnJhbWUgc3RhdGUgYW5kIHRoZW5cblx0ICogdXBkYXRlcyB0aGUgdW5pZm9ybSB2YWx1ZSBkZXBlbmRpbmcgb24gdGhlIHNjb3BlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBUaGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlKCBmcmFtZSApIHtcblxuXHRcdHRoaXMub2JqZWN0M2QgPSBmcmFtZS5vYmplY3Q7XG5cblx0XHRzdXBlci51cGRhdGUoIGZyYW1lICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGVsTm9kZTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgZGlyZWN0aW9uIGluIHdvcmxkIHNwYWNlLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtNb2RlbE5vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBtb2RlbERpcmVjdGlvbiA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTW9kZWxOb2RlLCBNb2RlbE5vZGUuRElSRUNUSU9OICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIG9iamVjdCdzIHdvcmxkIG1hdHJpeC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7TW9kZWxOb2RlPG1hdDQ+fVxuICovXG5leHBvcnQgY29uc3QgbW9kZWxXb3JsZE1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTW9kZWxOb2RlLCBNb2RlbE5vZGUuV09STERfTUFUUklYICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIG9iamVjdCdzIHBvc2l0aW9uIGluIHdvcmxkIHNwYWNlLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtNb2RlbE5vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBtb2RlbFBvc2l0aW9uID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNb2RlbE5vZGUsIE1vZGVsTm9kZS5QT1NJVElPTiApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBvYmplY3QncyBzY2FsZSBpbiB3b3JsZCBzcGFjZS5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7TW9kZWxOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgbW9kZWxTY2FsZSA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTW9kZWxOb2RlLCBNb2RlbE5vZGUuU0NBTEUgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgcG9zaXRpb24gaW4gdmlldy9jYW1lcmEgc3BhY2UuXG4gKlxuICogQHRzbFxuICogQHR5cGUge01vZGVsTm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1vZGVsVmlld1Bvc2l0aW9uID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNb2RlbE5vZGUsIE1vZGVsTm9kZS5WSUVXX1BPU0lUSU9OICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIG9iamVjdCdzIHJhZGl1cy5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7TW9kZWxOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1vZGVsUmFkaXVzID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNb2RlbE5vZGUsIE1vZGVsTm9kZS5SQURJVVMgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgb2JqZWN0J3Mgbm9ybWFsIG1hdHJpeC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7VW5pZm9ybU5vZGU8bWF0Mz59XG4gKi9cbmV4cG9ydCBjb25zdCBtb2RlbE5vcm1hbE1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gdW5pZm9ybSggbmV3IE1hdHJpeDMoKSApLm9uT2JqZWN0VXBkYXRlKCAoIHsgb2JqZWN0IH0sIHNlbGYgKSA9PiBzZWxmLnZhbHVlLmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1hdHJpeFdvcmxkICkgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgaW52ZXJzZSB3b3JsZCBtYXRyaXguXG4gKlxuICogQHRzbFxuICogQHR5cGUge1VuaWZvcm1Ob2RlPG1hdDQ+fVxuICovXG5leHBvcnQgY29uc3QgbW9kZWxXb3JsZE1hdHJpeEludmVyc2UgPSAvKkBfX1BVUkVfXyovIHVuaWZvcm0oIG5ldyBNYXRyaXg0KCkgKS5vbk9iamVjdFVwZGF0ZSggKCB7IG9iamVjdCB9LCBzZWxmICkgPT4gc2VsZi52YWx1ZS5jb3B5KCBvYmplY3QubWF0cml4V29ybGQgKS5pbnZlcnQoKSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBvYmplY3QncyBtb2RlbCB2aWV3IG1hdHJpeC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxtYXQ0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1vZGVsVmlld01hdHJpeCA9IC8qQF9fUFVSRV9fKi8gKCBGbiggKCBidWlsZGVyICkgPT4ge1xuXG5cdHJldHVybiBidWlsZGVyLnJlbmRlcmVyLm5vZGVzLm1vZGVsVmlld01hdHJpeCB8fCBtZWRpdW1wTW9kZWxWaWV3TWF0cml4O1xuXG59ICkub25jZSgpICkoKS50b1ZhciggJ21vZGVsVmlld01hdHJpeCcgKTtcblxuLy8gR1BVIFByZWNpc2lvblxuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBvYmplY3QncyBtb2RlbCB2aWV3IGluIGBtZWRpdW1wYCBwcmVjaXNpb24uXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8bWF0ND59XG4gKi9cbmV4cG9ydCBjb25zdCBtZWRpdW1wTW9kZWxWaWV3TWF0cml4ID0gLypAX19QVVJFX18qLyBjYW1lcmFWaWV3TWF0cml4Lm11bCggbW9kZWxXb3JsZE1hdHJpeCApO1xuXG4vLyBDUFUgUHJlY2lzaW9uXG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIG9iamVjdCdzIG1vZGVsIHZpZXcgaW4gYGhpZ2hwYCBwcmVjaXNpb25cbiAqIHdoaWNoIGlzIGFjaGlldmVkIGJ5IGNvbXB1dGluZyB0aGUgbWF0cml4IGluIEpTIGFuZCBub3QgaW4gdGhlIHNoYWRlci5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxtYXQ0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGhpZ2hwTW9kZWxWaWV3TWF0cml4ID0gLypAX19QVVJFX18qLyAoIEZuKCAoIGJ1aWxkZXIgKSA9PiB7XG5cblx0YnVpbGRlci5jb250ZXh0LmlzSGlnaFByZWNpc2lvbk1vZGVsVmlld01hdHJpeCA9IHRydWU7XG5cblx0cmV0dXJuIHVuaWZvcm0oICdtYXQ0JyApLm9uT2JqZWN0VXBkYXRlKCAoIHsgb2JqZWN0LCBjYW1lcmEgfSApID0+IHtcblxuXHRcdHJldHVybiBvYmplY3QubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdH0gKTtcblxufSApLm9uY2UoKSApKCkudG9WYXIoICdoaWdocE1vZGVsVmlld01hdHJpeCcgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgbW9kZWwgbm9ybWFsIHZpZXcgaW4gYGhpZ2hwYCBwcmVjaXNpb25cbiAqIHdoaWNoIGlzIGFjaGlldmVkIGJ5IGNvbXB1dGluZyB0aGUgbWF0cml4IGluIEpTIGFuZCBub3QgaW4gdGhlIHNoYWRlci5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxtYXQzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGhpZ2hwTW9kZWxOb3JtYWxWaWV3TWF0cml4ID0gLypAX19QVVJFX18qLyAoIEZuKCAoIGJ1aWxkZXIgKSA9PiB7XG5cblx0Y29uc3QgaXNIaWdoUHJlY2lzaW9uTW9kZWxWaWV3TWF0cml4ID0gYnVpbGRlci5jb250ZXh0LmlzSGlnaFByZWNpc2lvbk1vZGVsVmlld01hdHJpeDtcblxuXHRyZXR1cm4gdW5pZm9ybSggJ21hdDMnICkub25PYmplY3RVcGRhdGUoICggeyBvYmplY3QsIGNhbWVyYSB9ICkgPT4ge1xuXG5cdFx0aWYgKCBpc0hpZ2hQcmVjaXNpb25Nb2RlbFZpZXdNYXRyaXggIT09IHRydWUgKSB7XG5cblx0XHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqZWN0Lm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIG9iamVjdC5tb2RlbFZpZXdNYXRyaXggKTtcblxuXHR9ICk7XG5cbn0gKS5vbmNlKCkgKSgpLnRvVmFyKCAnaGlnaHBNb2RlbE5vcm1hbFZpZXdNYXRyaXgnICk7XG4iLCJpbXBvcnQgeyBhdHRyaWJ1dGUgfSBmcm9tICcuLi9jb3JlL0F0dHJpYnV0ZU5vZGUuanMnO1xuaW1wb3J0IHsgRm4gfSBmcm9tICcuLi90c2wvVFNMQ29yZS5qcyc7XG5pbXBvcnQgeyBtb2RlbFdvcmxkTWF0cml4IH0gZnJvbSAnLi9Nb2RlbE5vZGUuanMnO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBwb3NpdGlvbiBhdHRyaWJ1dGUgb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtBdHRyaWJ1dGVOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgcG9zaXRpb25HZW9tZXRyeSA9IC8qQF9fUFVSRV9fKi8gYXR0cmlidXRlKCAncG9zaXRpb24nLCAndmVjMycgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdmVydGV4IHBvc2l0aW9uIGluIGxvY2FsIHNwYWNlIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7QXR0cmlidXRlTm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHBvc2l0aW9uTG9jYWwgPSAvKkBfX1BVUkVfXyovIHBvc2l0aW9uR2VvbWV0cnkudG9WYXJ5aW5nKCAncG9zaXRpb25Mb2NhbCcgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcHJldmlvdXMgdmVydGV4IHBvc2l0aW9uIGluIGxvY2FsIHNwYWNlIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqIFVzZWQgaW4gY29udGV4dCBvZiB7QGxpbmsgVmVsb2NpdHlOb2RlfSBmb3IgcmVuZGVyaW5nIG1vdGlvbiB2ZWN0b3JzLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtBdHRyaWJ1dGVOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgcG9zaXRpb25QcmV2aW91cyA9IC8qQF9fUFVSRV9fKi8gcG9zaXRpb25HZW9tZXRyeS50b1ZhcnlpbmcoICdwb3NpdGlvblByZXZpb3VzJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSB2ZXJ0ZXggcG9zaXRpb24gaW4gd29ybGQgc3BhY2Ugb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtWYXJ5aW5nTm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHBvc2l0aW9uV29ybGQgPSAvKkBfX1BVUkVfXyovIG1vZGVsV29ybGRNYXRyaXgubXVsKCBwb3NpdGlvbkxvY2FsICkueHl6LnRvVmFyeWluZyggJ3ZfcG9zaXRpb25Xb3JsZCcgKS5jb250ZXh0KCB7IG5lZWRzUG9zaXRpb25SZWFzc2lnbjogdHJ1ZSB9ICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHBvc2l0aW9uIHdvcmxkIGRpcmVjdGlvbiBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBwb3NpdGlvbldvcmxkRGlyZWN0aW9uID0gLypAX19QVVJFX18qLyBwb3NpdGlvbkxvY2FsLnRyYW5zZm9ybURpcmVjdGlvbiggbW9kZWxXb3JsZE1hdHJpeCApLnRvVmFyeWluZyggJ3ZfcG9zaXRpb25Xb3JsZERpcmVjdGlvbicgKS5ub3JtYWxpemUoKS50b1ZhciggJ3Bvc2l0aW9uV29ybGREaXJlY3Rpb24nICkuY29udGV4dCggeyBuZWVkc1Bvc2l0aW9uUmVhc3NpZ246IHRydWUgfSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSB2ZXJ0ZXggcG9zaXRpb24gaW4gdmlldyBzcGFjZSBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1ZhcnlpbmdOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgcG9zaXRpb25WaWV3ID0gLypAX19QVVJFX18qLyAoIEZuKCAoIGJ1aWxkZXIgKSA9PiB7XG5cblx0cmV0dXJuIGJ1aWxkZXIuY29udGV4dC5zZXR1cFBvc2l0aW9uVmlldygpO1xuXG59LCAndmVjMycgKS5vbmNlKCkgKSgpLnRvVmFyeWluZyggJ3ZfcG9zaXRpb25WaWV3JyApLmNvbnRleHQoIHsgbmVlZHNQb3NpdGlvblJlYXNzaWduOiB0cnVlIH0gKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcG9zaXRpb24gdmlldyBkaXJlY3Rpb24gb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtWYXJ5aW5nTm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHBvc2l0aW9uVmlld0RpcmVjdGlvbiA9IC8qQF9fUFVSRV9fKi8gcG9zaXRpb25WaWV3Lm5lZ2F0ZSgpLnRvVmFyeWluZyggJ3ZfcG9zaXRpb25WaWV3RGlyZWN0aW9uJyApLm5vcm1hbGl6ZSgpLnRvVmFyKCAncG9zaXRpb25WaWV3RGlyZWN0aW9uJyApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IG5vZGVJbW11dGFibGUsIGZsb2F0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5pbXBvcnQgeyBCYWNrU2lkZSwgV2ViR0xDb29yZGluYXRlU3lzdGVtIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBUaGlzIG5vZGUgY2FuIGJlIHVzZWQgdG8gZXZhbHVhdGUgd2hldGhlciBhIHByaW1pdGl2ZSBpcyBmcm9udCBvciBiYWNrIGZhY2luZy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBGcm9udEZhY2luZ05vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0Zyb250RmFjaW5nTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGZyb250IGZhY2luZyBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlciggJ2Jvb2wnICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzRnJvbnRGYWNpbmdOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCB7IHJlbmRlcmVyLCBtYXRlcmlhbCB9ID0gYnVpbGRlcjtcblxuXHRcdGlmICggcmVuZGVyZXIuY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0XHRcdHJldHVybiAnZmFsc2UnO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYnVpbGRlci5nZXRGcm9udEZhY2luZygpO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBGcm9udEZhY2luZ05vZGU7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgd2hldGhlciBhIHByaW1pdGl2ZSBpcyBmcm9udCBvciBiYWNrIGZhY2luZ1xuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtGcm9udEZhY2luZ05vZGU8Ym9vbD59XG4gKi9cbmV4cG9ydCBjb25zdCBmcm9udEZhY2luZyA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggRnJvbnRGYWNpbmdOb2RlICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGZyb250IGZhY2luZyBzdGF0dXMgYXMgYSBudW1iZXIgaW5zdGVhZCBvZiBhIGJvb2wuXG4gKiBgMWAgbWVhbnMgZnJvbnQgZmFjaW5nLCBgLTFgIG1lYW5zIGJhY2sgZmFjaW5nLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGZhY2VEaXJlY3Rpb24gPSAvKkBfX1BVUkVfXyovIGZsb2F0KCBmcm9udEZhY2luZyApLm11bCggMi4wICkuc3ViKCAxLjAgKTtcbiIsImltcG9ydCB7IGF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQXR0cmlidXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBjYW1lcmFWaWV3TWF0cml4IH0gZnJvbSAnLi9DYW1lcmEuanMnO1xuaW1wb3J0IHsgbW9kZWxOb3JtYWxNYXRyaXgsIG1vZGVsV29ybGRNYXRyaXggfSBmcm9tICcuL01vZGVsTm9kZS5qcyc7XG5pbXBvcnQgeyBtYXQzLCB2ZWMzLCBGbiwgdmFyeWluZyB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uVmlldyB9IGZyb20gJy4vUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgZmFjZURpcmVjdGlvbiB9IGZyb20gJy4uL2Rpc3BsYXkvRnJvbnRGYWNpbmdOb2RlLmpzJztcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxHZW9tZXRyeSA9IC8qQF9fUFVSRV9fKi8gYXR0cmlidXRlKCAnbm9ybWFsJywgJ3ZlYzMnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHZlcnRleCBub3JtYWwgaW4gbG9jYWwgc3BhY2Ugb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsTG9jYWwgPSAvKkBfX1BVUkVfXyovICggRm4oICggYnVpbGRlciApID0+IHtcblxuXHRpZiAoIGJ1aWxkZXIuZ2VvbWV0cnkuaGFzQXR0cmlidXRlKCAnbm9ybWFsJyApID09PSBmYWxzZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RTTC5Ob3JtYWxOb2RlOiBWZXJ0ZXggYXR0cmlidXRlIFwibm9ybWFsXCIgbm90IGZvdW5kIG9uIGdlb21ldHJ5LicgKTtcblxuXHRcdHJldHVybiB2ZWMzKCAwLCAxLCAwICk7XG5cblx0fVxuXG5cdHJldHVybiBub3JtYWxHZW9tZXRyeTtcblxufSwgJ3ZlYzMnICkub25jZSgpICkoKS50b1ZhciggJ25vcm1hbExvY2FsJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBmbGF0IHZlcnRleCBub3JtYWwgaW4gdmlldyBzcGFjZSBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxGbGF0ID0gLypAX19QVVJFX18qLyBwb3NpdGlvblZpZXcuZEZkeCgpLmNyb3NzKCBwb3NpdGlvblZpZXcuZEZkeSgpICkubm9ybWFsaXplKCkudG9WYXIoICdub3JtYWxGbGF0JyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSB2ZXJ0ZXggbm9ybWFsIGluIHZpZXcgc3BhY2Ugb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsVmlldyA9IC8qQF9fUFVSRV9fKi8gKCBGbiggKCBidWlsZGVyICkgPT4ge1xuXG5cdGxldCBub2RlO1xuXG5cdGlmICggYnVpbGRlci5tYXRlcmlhbC5mbGF0U2hhZGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdG5vZGUgPSBub3JtYWxGbGF0O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRub2RlID0gdmFyeWluZyggdHJhbnNmb3JtTm9ybWFsVG9WaWV3KCBub3JtYWxMb2NhbCApLCAndl9ub3JtYWxWaWV3JyApLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHRyZXR1cm4gbm9kZTtcblxufSwgJ3ZlYzMnICkub25jZSgpICkoKS50b1ZhciggJ25vcm1hbFZpZXcnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHZlcnRleCBub3JtYWwgaW4gd29ybGQgc3BhY2Ugb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsV29ybGQgPSAvKkBfX1BVUkVfXyovIHZhcnlpbmcoIG5vcm1hbFZpZXcudHJhbnNmb3JtRGlyZWN0aW9uKCBjYW1lcmFWaWV3TWF0cml4ICksICd2X25vcm1hbFdvcmxkJyApLm5vcm1hbGl6ZSgpLnRvVmFyKCAnbm9ybWFsV29ybGQnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHRyYW5zZm9ybWVkIHZlcnRleCBub3JtYWwgaW4gdmlldyBzcGFjZSBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcgPSAvKkBfX1BVUkVfXyovICggRm4oICggYnVpbGRlciApID0+IHtcblxuXHQvLyBVc2UgZ2V0VVYgY29udGV4dCB0byBhdm9pZCBzaWRlIGVmZmVjdHMgZnJvbSBub2RlcyBvdmVyd3JpdGluZyBnZXRVViBpbiB0aGUgY29udGV4dCAoZS5nLiBFbnZpcm9ubWVudE5vZGUpXG5cblx0cmV0dXJuIGJ1aWxkZXIuY29udGV4dC5zZXR1cE5vcm1hbCgpLmNvbnRleHQoIHsgZ2V0VVY6IG51bGwgfSApO1xuXG59LCAndmVjMycgKS5vbmNlKCkgKSgpLm11bCggZmFjZURpcmVjdGlvbiApLnRvVmFyKCAndHJhbnNmb3JtZWROb3JtYWxWaWV3JyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSB0cmFuc2Zvcm1lZCB2ZXJ0ZXggbm9ybWFsIGluIHdvcmxkIHNwYWNlIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybWVkTm9ybWFsV29ybGQgPSAvKkBfX1BVUkVfXyovIHRyYW5zZm9ybWVkTm9ybWFsVmlldy50cmFuc2Zvcm1EaXJlY3Rpb24oIGNhbWVyYVZpZXdNYXRyaXggKS50b1ZhciggJ3RyYW5zZm9ybWVkTm9ybWFsV29ybGQnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHRyYW5zZm9ybWVkIGNsZWFyY29hdCB2ZXJ0ZXggbm9ybWFsIGluIHZpZXcgc3BhY2Ugb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgdHJhbnNmb3JtZWRDbGVhcmNvYXROb3JtYWxWaWV3ID0gLypAX19QVVJFX18qLyAoIEZuKCAoIGJ1aWxkZXIgKSA9PiB7XG5cblx0Ly8gVXNlIGdldFVWIGNvbnRleHQgdG8gYXZvaWQgc2lkZSBlZmZlY3RzIGZyb20gbm9kZXMgb3ZlcndyaXRpbmcgZ2V0VVYgaW4gdGhlIGNvbnRleHQgKGUuZy4gRW52aXJvbm1lbnROb2RlKVxuXG5cdHJldHVybiBidWlsZGVyLmNvbnRleHQuc2V0dXBDbGVhcmNvYXROb3JtYWwoKS5jb250ZXh0KCB7IGdldFVWOiBudWxsIH0gKTtcblxufSwgJ3ZlYzMnICkub25jZSgpICkoKS5tdWwoIGZhY2VEaXJlY3Rpb24gKS50b1ZhciggJ3RyYW5zZm9ybWVkQ2xlYXJjb2F0Tm9ybWFsVmlldycgKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSBub3JtYWwgd2l0aCB0aGUgZ2l2ZW4gbWF0cml4LlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBub3JtYWwgLSBUaGUgbm9ybWFsLlxuICogQHBhcmFtIHtOb2RlPG1hdDM+fSBbbWF0cml4PW1vZGVsV29ybGRNYXRyaXhdIC0gVGhlIG1hdHJpeC5cbiAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSB0cmFuc2Zvcm1lZCBub3JtYWwuXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1Ob3JtYWwgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgbm9ybWFsLCBtYXRyaXggPSBtb2RlbFdvcmxkTWF0cml4IF0gKSA9PiB7XG5cblx0Y29uc3QgbSA9IG1hdDMoIG1hdHJpeCApO1xuXG5cdGNvbnN0IHRyYW5zZm9ybWVkTm9ybWFsID0gbm9ybWFsLmRpdiggdmVjMyggbVsgMCBdLmRvdCggbVsgMCBdICksIG1bIDEgXS5kb3QoIG1bIDEgXSApLCBtWyAyIF0uZG90KCBtWyAyIF0gKSApICk7XG5cblx0cmV0dXJuIG0ubXVsKCB0cmFuc2Zvcm1lZE5vcm1hbCApLnh5ejtcblxufSApO1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIGdpdmVuIG5vcm1hbCBmcm9tIGxvY2FsIHRvIHZpZXcgc3BhY2UuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IG5vcm1hbCAtIFRoZSBub3JtYWwuXG4gKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHRyYW5zZm9ybWVkIG5vcm1hbC5cbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybU5vcm1hbFRvVmlldyA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBub3JtYWwgXSwgYnVpbGRlciApID0+IHtcblxuXHRjb25zdCBtb2RlbE5vcm1hbFZpZXdNYXRyaXggPSBidWlsZGVyLnJlbmRlcmVyLm5vZGVzLm1vZGVsTm9ybWFsVmlld01hdHJpeDtcblxuXHRpZiAoIG1vZGVsTm9ybWFsVmlld01hdHJpeCAhPT0gbnVsbCApIHtcblxuXHRcdHJldHVybiBtb2RlbE5vcm1hbFZpZXdNYXRyaXgudHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRjb25zdCB0cmFuc2Zvcm1lZE5vcm1hbCA9IG1vZGVsTm9ybWFsTWF0cml4Lm11bCggbm9ybWFsICk7XG5cblx0cmV0dXJuIGNhbWVyYVZpZXdNYXRyaXgudHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xuXG59ICk7XG4iLCJpbXBvcnQgeyBFdWxlciB9IGZyb20gJy4uLy4uL21hdGgvRXVsZXIuanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uLy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgeyB1bmlmb3JtIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtTm9kZS5qcyc7XG5cbmNvbnN0IF9lMSA9IC8qQF9fUFVSRV9fKi8gbmV3IEV1bGVyKCk7XG5jb25zdCBfbTEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHJlZnJhY3Rpb24gcmF0aW8gb2YgdGhlIG1hdGVyaWFsIHVzZWQgZm9yIHJlbmRlcmluZyB0aGUgY3VycmVudCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1VuaWZvcm1Ob2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsUmVmcmFjdGlvblJhdGlvID0gLypAX19QVVJFX18qLyB1bmlmb3JtKCAwICkub25SZWZlcmVuY2UoICggeyBtYXRlcmlhbCB9ICkgPT4gbWF0ZXJpYWwgKS5vbk9iamVjdFVwZGF0ZSggKCB7IG1hdGVyaWFsIH0gKSA9PiBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW8gKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgaW50ZW5zaXR5IG9mIGVudmlyb25tZW50IG1hcHMgb2YgUEJSIG1hdGVyaWFscy5cbiAqIFdoZW4gYG1hdGVyaWFsLmVudk1hcGAgaXMgc2V0LCB0aGUgdmFsdWUgaXMgYG1hdGVyaWFsLmVudk1hcEludGVuc2l0eWAgb3RoZXJ3aXNlIGBzY2VuZS5lbnZpcm9ubWVudEludGVuc2l0eWAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxFbnZJbnRlbnNpdHkgPSAvKkBfX1BVUkVfXyovIHVuaWZvcm0oIDEgKS5vblJlZmVyZW5jZSggKCB7IG1hdGVyaWFsIH0gKSA9PiBtYXRlcmlhbCApLm9uT2JqZWN0VXBkYXRlKCBmdW5jdGlvbiAoIHsgbWF0ZXJpYWwsIHNjZW5lIH0gKSB7XG5cblx0cmV0dXJuIG1hdGVyaWFsLmVudk1hcCA/IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eSA6IHNjZW5lLmVudmlyb25tZW50SW50ZW5zaXR5O1xuXG59ICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHJvdGF0aW9uIG9mIGVudmlyb25tZW50IG1hcHMuXG4gKiBXaGVuIGBtYXRlcmlhbC5lbnZNYXBgIGlzIHNldCwgdGhlIHZhbHVlIGlzIGBtYXRlcmlhbC5lbnZNYXBSb3RhdGlvbmAuIGBzY2VuZS5lbnZpcm9ubWVudFJvdGF0aW9uYCBjb250cm9scyB0aGVcbiAqIHJvdGF0aW9uIG9mIGBzY2VuZS5lbnZpcm9ubWVudGAgaW5zdGVhZC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxtYXQ0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsRW52Um90YXRpb24gPSAvKkBfX1BVUkVfXyovIHVuaWZvcm0oIG5ldyBNYXRyaXg0KCkgKS5vblJlZmVyZW5jZSggZnVuY3Rpb24gKCBmcmFtZSApIHtcblxuXHRyZXR1cm4gZnJhbWUubWF0ZXJpYWw7XG5cbn0gKS5vbk9iamVjdFVwZGF0ZSggZnVuY3Rpb24gKCB7IG1hdGVyaWFsLCBzY2VuZSB9ICkge1xuXG5cdGNvbnN0IHJvdGF0aW9uID0gKCBzY2VuZS5lbnZpcm9ubWVudCAhPT0gbnVsbCAmJiBtYXRlcmlhbC5lbnZNYXAgPT09IG51bGwgKSA/IHNjZW5lLmVudmlyb25tZW50Um90YXRpb24gOiBtYXRlcmlhbC5lbnZNYXBSb3RhdGlvbjtcblxuXHRpZiAoIHJvdGF0aW9uICkge1xuXG5cdFx0X2UxLmNvcHkoIHJvdGF0aW9uICk7XG5cblx0XHRfbTEubWFrZVJvdGF0aW9uRnJvbUV1bGVyKCBfZTEgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0X20xLmlkZW50aXR5KCk7XG5cblx0fVxuXG5cdHJldHVybiBfbTE7XG5cbn0gKTtcbiIsImltcG9ydCB7IGNhbWVyYVZpZXdNYXRyaXggfSBmcm9tICcuL0NhbWVyYS5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcgfSBmcm9tICcuL05vcm1hbC5qcyc7XG5pbXBvcnQgeyBwb3NpdGlvblZpZXdEaXJlY3Rpb24gfSBmcm9tICcuL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IG1hdGVyaWFsUmVmcmFjdGlvblJhdGlvIH0gZnJvbSAnLi9NYXRlcmlhbFByb3BlcnRpZXMuanMnO1xuXG4vKipcbiAqIFRoZSByZWZsZWN0IHZlY3RvciBpbiB2aWV3IHNwYWNlLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgcmVmbGVjdFZpZXcgPSAvKkBfX1BVUkVfXyovIHBvc2l0aW9uVmlld0RpcmVjdGlvbi5uZWdhdGUoKS5yZWZsZWN0KCB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcgKTtcblxuLyoqXG4gKiBUaGUgcmVmcmFjdCB2ZWN0b3IgaW4gdmlldyBzcGFjZS5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZnJhY3RWaWV3ID0gLypAX19QVVJFX18qLyBwb3NpdGlvblZpZXdEaXJlY3Rpb24ubmVnYXRlKCkucmVmcmFjdCggdHJhbnNmb3JtZWROb3JtYWxWaWV3LCBtYXRlcmlhbFJlZnJhY3Rpb25SYXRpbyApO1xuXG4vKipcbiAqIFVzZWQgZm9yIHNhbXBsaW5nIGN1YmUgbWFwcyB3aGVuIHVzaW5nIGN1YmUgcmVmbGVjdGlvbiBtYXBwaW5nLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgcmVmbGVjdFZlY3RvciA9IC8qQF9fUFVSRV9fKi8gcmVmbGVjdFZpZXcudHJhbnNmb3JtRGlyZWN0aW9uKCBjYW1lcmFWaWV3TWF0cml4ICkudG9WYXIoICdyZWZsZWN0VmVjdG9yJyApO1xuXG4vKipcbiAqIFVzZWQgZm9yIHNhbXBsaW5nIGN1YmUgbWFwcyB3aGVuIHVzaW5nIGN1YmUgcmVmcmFjdGlvbiBtYXBwaW5nLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgcmVmcmFjdFZlY3RvciA9IC8qQF9fUFVSRV9fKi8gcmVmcmFjdFZpZXcudHJhbnNmb3JtRGlyZWN0aW9uKCBjYW1lcmFWaWV3TWF0cml4ICkudG9WYXIoICdyZWZsZWN0VmVjdG9yJyApO1xuIiwiaW1wb3J0IFRleHR1cmVOb2RlIGZyb20gJy4vVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgcmVmbGVjdFZlY3RvciwgcmVmcmFjdFZlY3RvciB9IGZyb20gJy4vUmVmbGVjdFZlY3Rvci5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHksIHZlYzMgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbmltcG9ydCB7IEN1YmVSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLCBXZWJHUFVDb29yZGluYXRlU3lzdGVtIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IG1hdGVyaWFsRW52Um90YXRpb24gfSBmcm9tICcuL01hdGVyaWFsUHJvcGVydGllcy5qcyc7XG5cbi8qKlxuICogVGhpcyB0eXBlIG9mIHVuaWZvcm0gbm9kZSByZXByZXNlbnRzIGEgY3ViZSB0ZXh0dXJlLlxuICpcbiAqIEBhdWdtZW50cyBUZXh0dXJlTm9kZVxuICovXG5jbGFzcyBDdWJlVGV4dHVyZU5vZGUgZXh0ZW5kcyBUZXh0dXJlTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdDdWJlVGV4dHVyZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBjdWJlIHRleHR1cmUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtDdWJlVGV4dHVyZX0gdmFsdWUgLSBUaGUgY3ViZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0gez9Ob2RlPHZlYzM+fSBbdXZOb2RlPW51bGxdIC0gVGhlIHV2IG5vZGUuXG5cdCAqIEBwYXJhbSB7P05vZGU8aW50Pn0gW2xldmVsTm9kZT1udWxsXSAtIFRoZSBsZXZlbCBub2RlLlxuXHQgKiBAcGFyYW0gez9Ob2RlPGZsb2F0Pn0gW2JpYXNOb2RlPW51bGxdIC0gVGhlIGJpYXMgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSwgdXZOb2RlID0gbnVsbCwgbGV2ZWxOb2RlID0gbnVsbCwgYmlhc05vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIHZhbHVlLCB1dk5vZGUsIGxldmVsTm9kZSwgYmlhc05vZGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNDdWJlVGV4dHVyZU5vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byByZXR1cm4gYSBmaXhlZCB2YWx1ZSBgJ2N1YmVUZXh0dXJlJ2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGlucHV0IHR5cGUuXG5cdCAqL1xuXHRnZXRJbnB1dFR5cGUoIC8qYnVpbGRlciovICkge1xuXG5cdFx0cmV0dXJuICdjdWJlVGV4dHVyZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZGVmYXVsdCB1dnMgYmFzZWQgb24gdGhlIG1hcHBpbmcgdHlwZSBvZiB0aGUgY3ViZSB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgZGVmYXVsdCB1diBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRnZXREZWZhdWx0VVYoKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gdGhpcy52YWx1ZTtcblxuXHRcdGlmICggdGV4dHVyZS5tYXBwaW5nID09PSBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdHJldHVybiByZWZsZWN0VmVjdG9yO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5tYXBwaW5nID09PSBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdHJldHVybiByZWZyYWN0VmVjdG9yO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkN1YmVUZXh0dXJlTm9kZTogTWFwcGluZyBcIiVzXCIgbm90IHN1cHBvcnRlZC4nLCB0ZXh0dXJlLm1hcHBpbmcgKTtcblxuXHRcdFx0cmV0dXJuIHZlYzMoIDAsIDAsIDAgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHdpdGggYW4gZW1wdHkgaW1wbGVtZW50YXRpb24gc2luY2UgdGhlIGB1cGRhdGVNYXRyaXhgIGZsYWcgaXMgaWdub3JlZFxuXHQgKiBmb3IgY3ViZSB0ZXh0dXJlcy4gVGhlIHV2IHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBpcyBub3QgYXBwbGllZCB0byBjdWJlIHRleHR1cmVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gVGhlIHVwZGF0ZSB0b2dnbGUuXG5cdCAqL1xuXHRzZXRVcGRhdGVNYXRyaXgoIC8qdXBkYXRlTWF0cml4Ki8gKSB7IH0gLy8gSWdub3JlIC51cGRhdGVNYXRyaXggZm9yIEN1YmVUZXh0dXJlTm9kZVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIHV2IG5vZGUuIERlcGVuZGluZyBvbiB0aGUgYmFja2VuZCBhcyB3ZWxsIGFzIHRoZSB0ZXh0dXJlIHR5cGUsIGl0IG1pZ2h0IGJlIG5lY2Vzc2FyeVxuXHQgKiB0byBtb2RpZnkgdGhlIHV2IG5vZGUgZm9yIGNvcnJlY3Qgc2FtcGxpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gdXZOb2RlIC0gVGhlIHV2IG5vZGUgdG8gc2V0dXAuXG5cdCAqIEByZXR1cm4ge05vZGV9IFRoZSB1cGRhdGVkIHV2IG5vZGUuXG5cdCAqL1xuXHRzZXR1cFVWKCBidWlsZGVyLCB1dk5vZGUgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gdGhpcy52YWx1ZTtcblxuXHRcdGlmICggYnVpbGRlci5yZW5kZXJlci5jb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtIHx8ICEgdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgKSB7XG5cblx0XHRcdHV2Tm9kZSA9IHZlYzMoIHV2Tm9kZS54Lm5lZ2F0ZSgpLCB1dk5vZGUueXogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRlcmlhbEVudlJvdGF0aW9uLm11bCggdXZOb2RlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIHV2IGNvZGUgc25pcHBldC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHBhcmFtIHtOb2RlfSBjdWJlVVYgLSBUaGUgdXYgbm9kZSB0byBnZW5lcmF0ZSBjb2RlIGZvci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIGNvZGUgc25pcHBldC5cblx0ICovXG5cdGdlbmVyYXRlVVYoIGJ1aWxkZXIsIGN1YmVVViApIHtcblxuXHRcdHJldHVybiBjdWJlVVYuYnVpbGQoIGJ1aWxkZXIsICd2ZWMzJyApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDdWJlVGV4dHVyZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGN1YmUgdGV4dHVyZSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtDdWJlVGV4dHVyZX0gdmFsdWUgLSBUaGUgY3ViZSB0ZXh0dXJlLlxuICogQHBhcmFtIHs/Tm9kZTx2ZWMzPn0gW3V2Tm9kZT1udWxsXSAtIFRoZSB1diBub2RlLlxuICogQHBhcmFtIHs/Tm9kZTxpbnQ+fSBbbGV2ZWxOb2RlPW51bGxdIC0gVGhlIGxldmVsIG5vZGUuXG4gKiBAcGFyYW0gez9Ob2RlPGZsb2F0Pn0gW2JpYXNOb2RlPW51bGxdIC0gVGhlIGJpYXMgbm9kZS5cbiAqIEByZXR1cm5zIHtDdWJlVGV4dHVyZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjdWJlVGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBDdWJlVGV4dHVyZU5vZGUgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBOb2RlVXBkYXRlVHlwZSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IHVuaWZvcm0gfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Ob2RlLmpzJztcbmltcG9ydCB7IHRleHR1cmUgfSBmcm9tICcuL1RleHR1cmVOb2RlLmpzJztcbmltcG9ydCB7IGN1YmVUZXh0dXJlIH0gZnJvbSAnLi9DdWJlVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgYnVmZmVyIH0gZnJvbSAnLi9CdWZmZXJOb2RlLmpzJztcbmltcG9ydCB7IG5vZGVPYmplY3QgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyB1bmlmb3JtQXJyYXkgfSBmcm9tICcuL1VuaWZvcm1BcnJheU5vZGUuanMnO1xuaW1wb3J0IEFycmF5RWxlbWVudE5vZGUgZnJvbSAnLi4vdXRpbHMvQXJyYXlFbGVtZW50Tm9kZS5qcyc7XG5cbi8vIFRPRE86IEF2b2lkIGR1cGxpY2F0ZWQgY29kZSBhbmQgdWVzIG9ubHkgUmVmZXJlbmNlQmFzZU5vZGUgb3IgUmVmZXJlbmNlTm9kZVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgb25seSByZWxldmFudCBpZiB0aGUgcmVmZXJlbmNlZCBwcm9wZXJ0eSBpcyBhcnJheS1saWtlLlxuICogSW4gdGhpcyBjYXNlLCBgUmVmZXJlbmNlRWxlbWVudE5vZGVgIGFsbG93cyB0byByZWZlciB0byBhIHNwZWNpZmljXG4gKiBlbGVtZW50IGluc2lkZSB0aGUgZGF0YSBzdHJ1Y3R1cmUgdmlhIGFuIGluZGV4LlxuICpcbiAqIEBhdWdtZW50cyBBcnJheUVsZW1lbnROb2RlXG4gKi9cbmNsYXNzIFJlZmVyZW5jZUVsZW1lbnROb2RlIGV4dGVuZHMgQXJyYXlFbGVtZW50Tm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdSZWZlcmVuY2VFbGVtZW50Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlZmVyZW5jZSBlbGVtZW50IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P1JlZmVyZW5jZU5vZGV9IHJlZmVyZW5jZU5vZGUgLSBUaGUgcmVmZXJlbmNlIG5vZGUuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gaW5kZXhOb2RlIC0gVGhlIGluZGV4IG5vZGUgdGhhdCBkZWZpbmVzIHRoZSBlbGVtZW50IGFjY2Vzcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByZWZlcmVuY2VOb2RlLCBpbmRleE5vZGUgKSB7XG5cblx0XHRzdXBlciggcmVmZXJlbmNlTm9kZSwgaW5kZXhOb2RlICk7XG5cblx0XHQvKipcblx0XHQgKiBTaW1pbGFyIHRvIHtAbGluayBSZWZlcmVuY2VOb2RlI3JlZmVyZW5jZX0sIGFuIGFkZGl0aW9uYWxcblx0XHQgKiBwcm9wZXJ0eSByZWZlcmVuY2VzIHRvIHRoZSBjdXJyZW50IG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1JlZmVyZW5jZU5vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucmVmZXJlbmNlTm9kZSA9IHJlZmVyZW5jZU5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUmVmZXJlbmNlRWxlbWVudE5vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgb3ZlcndyaXR0ZW4gc2luY2UgdGhlIG5vZGUgdHlwZSBpcyBpbmZlcnJlZCBmcm9tXG5cdCAqIHRoZSB1bmlmb3JtIHR5cGUgb2YgdGhlIHJlZmVyZW5jZSBub2RlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnJlZmVyZW5jZU5vZGUudW5pZm9ybVR5cGU7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3Qgc25pcHBldCA9IHN1cGVyLmdlbmVyYXRlKCBidWlsZGVyICk7XG5cdFx0Y29uc3QgYXJyYXlUeXBlID0gdGhpcy5yZWZlcmVuY2VOb2RlLmdldE5vZGVUeXBlKCk7XG5cdFx0Y29uc3QgZWxlbWVudFR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCk7XG5cblx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIHNuaXBwZXQsIGFycmF5VHlwZSwgZWxlbWVudFR5cGUgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGlzIHR5cGUgb2Ygbm9kZSBlc3RhYmxpc2hlcyBhIHJlZmVyZW5jZSB0byBhIHByb3BlcnR5IG9mIGFub3RoZXIgb2JqZWN0LlxuICogSW4gdGhpcyB3YXksIHRoZSB2YWx1ZSBvZiB0aGUgbm9kZSBpcyBhdXRvbWF0aWNhbGx5IGxpbmtlZCB0byB0aGUgdmFsdWUgb2ZcbiAqIHJlZmVyZW5jZWQgb2JqZWN0LiBSZWZlcmVuY2Ugbm9kZXMgaW50ZXJuYWxseSByZXByZXNlbnQgdGhlIGxpbmtlZCB2YWx1ZVxuICogYXMgYSB1bmlmb3JtLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFJlZmVyZW5jZU5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1JlZmVyZW5jZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyByZWZlcmVuY2Ugbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRoZSBub2RlIHJlZmVycyB0by5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHVuaWZvcm1UeXBlIC0gVGhlIHVuaWZvcm0gdHlwZSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgcHJvcGVydHkgdmFsdWUuXG5cdCAqIEBwYXJhbSB7P09iamVjdH0gW29iamVjdD1udWxsXSAtIFRoZSBvYmplY3QgdGhlIHByb3BlcnR5IGJlbG9uZ3MgdG8uXG5cdCAqIEBwYXJhbSB7P251bWJlcn0gW2NvdW50PW51bGxdIC0gV2hlbiB0aGUgbGlua2VkIHByb3BlcnR5IGlzIGFuIGFycmF5LWxpa2UsIHRoaXMgcGFyYW1ldGVyIGRlZmluZXMgaXRzIGxlbmd0aC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwcm9wZXJ0eSwgdW5pZm9ybVR5cGUsIG9iamVjdCA9IG51bGwsIGNvdW50ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdGhlIG5vZGUgcmVmZXJzIHRvLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdW5pZm9ybSB0eXBlIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBwcm9wZXJ0eSB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy51bmlmb3JtVHlwZSA9IHVuaWZvcm1UeXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG9iamVjdCB0aGUgcHJvcGVydHkgYmVsb25ncyB0by5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gdGhlIGxpbmtlZCBwcm9wZXJ0eSBpcyBhbiBhcnJheSwgdGhpcyBwYXJhbWV0ZXIgZGVmaW5lcyBpdHMgbGVuZ3RoLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9udW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwcm9wZXJ0eSBuYW1lIG1pZ2h0IGhhdmUgZG90cyBzbyBuZXN0ZWQgcHJvcGVydGllcyBjYW4gYmUgcmVmZXJyZWQuXG5cdFx0ICogVGhlIGhpZXJhcmNoeSBvZiB0aGUgbmFtZXMgaXMgc3RvcmVkIGluc2lkZSB0aGlzIGFycmF5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PHN0cmluZz59XG5cdFx0ICovXG5cdFx0dGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydHkuc3BsaXQoICcuJyApO1xuXG5cdFx0LyoqXG5cdFx0ICogUG9pbnRzIHRvIHRoZSBjdXJyZW50IHJlZmVycmVkIG9iamVjdC4gVGhpcyBwcm9wZXJ0eSBleGlzdHMgbmV4dCB0byB7QGxpbmsgUmVmZXJlbmNlTm9kZSNvYmplY3R9XG5cdFx0ICogc2luY2UgdGhlIGZpbmFsIHJlZmVyZW5jZSBtaWdodCBiZSB1cGRhdGVkIGZyb20gY2FsbGluZyBjb2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9PYmplY3R9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucmVmZXJlbmNlID0gb2JqZWN0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVuaWZvcm0gbm9kZSB0aGF0IGhvbGRzIHRoZSB2YWx1ZSBvZiB0aGUgcmVmZXJlbmNlIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdW5pZm9ybSBncm91cCBvZiB0aGUgaW50ZXJuYWwgdW5pZm9ybS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtVbmlmb3JtR3JvdXBOb2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmdyb3VwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIG9wdGlvbmFsIGxhYmVsIG9mIHRoZSBpbnRlcm5hbCB1bmlmb3JtIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJ3cml0dGVuIHNpbmNlIHJlZmVyZW5jZSBub2RlcyBhcmUgdXBkYXRlZCBwZXIgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnb2JqZWN0J1xuXHRcdCAqL1xuXHRcdHRoaXMudXBkYXRlVHlwZSA9IE5vZGVVcGRhdGVUeXBlLk9CSkVDVDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZW4gdGhlIHJlZmVycmVkIHByb3BlcnR5IGlzIGFycmF5LWxpa2UsIHRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkXG5cdCAqIHRvIGFjY2VzcyBlbGVtZW50cyB2aWEgYW4gaW5kZXggbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtJbmRleE5vZGV9IGluZGV4Tm9kZSAtIGluZGV4Tm9kZS5cblx0ICogQHJldHVybiB7UmVmZXJlbmNlRWxlbWVudE5vZGV9IEEgcmVmZXJlbmNlIHRvIGFuIGVsZW1lbnQuXG5cdCAqL1xuXHRlbGVtZW50KCBpbmRleE5vZGUgKSB7XG5cblx0XHRyZXR1cm4gbm9kZU9iamVjdCggbmV3IFJlZmVyZW5jZUVsZW1lbnROb2RlKCB0aGlzLCBub2RlT2JqZWN0KCBpbmRleE5vZGUgKSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB1bmlmb3JtIGdyb3VwIGZvciB0aGlzIHJlZmVyZW5jZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1VuaWZvcm1Hcm91cE5vZGV9IGdyb3VwIC0gVGhlIHVuaWZvcm0gZ3JvdXAgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtSZWZlcmVuY2VOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRzZXRHcm91cCggZ3JvdXAgKSB7XG5cblx0XHR0aGlzLmdyb3VwID0gZ3JvdXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGxhYmVsIGZvciB0aGUgaW50ZXJuYWwgdW5pZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbGFiZWwgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtSZWZlcmVuY2VOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRsYWJlbCggbmFtZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIG5vZGUgdHlwZSB3aGljaCBhdXRvbWF0aWNhbGx5IGRlZmluZXMgdGhlIGludGVybmFsXG5cdCAqIHVuaWZvcm0gdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVuaWZvcm1UeXBlIC0gVGhlIHR5cGUgdG8gc2V0LlxuXHQgKi9cblx0c2V0Tm9kZVR5cGUoIHVuaWZvcm1UeXBlICkge1xuXG5cdFx0bGV0IG5vZGUgPSBudWxsO1xuXG5cdFx0aWYgKCB0aGlzLmNvdW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRub2RlID0gYnVmZmVyKCBudWxsLCB1bmlmb3JtVHlwZSwgdGhpcy5jb3VudCApO1xuXG5cdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdGhpcy5nZXRWYWx1ZUZyb21SZWZlcmVuY2UoKSApICkge1xuXG5cdFx0XHRub2RlID0gdW5pZm9ybUFycmF5KCBudWxsLCB1bmlmb3JtVHlwZSApO1xuXG5cdFx0fSBlbHNlIGlmICggdW5pZm9ybVR5cGUgPT09ICd0ZXh0dXJlJyApIHtcblxuXHRcdFx0bm9kZSA9IHRleHR1cmUoIG51bGwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHVuaWZvcm1UeXBlID09PSAnY3ViZVRleHR1cmUnICkge1xuXG5cdFx0XHRub2RlID0gY3ViZVRleHR1cmUoIG51bGwgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG5vZGUgPSB1bmlmb3JtKCBudWxsLCB1bmlmb3JtVHlwZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmdyb3VwICE9PSBudWxsICkge1xuXG5cdFx0XHRub2RlLnNldEdyb3VwKCB0aGlzLmdyb3VwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubmFtZSAhPT0gbnVsbCApIG5vZGUubGFiZWwoIHRoaXMubmFtZSApO1xuXG5cdFx0dGhpcy5ub2RlID0gbm9kZS5nZXRTZWxmKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzaW5jZSB0aGUgbm9kZSB0eXBlIGlzIGluZmVycmVkIGZyb21cblx0ICogdGhlIHR5cGUgb2YgdGhlIHJlZmVyZW5jZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5ub2RlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZVJlZmVyZW5jZSggYnVpbGRlciApO1xuXHRcdFx0dGhpcy51cGRhdGVWYWx1ZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgZnJvbSB0aGUgZ2l2ZW4gcmVmZXJyZWQgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD10aGlzLnJlZmVyZW5jZV0gLSBUaGUgb2JqZWN0IHRvIHJldHJpZXZlIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmcm9tLlxuXHQgKiBAcmV0dXJuIHthbnl9IFRoZSB2YWx1ZS5cblx0ICovXG5cdGdldFZhbHVlRnJvbVJlZmVyZW5jZSggb2JqZWN0ID0gdGhpcy5yZWZlcmVuY2UgKSB7XG5cblx0XHRjb25zdCB7IHByb3BlcnRpZXMgfSA9IHRoaXM7XG5cblx0XHRsZXQgdmFsdWUgPSBvYmplY3RbIHByb3BlcnRpZXNbIDAgXSBdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhbHVlID0gdmFsdWVbIHByb3BlcnRpZXNbIGkgXSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWxsb3dzIHRvIHVwZGF0ZSB0aGUgcmVmZXJlbmNlIGJhc2VkIG9uIHRoZSBnaXZlbiBzdGF0ZS4gVGhlIHN0YXRlIGlzIG9ubHlcblx0ICogZXZhbHVhdGVkIHtAbGluayBSZWZlcmVuY2VOb2RlI29iamVjdH0gaXMgbm90IHNldC5cblx0ICpcblx0ICogQHBhcmFtIHsoTm9kZUZyYW1lfE5vZGVCdWlsZGVyKX0gc3RhdGUgLSBUaGUgY3VycmVudCBzdGF0ZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCByZWZlcmVuY2UuXG5cdCAqL1xuXHR1cGRhdGVSZWZlcmVuY2UoIHN0YXRlICkge1xuXG5cdFx0dGhpcy5yZWZlcmVuY2UgPSB0aGlzLm9iamVjdCAhPT0gbnVsbCA/IHRoaXMub2JqZWN0IDogc3RhdGUub2JqZWN0O1xuXG5cdFx0cmV0dXJuIHRoaXMucmVmZXJlbmNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG91dHB1dCBvZiB0aGUgcmVmZXJlbmNlIG5vZGUgaXMgdGhlIGludGVybmFsIHVuaWZvcm0gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7VW5pZm9ybU5vZGV9IFRoZSBvdXRwdXQgbm9kZS5cblx0ICovXG5cdHNldHVwKCAvKiBidWlsZGVyICovICkge1xuXG5cdFx0dGhpcy51cGRhdGVWYWx1ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXMubm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHRvIHRvIHVwZGF0ZSB0aGUgaW50ZXJuYWwgdW5pZm9ybSB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlRnJhbWV9IGZyYW1lIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBmcmFtZS5cblx0ICovXG5cdHVwZGF0ZSggLypmcmFtZSovICkge1xuXG5cdFx0dGhpcy51cGRhdGVWYWx1ZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0cmlldmVzIHRoZSB2YWx1ZSBmcm9tIHRoZSByZWZlcnJlZCBvYmplY3QgcHJvcGVydHkgYW5kIHVzZXMgaXRcblx0ICogdG8gdXBkYXRlZCB0aGUgaW50ZXJuYWwgdW5pZm9ybS5cblx0ICovXG5cdHVwZGF0ZVZhbHVlKCkge1xuXG5cdFx0aWYgKCB0aGlzLm5vZGUgPT09IG51bGwgKSB0aGlzLnNldE5vZGVUeXBlKCB0aGlzLnVuaWZvcm1UeXBlICk7XG5cblx0XHRjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVGcm9tUmVmZXJlbmNlKCk7XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cblx0XHRcdHRoaXMubm9kZS5hcnJheSA9IHZhbHVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5ub2RlLnZhbHVlID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZmVyZW5jZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHJlZmVyZW5jZSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdGhlIG5vZGUgcmVmZXJzIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdW5pZm9ybSB0eXBlIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqIEBwYXJhbSB7P09iamVjdH0gW29iamVjdF0gLSBUaGUgb2JqZWN0IHRoZSBwcm9wZXJ0eSBiZWxvbmdzIHRvLlxuICogQHJldHVybnMge1JlZmVyZW5jZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCByZWZlcmVuY2UgPSAoIG5hbWUsIHR5cGUsIG9iamVjdCApID0+IG5vZGVPYmplY3QoIG5ldyBSZWZlcmVuY2VOb2RlKCBuYW1lLCB0eXBlLCBvYmplY3QgKSApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSByZWZlcmVuY2Ugbm9kZS4gVXNlIHRoaXMgZnVuY3Rpb24gaWYgeW91IHdhbnQgbmVlZCBhIHJlZmVyZW5jZVxuICogdG8gYW4gYXJyYXktbGlrZSBwcm9wZXJ0eSB0aGF0IHNob3VsZCBiZSByZXByZXNlbnRlZCBhcyBhIHVuaWZvcm0gYnVmZmVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdGhlIG5vZGUgcmVmZXJzIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdW5pZm9ybSB0eXBlIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIFRoZSBudW1iZXIgb2YgdmFsdWUgaW5zaWRlIHRoZSBhcnJheS1saWtlIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBBbiBhcnJheS1saWtlIG9iamVjdCB0aGUgcHJvcGVydHkgYmVsb25ncyB0by5cbiAqIEByZXR1cm5zIHtSZWZlcmVuY2VOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcmVmZXJlbmNlQnVmZmVyID0gKCBuYW1lLCB0eXBlLCBjb3VudCwgb2JqZWN0ICkgPT4gbm9kZU9iamVjdCggbmV3IFJlZmVyZW5jZU5vZGUoIG5hbWUsIHR5cGUsIG9iamVjdCwgY291bnQgKSApO1xuIiwiaW1wb3J0IFJlZmVyZW5jZU5vZGUgZnJvbSAnLi9SZWZlcmVuY2VOb2RlLmpzJztcbmltcG9ydCB7IG5vZGVPYmplY3QgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogVGhpcyBub2RlIGlzIGEgc3BlY2lhbCB0eXBlIG9mIHJlZmVyZW5jZSBub2RlIHdoaWNoIGlzIGludGVuZGVkXG4gKiBmb3IgbGlua2luZyBtYXRlcmlhbCBwcm9wZXJ0aWVzIHdpdGggbm9kZSB2YWx1ZXMuXG4gKiBgYGBqc1xuICogY29uc3Qgb3BhY2l0eU5vZGUgPSBtYXRlcmlhbFJlZmVyZW5jZSggJ29wYWNpdHknLCAnZmxvYXQnLCBtYXRlcmlhbCApO1xuICogYGBgXG4gKiBXaGVuIGNoYW5naW5nIGBtYXRlcmlhbC5vcGFjaXR5YCwgdGhlIG5vZGUgdmFsdWUgb2YgYG9wYWNpdHlOb2RlYCB3aWxsXG4gKiBhdXRvbWF0aWNhbGx5IGJlIHVwZGF0ZWQuXG4gKlxuICogQGF1Z21lbnRzIFJlZmVyZW5jZU5vZGVcbiAqL1xuY2xhc3MgTWF0ZXJpYWxSZWZlcmVuY2VOb2RlIGV4dGVuZHMgUmVmZXJlbmNlTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdNYXRlcmlhbFJlZmVyZW5jZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtYXRlcmlhbCByZWZlcmVuY2Ugbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRoZSBub2RlIHJlZmVycyB0by5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGlucHV0VHlwZSAtIFRoZSB1bmlmb3JtIHR5cGUgdGhhdCBzaG91bGQgYmUgdXNlZCB0byByZXByZXNlbnQgdGhlIHByb3BlcnR5IHZhbHVlLlxuXHQgKiBAcGFyYW0gez9NYXRlcmlhbH0gW21hdGVyaWFsPW51bGxdIC0gVGhlIG1hdGVyaWFsIHRoZSBwcm9wZXJ0eSBiZWxvbmdzIHRvLiBXaGVuIG5vIG1hdGVyaWFsIGlzIHNldCxcblx0ICogdGhlIG5vZGUgcmVmZXJzIHRvIHRoZSBtYXRlcmlhbCBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcHJvcGVydHksIGlucHV0VHlwZSwgbWF0ZXJpYWwgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIHByb3BlcnR5LCBpbnB1dFR5cGUsIG1hdGVyaWFsICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbWF0ZXJpYWwgdGhlIHByb3BlcnR5IGJlbG9uZ3MgdG8uIFdoZW4gbm8gbWF0ZXJpYWwgaXMgc2V0LFxuXHRcdCAqIHRoZSBub2RlIHJlZmVycyB0byB0aGUgbWF0ZXJpYWwgb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9NYXRlcmlhbH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01hdGVyaWFsUmVmZXJlbmNlTm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSByZWZlcmVuY2UgYmFzZWQgb24gdGhlIGdpdmVuIHN0YXRlLiBUaGUgc3RhdGUgaXMgb25seSBldmFsdWF0ZWRcblx0ICoge0BsaW5rIE1hdGVyaWFsUmVmZXJlbmNlTm9kZSNtYXRlcmlhbH0gaXMgbm90IHNldC5cblx0ICpcblx0ICogQHBhcmFtIHsoTm9kZUZyYW1lfE5vZGVCdWlsZGVyKX0gc3RhdGUgLSBUaGUgY3VycmVudCBzdGF0ZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgdXBkYXRlZCByZWZlcmVuY2UuXG5cdCAqL1xuXHR1cGRhdGVSZWZlcmVuY2UoIHN0YXRlICkge1xuXG5cdFx0dGhpcy5yZWZlcmVuY2UgPSB0aGlzLm1hdGVyaWFsICE9PSBudWxsID8gdGhpcy5tYXRlcmlhbCA6IHN0YXRlLm1hdGVyaWFsO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVmZXJlbmNlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNYXRlcmlhbFJlZmVyZW5jZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG1hdGVyaWFsIHJlZmVyZW5jZSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdGhlIG5vZGUgcmVmZXJzIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdW5pZm9ybSB0eXBlIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqIEBwYXJhbSB7P01hdGVyaWFsfSBbbWF0ZXJpYWw9bnVsbF0gLSBUaGUgbWF0ZXJpYWwgdGhlIHByb3BlcnR5IGJlbG9uZ3MgdG8uXG4gKiBXaGVuIG5vIG1hdGVyaWFsIGlzIHNldCwgdGhlIG5vZGUgcmVmZXJzIHRvIHRoZSBtYXRlcmlhbCBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKiBAcmV0dXJucyB7TWF0ZXJpYWxSZWZlcmVuY2VOb2RlfVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxSZWZlcmVuY2UgPSAoIG5hbWUsIHR5cGUsIG1hdGVyaWFsID0gbnVsbCApID0+IG5vZGVPYmplY3QoIG5ldyBNYXRlcmlhbFJlZmVyZW5jZU5vZGUoIG5hbWUsIHR5cGUsIG1hdGVyaWFsICkgKTtcbiIsImltcG9ydCB7IGF0dHJpYnV0ZSB9IGZyb20gJy4uL2NvcmUvQXR0cmlidXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBjYW1lcmFWaWV3TWF0cml4IH0gZnJvbSAnLi9DYW1lcmEuanMnO1xuaW1wb3J0IHsgbW9kZWxWaWV3TWF0cml4IH0gZnJvbSAnLi9Nb2RlbE5vZGUuanMnO1xuaW1wb3J0IHsgRm4sIHZlYzQgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHRhbmdlbnQgYXR0cmlidXRlIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWM0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRhbmdlbnRHZW9tZXRyeSA9IC8qQF9fUFVSRV9fKi8gRm4oICggYnVpbGRlciApID0+IHtcblxuXHRpZiAoIGJ1aWxkZXIuZ2VvbWV0cnkuaGFzQXR0cmlidXRlKCAndGFuZ2VudCcgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRidWlsZGVyLmdlb21ldHJ5LmNvbXB1dGVUYW5nZW50cygpO1xuXG5cdH1cblxuXHRyZXR1cm4gYXR0cmlidXRlKCAndGFuZ2VudCcsICd2ZWM0JyApO1xuXG59ICkoKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdmVydGV4IHRhbmdlbnQgaW4gbG9jYWwgc3BhY2Ugb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgdGFuZ2VudExvY2FsID0gLypAX19QVVJFX18qLyB0YW5nZW50R2VvbWV0cnkueHl6LnRvVmFyKCAndGFuZ2VudExvY2FsJyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSB2ZXJ0ZXggdGFuZ2VudCBpbiB2aWV3IHNwYWNlIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRhbmdlbnRWaWV3ID0gLypAX19QVVJFX18qLyBtb2RlbFZpZXdNYXRyaXgubXVsKCB2ZWM0KCB0YW5nZW50TG9jYWwsIDAgKSApLnh5ei50b1ZhcnlpbmcoICd2X3RhbmdlbnRWaWV3JyApLm5vcm1hbGl6ZSgpLnRvVmFyKCAndGFuZ2VudFZpZXcnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHZlcnRleCB0YW5nZW50IGluIHdvcmxkIHNwYWNlIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRhbmdlbnRXb3JsZCA9IC8qQF9fUFVSRV9fKi8gdGFuZ2VudFZpZXcudHJhbnNmb3JtRGlyZWN0aW9uKCBjYW1lcmFWaWV3TWF0cml4ICkudG9WYXJ5aW5nKCAndl90YW5nZW50V29ybGQnICkubm9ybWFsaXplKCkudG9WYXIoICd0YW5nZW50V29ybGQnICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHRyYW5zZm9ybWVkIHZlcnRleCB0YW5nZW50IGluIHZpZXcgc3BhY2Ugb2YgdGhlIGN1cnJlbnQgcmVuZGVyZWQgb2JqZWN0LlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgdHJhbnNmb3JtZWRUYW5nZW50VmlldyA9IC8qQF9fUFVSRV9fKi8gdGFuZ2VudFZpZXcudG9WYXIoICd0cmFuc2Zvcm1lZFRhbmdlbnRWaWV3JyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSB0cmFuc2Zvcm1lZCB2ZXJ0ZXggdGFuZ2VudCBpbiB3b3JsZCBzcGFjZSBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1lZFRhbmdlbnRXb3JsZCA9IC8qQF9fUFVSRV9fKi8gdHJhbnNmb3JtZWRUYW5nZW50Vmlldy50cmFuc2Zvcm1EaXJlY3Rpb24oIGNhbWVyYVZpZXdNYXRyaXggKS5ub3JtYWxpemUoKS50b1ZhciggJ3RyYW5zZm9ybWVkVGFuZ2VudFdvcmxkJyApO1xuIiwiaW1wb3J0IHsgdmFyeWluZyB9IGZyb20gJy4uL2NvcmUvVmFyeWluZ05vZGUuanMnO1xuaW1wb3J0IHsgY2FtZXJhVmlld01hdHJpeCB9IGZyb20gJy4vQ2FtZXJhLmpzJztcbmltcG9ydCB7IG5vcm1hbEdlb21ldHJ5LCBub3JtYWxMb2NhbCwgbm9ybWFsVmlldywgbm9ybWFsV29ybGQsIHRyYW5zZm9ybWVkTm9ybWFsVmlldyB9IGZyb20gJy4vTm9ybWFsLmpzJztcbmltcG9ydCB7IHRhbmdlbnRHZW9tZXRyeSwgdGFuZ2VudExvY2FsLCB0YW5nZW50VmlldywgdGFuZ2VudFdvcmxkLCB0cmFuc2Zvcm1lZFRhbmdlbnRWaWV3IH0gZnJvbSAnLi9UYW5nZW50LmpzJztcblxuY29uc3QgZ2V0Qml0YW5nZW50ID0gKCBjcm9zc05vcm1hbFRhbmdlbnQgKSA9PiBjcm9zc05vcm1hbFRhbmdlbnQubXVsKCB0YW5nZW50R2VvbWV0cnkudyApLnh5ejtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgYml0YW5nZW50IGF0dHJpYnV0ZSBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBiaXRhbmdlbnRHZW9tZXRyeSA9IC8qQF9fUFVSRV9fKi8gdmFyeWluZyggZ2V0Qml0YW5nZW50KCBub3JtYWxHZW9tZXRyeS5jcm9zcyggdGFuZ2VudEdlb21ldHJ5ICkgKSwgJ3ZfYml0YW5nZW50R2VvbWV0cnknICkubm9ybWFsaXplKCkudG9WYXIoICdiaXRhbmdlbnRHZW9tZXRyeScgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdmVydGV4IGJpdGFuZ2VudCBpbiBsb2NhbCBzcGFjZSBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBiaXRhbmdlbnRMb2NhbCA9IC8qQF9fUFVSRV9fKi8gdmFyeWluZyggZ2V0Qml0YW5nZW50KCBub3JtYWxMb2NhbC5jcm9zcyggdGFuZ2VudExvY2FsICkgKSwgJ3ZfYml0YW5nZW50TG9jYWwnICkubm9ybWFsaXplKCkudG9WYXIoICdiaXRhbmdlbnRMb2NhbCcgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdmVydGV4IGJpdGFuZ2VudCBpbiB2aWV3IHNwYWNlIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWM0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGJpdGFuZ2VudFZpZXcgPSAvKkBfX1BVUkVfXyovIHZhcnlpbmcoIGdldEJpdGFuZ2VudCggbm9ybWFsVmlldy5jcm9zcyggdGFuZ2VudFZpZXcgKSApLCAndl9iaXRhbmdlbnRWaWV3JyApLm5vcm1hbGl6ZSgpLnRvVmFyKCAnYml0YW5nZW50VmlldycgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdmVydGV4IGJpdGFuZ2VudCBpbiB3b3JsZCBzcGFjZSBvZiB0aGUgY3VycmVudCByZW5kZXJlZCBvYmplY3QuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjND59XG4gKi9cbmV4cG9ydCBjb25zdCBiaXRhbmdlbnRXb3JsZCA9IC8qQF9fUFVSRV9fKi8gdmFyeWluZyggZ2V0Qml0YW5nZW50KCBub3JtYWxXb3JsZC5jcm9zcyggdGFuZ2VudFdvcmxkICkgKSwgJ3ZfYml0YW5nZW50V29ybGQnICkubm9ybWFsaXplKCkudG9WYXIoICdiaXRhbmdlbnRXb3JsZCcgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdHJhbnNmb3JtZWQgdmVydGV4IGJpdGFuZ2VudCBpbiB2aWV3IHNwYWNlIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWM0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybWVkQml0YW5nZW50VmlldyA9IC8qQF9fUFVSRV9fKi8gZ2V0Qml0YW5nZW50KCB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcuY3Jvc3MoIHRyYW5zZm9ybWVkVGFuZ2VudFZpZXcgKSApLm5vcm1hbGl6ZSgpLnRvVmFyKCAndHJhbnNmb3JtZWRCaXRhbmdlbnRWaWV3JyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSB0cmFuc2Zvcm1lZCB2ZXJ0ZXggYml0YW5nZW50IGluIHdvcmxkIHNwYWNlIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWM0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybWVkQml0YW5nZW50V29ybGQgPSAvKkBfX1BVUkVfXyovIHRyYW5zZm9ybWVkQml0YW5nZW50Vmlldy50cmFuc2Zvcm1EaXJlY3Rpb24oIGNhbWVyYVZpZXdNYXRyaXggKS5ub3JtYWxpemUoKS50b1ZhciggJ3RyYW5zZm9ybWVkQml0YW5nZW50V29ybGQnICk7XG4iLCJpbXBvcnQgeyBiaXRhbmdlbnRWaWV3IH0gZnJvbSAnLi9CaXRhbmdlbnQuanMnO1xuaW1wb3J0IHsgbm9ybWFsVmlldywgdHJhbnNmb3JtZWROb3JtYWxWaWV3IH0gZnJvbSAnLi9Ob3JtYWwuanMnO1xuaW1wb3J0IHsgdGFuZ2VudFZpZXcgfSBmcm9tICcuL1RhbmdlbnQuanMnO1xuaW1wb3J0IHsgbWF0MyB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJy4uL21hdGgvTWF0aE5vZGUuanMnO1xuaW1wb3J0IHsgYW5pc290cm9weSwgYW5pc290cm9weUIsIHJvdWdobmVzcyB9IGZyb20gJy4uL2NvcmUvUHJvcGVydHlOb2RlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uVmlld0RpcmVjdGlvbiB9IGZyb20gJy4vUG9zaXRpb24uanMnO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBUQk4gbWF0cml4IGluIHZpZXcgc3BhY2UuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8bWF0Mz59XG4gKi9cbmV4cG9ydCBjb25zdCBUQk5WaWV3TWF0cml4ID0gLypAX19QVVJFX18qLyBtYXQzKCB0YW5nZW50VmlldywgYml0YW5nZW50Vmlldywgbm9ybWFsVmlldyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBwYXJhbGxheCBkaXJlY3Rpb24uXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8bWF0Mz59XG4gKi9cbmV4cG9ydCBjb25zdCBwYXJhbGxheERpcmVjdGlvbiA9IC8qQF9fUFVSRV9fKi8gcG9zaXRpb25WaWV3RGlyZWN0aW9uLm11bCggVEJOVmlld01hdHJpeCApLyoubm9ybWFsaXplKCkqLztcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNvbXB1dGluZyBwYXJhbGxheCB1diBjb29yZGluYXRlcy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyPn0gdXYgLSBBIHV2IG5vZGUuXG4gKiBAcGFyYW0ge05vZGU8dmVjMj59IHNjYWxlIC0gQSBzY2FsZSBub2RlLlxuICogQHJldHVybnMge05vZGU8dmVjMj59IFBhcmFsbGF4IHV2IGNvb3JkaW5hdGVzLlxuICovXG5leHBvcnQgY29uc3QgcGFyYWxsYXhVViA9ICggdXYsIHNjYWxlICkgPT4gdXYuc3ViKCBwYXJhbGxheERpcmVjdGlvbi5tdWwoIHNjYWxlICkgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNvbXB1dGluZyBiZW50IG5vcm1hbHMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7Tm9kZTx2ZWMzPn0gQmVudCBub3JtYWxzLlxuICovXG5leHBvcnQgY29uc3QgdHJhbnNmb3JtZWRCZW50Tm9ybWFsVmlldyA9IC8qQF9fUFVSRV9fKi8gKCAoKSA9PiB7XG5cblx0Ly8gaHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL2ZpbGFtZW50L0ZpbGFtZW50Lm1kLmh0bWwjbGlnaHRpbmcvaW1hZ2ViYXNlZGxpZ2h0cy9hbmlzb3Ryb3B5XG5cblx0bGV0IGJlbnROb3JtYWwgPSBhbmlzb3Ryb3B5Qi5jcm9zcyggcG9zaXRpb25WaWV3RGlyZWN0aW9uICk7XG5cdGJlbnROb3JtYWwgPSBiZW50Tm9ybWFsLmNyb3NzKCBhbmlzb3Ryb3B5QiApLm5vcm1hbGl6ZSgpO1xuXHRiZW50Tm9ybWFsID0gbWl4KCBiZW50Tm9ybWFsLCB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcsIGFuaXNvdHJvcHkubXVsKCByb3VnaG5lc3Mub25lTWludXMoKSApLm9uZU1pbnVzKCkucG93MigpLnBvdzIoKSApLm5vcm1hbGl6ZSgpO1xuXG5cdHJldHVybiBiZW50Tm9ybWFsO1xuXG5cbn0gKSgpO1xuIiwiaW1wb3J0IFRlbXBOb2RlIGZyb20gJy4uL2NvcmUvVGVtcE5vZGUuanMnO1xuaW1wb3J0IHsgYWRkIH0gZnJvbSAnLi4vbWF0aC9PcGVyYXRvck5vZGUuanMnO1xuXG5pbXBvcnQgeyBub3JtYWxWaWV3LCB0cmFuc2Zvcm1Ob3JtYWxUb1ZpZXcgfSBmcm9tICcuLi9hY2Nlc3NvcnMvTm9ybWFsLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uVmlldyB9IGZyb20gJy4uL2FjY2Vzc29ycy9Qb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBUQk5WaWV3TWF0cml4IH0gZnJvbSAnLi4vYWNjZXNzb3JzL0FjY2Vzc29yc1V0aWxzLmpzJztcbmltcG9ydCB7IHV2IH0gZnJvbSAnLi4vYWNjZXNzb3JzL1VWLmpzJztcbmltcG9ydCB7IGZhY2VEaXJlY3Rpb24gfSBmcm9tICcuL0Zyb250RmFjaW5nTm9kZS5qcyc7XG5pbXBvcnQgeyBGbiwgbm9kZVByb3h5LCB2ZWMzIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5pbXBvcnQgeyBUYW5nZW50U3BhY2VOb3JtYWxNYXAsIE9iamVjdFNwYWNlTm9ybWFsTWFwIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuLy8gTm9ybWFsIE1hcHBpbmcgV2l0aG91dCBQcmVjb21wdXRlZCBUYW5nZW50c1xuLy8gaHR0cDovL3d3dy50aGV0ZW50aHBsYW5ldC5kZS9hcmNoaXZlcy8xMTgwXG5cbmNvbnN0IHBlcnR1cmJOb3JtYWwyQXJiID0gLypAX19QVVJFX18qLyBGbiggKCBpbnB1dHMgKSA9PiB7XG5cblx0Y29uc3QgeyBleWVfcG9zLCBzdXJmX25vcm0sIG1hcE4sIHV2IH0gPSBpbnB1dHM7XG5cblx0Y29uc3QgcTAgPSBleWVfcG9zLmRGZHgoKTtcblx0Y29uc3QgcTEgPSBleWVfcG9zLmRGZHkoKTtcblx0Y29uc3Qgc3QwID0gdXYuZEZkeCgpO1xuXHRjb25zdCBzdDEgPSB1di5kRmR5KCk7XG5cblx0Y29uc3QgTiA9IHN1cmZfbm9ybTsgLy8gbm9ybWFsaXplZFxuXG5cdGNvbnN0IHExcGVycCA9IHExLmNyb3NzKCBOICk7XG5cdGNvbnN0IHEwcGVycCA9IE4uY3Jvc3MoIHEwICk7XG5cblx0Y29uc3QgVCA9IHExcGVycC5tdWwoIHN0MC54ICkuYWRkKCBxMHBlcnAubXVsKCBzdDEueCApICk7XG5cdGNvbnN0IEIgPSBxMXBlcnAubXVsKCBzdDAueSApLmFkZCggcTBwZXJwLm11bCggc3QxLnkgKSApO1xuXG5cdGNvbnN0IGRldCA9IFQuZG90KCBUICkubWF4KCBCLmRvdCggQiApICk7XG5cdGNvbnN0IHNjYWxlID0gZmFjZURpcmVjdGlvbi5tdWwoIGRldC5pbnZlcnNlU3FydCgpICk7XG5cblx0cmV0dXJuIGFkZCggVC5tdWwoIG1hcE4ueCwgc2NhbGUgKSwgQi5tdWwoIG1hcE4ueSwgc2NhbGUgKSwgTi5tdWwoIG1hcE4ueiApICkubm9ybWFsaXplKCk7XG5cbn0gKTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIGZvciBhcHBseWluZyBub3JtYWxzIG1hcHMgdG8gbWF0ZXJpYWxzLlxuICpcbiAqIGBgYGpzXG4gKiBtYXRlcmlhbC5ub3JtYWxOb2RlID0gbm9ybWFsTWFwKCB0ZXh0dXJlKCBub3JtYWxUZXggKSApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIFRlbXBOb2RlXG4gKi9cbmNsYXNzIE5vcm1hbE1hcE5vZGUgZXh0ZW5kcyBUZW1wTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdOb3JtYWxNYXBOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbm9ybWFsIG1hcCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGU8dmVjMz59IG5vZGUgLSBSZXByZXNlbnRzIHRoZSBub3JtYWwgbWFwIGRhdGEuXG5cdCAqIEBwYXJhbSB7P05vZGU8dmVjMj59IFtzY2FsZU5vZGU9bnVsbF0gLSBDb250cm9scyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBlZmZlY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZSwgc2NhbGVOb2RlID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCAndmVjMycgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIG5vcm1hbCBtYXAgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZSA9IG5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBDb250cm9scyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBlZmZlY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMj59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2NhbGVOb2RlID0gc2NhbGVOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vcm1hbCBtYXAgdHlwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoVGFuZ2VudFNwYWNlTm9ybWFsTWFwfE9iamVjdFNwYWNlTm9ybWFsTWFwKX1cblx0XHQgKiBAZGVmYXVsdCBUYW5nZW50U3BhY2VOb3JtYWxNYXBcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBub3JtYWxNYXBUeXBlLCBzY2FsZU5vZGUgfSA9IHRoaXM7XG5cblx0XHRsZXQgbm9ybWFsTWFwID0gdGhpcy5ub2RlLm11bCggMi4wICkuc3ViKCAxLjAgKTtcblxuXHRcdGlmICggc2NhbGVOb2RlICE9PSBudWxsICkge1xuXG5cdFx0XHRub3JtYWxNYXAgPSB2ZWMzKCBub3JtYWxNYXAueHkubXVsKCBzY2FsZU5vZGUgKSwgbm9ybWFsTWFwLnogKTtcblxuXHRcdH1cblxuXHRcdGxldCBvdXRwdXROb2RlID0gbnVsbDtcblxuXHRcdGlmICggbm9ybWFsTWFwVHlwZSA9PT0gT2JqZWN0U3BhY2VOb3JtYWxNYXAgKSB7XG5cblx0XHRcdG91dHB1dE5vZGUgPSB0cmFuc2Zvcm1Ob3JtYWxUb1ZpZXcoIG5vcm1hbE1hcCApO1xuXG5cdFx0fSBlbHNlIGlmICggbm9ybWFsTWFwVHlwZSA9PT0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwICkge1xuXG5cdFx0XHRjb25zdCB0YW5nZW50ID0gYnVpbGRlci5oYXNHZW9tZXRyeUF0dHJpYnV0ZSggJ3RhbmdlbnQnICk7XG5cblx0XHRcdGlmICggdGFuZ2VudCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRvdXRwdXROb2RlID0gVEJOVmlld01hdHJpeC5tdWwoIG5vcm1hbE1hcCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG91dHB1dE5vZGUgPSBwZXJ0dXJiTm9ybWFsMkFyYigge1xuXHRcdFx0XHRcdGV5ZV9wb3M6IHBvc2l0aW9uVmlldyxcblx0XHRcdFx0XHRzdXJmX25vcm06IG5vcm1hbFZpZXcsXG5cdFx0XHRcdFx0bWFwTjogbm9ybWFsTWFwLFxuXHRcdFx0XHRcdHV2OiB1digpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dE5vZGU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vcm1hbE1hcE5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5vcm1hbCBtYXAgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gbm9kZSAtIFJlcHJlc2VudHMgdGhlIG5vcm1hbCBtYXAgZGF0YS5cbiAqIEBwYXJhbSB7P05vZGU8dmVjMj59IFtzY2FsZU5vZGU9bnVsbF0gLSBDb250cm9scyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBlZmZlY3QuXG4gKiBAcmV0dXJucyB7Tm9ybWFsTWFwTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbE1hcCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBOb3JtYWxNYXBOb2RlICk7XG4iLCJpbXBvcnQgVGVtcE5vZGUgZnJvbSAnLi4vY29yZS9UZW1wTm9kZS5qcyc7XG5pbXBvcnQgeyB1diB9IGZyb20gJy4uL2FjY2Vzc29ycy9VVi5qcyc7XG5pbXBvcnQgeyBub3JtYWxWaWV3IH0gZnJvbSAnLi4vYWNjZXNzb3JzL05vcm1hbC5qcyc7XG5pbXBvcnQgeyBwb3NpdGlvblZpZXcgfSBmcm9tICcuLi9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgZmFjZURpcmVjdGlvbiB9IGZyb20gJy4vRnJvbnRGYWNpbmdOb2RlLmpzJztcbmltcG9ydCB7IEZuLCBub2RlUHJveHksIGZsb2F0LCB2ZWMyIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vLyBCdW1wIE1hcHBpbmcgVW5wYXJhbWV0cml6ZWQgU3VyZmFjZXMgb24gdGhlIEdQVSBieSBNb3J0ZW4gUy4gTWlra2Vsc2VuXG4vLyBodHRwczovL21taWtrLmdpdGh1Yi5pby9wYXBlcnMzZC9tbV9zZmdyYWRfYnVtcC5wZGZcblxuY29uc3QgZEhkeHlfZndkID0gRm4oICggeyB0ZXh0dXJlTm9kZSwgYnVtcFNjYWxlIH0gKSA9PiB7XG5cblx0Ly8gSXQncyB1c2VkIHRvIHByZXNlcnZlIHRoZSBzYW1lIFRleHR1cmVOb2RlIGluc3RhbmNlXG5cdGNvbnN0IHNhbXBsZVRleHR1cmUgPSAoIGNhbGxiYWNrICkgPT4gdGV4dHVyZU5vZGUuY2FjaGUoKS5jb250ZXh0KCB7IGdldFVWOiAoIHRleE5vZGUgKSA9PiBjYWxsYmFjayggdGV4Tm9kZS51dk5vZGUgfHwgdXYoKSApLCBmb3JjZVVWQ29udGV4dDogdHJ1ZSB9ICk7XG5cblx0Y29uc3QgSGxsID0gZmxvYXQoIHNhbXBsZVRleHR1cmUoICggdXZOb2RlICkgPT4gdXZOb2RlICkgKTtcblxuXHRyZXR1cm4gdmVjMihcblx0XHRmbG9hdCggc2FtcGxlVGV4dHVyZSggKCB1dk5vZGUgKSA9PiB1dk5vZGUuYWRkKCB1dk5vZGUuZEZkeCgpICkgKSApLnN1YiggSGxsICksXG5cdFx0ZmxvYXQoIHNhbXBsZVRleHR1cmUoICggdXZOb2RlICkgPT4gdXZOb2RlLmFkZCggdXZOb2RlLmRGZHkoKSApICkgKS5zdWIoIEhsbCApXG5cdCkubXVsKCBidW1wU2NhbGUgKTtcblxufSApO1xuXG4vLyBFdmFsdWF0ZSB0aGUgZGVyaXZhdGl2ZSBvZiB0aGUgaGVpZ2h0IHcuci50LiBzY3JlZW4tc3BhY2UgdXNpbmcgZm9yd2FyZCBkaWZmZXJlbmNpbmcgKGxpc3RpbmcgMilcblxuY29uc3QgcGVydHVyYk5vcm1hbEFyYiA9IEZuKCAoIGlucHV0cyApID0+IHtcblxuXHRjb25zdCB7IHN1cmZfcG9zLCBzdXJmX25vcm0sIGRIZHh5IH0gPSBpbnB1dHM7XG5cblx0Ly8gbm9ybWFsaXplIGlzIGRvbmUgdG8gZW5zdXJlIHRoYXQgdGhlIGJ1bXAgbWFwIGxvb2tzIHRoZSBzYW1lIHJlZ2FyZGxlc3Mgb2YgdGhlIHRleHR1cmUncyBzY2FsZVxuXHRjb25zdCB2U2lnbWFYID0gc3VyZl9wb3MuZEZkeCgpLm5vcm1hbGl6ZSgpO1xuXHRjb25zdCB2U2lnbWFZID0gc3VyZl9wb3MuZEZkeSgpLm5vcm1hbGl6ZSgpO1xuXHRjb25zdCB2TiA9IHN1cmZfbm9ybTsgLy8gbm9ybWFsaXplZFxuXG5cdGNvbnN0IFIxID0gdlNpZ21hWS5jcm9zcyggdk4gKTtcblx0Y29uc3QgUjIgPSB2Ti5jcm9zcyggdlNpZ21hWCApO1xuXG5cdGNvbnN0IGZEZXQgPSB2U2lnbWFYLmRvdCggUjEgKS5tdWwoIGZhY2VEaXJlY3Rpb24gKTtcblxuXHRjb25zdCB2R3JhZCA9IGZEZXQuc2lnbigpLm11bCggZEhkeHkueC5tdWwoIFIxICkuYWRkKCBkSGR4eS55Lm11bCggUjIgKSApICk7XG5cblx0cmV0dXJuIGZEZXQuYWJzKCkubXVsKCBzdXJmX25vcm0gKS5zdWIoIHZHcmFkICkubm9ybWFsaXplKCk7XG5cbn0gKTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIGZvciBhcHBseWluZyBidW1wIG1hcHMgdG8gbWF0ZXJpYWxzLlxuICpcbiAqIGBgYGpzXG4gKiBtYXRlcmlhbC5ub3JtYWxOb2RlID0gYnVtcE1hcCggdGV4dHVyZSggYnVtcFRleCApICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgQnVtcE1hcE5vZGUgZXh0ZW5kcyBUZW1wTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdCdW1wTWFwTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1bXAgbWFwIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IHRleHR1cmVOb2RlIC0gUmVwcmVzZW50cyB0aGUgYnVtcCBtYXAgZGF0YS5cblx0ICogQHBhcmFtIHs/Tm9kZTxmbG9hdD59IFtzY2FsZU5vZGU9bnVsbF0gLSBDb250cm9scyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBidW1wIGVmZmVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB0ZXh0dXJlTm9kZSwgc2NhbGVOb2RlID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCAndmVjMycgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIGJ1bXAgbWFwIGRhdGEuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG5cdFx0ICovXG5cdFx0dGhpcy50ZXh0dXJlTm9kZSA9IHRleHR1cmVOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29udHJvbHMgdGhlIGludGVuc2l0eSBvZiB0aGUgYnVtcCBlZmZlY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnNjYWxlTm9kZSA9IHNjYWxlTm9kZTtcblxuXHR9XG5cblx0c2V0dXAoKSB7XG5cblx0XHRjb25zdCBidW1wU2NhbGUgPSB0aGlzLnNjYWxlTm9kZSAhPT0gbnVsbCA/IHRoaXMuc2NhbGVOb2RlIDogMTtcblx0XHRjb25zdCBkSGR4eSA9IGRIZHh5X2Z3ZCggeyB0ZXh0dXJlTm9kZTogdGhpcy50ZXh0dXJlTm9kZSwgYnVtcFNjYWxlIH0gKTtcblxuXHRcdHJldHVybiBwZXJ0dXJiTm9ybWFsQXJiKCB7XG5cdFx0XHRzdXJmX3BvczogcG9zaXRpb25WaWV3LFxuXHRcdFx0c3VyZl9ub3JtOiBub3JtYWxWaWV3LFxuXHRcdFx0ZEhkeHlcblx0XHR9ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1bXBNYXBOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBidW1wIG1hcCBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gdGV4dHVyZU5vZGUgLSBSZXByZXNlbnRzIHRoZSBidW1wIG1hcCBkYXRhLlxuICogQHBhcmFtIHs/Tm9kZTxmbG9hdD59IFtzY2FsZU5vZGU9bnVsbF0gLSBDb250cm9scyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBidW1wIGVmZmVjdC5cbiAqIEByZXR1cm5zIHtCdW1wTWFwTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGJ1bXBNYXAgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggQnVtcE1hcE5vZGUgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyByZWZlcmVuY2UgfSBmcm9tICcuL1JlZmVyZW5jZU5vZGUuanMnO1xuaW1wb3J0IHsgbWF0ZXJpYWxSZWZlcmVuY2UgfSBmcm9tICcuL01hdGVyaWFsUmVmZXJlbmNlTm9kZS5qcyc7XG5pbXBvcnQgeyBub3JtYWxWaWV3IH0gZnJvbSAnLi9Ob3JtYWwuanMnO1xuaW1wb3J0IHsgbm9kZUltbXV0YWJsZSwgZmxvYXQsIHZlYzIsIHZlYzMsIG1hdDIgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyB1bmlmb3JtIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtTm9kZS5qcyc7XG5pbXBvcnQgeyBub3JtYWxNYXAgfSBmcm9tICcuLi9kaXNwbGF5L05vcm1hbE1hcE5vZGUuanMnO1xuaW1wb3J0IHsgYnVtcE1hcCB9IGZyb20gJy4uL2Rpc3BsYXkvQnVtcE1hcE5vZGUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XG5cbmNvbnN0IF9wcm9wZXJ0eUNhY2hlID0gbmV3IE1hcCgpO1xuXG4vKipcbiAqIFRoaXMgY2xhc3Mgc2hvdWxkIHNpbXBsaWZ5IHRoZSBub2RlIGFjY2VzcyB0byBtYXRlcmlhbCBwcm9wZXJ0aWVzLlxuICogSXQgaW50ZXJuYWwgdXNlcyByZWZlcmVuY2Ugbm9kZXMgdG8gbWFrZSBzdXJlICBjaGFuZ2VzIHRvIG1hdGVyaWFsXG4gKiBwcm9wZXJ0aWVzIGFyZSBhdXRvbWF0aWNhbGx5IHJlZmxlY3RlZCB0byBwcmVkZWZpbmVkIFRTTCBvYmplY3RzXG4gKiBsaWtlIGUuZy4gYG1hdGVyaWFsQ29sb3JgLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIE1hdGVyaWFsTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTWF0ZXJpYWxOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbWF0ZXJpYWwgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlIC0gVGhlIHNjb3BlIGRlZmluZXMgd2hhdCBraW5kIG9mIG1hdGVyaWFsIHByb3BlcnR5IGlzIHJlZmVycmVkIGJ5IHRoZSBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHNjb3BlICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzY29wZSBkZWZpbmVzIHdoYXQgbWF0ZXJpYWwgcHJvcGVydHkgaXMgcmVmZXJyZWQgYnkgdGhlIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuc2NvcGUgPSBzY29wZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBjYWNoZWQgcmVmZXJlbmNlIG5vZGUgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSBhbmQgdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIG1hdGVyaWFsIHByb3BlcnR5LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB1bmlmb3JtIHR5cGUgb2YgdGhlIHByb3BlcnR5LlxuXHQgKiBAcmV0dXJuIHtNYXRlcmlhbFJlZmVyZW5jZU5vZGV9IEEgbWF0ZXJpYWwgcmVmZXJlbmNlIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBwcm9wZXJ0eSBhY2Nlc3MuXG5cdCAqL1xuXHRnZXRDYWNoZSggcHJvcGVydHksIHR5cGUgKSB7XG5cblx0XHRsZXQgbm9kZSA9IF9wcm9wZXJ0eUNhY2hlLmdldCggcHJvcGVydHkgKTtcblxuXHRcdGlmICggbm9kZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRub2RlID0gbWF0ZXJpYWxSZWZlcmVuY2UoIHByb3BlcnR5LCB0eXBlICk7XG5cblx0XHRcdF9wcm9wZXJ0eUNhY2hlLnNldCggcHJvcGVydHksIG5vZGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBub2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGZsb2F0LXR5cGVkIG1hdGVyaWFsIHJlZmVyZW5jZSBub2RlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgbmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIG1hdGVyaWFsIHByb3BlcnR5LlxuXHQgKiBAcmV0dXJuIHtNYXRlcmlhbFJlZmVyZW5jZU5vZGU8ZmxvYXQ+fSBBIG1hdGVyaWFsIHJlZmVyZW5jZSBub2RlIHJlcHJlc2VudGluZyB0aGUgcHJvcGVydHkgYWNjZXNzLlxuXHQgKi9cblx0Z2V0RmxvYXQoIHByb3BlcnR5ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2FjaGUoIHByb3BlcnR5LCAnZmxvYXQnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgY29sb3ItdHlwZWQgbWF0ZXJpYWwgcmVmZXJlbmNlIG5vZGUgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgLSBUaGUgbmFtZSBvZiB0aGUgbWF0ZXJpYWwgcHJvcGVydHkuXG5cdCAqIEByZXR1cm4ge01hdGVyaWFsUmVmZXJlbmNlTm9kZTxjb2xvcj59IEEgbWF0ZXJpYWwgcmVmZXJlbmNlIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBwcm9wZXJ0eSBhY2Nlc3MuXG5cdCAqL1xuXHRnZXRDb2xvciggcHJvcGVydHkgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRDYWNoZSggcHJvcGVydHksICdjb2xvcicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB0ZXh0dXJlLXR5cGVkIG1hdGVyaWFsIHJlZmVyZW5jZSBub2RlIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkgbmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIG1hdGVyaWFsIHByb3BlcnR5LlxuXHQgKiBAcmV0dXJuIHtNYXRlcmlhbFJlZmVyZW5jZU5vZGV9IEEgbWF0ZXJpYWwgcmVmZXJlbmNlIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBwcm9wZXJ0eSBhY2Nlc3MuXG5cdCAqL1xuXHRnZXRUZXh0dXJlKCBwcm9wZXJ0eSApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldENhY2hlKCBwcm9wZXJ0eSA9PT0gJ21hcCcgPyAnbWFwJyA6IHByb3BlcnR5ICsgJ01hcCcsICd0ZXh0dXJlJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG5vZGUgc2V0dXAgaXMgZG9uZSBkZXBlbmRpbmcgb24gdGhlIHNlbGVjdGVkIHNjb3BlLiBNdWx0aXBsZSBtYXRlcmlhbCBwcm9wZXJ0aWVzXG5cdCAqIG1pZ2h0IGJlIGdyb3VwZWQgaW50byBhIHNpbmdsZSBub2RlIGNvbXBvc2l0aW9uIGlmIHRoZXkgbG9naWNhbGx5IGJlbG9uZyB0b2dldGhlci5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBzZWxlY3RlZCBzY29wZS5cblx0ICovXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBidWlsZGVyLmNvbnRleHQubWF0ZXJpYWw7XG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuXG5cdFx0bGV0IG5vZGUgPSBudWxsO1xuXG5cdFx0aWYgKCBzY29wZSA9PT0gTWF0ZXJpYWxOb2RlLkNPTE9SICkge1xuXG5cdFx0XHRjb25zdCBjb2xvck5vZGUgPSBtYXRlcmlhbC5jb2xvciAhPT0gdW5kZWZpbmVkID8gdGhpcy5nZXRDb2xvciggc2NvcGUgKSA6IHZlYzMoKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5tYXAgJiYgbWF0ZXJpYWwubWFwLmlzVGV4dHVyZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRub2RlID0gY29sb3JOb2RlLm11bCggdGhpcy5nZXRUZXh0dXJlKCAnbWFwJyApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IGNvbG9yTm9kZTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE1hdGVyaWFsTm9kZS5PUEFDSVRZICkge1xuXG5cdFx0XHRjb25zdCBvcGFjaXR5Tm9kZSA9IHRoaXMuZ2V0RmxvYXQoIHNjb3BlICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgJiYgbWF0ZXJpYWwuYWxwaGFNYXAuaXNUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5vZGUgPSBvcGFjaXR5Tm9kZS5tdWwoIHRoaXMuZ2V0VGV4dHVyZSggJ2FscGhhJyApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IG9wYWNpdHlOb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gTWF0ZXJpYWxOb2RlLlNQRUNVTEFSX1NUUkVOR1RIICkge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICYmIG1hdGVyaWFsLnNwZWN1bGFyTWFwLmlzVGV4dHVyZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRub2RlID0gdGhpcy5nZXRUZXh0dXJlKCAnc3BlY3VsYXInICkucjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRub2RlID0gZmxvYXQoIDEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE1hdGVyaWFsTm9kZS5TUEVDVUxBUl9JTlRFTlNJVFkgKSB7XG5cblx0XHRcdGNvbnN0IHNwZWN1bGFySW50ZW5zaXR5Tm9kZSA9IHRoaXMuZ2V0RmxvYXQoIHNjb3BlICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAgJiYgbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAuaXNUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5vZGUgPSBzcGVjdWxhckludGVuc2l0eU5vZGUubXVsKCB0aGlzLmdldFRleHR1cmUoIHNjb3BlICkuYSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5vZGUgPSBzcGVjdWxhckludGVuc2l0eU5vZGU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBNYXRlcmlhbE5vZGUuU1BFQ1VMQVJfQ09MT1IgKSB7XG5cblx0XHRcdGNvbnN0IHNwZWN1bGFyQ29sb3JOb2RlID0gdGhpcy5nZXRDb2xvciggc2NvcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwICYmIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAuaXNUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5vZGUgPSBzcGVjdWxhckNvbG9yTm9kZS5tdWwoIHRoaXMuZ2V0VGV4dHVyZSggc2NvcGUgKS5yZ2IgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRub2RlID0gc3BlY3VsYXJDb2xvck5vZGU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBNYXRlcmlhbE5vZGUuUk9VR0hORVNTICkgeyAvLyBUT0RPOiBjbGVhbnVwIHNpbWlsYXIgYnJhbmNoZXNcblxuXHRcdFx0Y29uc3Qgcm91Z2huZXNzTm9kZSA9IHRoaXMuZ2V0RmxvYXQoIHNjb3BlICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICYmIG1hdGVyaWFsLnJvdWdobmVzc01hcC5pc1RleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0bm9kZSA9IHJvdWdobmVzc05vZGUubXVsKCB0aGlzLmdldFRleHR1cmUoIHNjb3BlICkuZyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5vZGUgPSByb3VnaG5lc3NOb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gTWF0ZXJpYWxOb2RlLk1FVEFMTkVTUyApIHtcblxuXHRcdFx0Y29uc3QgbWV0YWxuZXNzTm9kZSA9IHRoaXMuZ2V0RmxvYXQoIHNjb3BlICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwubWV0YWxuZXNzTWFwICYmIG1hdGVyaWFsLm1ldGFsbmVzc01hcC5pc1RleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0bm9kZSA9IG1ldGFsbmVzc05vZGUubXVsKCB0aGlzLmdldFRleHR1cmUoIHNjb3BlICkuYiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5vZGUgPSBtZXRhbG5lc3NOb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gTWF0ZXJpYWxOb2RlLkVNSVNTSVZFICkge1xuXG5cdFx0XHRjb25zdCBlbWlzc2l2ZUludGVuc2l0eU5vZGUgPSB0aGlzLmdldEZsb2F0KCAnZW1pc3NpdmVJbnRlbnNpdHknICk7XG5cdFx0XHRjb25zdCBlbWlzc2l2ZU5vZGUgPSB0aGlzLmdldENvbG9yKCBzY29wZSApLm11bCggZW1pc3NpdmVJbnRlbnNpdHlOb2RlICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgJiYgbWF0ZXJpYWwuZW1pc3NpdmVNYXAuaXNUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5vZGUgPSBlbWlzc2l2ZU5vZGUubXVsKCB0aGlzLmdldFRleHR1cmUoIHNjb3BlICkgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRub2RlID0gZW1pc3NpdmVOb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gTWF0ZXJpYWxOb2RlLk5PUk1BTCApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdFx0bm9kZSA9IG5vcm1hbE1hcCggdGhpcy5nZXRUZXh0dXJlKCAnbm9ybWFsJyApLCB0aGlzLmdldENhY2hlKCAnbm9ybWFsU2NhbGUnLCAndmVjMicgKSApO1xuXHRcdFx0XHRub2RlLm5vcm1hbE1hcFR5cGUgPSBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHRcdG5vZGUgPSBidW1wTWFwKCB0aGlzLmdldFRleHR1cmUoICdidW1wJyApLnIsIHRoaXMuZ2V0RmxvYXQoICdidW1wU2NhbGUnICkgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRub2RlID0gbm9ybWFsVmlldztcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE1hdGVyaWFsTm9kZS5DTEVBUkNPQVQgKSB7XG5cblx0XHRcdGNvbnN0IGNsZWFyY29hdE5vZGUgPSB0aGlzLmdldEZsb2F0KCBzY29wZSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmNsZWFyY29hdE1hcCAmJiBtYXRlcmlhbC5jbGVhcmNvYXRNYXAuaXNUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5vZGUgPSBjbGVhcmNvYXROb2RlLm11bCggdGhpcy5nZXRUZXh0dXJlKCBzY29wZSApLnIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRub2RlID0gY2xlYXJjb2F0Tm9kZTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE1hdGVyaWFsTm9kZS5DTEVBUkNPQVRfUk9VR0hORVNTICkge1xuXG5cdFx0XHRjb25zdCBjbGVhcmNvYXRSb3VnaG5lc3NOb2RlID0gdGhpcy5nZXRGbG9hdCggc2NvcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgJiYgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwLmlzVGV4dHVyZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRub2RlID0gY2xlYXJjb2F0Um91Z2huZXNzTm9kZS5tdWwoIHRoaXMuZ2V0VGV4dHVyZSggc2NvcGUgKS5yICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IGNsZWFyY29hdFJvdWdobmVzc05vZGU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBNYXRlcmlhbE5vZGUuQ0xFQVJDT0FUX05PUk1BTCApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgKSB7XG5cblx0XHRcdFx0bm9kZSA9IG5vcm1hbE1hcCggdGhpcy5nZXRUZXh0dXJlKCBzY29wZSApLCB0aGlzLmdldENhY2hlKCBzY29wZSArICdTY2FsZScsICd2ZWMyJyApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IG5vcm1hbFZpZXc7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBNYXRlcmlhbE5vZGUuU0hFRU4gKSB7XG5cblx0XHRcdGNvbnN0IHNoZWVuTm9kZSA9IHRoaXMuZ2V0Q29sb3IoICdzaGVlbkNvbG9yJyApLm11bCggdGhpcy5nZXRGbG9hdCggJ3NoZWVuJyApICk7IC8vIE1vdmUgdGhpcyBtdWwoKSB0byBDUFVcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaGVlbkNvbG9yTWFwICYmIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAuaXNUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5vZGUgPSBzaGVlbk5vZGUubXVsKCB0aGlzLmdldFRleHR1cmUoICdzaGVlbkNvbG9yJyApLnJnYiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5vZGUgPSBzaGVlbk5vZGU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBNYXRlcmlhbE5vZGUuU0hFRU5fUk9VR0hORVNTICkge1xuXG5cdFx0XHRjb25zdCBzaGVlblJvdWdobmVzc05vZGUgPSB0aGlzLmdldEZsb2F0KCBzY29wZSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwICYmIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwLmlzVGV4dHVyZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRub2RlID0gc2hlZW5Sb3VnaG5lc3NOb2RlLm11bCggdGhpcy5nZXRUZXh0dXJlKCBzY29wZSApLmEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRub2RlID0gc2hlZW5Sb3VnaG5lc3NOb2RlO1xuXG5cdFx0XHR9XG5cblx0XHRcdG5vZGUgPSBub2RlLmNsYW1wKCAwLjA3LCAxLjAgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBNYXRlcmlhbE5vZGUuQU5JU09UUk9QWSApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwICYmIG1hdGVyaWFsLmFuaXNvdHJvcHlNYXAuaXNUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnN0IGFuaXNvdHJvcHlQb2xhciA9IHRoaXMuZ2V0VGV4dHVyZSggc2NvcGUgKTtcblx0XHRcdFx0Y29uc3QgYW5pc290cm9weU1hdCA9IG1hdDIoIG1hdGVyaWFsQW5pc290cm9weVZlY3Rvci54LCBtYXRlcmlhbEFuaXNvdHJvcHlWZWN0b3IueSwgbWF0ZXJpYWxBbmlzb3Ryb3B5VmVjdG9yLnkubmVnYXRlKCksIG1hdGVyaWFsQW5pc290cm9weVZlY3Rvci54ICk7XG5cblx0XHRcdFx0bm9kZSA9IGFuaXNvdHJvcHlNYXQubXVsKCBhbmlzb3Ryb3B5UG9sYXIucmcubXVsKCAyLjAgKS5zdWIoIHZlYzIoIDEuMCApICkubm9ybWFsaXplKCkubXVsKCBhbmlzb3Ryb3B5UG9sYXIuYiApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IG1hdGVyaWFsQW5pc290cm9weVZlY3RvcjtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE1hdGVyaWFsTm9kZS5JUklERVNDRU5DRV9USElDS05FU1MgKSB7XG5cblx0XHRcdGNvbnN0IGlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bSA9IHJlZmVyZW5jZSggJzEnLCAnZmxvYXQnLCBtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgKSB7XG5cblx0XHRcdFx0Y29uc3QgaXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtID0gcmVmZXJlbmNlKCAnMCcsICdmbG9hdCcsIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UgKTtcblxuXHRcdFx0XHRub2RlID0gaXJpZGVzY2VuY2VUaGlja25lc3NNYXhpbXVtLnN1YiggaXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtICkubXVsKCB0aGlzLmdldFRleHR1cmUoIHNjb3BlICkuZyApLmFkZCggaXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IGlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IE1hdGVyaWFsTm9kZS5UUkFOU01JU1NJT04gKSB7XG5cblx0XHRcdGNvbnN0IHRyYW5zbWlzc2lvbk5vZGUgPSB0aGlzLmdldEZsb2F0KCBzY29wZSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbk1hcCApIHtcblxuXHRcdFx0XHRub2RlID0gdHJhbnNtaXNzaW9uTm9kZS5tdWwoIHRoaXMuZ2V0VGV4dHVyZSggc2NvcGUgKS5yICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IHRyYW5zbWlzc2lvbk5vZGU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBNYXRlcmlhbE5vZGUuVEhJQ0tORVNTICkge1xuXG5cdFx0XHRjb25zdCB0aGlja25lc3NOb2RlID0gdGhpcy5nZXRGbG9hdCggc2NvcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC50aGlja25lc3NNYXAgKSB7XG5cblx0XHRcdFx0bm9kZSA9IHRoaWNrbmVzc05vZGUubXVsKCB0aGlzLmdldFRleHR1cmUoIHNjb3BlICkuZyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5vZGUgPSB0aGlja25lc3NOb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gTWF0ZXJpYWxOb2RlLklPUiApIHtcblxuXHRcdFx0bm9kZSA9IHRoaXMuZ2V0RmxvYXQoIHNjb3BlICk7XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gTWF0ZXJpYWxOb2RlLkxJR0hUX01BUCApIHtcblxuXHRcdFx0bm9kZSA9IHRoaXMuZ2V0VGV4dHVyZSggc2NvcGUgKS5yZ2IubXVsKCB0aGlzLmdldEZsb2F0KCAnbGlnaHRNYXBJbnRlbnNpdHknICkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBNYXRlcmlhbE5vZGUuQU8gKSB7XG5cblx0XHRcdG5vZGUgPSB0aGlzLmdldFRleHR1cmUoIHNjb3BlICkuci5zdWIoIDEuMCApLm11bCggdGhpcy5nZXRGbG9hdCggJ2FvTWFwSW50ZW5zaXR5JyApICkuYWRkKCAxLjAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IG91dHB1dFR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRcdG5vZGUgPSB0aGlzLmdldENhY2hlKCBzY29wZSwgb3V0cHV0VHlwZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGU7XG5cblx0fVxuXG59XG5cbk1hdGVyaWFsTm9kZS5BTFBIQV9URVNUID0gJ2FscGhhVGVzdCc7XG5NYXRlcmlhbE5vZGUuQ09MT1IgPSAnY29sb3InO1xuTWF0ZXJpYWxOb2RlLk9QQUNJVFkgPSAnb3BhY2l0eSc7XG5NYXRlcmlhbE5vZGUuU0hJTklORVNTID0gJ3NoaW5pbmVzcyc7XG5NYXRlcmlhbE5vZGUuU1BFQ1VMQVIgPSAnc3BlY3VsYXInO1xuTWF0ZXJpYWxOb2RlLlNQRUNVTEFSX1NUUkVOR1RIID0gJ3NwZWN1bGFyU3RyZW5ndGgnO1xuTWF0ZXJpYWxOb2RlLlNQRUNVTEFSX0lOVEVOU0lUWSA9ICdzcGVjdWxhckludGVuc2l0eSc7XG5NYXRlcmlhbE5vZGUuU1BFQ1VMQVJfQ09MT1IgPSAnc3BlY3VsYXJDb2xvcic7XG5NYXRlcmlhbE5vZGUuUkVGTEVDVElWSVRZID0gJ3JlZmxlY3Rpdml0eSc7XG5NYXRlcmlhbE5vZGUuUk9VR0hORVNTID0gJ3JvdWdobmVzcyc7XG5NYXRlcmlhbE5vZGUuTUVUQUxORVNTID0gJ21ldGFsbmVzcyc7XG5NYXRlcmlhbE5vZGUuTk9STUFMID0gJ25vcm1hbCc7XG5NYXRlcmlhbE5vZGUuQ0xFQVJDT0FUID0gJ2NsZWFyY29hdCc7XG5NYXRlcmlhbE5vZGUuQ0xFQVJDT0FUX1JPVUdITkVTUyA9ICdjbGVhcmNvYXRSb3VnaG5lc3MnO1xuTWF0ZXJpYWxOb2RlLkNMRUFSQ09BVF9OT1JNQUwgPSAnY2xlYXJjb2F0Tm9ybWFsJztcbk1hdGVyaWFsTm9kZS5FTUlTU0lWRSA9ICdlbWlzc2l2ZSc7XG5NYXRlcmlhbE5vZGUuUk9UQVRJT04gPSAncm90YXRpb24nO1xuTWF0ZXJpYWxOb2RlLlNIRUVOID0gJ3NoZWVuJztcbk1hdGVyaWFsTm9kZS5TSEVFTl9ST1VHSE5FU1MgPSAnc2hlZW5Sb3VnaG5lc3MnO1xuTWF0ZXJpYWxOb2RlLkFOSVNPVFJPUFkgPSAnYW5pc290cm9weSc7XG5NYXRlcmlhbE5vZGUuSVJJREVTQ0VOQ0UgPSAnaXJpZGVzY2VuY2UnO1xuTWF0ZXJpYWxOb2RlLklSSURFU0NFTkNFX0lPUiA9ICdpcmlkZXNjZW5jZUlPUic7XG5NYXRlcmlhbE5vZGUuSVJJREVTQ0VOQ0VfVEhJQ0tORVNTID0gJ2lyaWRlc2NlbmNlVGhpY2tuZXNzJztcbk1hdGVyaWFsTm9kZS5JT1IgPSAnaW9yJztcbk1hdGVyaWFsTm9kZS5UUkFOU01JU1NJT04gPSAndHJhbnNtaXNzaW9uJztcbk1hdGVyaWFsTm9kZS5USElDS05FU1MgPSAndGhpY2tuZXNzJztcbk1hdGVyaWFsTm9kZS5BVFRFTlVBVElPTl9ESVNUQU5DRSA9ICdhdHRlbnVhdGlvbkRpc3RhbmNlJztcbk1hdGVyaWFsTm9kZS5BVFRFTlVBVElPTl9DT0xPUiA9ICdhdHRlbnVhdGlvbkNvbG9yJztcbk1hdGVyaWFsTm9kZS5MSU5FX1NDQUxFID0gJ3NjYWxlJztcbk1hdGVyaWFsTm9kZS5MSU5FX0RBU0hfU0laRSA9ICdkYXNoU2l6ZSc7XG5NYXRlcmlhbE5vZGUuTElORV9HQVBfU0laRSA9ICdnYXBTaXplJztcbk1hdGVyaWFsTm9kZS5MSU5FX1dJRFRIID0gJ2xpbmV3aWR0aCc7XG5NYXRlcmlhbE5vZGUuTElORV9EQVNIX09GRlNFVCA9ICdkYXNoT2Zmc2V0Jztcbk1hdGVyaWFsTm9kZS5QT0lOVF9TSVpFID0gJ3NpemUnO1xuTWF0ZXJpYWxOb2RlLkRJU1BFUlNJT04gPSAnZGlzcGVyc2lvbic7XG5NYXRlcmlhbE5vZGUuTElHSFRfTUFQID0gJ2xpZ2h0Jztcbk1hdGVyaWFsTm9kZS5BTyA9ICdhbyc7XG5cbmV4cG9ydCBkZWZhdWx0IE1hdGVyaWFsTm9kZTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyBhbHBoYSB0ZXN0IG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsQWxwaGFUZXN0ID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5BTFBIQV9URVNUICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGRpZmZ1c2UgY29sb3Igb2YgdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG4gKiBUaGUgdmFsdWUgaXMgY29tcG9zZWQgdmlhIGBjb2xvcmAgKiBgbWFwYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsQ29sb3IgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIE1hdGVyaWFsTm9kZSwgTWF0ZXJpYWxOb2RlLkNPTE9SICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoaW5pbmVzcyBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbFNoaW5pbmVzcyA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuU0hJTklORVNTICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGVtaXNzaXZlIGNvbG9yIG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICogVGhlIHZhbHVlIGlzIGNvbXBvc2VkIHZpYSBgZW1pc3NpdmVgICogYGVtaXNzaXZlSW50ZW5zaXR5YCAqIGBlbWlzc2l2ZU1hcGAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbEVtaXNzaXZlID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5FTUlTU0lWRSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBvcGFjaXR5IG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICogVGhlIHZhbHVlIGlzIGNvbXBvc2VkIHZpYSBgb3BhY2l0eWAgKiBgYWxwaGFNYXBgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsT3BhY2l0eSA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuT1BBQ0lUWSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzcGVjdWxhciBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsU3BlY3VsYXIgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIE1hdGVyaWFsTm9kZSwgTWF0ZXJpYWxOb2RlLlNQRUNVTEFSICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNwZWN1bGFyIGludGVuc2l0eSBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqIFRoZSB2YWx1ZSBpcyBjb21wb3NlZCB2aWEgYHNwZWN1bGFySW50ZW5zaXR5YCAqIGBzcGVjdWxhck1hcC5hYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbFNwZWN1bGFySW50ZW5zaXR5ID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5TUEVDVUxBUl9JTlRFTlNJVFkgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgc3BlY3VsYXIgY29sb3Igb2YgdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG4gKiBUaGUgdmFsdWUgaXMgY29tcG9zZWQgdmlhIGBzcGVjdWxhckNvbG9yYCAqIGBzcGVjdWxhck1hcC5yZ2JgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxTcGVjdWxhckNvbG9yID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5TUEVDVUxBUl9DT0xPUiApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzcGVjdWxhciBzdHJlbmd0aCBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqIFRoZSB2YWx1ZSBpcyBjb21wb3NlZCB2aWEgYHNwZWN1bGFyTWFwLnJgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsU3BlY3VsYXJTdHJlbmd0aCA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuU1BFQ1VMQVJfU1RSRU5HVEggKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVmbGVjdGl2aXR5IG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsUmVmbGVjdGl2aXR5ID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5SRUZMRUNUSVZJVFkgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcm91Z2huZXNzIG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICogVGhlIHZhbHVlIGlzIGNvbXBvc2VkIHZpYSBgcm91Z2huZXNzYCAqIGByb3VnaG5lc3NNYXAuZ2AuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxSb3VnaG5lc3MgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIE1hdGVyaWFsTm9kZSwgTWF0ZXJpYWxOb2RlLlJPVUdITkVTUyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBtZXRhbG5lc3Mgb2YgdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG4gKiBUaGUgdmFsdWUgaXMgY29tcG9zZWQgdmlhIGBtZXRhbG5lc3NgICogYG1ldGFsbmVzc01hcC5iYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbE1ldGFsbmVzcyA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuTUVUQUxORVNTICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIG5vcm1hbCBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqIFRoZSB2YWx1ZSB3aWxsIGJlIGVpdGhlciBgbm9ybWFsTWFwYCAqIGBub3JtYWxTY2FsZWAsIGBidW1wTWFwYCAqIGBidW1wU2NhbGVgIG9yIGBub3JtYWxWaWV3YC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsTm9ybWFsID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5OT1JNQUwgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgY2xlYXJjb2F0IG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICogVGhlIHZhbHVlIGlzIGNvbXBvc2VkIHZpYSBgY2xlYXJjb2F0YCAqIGBjbGVhcmNvYXRNYXAucmBcbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbENsZWFyY29hdCA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuQ0xFQVJDT0FUICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGNsZWFyY29hdCByb3VnaG5lc3Mgb2YgdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG4gKiBUaGUgdmFsdWUgaXMgY29tcG9zZWQgdmlhIGBjbGVhcmNvYXRSb3VnaG5lc3NgICogYGNsZWFyY29hdFJvdWdobmVzc01hcC5yYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbENsZWFyY29hdFJvdWdobmVzcyA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuQ0xFQVJDT0FUX1JPVUdITkVTUyApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBjbGVhcmNvYXQgbm9ybWFsIG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICogVGhlIHZhbHVlIHdpbGwgYmUgZWl0aGVyIGBjbGVhcmNvYXROb3JtYWxNYXBgIG9yIGBub3JtYWxWaWV3YC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsQ2xlYXJjb2F0Tm9ybWFsID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5DTEVBUkNPQVRfTk9STUFMICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHJvdGF0aW9uIG9mIHRoZSBjdXJyZW50IHNwcml0ZSBtYXRlcmlhbC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbFJvdGF0aW9uID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5ST1RBVElPTiApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzaGVlbiBjb2xvciBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqIFRoZSB2YWx1ZSBpcyBjb21wb3NlZCB2aWEgYHNoZWVuYCAqIGBzaGVlbkNvbG9yYCAqIGBzaGVlbkNvbG9yTWFwYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsU2hlZW4gPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIE1hdGVyaWFsTm9kZSwgTWF0ZXJpYWxOb2RlLlNIRUVOICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNoZWVuIHJvdWdobmVzcyBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqIFRoZSB2YWx1ZSBpcyBjb21wb3NlZCB2aWEgYHNoZWVuUm91Z2huZXNzYCAqIGBzaGVlblJvdWdobmVzc01hcC5hYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbFNoZWVuUm91Z2huZXNzID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5TSEVFTl9ST1VHSE5FU1MgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgYW5pc290cm9weSBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTx2ZWMyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsQW5pc290cm9weSA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuQU5JU09UUk9QWSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBpcmlkZXNjZW5jZSBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbElyaWRlc2NlbmNlID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5JUklERVNDRU5DRSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBpcmlkZXNjZW5jZSBJT1Igb2YgdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxJcmlkZXNjZW5jZUlPUiA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuSVJJREVTQ0VOQ0VfSU9SICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGlyaWRlc2NlbmNlIHRoaWNrbmVzcyBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbElyaWRlc2NlbmNlVGhpY2tuZXNzID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5JUklERVNDRU5DRV9USElDS05FU1MgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdHJhbnNtaXNzaW9uIG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICogVGhlIHZhbHVlIGlzIGNvbXBvc2VkIHZpYSBgdHJhbnNtaXNzaW9uYCAqIGB0cmFuc21pc3Npb25NYXAucmAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxUcmFuc21pc3Npb24gPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIE1hdGVyaWFsTm9kZSwgTWF0ZXJpYWxOb2RlLlRSQU5TTUlTU0lPTiApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSB0aGlja25lc3Mgb2YgdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG4gKiBUaGUgdmFsdWUgaXMgY29tcG9zZWQgdmlhIGB0aGlja25lc3NgICogYHRoaWNrbmVzc01hcC5nYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbFRoaWNrbmVzcyA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuVEhJQ0tORVNTICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIElPUiBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbElPUiA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuSU9SICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGF0dGVudWF0aW9uIGRpc3RhbmNlIG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsQXR0ZW51YXRpb25EaXN0YW5jZSA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuQVRURU5VQVRJT05fRElTVEFOQ0UgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgYXR0ZW51YXRpb24gY29sb3Igb2YgdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8dmVjMz59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbEF0dGVudWF0aW9uQ29sb3IgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIE1hdGVyaWFsTm9kZSwgTWF0ZXJpYWxOb2RlLkFUVEVOVUFUSU9OX0NPTE9SICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNjYWxlIG9mIHRoZSBjdXJyZW50IGRhc2hlZCBsaW5lIG1hdGVyaWFsLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsTGluZVNjYWxlID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5MSU5FX1NDQUxFICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGRhc2ggc2l6ZSBvZiB0aGUgY3VycmVudCBkYXNoZWQgbGluZSBtYXRlcmlhbC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbExpbmVEYXNoU2l6ZSA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuTElORV9EQVNIX1NJWkUgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgZ2FwIHNpemUgb2YgdGhlIGN1cnJlbnQgZGFzaGVkIGxpbmUgbWF0ZXJpYWwuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxMaW5lR2FwU2l6ZSA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuTElORV9HQVBfU0laRSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBsaW5lIHdpZHRoIG9mIHRoZSBjdXJyZW50IGxpbmUgbWF0ZXJpYWwuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxMaW5lV2lkdGggPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIE1hdGVyaWFsTm9kZSwgTWF0ZXJpYWxOb2RlLkxJTkVfV0lEVEggKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgZGFzaCBvZmZzZXQgb2YgdGhlIGN1cnJlbnQgbGluZSBtYXRlcmlhbC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBtYXRlcmlhbExpbmVEYXNoT2Zmc2V0ID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5MSU5FX0RBU0hfT0ZGU0VUICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHBvaW50IHNpemUgb2YgdGhlIGN1cnJlbnQgcG9pbnRzIG1hdGVyaWFsLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsUG9pbnRTaXplID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5QT0lOVF9TSVpFICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGRpc3BlcnNpb24gb2YgdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG4gKlxuICogQHRzbFxuICogQHR5cGUge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxEaXNwZXJzaW9uID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBNYXRlcmlhbE5vZGUsIE1hdGVyaWFsTm9kZS5ESVNQRVJTSU9OICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGxpZ2h0IG1hcCBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqIFRoZSB2YWx1ZSBpcyBjb21wb3NlZCB2aWEgYGxpZ2h0TWFwSW50ZW5zaXR5YCAqIGBsaWdodE1hcC5yZ2JgLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxMaWdodE1hcCA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggTWF0ZXJpYWxOb2RlLCBNYXRlcmlhbE5vZGUuTElHSFRfTUFQICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGFtYmllbnQgb2NjbHVzaW9uIG1hcCBvZiB0aGUgY3VycmVudCBtYXRlcmlhbC5cbiAqIFRoZSB2YWx1ZSBpcyBjb21wb3NlZCB2aWEgYGFvTWFwLnJgIC0gMSAqIGBhb01hcEludGVuc2l0eWAgKyAxLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IG1hdGVyaWFsQU8gPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIE1hdGVyaWFsTm9kZSwgTWF0ZXJpYWxOb2RlLkFPICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGFuaXNvdHJvcHkgdmVjdG9yIG9mIHRoZSBjdXJyZW50IG1hdGVyaWFsLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzI+fVxuICovXG5leHBvcnQgY29uc3QgbWF0ZXJpYWxBbmlzb3Ryb3B5VmVjdG9yID0gLypAX19QVVJFX18qLyB1bmlmb3JtKCBuZXcgVmVjdG9yMigpICkub25SZWZlcmVuY2UoIGZ1bmN0aW9uICggZnJhbWUgKSB7XG5cblx0cmV0dXJuIGZyYW1lLm1hdGVyaWFsO1xuXG59ICkub25SZW5kZXJVcGRhdGUoIGZ1bmN0aW9uICggeyBtYXRlcmlhbCB9ICkge1xuXG5cdHRoaXMudmFsdWUuc2V0KCBtYXRlcmlhbC5hbmlzb3Ryb3B5ICogTWF0aC5jb3MoIG1hdGVyaWFsLmFuaXNvdHJvcHlSb3RhdGlvbiApLCBtYXRlcmlhbC5hbmlzb3Ryb3B5ICogTWF0aC5zaW4oIG1hdGVyaWFsLmFuaXNvdHJvcHlSb3RhdGlvbiApICk7XG5cbn0gKTtcbiIsImltcG9ydCB7IEZuIH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBwb3NpdGlvbiBpbiBjbGlwIHNwYWNlIGFmdGVyIHRoZSBtb2RlbC12aWV3LXByb2plY3Rpb24gdHJhbnNmb3JtIG9mIHRoZSBjdXJyZW50IHJlbmRlcmVkIG9iamVjdC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7VmFyeWluZ05vZGU8dmVjND59XG4gKi9cbmV4cG9ydCBjb25zdCBtb2RlbFZpZXdQcm9qZWN0aW9uID0gLypAX19QVVJFX18qLyAoIEZuKCAoIGJ1aWxkZXIgKSA9PiB7XG5cblx0cmV0dXJuIGJ1aWxkZXIuY29udGV4dC5zZXR1cE1vZGVsVmlld1Byb2plY3Rpb24oKTtcblxufSwgJ3ZlYzQnICkub25jZSgpICkoKS50b1ZhcnlpbmcoICd2X21vZGVsVmlld1Byb2plY3Rpb24nICk7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuL05vZGUuanMnO1xuaW1wb3J0IHsgbm9kZUltbXV0YWJsZSwgdmFyeWluZyB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgc2hhZGVyIGluZGljZXMgb2YgZGlmZmVyZW50IHR5cGVzLiBUaGUgZm9sbG93aW5nIHByZWRlZmluZWQgbm9kZVxuICogb2JqZWN0cyBjb3ZlciBmcmVxdWVudCB1c2UgY2FzZXM6XG4gKlxuICogLSBgdmVydGV4SW5kZXhgOiBUaGUgaW5kZXggb2YgYSB2ZXJ0ZXggd2l0aGluIGEgbWVzaC5cbiAqIC0gYGluc3RhbmNlSW5kZXhgOiBUaGUgaW5kZXggb2YgZWl0aGVyIGEgbWVzaCBpbnN0YW5jZSBvciBhbiBpbnZvY2F0aW9uIG9mIGEgY29tcHV0ZSBzaGFkZXIuXG4gKiAtIGBkcmF3SW5kZXhgOiBUaGUgaW5kZXggb2YgYSBkcmF3IGNhbGwuXG4gKiAtIGBpbnZvY2F0aW9uTG9jYWxJbmRleGA6IFRoZSBpbmRleCBvZiBhIGNvbXB1dGUgaW52b2NhdGlvbiB3aXRoaW4gdGhlIHNjb3BlIG9mIGEgd29ya2dyb3VwIGxvYWQuXG4gKiAtIGBpbnZvY2F0aW9uU3ViZ3JvdXBJbmRleGA6IFRoZSBpbmRleCBvZiBhIGNvbXB1dGUgaW52b2NhdGlvbiB3aXRoaW4gdGhlIHNjb3BlIG9mIGEgc3ViZ3JvdXAuXG4gKiAtIGBzdWJncm91cEluZGV4YDogVGhlIGluZGV4IG9mIHRoZSBzdWJncm91cCB0aGUgY3VycmVudCBjb21wdXRlIGludm9jYXRpb24gYmVsb25ncyB0by5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBJbmRleE5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0luZGV4Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGluZGV4IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KCd2ZXJ0ZXgnfCdpbnN0YW5jZSd8J3N1Ymdyb3VwJ3wnaW52b2NhdGlvbkxvY2FsJ3wnaW52b2NhdGlvblN1Ymdyb3VwJ3wnZHJhdycpfSBzY29wZSAtIFRoZSBzY29wZSBvZiB0aGUgaW5kZXggbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzY29wZSApIHtcblxuXHRcdHN1cGVyKCAndWludCcgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzY29wZSBvZiB0aGUgaW5kZXggbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5zY29wZSA9IHNjb3BlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0luZGV4Tm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3Qgbm9kZVR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuXG5cdFx0bGV0IHByb3BlcnR5TmFtZTtcblxuXHRcdGlmICggc2NvcGUgPT09IEluZGV4Tm9kZS5WRVJURVggKSB7XG5cblx0XHRcdHByb3BlcnR5TmFtZSA9IGJ1aWxkZXIuZ2V0VmVydGV4SW5kZXgoKTtcblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBJbmRleE5vZGUuSU5TVEFOQ0UgKSB7XG5cblx0XHRcdHByb3BlcnR5TmFtZSA9IGJ1aWxkZXIuZ2V0SW5zdGFuY2VJbmRleCgpO1xuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IEluZGV4Tm9kZS5EUkFXICkge1xuXG5cdFx0XHRwcm9wZXJ0eU5hbWUgPSBidWlsZGVyLmdldERyYXdJbmRleCgpO1xuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IEluZGV4Tm9kZS5JTlZPQ0FUSU9OX0xPQ0FMICkge1xuXG5cdFx0XHRwcm9wZXJ0eU5hbWUgPSBidWlsZGVyLmdldEludm9jYXRpb25Mb2NhbEluZGV4KCk7XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gSW5kZXhOb2RlLklOVk9DQVRJT05fU1VCR1JPVVAgKSB7XG5cblx0XHRcdHByb3BlcnR5TmFtZSA9IGJ1aWxkZXIuZ2V0SW52b2NhdGlvblN1Ymdyb3VwSW5kZXgoKTtcblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBJbmRleE5vZGUuU1VCR1JPVVAgKSB7XG5cblx0XHRcdHByb3BlcnR5TmFtZSA9IGJ1aWxkZXIuZ2V0U3ViZ3JvdXBJbmRleCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuSW5kZXhOb2RlOiBVbmtub3duIHNjb3BlOiAnICsgc2NvcGUgKTtcblxuXHRcdH1cblxuXHRcdGxldCBvdXRwdXQ7XG5cblx0XHRpZiAoIGJ1aWxkZXIuc2hhZGVyU3RhZ2UgPT09ICd2ZXJ0ZXgnIHx8IGJ1aWxkZXIuc2hhZGVyU3RhZ2UgPT09ICdjb21wdXRlJyApIHtcblxuXHRcdFx0b3V0cHV0ID0gcHJvcGVydHlOYW1lO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3Qgbm9kZVZhcnlpbmcgPSB2YXJ5aW5nKCB0aGlzICk7XG5cblx0XHRcdG91dHB1dCA9IG5vZGVWYXJ5aW5nLmJ1aWxkKCBidWlsZGVyLCBub2RlVHlwZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHR9XG5cbn1cblxuSW5kZXhOb2RlLlZFUlRFWCA9ICd2ZXJ0ZXgnO1xuSW5kZXhOb2RlLklOU1RBTkNFID0gJ2luc3RhbmNlJztcbkluZGV4Tm9kZS5TVUJHUk9VUCA9ICdzdWJncm91cCc7XG5JbmRleE5vZGUuSU5WT0NBVElPTl9MT0NBTCA9ICdpbnZvY2F0aW9uTG9jYWwnO1xuSW5kZXhOb2RlLklOVk9DQVRJT05fU1VCR1JPVVAgPSAnaW52b2NhdGlvblN1Ymdyb3VwJztcbkluZGV4Tm9kZS5EUkFXID0gJ2RyYXcnO1xuXG5leHBvcnQgZGVmYXVsdCBJbmRleE5vZGU7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGluZGV4IG9mIGEgdmVydGV4IHdpdGhpbiBhIG1lc2guXG4gKlxuICogQHRzbFxuICogQHR5cGUge0luZGV4Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHZlcnRleEluZGV4ID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBJbmRleE5vZGUsIEluZGV4Tm9kZS5WRVJURVggKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgaW5kZXggb2YgZWl0aGVyIGEgbWVzaCBpbnN0YW5jZSBvciBhbiBpbnZvY2F0aW9uIG9mIGEgY29tcHV0ZSBzaGFkZXIuXG4gKlxuICogQHRzbFxuICogQHR5cGUge0luZGV4Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGluc3RhbmNlSW5kZXggPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIEluZGV4Tm9kZSwgSW5kZXhOb2RlLklOU1RBTkNFICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGluZGV4IG9mIHRoZSBzdWJncm91cCB0aGUgY3VycmVudCBjb21wdXRlIGludm9jYXRpb24gYmVsb25ncyB0by5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7SW5kZXhOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgc3ViZ3JvdXBJbmRleCA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggSW5kZXhOb2RlLCBJbmRleE5vZGUuU1VCR1JPVVAgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgaW5kZXggb2YgYSBjb21wdXRlIGludm9jYXRpb24gd2l0aGluIHRoZSBzY29wZSBvZiBhIHN1Ymdyb3VwLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtJbmRleE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBpbnZvY2F0aW9uU3ViZ3JvdXBJbmRleCA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggSW5kZXhOb2RlLCBJbmRleE5vZGUuSU5WT0NBVElPTl9TVUJHUk9VUCApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBpbmRleCBvZiBhIGNvbXB1dGUgaW52b2NhdGlvbiB3aXRoaW4gdGhlIHNjb3BlIG9mIGEgd29ya2dyb3VwIGxvYWQuXG4gKlxuICogQHRzbFxuICogQHR5cGUge0luZGV4Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGludm9jYXRpb25Mb2NhbEluZGV4ID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBJbmRleE5vZGUsIEluZGV4Tm9kZS5JTlZPQ0FUSU9OX0xPQ0FMICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGluZGV4IG9mIGEgZHJhdyBjYWxsLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtJbmRleE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBkcmF3SW5kZXggPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIEluZGV4Tm9kZSwgSW5kZXhOb2RlLkRSQVcgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyB2YXJ5aW5nUHJvcGVydHkgfSBmcm9tICcuLi9jb3JlL1Byb3BlcnR5Tm9kZS5qcyc7XG5pbXBvcnQgeyBpbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUsIGluc3RhbmNlZER5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuL0J1ZmZlckF0dHJpYnV0ZU5vZGUuanMnO1xuaW1wb3J0IHsgbm9ybWFsTG9jYWwsIHRyYW5zZm9ybU5vcm1hbCB9IGZyb20gJy4vTm9ybWFsLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uTG9jYWwgfSBmcm9tICcuL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSwgdmVjMywgbWF0NCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IE5vZGVVcGRhdGVUeXBlIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgYnVmZmVyIH0gZnJvbSAnLi4vYWNjZXNzb3JzL0J1ZmZlck5vZGUuanMnO1xuaW1wb3J0IHsgaW5zdGFuY2VJbmRleCB9IGZyb20gJy4uL2NvcmUvSW5kZXhOb2RlLmpzJztcblxuaW1wb3J0IHsgSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgfSBmcm9tICcuLi8uLi9jb3JlL0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLmpzJztcbmltcG9ydCB7IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uL2NvcmUvSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IER5bmFtaWNEcmF3VXNhZ2UgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIFRoaXMgbm9kZSBpbXBsZW1lbnRzIHRoZSB2ZXJ0ZXggc2hhZGVyIGxvZ2ljIHdoaWNoIGlzIHJlcXVpcmVkXG4gKiB3aGVuIHJlbmRlcmluZyAzRCBvYmplY3RzIHZpYSBpbnN0YW5jaW5nLiBUaGUgY29kZSBtYWtlcyBzdXJlXG4gKiB2ZXJ0ZXggcG9zaXRpb25zLCBub3JtYWxzIGFuZCBjb2xvcnMgY2FuIGJlIG1vZGlmaWVkIHZpYSBpbnN0YW5jZWRcbiAqIGRhdGEuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgSW5zdGFuY2VOb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdJbnN0YW5jZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBUaGUgbnVtYmVyIG9mIGluc3RhbmNlcy5cblx0ICogQHBhcmFtIHtJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGV9IGluc3RhbmNlTWF0cml4IC0gSW5zdGFuY2VkIGJ1ZmZlciBhdHRyaWJ1dGUgcmVwcmVzZW50aW5nIHRoZSBpbnN0YW5jZSB0cmFuc2Zvcm1hdGlvbnMuXG5cdCAqIEBwYXJhbSB7SW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlfSBpbnN0YW5jZUNvbG9yIC0gSW5zdGFuY2VkIGJ1ZmZlciBhdHRyaWJ1dGUgcmVwcmVzZW50aW5nIHRoZSBpbnN0YW5jZSBjb2xvcnMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggY291bnQsIGluc3RhbmNlTWF0cml4LCBpbnN0YW5jZUNvbG9yICkge1xuXG5cdFx0c3VwZXIoICd2b2lkJyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG51bWJlciBvZiBpbnN0YW5jZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuY291bnQgPSBjb3VudDtcblxuXHRcdC8qKlxuXHRcdCAqIEluc3RhbmNlZCBidWZmZXIgYXR0cmlidXRlIHJlcHJlc2VudGluZyB0aGUgdHJhbnNmb3JtYXRpb24gb2YgaW5zdGFuY2VzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZX1cblx0XHQgKi9cblx0XHR0aGlzLmluc3RhbmNlTWF0cml4ID0gaW5zdGFuY2VNYXRyaXg7XG5cblx0XHQvKipcblx0XHQgKiBJbnN0YW5jZWQgYnVmZmVyIGF0dHJpYnV0ZSByZXByZXNlbnRpbmcgdGhlIGNvbG9yIG9mIGluc3RhbmNlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGV9XG5cdFx0ICovXG5cdFx0dGhpcy5pbnN0YW5jZUNvbG9yID0gaW5zdGFuY2VDb2xvcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5zdGFuY2UgbWF0cml4IGRhdGEuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5pbnN0YW5jZU1hdHJpeE5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdGhhdCByZXByZXNlbnRzIHRoZSBpbnN0YW5jZSBjb2xvciBkYXRhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMuaW5zdGFuY2VDb2xvck5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVwZGF0ZSB0eXBlIGlzIHNldCB0byBgZnJhbWVgIHNpbmNlIGFuIHVwZGF0ZVxuXHRcdCAqIG9mIGluc3RhbmNlZCBidWZmZXIgZGF0YSBtdXN0IGJlIGNoZWNrZWQgcGVyIGZyYW1lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnZnJhbWUnXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVUeXBlID0gTm9kZVVwZGF0ZVR5cGUuRlJBTUU7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIGJ1ZmZlciB0aGF0IGlzIHVzZWQgYnkgYGluc3RhbmNlTWF0cml4Tm9kZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuYnVmZmVyID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgYnVmZmVyIHRoYXQgaXMgdXNlZCBieSBgaW5zdGFuY2VDb2xvck5vZGVgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGV9XG5cdFx0ICovXG5cdFx0dGhpcy5idWZmZXJDb2xvciA9IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGludGVybmFsIGJ1ZmZlcnMgYW5kIG5vZGVzIGFuZCBhc3NpZ25zIHRoZSB0cmFuc2Zvcm1lZCB2ZXJ0ZXggZGF0YVxuXHQgKiB0byBwcmVkZWZpbmVkIG5vZGUgdmFyaWFibGVzIGZvciBhY2N1bXVsYXRpb24uIFRoYXQgZm9sbG93cyB0aGUgc2FtZSBwYXR0ZXJuc1xuXHQgKiBsaWtlIHdpdGggbW9ycGggYW5kIHNraW5uaW5nIG5vZGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCB7IGNvdW50LCBpbnN0YW5jZU1hdHJpeCwgaW5zdGFuY2VDb2xvciB9ID0gdGhpcztcblxuXHRcdGxldCB7IGluc3RhbmNlTWF0cml4Tm9kZSwgaW5zdGFuY2VDb2xvck5vZGUgfSA9IHRoaXM7XG5cblx0XHRpZiAoIGluc3RhbmNlTWF0cml4Tm9kZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gQm90aCBXZWJHUFUgYW5kIFdlYkdMIGJhY2tlbmRzIGhhdmUgVUJPIG1heCBsaW1pdGVkIHRvIDY0a2IuIE1hdHJpeCBjb3VudCBudW1iZXIgYmlnZ2VyIHRoYW4gMTAwMCAoIDE2ICogNCAqIDEwMDAgPSA2NGtiICkgd2lsbCBmYWxsYmFjayB0byBhdHRyaWJ1dGUuXG5cblx0XHRcdGlmICggY291bnQgPD0gMTAwMCApIHtcblxuXHRcdFx0XHRpbnN0YW5jZU1hdHJpeE5vZGUgPSBidWZmZXIoIGluc3RhbmNlTWF0cml4LmFycmF5LCAnbWF0NCcsIE1hdGgubWF4KCBjb3VudCwgMSApICkuZWxlbWVudCggaW5zdGFuY2VJbmRleCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IG5ldyBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciggaW5zdGFuY2VNYXRyaXguYXJyYXksIDE2LCAxICk7XG5cblx0XHRcdFx0dGhpcy5idWZmZXIgPSBidWZmZXI7XG5cblx0XHRcdFx0Y29uc3QgYnVmZmVyRm4gPSBpbnN0YW5jZU1hdHJpeC51c2FnZSA9PT0gRHluYW1pY0RyYXdVc2FnZSA/IGluc3RhbmNlZER5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgOiBpbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU7XG5cblx0XHRcdFx0Y29uc3QgaW5zdGFuY2VCdWZmZXJzID0gW1xuXHRcdFx0XHRcdC8vIEYuU2lnbmF0dXJlIC0+IGJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIHR5cGUsIHN0cmlkZSwgb2Zmc2V0IClcblx0XHRcdFx0XHRidWZmZXJGbiggYnVmZmVyLCAndmVjNCcsIDE2LCAwICksXG5cdFx0XHRcdFx0YnVmZmVyRm4oIGJ1ZmZlciwgJ3ZlYzQnLCAxNiwgNCApLFxuXHRcdFx0XHRcdGJ1ZmZlckZuKCBidWZmZXIsICd2ZWM0JywgMTYsIDggKSxcblx0XHRcdFx0XHRidWZmZXJGbiggYnVmZmVyLCAndmVjNCcsIDE2LCAxMiApXG5cdFx0XHRcdF07XG5cblx0XHRcdFx0aW5zdGFuY2VNYXRyaXhOb2RlID0gbWF0NCggLi4uaW5zdGFuY2VCdWZmZXJzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5pbnN0YW5jZU1hdHJpeE5vZGUgPSBpbnN0YW5jZU1hdHJpeE5vZGU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGluc3RhbmNlQ29sb3IgJiYgaW5zdGFuY2VDb2xvck5vZGUgPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IGJ1ZmZlciA9IG5ldyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIGluc3RhbmNlQ29sb3IuYXJyYXksIDMgKTtcblxuXHRcdFx0Y29uc3QgYnVmZmVyRm4gPSBpbnN0YW5jZUNvbG9yLnVzYWdlID09PSBEeW5hbWljRHJhd1VzYWdlID8gaW5zdGFuY2VkRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSA6IGluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZTtcblxuXHRcdFx0dGhpcy5idWZmZXJDb2xvciA9IGJ1ZmZlcjtcblxuXHRcdFx0aW5zdGFuY2VDb2xvck5vZGUgPSB2ZWMzKCBidWZmZXJGbiggYnVmZmVyLCAndmVjMycsIDMsIDAgKSApO1xuXG5cdFx0XHR0aGlzLmluc3RhbmNlQ29sb3JOb2RlID0gaW5zdGFuY2VDb2xvck5vZGU7XG5cblx0XHR9XG5cblx0XHQvLyBQT1NJVElPTlxuXG5cdFx0Y29uc3QgaW5zdGFuY2VQb3NpdGlvbiA9IGluc3RhbmNlTWF0cml4Tm9kZS5tdWwoIHBvc2l0aW9uTG9jYWwgKS54eXo7XG5cdFx0cG9zaXRpb25Mb2NhbC5hc3NpZ24oIGluc3RhbmNlUG9zaXRpb24gKTtcblxuXHRcdC8vIE5PUk1BTFxuXG5cdFx0aWYgKCBidWlsZGVyLmhhc0dlb21ldHJ5QXR0cmlidXRlKCAnbm9ybWFsJyApICkge1xuXG5cdFx0XHRjb25zdCBpbnN0YW5jZU5vcm1hbCA9IHRyYW5zZm9ybU5vcm1hbCggbm9ybWFsTG9jYWwsIGluc3RhbmNlTWF0cml4Tm9kZSApO1xuXG5cdFx0XHQvLyBBU1NJR05TXG5cblx0XHRcdG5vcm1hbExvY2FsLmFzc2lnbiggaW5zdGFuY2VOb3JtYWwgKTtcblxuXHRcdH1cblxuXHRcdC8vIENPTE9SXG5cblx0XHRpZiAoIHRoaXMuaW5zdGFuY2VDb2xvck5vZGUgIT09IG51bGwgKSB7XG5cblx0XHRcdHZhcnlpbmdQcm9wZXJ0eSggJ3ZlYzMnLCAndkluc3RhbmNlQ29sb3InICkuYXNzaWduKCB0aGlzLmluc3RhbmNlQ29sb3JOb2RlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGludGVybmFsIGJ1ZmZlcnMgcmVxdWlyZWQgYW4gdXBkYXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBUaGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlKCAvKmZyYW1lKi8gKSB7XG5cblx0XHRpZiAoIHRoaXMuaW5zdGFuY2VNYXRyaXgudXNhZ2UgIT09IER5bmFtaWNEcmF3VXNhZ2UgJiYgdGhpcy5idWZmZXIgIT09IG51bGwgJiYgdGhpcy5pbnN0YW5jZU1hdHJpeC52ZXJzaW9uICE9PSB0aGlzLmJ1ZmZlci52ZXJzaW9uICkge1xuXG5cdFx0XHR0aGlzLmJ1ZmZlci52ZXJzaW9uID0gdGhpcy5pbnN0YW5jZU1hdHJpeC52ZXJzaW9uO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmluc3RhbmNlQ29sb3IgJiYgdGhpcy5pbnN0YW5jZUNvbG9yLnVzYWdlICE9PSBEeW5hbWljRHJhd1VzYWdlICYmIHRoaXMuYnVmZmVyQ29sb3IgIT09IG51bGwgJiYgdGhpcy5pbnN0YW5jZUNvbG9yLnZlcnNpb24gIT09IHRoaXMuYnVmZmVyQ29sb3IudmVyc2lvbiApIHtcblxuXHRcdFx0dGhpcy5idWZmZXJDb2xvci52ZXJzaW9uID0gdGhpcy5pbnN0YW5jZUNvbG9yLnZlcnNpb247XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEluc3RhbmNlTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIGluc3RhbmNlIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBUaGUgbnVtYmVyIG9mIGluc3RhbmNlcy5cbiAqIEBwYXJhbSB7SW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlfSBpbnN0YW5jZU1hdHJpeCAtIEluc3RhbmNlZCBidWZmZXIgYXR0cmlidXRlIHJlcHJlc2VudGluZyB0aGUgaW5zdGFuY2UgdHJhbnNmb3JtYXRpb25zLlxuICogQHBhcmFtIHtJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGV9IGluc3RhbmNlQ29sb3IgLSBJbnN0YW5jZWQgYnVmZmVyIGF0dHJpYnV0ZSByZXByZXNlbnRpbmcgdGhlIGluc3RhbmNlIGNvbG9ycy5cbiAqIEByZXR1cm5zIHtJbnN0YW5jZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBpbnN0YW5jZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBJbnN0YW5jZU5vZGUgKTtcbiIsImltcG9ydCBJbnN0YW5jZU5vZGUgZnJvbSAnLi9JbnN0YW5jZU5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZVByb3h5IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzcGVjaWFsIHZlcnNpb24gb2YgYEluc3RhbmNlTm9kZWAgd2hpY2ggcmVxdWlyZXMgdGhlIHVzYWdlIG9mIHtAbGluayBJbnN0YW5jZWRNZXNofS5cbiAqIEl0IGFsbG93cyBhbiBlYXNpZXIgc2V0dXAgb2YgdGhlIGluc3RhbmNlIG5vZGUuXG4gKlxuICogQGF1Z21lbnRzIEluc3RhbmNlTm9kZVxuICovXG5jbGFzcyBJbnN0YW5jZWRNZXNoTm9kZSBleHRlbmRzIEluc3RhbmNlTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdJbnN0YW5jZWRNZXNoTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlZCBtZXNoIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7SW5zdGFuY2VkTWVzaH0gaW5zdGFuY2VkTWVzaCAtIFRoZSBpbnN0YW5jZWQgbWVzaC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBpbnN0YW5jZWRNZXNoICkge1xuXG5cdFx0Y29uc3QgeyBjb3VudCwgaW5zdGFuY2VNYXRyaXgsIGluc3RhbmNlQ29sb3IgfSA9IGluc3RhbmNlZE1lc2g7XG5cblx0XHRzdXBlciggY291bnQsIGluc3RhbmNlTWF0cml4LCBpbnN0YW5jZUNvbG9yICk7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgaW5zdGFuY2VkIG1lc2guXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7SW5zdGFuY2VkTWVzaH1cblx0XHQgKi9cblx0XHR0aGlzLmluc3RhbmNlZE1lc2ggPSBpbnN0YW5jZWRNZXNoO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnN0YW5jZWRNZXNoTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIGluc3RhbmNlZCBtZXNoIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0luc3RhbmNlZE1lc2h9IGluc3RhbmNlZE1lc2ggLSBUaGUgaW5zdGFuY2VkTWVzaC5cbiAqIEByZXR1cm5zIHtJbnN0YW5jZWRNZXNoTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGluc3RhbmNlZE1lc2ggPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggSW5zdGFuY2VkTWVzaE5vZGUgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBub3JtYWxMb2NhbCB9IGZyb20gJy4vTm9ybWFsLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uTG9jYWwgfSBmcm9tICcuL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSwgdmVjMywgbWF0MywgbWF0NCwgaW50LCBpdmVjMiwgZmxvYXQsIEZuIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgdGV4dHVyZUxvYWQgfSBmcm9tICcuL1RleHR1cmVOb2RlLmpzJztcbmltcG9ydCB7IHRleHR1cmVTaXplIH0gZnJvbSAnLi9UZXh0dXJlU2l6ZU5vZGUuanMnO1xuaW1wb3J0IHsgdGFuZ2VudExvY2FsIH0gZnJvbSAnLi9UYW5nZW50LmpzJztcbmltcG9ydCB7IGluc3RhbmNlSW5kZXgsIGRyYXdJbmRleCB9IGZyb20gJy4uL2NvcmUvSW5kZXhOb2RlLmpzJztcbmltcG9ydCB7IHZhcnlpbmdQcm9wZXJ0eSB9IGZyb20gJy4uL2NvcmUvUHJvcGVydHlOb2RlLmpzJztcblxuLyoqXG4gKiBUaGlzIG5vZGUgaW1wbGVtZW50cyB0aGUgdmVydGV4IHNoYWRlciBsb2dpYyB3aGljaCBpcyByZXF1aXJlZFxuICogd2hlbiByZW5kZXJpbmcgM0Qgb2JqZWN0cyB2aWEgYmF0Y2hpbmcuIGBCYXRjaE5vZGVgIG11c3QgYmUgdXNlZFxuICogd2l0aCBpbnN0YW5jZXMgb2Yge0BsaW5rIEJhdGNoZWRNZXNofS5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBCYXRjaE5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0JhdGNoTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJhdGNoIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QmF0Y2hlZE1lc2h9IGJhdGNoTWVzaCAtIEEgcmVmZXJlbmNlIHRvIGJhdGNoZWQgbWVzaC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBiYXRjaE1lc2ggKSB7XG5cblx0XHRzdXBlciggJ3ZvaWQnICk7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBiYXRjaGVkIG1lc2guXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QmF0Y2hlZE1lc2h9XG5cdFx0ICovXG5cdFx0dGhpcy5iYXRjaE1lc2ggPSBiYXRjaE1lc2g7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYmF0Y2hpbmcgaW5kZXggbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/SW5kZXhOb2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJhdGNoaW5nSWROb2RlID0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgaW50ZXJuYWwgYnVmZmVycyBhbmQgbm9kZXMgYW5kIGFzc2lnbnMgdGhlIHRyYW5zZm9ybWVkIHZlcnRleCBkYXRhXG5cdCAqIHRvIHByZWRlZmluZWQgbm9kZSB2YXJpYWJsZXMgZm9yIGFjY3VtdWxhdGlvbi4gVGhhdCBmb2xsb3dzIHRoZSBzYW1lIHBhdHRlcm5zXG5cdCAqIGxpa2Ugd2l0aCBtb3JwaCBhbmQgc2tpbm5pbmcgbm9kZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5iYXRjaGluZ0lkTm9kZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBidWlsZGVyLmdldERyYXdJbmRleCgpID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuYmF0Y2hpbmdJZE5vZGUgPSBpbnN0YW5jZUluZGV4O1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuYmF0Y2hpbmdJZE5vZGUgPSBkcmF3SW5kZXg7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGdldEluZGlyZWN0SW5kZXggPSBGbiggKCBbIGlkIF0gKSA9PiB7XG5cblx0XHRcdGNvbnN0IHNpemUgPSBpbnQoIHRleHR1cmVTaXplKCB0ZXh0dXJlTG9hZCggdGhpcy5iYXRjaE1lc2guX2luZGlyZWN0VGV4dHVyZSApLCAwICkgKTtcblx0XHRcdGNvbnN0IHggPSBpbnQoIGlkICkubW9kSW50KCBzaXplICk7XG5cdFx0XHRjb25zdCB5ID0gaW50KCBpZCApLmRpdiggc2l6ZSApO1xuXHRcdFx0cmV0dXJuIHRleHR1cmVMb2FkKCB0aGlzLmJhdGNoTWVzaC5faW5kaXJlY3RUZXh0dXJlLCBpdmVjMiggeCwgeSApICkueDtcblxuXHRcdH0gKS5zZXRMYXlvdXQoIHtcblx0XHRcdG5hbWU6ICdnZXRJbmRpcmVjdEluZGV4Jyxcblx0XHRcdHR5cGU6ICd1aW50Jyxcblx0XHRcdGlucHV0czogW1xuXHRcdFx0XHR7IG5hbWU6ICdpZCcsIHR5cGU6ICdpbnQnIH1cblx0XHRcdF1cblx0XHR9ICk7XG5cblx0XHRjb25zdCBpbmRpcmVjdElkID0gZ2V0SW5kaXJlY3RJbmRleCggaW50KCB0aGlzLmJhdGNoaW5nSWROb2RlICkgKTtcblxuXHRcdGNvbnN0IG1hdHJpY2VzVGV4dHVyZSA9IHRoaXMuYmF0Y2hNZXNoLl9tYXRyaWNlc1RleHR1cmU7XG5cblx0XHRjb25zdCBzaXplID0gdGV4dHVyZVNpemUoIHRleHR1cmVMb2FkKCBtYXRyaWNlc1RleHR1cmUgKSwgMCApO1xuXHRcdGNvbnN0IGogPSBmbG9hdCggaW5kaXJlY3RJZCApLm11bCggNCApLnRvSW50KCkudG9WYXIoKTtcblxuXHRcdGNvbnN0IHggPSBqLm1vZEludCggc2l6ZSApO1xuXHRcdGNvbnN0IHkgPSBqLmRpdiggaW50KCBzaXplICkgKTtcblx0XHRjb25zdCBiYXRjaGluZ01hdHJpeCA9IG1hdDQoXG5cdFx0XHR0ZXh0dXJlTG9hZCggbWF0cmljZXNUZXh0dXJlLCBpdmVjMiggeCwgeSApICksXG5cdFx0XHR0ZXh0dXJlTG9hZCggbWF0cmljZXNUZXh0dXJlLCBpdmVjMiggeC5hZGQoIDEgKSwgeSApICksXG5cdFx0XHR0ZXh0dXJlTG9hZCggbWF0cmljZXNUZXh0dXJlLCBpdmVjMiggeC5hZGQoIDIgKSwgeSApICksXG5cdFx0XHR0ZXh0dXJlTG9hZCggbWF0cmljZXNUZXh0dXJlLCBpdmVjMiggeC5hZGQoIDMgKSwgeSApIClcblx0XHQpO1xuXG5cblx0XHRjb25zdCBjb2xvcnNUZXh0dXJlID0gdGhpcy5iYXRjaE1lc2guX2NvbG9yc1RleHR1cmU7XG5cblx0XHRpZiAoIGNvbG9yc1RleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IGdldEJhdGNoaW5nQ29sb3IgPSBGbiggKCBbIGlkIF0gKSA9PiB7XG5cblx0XHRcdFx0Y29uc3Qgc2l6ZSA9IHRleHR1cmVTaXplKCB0ZXh0dXJlTG9hZCggY29sb3JzVGV4dHVyZSApLCAwICkueDtcblx0XHRcdFx0Y29uc3QgaiA9IGlkO1xuXHRcdFx0XHRjb25zdCB4ID0gai5tb2RJbnQoIHNpemUgKTtcblx0XHRcdFx0Y29uc3QgeSA9IGouZGl2KCBzaXplICk7XG5cdFx0XHRcdHJldHVybiB0ZXh0dXJlTG9hZCggY29sb3JzVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSApLnJnYjtcblxuXHRcdFx0fSApLnNldExheW91dCgge1xuXHRcdFx0XHRuYW1lOiAnZ2V0QmF0Y2hpbmdDb2xvcicsXG5cdFx0XHRcdHR5cGU6ICd2ZWMzJyxcblx0XHRcdFx0aW5wdXRzOiBbXG5cdFx0XHRcdFx0eyBuYW1lOiAnaWQnLCB0eXBlOiAnaW50JyB9XG5cdFx0XHRcdF1cblx0XHRcdH0gKTtcblxuXHRcdFx0Y29uc3QgY29sb3IgPSBnZXRCYXRjaGluZ0NvbG9yKCBpbmRpcmVjdElkICk7XG5cblx0XHRcdHZhcnlpbmdQcm9wZXJ0eSggJ3ZlYzMnLCAndkJhdGNoQ29sb3InICkuYXNzaWduKCBjb2xvciApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYm0gPSBtYXQzKCBiYXRjaGluZ01hdHJpeCApO1xuXG5cdFx0cG9zaXRpb25Mb2NhbC5hc3NpZ24oIGJhdGNoaW5nTWF0cml4Lm11bCggcG9zaXRpb25Mb2NhbCApICk7XG5cblx0XHRjb25zdCB0cmFuc2Zvcm1lZE5vcm1hbCA9IG5vcm1hbExvY2FsLmRpdiggdmVjMyggYm1bIDAgXS5kb3QoIGJtWyAwIF0gKSwgYm1bIDEgXS5kb3QoIGJtWyAxIF0gKSwgYm1bIDIgXS5kb3QoIGJtWyAyIF0gKSApICk7XG5cblx0XHRjb25zdCBiYXRjaGluZ05vcm1hbCA9IGJtLm11bCggdHJhbnNmb3JtZWROb3JtYWwgKS54eXo7XG5cblx0XHRub3JtYWxMb2NhbC5hc3NpZ24oIGJhdGNoaW5nTm9ybWFsICk7XG5cblx0XHRpZiAoIGJ1aWxkZXIuaGFzR2VvbWV0cnlBdHRyaWJ1dGUoICd0YW5nZW50JyApICkge1xuXG5cdFx0XHR0YW5nZW50TG9jYWwubXVsQXNzaWduKCBibSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXRjaE5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGJhdGNoIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0JhdGNoZWRNZXNofSBiYXRjaE1lc2ggLSBBIHJlZmVyZW5jZSB0byBiYXRjaGVkIG1lc2guXG4gKiBAcmV0dXJucyB7QmF0Y2hOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYmF0Y2ggPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggQmF0Y2hOb2RlICk7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuaW1wb3J0IHsgTm9kZVVwZGF0ZVR5cGUgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgYXR0cmlidXRlIH0gZnJvbSAnLi4vY29yZS9BdHRyaWJ1dGVOb2RlLmpzJztcbmltcG9ydCB7IHJlZmVyZW5jZSwgcmVmZXJlbmNlQnVmZmVyIH0gZnJvbSAnLi9SZWZlcmVuY2VOb2RlLmpzJztcbmltcG9ydCB7IGFkZCB9IGZyb20gJy4uL21hdGgvT3BlcmF0b3JOb2RlLmpzJztcbmltcG9ydCB7IG5vcm1hbExvY2FsIH0gZnJvbSAnLi9Ob3JtYWwuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25Mb2NhbCwgcG9zaXRpb25QcmV2aW91cyB9IGZyb20gJy4vUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgdGFuZ2VudExvY2FsIH0gZnJvbSAnLi9UYW5nZW50LmpzJztcbmltcG9ydCB7IHVuaWZvcm0gfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Ob2RlLmpzJztcbmltcG9ydCB7IGJ1ZmZlciB9IGZyb20gJy4vQnVmZmVyTm9kZS5qcyc7XG5pbXBvcnQgeyBnZXREYXRhRnJvbU9iamVjdCB9IGZyb20gJy4uL2NvcmUvTm9kZVV0aWxzLmpzJztcblxuY29uc3QgX2ZyYW1lSWQgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIFRoaXMgbm9kZSBpbXBsZW1lbnRzIHRoZSB2ZXJ0ZXggdHJhbnNmb3JtYXRpb24gc2hhZGVyIGxvZ2ljIHdoaWNoIGlzIHJlcXVpcmVkXG4gKiBmb3Igc2tpbm5pbmcvc2tlbGV0YWwgYW5pbWF0aW9uLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFNraW5uaW5nTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU2tpbm5pbmdOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc2tpbm5pbmcgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtTa2lubmVkTWVzaH0gc2tpbm5lZE1lc2ggLSBUaGUgc2tpbm5lZCBtZXNoLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFt1c2VSZWZlcmVuY2U9ZmFsc2VdIC0gV2hldGhlciB0byB1c2UgcmVmZXJlbmNlIG5vZGVzIGZvciBpbnRlcm5hbCBza2lubmVkIG1lc2ggcmVsYXRlZCBkYXRhIG9yIG5vdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBza2lubmVkTWVzaCwgdXNlUmVmZXJlbmNlID0gZmFsc2UgKSB7XG5cblx0XHRzdXBlciggJ3ZvaWQnICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2tpbm5lZCBtZXNoLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1NraW5uZWRNZXNofVxuXHRcdCAqL1xuXHRcdHRoaXMuc2tpbm5lZE1lc2ggPSBza2lubmVkTWVzaDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdG8gdXNlIHJlZmVyZW5jZSBub2RlcyBmb3IgaW50ZXJuYWwgc2tpbm5lZCBtZXNoIHJlbGF0ZWQgZGF0YSBvciBub3QuXG5cdFx0ICogVE9ETzogRXhwbGFpbiB0aGUgcHVycG9zZSBvZiB0aGUgcHJvcGVydHkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLnVzZVJlZmVyZW5jZSA9IHVzZVJlZmVyZW5jZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1cGRhdGUgdHlwZSBvdmVyd3JpdHRlbiBzaW5jZSBza2lubmluZyBub2RlcyBhcmUgdXBkYXRlZCBwZXIgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZVR5cGUgPSBOb2RlVXBkYXRlVHlwZS5PQkpFQ1Q7XG5cblx0XHQvL1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNraW4gaW5kZXggYXR0cmlidXRlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0F0dHJpYnV0ZU5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5za2luSW5kZXhOb2RlID0gYXR0cmlidXRlKCAnc2tpbkluZGV4JywgJ3V2ZWM0JyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNraW4gd2VpZ2h0IGF0dHJpYnV0ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBdHRyaWJ1dGVOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMuc2tpbldlaWdodE5vZGUgPSBhdHRyaWJ1dGUoICdza2luV2VpZ2h0JywgJ3ZlYzQnICk7XG5cblx0XHRsZXQgYmluZE1hdHJpeE5vZGUsIGJpbmRNYXRyaXhJbnZlcnNlTm9kZSwgYm9uZU1hdHJpY2VzTm9kZTtcblxuXHRcdGlmICggdXNlUmVmZXJlbmNlICkge1xuXG5cdFx0XHRiaW5kTWF0cml4Tm9kZSA9IHJlZmVyZW5jZSggJ2JpbmRNYXRyaXgnLCAnbWF0NCcgKTtcblx0XHRcdGJpbmRNYXRyaXhJbnZlcnNlTm9kZSA9IHJlZmVyZW5jZSggJ2JpbmRNYXRyaXhJbnZlcnNlJywgJ21hdDQnICk7XG5cdFx0XHRib25lTWF0cmljZXNOb2RlID0gcmVmZXJlbmNlQnVmZmVyKCAnc2tlbGV0b24uYm9uZU1hdHJpY2VzJywgJ21hdDQnLCBza2lubmVkTWVzaC5za2VsZXRvbi5ib25lcy5sZW5ndGggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJpbmRNYXRyaXhOb2RlID0gdW5pZm9ybSggc2tpbm5lZE1lc2guYmluZE1hdHJpeCwgJ21hdDQnICk7XG5cdFx0XHRiaW5kTWF0cml4SW52ZXJzZU5vZGUgPSB1bmlmb3JtKCBza2lubmVkTWVzaC5iaW5kTWF0cml4SW52ZXJzZSwgJ21hdDQnICk7XG5cdFx0XHRib25lTWF0cmljZXNOb2RlID0gYnVmZmVyKCBza2lubmVkTWVzaC5za2VsZXRvbi5ib25lTWF0cmljZXMsICdtYXQ0Jywgc2tpbm5lZE1lc2guc2tlbGV0b24uYm9uZXMubGVuZ3RoICk7XG5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYmluZCBtYXRyaXggbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlPG1hdDQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZE1hdHJpeE5vZGUgPSBiaW5kTWF0cml4Tm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBiaW5kIG1hdHJpeCBpbnZlcnNlIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZTxtYXQ0Pn1cblx0XHQgKi9cblx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlTm9kZSA9IGJpbmRNYXRyaXhJbnZlcnNlTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBiaW5kIG1hdHJpY2VzIGFzIGEgdW5pZm9ybSBidWZmZXIgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMuYm9uZU1hdHJpY2VzTm9kZSA9IGJvbmVNYXRyaWNlc05vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcHJldmlvdXMgYmluZCBtYXRyaWNlcyBhcyBhIHVuaWZvcm0gYnVmZmVyIG5vZGUuXG5cdFx0ICogUmVxdWlyZWQgZm9yIGNvbXB1dGluZyBtb3Rpb24gdmVjdG9ycy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5wcmV2aW91c0JvbmVNYXRyaWNlc05vZGUgPSBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogVHJhbnNmb3JtcyB0aGUgZ2l2ZW4gdmVydGV4IHBvc2l0aW9uIHZpYSBza2lubmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBbYm9uZU1hdHJpY2VzPXRoaXMuYm9uZU1hdHJpY2VzTm9kZV0gLSBUaGUgYm9uZSBtYXRyaWNlc1xuXHQgKiBAcGFyYW0ge05vZGU8dmVjMz59IFtwb3NpdGlvbj1wb3NpdGlvbkxvY2FsXSAtIFRoZSB2ZXJ0ZXggcG9zaXRpb24gaW4gbG9jYWwgc3BhY2UuXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSB0cmFuc2Zvcm1lZCB2ZXJ0ZXggcG9zaXRpb24uXG5cdCAqL1xuXHRnZXRTa2lubmVkUG9zaXRpb24oIGJvbmVNYXRyaWNlcyA9IHRoaXMuYm9uZU1hdHJpY2VzTm9kZSwgcG9zaXRpb24gPSBwb3NpdGlvbkxvY2FsICkge1xuXG5cdFx0Y29uc3QgeyBza2luSW5kZXhOb2RlLCBza2luV2VpZ2h0Tm9kZSwgYmluZE1hdHJpeE5vZGUsIGJpbmRNYXRyaXhJbnZlcnNlTm9kZSB9ID0gdGhpcztcblxuXHRcdGNvbnN0IGJvbmVNYXRYID0gYm9uZU1hdHJpY2VzLmVsZW1lbnQoIHNraW5JbmRleE5vZGUueCApO1xuXHRcdGNvbnN0IGJvbmVNYXRZID0gYm9uZU1hdHJpY2VzLmVsZW1lbnQoIHNraW5JbmRleE5vZGUueSApO1xuXHRcdGNvbnN0IGJvbmVNYXRaID0gYm9uZU1hdHJpY2VzLmVsZW1lbnQoIHNraW5JbmRleE5vZGUueiApO1xuXHRcdGNvbnN0IGJvbmVNYXRXID0gYm9uZU1hdHJpY2VzLmVsZW1lbnQoIHNraW5JbmRleE5vZGUudyApO1xuXG5cdFx0Ly8gUE9TSVRJT05cblxuXHRcdGNvbnN0IHNraW5WZXJ0ZXggPSBiaW5kTWF0cml4Tm9kZS5tdWwoIHBvc2l0aW9uICk7XG5cblx0XHRjb25zdCBza2lubmVkID0gYWRkKFxuXHRcdFx0Ym9uZU1hdFgubXVsKCBza2luV2VpZ2h0Tm9kZS54ICkubXVsKCBza2luVmVydGV4ICksXG5cdFx0XHRib25lTWF0WS5tdWwoIHNraW5XZWlnaHROb2RlLnkgKS5tdWwoIHNraW5WZXJ0ZXggKSxcblx0XHRcdGJvbmVNYXRaLm11bCggc2tpbldlaWdodE5vZGUueiApLm11bCggc2tpblZlcnRleCApLFxuXHRcdFx0Ym9uZU1hdFcubXVsKCBza2luV2VpZ2h0Tm9kZS53ICkubXVsKCBza2luVmVydGV4IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIGJpbmRNYXRyaXhJbnZlcnNlTm9kZS5tdWwoIHNraW5uZWQgKS54eXo7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2Zvcm1zIHRoZSBnaXZlbiB2ZXJ0ZXggbm9ybWFsIHZpYSBza2lubmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBbYm9uZU1hdHJpY2VzPXRoaXMuYm9uZU1hdHJpY2VzTm9kZV0gLSBUaGUgYm9uZSBtYXRyaWNlc1xuXHQgKiBAcGFyYW0ge05vZGU8dmVjMz59IFtub3JtYWw9bm9ybWFsTG9jYWxdIC0gVGhlIHZlcnRleCBub3JtYWwgaW4gbG9jYWwgc3BhY2UuXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSB0cmFuc2Zvcm1lZCB2ZXJ0ZXggbm9ybWFsLlxuXHQgKi9cblx0Z2V0U2tpbm5lZE5vcm1hbCggYm9uZU1hdHJpY2VzID0gdGhpcy5ib25lTWF0cmljZXNOb2RlLCBub3JtYWwgPSBub3JtYWxMb2NhbCApIHtcblxuXHRcdGNvbnN0IHsgc2tpbkluZGV4Tm9kZSwgc2tpbldlaWdodE5vZGUsIGJpbmRNYXRyaXhOb2RlLCBiaW5kTWF0cml4SW52ZXJzZU5vZGUgfSA9IHRoaXM7XG5cblx0XHRjb25zdCBib25lTWF0WCA9IGJvbmVNYXRyaWNlcy5lbGVtZW50KCBza2luSW5kZXhOb2RlLnggKTtcblx0XHRjb25zdCBib25lTWF0WSA9IGJvbmVNYXRyaWNlcy5lbGVtZW50KCBza2luSW5kZXhOb2RlLnkgKTtcblx0XHRjb25zdCBib25lTWF0WiA9IGJvbmVNYXRyaWNlcy5lbGVtZW50KCBza2luSW5kZXhOb2RlLnogKTtcblx0XHRjb25zdCBib25lTWF0VyA9IGJvbmVNYXRyaWNlcy5lbGVtZW50KCBza2luSW5kZXhOb2RlLncgKTtcblxuXHRcdC8vIE5PUk1BTFxuXG5cdFx0bGV0IHNraW5NYXRyaXggPSBhZGQoXG5cdFx0XHRza2luV2VpZ2h0Tm9kZS54Lm11bCggYm9uZU1hdFggKSxcblx0XHRcdHNraW5XZWlnaHROb2RlLnkubXVsKCBib25lTWF0WSApLFxuXHRcdFx0c2tpbldlaWdodE5vZGUuei5tdWwoIGJvbmVNYXRaICksXG5cdFx0XHRza2luV2VpZ2h0Tm9kZS53Lm11bCggYm9uZU1hdFcgKVxuXHRcdCk7XG5cblx0XHRza2luTWF0cml4ID0gYmluZE1hdHJpeEludmVyc2VOb2RlLm11bCggc2tpbk1hdHJpeCApLm11bCggYmluZE1hdHJpeE5vZGUgKTtcblxuXHRcdHJldHVybiBza2luTWF0cml4LnRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsICkueHl6O1xuXG5cdH1cblxuXHQvKipcblx0ICogVHJhbnNmb3JtcyB0aGUgZ2l2ZW4gdmVydGV4IG5vcm1hbCB2aWEgc2tpbm5pbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSBza2lubmVkIHBvc2l0aW9uIGZyb20gdGhlIHByZXZpb3VzIGZyYW1lLlxuXHQgKi9cblx0Z2V0UHJldmlvdXNTa2lubmVkUG9zaXRpb24oIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBza2lubmVkTWVzaCA9IGJ1aWxkZXIub2JqZWN0O1xuXG5cdFx0aWYgKCB0aGlzLnByZXZpb3VzQm9uZU1hdHJpY2VzTm9kZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0c2tpbm5lZE1lc2guc2tlbGV0b24ucHJldmlvdXNCb25lTWF0cmljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCBza2lubmVkTWVzaC5za2VsZXRvbi5ib25lTWF0cmljZXMgKTtcblxuXHRcdFx0dGhpcy5wcmV2aW91c0JvbmVNYXRyaWNlc05vZGUgPSByZWZlcmVuY2VCdWZmZXIoICdza2VsZXRvbi5wcmV2aW91c0JvbmVNYXRyaWNlcycsICdtYXQ0Jywgc2tpbm5lZE1lc2guc2tlbGV0b24uYm9uZXMubGVuZ3RoICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTa2lubmVkUG9zaXRpb24oIHRoaXMucHJldmlvdXNCb25lTWF0cmljZXNOb2RlLCBwb3NpdGlvblByZXZpb3VzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiBib25lIG1hdHJpY2VzIGZyb20gdGhlIHByZXZpb3VzIGZyYW1lIGFyZSByZXF1aXJlZC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBib25lIG1hdHJpY2VzIGZyb20gdGhlIHByZXZpb3VzIGZyYW1lIGFyZSByZXF1aXJlZCBvciBub3QuXG5cdCAqL1xuXHRuZWVkc1ByZXZpb3VzQm9uZU1hdHJpY2VzKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgbXJ0ID0gYnVpbGRlci5yZW5kZXJlci5nZXRNUlQoKTtcblxuXHRcdHJldHVybiAoIG1ydCAmJiBtcnQuaGFzKCAndmVsb2NpdHknICkgKSB8fCBnZXREYXRhRnJvbU9iamVjdCggYnVpbGRlci5vYmplY3QgKS51c2VWZWxvY2l0eSA9PT0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgc2tpbm5pbmcgbm9kZSBieSBhc3NpZ25pbmcgdGhlIHRyYW5zZm9ybWVkIHZlcnRleCBkYXRhIHRvIHByZWRlZmluZWQgbm9kZSB2YXJpYWJsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5uZWVkc1ByZXZpb3VzQm9uZU1hdHJpY2VzKCBidWlsZGVyICkgKSB7XG5cblx0XHRcdHBvc2l0aW9uUHJldmlvdXMuYXNzaWduKCB0aGlzLmdldFByZXZpb3VzU2tpbm5lZFBvc2l0aW9uKCBidWlsZGVyICkgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHNraW5Qb3NpdGlvbiA9IHRoaXMuZ2V0U2tpbm5lZFBvc2l0aW9uKCk7XG5cblxuXHRcdHBvc2l0aW9uTG9jYWwuYXNzaWduKCBza2luUG9zaXRpb24gKTtcblxuXHRcdGlmICggYnVpbGRlci5oYXNHZW9tZXRyeUF0dHJpYnV0ZSggJ25vcm1hbCcgKSApIHtcblxuXHRcdFx0Y29uc3Qgc2tpbk5vcm1hbCA9IHRoaXMuZ2V0U2tpbm5lZE5vcm1hbCgpO1xuXG5cdFx0XHRub3JtYWxMb2NhbC5hc3NpZ24oIHNraW5Ob3JtYWwgKTtcblxuXHRcdFx0aWYgKCBidWlsZGVyLmhhc0dlb21ldHJ5QXR0cmlidXRlKCAndGFuZ2VudCcgKSApIHtcblxuXHRcdFx0XHR0YW5nZW50TG9jYWwuYXNzaWduKCBza2luTm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgY29kZSBzbmlwcGV0IG9mIHRoZSBza2lubmluZyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gb3V0cHV0IC0gVGhlIGN1cnJlbnQgb3V0cHV0LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBnZW5lcmF0ZWQgY29kZSBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGUoIGJ1aWxkZXIsIG91dHB1dCApIHtcblxuXHRcdGlmICggb3V0cHV0ICE9PSAndm9pZCcgKSB7XG5cblx0XHRcdHJldHVybiBwb3NpdGlvbkxvY2FsLmJ1aWxkKCBidWlsZGVyLCBvdXRwdXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHN0YXRlIG9mIHRoZSBza2lubmVkIG1lc2ggYnkgdXBkYXRpbmcgdGhlIHNrZWxldG9uIG9uY2UgcGVyIGZyYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBUaGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlKCBmcmFtZSApIHtcblxuXHRcdGNvbnN0IG9iamVjdCA9IHRoaXMudXNlUmVmZXJlbmNlID8gZnJhbWUub2JqZWN0IDogdGhpcy5za2lubmVkTWVzaDtcblx0XHRjb25zdCBza2VsZXRvbiA9IG9iamVjdC5za2VsZXRvbjtcblxuXHRcdGlmICggX2ZyYW1lSWQuZ2V0KCBza2VsZXRvbiApID09PSBmcmFtZS5mcmFtZUlkICkgcmV0dXJuO1xuXG5cdFx0X2ZyYW1lSWQuc2V0KCBza2VsZXRvbiwgZnJhbWUuZnJhbWVJZCApO1xuXG5cdFx0aWYgKCB0aGlzLnByZXZpb3VzQm9uZU1hdHJpY2VzTm9kZSAhPT0gbnVsbCApIHNrZWxldG9uLnByZXZpb3VzQm9uZU1hdHJpY2VzLnNldCggc2tlbGV0b24uYm9uZU1hdHJpY2VzICk7XG5cblx0XHRza2VsZXRvbi51cGRhdGUoKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2tpbm5pbmdOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBza2lubmluZyBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTa2lubmVkTWVzaH0gc2tpbm5lZE1lc2ggLSBUaGUgc2tpbm5lZCBtZXNoLlxuICogQHJldHVybnMge1NraW5uaW5nTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHNraW5uaW5nID0gKCBza2lubmVkTWVzaCApID0+IG5vZGVPYmplY3QoIG5ldyBTa2lubmluZ05vZGUoIHNraW5uZWRNZXNoICkgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc2tpbm5pbmcgbm9kZSB3aXRoIHJlZmVyZW5jZSB1c2FnZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U2tpbm5lZE1lc2h9IHNraW5uZWRNZXNoIC0gVGhlIHNraW5uZWQgbWVzaC5cbiAqIEByZXR1cm5zIHtTa2lubmluZ05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBza2lubmluZ1JlZmVyZW5jZSA9ICggc2tpbm5lZE1lc2ggKSA9PiBub2RlT2JqZWN0KCBuZXcgU2tpbm5pbmdOb2RlKCBza2lubmVkTWVzaCwgdHJ1ZSApICk7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuaW1wb3J0IHsgZXhwcmVzc2lvbiB9IGZyb20gJy4uL2NvZGUvRXhwcmVzc2lvbk5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZU9iamVjdCwgbm9kZUFycmF5IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIG9mZmVycyBhIHZhcmlldHkgb2Ygd2F5cyB0byBpbXBsZW1lbnQgbG9vcHMgaW4gVFNMLiBJbiBpdCdzIGJhc2ljIGZvcm0gaXQnczpcbiAqIGBgYGpzXG4gKiBMb29wKCBjb3VudCwgKCB7IGkgfSApID0+IHtcbiAqXG4gKiB9ICk7XG4gKiBgYGBcbiAqIEhvd2V2ZXIsIGl0IGlzIGFsc28gcG9zc2libGUgdG8gZGVmaW5lIGEgc3RhcnQgYW5kIGVuZCByYW5nZXMsIGRhdGEgdHlwZXMgYW5kIGxvb3AgY29uZGl0aW9uczpcbiAqIGBgYGpzXG4gKiBMb29wKCB7IHN0YXJ0OiBpbnQoIDAgKSwgZW5kOiBpbnQoIDEwICksIHR5cGU6ICdpbnQnLCBjb25kaXRpb246ICc8JyB9LCAoIHsgaSB9ICkgPT4ge1xuICpcbiAqIH0gKTtcbiAqYGBgXG4gKiBOZXN0ZWQgbG9vcHMgY2FuIGJlIGRlZmluZWQgaW4gYSBjb21wYWN0ZWQgZm9ybTpcbiAqIGBgYGpzXG4gKiBMb29wKCAxMCwgNSwgKCB7IGksIGogfSApID0+IHtcbiAqXG4gKiB9ICk7XG4gKiBgYGBcbiAqIExvb3BzIHRoYXQgc2hvdWxkIHJ1biBiYWNrd2FyZHMgY2FuIGJlIGRlZmluZWQgbGlrZSBzbzpcbiAqIGBgYGpzXG4gKiBMb29wKCB7IHN0YXJ0OiAxMCB9LCAoKSA9PiB7fSApO1xuICogYGBgXG4gKiBUaGUgbW9kdWxlIGFsc28gcHJvdmlkZXMgYEJyZWFrKClgIGFuZCBgQ29udGludWUoKWAgVFNMIGV4cHJlc3Npb24gZm9yIGxvb3AgY29udHJvbC5cbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIExvb3BOb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdMb29wTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGxvb3Agbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxhbnk+fSBwYXJhbXMgLSBEZXBlbmRpbmcgb24gdGhlIGxvb3AgdHlwZSwgYXJyYXkgaG9sZHMgZGlmZmVyZW50IHBhcmFtZXRlcml6YXRpb24gdmFsdWVzIGZvciB0aGUgbG9vcC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbXMgPSBbXSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnBhcmFtcyA9IHBhcmFtcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBsb29wIHZhcmlhYmxlIG5hbWUgYmFzZWQgb24gYW4gaW5kZXguIFRoZSBwYXR0ZXJuIGlzXG5cdCAqIGAwYCA9IGBpYCwgYDFgPSBgamAsIGAyYD0gYGtgIGFuZCBzbyBvbi5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBsb29wIHZhcmlhYmxlIG5hbWUuXG5cdCAqL1xuXHRnZXRWYXJOYW1lKCBpbmRleCApIHtcblxuXHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKCAnaScuY2hhckNvZGVBdCggMCApICsgaW5kZXggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgcHJvcGVydGllcyBhYm91dCB0aGlzIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5vZGUgcHJvcGVydGllcy5cblx0ICovXG5cdGdldFByb3BlcnRpZXMoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBwcm9wZXJ0aWVzID0gYnVpbGRlci5nZXROb2RlUHJvcGVydGllcyggdGhpcyApO1xuXG5cdFx0aWYgKCBwcm9wZXJ0aWVzLnN0YWNrTm9kZSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIHByb3BlcnRpZXM7XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgaW5wdXRzID0ge307XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLnBhcmFtcy5sZW5ndGggLSAxOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcGFyYW0gPSB0aGlzLnBhcmFtc1sgaSBdO1xuXG5cdFx0XHRjb25zdCBuYW1lID0gKCBwYXJhbS5pc05vZGUgIT09IHRydWUgJiYgcGFyYW0ubmFtZSApIHx8IHRoaXMuZ2V0VmFyTmFtZSggaSApO1xuXHRcdFx0Y29uc3QgdHlwZSA9ICggcGFyYW0uaXNOb2RlICE9PSB0cnVlICYmIHBhcmFtLnR5cGUgKSB8fCAnaW50JztcblxuXHRcdFx0aW5wdXRzWyBuYW1lIF0gPSBleHByZXNzaW9uKCBuYW1lLCB0eXBlICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBzdGFjayA9IGJ1aWxkZXIuYWRkU3RhY2soKTsgLy8gVE9ETzogY2FjaGUoKSBpdFxuXG5cdFx0cHJvcGVydGllcy5yZXR1cm5zTm9kZSA9IHRoaXMucGFyYW1zWyB0aGlzLnBhcmFtcy5sZW5ndGggLSAxIF0oIGlucHV0cywgc3RhY2ssIGJ1aWxkZXIgKTtcblx0XHRwcm9wZXJ0aWVzLnN0YWNrTm9kZSA9IHN0YWNrO1xuXG5cdFx0YnVpbGRlci5yZW1vdmVTdGFjaygpO1xuXG5cdFx0cmV0dXJuIHByb3BlcnRpZXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzaW5jZSB0aGUgbm9kZSB0eXBlIGlzIGluZmVycmVkIGJhc2VkIG9uIHRoZSBsb29wIGNvbmZpZ3VyYXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyByZXR1cm5zTm9kZSB9ID0gdGhpcy5nZXRQcm9wZXJ0aWVzKCBidWlsZGVyICk7XG5cblx0XHRyZXR1cm4gcmV0dXJuc05vZGUgPyByZXR1cm5zTm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApIDogJ3ZvaWQnO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdC8vIHNldHVwIHByb3BlcnRpZXNcblxuXHRcdHRoaXMuZ2V0UHJvcGVydGllcyggYnVpbGRlciApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLmdldFByb3BlcnRpZXMoIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IHBhcmFtcyA9IHRoaXMucGFyYW1zO1xuXHRcdGNvbnN0IHN0YWNrTm9kZSA9IHByb3BlcnRpZXMuc3RhY2tOb2RlO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcGFyYW1zLmxlbmd0aCAtIDE7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwYXJhbSA9IHBhcmFtc1sgaSBdO1xuXG5cdFx0XHRsZXQgc3RhcnQgPSBudWxsLCBlbmQgPSBudWxsLCBuYW1lID0gbnVsbCwgdHlwZSA9IG51bGwsIGNvbmRpdGlvbiA9IG51bGwsIHVwZGF0ZSA9IG51bGw7XG5cblx0XHRcdGlmICggcGFyYW0uaXNOb2RlICkge1xuXG5cdFx0XHRcdHR5cGUgPSAnaW50Jztcblx0XHRcdFx0bmFtZSA9IHRoaXMuZ2V0VmFyTmFtZSggaSApO1xuXHRcdFx0XHRzdGFydCA9ICcwJztcblx0XHRcdFx0ZW5kID0gcGFyYW0uYnVpbGQoIGJ1aWxkZXIsIHR5cGUgKTtcblx0XHRcdFx0Y29uZGl0aW9uID0gJzwnO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHR5cGUgPSBwYXJhbS50eXBlIHx8ICdpbnQnO1xuXHRcdFx0XHRuYW1lID0gcGFyYW0ubmFtZSB8fCB0aGlzLmdldFZhck5hbWUoIGkgKTtcblx0XHRcdFx0c3RhcnQgPSBwYXJhbS5zdGFydDtcblx0XHRcdFx0ZW5kID0gcGFyYW0uZW5kO1xuXHRcdFx0XHRjb25kaXRpb24gPSBwYXJhbS5jb25kaXRpb247XG5cdFx0XHRcdHVwZGF0ZSA9IHBhcmFtLnVwZGF0ZTtcblxuXHRcdFx0XHRpZiAoIHR5cGVvZiBzdGFydCA9PT0gJ251bWJlcicgKSBzdGFydCA9IGJ1aWxkZXIuZ2VuZXJhdGVDb25zdCggdHlwZSwgc3RhcnQgKTtcblx0XHRcdFx0ZWxzZSBpZiAoIHN0YXJ0ICYmIHN0YXJ0LmlzTm9kZSApIHN0YXJ0ID0gc3RhcnQuYnVpbGQoIGJ1aWxkZXIsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGVvZiBlbmQgPT09ICdudW1iZXInICkgZW5kID0gYnVpbGRlci5nZW5lcmF0ZUNvbnN0KCB0eXBlLCBlbmQgKTtcblx0XHRcdFx0ZWxzZSBpZiAoIGVuZCAmJiBlbmQuaXNOb2RlICkgZW5kID0gZW5kLmJ1aWxkKCBidWlsZGVyLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCBzdGFydCAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0c3RhcnQgPSBzdGFydCArICcgLSAxJztcblx0XHRcdFx0XHRlbmQgPSAnMCc7XG5cdFx0XHRcdFx0Y29uZGl0aW9uID0gJz49JztcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBlbmQgIT09IHVuZGVmaW5lZCAmJiBzdGFydCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0c3RhcnQgPSAnMCc7XG5cdFx0XHRcdFx0Y29uZGl0aW9uID0gJzwnO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGNvbmRpdGlvbiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBOdW1iZXIoIHN0YXJ0ICkgPiBOdW1iZXIoIGVuZCApICkge1xuXG5cdFx0XHRcdFx0XHRjb25kaXRpb24gPSAnPj0nO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29uZGl0aW9uID0gJzwnO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBpbnRlcm5hbFBhcmFtID0geyBzdGFydCwgZW5kLCBjb25kaXRpb24gfTtcblxuXHRcdFx0Ly9cblxuXHRcdFx0Y29uc3Qgc3RhcnRTbmlwcGV0ID0gaW50ZXJuYWxQYXJhbS5zdGFydDtcblx0XHRcdGNvbnN0IGVuZFNuaXBwZXQgPSBpbnRlcm5hbFBhcmFtLmVuZDtcblxuXHRcdFx0bGV0IGRlY2xhcmF0aW9uU25pcHBldCA9ICcnO1xuXHRcdFx0bGV0IGNvbmRpdGlvbmFsU25pcHBldCA9ICcnO1xuXHRcdFx0bGV0IHVwZGF0ZVNuaXBwZXQgPSAnJztcblxuXHRcdFx0aWYgKCAhIHVwZGF0ZSApIHtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09ICdpbnQnIHx8IHR5cGUgPT09ICd1aW50JyApIHtcblxuXHRcdFx0XHRcdGlmICggY29uZGl0aW9uLmluY2x1ZGVzKCAnPCcgKSApIHVwZGF0ZSA9ICcrKyc7XG5cdFx0XHRcdFx0ZWxzZSB1cGRhdGUgPSAnLS0nO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvbmRpdGlvbi5pbmNsdWRlcyggJzwnICkgKSB1cGRhdGUgPSAnKz0gMS4nO1xuXHRcdFx0XHRcdGVsc2UgdXBkYXRlID0gJy09IDEuJztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVjbGFyYXRpb25TbmlwcGV0ICs9IGJ1aWxkZXIuZ2V0VmFyKCB0eXBlLCBuYW1lICkgKyAnID0gJyArIHN0YXJ0U25pcHBldDtcblxuXHRcdFx0Y29uZGl0aW9uYWxTbmlwcGV0ICs9IG5hbWUgKyAnICcgKyBjb25kaXRpb24gKyAnICcgKyBlbmRTbmlwcGV0O1xuXHRcdFx0dXBkYXRlU25pcHBldCArPSBuYW1lICsgJyAnICsgdXBkYXRlO1xuXG5cdFx0XHRjb25zdCBmb3JTbmlwcGV0ID0gYGZvciAoICR7IGRlY2xhcmF0aW9uU25pcHBldCB9OyAkeyBjb25kaXRpb25hbFNuaXBwZXQgfTsgJHsgdXBkYXRlU25pcHBldCB9IClgO1xuXG5cdFx0XHRidWlsZGVyLmFkZEZsb3dDb2RlKCAoIGkgPT09IDAgPyAnXFxuJyA6ICcnICkgKyBidWlsZGVyLnRhYiArIGZvclNuaXBwZXQgKyAnIHtcXG5cXG4nICkuYWRkRmxvd1RhYigpO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3RhY2tTbmlwcGV0ID0gc3RhY2tOb2RlLmJ1aWxkKCBidWlsZGVyLCAndm9pZCcgKTtcblxuXHRcdGNvbnN0IHJldHVybnNTbmlwcGV0ID0gcHJvcGVydGllcy5yZXR1cm5zTm9kZSA/IHByb3BlcnRpZXMucmV0dXJuc05vZGUuYnVpbGQoIGJ1aWxkZXIgKSA6ICcnO1xuXG5cdFx0YnVpbGRlci5yZW1vdmVGbG93VGFiKCkuYWRkRmxvd0NvZGUoICdcXG4nICsgYnVpbGRlci50YWIgKyBzdGFja1NuaXBwZXQgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMucGFyYW1zLmxlbmd0aCAtIDE7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRidWlsZGVyLmFkZEZsb3dDb2RlKCAoIGkgPT09IDAgPyAnJyA6IGJ1aWxkZXIudGFiICkgKyAnfVxcblxcbicgKS5yZW1vdmVGbG93VGFiKCk7XG5cblx0XHR9XG5cblx0XHRidWlsZGVyLmFkZEZsb3dUYWIoKTtcblxuXHRcdHJldHVybiByZXR1cm5zU25pcHBldDtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9vcE5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGxvb3Agbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Li4uYW55fSBwYXJhbXMgLSBBIGxpc3Qgb2YgcGFyYW1ldGVycy5cbiAqIEByZXR1cm5zIHtMb29wTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IExvb3AgPSAoIC4uLnBhcmFtcyApID0+IG5vZGVPYmplY3QoIG5ldyBMb29wTm9kZSggbm9kZUFycmF5KCBwYXJhbXMsICdpbnQnICkgKSApLmFwcGVuZCgpO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBgQ29udGludWUoKWAgZXhwcmVzc2lvbi5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9uTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IENvbnRpbnVlID0gKCkgPT4gZXhwcmVzc2lvbiggJ2NvbnRpbnVlJyApLmFwcGVuZCgpO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBgQnJlYWsoKWAgZXhwcmVzc2lvbi5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9uTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IEJyZWFrID0gKCkgPT4gZXhwcmVzc2lvbiggJ2JyZWFrJyApLmFwcGVuZCgpO1xuXG4vLyBEZXByZWNhdGVkXG5cbi8qKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSByMTY4LiBVc2Uge0BsaW5rIExvb3B9IGluc3RlYWQuXG4gKlxuICogQHBhcmFtICB7Li4uYW55fSBwYXJhbXNcbiAqIEByZXR1cm5zIHtMb29wTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGxvb3AgPSAoIC4uLnBhcmFtcyApID0+IHsgLy8gQGRlcHJlY2F0ZWQsIHIxNjhcblxuXHRjb25zb2xlLndhcm4oICdUU0wuTG9vcE5vZGU6IGxvb3AoKSBoYXMgYmVlbiByZW5hbWVkIHRvIExvb3AoKS4nICk7XG5cdHJldHVybiBMb29wKCAuLi5wYXJhbXMgKTtcblxufTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBOb2RlVXBkYXRlVHlwZSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGZsb2F0LCBub2RlUHJveHksIEZuLCBpdmVjMiwgaW50IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgdW5pZm9ybSB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybU5vZGUuanMnO1xuaW1wb3J0IHsgcmVmZXJlbmNlIH0gZnJvbSAnLi9SZWZlcmVuY2VOb2RlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uTG9jYWwgfSBmcm9tICcuL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IG5vcm1hbExvY2FsIH0gZnJvbSAnLi9Ob3JtYWwuanMnO1xuaW1wb3J0IHsgdGV4dHVyZUxvYWQgfSBmcm9tICcuL1RleHR1cmVOb2RlLmpzJztcbmltcG9ydCB7IGluc3RhbmNlSW5kZXgsIHZlcnRleEluZGV4IH0gZnJvbSAnLi4vY29yZS9JbmRleE5vZGUuanMnO1xuaW1wb3J0IHsgTG9vcCB9IGZyb20gJy4uL3V0aWxzL0xvb3BOb2RlLmpzJztcblxuaW1wb3J0IHsgRGF0YUFycmF5VGV4dHVyZSB9IGZyb20gJy4uLy4uL3RleHR1cmVzL0RhdGFBcnJheVRleHR1cmUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3I0LmpzJztcbmltcG9ydCB7IEZsb2F0VHlwZSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IF9tb3JwaFRleHR1cmVzID0gLypAX19QVVJFX18qLyBuZXcgV2Vha01hcCgpO1xuY29uc3QgX21vcnBoVmVjNCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjQoKTtcblxuY29uc3QgZ2V0TW9ycGggPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgYnVmZmVyTWFwLCBpbmZsdWVuY2UsIHN0cmlkZSwgd2lkdGgsIGRlcHRoLCBvZmZzZXQgfSApID0+IHtcblxuXHRjb25zdCB0ZXhlbEluZGV4ID0gaW50KCB2ZXJ0ZXhJbmRleCApLm11bCggc3RyaWRlICkuYWRkKCBvZmZzZXQgKTtcblxuXHRjb25zdCB5ID0gdGV4ZWxJbmRleC5kaXYoIHdpZHRoICk7XG5cdGNvbnN0IHggPSB0ZXhlbEluZGV4LnN1YiggeS5tdWwoIHdpZHRoICkgKTtcblxuXHRjb25zdCBidWZmZXJBdHRyaWIgPSB0ZXh0dXJlTG9hZCggYnVmZmVyTWFwLCBpdmVjMiggeCwgeSApICkuZGVwdGgoIGRlcHRoICk7XG5cblx0cmV0dXJuIGJ1ZmZlckF0dHJpYi5tdWwoIGluZmx1ZW5jZSApO1xuXG59ICk7XG5cbmZ1bmN0aW9uIGdldEVudHJ5KCBnZW9tZXRyeSApIHtcblxuXHRjb25zdCBoYXNNb3JwaFBvc2l0aW9uID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uICE9PSB1bmRlZmluZWQ7XG5cdGNvbnN0IGhhc01vcnBoTm9ybWFscyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZDtcblx0Y29uc3QgaGFzTW9ycGhDb2xvcnMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZDtcblxuXHQvLyBpbnN0ZWFkIG9mIHVzaW5nIGF0dHJpYnV0ZXMsIHRoZSBXZWJHTCAyIGNvZGUgcGF0aCBlbmNvZGVzIG1vcnBoIHRhcmdldHNcblx0Ly8gaW50byBhbiBhcnJheSBvZiBkYXRhIHRleHR1cmVzLiBFYWNoIGxheWVyIHJlcHJlc2VudHMgYSBzaW5nbGUgbW9ycGggdGFyZ2V0LlxuXG5cdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXHRjb25zdCBtb3JwaFRhcmdldHNDb3VudCA9ICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApID8gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoIDogMDtcblxuXHRsZXQgZW50cnkgPSBfbW9ycGhUZXh0dXJlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0aWYgKCBlbnRyeSA9PT0gdW5kZWZpbmVkIHx8IGVudHJ5LmNvdW50ICE9PSBtb3JwaFRhcmdldHNDb3VudCApIHtcblxuXHRcdGlmICggZW50cnkgIT09IHVuZGVmaW5lZCApIGVudHJ5LnRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IFtdO1xuXHRcdGNvbnN0IG1vcnBoTm9ybWFscyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgW107XG5cdFx0Y29uc3QgbW9ycGhDb2xvcnMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgfHwgW107XG5cblx0XHRsZXQgdmVydGV4RGF0YUNvdW50ID0gMDtcblxuXHRcdGlmICggaGFzTW9ycGhQb3NpdGlvbiA9PT0gdHJ1ZSApIHZlcnRleERhdGFDb3VudCA9IDE7XG5cdFx0aWYgKCBoYXNNb3JwaE5vcm1hbHMgPT09IHRydWUgKSB2ZXJ0ZXhEYXRhQ291bnQgPSAyO1xuXHRcdGlmICggaGFzTW9ycGhDb2xvcnMgPT09IHRydWUgKSB2ZXJ0ZXhEYXRhQ291bnQgPSAzO1xuXG5cdFx0bGV0IHdpZHRoID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5jb3VudCAqIHZlcnRleERhdGFDb3VudDtcblx0XHRsZXQgaGVpZ2h0ID0gMTtcblxuXHRcdGNvbnN0IG1heFRleHR1cmVTaXplID0gNDA5NjsgLy8gQFRPRE86IFVzZSAnY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplJ1xuXG5cdFx0aWYgKCB3aWR0aCA+IG1heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRoZWlnaHQgPSBNYXRoLmNlaWwoIHdpZHRoIC8gbWF4VGV4dHVyZVNpemUgKTtcblx0XHRcdHdpZHRoID0gbWF4VGV4dHVyZVNpemU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBidWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCB3aWR0aCAqIGhlaWdodCAqIDQgKiBtb3JwaFRhcmdldHNDb3VudCApO1xuXG5cdFx0Y29uc3QgYnVmZmVyVGV4dHVyZSA9IG5ldyBEYXRhQXJyYXlUZXh0dXJlKCBidWZmZXIsIHdpZHRoLCBoZWlnaHQsIG1vcnBoVGFyZ2V0c0NvdW50ICk7XG5cdFx0YnVmZmVyVGV4dHVyZS50eXBlID0gRmxvYXRUeXBlO1xuXHRcdGJ1ZmZlclRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0Ly8gZmlsbCBidWZmZXJcblxuXHRcdGNvbnN0IHZlcnRleERhdGFTdHJpZGUgPSB2ZXJ0ZXhEYXRhQ291bnQgKiA0O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbW9ycGhUYXJnZXRzQ291bnQ7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XG5cdFx0XHRjb25zdCBtb3JwaE5vcm1hbCA9IG1vcnBoTm9ybWFsc1sgaSBdO1xuXHRcdFx0Y29uc3QgbW9ycGhDb2xvciA9IG1vcnBoQ29sb3JzWyBpIF07XG5cblx0XHRcdGNvbnN0IG9mZnNldCA9IHdpZHRoICogaGVpZ2h0ICogNCAqIGk7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IG1vcnBoVGFyZ2V0LmNvdW50OyBqICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHN0cmlkZSA9IGogKiB2ZXJ0ZXhEYXRhU3RyaWRlO1xuXG5cdFx0XHRcdGlmICggaGFzTW9ycGhQb3NpdGlvbiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdF9tb3JwaFZlYzQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhUYXJnZXQsIGogKTtcblxuXHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMCBdID0gX21vcnBoVmVjNC54O1xuXHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMSBdID0gX21vcnBoVmVjNC55O1xuXHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMiBdID0gX21vcnBoVmVjNC56O1xuXHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMyBdID0gMDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBoYXNNb3JwaE5vcm1hbHMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRfbW9ycGhWZWM0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoTm9ybWFsLCBqICk7XG5cblx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDQgXSA9IF9tb3JwaFZlYzQueDtcblx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDUgXSA9IF9tb3JwaFZlYzQueTtcblx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDYgXSA9IF9tb3JwaFZlYzQuejtcblx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDcgXSA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggaGFzTW9ycGhDb2xvcnMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRfbW9ycGhWZWM0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQ29sb3IsIGogKTtcblxuXHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgOCBdID0gX21vcnBoVmVjNC54O1xuXHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgOSBdID0gX21vcnBoVmVjNC55O1xuXHRcdFx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsgc3RyaWRlICsgMTAgXSA9IF9tb3JwaFZlYzQuejtcblx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDExIF0gPSAoIG1vcnBoQ29sb3IuaXRlbVNpemUgPT09IDQgKSA/IF9tb3JwaFZlYzQudyA6IDE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRlbnRyeSA9IHtcblx0XHRcdGNvdW50OiBtb3JwaFRhcmdldHNDb3VudCxcblx0XHRcdHRleHR1cmU6IGJ1ZmZlclRleHR1cmUsXG5cdFx0XHRzdHJpZGU6IHZlcnRleERhdGFDb3VudCxcblx0XHRcdHNpemU6IG5ldyBWZWN0b3IyKCB3aWR0aCwgaGVpZ2h0IClcblx0XHR9O1xuXG5cdFx0X21vcnBoVGV4dHVyZXMuc2V0KCBnZW9tZXRyeSwgZW50cnkgKTtcblxuXHRcdGZ1bmN0aW9uIGRpc3Bvc2VUZXh0dXJlKCkge1xuXG5cdFx0XHRidWZmZXJUZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdFx0X21vcnBoVGV4dHVyZXMuZGVsZXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0XHRnZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VUZXh0dXJlICk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VUZXh0dXJlICk7XG5cblx0fVxuXG5cdHJldHVybiBlbnRyeTtcblxufVxuXG4vKipcbiAqIFRoaXMgbm9kZSBpbXBsZW1lbnRzIHRoZSB2ZXJ0ZXggdHJhbnNmb3JtYXRpb24gc2hhZGVyIGxvZ2ljIHdoaWNoIGlzIHJlcXVpcmVkXG4gKiBmb3IgbW9ycGggdGFyZ2V0IGFuaW1hdGlvbi5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBNb3JwaE5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ01vcnBoTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1vcnBoIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWVzaH0gbWVzaCAtIFRoZSBtZXNoIGhvbGRpbmcgdGhlIG1vcnBoIHRhcmdldHMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWVzaCApIHtcblxuXHRcdHN1cGVyKCAndm9pZCcgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBtZXNoIGhvbGRpbmcgdGhlIG1vcnBoIHRhcmdldHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7TWVzaH1cblx0XHQgKi9cblx0XHR0aGlzLm1lc2ggPSBtZXNoO1xuXG5cdFx0LyoqXG5cdFx0ICogQSB1bmlmb3JtIG5vZGUgd2hpY2ggcmVwcmVzZW50cyB0aGUgbW9ycGggYmFzZSBpbmZsdWVuY2UgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGU8ZmxvYXQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMubW9ycGhCYXNlSW5mbHVlbmNlID0gdW5pZm9ybSggMSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVwZGF0ZSB0eXBlIG92ZXJ3cml0dGVuIHNpbmNlIG1vcnBoIG5vZGVzIGFyZSB1cGRhdGVkIHBlciBvYmplY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMudXBkYXRlVHlwZSA9IE5vZGVVcGRhdGVUeXBlLk9CSkVDVDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgbW9ycGggbm9kZSBieSBhc3NpZ25pbmcgdGhlIHRyYW5zZm9ybWVkIHZlcnRleCBkYXRhIHRvIHByZWRlZmluZWQgbm9kZSB2YXJpYWJsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgZ2VvbWV0cnkgfSA9IGJ1aWxkZXI7XG5cblx0XHRjb25zdCBoYXNNb3JwaFBvc2l0aW9uID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uICE9PSB1bmRlZmluZWQ7XG5cdFx0Y29uc3QgaGFzTW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkuaGFzQXR0cmlidXRlKCAnbm9ybWFsJyApICYmIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZDtcblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXHRcdGNvbnN0IG1vcnBoVGFyZ2V0c0NvdW50ID0gKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkgPyBtb3JwaEF0dHJpYnV0ZS5sZW5ndGggOiAwO1xuXG5cdFx0Ly8gbm9kZXNcblxuXHRcdGNvbnN0IHsgdGV4dHVyZTogYnVmZmVyTWFwLCBzdHJpZGUsIHNpemUgfSA9IGdldEVudHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBoYXNNb3JwaFBvc2l0aW9uID09PSB0cnVlICkgcG9zaXRpb25Mb2NhbC5tdWxBc3NpZ24oIHRoaXMubW9ycGhCYXNlSW5mbHVlbmNlICk7XG5cdFx0aWYgKCBoYXNNb3JwaE5vcm1hbHMgPT09IHRydWUgKSBub3JtYWxMb2NhbC5tdWxBc3NpZ24oIHRoaXMubW9ycGhCYXNlSW5mbHVlbmNlICk7XG5cblx0XHRjb25zdCB3aWR0aCA9IGludCggc2l6ZS53aWR0aCApO1xuXG5cdFx0TG9vcCggbW9ycGhUYXJnZXRzQ291bnQsICggeyBpIH0gKSA9PiB7XG5cblx0XHRcdGNvbnN0IGluZmx1ZW5jZSA9IGZsb2F0KCAwICkudG9WYXIoKTtcblxuXHRcdFx0aWYgKCB0aGlzLm1lc2guY291bnQgPiAxICYmICggdGhpcy5tZXNoLm1vcnBoVGV4dHVyZSAhPT0gbnVsbCAmJiB0aGlzLm1lc2gubW9ycGhUZXh0dXJlICE9PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0XHRpbmZsdWVuY2UuYXNzaWduKCB0ZXh0dXJlTG9hZCggdGhpcy5tZXNoLm1vcnBoVGV4dHVyZSwgaXZlYzIoIGludCggaSApLmFkZCggMSApLCBpbnQoIGluc3RhbmNlSW5kZXggKSApICkuciApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGluZmx1ZW5jZS5hc3NpZ24oIHJlZmVyZW5jZSggJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsICdmbG9hdCcgKS5lbGVtZW50KCBpICkudG9WYXIoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzTW9ycGhQb3NpdGlvbiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRwb3NpdGlvbkxvY2FsLmFkZEFzc2lnbiggZ2V0TW9ycGgoIHtcblx0XHRcdFx0XHRidWZmZXJNYXAsXG5cdFx0XHRcdFx0aW5mbHVlbmNlLFxuXHRcdFx0XHRcdHN0cmlkZSxcblx0XHRcdFx0XHR3aWR0aCxcblx0XHRcdFx0XHRkZXB0aDogaSxcblx0XHRcdFx0XHRvZmZzZXQ6IGludCggMCApXG5cdFx0XHRcdH0gKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzTW9ycGhOb3JtYWxzID09PSB0cnVlICkge1xuXG5cdFx0XHRcdG5vcm1hbExvY2FsLmFkZEFzc2lnbiggZ2V0TW9ycGgoIHtcblx0XHRcdFx0XHRidWZmZXJNYXAsXG5cdFx0XHRcdFx0aW5mbHVlbmNlLFxuXHRcdFx0XHRcdHN0cmlkZSxcblx0XHRcdFx0XHR3aWR0aCxcblx0XHRcdFx0XHRkZXB0aDogaSxcblx0XHRcdFx0XHRvZmZzZXQ6IGludCggMSApXG5cdFx0XHRcdH0gKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgbW9ycGhlZCBtZXNoIGJ5IHVwZGF0aW5nIHRoZSBiYXNlIGluZmx1ZW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlRnJhbWV9IGZyYW1lIC0gVGhlIGN1cnJlbnQgbm9kZSBmcmFtZS5cblx0ICovXG5cdHVwZGF0ZSggLypmcmFtZSovICkge1xuXG5cdFx0Y29uc3QgbW9ycGhCYXNlSW5mbHVlbmNlID0gdGhpcy5tb3JwaEJhc2VJbmZsdWVuY2U7XG5cblx0XHRpZiAoIHRoaXMubWVzaC5nZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcblxuXHRcdFx0bW9ycGhCYXNlSW5mbHVlbmNlLnZhbHVlID0gMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1vcnBoQmFzZUluZmx1ZW5jZS52YWx1ZSA9IDEgLSB0aGlzLm1lc2gubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnJlZHVjZSggKCBhLCBiICkgPT4gYSArIGIsIDAgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9ycGhOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBtb3JwaCBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtNZXNofSBtZXNoIC0gVGhlIG1lc2ggaG9sZGluZyB0aGUgbW9ycGggdGFyZ2V0cy5cbiAqIEByZXR1cm5zIHtNb3JwaE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBtb3JwaFJlZmVyZW5jZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBNb3JwaE5vZGUgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgbGlnaHRpbmcgbm9kZXMuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgTGlnaHRpbmdOb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdMaWdodGluZ05vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsaWdodGluZyBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlciggJ3ZlYzMnICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzTGlnaHRpbmdOb2RlID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlnaHRpbmdOb2RlO1xuIiwiaW1wb3J0IExpZ2h0aW5nTm9kZSBmcm9tICcuL0xpZ2h0aW5nTm9kZS5qcyc7XG5cbi8qKlxuICogQSBnZW5lcmljIGNsYXNzIHRoYXQgY2FuIGJlIHVzZWQgYnkgbm9kZXMgd2hpY2ggY29udHJpYnV0ZVxuICogYW1iaWVudCBvY2NsdXNpb24gdG8gdGhlIHNjZW5lLiBFLmcuIGFuIGFtYmllbnQgb2NjbHVzaW9uIG1hcFxuICogbm9kZSBjYW4gYmUgdXNlZCBhcyBpbnB1dCBmb3IgdGhpcyBtb2R1bGUuIFVzZWQgaW4ge0BsaW5rIE5vZGVNYXRlcmlhbH0uXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0aW5nTm9kZVxuICovXG5jbGFzcyBBT05vZGUgZXh0ZW5kcyBMaWdodGluZ05vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnQU9Ob2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgQU8gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHs/Tm9kZTxmbG9hdD59IFthb05vZGU9bnVsbF0gLSBUaGUgYW1iaWVudCBvY2NsdXNpb24gbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBhb05vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbWJpZW50IG9jY2x1c2lvbiBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5hb05vZGUgPSBhb05vZGU7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0YnVpbGRlci5jb250ZXh0LmFtYmllbnRPY2NsdXNpb24ubXVsQXNzaWduKCB0aGlzLmFvTm9kZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBT05vZGU7XG4iLCJpbXBvcnQgQ29udGV4dE5vZGUgZnJvbSAnLi4vY29yZS9Db250ZXh0Tm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHksIGZsb2F0LCB2ZWMzIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIGBMaWdodGluZ0NvbnRleHROb2RlYCByZXByZXNlbnRzIGFuIGV4dGVuc2lvbiBvZiB0aGUge0BsaW5rIENvbnRleHROb2RlfSBtb2R1bGVcbiAqIGJ5IGFkZGluZyBsaWdodGluZyBzcGVjaWZpYyBjb250ZXh0IGRhdGEuIEl0IHJlcHJlc2VudHMgdGhlIHJ1bnRpbWUgY29udGV4dCBvZlxuICoge0BsaW5rIExpZ2h0c05vZGV9LlxuICpcbiAqIEBhdWdtZW50cyBDb250ZXh0Tm9kZVxuICovXG5jbGFzcyBMaWdodGluZ0NvbnRleHROb2RlIGV4dGVuZHMgQ29udGV4dE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTGlnaHRpbmdDb250ZXh0Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGxpZ2h0aW5nIGNvbnRleHQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtMaWdodHNOb2RlfSBsaWdodHNOb2RlIC0gVGhlIGxpZ2h0cyBub2RlLlxuXHQgKiBAcGFyYW0gez9MaWdodGluZ01vZGVsfSBbbGlnaHRpbmdNb2RlbD1udWxsXSAtIFRoZSBjdXJyZW50IGxpZ2h0aW5nIG1vZGVsLlxuXHQgKiBAcGFyYW0gez9Ob2RlPHZlYzM+fSBbYmFja2Ryb3BOb2RlPW51bGxdIC0gQSBiYWNrZHJvcCBub2RlLlxuXHQgKiBAcGFyYW0gez9Ob2RlPGZsb2F0Pn0gW2JhY2tkcm9wQWxwaGFOb2RlPW51bGxdIC0gQSBiYWNrZHJvcCBhbHBoYSBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpZ2h0c05vZGUsIGxpZ2h0aW5nTW9kZWwgPSBudWxsLCBiYWNrZHJvcE5vZGUgPSBudWxsLCBiYWNrZHJvcEFscGhhTm9kZSA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggbGlnaHRzTm9kZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgbGlnaHRpbmcgbW9kZWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0xpZ2h0aW5nTW9kZWx9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRpbmdNb2RlbCA9IGxpZ2h0aW5nTW9kZWw7XG5cblx0XHQvKipcblx0XHQgKiBBIGJhY2tkcm9wIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2Ryb3BOb2RlID0gYmFja2Ryb3BOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBiYWNrZHJvcCBhbHBoYSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5iYWNrZHJvcEFscGhhTm9kZSA9IGJhY2tkcm9wQWxwaGFOb2RlO1xuXG5cdFx0dGhpcy5fdmFsdWUgPSBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGxpZ2h0aW5nIGNvbnRleHQgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHt7XG5cdCAqIHJhZGlhbmNlOiBOb2RlPHZlYzM+LFxuXHQgKiBpcnJhZGlhbmNlOiBOb2RlPHZlYzM+LFxuXHQgKiBpYmxJcnJhZGlhbmNlOiBOb2RlPHZlYzM+LFxuXHQgKiBhbWJpZW50T2NjbHVzaW9uOiBOb2RlPGZsb2F0Pixcblx0ICogcmVmbGVjdGVkTGlnaHQ6IHtkaXJlY3REaWZmdXNlOiBOb2RlPHZlYzM+LCBkaXJlY3RTcGVjdWxhcjogTm9kZTx2ZWMzPiwgaW5kaXJlY3REaWZmdXNlOiBOb2RlPHZlYzM+LCBpbmRpcmVjdFNwZWN1bGFyOiBOb2RlPHZlYzM+fSxcblx0ICogYmFja2Ryb3A6IE5vZGU8dmVjMz4sXG5cdCAqIGJhY2tkcm9wQWxwaGE6IE5vZGU8ZmxvYXQ+XG5cdCAqIH19IFRoZSBsaWdodGluZyBjb250ZXh0IG9iamVjdC5cblx0ICovXG5cdGdldENvbnRleHQoKSB7XG5cblx0XHRjb25zdCB7IGJhY2tkcm9wTm9kZSwgYmFja2Ryb3BBbHBoYU5vZGUgfSA9IHRoaXM7XG5cblx0XHRjb25zdCBkaXJlY3REaWZmdXNlID0gdmVjMygpLnRvVmFyKCAnZGlyZWN0RGlmZnVzZScgKSxcblx0XHRcdGRpcmVjdFNwZWN1bGFyID0gdmVjMygpLnRvVmFyKCAnZGlyZWN0U3BlY3VsYXInICksXG5cdFx0XHRpbmRpcmVjdERpZmZ1c2UgPSB2ZWMzKCkudG9WYXIoICdpbmRpcmVjdERpZmZ1c2UnICksXG5cdFx0XHRpbmRpcmVjdFNwZWN1bGFyID0gdmVjMygpLnRvVmFyKCAnaW5kaXJlY3RTcGVjdWxhcicgKTtcblxuXHRcdGNvbnN0IHJlZmxlY3RlZExpZ2h0ID0ge1xuXHRcdFx0ZGlyZWN0RGlmZnVzZSxcblx0XHRcdGRpcmVjdFNwZWN1bGFyLFxuXHRcdFx0aW5kaXJlY3REaWZmdXNlLFxuXHRcdFx0aW5kaXJlY3RTcGVjdWxhclxuXHRcdH07XG5cblx0XHRjb25zdCBjb250ZXh0ID0ge1xuXHRcdFx0cmFkaWFuY2U6IHZlYzMoKS50b1ZhciggJ3JhZGlhbmNlJyApLFxuXHRcdFx0aXJyYWRpYW5jZTogdmVjMygpLnRvVmFyKCAnaXJyYWRpYW5jZScgKSxcblx0XHRcdGlibElycmFkaWFuY2U6IHZlYzMoKS50b1ZhciggJ2libElycmFkaWFuY2UnICksXG5cdFx0XHRhbWJpZW50T2NjbHVzaW9uOiBmbG9hdCggMSApLnRvVmFyKCAnYW1iaWVudE9jY2x1c2lvbicgKSxcblx0XHRcdHJlZmxlY3RlZExpZ2h0LFxuXHRcdFx0YmFja2Ryb3A6IGJhY2tkcm9wTm9kZSxcblx0XHRcdGJhY2tkcm9wQWxwaGE6IGJhY2tkcm9wQWxwaGFOb2RlXG5cdFx0fTtcblxuXHRcdHJldHVybiBjb250ZXh0O1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdHRoaXMudmFsdWUgPSB0aGlzLl92YWx1ZSB8fCAoIHRoaXMuX3ZhbHVlID0gdGhpcy5nZXRDb250ZXh0KCkgKTtcblx0XHR0aGlzLnZhbHVlLmxpZ2h0aW5nTW9kZWwgPSB0aGlzLmxpZ2h0aW5nTW9kZWwgfHwgYnVpbGRlci5jb250ZXh0LmxpZ2h0aW5nTW9kZWw7XG5cblx0XHRyZXR1cm4gc3VwZXIuc2V0dXAoIGJ1aWxkZXIgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlnaHRpbmdDb250ZXh0Tm9kZTtcblxuZXhwb3J0IGNvbnN0IGxpZ2h0aW5nQ29udGV4dCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBMaWdodGluZ0NvbnRleHROb2RlICk7XG4iLCJpbXBvcnQgTGlnaHRpbmdOb2RlIGZyb20gJy4vTGlnaHRpbmdOb2RlLmpzJztcblxuLyoqXG4gKiBBIGdlbmVyaWMgY2xhc3MgdGhhdCBjYW4gYmUgdXNlZCBieSBub2RlcyB3aGljaCBjb250cmlidXRlXG4gKiBpcnJhZGlhbmNlIHRvIHRoZSBzY2VuZS4gRS5nLiBhIGxpZ2h0IG1hcCBub2RlIGNhbiBiZSB1c2VkXG4gKiBhcyBpbnB1dCBmb3IgdGhpcyBtb2R1bGUuIFVzZWQgaW4ge0BsaW5rIE5vZGVNYXRlcmlhbH0uXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0aW5nTm9kZVxuICovXG5jbGFzcyBJcnJhZGlhbmNlTm9kZSBleHRlbmRzIExpZ2h0aW5nTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdJcnJhZGlhbmNlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGlycmFkaWFuY2Ugbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlPHZlYzM+fSBub2RlIC0gQSBub2RlIGNvbnRyaWJ1dGluZyBpcnJhZGlhbmNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5vZGUgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBub2RlIGNvbnRyaWJ1dGluZyBpcnJhZGlhbmNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGU8dmVjMz59XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlID0gbm9kZTtcblxuXHR9XG5cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRidWlsZGVyLmNvbnRleHQuaXJyYWRpYW5jZS5hZGRBc3NpZ24oIHRoaXMubm9kZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBJcnJhZGlhbmNlTm9kZTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBOb2RlVXBkYXRlVHlwZSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IHVuaWZvcm0gfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Ob2RlLmpzJztcbmltcG9ydCB7IEZuLCBub2RlSW1tdXRhYmxlLCB2ZWMyIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjQuanMnO1xuXG5sZXQgc2NyZWVuU2l6ZVZlYywgdmlld3BvcnRWZWM7XG5cbi8qKlxuICogVGhpcyBub2RlIHByb3ZpZGVzIGEgY29sbGVjdGlvbiBvZiBzY3JlZW4gcmVsYXRlZCBtZXRyaWNzLlxuICogRGVwZW5kaW5nIG9uIHtAbGluayBTY3JlZW5Ob2RlI3Njb3BlfSwgdGhlIG5vZGVzIGNhbiByZXByZXNlbnRcbiAqIHJlc29sdXRpb24gb3Igdmlld3BvcnQgZGF0YSBhcyB3ZWxsIGFzIGZyYWdtZW50IG9yIHV2IGNvb3JkaW5hdGVzLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFNjcmVlbk5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1NjcmVlbk5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzY3JlZW4gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHsoJ2Nvb3JkaW5hdGUnfCd2aWV3cG9ydCd8J3NpemUnfCd1dicpfSBzY29wZSAtIFRoZSBub2RlJ3Mgc2NvcGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggc2NvcGUgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgcmVwcmVzZW50cyBkaWZmZXJlbnQgbWV0cmljIGRlcGVuZGluZyBvbiB3aGljaCBzY29wZSBpcyBzZWxlY3RlZC5cblx0XHQgKlxuXHRcdCAqIC0gYFNjcmVlbk5vZGUuQ09PUkRJTkFURWA6IFdpbmRvdy1yZWxhdGl2ZSBjb29yZGluYXRlcyBvZiB0aGUgY3VycmVudCBmcmFnbWVudCBhY2NvcmRpbmcgdG8gV2ViR1BVIHN0YW5kYXJkcy5cblx0XHQgKiAtIGBTY3JlZW5Ob2RlLlZJRVdQT1JUYDogVGhlIGN1cnJlbnQgdmlld3BvcnQgZGVmaW5lZCBhcyBhIGZvdXItZGltZW5zaW9uYWwgdmVjdG9yLlxuXHRcdCAqIC0gYFNjcmVlbk5vZGUuU0laRWA6IFRoZSBkaW1lbnNpb25zIG9mIHRoZSBjdXJyZW50IGJvdW5kIGZyYW1lYnVmZmVyLlxuXHRcdCAqIC0gYFNjcmVlbk5vZGUuVVZgOiBOb3JtYWxpemVkIGNvb3JkaW5hdGVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeygnY29vcmRpbmF0ZSd8J3ZpZXdwb3J0J3wnc2l6ZSd8J3V2Jyl9XG5cdFx0ICovXG5cdFx0dGhpcy5zY29wZSA9IHNjb3BlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1ZpZXdwb3J0Tm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzaW5jZSB0aGUgbm9kZSB0eXBlIGRlcGVuZHMgb24gdGhlIHNlbGVjdGVkIHNjb3BlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHsoJ3ZlYzInfCd2ZWM0Jyl9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSgpIHtcblxuXHRcdGlmICggdGhpcy5zY29wZSA9PT0gU2NyZWVuTm9kZS5WSUVXUE9SVCApIHJldHVybiAndmVjNCc7XG5cdFx0ZWxzZSByZXR1cm4gJ3ZlYzInO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgb3ZlcndyaXR0ZW4gc2luY2UgdGhlIG5vZGUncyB1cGRhdGUgdHlwZSBkZXBlbmRzIG9uIHRoZSBzZWxlY3RlZCBzY29wZS5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZVVwZGF0ZVR5cGV9IFRoZSB1cGRhdGUgdHlwZS5cblx0ICovXG5cdGdldFVwZGF0ZVR5cGUoKSB7XG5cblx0XHRsZXQgdXBkYXRlVHlwZSA9IE5vZGVVcGRhdGVUeXBlLk5PTkU7XG5cblx0XHRpZiAoIHRoaXMuc2NvcGUgPT09IFNjcmVlbk5vZGUuU0laRSB8fCB0aGlzLnNjb3BlID09PSBTY3JlZW5Ob2RlLlZJRVdQT1JUICkge1xuXG5cdFx0XHR1cGRhdGVUeXBlID0gTm9kZVVwZGF0ZVR5cGUuUkVOREVSO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVUeXBlID0gdXBkYXRlVHlwZTtcblxuXHRcdHJldHVybiB1cGRhdGVUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogYFNjcmVlbk5vZGVgIGltcGxlbWVudHMge0BsaW5rIE5vZGUjdXBkYXRlfSB0byByZXRyaWV2ZSB2aWV3cG9ydCBhbmQgc2l6ZSBpbmZvcm1hdGlvblxuXHQgKiBmcm9tIHRoZSBjdXJyZW50IHJlbmRlcmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlKCB7IHJlbmRlcmVyIH0gKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHRcdGlmICggdGhpcy5zY29wZSA9PT0gU2NyZWVuTm9kZS5WSUVXUE9SVCApIHtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmlld3BvcnRWZWMuY29weSggcmVuZGVyVGFyZ2V0LnZpZXdwb3J0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuZ2V0Vmlld3BvcnQoIHZpZXdwb3J0VmVjICk7XG5cblx0XHRcdFx0dmlld3BvcnRWZWMubXVsdGlwbHlTY2FsYXIoIHJlbmRlcmVyLmdldFBpeGVsUmF0aW8oKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRzY3JlZW5TaXplVmVjLndpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0XHRzY3JlZW5TaXplVmVjLmhlaWdodCA9IHJlbmRlclRhcmdldC5oZWlnaHQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuZ2V0RHJhd2luZ0J1ZmZlclNpemUoIHNjcmVlblNpemVWZWMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXR1cCggLypidWlsZGVyKi8gKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXMuc2NvcGU7XG5cblx0XHRsZXQgb3V0cHV0ID0gbnVsbDtcblxuXHRcdGlmICggc2NvcGUgPT09IFNjcmVlbk5vZGUuU0laRSApIHtcblxuXHRcdFx0b3V0cHV0ID0gdW5pZm9ybSggc2NyZWVuU2l6ZVZlYyB8fCAoIHNjcmVlblNpemVWZWMgPSBuZXcgVmVjdG9yMigpICkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBTY3JlZW5Ob2RlLlZJRVdQT1JUICkge1xuXG5cdFx0XHRvdXRwdXQgPSB1bmlmb3JtKCB2aWV3cG9ydFZlYyB8fCAoIHZpZXdwb3J0VmVjID0gbmV3IFZlY3RvcjQoKSApICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRvdXRwdXQgPSB2ZWMyKCBzY3JlZW5Db29yZGluYXRlLmRpdiggc2NyZWVuU2l6ZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5zY29wZSA9PT0gU2NyZWVuTm9kZS5DT09SRElOQVRFICkge1xuXG5cdFx0XHRsZXQgY29vcmQgPSBidWlsZGVyLmdldEZyYWdDb29yZCgpO1xuXG5cdFx0XHRpZiAoIGJ1aWxkZXIuaXNGbGlwWSgpICkge1xuXG5cdFx0XHRcdC8vIGZvbGxvdyB3ZWJncHUgc3RhbmRhcmRzXG5cblx0XHRcdFx0Y29uc3Qgc2l6ZSA9IGJ1aWxkZXIuZ2V0Tm9kZVByb3BlcnRpZXMoIHNjcmVlblNpemUgKS5vdXRwdXROb2RlLmJ1aWxkKCBidWlsZGVyICk7XG5cblx0XHRcdFx0Y29vcmQgPSBgJHsgYnVpbGRlci5nZXRUeXBlKCAndmVjMicgKSB9KCAkeyBjb29yZCB9LngsICR7IHNpemUgfS55IC0gJHsgY29vcmQgfS55IClgO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjb29yZDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzdXBlci5nZW5lcmF0ZSggYnVpbGRlciApO1xuXG5cdH1cblxufVxuXG5TY3JlZW5Ob2RlLkNPT1JESU5BVEUgPSAnY29vcmRpbmF0ZSc7XG5TY3JlZW5Ob2RlLlZJRVdQT1JUID0gJ3ZpZXdwb3J0JztcblNjcmVlbk5vZGUuU0laRSA9ICdzaXplJztcblNjcmVlbk5vZGUuVVYgPSAndXYnO1xuXG5leHBvcnQgZGVmYXVsdCBTY3JlZW5Ob2RlO1xuXG4vLyBTY3JlZW5cblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyBub3JtYWxpemVkIHNjcmVlbiBjb29yZGluYXRlcywgdW5pdGxlc3MgaW4gYFswLCAxXWAuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1NjcmVlbk5vZGU8dmVjMj59XG4gKi9cbmV4cG9ydCBjb25zdCBzY3JlZW5VViA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggU2NyZWVuTm9kZSwgU2NyZWVuTm9kZS5VViApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzY3JlZW4gcmVzb2x1dGlvbiBpbiBwaHlzaWNhbCBwaXhlbCB1bml0cy5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7U2NyZWVuTm9kZTx2ZWMyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHNjcmVlblNpemUgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFNjcmVlbk5vZGUsIFNjcmVlbk5vZGUuU0laRSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IGB4YC9geWAgcGl4ZWwgcG9zaXRpb24gb24gdGhlIHNjcmVlbiBpbiBwaHlzaWNhbCBwaXhlbCB1bml0cy5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7U2NyZWVuTm9kZTx2ZWMyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHNjcmVlbkNvb3JkaW5hdGUgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFNjcmVlbk5vZGUsIFNjcmVlbk5vZGUuQ09PUkRJTkFURSApO1xuXG4vLyBWaWV3cG9ydFxuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSB2aWV3cG9ydCByZWN0YW5nbGUgYXMgYHhgLCBgeWAsIGB3aWR0aGAgYW5kIGBoZWlnaHRgIGluIHBoeXNpY2FsIHBpeGVsIHVuaXRzLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtTY3JlZW5Ob2RlPHZlYzQ+fVxuICovXG5leHBvcnQgY29uc3Qgdmlld3BvcnQgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFNjcmVlbk5vZGUsIFNjcmVlbk5vZGUuVklFV1BPUlQgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdmlld3BvcnQgcmVzb2x1dGlvbiBpbiBwaHlzaWNhbCBwaXhlbCB1bml0cy5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7U2NyZWVuTm9kZTx2ZWMyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHZpZXdwb3J0U2l6ZSA9IHZpZXdwb3J0Lnp3O1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IGB4YC9geWAgcGl4ZWwgcG9zaXRpb24gb24gdGhlIHZpZXdwb3J0IGluIHBoeXNpY2FsIHBpeGVsIHVuaXRzLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtTY3JlZW5Ob2RlPHZlYzI+fVxuICovXG5leHBvcnQgY29uc3Qgdmlld3BvcnRDb29yZGluYXRlID0gLypAX19QVVJFX18qLyBzY3JlZW5Db29yZGluYXRlLnN1Yiggdmlld3BvcnQueHkgKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyBub3JtYWxpemVkIHZpZXdwb3J0IGNvb3JkaW5hdGVzLCB1bml0bGVzcyBpbiBgWzAsIDFdYC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7U2NyZWVuTm9kZTx2ZWMyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHZpZXdwb3J0VVYgPSAvKkBfX1BVUkVfXyovIHZpZXdwb3J0Q29vcmRpbmF0ZS5kaXYoIHZpZXdwb3J0U2l6ZSApO1xuXG4vLyBEZXByZWNhdGVkXG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgcjE2OS4gVXNlIHtAbGluayBzY3JlZW5TaXplfSBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3Qgdmlld3BvcnRSZXNvbHV0aW9uID0gLypAX19QVVJFX18qLyAoIEZuKCAoKSA9PiB7IC8vIEBkZXByZWNhdGVkLCByMTY5XG5cblx0Y29uc29sZS53YXJuKCAnVFNMLlZpZXdwb3J0Tm9kZTogXCJ2aWV3cG9ydFJlc29sdXRpb25cIiBpcyBkZXByZWNhdGVkLiBVc2UgXCJzY3JlZW5TaXplXCIgaW5zdGVhZC4nICk7XG5cblx0cmV0dXJuIHNjcmVlblNpemU7XG5cbn0sICd2ZWMyJyApLm9uY2UoKSApKCk7XG5cbi8qKlxuICogQHRzbFxuICogQGRlcHJlY2F0ZWQgc2luY2UgcjE2OC4gVXNlIHtAbGluayBzY3JlZW5VVn0gaW5zdGVhZC5cbiAqIEB0eXBlIHtOb2RlPHZlYzI+fVxuICovXG5leHBvcnQgY29uc3Qgdmlld3BvcnRUb3BMZWZ0ID0gLypAX19QVVJFX18qLyAoIEZuKCAoKSA9PiB7IC8vIEBkZXByZWNhdGVkLCByMTY4XG5cblx0Y29uc29sZS53YXJuKCAnVFNMLlZpZXdwb3J0Tm9kZTogXCJ2aWV3cG9ydFRvcExlZnRcIiBpcyBkZXByZWNhdGVkLiBVc2UgXCJzY3JlZW5VVlwiIGluc3RlYWQuJyApO1xuXG5cdHJldHVybiBzY3JlZW5VVjtcblxufSwgJ3ZlYzInICkub25jZSgpICkoKTtcblxuLyoqXG4gKiBAdHNsXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSByMTY4LiBVc2UgYHNjcmVlblVWLmZsaXBZKClgIGluc3RlYWQuXG4gKiBAdHlwZSB7Tm9kZTx2ZWMyPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHZpZXdwb3J0Qm90dG9tTGVmdCA9IC8qQF9fUFVSRV9fKi8gKCBGbiggKCkgPT4geyAvLyBAZGVwcmVjYXRlZCwgcjE2OFxuXG5cdGNvbnNvbGUud2FybiggJ1RTTC5WaWV3cG9ydE5vZGU6IFwidmlld3BvcnRCb3R0b21MZWZ0XCIgaXMgZGVwcmVjYXRlZC4gVXNlIFwic2NyZWVuVVYuZmxpcFkoKVwiIGluc3RlYWQuJyApO1xuXG5cdHJldHVybiBzY3JlZW5VVi5mbGlwWSgpO1xuXG59LCAndmVjMicgKS5vbmNlKCkgKSgpO1xuIiwiaW1wb3J0IFRleHR1cmVOb2RlIGZyb20gJy4uL2FjY2Vzc29ycy9UZXh0dXJlTm9kZS5qcyc7XG5pbXBvcnQgeyBOb2RlVXBkYXRlVHlwZSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHNjcmVlblVWIH0gZnJvbSAnLi9TY3JlZW5Ob2RlLmpzJztcblxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBGcmFtZWJ1ZmZlclRleHR1cmUgfSBmcm9tICcuLi8uLi90ZXh0dXJlcy9GcmFtZWJ1ZmZlclRleHR1cmUuanMnO1xuaW1wb3J0IHsgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuY29uc3QgX3NpemUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5cbi8qKlxuICogQSBzcGVjaWFsIHR5cGUgb2YgdGV4dHVyZSBub2RlIHdoaWNoIHJlcHJlc2VudHMgdGhlIGRhdGEgb2YgdGhlIGN1cnJlbnQgdmlld3BvcnRcbiAqIGFzIGEgdGV4dHVyZS4gVGhlIG1vZHVsZSBleHRyYWN0cyBkYXRhIGZyb20gdGhlIGN1cnJlbnQgYm91bmQgZnJhbWVidWZmZXIgd2l0aFxuICogYSBjb3B5IG9wZXJhdGlvbiBzbyBubyBleHRyYSByZW5kZXIgcGFzcyBpcyByZXF1aXJlZCB0byBwcm9kdWNlIHRoZSB0ZXh0dXJlIGRhdGFcbiAqICh3aGljaCBpcyBnb29kIGZvciBwZXJmb3JtYW5jZSkuIGBWaWV3cG9ydFRleHR1cmVOb2RlYCBjYW4gYmUgdXNlZCBhcyBhbiBpbnB1dCBmb3IgYVxuICogdmFyaWV0eSBvZiBlZmZlY3RzIGxpa2UgcmVmcmFjdGl2ZSBvciB0cmFuc21pc3NpdmUgbWF0ZXJpYWxzLlxuICpcbiAqIEBhdWdtZW50cyBUZXh0dXJlTm9kZVxuICovXG5jbGFzcyBWaWV3cG9ydFRleHR1cmVOb2RlIGV4dGVuZHMgVGV4dHVyZU5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnVmlld3BvcnRUZXh0dXJlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHZpZXdwb3J0IHRleHR1cmUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBbdXZOb2RlPXNjcmVlblVWXSAtIFRoZSB1diBub2RlLlxuXHQgKiBAcGFyYW0gez9Ob2RlfSBbbGV2ZWxOb2RlPW51bGxdIC0gVGhlIGxldmVsIG5vZGUuXG5cdCAqIEBwYXJhbSB7P1RleHR1cmV9IFtmcmFtZWJ1ZmZlclRleHR1cmU9bnVsbF0gLSBBIGZyYW1lYnVmZmVyIHRleHR1cmUgaG9sZGluZyB0aGUgdmlld3BvcnQgZGF0YS4gSWYgbm90IHByb3ZpZGVkLCBhIGZyYW1lYnVmZmVyIHRleHR1cmUgaXMgY3JlYXRlZCBhdXRvbWF0aWNhbGx5LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHV2Tm9kZSA9IHNjcmVlblVWLCBsZXZlbE5vZGUgPSBudWxsLCBmcmFtZWJ1ZmZlclRleHR1cmUgPSBudWxsICkge1xuXG5cdFx0aWYgKCBmcmFtZWJ1ZmZlclRleHR1cmUgPT09IG51bGwgKSB7XG5cblx0XHRcdGZyYW1lYnVmZmVyVGV4dHVyZSA9IG5ldyBGcmFtZWJ1ZmZlclRleHR1cmUoKTtcblx0XHRcdGZyYW1lYnVmZmVyVGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI7XG5cblx0XHR9XG5cblx0XHRzdXBlciggZnJhbWVidWZmZXJUZXh0dXJlLCB1dk5vZGUsIGxldmVsTm9kZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0byBnZW5lcmF0ZSBtaXBtYXBzIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNPdXRwdXRUZXh0dXJlTm9kZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYHVwZGF0ZUJlZm9yZVR5cGVgIGlzIHNldCB0byBgTm9kZVVwZGF0ZVR5cGUuRlJBTUVgIHNpbmNlIHRoZSBub2RlIHJlbmRlcnMgdGhlXG5cdFx0ICogc2NlbmUgb25jZSBwZXIgZnJhbWUgaW4gaXRzIHtAbGluayBWaWV3cG9ydFRleHR1cmVOb2RlI3VwZGF0ZUJlZm9yZX0gbWV0aG9kLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnZnJhbWUnXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVCZWZvcmVUeXBlID0gTm9kZVVwZGF0ZVR5cGUuRlJBTUU7XG5cblx0fVxuXG5cdHVwZGF0ZUJlZm9yZSggZnJhbWUgKSB7XG5cblx0XHRjb25zdCByZW5kZXJlciA9IGZyYW1lLnJlbmRlcmVyO1xuXHRcdHJlbmRlcmVyLmdldERyYXdpbmdCdWZmZXJTaXplKCBfc2l6ZSApO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGZyYW1lYnVmZmVyVGV4dHVyZSA9IHRoaXMudmFsdWU7XG5cblx0XHRpZiAoIGZyYW1lYnVmZmVyVGV4dHVyZS5pbWFnZS53aWR0aCAhPT0gX3NpemUud2lkdGggfHwgZnJhbWVidWZmZXJUZXh0dXJlLmltYWdlLmhlaWdodCAhPT0gX3NpemUuaGVpZ2h0ICkge1xuXG5cdFx0XHRmcmFtZWJ1ZmZlclRleHR1cmUuaW1hZ2Uud2lkdGggPSBfc2l6ZS53aWR0aDtcblx0XHRcdGZyYW1lYnVmZmVyVGV4dHVyZS5pbWFnZS5oZWlnaHQgPSBfc2l6ZS5oZWlnaHQ7XG5cdFx0XHRmcmFtZWJ1ZmZlclRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGN1cnJlbnRHZW5lcmF0ZU1pcG1hcHMgPSBmcmFtZWJ1ZmZlclRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO1xuXHRcdGZyYW1lYnVmZmVyVGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB0aGlzLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdHJlbmRlcmVyLmNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSggZnJhbWVidWZmZXJUZXh0dXJlICk7XG5cblx0XHRmcmFtZWJ1ZmZlclRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gY3VycmVudEdlbmVyYXRlTWlwbWFwcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRjb25zdCB2aWV3cG9ydFRleHR1cmVOb2RlID0gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMudXZOb2RlLCB0aGlzLmxldmVsTm9kZSwgdGhpcy52YWx1ZSApO1xuXHRcdHZpZXdwb3J0VGV4dHVyZU5vZGUuZ2VuZXJhdGVNaXBtYXBzID0gdGhpcy5nZW5lcmF0ZU1pcG1hcHM7XG5cblx0XHRyZXR1cm4gdmlld3BvcnRUZXh0dXJlTm9kZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmlld3BvcnRUZXh0dXJlTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgdmlld3BvcnQgdGV4dHVyZSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBbdXZOb2RlPXNjcmVlblVWXSAtIFRoZSB1diBub2RlLlxuICogQHBhcmFtIHs/Tm9kZX0gW2xldmVsTm9kZT1udWxsXSAtIFRoZSBsZXZlbCBub2RlLlxuICogQHBhcmFtIHs/VGV4dHVyZX0gW2ZyYW1lYnVmZmVyVGV4dHVyZT1udWxsXSAtIEEgZnJhbWVidWZmZXIgdGV4dHVyZSBob2xkaW5nIHRoZSB2aWV3cG9ydCBkYXRhLiBJZiBub3QgcHJvdmlkZWQsIGEgZnJhbWVidWZmZXIgdGV4dHVyZSBpcyBjcmVhdGVkIGF1dG9tYXRpY2FsbHkuXG4gKiBAcmV0dXJucyB7Vmlld3BvcnRUZXh0dXJlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHZpZXdwb3J0VGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBWaWV3cG9ydFRleHR1cmVOb2RlICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHZpZXdwb3J0IHRleHR1cmUgbm9kZSB3aXRoIGVuYWJsZWQgbWlwbWFwIGdlbmVyYXRpb24uXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IFt1dk5vZGU9c2NyZWVuVVZdIC0gVGhlIHV2IG5vZGUuXG4gKiBAcGFyYW0gez9Ob2RlfSBbbGV2ZWxOb2RlPW51bGxdIC0gVGhlIGxldmVsIG5vZGUuXG4gKiBAcGFyYW0gez9UZXh0dXJlfSBbZnJhbWVidWZmZXJUZXh0dXJlPW51bGxdIC0gQSBmcmFtZWJ1ZmZlciB0ZXh0dXJlIGhvbGRpbmcgdGhlIHZpZXdwb3J0IGRhdGEuIElmIG5vdCBwcm92aWRlZCwgYSBmcmFtZWJ1ZmZlciB0ZXh0dXJlIGlzIGNyZWF0ZWQgYXV0b21hdGljYWxseS5cbiAqIEByZXR1cm5zIHtWaWV3cG9ydFRleHR1cmVOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgdmlld3BvcnRNaXBUZXh0dXJlID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFZpZXdwb3J0VGV4dHVyZU5vZGUsIG51bGwsIG51bGwsIHsgZ2VuZXJhdGVNaXBtYXBzOiB0cnVlIH0gKTtcbiIsImltcG9ydCBWaWV3cG9ydFRleHR1cmVOb2RlIGZyb20gJy4vVmlld3BvcnRUZXh0dXJlTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBzY3JlZW5VViB9IGZyb20gJy4vU2NyZWVuTm9kZS5qcyc7XG5cbmltcG9ydCB7IERlcHRoVGV4dHVyZSB9IGZyb20gJy4uLy4uL3RleHR1cmVzL0RlcHRoVGV4dHVyZS5qcyc7XG5cbmxldCBzaGFyZWREZXB0aGJ1ZmZlciA9IG51bGw7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgZGVwdGggb2YgdGhlIGN1cnJlbnQgdmlld3BvcnQgYXMgYSB0ZXh0dXJlLiBUaGlzIG1vZHVsZVxuICogY2FuIGJlIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCB2aWV3cG9ydCB0ZXh0dXJlIHRvIGFjaGlldmUgZWZmZWN0c1xuICogdGhhdCByZXF1aXJlIGRlcHRoIGV2YWx1YXRpb24uXG4gKlxuICogQGF1Z21lbnRzIFZpZXdwb3J0VGV4dHVyZU5vZGVcbiAqL1xuY2xhc3MgVmlld3BvcnREZXB0aFRleHR1cmVOb2RlIGV4dGVuZHMgVmlld3BvcnRUZXh0dXJlTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdWaWV3cG9ydERlcHRoVGV4dHVyZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB2aWV3cG9ydCBkZXB0aCB0ZXh0dXJlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gW3V2Tm9kZT1zY3JlZW5VVl0gLSBUaGUgdXYgbm9kZS5cblx0ICogQHBhcmFtIHs/Tm9kZX0gW2xldmVsTm9kZT1udWxsXSAtIFRoZSBsZXZlbCBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHV2Tm9kZSA9IHNjcmVlblVWLCBsZXZlbE5vZGUgPSBudWxsICkge1xuXG5cdFx0aWYgKCBzaGFyZWREZXB0aGJ1ZmZlciA9PT0gbnVsbCApIHtcblxuXHRcdFx0c2hhcmVkRGVwdGhidWZmZXIgPSBuZXcgRGVwdGhUZXh0dXJlKCk7XG5cblx0XHR9XG5cblx0XHRzdXBlciggdXZOb2RlLCBsZXZlbE5vZGUsIHNoYXJlZERlcHRoYnVmZmVyICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXdwb3J0RGVwdGhUZXh0dXJlTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGEgdmlld3BvcnQgZGVwdGggdGV4dHVyZSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBbdXZOb2RlPXNjcmVlblVWXSAtIFRoZSB1diBub2RlLlxuICogQHBhcmFtIHs/Tm9kZX0gW2xldmVsTm9kZT1udWxsXSAtIFRoZSBsZXZlbCBub2RlLlxuICogQHJldHVybnMge1ZpZXdwb3J0RGVwdGhUZXh0dXJlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHZpZXdwb3J0RGVwdGhUZXh0dXJlID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFZpZXdwb3J0RGVwdGhUZXh0dXJlTm9kZSApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IGZsb2F0LCBsb2csIGxvZzIsIG5vZGVJbW11dGFibGUsIG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IGNhbWVyYU5lYXIsIGNhbWVyYUZhciB9IGZyb20gJy4uL2FjY2Vzc29ycy9DYW1lcmEuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25WaWV3IH0gZnJvbSAnLi4vYWNjZXNzb3JzL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IHZpZXdwb3J0RGVwdGhUZXh0dXJlIH0gZnJvbSAnLi9WaWV3cG9ydERlcHRoVGV4dHVyZU5vZGUuanMnO1xuXG4vKipcbiAqIFRoaXMgbm9kZSBvZmZlcnMgYSBjb2xsZWN0aW9uIG9mIGZlYXR1cmVzIGluIGNvbnRleHQgb2YgdGhlIGRlcHRoIGxvZ2ljIGluIHRoZSBmcmFnbWVudCBzaGFkZXIuXG4gKiBEZXBlbmRpbmcgb24ge0BsaW5rIFZpZXdwb3J0RGVwdGhOb2RlI3Njb3BlfSwgaXQgY2FuIGJlIHVzZWQgdG8gZGVmaW5lIGEgZGVwdGggdmFsdWUgZm9yIHRoZSBjdXJyZW50XG4gKiBmcmFnbWVudCBvciBmb3IgZGVwdGggZXZhbHVhdGlvbiBwdXJwb3Nlcy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBWaWV3cG9ydERlcHRoTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnVmlld3BvcnREZXB0aE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB2aWV3cG9ydCBkZXB0aCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0geygnZGVwdGgnfCdkZXB0aEJhc2UnfCdsaW5lYXJEZXB0aCcpfSBzY29wZSAtIFRoZSBub2RlJ3Mgc2NvcGUuXG5cdCAqIEBwYXJhbSB7P05vZGV9IFt2YWx1ZU5vZGU9bnVsbF0gLSBUaGUgdmFsdWUgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzY29wZSwgdmFsdWVOb2RlID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCAnZmxvYXQnICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSBiZWhhdmVzIGRpZmZlcmVudGx5IGRlcGVuZGluZyBvbiB3aGljaCBzY29wZSBpcyBzZWxlY3RlZC5cblx0XHQgKlxuXHRcdCAqIC0gYFZpZXdwb3J0RGVwdGhOb2RlLkRFUFRIX0JBU0VgOiBBbGxvd3MgdG8gZGVmaW5lIGEgdmFsdWUgZm9yIHRoZSBjdXJyZW50IGZyYWdtZW50J3MgZGVwdGguXG5cdFx0ICogLSBgVmlld3BvcnREZXB0aE5vZGUuREVQVEhgOiBSZXByZXNlbnRzIHRoZSBkZXB0aCB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgZnJhZ21lbnQgKGB2YWx1ZU5vZGVgIGlzIGlnbm9yZWQpLlxuXHRcdCAqIC0gYFZpZXdwb3J0RGVwdGhOb2RlLkxJTkVBUl9ERVBUSGA6IFJlcHJlc2VudHMgdGhlIGxpbmVhciAob3J0aG9ncmFwaGljKSBkZXB0aCB2YWx1ZSBvZiB0aGUgY3VycmVudCBmcmFnbWVudC5cblx0XHQgKiBJZiBhIGB2YWx1ZU5vZGVgIGlzIHNldCwgdGhlIHNjb3BlIGNhbiBiZSB1c2VkIHRvIGNvbnZlcnQgcGVyc3BlY3RpdmUgZGVwdGggZGF0YSB0byBsaW5lYXIgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoJ2RlcHRoJ3wnZGVwdGhCYXNlJ3wnbGluZWFyRGVwdGgnKX1cblx0XHQgKi9cblx0XHR0aGlzLnNjb3BlID0gc2NvcGU7XG5cblx0XHQvKipcblx0XHQgKiBDYW4gYmUgdXNlZCB0byBkZWZpbmUgYSBjdXN0b20gZGVwdGggdmFsdWUuXG5cdFx0ICogVGhlIHByb3BlcnR5IGlzIGlnbm9yZWQgaW4gdGhlIGBWaWV3cG9ydERlcHRoTm9kZS5ERVBUSGAgc2NvcGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudmFsdWVOb2RlID0gdmFsdWVOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1ZpZXdwb3J0RGVwdGhOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCB7IHNjb3BlIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCBzY29wZSA9PT0gVmlld3BvcnREZXB0aE5vZGUuREVQVEhfQkFTRSApIHtcblxuXHRcdFx0cmV0dXJuIGJ1aWxkZXIuZ2V0RnJhZ0RlcHRoKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc3VwZXIuZ2VuZXJhdGUoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0c2V0dXAoIHsgY2FtZXJhIH0gKSB7XG5cblx0XHRjb25zdCB7IHNjb3BlIH0gPSB0aGlzO1xuXHRcdGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZU5vZGU7XG5cblx0XHRsZXQgbm9kZSA9IG51bGw7XG5cblx0XHRpZiAoIHNjb3BlID09PSBWaWV3cG9ydERlcHRoTm9kZS5ERVBUSF9CQVNFICkge1xuXG5cdFx0XHRpZiAoIHZhbHVlICE9PSBudWxsICkge1xuXG4gXHRcdFx0XHRub2RlID0gZGVwdGhCYXNlKCkuYXNzaWduKCB2YWx1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gVmlld3BvcnREZXB0aE5vZGUuREVQVEggKSB7XG5cblx0XHRcdGlmICggY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdFx0bm9kZSA9IHZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoKCBwb3NpdGlvblZpZXcueiwgY2FtZXJhTmVhciwgY2FtZXJhRmFyICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IHZpZXdaVG9PcnRob2dyYXBoaWNEZXB0aCggcG9zaXRpb25WaWV3LnosIGNhbWVyYU5lYXIsIGNhbWVyYUZhciApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZSA9PT0gVmlld3BvcnREZXB0aE5vZGUuTElORUFSX0RFUFRIICkge1xuXG5cdFx0XHRpZiAoIHZhbHVlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2aWV3WiA9IHBlcnNwZWN0aXZlRGVwdGhUb1ZpZXdaKCB2YWx1ZSwgY2FtZXJhTmVhciwgY2FtZXJhRmFyICk7XG5cblx0XHRcdFx0XHRub2RlID0gdmlld1pUb09ydGhvZ3JhcGhpY0RlcHRoKCB2aWV3WiwgY2FtZXJhTmVhciwgY2FtZXJhRmFyICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdG5vZGUgPSB2YWx1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IHZpZXdaVG9PcnRob2dyYXBoaWNEZXB0aCggcG9zaXRpb25WaWV3LnosIGNhbWVyYU5lYXIsIGNhbWVyYUZhciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbm9kZTtcblxuXHR9XG5cbn1cblxuVmlld3BvcnREZXB0aE5vZGUuREVQVEhfQkFTRSA9ICdkZXB0aEJhc2UnO1xuVmlld3BvcnREZXB0aE5vZGUuREVQVEggPSAnZGVwdGgnO1xuVmlld3BvcnREZXB0aE5vZGUuTElORUFSX0RFUFRIID0gJ2xpbmVhckRlcHRoJztcblxuZXhwb3J0IGRlZmF1bHQgVmlld3BvcnREZXB0aE5vZGU7XG5cbi8vIE5PVEU6IHZpZXdaLCB0aGUgei1jb29yZGluYXRlIGluIGNhbWVyYSBzcGFjZSwgaXMgbmVnYXRpdmUgZm9yIHBvaW50cyBpbiBmcm9udCBvZiB0aGUgY2FtZXJhXG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjb252ZXJ0aW5nIGEgdmlld1ogdmFsdWUgdG8gYW4gb3J0aG9ncmFwaGljIGRlcHRoIHZhbHVlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gdmlld1ogLSBUaGUgdmlld1ogbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IG5lYXIgLSBUaGUgY2FtZXJhJ3MgbmVhciB2YWx1ZS5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGZhciAtIFRoZSBjYW1lcmEncyBmYXIgdmFsdWUuXG4gKiBAcmV0dXJucyB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCB2aWV3WlRvT3J0aG9ncmFwaGljRGVwdGggPSAoIHZpZXdaLCBuZWFyLCBmYXIgKSA9PiB2aWV3Wi5hZGQoIG5lYXIgKS5kaXYoIG5lYXIuc3ViKCBmYXIgKSApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY29udmVydGluZyBhbiBvcnRob2dyYXBoaWMgZGVwdGggdmFsdWUgdG8gYSB2aWV3WiB2YWx1ZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGRlcHRoIC0gVGhlIG9ydGhvZ3JhcGhpYyBkZXB0aC5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IG5lYXIgLSBUaGUgY2FtZXJhJ3MgbmVhciB2YWx1ZS5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGZhciAtIFRoZSBjYW1lcmEncyBmYXIgdmFsdWUuXG4gKiBAcmV0dXJucyB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBvcnRob2dyYXBoaWNEZXB0aFRvVmlld1ogPSAoIGRlcHRoLCBuZWFyLCBmYXIgKSA9PiBuZWFyLnN1YiggZmFyICkubXVsKCBkZXB0aCApLnN1YiggbmVhciApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY29udmVydGluZyBhIHZpZXdaIHZhbHVlIHRvIGEgcGVyc3BlY3RpdmUgZGVwdGggdmFsdWUuXG4gKlxuICogTm90ZToge2xpbmsgaHR0cHM6Ly90d2l0dGVyLmNvbS9nb25uYXZpcy9zdGF0dXMvMTM3NzE4Mzc4Njk0OTk1OTY4Mn0uXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSB2aWV3WiAtIFRoZSB2aWV3WiBub2RlLlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gbmVhciAtIFRoZSBjYW1lcmEncyBuZWFyIHZhbHVlLlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gZmFyIC0gVGhlIGNhbWVyYSdzIGZhciB2YWx1ZS5cbiAqIEByZXR1cm5zIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoID0gKCB2aWV3WiwgbmVhciwgZmFyICkgPT4gbmVhci5hZGQoIHZpZXdaICkubXVsKCBmYXIgKS5kaXYoIGZhci5zdWIoIG5lYXIgKS5tdWwoIHZpZXdaICkgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNvbnZlcnRpbmcgYSBwZXJzcGVjdGl2ZSBkZXB0aCB2YWx1ZSB0byBhIHZpZXdaIHZhbHVlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gZGVwdGggLSBUaGUgcGVyc3BlY3RpdmUgZGVwdGguXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBuZWFyIC0gVGhlIGNhbWVyYSdzIG5lYXIgdmFsdWUuXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBmYXIgLSBUaGUgY2FtZXJhJ3MgZmFyIHZhbHVlLlxuICogQHJldHVybnMge05vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgcGVyc3BlY3RpdmVEZXB0aFRvVmlld1ogPSAoIGRlcHRoLCBuZWFyLCBmYXIgKSA9PiBuZWFyLm11bCggZmFyICkuZGl2KCBmYXIuc3ViKCBuZWFyICkubXVsKCBkZXB0aCApLnN1YiggZmFyICkgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNvbnZlcnRpbmcgYSB2aWV3WiB2YWx1ZSB0byBhIGxvZ2FyaXRobWljIGRlcHRoIHZhbHVlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gdmlld1ogLSBUaGUgdmlld1ogbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IG5lYXIgLSBUaGUgY2FtZXJhJ3MgbmVhciB2YWx1ZS5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGZhciAtIFRoZSBjYW1lcmEncyBmYXIgdmFsdWUuXG4gKiBAcmV0dXJucyB7Tm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCB2aWV3WlRvTG9nYXJpdGhtaWNEZXB0aCA9ICggdmlld1osIG5lYXIsIGZhciApID0+IHtcblxuXHQvLyBOT1RFOiB2aWV3WiBtdXN0IGJlIG5lZ2F0aXZlLS1zZWUgZXhwbGFuYXRpb24gYXQgdGhlIGVuZCBvZiB0aGlzIGNvbW1lbnQgYmxvY2suXG5cdC8vIFRoZSBmaW5hbCBsb2dhcml0aG1pYyBkZXB0aCBmb3JtdWxhIHVzZWQgaGVyZSBpcyBhZGFwdGVkIGZyb20gb25lIGRlc2NyaWJlZCBpbiBhblxuXHQvLyBhcnRpY2xlIGJ5IFRoYXRjaGVyIFVscmljaCAoc2VlIGh0dHA6Ly90dWxyaWNoLmNvbS9nZWVrc3R1ZmYvbG9nX2RlcHRoX2J1ZmZlci50eHQpLFxuXHQvLyB3aGljaCB3YXMgYW4gaW1wcm92ZW1lbnQgdXBvbiBhbiBlYXJsaWVyIGZvcm11bGEgb25lIGRlc2NyaWJlZCBpbiBhblxuXHQvLyBPdXRlcnJhIGFydGljbGUgKGh0dHBzOi8vb3V0ZXJyYS5ibG9nc3BvdC5jb20vMjAwOS8wOC9sb2dhcml0aG1pYy16LWJ1ZmZlci5odG1sKS5cblx0Ly8gVWxyaWNoJ3MgZm9ybXVsYSBpcyB0aGUgZm9sbG93aW5nOlxuXHQvLyAgICAgeiA9IEsgKiBsb2coIHcgLyBjYW1lcmFOZWFyICkgLyBsb2coIGNhbWVyYUZhciAvIGNhbWVyYU5lYXIgKVxuXHQvLyAgICAgd2hlcmUgSyA9IDJeayAtIDEsIGFuZCBrIGlzIHRoZSBudW1iZXIgb2YgYml0cyBpbiB0aGUgZGVwdGggYnVmZmVyLlxuXHQvLyBUaGUgT3V0ZXJyYSB2YXJpYW50IGlnbm9yZWQgdGhlIGNhbWVyYSBuZWFyIHBsYW5lIChpdCBhc3N1bWVkIGl0IHdhcyAwKSBhbmQgaW5zdGVhZFxuXHQvLyBvcHRlZCBmb3IgYSBcIkMtY29uc3RhbnRcIiBmb3IgcmVzb2x1dGlvbiBhZGp1c3RtZW50IG9mIG9iamVjdHMgbmVhciB0aGUgY2FtZXJhLlxuXHQvLyBPdXRlcnJhIHN0YXRlczogXCJOb3RpY2UgdGhhdCB0aGUgJ0MnIHZhcmlhbnQgZG9lc27igJl0IHVzZSBhIG5lYXIgcGxhbmUgZGlzdGFuY2UsIGl0IGhhcyBpdFxuXHQvLyBzZXQgYXQgMFwiIChxdW90ZSBmcm9tIGh0dHBzOi8vb3V0ZXJyYS5ibG9nc3BvdC5jb20vMjAxMi8xMS9tYXhpbWl6aW5nLWRlcHRoLWJ1ZmZlci1yYW5nZS1hbmQuaHRtbCkuXG5cdC8vIFVscmljaCdzIHZhcmlhbnQgaGFzIHRoZSBiZW5lZml0IG9mIGNvbnN0YW50IHJlbGF0aXZlIHByZWNpc2lvbiBvdmVyIHRoZSB3aG9sZSBuZWFyLWZhciByYW5nZS5cblx0Ly8gSXQgd2FzIGRlYmF0ZWQgaGVyZSB3aGV0aGVyIE91dGVycmEncyBcIkMtY29uc3RhbnRcIiBvciBVbHJpY2gncyBcIm5lYXIgcGxhbmVcIiB2YXJpYW50IHNob3VsZFxuXHQvLyBiZSB1c2VkLCBhbmQgdWx0aW1hdGVseSBVbHJpY2gncyBcIm5lYXIgcGxhbmVcIiB2ZXJzaW9uIHdhcyBjaG9zZW4uXG5cdC8vIE91dGVycmEgZXZlbnR1YWxseSBtYWRlIGFub3RoZXIgaW1wcm92ZW1lbnQgdG8gdGhlaXIgb3JpZ2luYWwgXCJDLWNvbnN0YW50XCIgdmFyaWFudCxcblx0Ly8gYnV0IGl0IHN0aWxsIGRvZXMgbm90IGluY29ycG9yYXRlIHRoZSBjYW1lcmEgbmVhciBwbGFuZSAoZm9yIHRoaXMgdmVyc2lvbixcblx0Ly8gc2VlIGh0dHBzOi8vb3V0ZXJyYS5ibG9nc3BvdC5jb20vMjAxMy8wNy9sb2dhcml0aG1pYy1kZXB0aC1idWZmZXItb3B0aW1pemF0aW9ucy5odG1sKS5cblx0Ly8gSGVyZSB3ZSBtYWtlIDQgY2hhbmdlcyB0byBVbHJpY2gncyBmb3JtdWxhOlxuXHQvLyAxLiBDbGFtcCB0aGUgY2FtZXJhIG5lYXIgcGxhbmUgc28gd2UgZG9uJ3QgZGl2aWRlIGJ5IDAuXG5cdC8vIDIuIFVzZSBsb2cyIGluc3RlYWQgb2YgbG9nIHRvIGF2b2lkIGFuIGV4dHJhIG11bHRpcGx5IChzaGFkZXJzIGltcGxlbWVudCBsb2cgdXNpbmcgbG9nMikuXG5cdC8vIDMuIEFzc3VtZSBLIGlzIDEgKEsgPSBtYXhpbXVtIHZhbHVlIGluIGRlcHRoIGJ1ZmZlcjsgc2VlIFVscmljaCdzIGZvcm11bGEgYWJvdmUpLlxuXHQvLyA0LiBUbyBtYWludGFpbiBjb25zaXN0ZW5jeSB3aXRoIHRoZSBmdW5jdGlvbnMgXCJ2aWV3WlRvT3J0aG9ncmFwaGljRGVwdGhcIiBhbmQgXCJ2aWV3WlRvUGVyc3BlY3RpdmVEZXB0aFwiLFxuXHQvLyAgICB3ZSBtb2RpZnkgdGhlIGZvcm11bGEgaGVyZSB0byB1c2UgJ3ZpZXdaJyBpbnN0ZWFkIG9mICd3Jy4gVGhlIG90aGVyIGZ1bmN0aW9ucyBleHBlY3QgYSBuZWdhdGl2ZSB2aWV3Wixcblx0Ly8gICAgc28gd2UgZG8gdGhlIHNhbWUgaGVyZSwgaGVuY2UgdGhlICd2aWV3Wi5uZWdhdGUoKScgY2FsbC5cblx0Ly8gRm9yIHZpc3VhbCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGRlcHRoIGN1cnZlLCBzZWUgaHR0cHM6Ly93d3cuZGVzbW9zLmNvbS9jYWxjdWxhdG9yL3V5cWswdmV4MXVcblx0bmVhciA9IG5lYXIubWF4KCAxZS02ICkudG9WYXIoKTtcblx0Y29uc3QgbnVtZXJhdG9yID0gbG9nMiggdmlld1oubmVnYXRlKCkuZGl2KCBuZWFyICkgKTtcblx0Y29uc3QgZGVub21pbmF0b3IgPSBsb2cyKCBmYXIuZGl2KCBuZWFyICkgKTtcblx0cmV0dXJuIG51bWVyYXRvci5kaXYoIGRlbm9taW5hdG9yICk7XG5cbn07XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjb252ZXJ0aW5nIGEgbG9nYXJpdGhtaWMgZGVwdGggdmFsdWUgdG8gYSB2aWV3WiB2YWx1ZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGRlcHRoIC0gVGhlIGxvZ2FyaXRobWljIGRlcHRoLlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gbmVhciAtIFRoZSBjYW1lcmEncyBuZWFyIHZhbHVlLlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gZmFyIC0gVGhlIGNhbWVyYSdzIGZhciB2YWx1ZS5cbiAqIEByZXR1cm5zIHtOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGxvZ2FyaXRobWljRGVwdGhUb1ZpZXdaID0gKCBkZXB0aCwgbmVhciwgZmFyICkgPT4ge1xuXG5cdC8vIE5PVEU6IHdlIGFkZCBhICduZWdhdGUoKScgY2FsbCB0byB0aGUgcmV0dXJuIHZhbHVlIGhlcmUgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3kgd2l0aFxuXHQvLyB0aGUgZnVuY3Rpb25zIFwib3J0aG9ncmFwaGljRGVwdGhUb1ZpZXdaXCIgYW5kIFwicGVyc3BlY3RpdmVEZXB0aFRvVmlld1pcIiAodGhleSByZXR1cm5cblx0Ly8gYSBuZWdhdGl2ZSB2aWV3WikuXG5cdGNvbnN0IGV4cG9uZW50ID0gZGVwdGgubXVsKCBsb2coIGZhci5kaXYoIG5lYXIgKSApICk7XG5cdHJldHVybiBmbG9hdCggTWF0aC5FICkucG93KCBleHBvbmVudCApLm11bCggbmVhciApLm5lZ2F0ZSgpO1xuXG59O1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgZGVmaW5pbmcgYSB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgZnJhZ21lbnQncyBkZXB0aC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IHZhbHVlIC0gVGhlIGRlcHRoIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtWaWV3cG9ydERlcHRoTm9kZTxmbG9hdD59XG4gKi9cbmNvbnN0IGRlcHRoQmFzZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBWaWV3cG9ydERlcHRoTm9kZSwgVmlld3BvcnREZXB0aE5vZGUuREVQVEhfQkFTRSApO1xuXG4vKipcbiAqIFRTTCBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBkZXB0aCB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgZnJhZ21lbnQuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1ZpZXdwb3J0RGVwdGhOb2RlfVxuICovXG5leHBvcnQgY29uc3QgZGVwdGggPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFZpZXdwb3J0RGVwdGhOb2RlLCBWaWV3cG9ydERlcHRoTm9kZS5ERVBUSCApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY29udmVydGluZyBhIHBlcnNwZWN0aXZlIGRlcHRoIHZhbHVlIHRvIGxpbmVhciBkZXB0aC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IHZhbHVlIC0gVGhlIHBlcnNwZWN0aXZlIGRlcHRoLlxuICogQHJldHVybnMge1ZpZXdwb3J0RGVwdGhOb2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IGxpbmVhckRlcHRoID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFZpZXdwb3J0RGVwdGhOb2RlLCBWaWV3cG9ydERlcHRoTm9kZS5MSU5FQVJfREVQVEggKTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgbGluZWFyIChvcnRob2dyYXBoaWMpIGRlcHRoIHZhbHVlIG9mIHRoZSBjdXJyZW50IGZyYWdtZW50XG4gKlxuICogQHRzbFxuICogQHR5cGUge1ZpZXdwb3J0RGVwdGhOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgdmlld3BvcnRMaW5lYXJEZXB0aCA9IC8qQF9fUFVSRV9fKi8gbGluZWFyRGVwdGgoIHZpZXdwb3J0RGVwdGhUZXh0dXJlKCkgKTtcblxuZGVwdGguYXNzaWduID0gKCB2YWx1ZSApID0+IGRlcHRoQmFzZSggdmFsdWUgKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogVGhlIG5vZGUgYWxsb3dzIHRvIHNldCB2YWx1ZXMgZm9yIGJ1aWx0LWluIHNoYWRlciB2YXJpYWJsZXMuIFRoYXQgaXNcbiAqIHJlcXVpcmVkIGZvciBmZWF0dXJlcyBsaWtlIGhhcmR3YXJlLWFjY2VsZXJhdGVkIHZlcnRleCBjbGlwcGluZy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBCdWlsdGluTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1aWx0aW4gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgYnVpbHQtaW4gc2hhZGVyIHZhcmlhYmxlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUgKSB7XG5cblx0XHRzdXBlciggJ2Zsb2F0JyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIGJ1aWx0LWluIHNoYWRlciB2YXJpYWJsZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNCdWlsdGluTm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIGNvZGUgc25pcHBldCBvZiB0aGUgYnVpbHRpbiBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBnZW5lcmF0ZWQgY29kZSBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGUoIC8qIGJ1aWxkZXIgKi8gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5uYW1lO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBCdWlsdGluTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgYnVpbHRpbiBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgYnVpbHQtaW4gc2hhZGVyIHZhcmlhYmxlLlxuICogQHJldHVybnMge0J1aWx0aW5Ob2RlfVxuICovXG5leHBvcnQgY29uc3QgYnVpbHRpbiA9IG5vZGVQcm94eSggQnVpbHRpbk5vZGUgKTtcbiIsIlxuaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IG5vZGVPYmplY3QsIEZuLCBib29sLCBmbG9hdCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uVmlldyB9IGZyb20gJy4vUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgZGlmZnVzZUNvbG9yIH0gZnJvbSAnLi4vY29yZS9Qcm9wZXJ0eU5vZGUuanMnO1xuaW1wb3J0IHsgTG9vcCB9IGZyb20gJy4uL3V0aWxzL0xvb3BOb2RlLmpzJztcbmltcG9ydCB7IHNtb290aHN0ZXAgfSBmcm9tICcuLi9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IHVuaWZvcm1BcnJheSB9IGZyb20gJy4vVW5pZm9ybUFycmF5Tm9kZS5qcyc7XG5pbXBvcnQgeyBidWlsdGluIH0gZnJvbSAnLi9CdWlsdGluTm9kZS5qcyc7XG5cbi8qKlxuICogVGhpcyBub2RlIGlzIHVzZWQgaW4ge0BsaW5rIE5vZGVNYXRlcmlhbH0gdG8gc2V0dXAgdGhlIGNsaXBwaW5nXG4gKiB3aGljaCBjYW4gaGFwcGVuIGhhcmR3YXJlLWFjY2VsZXJhdGVkIChpZiBzdXBwb3J0ZWQpIGFuZCBvcHRpb25hbGx5XG4gKiB1c2UgYWxwaGEtdG8tY292ZXJhZ2UgZm9yIGFudGktYWxpYXNpbmcgY2xpcHBlZCBlZGdlcy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBDbGlwcGluZ05vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0NsaXBwaW5nTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNsaXBwaW5nIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KCdkZWZhdWx0J3wnaGFyZHdhcmUnfCdhbHBoYVRvQ292ZXJhZ2UnKX0gW3Njb3BlPSdkZWZhdWx0J10gLSBUaGUgbm9kZSdzIHNjb3BlLiBTaW1pbGFyIHRvIG90aGVyIG5vZGVzLFxuXHQgKiB0aGUgc2VsZWN0ZWQgc2NvcGUgaW5mbHVlbmNlcyB0aGUgYmVoYXZpb3Igb2YgdGhlIG5vZGUgYW5kIHdoYXQgdHlwZSBvZiBjb2RlIGlzIGdlbmVyYXRlZC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzY29wZSA9IENsaXBwaW5nTm9kZS5ERUZBVUxUICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlJ3Mgc2NvcGUuIFNpbWlsYXIgdG8gb3RoZXIgbm9kZXMsIHRoZSBzZWxlY3RlZCBzY29wZSBpbmZsdWVuY2VzXG5cdFx0ICogdGhlIGJlaGF2aW9yIG9mIHRoZSBub2RlIGFuZCB3aGF0IHR5cGUgb2YgY29kZSBpcyBnZW5lcmF0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdkZWZhdWx0J3wnaGFyZHdhcmUnfCdhbHBoYVRvQ292ZXJhZ2UnKX1cblx0XHQgKi9cblx0XHR0aGlzLnNjb3BlID0gc2NvcGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIG5vZGUgZGVwZW5kaW5nIG9uIHRoZSBzZWxlY3RlZCBzY29wZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIHJlc3VsdCBub2RlLlxuXHQgKi9cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRzdXBlci5zZXR1cCggYnVpbGRlciApO1xuXG5cdFx0Y29uc3QgY2xpcHBpbmdDb250ZXh0ID0gYnVpbGRlci5jbGlwcGluZ0NvbnRleHQ7XG5cdFx0Y29uc3QgeyBpbnRlcnNlY3Rpb25QbGFuZXMsIHVuaW9uUGxhbmVzIH0gPSBjbGlwcGluZ0NvbnRleHQ7XG5cblx0XHR0aGlzLmhhcmR3YXJlQ2xpcHBpbmcgPSBidWlsZGVyLm1hdGVyaWFsLmhhcmR3YXJlQ2xpcHBpbmc7XG5cblx0XHRpZiAoIHRoaXMuc2NvcGUgPT09IENsaXBwaW5nTm9kZS5BTFBIQV9UT19DT1ZFUkFHRSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0dXBBbHBoYVRvQ292ZXJhZ2UoIGludGVyc2VjdGlvblBsYW5lcywgdW5pb25QbGFuZXMgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuc2NvcGUgPT09IENsaXBwaW5nTm9kZS5IQVJEV0FSRSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0dXBIYXJkd2FyZUNsaXBwaW5nKCB1bmlvblBsYW5lcywgYnVpbGRlciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc2V0dXBEZWZhdWx0KCBpbnRlcnNlY3Rpb25QbGFuZXMsIHVuaW9uUGxhbmVzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgYWxwaGEgdG8gY292ZXJhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yND59IGludGVyc2VjdGlvblBsYW5lcyAtIFRoZSBpbnRlcnNlY3Rpb24gcGxhbmVzLlxuXHQgKiBAcGFyYW0ge0FycmF5PFZlY3RvcjQ+fSB1bmlvblBsYW5lcyAtIFRoZSB1bmlvbiBwbGFuZXMuXG5cdCAqIEByZXR1cm4ge05vZGV9IFRoZSByZXN1bHQgbm9kZS5cblx0ICovXG5cdHNldHVwQWxwaGFUb0NvdmVyYWdlKCBpbnRlcnNlY3Rpb25QbGFuZXMsIHVuaW9uUGxhbmVzICkge1xuXG5cdFx0cmV0dXJuIEZuKCAoKSA9PiB7XG5cblx0XHRcdGNvbnN0IGRpc3RhbmNlVG9QbGFuZSA9IGZsb2F0KCkudG9WYXIoICdkaXN0YW5jZVRvUGxhbmUnICk7XG5cdFx0XHRjb25zdCBkaXN0YW5jZUdyYWRpZW50ID0gZmxvYXQoKS50b1ZhciggJ2Rpc3RhbmNlVG9HcmFkaWVudCcgKTtcblxuXHRcdFx0Y29uc3QgY2xpcE9wYWNpdHkgPSBmbG9hdCggMSApLnRvVmFyKCAnY2xpcE9wYWNpdHknICk7XG5cblx0XHRcdGNvbnN0IG51bVVuaW9uUGxhbmVzID0gdW5pb25QbGFuZXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHRoaXMuaGFyZHdhcmVDbGlwcGluZyA9PT0gZmFsc2UgJiYgbnVtVW5pb25QbGFuZXMgPiAwICkge1xuXG5cdFx0XHRcdGNvbnN0IGNsaXBwaW5nUGxhbmVzID0gdW5pZm9ybUFycmF5KCB1bmlvblBsYW5lcyApO1xuXG5cdFx0XHRcdExvb3AoIG51bVVuaW9uUGxhbmVzLCAoIHsgaSB9ICkgPT4ge1xuXG5cdFx0XHRcdFx0Y29uc3QgcGxhbmUgPSBjbGlwcGluZ1BsYW5lcy5lbGVtZW50KCBpICk7XG5cblx0XHRcdFx0XHRkaXN0YW5jZVRvUGxhbmUuYXNzaWduKCBwb3NpdGlvblZpZXcuZG90KCBwbGFuZS54eXogKS5uZWdhdGUoKS5hZGQoIHBsYW5lLncgKSApO1xuXHRcdFx0XHRcdGRpc3RhbmNlR3JhZGllbnQuYXNzaWduKCBkaXN0YW5jZVRvUGxhbmUuZndpZHRoKCkuZGl2KCAyLjAgKSApO1xuXG5cdFx0XHRcdFx0Y2xpcE9wYWNpdHkubXVsQXNzaWduKCBzbW9vdGhzdGVwKCBkaXN0YW5jZUdyYWRpZW50Lm5lZ2F0ZSgpLCBkaXN0YW5jZUdyYWRpZW50LCBkaXN0YW5jZVRvUGxhbmUgKSApO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBudW1JbnRlcnNlY3Rpb25QbGFuZXMgPSBpbnRlcnNlY3Rpb25QbGFuZXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG51bUludGVyc2VjdGlvblBsYW5lcyA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgY2xpcHBpbmdQbGFuZXMgPSB1bmlmb3JtQXJyYXkoIGludGVyc2VjdGlvblBsYW5lcyApO1xuXHRcdFx0XHRjb25zdCBpbnRlcnNlY3Rpb25DbGlwT3BhY2l0eSA9IGZsb2F0KCAxICkudG9WYXIoICdpbnRlcnNlY3Rpb25DbGlwT3BhY2l0eScgKTtcblxuXHRcdFx0XHRMb29wKCBudW1JbnRlcnNlY3Rpb25QbGFuZXMsICggeyBpIH0gKSA9PiB7XG5cblx0XHRcdFx0XHRjb25zdCBwbGFuZSA9IGNsaXBwaW5nUGxhbmVzLmVsZW1lbnQoIGkgKTtcblxuXHRcdFx0XHRcdGRpc3RhbmNlVG9QbGFuZS5hc3NpZ24oIHBvc2l0aW9uVmlldy5kb3QoIHBsYW5lLnh5eiApLm5lZ2F0ZSgpLmFkZCggcGxhbmUudyApICk7XG5cdFx0XHRcdFx0ZGlzdGFuY2VHcmFkaWVudC5hc3NpZ24oIGRpc3RhbmNlVG9QbGFuZS5md2lkdGgoKS5kaXYoIDIuMCApICk7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3Rpb25DbGlwT3BhY2l0eS5tdWxBc3NpZ24oIHNtb290aHN0ZXAoIGRpc3RhbmNlR3JhZGllbnQubmVnYXRlKCksIGRpc3RhbmNlR3JhZGllbnQsIGRpc3RhbmNlVG9QbGFuZSApLm9uZU1pbnVzKCkgKTtcblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Y2xpcE9wYWNpdHkubXVsQXNzaWduKCBpbnRlcnNlY3Rpb25DbGlwT3BhY2l0eS5vbmVNaW51cygpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZGlmZnVzZUNvbG9yLmEubXVsQXNzaWduKCBjbGlwT3BhY2l0eSApO1xuXG5cdFx0XHRkaWZmdXNlQ29sb3IuYS5lcXVhbCggMC4wICkuZGlzY2FyZCgpO1xuXG5cdFx0fSApKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGRlZmF1bHQgY2xpcHBpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yND59IGludGVyc2VjdGlvblBsYW5lcyAtIFRoZSBpbnRlcnNlY3Rpb24gcGxhbmVzLlxuXHQgKiBAcGFyYW0ge0FycmF5PFZlY3RvcjQ+fSB1bmlvblBsYW5lcyAtIFRoZSB1bmlvbiBwbGFuZXMuXG5cdCAqIEByZXR1cm4ge05vZGV9IFRoZSByZXN1bHQgbm9kZS5cblx0ICovXG5cdHNldHVwRGVmYXVsdCggaW50ZXJzZWN0aW9uUGxhbmVzLCB1bmlvblBsYW5lcyApIHtcblxuXHRcdHJldHVybiBGbiggKCkgPT4ge1xuXG5cdFx0XHRjb25zdCBudW1VbmlvblBsYW5lcyA9IHVuaW9uUGxhbmVzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB0aGlzLmhhcmR3YXJlQ2xpcHBpbmcgPT09IGZhbHNlICYmIG51bVVuaW9uUGxhbmVzID4gMCApIHtcblxuXHRcdFx0XHRjb25zdCBjbGlwcGluZ1BsYW5lcyA9IHVuaWZvcm1BcnJheSggdW5pb25QbGFuZXMgKTtcblxuXHRcdFx0XHRMb29wKCBudW1VbmlvblBsYW5lcywgKCB7IGkgfSApID0+IHtcblxuXHRcdFx0XHRcdGNvbnN0IHBsYW5lID0gY2xpcHBpbmdQbGFuZXMuZWxlbWVudCggaSApO1xuXHRcdFx0XHRcdHBvc2l0aW9uVmlldy5kb3QoIHBsYW5lLnh5eiApLmdyZWF0ZXJUaGFuKCBwbGFuZS53ICkuZGlzY2FyZCgpO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBudW1JbnRlcnNlY3Rpb25QbGFuZXMgPSBpbnRlcnNlY3Rpb25QbGFuZXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG51bUludGVyc2VjdGlvblBsYW5lcyA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgY2xpcHBpbmdQbGFuZXMgPSB1bmlmb3JtQXJyYXkoIGludGVyc2VjdGlvblBsYW5lcyApO1xuXHRcdFx0XHRjb25zdCBjbGlwcGVkID0gYm9vbCggdHJ1ZSApLnRvVmFyKCAnY2xpcHBlZCcgKTtcblxuXHRcdFx0XHRMb29wKCBudW1JbnRlcnNlY3Rpb25QbGFuZXMsICggeyBpIH0gKSA9PiB7XG5cblx0XHRcdFx0XHRjb25zdCBwbGFuZSA9IGNsaXBwaW5nUGxhbmVzLmVsZW1lbnQoIGkgKTtcblx0XHRcdFx0XHRjbGlwcGVkLmFzc2lnbiggcG9zaXRpb25WaWV3LmRvdCggcGxhbmUueHl6ICkuZ3JlYXRlclRoYW4oIHBsYW5lLncgKS5hbmQoIGNsaXBwZWQgKSApO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRjbGlwcGVkLmRpc2NhcmQoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSApKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgaGFyZHdhcmUgY2xpcHBpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yND59IHVuaW9uUGxhbmVzIC0gVGhlIHVuaW9uIHBsYW5lcy5cblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIHJlc3VsdCBub2RlLlxuXHQgKi9cblx0c2V0dXBIYXJkd2FyZUNsaXBwaW5nKCB1bmlvblBsYW5lcywgYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IG51bVVuaW9uUGxhbmVzID0gdW5pb25QbGFuZXMubGVuZ3RoO1xuXG5cdFx0YnVpbGRlci5lbmFibGVIYXJkd2FyZUNsaXBwaW5nKCBudW1VbmlvblBsYW5lcyApO1xuXG5cdFx0cmV0dXJuIEZuKCAoKSA9PiB7XG5cblx0XHRcdGNvbnN0IGNsaXBwaW5nUGxhbmVzID0gdW5pZm9ybUFycmF5KCB1bmlvblBsYW5lcyApO1xuXHRcdFx0Y29uc3QgaHdfY2xpcF9kaXN0YW5jZXMgPSBidWlsdGluKCBidWlsZGVyLmdldENsaXBEaXN0YW5jZSgpICk7XG5cblx0XHRcdExvb3AoIG51bVVuaW9uUGxhbmVzLCAoIHsgaSB9ICkgPT4ge1xuXG5cdFx0XHRcdGNvbnN0IHBsYW5lID0gY2xpcHBpbmdQbGFuZXMuZWxlbWVudCggaSApO1xuXG5cdFx0XHRcdGNvbnN0IGRpc3RhbmNlID0gcG9zaXRpb25WaWV3LmRvdCggcGxhbmUueHl6ICkuc3ViKCBwbGFuZS53ICkubmVnYXRlKCk7XG5cdFx0XHRcdGh3X2NsaXBfZGlzdGFuY2VzLmVsZW1lbnQoIGkgKS5hc3NpZ24oIGRpc3RhbmNlICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH0gKSgpO1xuXG5cdH1cblxufVxuXG5DbGlwcGluZ05vZGUuQUxQSEFfVE9fQ09WRVJBR0UgPSAnYWxwaGFUb0NvdmVyYWdlJztcbkNsaXBwaW5nTm9kZS5ERUZBVUxUID0gJ2RlZmF1bHQnO1xuQ2xpcHBpbmdOb2RlLkhBUkRXQVJFID0gJ2hhcmR3YXJlJztcblxuZXhwb3J0IGRlZmF1bHQgQ2xpcHBpbmdOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3Igc2V0dGluZyB1cCB0aGUgZGVmYXVsdCBjbGlwcGluZyBsb2dpYy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtDbGlwcGluZ05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjbGlwcGluZyA9ICgpID0+IG5vZGVPYmplY3QoIG5ldyBDbGlwcGluZ05vZGUoKSApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3Igc2V0dGluZyB1cCBhbHBoYSB0byBjb3ZlcmFnZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtDbGlwcGluZ05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjbGlwcGluZ0FscGhhID0gKCkgPT4gbm9kZU9iamVjdCggbmV3IENsaXBwaW5nTm9kZSggQ2xpcHBpbmdOb2RlLkFMUEhBX1RPX0NPVkVSQUdFICkgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIHNldHRpbmcgdXAgaGFyZHdhcmUtYmFzZWQgY2xpcHBpbmcuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7Q2xpcHBpbmdOb2RlfVxuICovXG5leHBvcnQgY29uc3QgaGFyZHdhcmVDbGlwcGluZyA9ICgpID0+IG5vZGVPYmplY3QoIG5ldyBDbGlwcGluZ05vZGUoIENsaXBwaW5nTm9kZS5IQVJEV0FSRSApICk7XG4iLCJpbXBvcnQgeyBhYnMsIGFkZCwgY2VpbCwgY2xhbXAsIGRGZHgsIGRGZHksIGV4cDIsIGZsb2F0LCBmbG9vciwgRm4sIGZyYWN0LCBsZW5ndGgsIGxvZzIsIG1heCwgbWluLCBtdWwsIHNpbiwgc3ViLCB2ZWMyLCB2ZWMzIH0gZnJvbSAnLi4vLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vLyBTZWU6IGh0dHBzOi8vY2FzdWFsLWVmZmVjdHMuY29tL3Jlc2VhcmNoL1d5bWFuMjAxN0hhc2hlZC9pbmRleC5odG1sXG5cbmNvbnN0IEFMUEhBX0hBU0hfU0NBTEUgPSAwLjA1OyAvLyBEZXJpdmVkIGZyb20gdHJpYWxzIG9ubHksIGFuZCBtYXkgYmUgY2hhbmdlZC5cblxuY29uc3QgaGFzaDJEID0gLypAX19QVVJFX18qLyBGbiggKCBbIHZhbHVlIF0gKSA9PiB7XG5cblx0cmV0dXJuIGZyYWN0KCBtdWwoIDEuMGU0LCBzaW4oIG11bCggMTcuMCwgdmFsdWUueCApLmFkZCggbXVsKCAwLjEsIHZhbHVlLnkgKSApICkgKS5tdWwoIGFkZCggMC4xLCBhYnMoIHNpbiggbXVsKCAxMy4wLCB2YWx1ZS55ICkuYWRkKCB2YWx1ZS54ICkgKSApICkgKSApO1xuXG59ICk7XG5cbmNvbnN0IGhhc2gzRCA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyB2YWx1ZSBdICkgPT4ge1xuXG5cdHJldHVybiBoYXNoMkQoIHZlYzIoIGhhc2gyRCggdmFsdWUueHkgKSwgdmFsdWUueiApICk7XG5cbn0gKTtcblxuY29uc3QgZ2V0QWxwaGFIYXNoVGhyZXNob2xkID0gLypAX19QVVJFX18qLyBGbiggKCBbIHBvc2l0aW9uIF0gKSA9PiB7XG5cblx0Ly8gRmluZCB0aGUgZGlzY3JldGl6ZWQgZGVyaXZhdGl2ZXMgb2Ygb3VyIGNvb3JkaW5hdGVzXG5cdGNvbnN0IG1heERlcml2ID0gbWF4KFxuXHRcdGxlbmd0aCggZEZkeCggcG9zaXRpb24ueHl6ICkgKSxcblx0XHRsZW5ndGgoIGRGZHkoIHBvc2l0aW9uLnh5eiApIClcblx0KTtcblxuXHRjb25zdCBwaXhTY2FsZSA9IGZsb2F0KCAxICkuZGl2KCBmbG9hdCggQUxQSEFfSEFTSF9TQ0FMRSApLm11bCggbWF4RGVyaXYgKSApLnRvVmFyKCAncGl4U2NhbGUnICk7XG5cblx0Ly8gRmluZCB0d28gbmVhcmVzdCBsb2ctZGlzY3JldGl6ZWQgbm9pc2Ugc2NhbGVzXG5cdGNvbnN0IHBpeFNjYWxlcyA9IHZlYzIoXG5cdFx0ZXhwMiggZmxvb3IoIGxvZzIoIHBpeFNjYWxlICkgKSApLFxuXHRcdGV4cDIoIGNlaWwoIGxvZzIoIHBpeFNjYWxlICkgKSApXG5cdCk7XG5cblx0Ly8gQ29tcHV0ZSBhbHBoYSB0aHJlc2hvbGRzIGF0IG91ciB0d28gbm9pc2Ugc2NhbGVzXG5cdGNvbnN0IGFscGhhID0gdmVjMihcblx0XHRoYXNoM0QoIGZsb29yKCBwaXhTY2FsZXMueC5tdWwoIHBvc2l0aW9uLnh5eiApICkgKSxcblx0XHRoYXNoM0QoIGZsb29yKCBwaXhTY2FsZXMueS5tdWwoIHBvc2l0aW9uLnh5eiApICkgKSxcblx0KTtcblxuXHQvLyBGYWN0b3IgdG8gaW50ZXJwb2xhdGUgbGVycCB3aXRoXG5cdGNvbnN0IGxlcnBGYWN0b3IgPSBmcmFjdCggbG9nMiggcGl4U2NhbGUgKSApO1xuXG5cdC8vIEludGVycG9sYXRlIGFscGhhIHRocmVzaG9sZCBmcm9tIG5vaXNlIGF0IHR3byBzY2FsZXNcblx0Y29uc3QgeCA9IGFkZCggbXVsKCBsZXJwRmFjdG9yLm9uZU1pbnVzKCksIGFscGhhLnggKSwgbXVsKCBsZXJwRmFjdG9yLCBhbHBoYS55ICkgKTtcblxuXHQvLyBQYXNzIGludG8gQ0RGIHRvIGNvbXB1dGUgdW5pZm9ybWx5IGRpc3RyaWIgdGhyZXNob2xkXG5cdGNvbnN0IGEgPSBtaW4oIGxlcnBGYWN0b3IsIGxlcnBGYWN0b3Iub25lTWludXMoKSApO1xuXHRjb25zdCBjYXNlcyA9IHZlYzMoXG5cdFx0eC5tdWwoIHggKS5kaXYoIG11bCggMi4wLCBhICkubXVsKCBzdWIoIDEuMCwgYSApICkgKSxcblx0XHR4LnN1YiggbXVsKCAwLjUsIGEgKSApLmRpdiggc3ViKCAxLjAsIGEgKSApLFxuXHRcdHN1YiggMS4wLCBzdWIoIDEuMCwgeCApLm11bCggc3ViKCAxLjAsIHggKSApLmRpdiggbXVsKCAyLjAsIGEgKS5tdWwoIHN1YiggMS4wLCBhICkgKSApICkgKTtcblxuXHQvLyBGaW5kIG91ciBmaW5hbCwgdW5pZm9ybWx5IGRpc3RyaWJ1dGVkIGFscGhhIHRocmVzaG9sZCAozrHPhClcblx0Y29uc3QgdGhyZXNob2xkID0geC5sZXNzVGhhbiggYS5vbmVNaW51cygpICkuc2VsZWN0KCB4Lmxlc3NUaGFuKCBhICkuc2VsZWN0KCBjYXNlcy54LCBjYXNlcy55ICksIGNhc2VzLnogKTtcblxuXHQvLyBBdm9pZHMgzrHPhCA9PSAwLiBDb3VsZCBhbHNvIGRvIM6xz4QgPTEtzrHPhFxuXHRyZXR1cm4gY2xhbXAoIHRocmVzaG9sZCwgMS4wZS02LCAxLjAgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnZ2V0QWxwaGFIYXNoVGhyZXNob2xkJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncG9zaXRpb24nLCB0eXBlOiAndmVjMycgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFscGhhSGFzaFRocmVzaG9sZDtcbiIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi4vTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgTm9ybWFsQmxlbmRpbmcgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQgeyBnZXROb2RlQ2hpbGRyZW4sIGdldENhY2hlS2V5IH0gZnJvbSAnLi4vLi4vbm9kZXMvY29yZS9Ob2RlVXRpbHMuanMnO1xuaW1wb3J0IHsgYXR0cmlidXRlIH0gZnJvbSAnLi4vLi4vbm9kZXMvY29yZS9BdHRyaWJ1dGVOb2RlLmpzJztcbmltcG9ydCB7IG91dHB1dCwgZGlmZnVzZUNvbG9yLCBlbWlzc2l2ZSwgdmFyeWluZ1Byb3BlcnR5IH0gZnJvbSAnLi4vLi4vbm9kZXMvY29yZS9Qcm9wZXJ0eU5vZGUuanMnO1xuaW1wb3J0IHsgbWF0ZXJpYWxBbHBoYVRlc3QsIG1hdGVyaWFsQ29sb3IsIG1hdGVyaWFsT3BhY2l0eSwgbWF0ZXJpYWxFbWlzc2l2ZSwgbWF0ZXJpYWxOb3JtYWwsIG1hdGVyaWFsTGlnaHRNYXAsIG1hdGVyaWFsQU8gfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTWF0ZXJpYWxOb2RlLmpzJztcbmltcG9ydCB7IG1vZGVsVmlld1Byb2plY3Rpb24gfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTW9kZWxWaWV3UHJvamVjdGlvbk5vZGUuanMnO1xuaW1wb3J0IHsgbm9ybWFsTG9jYWwgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTm9ybWFsLmpzJztcbmltcG9ydCB7IGluc3RhbmNlZE1lc2ggfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvSW5zdGFuY2VkTWVzaE5vZGUuanMnO1xuaW1wb3J0IHsgYmF0Y2ggfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvQmF0Y2hOb2RlLmpzJztcbmltcG9ydCB7IG1hdGVyaWFsUmVmZXJlbmNlIH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL01hdGVyaWFsUmVmZXJlbmNlTm9kZS5qcyc7XG5pbXBvcnQgeyBwb3NpdGlvbkxvY2FsLCBwb3NpdGlvblZpZXcgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgc2tpbm5pbmdSZWZlcmVuY2UgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvU2tpbm5pbmdOb2RlLmpzJztcbmltcG9ydCB7IG1vcnBoUmVmZXJlbmNlIH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL01vcnBoTm9kZS5qcyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi9ub2Rlcy9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IGZsb2F0LCB2ZWMzLCB2ZWM0IH0gZnJvbSAnLi4vLi4vbm9kZXMvdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IEFPTm9kZSBmcm9tICcuLi8uLi9ub2Rlcy9saWdodGluZy9BT05vZGUuanMnO1xuaW1wb3J0IHsgbGlnaHRpbmdDb250ZXh0IH0gZnJvbSAnLi4vLi4vbm9kZXMvbGlnaHRpbmcvTGlnaHRpbmdDb250ZXh0Tm9kZS5qcyc7XG5pbXBvcnQgSXJyYWRpYW5jZU5vZGUgZnJvbSAnLi4vLi4vbm9kZXMvbGlnaHRpbmcvSXJyYWRpYW5jZU5vZGUuanMnO1xuaW1wb3J0IHsgZGVwdGgsIHZpZXdaVG9Mb2dhcml0aG1pY0RlcHRoLCB2aWV3WlRvT3J0aG9ncmFwaGljRGVwdGggfSBmcm9tICcuLi8uLi9ub2Rlcy9kaXNwbGF5L1ZpZXdwb3J0RGVwdGhOb2RlLmpzJztcbmltcG9ydCB7IGNhbWVyYUZhciwgY2FtZXJhTmVhciwgY2FtZXJhUHJvamVjdGlvbk1hdHJpeCB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9DYW1lcmEuanMnO1xuaW1wb3J0IHsgY2xpcHBpbmcsIGNsaXBwaW5nQWxwaGEsIGhhcmR3YXJlQ2xpcHBpbmcgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvQ2xpcHBpbmdOb2RlLmpzJztcbmltcG9ydCBOb2RlTWF0ZXJpYWxPYnNlcnZlciBmcm9tICcuL21hbmFnZXIvTm9kZU1hdGVyaWFsT2JzZXJ2ZXIuanMnO1xuaW1wb3J0IGdldEFscGhhSGFzaFRocmVzaG9sZCBmcm9tICcuLi8uLi9ub2Rlcy9mdW5jdGlvbnMvbWF0ZXJpYWwvZ2V0QWxwaGFIYXNoVGhyZXNob2xkLmpzJztcbmltcG9ydCB7IG1vZGVsVmlld01hdHJpeCB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9Nb2RlbE5vZGUuanMnO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBub2RlIG1hdGVyaWFscy5cbiAqXG4gKiBAYXVnbWVudHMgTWF0ZXJpYWxcbiAqL1xuY2xhc3MgTm9kZU1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTm9kZU1hdGVyaWFsJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgdGhlIG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEB0eXBlIHtzdHJpbmd9XG5cdCAqL1xuXHRnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnR5cGU7XG5cblx0fVxuXG5cdHNldCB0eXBlKCBfdmFsdWUgKSB7IC8qICovIH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlIG1hdGVyaWFsLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc05vZGVNYXRlcmlhbCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoaXMgbWF0ZXJpYWwgaXMgYWZmZWN0ZWQgYnkgZm9nIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmZvZyA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoaXMgbWF0ZXJpYWwgaXMgYWZmZWN0ZWQgYnkgbGlnaHRzIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5saWdodHMgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhpcyBtYXRlcmlhbCB1c2VzIGhhcmR3YXJlIGNsaXBwaW5nIG9yIG5vdC5cblx0XHQgKiBUaGlzIHByb3BlcnR5IGlzIG1hbmFnZWQgYnkgdGhlIGVuZ2luZSBhbmQgc2hvdWxkIG5vdCBiZVxuXHRcdCAqIG1vZGlmaWVkIGJ5IGFwcHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuaGFyZHdhcmVDbGlwcGluZyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogTm9kZSBtYXRlcmlhbHMgd2hpY2ggc2V0IHRoZWlyIGBsaWdodHNgIHByb3BlcnR5IHRvIGB0cnVlYFxuXHRcdCAqIGFyZSBhZmZlY3RlZCBieSBhbGwgbGlnaHRzIG9mIHRoZSBzY2VuZS4gU29tZXRpbWVzIHNlbGVjdGl2ZVxuXHRcdCAqIGxpZ2h0aW5nIGlzIHdhbnRlZCB3aGljaCBtZWFucyBvbmx5IF9zb21lXyBsaWdodHMgaW4gdGhlIHNjZW5lXG5cdFx0ICogYWZmZWN0IGEgbWF0ZXJpYWwuIFRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IGNyZWF0aW5nIGFuIGluc3RhbmNlXG5cdFx0ICogb2Yge0BsaW5rIExpZ2h0c05vZGV9IHdpdGggYSBsaXN0IG9mIHNlbGVjdGl2ZVxuXHRcdCAqIGxpZ2h0cyBhbmQgYXNzaWduIHRoZSBub2RlIHRvIHRoaXMgcHJvcGVydHkuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIGNvbnN0IGN1c3RvbUxpZ2h0c05vZGUgPSBsaWdodHMoIFsgbGlnaHQxLCBsaWdodDIgXSApO1xuXHRcdCAqIG1hdGVyaWFsLmxpZ2h0c05vZGUgPSBjdXN0b21MaWdodHNOb2RlO1xuXHRcdCAqIGBgYFxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9MaWdodHNOb2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0c05vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGVudmlyb25tZW50IG9mIG5vZGUgbWF0ZXJpYWxzIGNhbiBiZSBkZWZpbmVkIGJ5IGFuIGVudmlyb25tZW50XG5cdFx0ICogbWFwIGFzc2lnbmVkIHRvIHRoZSBgZW52TWFwYCBwcm9wZXJ0eSBvciBieSBgU2NlbmUuZW52aXJvbm1lbnRgXG5cdFx0ICogaWYgdGhlIG5vZGUgbWF0ZXJpYWwgaXMgYSBQQlIgbWF0ZXJpYWwuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG8gb3ZlcndyaXRlXG5cdFx0ICogdGhlIGRlZmF1bHQgYmVoYXZpb3IgYW5kIGRlZmluZSB0aGUgZW52aXJvbm1lbnQgd2l0aCBhIGN1c3RvbSBub2RlLlxuXHRcdCAqXG5cdFx0ICogYGBganNcblx0XHQgKiBtYXRlcmlhbC5lbnZOb2RlID0gcG1yZW1UZXh0dXJlKCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXHRcdCAqIGBgYFxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPHZlYzM+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmVudk5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpZ2h0aW5nIG9mIG5vZGUgbWF0ZXJpYWxzIG1pZ2h0IGJlIGluZmx1ZW5jZWQgYnkgYW1iaWVudCBvY2NsdXNpb24uXG5cdFx0ICogVGhlIGRlZmF1bHQgQU8gaXMgaW5mZXJyZWQgZnJvbSBhbiBhbWJpZW50IG9jY2x1c2lvbiBtYXAgYXNzaWduZWQgdG8gYGFvTWFwYFxuXHRcdCAqIGFuZCB0aGUgcmVzcGVjdGl2ZSBgYW9NYXBJbnRlbnNpdHlgLiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZVxuXHRcdCAqIHRoZSBkZWZhdWx0IGFuZCBkZWZpbmUgdGhlIGFtYmllbnQgb2NjbHVzaW9uIHdpdGggYSBjdXN0b20gbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBkaWZmdXNlIGNvbG9yIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWVzIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxBT30uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmFvTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGlmZnVzZSBjb2xvciBvZiBub2RlIG1hdGVyaWFscyBpcyBieSBkZWZhdWx0IGluZmVycmVkIGZyb20gdGhlXG5cdFx0ICogYGNvbG9yYCBhbmQgYG1hcGAgcHJvcGVydGllcy4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSBkaWZmdXNlIGNvbG9yIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIG1hdGVyaWFsLmNvbG9yTm9kZSA9IGNvbG9yKCAweGZmMDAwMCApOyAvLyBkZWZpbmUgcmVkIGNvbG9yXG5cdFx0ICogYGBgXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIGRpZmZ1c2UgY29sb3IgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZXMgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbENvbG9yfS5cblx0XHQgKlxuXHRcdCAqIGBgYGpzXG5cdFx0ICogbWF0ZXJpYWwuY29sb3JOb2RlID0gbWF0ZXJpYWxDb2xvci5tdWwoIGNvbG9yKCAweGZmMDAwMCApICk7IC8vIGdpdmUgZGlmZnVzZSBjb2xvcnMgYSByZWQgdGludFxuXHRcdCAqIGBgYFxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPHZlYzM+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9ybWFscyBvZiBub2RlIG1hdGVyaWFscyBhcmUgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgbm9ybWFsTWFwYC9gbm9ybWFsU2NhbGVgXG5cdFx0ICogb3IgYGJ1bXBNYXBgL2BidW1wU2NhbGVgIHByb3BlcnRpZXMuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0XG5cdFx0ICogYW5kIGRlZmluZSB0aGUgbm9ybWFscyB3aXRoIGEgbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBub3JtYWxzIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nIHZhbHVlcyBpbnN0ZWFkLFxuXHRcdCAqIHVzZSB7QGxpbmsgbWF0ZXJpYWxOb3JtYWx9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPHZlYzM+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbE5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG9wYWNpdHkgb2Ygbm9kZSBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgb3BhY2l0eWBcblx0XHQgKiBhbmQgYGFscGhhTWFwYCBwcm9wZXJ0aWVzLiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuZCBkZWZpbmUgdGhlIG9wYWNpdHkgd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgbm9ybWFscyBidXQgbW9kaWZ5IHRoZSBleGlzdGluZ1xuXHRcdCAqIHZhbHVlIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxPcGFjaXR5fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMub3BhY2l0eU5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBub2RlIGNhbiBiZSB1c2VkIHRvIHRvIGltcGxlbWVudCBhIHZhcmlldHkgb2YgZmlsdGVyLWxpa2UgZWZmZWN0cy4gVGhlIGlkZWEgaXNcblx0XHQgKiB0byBzdG9yZSB0aGUgY3VycmVudCByZW5kZXJpbmcgaW50byBhIHRleHR1cmUgZS5nLiB2aWEgYHZpZXdwb3J0U2hhcmVkVGV4dHVyZSgpYCwgdXNlIGl0XG5cdFx0ICogdG8gY3JlYXRlIGFuIGFyYml0cmFyeSBlZmZlY3QgYW5kIHRoZW4gYXNzaWduIHRoZSBub2RlIGNvbXBvc2l0aW9uIHRvIHRoaXMgcHJvcGVydHkuXG5cdFx0ICogRXZlcnl0aGluZyBiZWhpbmQgdGhlIG9iamVjdCB1c2luZyB0aGlzIG1hdGVyaWFsIHdpbGwgbm93IGJlIGFmZmVjdGVkIGJ5IGEgZmlsdGVyLlxuXHRcdCAqXG5cdFx0ICogYGBganNcblx0XHQgKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBOb2RlTWF0ZXJpYWwoKVxuXHRcdCAqIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblx0XHQgKlxuXHRcdCAqIC8vIGV2ZXJ5dGhpbmcgYmVoaW5kIHRoZSBvYmplY3Qgd2lsbCBiZSBtb25vY2hyb21hdGljXG5cdFx0ICogbWF0ZXJpYWwuYmFja2Ryb3BOb2RlID0gc2F0dXJhdGlvbiggdmlld3BvcnRTaGFyZWRUZXh0dXJlKCkucmdiLCAwICk7XG5cdFx0ICogYGBgXG5cdFx0ICpcblx0XHQgKiBCYWNrZHJvcCBjb21wdXRhdGlvbnMgYXJlIHBhcnQgb2YgdGhlIGxpZ2h0aW5nIHNvIG9ubHkgbGl0IG1hdGVyaWFscyBjYW4gdXNlIHRoaXMgcHJvcGVydHkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2Ryb3BOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgbm9kZSBhbGxvd3MgdG8gbW9kdWxhdGUgdGhlIGluZmx1ZW5jZSBvZiBgYmFja2Ryb3BOb2RlYCB0byB0aGUgb3V0Z29pbmcgbGlnaHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJhY2tkcm9wQWxwaGFOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbHBoYSB0ZXN0IG9mIG5vZGUgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYGFscGhhVGVzdGBcblx0XHQgKiBwcm9wZXJ0eS4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHQgYW5kIGRlZmluZSB0aGVcblx0XHQgKiBhbHBoYSB0ZXN0IHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIGFscGhhIHRlc3QgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsQWxwaGFUZXN0fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYWxwaGFUZXN0Tm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbG9jYWwgdmVydGV4IHBvc2l0aW9ucyBhcmUgY29tcHV0ZWQgYmFzZWQgb24gbXVsdGlwbGUgZmFjdG9ycyBsaWtlIHRoZVxuXHRcdCAqIGF0dHJpYnV0ZSBkYXRhLCBtb3JwaGluZyBvciBza2lubmluZy4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGVcblx0XHQgKiB0aGUgZGVmYXVsdCBhbmQgZGVmaW5lIGxvY2FsIHZlcnRleCBwb3NpdGlvbnMgd2l0aCBub2RlcyBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSB2ZXJ0ZXggcG9zaXRpb25zIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWVzIGluc3RlYWQsIHVzZSB7QGxpbmsgcG9zaXRpb25Mb2NhbH0uXG5cdFx0ICpcblx0XHQgKmBgYGpzXG5cdFx0ICogbWF0ZXJpYWwucG9zaXRpb25Ob2RlID0gcG9zaXRpb25Mb2NhbC5hZGQoIGRpc3BsYWNlICk7XG5cdFx0ICogYGBgXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucG9zaXRpb25Ob2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgbm9kZSBwcm9wZXJ0eSBpcyBpbnRlbmRlZCBmb3IgbG9naWMgd2hpY2ggbW9kaWZpZXMgZ2VvbWV0cnkgZGF0YSBvbmNlIG9yIHBlciBhbmltYXRpb24gc3RlcC5cblx0XHQgKiBBcHBzIHVzdWFsbHkgcGxhY2Ugc3VjaCBsb2dpYyByYW5kb21seSBpbiBpbml0aWFsaXphdGlvbiByb3V0aW5lcyBvciBpbiB0aGUgYW5pbWF0aW9uIGxvb3AuXG5cdFx0ICogYGdlb21ldHJ5Tm9kZWAgaXMgaW50ZW5kZWQgYXMgYSBkZWRpY2F0ZWQgQVBJIHNvIHRoZXJlIGlzIGFuIGludGVuZGVkIHNwb3Qgd2hlcmUgZ2VvbWV0cnkgbW9kaWZpY2F0aW9uc1xuXHRcdCAqIGNhbiBiZSBpbXBsZW1lbnRlZC5cblx0XHQgKlxuXHRcdCAqIFRoZSBpZGVhIGlzIHRvIGFzc2lnbiBhIGBGbmAgZGVmaW5pdGlvbiB0aGF0IGhvbGRzIHRoZSBnZW9tZXRyeSBtb2RpZmljYXRpb24gbG9naWMuIEEgdHlwaWNhbCBleGFtcGxlXG5cdFx0ICogd291bGQgYmUgYSBHUFUgYmFzZWQgcGFydGljbGUgc3lzdGVtIHRoYXQgcHJvdmlkZXMgYSBub2RlIG1hdGVyaWFsIGZvciB1c2FnZSBvbiBhcHAgbGV2ZWwuIFRoZSBwYXJ0aWNsZVxuXHRcdCAqIHNpbXVsYXRpb24gd291bGQgYmUgaW1wbGVtZW50ZWQgYXMgY29tcHV0ZSBzaGFkZXJzIGFuZCBtYW5hZ2VkIGluc2lkZSBhIGBGbmAgZnVuY3Rpb24uIFRoaXMgZnVuY3Rpb24gaXNcblx0XHQgKiBldmVudHVhbGx5IGFzc2lnbmVkIHRvIGBnZW9tZXRyeU5vZGVgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9GdW5jdGlvbn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5nZW9tZXRyeU5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsb3dzIHRvIG92ZXJ3cml0ZSBkZXB0aCB2YWx1ZXMgaW4gdGhlIGZyYWdtZW50IHNoYWRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZGVwdGhOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbG93cyB0byBvdmVyd3JpdGUgdGhlIHBvc2l0aW9uIHVzZWQgZm9yIHNoYWRvdyBtYXAgcmVuZGVyaW5nIHdoaWNoXG5cdFx0ICogaXMgYnkgZGVmYXVsdCB7QGxpbmsgcG9zaXRpb25Xb3JsZH0sIHRoZSB2ZXJ0ZXggcG9zaXRpb25cblx0XHQgKiBpbiB3b3JsZCBzcGFjZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2hhZG93UG9zaXRpb25Ob2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgbm9kZSBjYW4gYmUgdXNlZCB0byBpbmZsdWVuY2UgaG93IGFuIG9iamVjdCB1c2luZyB0aGlzIG5vZGUgbWF0ZXJpYWxcblx0XHQgKiByZWNlaXZlIHNoYWRvd3MuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIGNvbnN0IHRvdGFsU2hhZG93cyA9IGZsb2F0KCAxICkudG9WYXIoKTtcblx0XHQgKiBtYXRlcmlhbC5yZWNlaXZlZFNoYWRvd05vZGUgPSBGbiggKCBbIHNoYWRvdyBdICkgPT4ge1xuXHRcdCAqIFx0dG90YWxTaGFkb3dzLm11bEFzc2lnbiggc2hhZG93ICk7XG5cdFx0ICogXHQvL3JldHVybiBmbG9hdCggMSApOyAvLyBieXBhc3MgcmVjZWl2ZWQgc2hhZG93c1xuXHRcdCAqIFx0cmV0dXJuIHNoYWRvdy5taXgoIGNvbG9yKCAweGZmMDAwMCApLCAxICk7IC8vIG1vZGlmeSBzaGFkb3cgY29sb3Jcblx0XHQgKiB9ICk7XG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7PyhGdW5jdGlvbnxGdW5jdGlvbk5vZGU8dmVjND4pfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnJlY2VpdmVkU2hhZG93Tm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIG5vZGUgY2FuIGJlIHVzZWQgdG8gaW5mbHVlbmNlIGhvdyBhbiBvYmplY3QgdXNpbmcgdGhpcyBub2RlIG1hdGVyaWFsXG5cdFx0ICogY2FzdHMgc2hhZG93cy4gVG8gYXBwbHkgYSBjb2xvciB0byBzaGFkb3dzLCB5b3UgY2FuIHNpbXBseSBkbzpcblx0XHQgKlxuXHRcdCAqIGBgYGpzXG5cdFx0ICogbWF0ZXJpYWwuY2FzdFNoYWRvd05vZGUgPSB2ZWM0KCAxLCAwLCAwLCAxICk7XG5cdFx0ICogYGBgXG5cdFx0ICpcblx0XHQgKiBXaGljaCBjYW4gYmUgbmljZSB0byBmYWtlIGNvbG9yZWQgc2hhZG93cyBvZiBzZW1pLXRyYW5zcGFyZW50IG9iamVjdHMuIEl0XG5cdFx0ICogaXMgYWxzbyBjb21tb24gdG8gdXNlIHRoZSBwcm9wZXJ0eSB3aXRoIGBGbmAgZnVuY3Rpb24gc28gY2hlY2tzIGFyZSBwZXJmb3JtZWRcblx0XHQgKiBwZXIgZnJhZ21lbnQuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIG1hdGVyaWFsQ3VzdG9tU2hhZG93LmNhc3RTaGFkb3dOb2RlID0gRm4oICgpID0+IHtcblx0XHQgKiBcdGhhc2goIHZlcnRleEluZGV4ICkuZ3JlYXRlclRoYW4oIDAuNSApLmRpc2NhcmQoKTtcblx0XHQgKiBcdHJldHVybiBtYXRlcmlhbENvbG9yO1xuXHRcdCAqIH0gKSgpO1xuXHRcdCAqICBgYGBcblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTx2ZWM0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jYXN0U2hhZG93Tm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIG5vZGUgY2FuIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSBmaW5hbCBvdXRwdXQgb2YgdGhlIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogVE9ETzogRXhwbGFpbiB0aGUgZGlmZmVyZW5jZXMgdG8gYGZyYWdtZW50Tm9kZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjND59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMub3V0cHV0Tm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBNUlQgY29uZmlndXJhdGlvbiBpcyBkb25lIG9uIHJlbmRlcmVyIG9yIHBhc3MgbGV2ZWwuIFRoaXMgbm9kZSBhbGxvd3MgdG9cblx0XHQgKiBvdmVyd3JpdGUgd2hhdCB2YWx1ZXMgYXJlIHdyaXR0ZW4gaW50byBNUlQgdGFyZ2V0cyBvbiBtYXRlcmlhbCBsZXZlbC4gVGhpc1xuXHRcdCAqIGNhbiBiZSB1c2VmdWwgZm9yIGltcGxlbWVudGluZyBzZWxlY3RpdmUgRlggZmVhdHVyZXMgdGhhdCBzaG91bGQgb25seSBhZmZlY3Rcblx0XHQgKiBzcGVjaWZpYyBvYmplY3RzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9NUlROb2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm1ydE5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBub2RlIHByb3BlcnR5IGNhbiBiZSB1c2VkIGlmIHlvdSBuZWVkIGNvbXBsZXRlIGZyZWVkb20gaW4gaW1wbGVtZW50aW5nXG5cdFx0ICogdGhlIGZyYWdtZW50IHNoYWRlci4gQXNzaWduaW5nIGEgbm9kZSB3aWxsIHJlcGxhY2UgdGhlIGJ1aWx0LWluIG1hdGVyaWFsXG5cdFx0ICogbG9naWMgdXNlZCBpbiB0aGUgZnJhZ21lbnQgc3RhZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjND59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZnJhZ21lbnROb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgbm9kZSBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBpZiB5b3UgbmVlZCBjb21wbGV0ZSBmcmVlZG9tIGluIGltcGxlbWVudGluZ1xuXHRcdCAqIHRoZSB2ZXJ0ZXggc2hhZGVyLiBBc3NpZ25pbmcgYSBub2RlIHdpbGwgcmVwbGFjZSB0aGUgYnVpbHQtaW4gbWF0ZXJpYWwgbG9naWNcblx0XHQgKiB1c2VkIGluIHRoZSB2ZXJ0ZXggc3RhZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjND59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudmVydGV4Tm9kZSA9IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbGxvd3MgdG8gZGVmaW5lIGEgY3VzdG9tIGNhY2hlIGtleSB0aGF0IGluZmx1ZW5jZSB0aGUgbWF0ZXJpYWwga2V5IGNvbXB1dGF0aW9uXG5cdCAqIGZvciByZW5kZXIgb2JqZWN0cy5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgY3VzdG9tIGNhY2hlIGtleS5cblx0ICovXG5cdGN1c3RvbVByb2dyYW1DYWNoZUtleSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnR5cGUgKyBnZXRDYWNoZUtleSggdGhpcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQnVpbGRzIHRoaXMgbWF0ZXJpYWwgd2l0aCB0aGUgZ2l2ZW4gbm9kZSBidWlsZGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0YnVpbGQoIGJ1aWxkZXIgKSB7XG5cblx0XHR0aGlzLnNldHVwKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgYSBub2RlIG1hdGVyaWFsIG9ic2VydmVyIHdpdGggdGhlIGdpdmVuIGJ1aWxkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge05vZGVNYXRlcmlhbE9ic2VydmVyfSBUaGUgbm9kZSBtYXRlcmlhbCBvYnNlcnZlci5cblx0ICovXG5cdHNldHVwT2JzZXJ2ZXIoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gbmV3IE5vZGVNYXRlcmlhbE9ic2VydmVyKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIHZlcnRleCBhbmQgZnJhZ21lbnQgc3RhZ2Ugb2YgdGhpcyBub2RlIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRidWlsZGVyLmNvbnRleHQuc2V0dXBOb3JtYWwgPSAoKSA9PiB0aGlzLnNldHVwTm9ybWFsKCBidWlsZGVyICk7XG5cdFx0YnVpbGRlci5jb250ZXh0LnNldHVwUG9zaXRpb25WaWV3ID0gKCkgPT4gdGhpcy5zZXR1cFBvc2l0aW9uVmlldyggYnVpbGRlciApO1xuXHRcdGJ1aWxkZXIuY29udGV4dC5zZXR1cE1vZGVsVmlld1Byb2plY3Rpb24gPSAoKSA9PiB0aGlzLnNldHVwTW9kZWxWaWV3UHJvamVjdGlvbiggYnVpbGRlciApO1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSBidWlsZGVyLnJlbmRlcmVyO1xuXHRcdGNvbnN0IHJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0Ly8gPCBWRVJURVggU1RBR0UgPlxuXG5cdFx0YnVpbGRlci5hZGRTdGFjaygpO1xuXG5cdFx0Y29uc3QgdmVydGV4Tm9kZSA9IHRoaXMudmVydGV4Tm9kZSB8fCB0aGlzLnNldHVwVmVydGV4KCBidWlsZGVyICk7XG5cblx0XHRidWlsZGVyLnN0YWNrLm91dHB1dE5vZGUgPSB2ZXJ0ZXhOb2RlO1xuXG5cdFx0dGhpcy5zZXR1cEhhcmR3YXJlQ2xpcHBpbmcoIGJ1aWxkZXIgKTtcblxuXHRcdGlmICggdGhpcy5nZW9tZXRyeU5vZGUgIT09IG51bGwgKSB7XG5cblx0XHRcdGJ1aWxkZXIuc3RhY2sub3V0cHV0Tm9kZSA9IGJ1aWxkZXIuc3RhY2sub3V0cHV0Tm9kZS5ieXBhc3MoIHRoaXMuZ2VvbWV0cnlOb2RlICk7XG5cblx0XHR9XG5cblx0XHRidWlsZGVyLmFkZEZsb3coICd2ZXJ0ZXgnLCBidWlsZGVyLnJlbW92ZVN0YWNrKCkgKTtcblxuXHRcdC8vIDwgRlJBR01FTlQgU1RBR0UgPlxuXG5cdFx0YnVpbGRlci5hZGRTdGFjaygpO1xuXG5cdFx0bGV0IHJlc3VsdE5vZGU7XG5cblx0XHRjb25zdCBjbGlwcGluZ05vZGUgPSB0aGlzLnNldHVwQ2xpcHBpbmcoIGJ1aWxkZXIgKTtcblxuXHRcdGlmICggdGhpcy5kZXB0aFdyaXRlID09PSB0cnVlIHx8IHRoaXMuZGVwdGhUZXN0ID09PSB0cnVlICkge1xuXG5cdFx0XHQvLyBvbmx5IHdyaXRlIGRlcHRoIGlmIGRlcHRoIGJ1ZmZlciBpcyBjb25maWd1cmVkXG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyID09PSB0cnVlICkgdGhpcy5zZXR1cERlcHRoKCBidWlsZGVyICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCByZW5kZXJlci5kZXB0aCA9PT0gdHJ1ZSApIHRoaXMuc2V0dXBEZXB0aCggYnVpbGRlciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZnJhZ21lbnROb2RlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnNldHVwRGlmZnVzZUNvbG9yKCBidWlsZGVyICk7XG5cdFx0XHR0aGlzLnNldHVwVmFyaWFudHMoIGJ1aWxkZXIgKTtcblxuXHRcdFx0Y29uc3Qgb3V0Z29pbmdMaWdodE5vZGUgPSB0aGlzLnNldHVwTGlnaHRpbmcoIGJ1aWxkZXIgKTtcblxuXHRcdFx0aWYgKCBjbGlwcGluZ05vZGUgIT09IG51bGwgKSBidWlsZGVyLnN0YWNrLmFkZCggY2xpcHBpbmdOb2RlICk7XG5cblx0XHRcdC8vIGZvcmNlIHVuc2lnbmVkIGZsb2F0cyAtIHVzZWZ1bCBmb3IgUmVuZGVyVGFyZ2V0c1xuXG5cdFx0XHRjb25zdCBiYXNpY091dHB1dCA9IHZlYzQoIG91dGdvaW5nTGlnaHROb2RlLCBkaWZmdXNlQ29sb3IuYSApLm1heCggMCApO1xuXG5cdFx0XHRyZXN1bHROb2RlID0gdGhpcy5zZXR1cE91dHB1dCggYnVpbGRlciwgYmFzaWNPdXRwdXQgKTtcblxuXHRcdFx0Ly8gT1VUUFVUIE5PREVcblxuXHRcdFx0b3V0cHV0LmFzc2lnbiggcmVzdWx0Tm9kZSApO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRjb25zdCBpc0N1c3RvbU91dHB1dCA9IHRoaXMub3V0cHV0Tm9kZSAhPT0gbnVsbDtcblxuXHRcdFx0aWYgKCBpc0N1c3RvbU91dHB1dCApIHJlc3VsdE5vZGUgPSB0aGlzLm91dHB1dE5vZGU7XG5cblx0XHRcdC8vIE1SVFxuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zdCBtcnQgPSByZW5kZXJlci5nZXRNUlQoKTtcblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWxNUlQgPSB0aGlzLm1ydE5vZGU7XG5cblx0XHRcdFx0aWYgKCBtcnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGlzQ3VzdG9tT3V0cHV0ICkgb3V0cHV0LmFzc2lnbiggcmVzdWx0Tm9kZSApO1xuXG5cdFx0XHRcdFx0cmVzdWx0Tm9kZSA9IG1ydDtcblxuXHRcdFx0XHRcdGlmICggbWF0ZXJpYWxNUlQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdHJlc3VsdE5vZGUgPSBtcnQubWVyZ2UoIG1hdGVyaWFsTVJUICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxNUlQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRyZXN1bHROb2RlID0gbWF0ZXJpYWxNUlQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsZXQgZnJhZ21lbnROb2RlID0gdGhpcy5mcmFnbWVudE5vZGU7XG5cblx0XHRcdGlmICggZnJhZ21lbnROb2RlLmlzT3V0cHV0U3RydWN0Tm9kZSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRmcmFnbWVudE5vZGUgPSB2ZWM0KCBmcmFnbWVudE5vZGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHROb2RlID0gdGhpcy5zZXR1cE91dHB1dCggYnVpbGRlciwgZnJhZ21lbnROb2RlICk7XG5cblx0XHR9XG5cblx0XHRidWlsZGVyLnN0YWNrLm91dHB1dE5vZGUgPSByZXN1bHROb2RlO1xuXG5cdFx0YnVpbGRlci5hZGRGbG93KCAnZnJhZ21lbnQnLCBidWlsZGVyLnJlbW92ZVN0YWNrKCkgKTtcblxuXHRcdC8vIDwgT0JTRVJWRVIgPlxuXG5cdFx0YnVpbGRlci5vYnNlcnZlciA9IHRoaXMuc2V0dXBPYnNlcnZlciggYnVpbGRlciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBjbGlwcGluZyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtDbGlwcGluZ05vZGV9IFRoZSBjbGlwcGluZyBub2RlLlxuXHQgKi9cblx0c2V0dXBDbGlwcGluZyggYnVpbGRlciApIHtcblxuXHRcdGlmICggYnVpbGRlci5jbGlwcGluZ0NvbnRleHQgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IHsgdW5pb25QbGFuZXMsIGludGVyc2VjdGlvblBsYW5lcyB9ID0gYnVpbGRlci5jbGlwcGluZ0NvbnRleHQ7XG5cblx0XHRsZXQgcmVzdWx0ID0gbnVsbDtcblxuXHRcdGlmICggdW5pb25QbGFuZXMubGVuZ3RoID4gMCB8fCBpbnRlcnNlY3Rpb25QbGFuZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Y29uc3Qgc2FtcGxlcyA9IGJ1aWxkZXIucmVuZGVyZXIuc2FtcGxlcztcblxuXHRcdFx0aWYgKCB0aGlzLmFscGhhVG9Db3ZlcmFnZSAmJiBzYW1wbGVzID4gMSApIHtcblxuXHRcdFx0XHQvLyB0byBiZSBhZGRlZCB0byBmbG93IHdoZW4gdGhlIGNvbG9yL2FscGhhIHZhbHVlIGhhcyBiZWVuIGRldGVybWluZWRcblx0XHRcdFx0cmVzdWx0ID0gY2xpcHBpbmdBbHBoYSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGJ1aWxkZXIuc3RhY2suYWRkKCBjbGlwcGluZygpICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGhhcmR3YXJlIGNsaXBwaW5nIGlmIGF2YWlsYWJsZSBvbiB0aGUgY3VycmVudCBkZXZpY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cEhhcmR3YXJlQ2xpcHBpbmcoIGJ1aWxkZXIgKSB7XG5cblx0XHR0aGlzLmhhcmR3YXJlQ2xpcHBpbmcgPSBmYWxzZTtcblxuXHRcdGlmICggYnVpbGRlci5jbGlwcGluZ0NvbnRleHQgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRjb25zdCBjYW5kaWRhdGVDb3VudCA9IGJ1aWxkZXIuY2xpcHBpbmdDb250ZXh0LnVuaW9uUGxhbmVzLmxlbmd0aDtcblxuXHRcdC8vIDggcGxhbmVzIHN1cHBvcnRlZCBieSBXZWJHTCBBTkdMRV9jbGlwX2N1bGxfZGlzdGFuY2UgYW5kIFdlYkdQVSBjbGlwLWRpc3RhbmNlc1xuXG5cdFx0aWYgKCBjYW5kaWRhdGVDb3VudCA+IDAgJiYgY2FuZGlkYXRlQ291bnQgPD0gOCAmJiBidWlsZGVyLmlzQXZhaWxhYmxlKCAnY2xpcERpc3RhbmNlJyApICkge1xuXG5cdFx0XHRidWlsZGVyLnN0YWNrLmFkZCggaGFyZHdhcmVDbGlwcGluZygpICk7XG5cblx0XHRcdHRoaXMuaGFyZHdhcmVDbGlwcGluZyA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm47XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGRlcHRoIG9mIHRoaXMgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cERlcHRoKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyByZW5kZXJlciwgY2FtZXJhIH0gPSBidWlsZGVyO1xuXG5cdFx0Ly8gRGVwdGhcblxuXHRcdGxldCBkZXB0aE5vZGUgPSB0aGlzLmRlcHRoTm9kZTtcblxuXHRcdGlmICggZGVwdGhOb2RlID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBtcnQgPSByZW5kZXJlci5nZXRNUlQoKTtcblxuXHRcdFx0aWYgKCBtcnQgJiYgbXJ0LmhhcyggJ2RlcHRoJyApICkge1xuXG5cdFx0XHRcdGRlcHRoTm9kZSA9IG1ydC5nZXQoICdkZXB0aCcgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggcmVuZGVyZXIubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRpZiAoIGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0XHRcdFx0ZGVwdGhOb2RlID0gdmlld1pUb0xvZ2FyaXRobWljRGVwdGgoIHBvc2l0aW9uVmlldy56LCBjYW1lcmFOZWFyLCBjYW1lcmFGYXIgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZGVwdGhOb2RlID0gdmlld1pUb09ydGhvZ3JhcGhpY0RlcHRoKCBwb3NpdGlvblZpZXcueiwgY2FtZXJhTmVhciwgY2FtZXJhRmFyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGRlcHRoTm9kZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0ZGVwdGguYXNzaWduKCBkZXB0aE5vZGUgKS5hcHBlbmQoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgcG9zaXRpb24gbm9kZSBpbiB2aWV3IHNwYWNlLiBUaGlzIG1ldGhvZCBleGlzdHNcblx0ICogc28gZGVyaXZlZCBub2RlIG1hdGVyaWFscyBjYW4gbW9kaWZ5IHRoZSBpbXBsZW1lbnRhdGlvbiBlLmcuIHNwcml0ZSBtYXRlcmlhbHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSBwb3NpdGlvbiBpbiB2aWV3IHNwYWNlLlxuXHQgKi9cblx0c2V0dXBQb3NpdGlvblZpZXcoIC8qYnVpbGRlciovICkge1xuXG5cdFx0cmV0dXJuIG1vZGVsVmlld01hdHJpeC5tdWwoIHBvc2l0aW9uTG9jYWwgKS54eXo7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIHBvc2l0aW9uIGluIGNsaXAgc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjND59IFRoZSBwb3NpdGlvbiBpbiB2aWV3IHNwYWNlLlxuXHQgKi9cblx0c2V0dXBNb2RlbFZpZXdQcm9qZWN0aW9uKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiBjYW1lcmFQcm9qZWN0aW9uTWF0cml4Lm11bCggcG9zaXRpb25WaWV3ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGxvZ2ljIGZvciB0aGUgdmVydGV4IHN0YWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtOb2RlPHZlYzQ+fSBUaGUgcG9zaXRpb24gaW4gY2xpcCBzcGFjZS5cblx0ICovXG5cdHNldHVwVmVydGV4KCBidWlsZGVyICkge1xuXG5cdFx0YnVpbGRlci5hZGRTdGFjaygpO1xuXG5cdFx0dGhpcy5zZXR1cFBvc2l0aW9uKCBidWlsZGVyICk7XG5cblx0XHRidWlsZGVyLmNvbnRleHQudmVydGV4ID0gYnVpbGRlci5yZW1vdmVTdGFjaygpO1xuXG5cdFx0cmV0dXJuIG1vZGVsVmlld1Byb2plY3Rpb247XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGNvbXB1dGF0aW9uIG9mIHRoZSBwb3NpdGlvbiBpbiBsb2NhbCBzcGFjZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHBvc2l0aW9uIGluIGxvY2FsIHNwYWNlLlxuXHQgKi9cblx0c2V0dXBQb3NpdGlvbiggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgb2JqZWN0LCBnZW9tZXRyeSB9ID0gYnVpbGRlcjtcblxuXHRcdGlmICggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yICkge1xuXG5cdFx0XHRtb3JwaFJlZmVyZW5jZSggb2JqZWN0ICkuYXBwZW5kKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoID09PSB0cnVlICkge1xuXG5cdFx0XHRza2lubmluZ1JlZmVyZW5jZSggb2JqZWN0ICkuYXBwZW5kKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHRjb25zdCBkaXNwbGFjZW1lbnRNYXAgPSBtYXRlcmlhbFJlZmVyZW5jZSggJ2Rpc3BsYWNlbWVudE1hcCcsICd0ZXh0dXJlJyApO1xuXHRcdFx0Y29uc3QgZGlzcGxhY2VtZW50U2NhbGUgPSBtYXRlcmlhbFJlZmVyZW5jZSggJ2Rpc3BsYWNlbWVudFNjYWxlJywgJ2Zsb2F0JyApO1xuXHRcdFx0Y29uc3QgZGlzcGxhY2VtZW50QmlhcyA9IG1hdGVyaWFsUmVmZXJlbmNlKCAnZGlzcGxhY2VtZW50QmlhcycsICdmbG9hdCcgKTtcblxuXHRcdFx0cG9zaXRpb25Mb2NhbC5hZGRBc3NpZ24oIG5vcm1hbExvY2FsLm5vcm1hbGl6ZSgpLm11bCggKCBkaXNwbGFjZW1lbnRNYXAueC5tdWwoIGRpc3BsYWNlbWVudFNjYWxlICkuYWRkKCBkaXNwbGFjZW1lbnRCaWFzICkgKSApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICkge1xuXG5cdFx0XHRiYXRjaCggb2JqZWN0ICkuYXBwZW5kKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBvYmplY3QuaW5zdGFuY2VNYXRyaXggJiYgb2JqZWN0Lmluc3RhbmNlTWF0cml4LmlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlID09PSB0cnVlICkgKSB7XG5cblx0XHRcdGluc3RhbmNlZE1lc2goIG9iamVjdCApLmFwcGVuZCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnBvc2l0aW9uTm9kZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0cG9zaXRpb25Mb2NhbC5hc3NpZ24oIHRoaXMucG9zaXRpb25Ob2RlLmNvbnRleHQoIHsgaXNQb3NpdGlvbk5vZGVJbnB1dDogdHJ1ZSB9ICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb3NpdGlvbkxvY2FsO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBjb21wdXRhdGlvbiBvZiB0aGUgbWF0ZXJpYWwncyBkaWZmdXNlIGNvbG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeSAtIFRoZSBnZW9tZXRyeS5cblx0ICovXG5cdHNldHVwRGlmZnVzZUNvbG9yKCB7IG9iamVjdCwgZ2VvbWV0cnkgfSApIHtcblxuXHRcdGxldCBjb2xvck5vZGUgPSB0aGlzLmNvbG9yTm9kZSA/IHZlYzQoIHRoaXMuY29sb3JOb2RlICkgOiBtYXRlcmlhbENvbG9yO1xuXG5cdFx0Ly8gVkVSVEVYIENPTE9SU1xuXG5cdFx0aWYgKCB0aGlzLnZlcnRleENvbG9ycyA9PT0gdHJ1ZSAmJiBnZW9tZXRyeS5oYXNBdHRyaWJ1dGUoICdjb2xvcicgKSApIHtcblxuXHRcdFx0Y29sb3JOb2RlID0gdmVjNCggY29sb3JOb2RlLnh5ei5tdWwoIGF0dHJpYnV0ZSggJ2NvbG9yJywgJ3ZlYzMnICkgKSwgY29sb3JOb2RlLmEgKTtcblxuXHRcdH1cblxuXHRcdC8vIEluc3RhbmNlZCBjb2xvcnNcblxuXHRcdGlmICggb2JqZWN0Lmluc3RhbmNlQ29sb3IgKSB7XG5cblx0XHRcdGNvbnN0IGluc3RhbmNlQ29sb3IgPSB2YXJ5aW5nUHJvcGVydHkoICd2ZWMzJywgJ3ZJbnN0YW5jZUNvbG9yJyApO1xuXG5cdFx0XHRjb2xvck5vZGUgPSBpbnN0YW5jZUNvbG9yLm11bCggY29sb3JOb2RlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICYmIG9iamVjdC5fY29sb3JzVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc3QgYmF0Y2hDb2xvciA9IHZhcnlpbmdQcm9wZXJ0eSggJ3ZlYzMnLCAndkJhdGNoQ29sb3InICk7XG5cblx0XHRcdGNvbG9yTm9kZSA9IGJhdGNoQ29sb3IubXVsKCBjb2xvck5vZGUgKTtcblxuXHRcdH1cblxuXG5cdFx0Ly8gQ09MT1JcblxuXHRcdGRpZmZ1c2VDb2xvci5hc3NpZ24oIGNvbG9yTm9kZSApO1xuXG5cdFx0Ly8gT1BBQ0lUWVxuXG5cdFx0Y29uc3Qgb3BhY2l0eU5vZGUgPSB0aGlzLm9wYWNpdHlOb2RlID8gZmxvYXQoIHRoaXMub3BhY2l0eU5vZGUgKSA6IG1hdGVyaWFsT3BhY2l0eTtcblx0XHRkaWZmdXNlQ29sb3IuYS5hc3NpZ24oIGRpZmZ1c2VDb2xvci5hLm11bCggb3BhY2l0eU5vZGUgKSApO1xuXG5cdFx0Ly8gQUxQSEEgVEVTVFxuXG5cdFx0aWYgKCB0aGlzLmFscGhhVGVzdE5vZGUgIT09IG51bGwgfHwgdGhpcy5hbHBoYVRlc3QgPiAwICkge1xuXG5cdFx0XHRjb25zdCBhbHBoYVRlc3ROb2RlID0gdGhpcy5hbHBoYVRlc3ROb2RlICE9PSBudWxsID8gZmxvYXQoIHRoaXMuYWxwaGFUZXN0Tm9kZSApIDogbWF0ZXJpYWxBbHBoYVRlc3Q7XG5cblx0XHRcdGRpZmZ1c2VDb2xvci5hLmxlc3NUaGFuRXF1YWwoIGFscGhhVGVzdE5vZGUgKS5kaXNjYXJkKCk7XG5cblx0XHR9XG5cblx0XHQvLyBBTFBIQSBIQVNIXG5cblx0XHRpZiAoIHRoaXMuYWxwaGFIYXNoID09PSB0cnVlICkge1xuXG5cdFx0XHRkaWZmdXNlQ29sb3IuYS5sZXNzVGhhbiggZ2V0QWxwaGFIYXNoVGhyZXNob2xkKCBwb3NpdGlvbkxvY2FsICkgKS5kaXNjYXJkKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMudHJhbnNwYXJlbnQgPT09IGZhbHNlICYmIHRoaXMuYmxlbmRpbmcgPT09IE5vcm1hbEJsZW5kaW5nICYmIHRoaXMuYWxwaGFUb0NvdmVyYWdlID09PSBmYWxzZSApIHtcblxuXHRcdFx0ZGlmZnVzZUNvbG9yLmEuYXNzaWduKCAxLjAgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEFic3RyYWN0IGludGVyZmFjZSBtZXRob2QgdGhhdCBjYW4gYmUgaW1wbGVtZW50ZWQgYnkgZGVyaXZlZCBtYXRlcmlhbHNcblx0ICogdG8gc2V0dXAgbWF0ZXJpYWwtc3BlY2lmaWMgbm9kZSB2YXJpYWJsZXMuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0c2V0dXBWYXJpYW50cyggLypidWlsZGVyKi8gKSB7XG5cblx0XHQvLyBJbnRlcmZhY2UgZnVuY3Rpb24uXG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIG91dGdvaW5nIGxpZ2h0IG5vZGUgdmFyaWFibGVcblx0ICpcblx0ICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIG91dGdvaW5nIGxpZ2h0IG5vZGUuXG5cdCAqL1xuXHRzZXR1cE91dGdvaW5nTGlnaHQoKSB7XG5cblx0XHRyZXR1cm4gKCB0aGlzLmxpZ2h0cyA9PT0gdHJ1ZSApID8gdmVjMyggMCApIDogZGlmZnVzZUNvbG9yLnJnYjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgbm9ybWFsIG5vZGUgZnJvbSB0aGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSBub3JtYWwgbm9kZS5cblx0ICovXG5cdHNldHVwTm9ybWFsKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsTm9kZSA/IHZlYzMoIHRoaXMubm9ybWFsTm9kZSApIDogbWF0ZXJpYWxOb3JtYWw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGVudmlyb25tZW50IG5vZGUgZnJvbSB0aGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjND59IFRoZSBlbnZpcm9ubWVudCBub2RlLlxuXHQgKi9cblx0c2V0dXBFbnZpcm9ubWVudCggLypidWlsZGVyKi8gKSB7XG5cblx0XHRsZXQgbm9kZSA9IG51bGw7XG5cblx0XHRpZiAoIHRoaXMuZW52Tm9kZSApIHtcblxuXHRcdFx0bm9kZSA9IHRoaXMuZW52Tm9kZTtcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuZW52TWFwICkge1xuXG5cdFx0XHRub2RlID0gdGhpcy5lbnZNYXAuaXNDdWJlVGV4dHVyZSA/IG1hdGVyaWFsUmVmZXJlbmNlKCAnZW52TWFwJywgJ2N1YmVUZXh0dXJlJyApIDogbWF0ZXJpYWxSZWZlcmVuY2UoICdlbnZNYXAnLCAndGV4dHVyZScgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBub2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBsaWdodCBtYXAgbm9kZSBmcm9tIHRoZSBtYXRlcmlhbC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIGxpZ2h0IG1hcCBub2RlLlxuXHQgKi9cblx0c2V0dXBMaWdodE1hcCggYnVpbGRlciApIHtcblxuXHRcdGxldCBub2RlID0gbnVsbDtcblxuXHRcdGlmICggYnVpbGRlci5tYXRlcmlhbC5saWdodE1hcCApIHtcblxuXHRcdFx0bm9kZSA9IG5ldyBJcnJhZGlhbmNlTm9kZSggbWF0ZXJpYWxMaWdodE1hcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGxpZ2h0cyBub2RlIGJhc2VkIG9uIHRoZSBzY2VuZSwgZW52aXJvbm1lbnQgYW5kIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtMaWdodHNOb2RlfSBUaGUgbGlnaHRzIG5vZGUuXG5cdCAqL1xuXHRzZXR1cExpZ2h0cyggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFsTGlnaHRzTm9kZSA9IFtdO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGVudk5vZGUgPSB0aGlzLnNldHVwRW52aXJvbm1lbnQoIGJ1aWxkZXIgKTtcblxuXHRcdGlmICggZW52Tm9kZSAmJiBlbnZOb2RlLmlzTGlnaHRpbmdOb2RlICkge1xuXG5cdFx0XHRtYXRlcmlhbExpZ2h0c05vZGUucHVzaCggZW52Tm9kZSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbGlnaHRNYXBOb2RlID0gdGhpcy5zZXR1cExpZ2h0TWFwKCBidWlsZGVyICk7XG5cblx0XHRpZiAoIGxpZ2h0TWFwTm9kZSAmJiBsaWdodE1hcE5vZGUuaXNMaWdodGluZ05vZGUgKSB7XG5cblx0XHRcdG1hdGVyaWFsTGlnaHRzTm9kZS5wdXNoKCBsaWdodE1hcE5vZGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hb05vZGUgIT09IG51bGwgfHwgYnVpbGRlci5tYXRlcmlhbC5hb01hcCApIHtcblxuXHRcdFx0Y29uc3QgYW9Ob2RlID0gdGhpcy5hb05vZGUgIT09IG51bGwgPyB0aGlzLmFvTm9kZSA6IG1hdGVyaWFsQU87XG5cblx0XHRcdG1hdGVyaWFsTGlnaHRzTm9kZS5wdXNoKCBuZXcgQU9Ob2RlKCBhb05vZGUgKSApO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGxpZ2h0c04gPSB0aGlzLmxpZ2h0c05vZGUgfHwgYnVpbGRlci5saWdodHNOb2RlO1xuXG5cdFx0aWYgKCBtYXRlcmlhbExpZ2h0c05vZGUubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0bGlnaHRzTiA9IGJ1aWxkZXIucmVuZGVyZXIubGlnaHRpbmcuY3JlYXRlTm9kZSggWyAuLi5saWdodHNOLmdldExpZ2h0cygpLCAuLi5tYXRlcmlhbExpZ2h0c05vZGUgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpZ2h0c047XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgYnkgbW9zdCBkZXJpdmVkIG1hdGVyaWFsc1xuXHQgKiBzaW5jZSBpdCBkZWZpbmVzIHRoZSBtYXRlcmlhbCdzIGxpZ2h0aW5nIG1vZGVsLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7TGlnaHRpbmdNb2RlbH0gVGhlIGxpZ2h0aW5nIG1vZGVsLlxuXHQgKi9cblx0c2V0dXBMaWdodGluZ01vZGVsKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdC8vIEludGVyZmFjZSBmdW5jdGlvbi5cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgb3V0Z29pbmcgbGlnaHQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIG91dGdvaW5nIGxpZ2h0IG5vZGUuXG5cdCAqL1xuXHRzZXR1cExpZ2h0aW5nKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBtYXRlcmlhbCB9ID0gYnVpbGRlcjtcblx0XHRjb25zdCB7IGJhY2tkcm9wTm9kZSwgYmFja2Ryb3BBbHBoYU5vZGUsIGVtaXNzaXZlTm9kZSB9ID0gdGhpcztcblxuXHRcdC8vIE9VVEdPSU5HIExJR0hUXG5cblx0XHRjb25zdCBsaWdodHMgPSB0aGlzLmxpZ2h0cyA9PT0gdHJ1ZSB8fCB0aGlzLmxpZ2h0c05vZGUgIT09IG51bGw7XG5cblx0XHRjb25zdCBsaWdodHNOb2RlID0gbGlnaHRzID8gdGhpcy5zZXR1cExpZ2h0cyggYnVpbGRlciApIDogbnVsbDtcblxuXHRcdGxldCBvdXRnb2luZ0xpZ2h0Tm9kZSA9IHRoaXMuc2V0dXBPdXRnb2luZ0xpZ2h0KCBidWlsZGVyICk7XG5cblx0XHRpZiAoIGxpZ2h0c05vZGUgJiYgbGlnaHRzTm9kZS5nZXRTY29wZSgpLmhhc0xpZ2h0cyApIHtcblxuXHRcdFx0Y29uc3QgbGlnaHRpbmdNb2RlbCA9IHRoaXMuc2V0dXBMaWdodGluZ01vZGVsKCBidWlsZGVyICkgfHwgbnVsbDtcblxuXHRcdFx0b3V0Z29pbmdMaWdodE5vZGUgPSBsaWdodGluZ0NvbnRleHQoIGxpZ2h0c05vZGUsIGxpZ2h0aW5nTW9kZWwsIGJhY2tkcm9wTm9kZSwgYmFja2Ryb3BBbHBoYU5vZGUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGJhY2tkcm9wTm9kZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0b3V0Z29pbmdMaWdodE5vZGUgPSB2ZWMzKCBiYWNrZHJvcEFscGhhTm9kZSAhPT0gbnVsbCA/IG1peCggb3V0Z29pbmdMaWdodE5vZGUsIGJhY2tkcm9wTm9kZSwgYmFja2Ryb3BBbHBoYU5vZGUgKSA6IGJhY2tkcm9wTm9kZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gRU1JU1NJVkVcblxuXHRcdGlmICggKCBlbWlzc2l2ZU5vZGUgJiYgZW1pc3NpdmVOb2RlLmlzTm9kZSA9PT0gdHJ1ZSApIHx8ICggbWF0ZXJpYWwuZW1pc3NpdmUgJiYgbWF0ZXJpYWwuZW1pc3NpdmUuaXNDb2xvciA9PT0gdHJ1ZSApICkge1xuXG5cdFx0XHRlbWlzc2l2ZS5hc3NpZ24oIHZlYzMoIGVtaXNzaXZlTm9kZSA/IGVtaXNzaXZlTm9kZSA6IG1hdGVyaWFsRW1pc3NpdmUgKSApO1xuXG5cdFx0XHRvdXRnb2luZ0xpZ2h0Tm9kZSA9IG91dGdvaW5nTGlnaHROb2RlLmFkZCggZW1pc3NpdmUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvdXRnb2luZ0xpZ2h0Tm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwIHRoZSBmb2cuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEBwYXJhbSB7Tm9kZTx2ZWM0Pn0gb3V0cHV0Tm9kZSAtIFRoZSBleGlzdGluZyBvdXRwdXQgbm9kZS5cblx0ICogQHJldHVybiB7Tm9kZTx2ZWM0Pn0gVGhlIG91dHB1dCBub2RlLlxuXHQgKi9cblx0c2V0dXBGb2coIGJ1aWxkZXIsIG91dHB1dE5vZGUgKSB7XG5cblx0XHRjb25zdCBmb2dOb2RlID0gYnVpbGRlci5mb2dOb2RlO1xuXG5cdFx0aWYgKCBmb2dOb2RlICkge1xuXG5cdFx0XHRvdXRwdXQuYXNzaWduKCBvdXRwdXROb2RlICk7XG5cblx0XHRcdG91dHB1dE5vZGUgPSB2ZWM0KCBmb2dOb2RlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0Tm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgb3V0cHV0IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEBwYXJhbSB7Tm9kZTx2ZWM0Pn0gb3V0cHV0Tm9kZSAtIFRoZSBleGlzdGluZyBvdXRwdXQgbm9kZS5cblx0ICogQHJldHVybiB7Tm9kZTx2ZWM0Pn0gVGhlIG91dHB1dCBub2RlLlxuXHQgKi9cblx0c2V0dXBPdXRwdXQoIGJ1aWxkZXIsIG91dHB1dE5vZGUgKSB7XG5cblx0XHQvLyBGT0dcblxuXHRcdGlmICggdGhpcy5mb2cgPT09IHRydWUgKSB7XG5cblx0XHRcdG91dHB1dE5vZGUgPSB0aGlzLnNldHVwRm9nKCBidWlsZGVyLCBvdXRwdXROb2RlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0Tm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE1vc3QgY2xhc3NpYyBtYXRlcmlhbCB0eXBlcyBoYXZlIGEgbm9kZSBwZW5kYW50IGUuZy4gZm9yIGBNZXNoQmFzaWNNYXRlcmlhbGBcblx0ICogdGhlcmUgaXMgYE1lc2hCYXNpY05vZGVNYXRlcmlhbGAuIFRoaXMgdXRpbGl0eSBtZXRob2QgaXMgaW50ZW5kZWQgZm9yXG5cdCAqIGRlZmluaW5nIGFsbCBtYXRlcmlhbCBwcm9wZXJ0aWVzIG9mIHRoZSBjbGFzc2ljIHR5cGUgaW4gdGhlIG5vZGUgdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgbWF0ZXJpYWwgdG8gY29weSBwcm9wZXJ0aWVzIHdpdGggdGhlaXIgdmFsdWVzIHRvIHRoaXMgbm9kZSBtYXRlcmlhbC5cblx0ICovXG5cdHNldERlZmF1bHRWYWx1ZXMoIG1hdGVyaWFsICkge1xuXG5cdFx0Ly8gVGhpcyBhcHByb2FjaCBpcyB0byByZXVzZSB0aGUgbmF0aXZlIHJlZnJlc2hVbmlmb3Jtcypcblx0XHQvLyBhbmQgdHVybiBhdmFpbGFibGUgdGhlIHVzZSBvZiBmZWF0dXJlcyBsaWtlIHRyYW5zbWlzc2lvbiBhbmQgZW52aXJvbm1lbnQgaW4gY29yZVxuXG5cdFx0Zm9yICggY29uc3QgcHJvcGVydHkgaW4gbWF0ZXJpYWwgKSB7XG5cblx0XHRcdGNvbnN0IHZhbHVlID0gbWF0ZXJpYWxbIHByb3BlcnR5IF07XG5cblx0XHRcdGlmICggdGhpc1sgcHJvcGVydHkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXNbIHByb3BlcnR5IF0gPSB2YWx1ZTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICYmIHZhbHVlLmNsb25lICkgdGhpc1sgcHJvcGVydHkgXSA9IHZhbHVlLmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoIG1hdGVyaWFsLmNvbnN0cnVjdG9yLnByb3RvdHlwZSApO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIGRlc2NyaXB0b3JzICkge1xuXG5cdFx0XHRpZiAoIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLCBrZXkgKSA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHQgICAgIGRlc2NyaXB0b3JzWyBrZXkgXS5nZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLCBrZXksIGRlc2NyaXB0b3JzWyBrZXkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXJpYWxpemVzIHRoaXMgbWF0ZXJpYWwgdG8gSlNPTi5cblx0ICpcblx0ICogQHBhcmFtIHs/KE9iamVjdHxzdHJpbmcpfSBtZXRhIC0gVGhlIG1ldGEgaW5mb3JtYXRpb24gZm9yIHNlcmlhbGl6YXRpb24uXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIHNlcmlhbGl6ZWQgbm9kZS5cblx0ICovXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGlzUm9vdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0aWYgKCBpc1Jvb3QgKSB7XG5cblx0XHRcdG1ldGEgPSB7XG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcblx0XHRcdFx0aW1hZ2VzOiB7fSxcblx0XHRcdFx0bm9kZXM6IHt9XG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZGF0YSA9IE1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXHRcdGNvbnN0IG5vZGVDaGlsZHJlbiA9IGdldE5vZGVDaGlsZHJlbiggdGhpcyApO1xuXG5cdFx0ZGF0YS5pbnB1dE5vZGVzID0ge307XG5cblx0XHRmb3IgKCBjb25zdCB7IHByb3BlcnR5LCBjaGlsZE5vZGUgfSBvZiBub2RlQ2hpbGRyZW4gKSB7XG5cblx0XHRcdGRhdGEuaW5wdXROb2Rlc1sgcHJvcGVydHkgXSA9IGNoaWxkTm9kZS50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0Ly8gVE9ETzogQ29waWVkIGZyb20gT2JqZWN0M0QudG9KU09OXG5cblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0Y29uc3QgdmFsdWVzID0gW107XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0gY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5tZXRhZGF0YTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc1Jvb3QgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS50ZXh0dXJlcyApO1xuXHRcdFx0Y29uc3QgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcblx0XHRcdGNvbnN0IG5vZGVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5ub2RlcyApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmVzLmxlbmd0aCA+IDAgKSBkYXRhLnRleHR1cmVzID0gdGV4dHVyZXM7XG5cdFx0XHRpZiAoIGltYWdlcy5sZW5ndGggPiAwICkgZGF0YS5pbWFnZXMgPSBpbWFnZXM7XG5cdFx0XHRpZiAoIG5vZGVzLmxlbmd0aCA+IDAgKSBkYXRhLm5vZGVzID0gbm9kZXM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW4gbm9kZSBtYXRlcmlhbCB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVNYXRlcmlhbH0gc291cmNlIC0gVGhlIG1hdGVyaWFsIHRvIGNvcHkuXG5cdCAqIEByZXR1cm4ge05vZGVNYXRlcmlhbH0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlIG1hdGVyaWFsLlxuXHQgKi9cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5saWdodHNOb2RlID0gc291cmNlLmxpZ2h0c05vZGU7XG5cdFx0dGhpcy5lbnZOb2RlID0gc291cmNlLmVudk5vZGU7XG5cblx0XHR0aGlzLmNvbG9yTm9kZSA9IHNvdXJjZS5jb2xvck5vZGU7XG5cdFx0dGhpcy5ub3JtYWxOb2RlID0gc291cmNlLm5vcm1hbE5vZGU7XG5cdFx0dGhpcy5vcGFjaXR5Tm9kZSA9IHNvdXJjZS5vcGFjaXR5Tm9kZTtcblx0XHR0aGlzLmJhY2tkcm9wTm9kZSA9IHNvdXJjZS5iYWNrZHJvcE5vZGU7XG5cdFx0dGhpcy5iYWNrZHJvcEFscGhhTm9kZSA9IHNvdXJjZS5iYWNrZHJvcEFscGhhTm9kZTtcblx0XHR0aGlzLmFscGhhVGVzdE5vZGUgPSBzb3VyY2UuYWxwaGFUZXN0Tm9kZTtcblxuXHRcdHRoaXMucG9zaXRpb25Ob2RlID0gc291cmNlLnBvc2l0aW9uTm9kZTtcblx0XHR0aGlzLmdlb21ldHJ5Tm9kZSA9IHNvdXJjZS5nZW9tZXRyeU5vZGU7XG5cblx0XHR0aGlzLmRlcHRoTm9kZSA9IHNvdXJjZS5kZXB0aE5vZGU7XG5cdFx0dGhpcy5zaGFkb3dQb3NpdGlvbk5vZGUgPSBzb3VyY2Uuc2hhZG93UG9zaXRpb25Ob2RlO1xuXHRcdHRoaXMucmVjZWl2ZWRTaGFkb3dOb2RlID0gc291cmNlLnJlY2VpdmVkU2hhZG93Tm9kZTtcblx0XHR0aGlzLmNhc3RTaGFkb3dOb2RlID0gc291cmNlLmNhc3RTaGFkb3dOb2RlO1xuXG5cdFx0dGhpcy5vdXRwdXROb2RlID0gc291cmNlLm91dHB1dE5vZGU7XG5cdFx0dGhpcy5tcnROb2RlID0gc291cmNlLm1ydE5vZGU7XG5cblx0XHR0aGlzLmZyYWdtZW50Tm9kZSA9IHNvdXJjZS5mcmFnbWVudE5vZGU7XG5cdFx0dGhpcy52ZXJ0ZXhOb2RlID0gc291cmNlLnZlcnRleE5vZGU7XG5cblx0XHRyZXR1cm4gc3VwZXIuY29weSggc291cmNlICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVNYXRlcmlhbDtcbiIsImltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi9Ob2RlTWF0ZXJpYWwuanMnO1xuXG5pbXBvcnQgeyBMaW5lQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL0xpbmVCYXNpY01hdGVyaWFsLmpzJztcblxuY29uc3QgX2RlZmF1bHRWYWx1ZXMgPSAvKkBfX1BVUkVfXyovIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCgpO1xuXG4vKipcbiAqIE5vZGUgbWF0ZXJpYWwgdmVyc2lvbiBvZiB7QGxpbmsgTGluZUJhc2ljTWF0ZXJpYWx9LlxuICpcbiAqIEBhdWdtZW50cyBOb2RlTWF0ZXJpYWxcbiAqL1xuY2xhc3MgTGluZUJhc2ljTm9kZU1hdGVyaWFsIGV4dGVuZHMgTm9kZU1hdGVyaWFsIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0xpbmVCYXNpY05vZGVNYXRlcmlhbCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGxpbmUgYmFzaWMgbm9kZSBtYXRlcmlhbC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbWV0ZXJzXSAtIFRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNMaW5lQmFzaWNOb2RlTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXREZWZhdWx0VmFsdWVzKCBfZGVmYXVsdFZhbHVlcyApO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGluZUJhc2ljTm9kZU1hdGVyaWFsO1xuIiwiaW1wb3J0IE5vZGVNYXRlcmlhbCBmcm9tICcuL05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBhdHRyaWJ1dGUgfSBmcm9tICcuLi8uLi9ub2Rlcy9jb3JlL0F0dHJpYnV0ZU5vZGUuanMnO1xuaW1wb3J0IHsgbWF0ZXJpYWxMaW5lRGFzaE9mZnNldCwgbWF0ZXJpYWxMaW5lRGFzaFNpemUsIG1hdGVyaWFsTGluZUdhcFNpemUsIG1hdGVyaWFsTGluZVNjYWxlIH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL01hdGVyaWFsTm9kZS5qcyc7XG5pbXBvcnQgeyBkYXNoU2l6ZSwgZ2FwU2l6ZSB9IGZyb20gJy4uLy4uL25vZGVzL2NvcmUvUHJvcGVydHlOb2RlLmpzJztcbmltcG9ydCB7IHZhcnlpbmcsIGZsb2F0IH0gZnJvbSAnLi4vLi4vbm9kZXMvdHNsL1RTTEJhc2UuanMnO1xuXG5pbXBvcnQgeyBMaW5lRGFzaGVkTWF0ZXJpYWwgfSBmcm9tICcuLi9MaW5lRGFzaGVkTWF0ZXJpYWwuanMnO1xuXG5jb25zdCBfZGVmYXVsdFZhbHVlcyA9IC8qQF9fUFVSRV9fKi8gbmV3IExpbmVEYXNoZWRNYXRlcmlhbCgpO1xuXG4vKipcbiAqIE5vZGUgbWF0ZXJpYWwgdmVyc2lvbiBvZiAge0BsaW5rIExpbmVEYXNoZWRNYXRlcmlhbH0uXG4gKlxuICogQGF1Z21lbnRzIE5vZGVNYXRlcmlhbFxuICovXG5jbGFzcyBMaW5lRGFzaGVkTm9kZU1hdGVyaWFsIGV4dGVuZHMgTm9kZU1hdGVyaWFsIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0xpbmVEYXNoZWROb2RlTWF0ZXJpYWwnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsaW5lIGRhc2hlZCBub2RlIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0xpbmVEYXNoZWROb2RlTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXREZWZhdWx0VmFsdWVzKCBfZGVmYXVsdFZhbHVlcyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRhc2ggb2Zmc2V0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kYXNoT2Zmc2V0ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvZmZzZXQgb2YgZGFzaCBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgZGFzaE9mZnNldGBcblx0XHQgKiBwcm9wZXJ0eS4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSBvZmZzZXQgd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgb2Zmc2V0IGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbExpbmVEYXNoT2Zmc2V0fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMub2Zmc2V0Tm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2NhbGUgb2YgZGFzaCBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgc2NhbGVgXG5cdFx0ICogcHJvcGVydHkuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0XG5cdFx0ICogYW5kIGRlZmluZSB0aGUgc2NhbGUgd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgc2NhbGUgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsTGluZVNjYWxlfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZGFzaFNjYWxlTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGFzaCBzaXplIG9mIGRhc2ggbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYGRhc2hTaXplYFxuXHRcdCAqIHByb3BlcnR5LiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuZCBkZWZpbmUgdGhlIGRhc2ggc2l6ZSB3aXRoIGEgbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBkYXNoIHNpemUgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsTGluZURhc2hTaXplfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZGFzaFNpemVOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBnYXAgc2l6ZSBvZiBkYXNoIG1hdGVyaWFscyBpcyBieSBkZWZhdWx0IGluZmVycmVkIGZyb20gdGhlIGBnYXBTaXplYFxuXHRcdCAqIHByb3BlcnR5LiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuZCBkZWZpbmUgdGhlIGdhcCBzaXplIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIGdhcCBzaXplIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbExpbmVHYXBTaXplfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZ2FwU2l6ZU5vZGUgPSBudWxsO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgZGFzaCBzcGVjaWZpYyBub2RlIHZhcmlhYmxlcy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICovXG5cdHNldHVwVmFyaWFudHMoIC8qIGJ1aWxkZXIgKi8gKSB7XG5cblx0XHRjb25zdCBvZmZzZXROb2RlID0gdGhpcy5vZmZzZXROb2RlID8gZmxvYXQoIHRoaXMub2Zmc2V0Tm9kZSApIDogbWF0ZXJpYWxMaW5lRGFzaE9mZnNldDtcblx0XHRjb25zdCBkYXNoU2NhbGVOb2RlID0gdGhpcy5kYXNoU2NhbGVOb2RlID8gZmxvYXQoIHRoaXMuZGFzaFNjYWxlTm9kZSApIDogbWF0ZXJpYWxMaW5lU2NhbGU7XG5cdFx0Y29uc3QgZGFzaFNpemVOb2RlID0gdGhpcy5kYXNoU2l6ZU5vZGUgPyBmbG9hdCggdGhpcy5kYXNoU2l6ZU5vZGUgKSA6IG1hdGVyaWFsTGluZURhc2hTaXplO1xuXHRcdGNvbnN0IGdhcFNpemVOb2RlID0gdGhpcy5nYXBTaXplTm9kZSA/IGZsb2F0KCB0aGlzLmdhcFNpemVOb2RlICkgOiBtYXRlcmlhbExpbmVHYXBTaXplO1xuXG5cdFx0ZGFzaFNpemUuYXNzaWduKCBkYXNoU2l6ZU5vZGUgKTtcblx0XHRnYXBTaXplLmFzc2lnbiggZ2FwU2l6ZU5vZGUgKTtcblxuXHRcdGNvbnN0IHZMaW5lRGlzdGFuY2UgPSB2YXJ5aW5nKCBhdHRyaWJ1dGUoICdsaW5lRGlzdGFuY2UnICkubXVsKCBkYXNoU2NhbGVOb2RlICkgKTtcblx0XHRjb25zdCB2TGluZURpc3RhbmNlT2Zmc2V0ID0gb2Zmc2V0Tm9kZSA/IHZMaW5lRGlzdGFuY2UuYWRkKCBvZmZzZXROb2RlICkgOiB2TGluZURpc3RhbmNlO1xuXG5cdFx0dkxpbmVEaXN0YW5jZU9mZnNldC5tb2QoIGRhc2hTaXplLmFkZCggZ2FwU2l6ZSApICkuZ3JlYXRlclRoYW4oIGRhc2hTaXplICkuZGlzY2FyZCgpO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBMaW5lRGFzaGVkTm9kZU1hdGVyaWFsO1xuIiwiaW1wb3J0IFZpZXdwb3J0VGV4dHVyZU5vZGUgZnJvbSAnLi9WaWV3cG9ydFRleHR1cmVOb2RlLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHNjcmVlblVWIH0gZnJvbSAnLi9TY3JlZW5Ob2RlLmpzJztcblxuaW1wb3J0IHsgRnJhbWVidWZmZXJUZXh0dXJlIH0gZnJvbSAnLi4vLi4vdGV4dHVyZXMvRnJhbWVidWZmZXJUZXh0dXJlLmpzJztcblxubGV0IF9zaGFyZWRGcmFtZWJ1ZmZlciA9IG51bGw7XG5cbi8qKlxuICogYFZpZXdwb3J0VGV4dHVyZU5vZGVgIGNyZWF0ZXMgYW4gaW50ZXJuYWwgdGV4dHVyZSBmb3IgZWFjaCBub2RlIGluc3RhbmNlLiBUaGlzIG1vZHVsZVxuICogc2hhcmVzIGEgdGV4dHVyZSBhY3Jvc3MgYWxsIGluc3RhbmNlcyBvZiBgVmlld3BvcnRTaGFyZWRUZXh0dXJlTm9kZWAuIEl0IHNob3VsZFxuICogYmUgdGhlIGZpcnN0IGNob2ljZSB3aGVuIHVzaW5nIGRhdGEgb2YgdGhlIGRlZmF1bHQvc2NyZWVuIGZyYW1lYnVmZmVyIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLlxuICpcbiAqIEBhdWdtZW50cyBWaWV3cG9ydFRleHR1cmVOb2RlXG4gKi9cbmNsYXNzIFZpZXdwb3J0U2hhcmVkVGV4dHVyZU5vZGUgZXh0ZW5kcyBWaWV3cG9ydFRleHR1cmVOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1ZpZXdwb3J0U2hhcmVkVGV4dHVyZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB2aWV3cG9ydCBzaGFyZWQgdGV4dHVyZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IFt1dk5vZGU9c2NyZWVuVVZdIC0gVGhlIHV2IG5vZGUuXG5cdCAqIEBwYXJhbSB7P05vZGV9IFtsZXZlbE5vZGU9bnVsbF0gLSBUaGUgbGV2ZWwgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB1dk5vZGUgPSBzY3JlZW5VViwgbGV2ZWxOb2RlID0gbnVsbCApIHtcblxuXHRcdGlmICggX3NoYXJlZEZyYW1lYnVmZmVyID09PSBudWxsICkge1xuXG5cdFx0XHRfc2hhcmVkRnJhbWVidWZmZXIgPSBuZXcgRnJhbWVidWZmZXJUZXh0dXJlKCk7XG5cblx0XHR9XG5cblx0XHRzdXBlciggdXZOb2RlLCBsZXZlbE5vZGUsIF9zaGFyZWRGcmFtZWJ1ZmZlciApO1xuXG5cdH1cblxuXHR1cGRhdGVSZWZlcmVuY2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmlld3BvcnRTaGFyZWRUZXh0dXJlTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc2hhcmVkIHZpZXdwb3J0IHRleHR1cmUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gW3V2Tm9kZT1zY3JlZW5VVl0gLSBUaGUgdXYgbm9kZS5cbiAqIEBwYXJhbSB7P05vZGV9IFtsZXZlbE5vZGU9bnVsbF0gLSBUaGUgbGV2ZWwgbm9kZS5cbiAqIEByZXR1cm5zIHtWaWV3cG9ydFNoYXJlZFRleHR1cmVOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgdmlld3BvcnRTaGFyZWRUZXh0dXJlID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFZpZXdwb3J0U2hhcmVkVGV4dHVyZU5vZGUgKTtcbiIsImltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi9Ob2RlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgZGFzaFNpemUsIGdhcFNpemUsIHZhcnlpbmdQcm9wZXJ0eSB9IGZyb20gJy4uLy4uL25vZGVzL2NvcmUvUHJvcGVydHlOb2RlLmpzJztcbmltcG9ydCB7IGF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uL25vZGVzL2NvcmUvQXR0cmlidXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBjYW1lcmFQcm9qZWN0aW9uTWF0cml4IH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL0NhbWVyYS5qcyc7XG5pbXBvcnQgeyBtYXRlcmlhbENvbG9yLCBtYXRlcmlhbExpbmVTY2FsZSwgbWF0ZXJpYWxMaW5lRGFzaFNpemUsIG1hdGVyaWFsTGluZUdhcFNpemUsIG1hdGVyaWFsTGluZURhc2hPZmZzZXQsIG1hdGVyaWFsTGluZVdpZHRoLCBtYXRlcmlhbE9wYWNpdHkgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTWF0ZXJpYWxOb2RlLmpzJztcbmltcG9ydCB7IG1vZGVsVmlld01hdHJpeCB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9Nb2RlbE5vZGUuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25HZW9tZXRyeSB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9Qb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBtaXgsIHNtb290aHN0ZXAgfSBmcm9tICcuLi8uLi9ub2Rlcy9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IEZuLCBmbG9hdCwgdmVjMiwgdmVjMywgdmVjNCwgSWYgfSBmcm9tICcuLi8uLi9ub2Rlcy90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyB1diB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9VVi5qcyc7XG5pbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gJy4uLy4uL25vZGVzL2Rpc3BsYXkvU2NyZWVuTm9kZS5qcyc7XG5pbXBvcnQgeyB2aWV3cG9ydFNoYXJlZFRleHR1cmUgfSBmcm9tICcuLi8uLi9ub2Rlcy9kaXNwbGF5L1ZpZXdwb3J0U2hhcmVkVGV4dHVyZU5vZGUuanMnO1xuXG5pbXBvcnQgeyBMaW5lRGFzaGVkTWF0ZXJpYWwgfSBmcm9tICcuLi9MaW5lRGFzaGVkTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgTm9CbGVuZGluZyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IF9kZWZhdWx0VmFsdWVzID0gLypAX19QVVJFX18qLyBuZXcgTGluZURhc2hlZE1hdGVyaWFsKCk7XG5cbi8qKlxuICogVGhpcyBub2RlIG1hdGVyaWFsIGNhbiBiZSB1c2VkIHRvIHJlbmRlciBsaW5lcyB3aXRoIGEgc2l6ZSBsYXJnZXIgdGhhbiBvbmVcbiAqIGJ5IHJlcHJlc2VudGluZyB0aGVtIGFzIGluc3RhbmNlZCBtZXNoZXMuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVNYXRlcmlhbFxuICovXG5jbGFzcyBMaW5lMk5vZGVNYXRlcmlhbCBleHRlbmRzIE5vZGVNYXRlcmlhbCB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdMaW5lMk5vZGVNYXRlcmlhbCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUgbWF0ZXJpYWwgZm9yIHdpZGUgbGluZSByZW5kZXJpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVycz17fV0gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNMaW5lMk5vZGVNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnNldERlZmF1bHRWYWx1ZXMoIF9kZWZhdWx0VmFsdWVzICk7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHZlcnRleCBjb2xvcnMgc2hvdWxkIGJlIHVzZWQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLnVzZUNvbG9yID0gcGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnM7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGFzaCBvZmZzZXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmRhc2hPZmZzZXQgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpbmUgd2lkdGguXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmxpbmVXaWR0aCA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBsaW5lcyBjb2xvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTx2ZWMzPn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5saW5lQ29sb3JOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIG9mZnNldC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMub2Zmc2V0Tm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBkYXNoIHNjYWxlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kYXNoU2NhbGVOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIGRhc2ggc2l6ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZGFzaFNpemVOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIGdhcCBzaXplLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5nYXBTaXplTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBCbGVuZGluZyBpcyBzZXQgdG8gYE5vQmxlbmRpbmdgIHNpbmNlIHRyYW5zcGFyZW5jeVxuXHRcdCAqIGlzIG5vdCBzdXBwb3J0ZWQsIHlldC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuYmxlbmRpbmcgPSBOb0JsZW5kaW5nO1xuXG5cdFx0dGhpcy5fdXNlRGFzaCA9IHBhcmFtZXRlcnMuZGFzaGVkO1xuXHRcdHRoaXMuX3VzZUFscGhhVG9Db3ZlcmFnZSA9IHRydWU7XG5cdFx0dGhpcy5fdXNlV29ybGRVbml0cyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgdmVydGV4IGFuZCBmcmFnbWVudCBzdGFnZSBvZiB0aGlzIG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgcmVuZGVyZXIgfSA9IGJ1aWxkZXI7XG5cblx0XHRjb25zdCB1c2VBbHBoYVRvQ292ZXJhZ2UgPSB0aGlzLl91c2VBbHBoYVRvQ292ZXJhZ2U7XG5cdFx0Y29uc3QgdXNlQ29sb3IgPSB0aGlzLnVzZUNvbG9yO1xuXHRcdGNvbnN0IHVzZURhc2ggPSB0aGlzLl91c2VEYXNoO1xuXHRcdGNvbnN0IHVzZVdvcmxkVW5pdHMgPSB0aGlzLl91c2VXb3JsZFVuaXRzO1xuXG5cdFx0Y29uc3QgdHJpbVNlZ21lbnQgPSBGbiggKCB7IHN0YXJ0LCBlbmQgfSApID0+IHtcblxuXHRcdFx0Y29uc3QgYSA9IGNhbWVyYVByb2plY3Rpb25NYXRyaXguZWxlbWVudCggMiApLmVsZW1lbnQoIDIgKTsgLy8gM25kIGVudHJ5IGluIDN0aCBjb2x1bW5cblx0XHRcdGNvbnN0IGIgPSBjYW1lcmFQcm9qZWN0aW9uTWF0cml4LmVsZW1lbnQoIDMgKS5lbGVtZW50KCAyICk7IC8vIDNuZCBlbnRyeSBpbiA0dGggY29sdW1uXG5cdFx0XHRjb25zdCBuZWFyRXN0aW1hdGUgPSBiLm11bCggLSAwLjUgKS5kaXYoIGEgKTtcblxuXHRcdFx0Y29uc3QgYWxwaGEgPSBuZWFyRXN0aW1hdGUuc3ViKCBzdGFydC56ICkuZGl2KCBlbmQuei5zdWIoIHN0YXJ0LnogKSApO1xuXG5cdFx0XHRyZXR1cm4gdmVjNCggbWl4KCBzdGFydC54eXosIGVuZC54eXosIGFscGhhICksIGVuZC53ICk7XG5cblx0XHR9ICkuc2V0TGF5b3V0KCB7XG5cdFx0XHRuYW1lOiAndHJpbVNlZ21lbnQnLFxuXHRcdFx0dHlwZTogJ3ZlYzQnLFxuXHRcdFx0aW5wdXRzOiBbXG5cdFx0XHRcdHsgbmFtZTogJ3N0YXJ0JywgdHlwZTogJ3ZlYzQnIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2VuZCcsIHR5cGU6ICd2ZWM0JyB9XG5cdFx0XHRdXG5cdFx0fSApO1xuXG5cdFx0dGhpcy52ZXJ0ZXhOb2RlID0gRm4oICgpID0+IHtcblxuXHRcdFx0Y29uc3QgaW5zdGFuY2VTdGFydCA9IGF0dHJpYnV0ZSggJ2luc3RhbmNlU3RhcnQnICk7XG5cdFx0XHRjb25zdCBpbnN0YW5jZUVuZCA9IGF0dHJpYnV0ZSggJ2luc3RhbmNlRW5kJyApO1xuXG5cdFx0XHQvLyBjYW1lcmEgc3BhY2VcblxuXHRcdFx0Y29uc3Qgc3RhcnQgPSB2ZWM0KCBtb2RlbFZpZXdNYXRyaXgubXVsKCB2ZWM0KCBpbnN0YW5jZVN0YXJ0LCAxLjAgKSApICkudG9WYXIoICdzdGFydCcgKTtcblx0XHRcdGNvbnN0IGVuZCA9IHZlYzQoIG1vZGVsVmlld01hdHJpeC5tdWwoIHZlYzQoIGluc3RhbmNlRW5kLCAxLjAgKSApICkudG9WYXIoICdlbmQnICk7XG5cblx0XHRcdGlmICggdXNlRGFzaCApIHtcblxuXHRcdFx0XHRjb25zdCBkYXNoU2NhbGVOb2RlID0gdGhpcy5kYXNoU2NhbGVOb2RlID8gZmxvYXQoIHRoaXMuZGFzaFNjYWxlTm9kZSApIDogbWF0ZXJpYWxMaW5lU2NhbGU7XG5cdFx0XHRcdGNvbnN0IG9mZnNldE5vZGUgPSB0aGlzLm9mZnNldE5vZGUgPyBmbG9hdCggdGhpcy5vZmZzZXROb2RlICkgOiBtYXRlcmlhbExpbmVEYXNoT2Zmc2V0O1xuXG5cdFx0XHRcdGNvbnN0IGluc3RhbmNlRGlzdGFuY2VTdGFydCA9IGF0dHJpYnV0ZSggJ2luc3RhbmNlRGlzdGFuY2VTdGFydCcgKTtcblx0XHRcdFx0Y29uc3QgaW5zdGFuY2VEaXN0YW5jZUVuZCA9IGF0dHJpYnV0ZSggJ2luc3RhbmNlRGlzdGFuY2VFbmQnICk7XG5cblx0XHRcdFx0bGV0IGxpbmVEaXN0YW5jZSA9IHBvc2l0aW9uR2VvbWV0cnkueS5sZXNzVGhhbiggMC41ICkuc2VsZWN0KCBkYXNoU2NhbGVOb2RlLm11bCggaW5zdGFuY2VEaXN0YW5jZVN0YXJ0ICksIGRhc2hTY2FsZU5vZGUubXVsKCBpbnN0YW5jZURpc3RhbmNlRW5kICkgKTtcblx0XHRcdFx0bGluZURpc3RhbmNlID0gbGluZURpc3RhbmNlLmFkZCggb2Zmc2V0Tm9kZSApO1xuXG5cdFx0XHRcdHZhcnlpbmdQcm9wZXJ0eSggJ2Zsb2F0JywgJ2xpbmVEaXN0YW5jZScgKS5hc3NpZ24oIGxpbmVEaXN0YW5jZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdXNlV29ybGRVbml0cyApIHtcblxuXHRcdFx0XHR2YXJ5aW5nUHJvcGVydHkoICd2ZWMzJywgJ3dvcmxkU3RhcnQnICkuYXNzaWduKCBzdGFydC54eXogKTtcblx0XHRcdFx0dmFyeWluZ1Byb3BlcnR5KCAndmVjMycsICd3b3JsZEVuZCcgKS5hc3NpZ24oIGVuZC54eXogKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBhc3BlY3QgPSB2aWV3cG9ydC56LmRpdiggdmlld3BvcnQudyApO1xuXG5cdFx0XHQvLyBzcGVjaWFsIGNhc2UgZm9yIHBlcnNwZWN0aXZlIHByb2plY3Rpb24sIGFuZCBzZWdtZW50cyB0aGF0IHRlcm1pbmF0ZSBlaXRoZXIgaW4sIG9yIGJlaGluZCwgdGhlIGNhbWVyYSBwbGFuZVxuXHRcdFx0Ly8gY2xlYXJseSB0aGUgZ3B1IGZpcm13YXJlIGhhcyBhIHdheSBvZiBhZGRyZXNzaW5nIHRoaXMgaXNzdWUgd2hlbiBwcm9qZWN0aW5nIGludG8gbmRjIHNwYWNlXG5cdFx0XHQvLyBidXQgd2UgbmVlZCB0byBwZXJmb3JtIG5kYy1zcGFjZSBjYWxjdWxhdGlvbnMgaW4gdGhlIHNoYWRlciwgc28gd2UgbXVzdCBhZGRyZXNzIHRoaXMgaXNzdWUgZGlyZWN0bHlcblx0XHRcdC8vIHBlcmhhcHMgdGhlcmUgaXMgYSBtb3JlIGVsZWdhbnQgc29sdXRpb24gLS0gV2VzdExhbmdsZXlcblxuXHRcdFx0Y29uc3QgcGVyc3BlY3RpdmUgPSBjYW1lcmFQcm9qZWN0aW9uTWF0cml4LmVsZW1lbnQoIDIgKS5lbGVtZW50KCAzICkuZXF1YWwoIC0gMS4wICk7IC8vIDR0aCBlbnRyeSBpbiB0aGUgM3JkIGNvbHVtblxuXG5cdFx0XHRJZiggcGVyc3BlY3RpdmUsICgpID0+IHtcblxuXHRcdFx0XHRJZiggc3RhcnQuei5sZXNzVGhhbiggMC4wICkuYW5kKCBlbmQuei5ncmVhdGVyVGhhbiggMC4wICkgKSwgKCkgPT4ge1xuXG5cdFx0XHRcdFx0ZW5kLmFzc2lnbiggdHJpbVNlZ21lbnQoIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9ICkgKTtcblxuXHRcdFx0XHR9ICkuRWxzZUlmKCBlbmQuei5sZXNzVGhhbiggMC4wICkuYW5kKCBzdGFydC56LmdyZWF0ZXJUaGFuRXF1YWwoIDAuMCApICksICgpID0+IHtcblxuXHRcdFx0XHRcdHN0YXJ0LmFzc2lnbiggdHJpbVNlZ21lbnQoIHsgc3RhcnQ6IGVuZCwgZW5kOiBzdGFydCB9ICkgKTtcblxuXHRcdFx0IFx0fSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIGNsaXAgc3BhY2Vcblx0XHRcdGNvbnN0IGNsaXBTdGFydCA9IGNhbWVyYVByb2plY3Rpb25NYXRyaXgubXVsKCBzdGFydCApO1xuXHRcdFx0Y29uc3QgY2xpcEVuZCA9IGNhbWVyYVByb2plY3Rpb25NYXRyaXgubXVsKCBlbmQgKTtcblxuXHRcdFx0Ly8gbmRjIHNwYWNlXG5cdFx0XHRjb25zdCBuZGNTdGFydCA9IGNsaXBTdGFydC54eXouZGl2KCBjbGlwU3RhcnQudyApO1xuXHRcdFx0Y29uc3QgbmRjRW5kID0gY2xpcEVuZC54eXouZGl2KCBjbGlwRW5kLncgKTtcblxuXHRcdFx0Ly8gZGlyZWN0aW9uXG5cdFx0XHRjb25zdCBkaXIgPSBuZGNFbmQueHkuc3ViKCBuZGNTdGFydC54eSApLnRvVmFyKCk7XG5cblx0XHRcdC8vIGFjY291bnQgZm9yIGNsaXAtc3BhY2UgYXNwZWN0IHJhdGlvXG5cdFx0XHRkaXIueC5hc3NpZ24oIGRpci54Lm11bCggYXNwZWN0ICkgKTtcblx0XHRcdGRpci5hc3NpZ24oIGRpci5ub3JtYWxpemUoKSApO1xuXG5cdFx0XHRjb25zdCBjbGlwID0gdmVjNCgpLnRvVmFyKCk7XG5cblx0XHRcdGlmICggdXNlV29ybGRVbml0cyApIHtcblxuXHRcdFx0XHQvLyBnZXQgdGhlIG9mZnNldCBkaXJlY3Rpb24gYXMgcGVycGVuZGljdWxhciB0byB0aGUgdmlldyB2ZWN0b3JcblxuXHRcdFx0XHRjb25zdCB3b3JsZERpciA9IGVuZC54eXouc3ViKCBzdGFydC54eXogKS5ub3JtYWxpemUoKTtcblx0XHRcdFx0Y29uc3QgdG1wRndkID0gbWl4KCBzdGFydC54eXosIGVuZC54eXosIDAuNSApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0XHRjb25zdCB3b3JsZFVwID0gd29ybGREaXIuY3Jvc3MoIHRtcEZ3ZCApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0XHRjb25zdCB3b3JsZEZ3ZCA9IHdvcmxkRGlyLmNyb3NzKCB3b3JsZFVwICk7XG5cblx0XHRcdFx0Y29uc3Qgd29ybGRQb3MgPSB2YXJ5aW5nUHJvcGVydHkoICd2ZWM0JywgJ3dvcmxkUG9zJyApO1xuXG5cdFx0XHRcdHdvcmxkUG9zLmFzc2lnbiggcG9zaXRpb25HZW9tZXRyeS55Lmxlc3NUaGFuKCAwLjUgKS5zZWxlY3QoIHN0YXJ0LCBlbmQgKSApO1xuXG5cdFx0XHRcdC8vIGhlaWdodCBvZmZzZXRcblx0XHRcdFx0Y29uc3QgaHcgPSBtYXRlcmlhbExpbmVXaWR0aC5tdWwoIDAuNSApO1xuXHRcdFx0XHR3b3JsZFBvcy5hZGRBc3NpZ24oIHZlYzQoIHBvc2l0aW9uR2VvbWV0cnkueC5sZXNzVGhhbiggMC4wICkuc2VsZWN0KCB3b3JsZFVwLm11bCggaHcgKSwgd29ybGRVcC5tdWwoIGh3ICkubmVnYXRlKCkgKSwgMCApICk7XG5cblx0XHRcdFx0Ly8gZG9uJ3QgZXh0ZW5kIHRoZSBsaW5lIGlmIHdlJ3JlIHJlbmRlcmluZyBkYXNoZXMgYmVjYXVzZSB3ZVxuXHRcdFx0XHQvLyB3b24ndCBiZSByZW5kZXJpbmcgdGhlIGVuZGNhcHNcblx0XHRcdFx0aWYgKCAhIHVzZURhc2ggKSB7XG5cblx0XHRcdFx0XHQvLyBjYXAgZXh0ZW5zaW9uXG5cdFx0XHRcdFx0d29ybGRQb3MuYWRkQXNzaWduKCB2ZWM0KCBwb3NpdGlvbkdlb21ldHJ5LnkubGVzc1RoYW4oIDAuNSApLnNlbGVjdCggd29ybGREaXIubXVsKCBodyApLm5lZ2F0ZSgpLCB3b3JsZERpci5tdWwoIGh3ICkgKSwgMCApICk7XG5cblx0XHRcdFx0XHQvLyBhZGQgd2lkdGggdG8gdGhlIGJveFxuXHRcdFx0XHRcdHdvcmxkUG9zLmFkZEFzc2lnbiggdmVjNCggd29ybGRGd2QubXVsKCBodyApLCAwICkgKTtcblxuXHRcdFx0XHRcdC8vIGVuZGNhcHNcblx0XHRcdFx0XHRJZiggcG9zaXRpb25HZW9tZXRyeS55LmdyZWF0ZXJUaGFuKCAxLjAgKS5vciggcG9zaXRpb25HZW9tZXRyeS55Lmxlc3NUaGFuKCAwLjAgKSApLCAoKSA9PiB7XG5cblx0XHRcdFx0XHRcdHdvcmxkUG9zLnN1YkFzc2lnbiggdmVjNCggd29ybGRGd2QubXVsKCAyLjAgKS5tdWwoIGh3ICksIDAgKSApO1xuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBwcm9qZWN0IHRoZSB3b3JsZHBvc1xuXHRcdFx0XHRjbGlwLmFzc2lnbiggY2FtZXJhUHJvamVjdGlvbk1hdHJpeC5tdWwoIHdvcmxkUG9zICkgKTtcblxuXHRcdFx0XHQvLyBzaGlmdCB0aGUgZGVwdGggb2YgdGhlIHByb2plY3RlZCBwb2ludHMgc28gdGhlIGxpbmVcblx0XHRcdFx0Ly8gc2VnbWVudHMgb3ZlcmxhcCBuZWF0bHlcblx0XHRcdFx0Y29uc3QgY2xpcFBvc2UgPSB2ZWMzKCkudG9WYXIoKTtcblxuXHRcdFx0XHRjbGlwUG9zZS5hc3NpZ24oIHBvc2l0aW9uR2VvbWV0cnkueS5sZXNzVGhhbiggMC41ICkuc2VsZWN0KCBuZGNTdGFydCwgbmRjRW5kICkgKTtcblx0XHRcdFx0Y2xpcC56LmFzc2lnbiggY2xpcFBvc2Uuei5tdWwoIGNsaXAudyApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc3Qgb2Zmc2V0ID0gdmVjMiggZGlyLnksIGRpci54Lm5lZ2F0ZSgpICkudG9WYXIoICdvZmZzZXQnICk7XG5cblx0XHRcdFx0Ly8gdW5kbyBhc3BlY3QgcmF0aW8gYWRqdXN0bWVudFxuXHRcdFx0XHRkaXIueC5hc3NpZ24oIGRpci54LmRpdiggYXNwZWN0ICkgKTtcblx0XHRcdFx0b2Zmc2V0LnguYXNzaWduKCBvZmZzZXQueC5kaXYoIGFzcGVjdCApICk7XG5cblx0XHRcdFx0Ly8gc2lnbiBmbGlwXG5cdFx0XHRcdG9mZnNldC5hc3NpZ24oIHBvc2l0aW9uR2VvbWV0cnkueC5sZXNzVGhhbiggMC4wICkuc2VsZWN0KCBvZmZzZXQubmVnYXRlKCksIG9mZnNldCApICk7XG5cblx0XHRcdFx0Ly8gZW5kY2Fwc1xuXHRcdFx0XHRJZiggcG9zaXRpb25HZW9tZXRyeS55Lmxlc3NUaGFuKCAwLjAgKSwgKCkgPT4ge1xuXG5cdFx0XHRcdFx0b2Zmc2V0LmFzc2lnbiggb2Zmc2V0LnN1YiggZGlyICkgKTtcblxuXHRcdFx0XHR9ICkuRWxzZUlmKCBwb3NpdGlvbkdlb21ldHJ5LnkuZ3JlYXRlclRoYW4oIDEuMCApLCAoKSA9PiB7XG5cblx0XHRcdFx0XHRvZmZzZXQuYXNzaWduKCBvZmZzZXQuYWRkKCBkaXIgKSApO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBhZGp1c3QgZm9yIGxpbmV3aWR0aFxuXHRcdFx0XHRvZmZzZXQuYXNzaWduKCBvZmZzZXQubXVsKCBtYXRlcmlhbExpbmVXaWR0aCApICk7XG5cblx0XHRcdFx0Ly8gYWRqdXN0IGZvciBjbGlwLXNwYWNlIHRvIHNjcmVlbi1zcGFjZSBjb252ZXJzaW9uIC8vIG1heWJlIHJlc29sdXRpb24gc2hvdWxkIGJlIGJhc2VkIG9uIHZpZXdwb3J0IC4uLlxuXHRcdFx0XHRvZmZzZXQuYXNzaWduKCBvZmZzZXQuZGl2KCB2aWV3cG9ydC53ICkgKTtcblxuXHRcdFx0XHQvLyBzZWxlY3QgZW5kXG5cdFx0XHRcdGNsaXAuYXNzaWduKCBwb3NpdGlvbkdlb21ldHJ5LnkubGVzc1RoYW4oIDAuNSApLnNlbGVjdCggY2xpcFN0YXJ0LCBjbGlwRW5kICkgKTtcblxuXHRcdFx0XHQvLyBiYWNrIHRvIGNsaXAgc3BhY2Vcblx0XHRcdFx0b2Zmc2V0LmFzc2lnbiggb2Zmc2V0Lm11bCggY2xpcC53ICkgKTtcblxuXHRcdFx0XHRjbGlwLmFzc2lnbiggY2xpcC5hZGQoIHZlYzQoIG9mZnNldCwgMCwgMCApICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY2xpcDtcblxuXHRcdH0gKSgpO1xuXG5cdFx0Y29uc3QgY2xvc2VzdExpbmVUb0xpbmUgPSBGbiggKCB7IHAxLCBwMiwgcDMsIHA0IH0gKSA9PiB7XG5cblx0XHRcdGNvbnN0IHAxMyA9IHAxLnN1YiggcDMgKTtcblx0XHRcdGNvbnN0IHA0MyA9IHA0LnN1YiggcDMgKTtcblxuXHRcdFx0Y29uc3QgcDIxID0gcDIuc3ViKCBwMSApO1xuXG5cdFx0XHRjb25zdCBkMTM0MyA9IHAxMy5kb3QoIHA0MyApO1xuXHRcdFx0Y29uc3QgZDQzMjEgPSBwNDMuZG90KCBwMjEgKTtcblx0XHRcdGNvbnN0IGQxMzIxID0gcDEzLmRvdCggcDIxICk7XG5cdFx0XHRjb25zdCBkNDM0MyA9IHA0My5kb3QoIHA0MyApO1xuXHRcdFx0Y29uc3QgZDIxMjEgPSBwMjEuZG90KCBwMjEgKTtcblxuXHRcdFx0Y29uc3QgZGVub20gPSBkMjEyMS5tdWwoIGQ0MzQzICkuc3ViKCBkNDMyMS5tdWwoIGQ0MzIxICkgKTtcblx0XHRcdGNvbnN0IG51bWVyID0gZDEzNDMubXVsKCBkNDMyMSApLnN1YiggZDEzMjEubXVsKCBkNDM0MyApICk7XG5cblx0XHRcdGNvbnN0IG11YSA9IG51bWVyLmRpdiggZGVub20gKS5jbGFtcCgpO1xuXHRcdFx0Y29uc3QgbXViID0gZDEzNDMuYWRkKCBkNDMyMS5tdWwoIG11YSApICkuZGl2KCBkNDM0MyApLmNsYW1wKCk7XG5cblx0XHRcdHJldHVybiB2ZWMyKCBtdWEsIG11YiApO1xuXG5cdFx0fSApO1xuXG5cdFx0dGhpcy5jb2xvck5vZGUgPSBGbiggKCkgPT4ge1xuXG5cdFx0XHRjb25zdCB2VXYgPSB1digpO1xuXG5cdFx0XHRpZiAoIHVzZURhc2ggKSB7XG5cblx0XHRcdFx0Y29uc3QgZGFzaFNpemVOb2RlID0gdGhpcy5kYXNoU2l6ZU5vZGUgPyBmbG9hdCggdGhpcy5kYXNoU2l6ZU5vZGUgKSA6IG1hdGVyaWFsTGluZURhc2hTaXplO1xuXHRcdFx0XHRjb25zdCBnYXBTaXplTm9kZSA9IHRoaXMuZ2FwU2l6ZU5vZGUgPyBmbG9hdCggdGhpcy5nYXBTaXplTm9kZSApIDogbWF0ZXJpYWxMaW5lR2FwU2l6ZTtcblxuXHRcdFx0XHRkYXNoU2l6ZS5hc3NpZ24oIGRhc2hTaXplTm9kZSApO1xuXHRcdFx0XHRnYXBTaXplLmFzc2lnbiggZ2FwU2l6ZU5vZGUgKTtcblxuXHRcdFx0XHRjb25zdCB2TGluZURpc3RhbmNlID0gdmFyeWluZ1Byb3BlcnR5KCAnZmxvYXQnLCAnbGluZURpc3RhbmNlJyApO1xuXG5cdFx0XHRcdHZVdi55Lmxlc3NUaGFuKCAtIDEuMCApLm9yKCB2VXYueS5ncmVhdGVyVGhhbiggMS4wICkgKS5kaXNjYXJkKCk7IC8vIGRpc2NhcmQgZW5kY2Fwc1xuXHRcdFx0XHR2TGluZURpc3RhbmNlLm1vZCggZGFzaFNpemUuYWRkKCBnYXBTaXplICkgKS5ncmVhdGVyVGhhbiggZGFzaFNpemUgKS5kaXNjYXJkKCk7IC8vIHRvZG8gLSBGSVhcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBhbHBoYSA9IGZsb2F0KCAxICkudG9WYXIoICdhbHBoYScgKTtcblxuXHRcdFx0aWYgKCB1c2VXb3JsZFVuaXRzICkge1xuXG5cdFx0XHRcdGNvbnN0IHdvcmxkU3RhcnQgPSB2YXJ5aW5nUHJvcGVydHkoICd2ZWMzJywgJ3dvcmxkU3RhcnQnICk7XG5cdFx0XHRcdGNvbnN0IHdvcmxkRW5kID0gdmFyeWluZ1Byb3BlcnR5KCAndmVjMycsICd3b3JsZEVuZCcgKTtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBjbG9zZXN0IHBvaW50cyBvbiB0aGUgdmlldyByYXkgYW5kIHRoZSBsaW5lIHNlZ21lbnRcblx0XHRcdFx0Y29uc3QgcmF5RW5kID0gdmFyeWluZ1Byb3BlcnR5KCAndmVjNCcsICd3b3JsZFBvcycgKS54eXoubm9ybWFsaXplKCkubXVsKCAxZTUgKTtcblx0XHRcdFx0Y29uc3QgbGluZURpciA9IHdvcmxkRW5kLnN1Yiggd29ybGRTdGFydCApO1xuXHRcdFx0XHRjb25zdCBwYXJhbXMgPSBjbG9zZXN0TGluZVRvTGluZSggeyBwMTogd29ybGRTdGFydCwgcDI6IHdvcmxkRW5kLCBwMzogdmVjMyggMC4wLCAwLjAsIDAuMCApLCBwNDogcmF5RW5kIH0gKTtcblxuXHRcdFx0XHRjb25zdCBwMSA9IHdvcmxkU3RhcnQuYWRkKCBsaW5lRGlyLm11bCggcGFyYW1zLnggKSApO1xuXHRcdFx0XHRjb25zdCBwMiA9IHJheUVuZC5tdWwoIHBhcmFtcy55ICk7XG5cdFx0XHRcdGNvbnN0IGRlbHRhID0gcDEuc3ViKCBwMiApO1xuXHRcdFx0XHRjb25zdCBsZW4gPSBkZWx0YS5sZW5ndGgoKTtcblx0XHRcdFx0Y29uc3Qgbm9ybSA9IGxlbi5kaXYoIG1hdGVyaWFsTGluZVdpZHRoICk7XG5cblx0XHRcdFx0aWYgKCAhIHVzZURhc2ggKSB7XG5cblx0XHRcdFx0XHRpZiAoIHVzZUFscGhhVG9Db3ZlcmFnZSAmJiByZW5kZXJlci5zYW1wbGVzID4gMSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZG5vcm0gPSBub3JtLmZ3aWR0aCgpO1xuXHRcdFx0XHRcdFx0YWxwaGEuYXNzaWduKCBzbW9vdGhzdGVwKCBkbm9ybS5uZWdhdGUoKS5hZGQoIDAuNSApLCBkbm9ybS5hZGQoIDAuNSApLCBub3JtICkub25lTWludXMoKSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0bm9ybS5ncmVhdGVyVGhhbiggMC41ICkuZGlzY2FyZCgpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyByb3VuZCBlbmRjYXBzXG5cblx0XHRcdFx0aWYgKCB1c2VBbHBoYVRvQ292ZXJhZ2UgJiYgcmVuZGVyZXIuc2FtcGxlcyA+IDEgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhID0gdlV2Lng7XG5cdFx0XHRcdFx0Y29uc3QgYiA9IHZVdi55LmdyZWF0ZXJUaGFuKCAwLjAgKS5zZWxlY3QoIHZVdi55LnN1YiggMS4wICksIHZVdi55LmFkZCggMS4wICkgKTtcblxuXHRcdFx0XHRcdGNvbnN0IGxlbjIgPSBhLm11bCggYSApLmFkZCggYi5tdWwoIGIgKSApO1xuXG5cdFx0XHRcdFx0Y29uc3QgZGxlbiA9IGZsb2F0KCBsZW4yLmZ3aWR0aCgpICkudG9WYXIoICdkbGVuJyApO1xuXG5cdFx0XHRcdFx0SWYoIHZVdi55LmFicygpLmdyZWF0ZXJUaGFuKCAxLjAgKSwgKCkgPT4ge1xuXG5cdFx0XHRcdFx0XHRhbHBoYS5hc3NpZ24oIHNtb290aHN0ZXAoIGRsZW4ub25lTWludXMoKSwgZGxlbi5hZGQoIDEgKSwgbGVuMiApLm9uZU1pbnVzKCkgKTtcblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0SWYoIHZVdi55LmFicygpLmdyZWF0ZXJUaGFuKCAxLjAgKSwgKCkgPT4ge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBhID0gdlV2Lng7XG5cdFx0XHRcdFx0XHRjb25zdCBiID0gdlV2LnkuZ3JlYXRlclRoYW4oIDAuMCApLnNlbGVjdCggdlV2Lnkuc3ViKCAxLjAgKSwgdlV2LnkuYWRkKCAxLjAgKSApO1xuXHRcdFx0XHRcdFx0Y29uc3QgbGVuMiA9IGEubXVsKCBhICkuYWRkKCBiLm11bCggYiApICk7XG5cblx0XHRcdFx0XHRcdGxlbjIuZ3JlYXRlclRoYW4oIDEuMCApLmRpc2NhcmQoKTtcblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IGxpbmVDb2xvck5vZGU7XG5cblx0XHRcdGlmICggdGhpcy5saW5lQ29sb3JOb2RlICkge1xuXG5cdFx0XHRcdGxpbmVDb2xvck5vZGUgPSB0aGlzLmxpbmVDb2xvck5vZGU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCB1c2VDb2xvciApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGluc3RhbmNlQ29sb3JTdGFydCA9IGF0dHJpYnV0ZSggJ2luc3RhbmNlQ29sb3JTdGFydCcgKTtcblx0XHRcdFx0XHRjb25zdCBpbnN0YW5jZUNvbG9yRW5kID0gYXR0cmlidXRlKCAnaW5zdGFuY2VDb2xvckVuZCcgKTtcblxuXHRcdFx0XHRcdGNvbnN0IGluc3RhbmNlQ29sb3IgPSBwb3NpdGlvbkdlb21ldHJ5LnkubGVzc1RoYW4oIDAuNSApLnNlbGVjdCggaW5zdGFuY2VDb2xvclN0YXJ0LCBpbnN0YW5jZUNvbG9yRW5kICk7XG5cblx0XHRcdFx0XHRsaW5lQ29sb3JOb2RlID0gaW5zdGFuY2VDb2xvci5tdWwoIG1hdGVyaWFsQ29sb3IgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0bGluZUNvbG9yTm9kZSA9IG1hdGVyaWFsQ29sb3I7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2ZWM0KCBsaW5lQ29sb3JOb2RlLCBhbHBoYSApO1xuXG5cdFx0fSApKCk7XG5cblx0XHRpZiAoIHRoaXMudHJhbnNwYXJlbnQgKSB7XG5cblx0XHRcdGNvbnN0IG9wYWNpdHlOb2RlID0gdGhpcy5vcGFjaXR5Tm9kZSA/IGZsb2F0KCB0aGlzLm9wYWNpdHlOb2RlICkgOiBtYXRlcmlhbE9wYWNpdHk7XG5cblx0XHRcdHRoaXMub3V0cHV0Tm9kZSA9IHZlYzQoIHRoaXMuY29sb3JOb2RlLnJnYi5tdWwoIG9wYWNpdHlOb2RlICkuYWRkKCB2aWV3cG9ydFNoYXJlZFRleHR1cmUoKS5yZ2IubXVsKCBvcGFjaXR5Tm9kZS5vbmVNaW51cygpICkgKSwgdGhpcy5jb2xvck5vZGUuYSApO1xuXG5cdFx0fVxuXG5cdFx0c3VwZXIuc2V0dXAoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIGxpbmVzIHNob3VsZCBzaXplZCBpbiB3b3JsZCB1bml0cyBvciBub3QuXG5cdCAqIFdoZW4gc2V0IHRvIGBmYWxzZWAgdGhlIHVuaXQgaXMgcGl4ZWwuXG5cdCAqXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAZGVmYXVsdCBmYWxzZVxuXHQgKi9cblx0Z2V0IHdvcmxkVW5pdHMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fdXNlV29ybGRVbml0cztcblxuXHR9XG5cblx0c2V0IHdvcmxkVW5pdHMoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl91c2VXb3JsZFVuaXRzICE9PSB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5fdXNlV29ybGRVbml0cyA9IHZhbHVlO1xuXHRcdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoZSBsaW5lcyBzaG91bGQgYmUgZGFzaGVkIG9yIG5vdC5cblx0ICpcblx0ICogQHR5cGUge2Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IGZhbHNlXG5cdCAqL1xuXHRnZXQgZGFzaGVkKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3VzZURhc2g7XG5cblx0fVxuXG5cdHNldCBkYXNoZWQoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl91c2VEYXNoICE9PSB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5fdXNlRGFzaCA9IHZhbHVlO1xuXHRcdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIGFscGhhIHRvIGNvdmVyYWdlIHNob3VsZCBiZSB1c2VkIG9yIG5vdC5cblx0ICpcblx0ICogQHR5cGUge2Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IHRydWVcblx0ICovXG5cdGdldCBhbHBoYVRvQ292ZXJhZ2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fdXNlQWxwaGFUb0NvdmVyYWdlO1xuXG5cdH1cblxuXHRzZXQgYWxwaGFUb0NvdmVyYWdlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fdXNlQWxwaGFUb0NvdmVyYWdlICE9PSB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5fdXNlQWxwaGFUb0NvdmVyYWdlID0gdmFsdWU7XG5cdFx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGluZTJOb2RlTWF0ZXJpYWw7XG4iLCJpbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIFBhY2tzIGEgZGlyZWN0aW9uIHZlY3RvciBpbnRvIGEgY29sb3IgdmFsdWUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IG5vZGUgLSBUaGUgZGlyZWN0aW9uIHRvIHBhY2suXG4gKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgY29sb3IuXG4gKi9cbmV4cG9ydCBjb25zdCBkaXJlY3Rpb25Ub0NvbG9yID0gKCBub2RlICkgPT4gbm9kZU9iamVjdCggbm9kZSApLm11bCggMC41ICkuYWRkKCAwLjUgKTtcblxuLyoqXG4gKiBVbnBhY2tzIGEgY29sb3IgdmFsdWUgaW50byBhIGRpcmVjdGlvbiB2ZWN0b3IuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IG5vZGUgLSBUaGUgY29sb3IgdG8gdW5wYWNrLlxuICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIGRpcmVjdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbG9yVG9EaXJlY3Rpb24gPSAoIG5vZGUgKSA9PiBub2RlT2JqZWN0KCBub2RlICkubXVsKCAyLjAgKS5zdWIoIDEgKTtcbiIsImltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi9Ob2RlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgZGlmZnVzZUNvbG9yIH0gZnJvbSAnLi4vLi4vbm9kZXMvY29yZS9Qcm9wZXJ0eU5vZGUuanMnO1xuaW1wb3J0IHsgZGlyZWN0aW9uVG9Db2xvciB9IGZyb20gJy4uLy4uL25vZGVzL3V0aWxzL1BhY2tpbmcuanMnO1xuaW1wb3J0IHsgbWF0ZXJpYWxPcGFjaXR5IH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL01hdGVyaWFsTm9kZS5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTm9ybWFsLmpzJztcbmltcG9ydCB7IGNvbG9yU3BhY2VUb1dvcmtpbmcgfSBmcm9tICcuLi8uLi9ub2Rlcy9kaXNwbGF5L0NvbG9yU3BhY2VOb2RlLmpzJztcbmltcG9ydCB7IGZsb2F0LCB2ZWM0IH0gZnJvbSAnLi4vLi4vbm9kZXMvdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgU1JHQkNvbG9yU3BhY2UgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQgeyBNZXNoTm9ybWFsTWF0ZXJpYWwgfSBmcm9tICcuLi9NZXNoTm9ybWFsTWF0ZXJpYWwuanMnO1xuXG5jb25zdCBfZGVmYXVsdFZhbHVlcyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1lc2hOb3JtYWxNYXRlcmlhbCgpO1xuXG4vKipcbiAqIE5vZGUgbWF0ZXJpYWwgdmVyc2lvbiBvZiB7QGxpbmsgTWVzaE5vcm1hbE1hdGVyaWFsfS5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZU1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hOb3JtYWxOb2RlTWF0ZXJpYWwgZXh0ZW5kcyBOb2RlTWF0ZXJpYWwge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTWVzaE5vcm1hbE5vZGVNYXRlcmlhbCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2ggbm9ybWFsIG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzTWVzaE5vcm1hbE5vZGVNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnNldERlZmF1bHRWYWx1ZXMoIF9kZWZhdWx0VmFsdWVzICk7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBieSBjb21wdXRpbmcgdGhlIGRpZmZ1c2UgY29sb3Jcblx0ICogYmFzZWQgb24gdGhlIG5vcm1hbCBkYXRhLlxuXHQgKi9cblx0c2V0dXBEaWZmdXNlQ29sb3IoKSB7XG5cblx0XHRjb25zdCBvcGFjaXR5Tm9kZSA9IHRoaXMub3BhY2l0eU5vZGUgPyBmbG9hdCggdGhpcy5vcGFjaXR5Tm9kZSApIDogbWF0ZXJpYWxPcGFjaXR5O1xuXG5cdFx0Ly8gQnkgY29udmVudGlvbiwgYSBub3JtYWwgcGFja2VkIHRvIFJHQiBpcyBpbiBzUkdCIGNvbG9yIHNwYWNlLiBDb252ZXJ0IGl0IHRvIHdvcmtpbmcgY29sb3Igc3BhY2UuXG5cblx0XHRkaWZmdXNlQ29sb3IuYXNzaWduKCBjb2xvclNwYWNlVG9Xb3JraW5nKCB2ZWM0KCBkaXJlY3Rpb25Ub0NvbG9yKCB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcgKSwgb3BhY2l0eU5vZGUgKSwgU1JHQkNvbG9yU3BhY2UgKSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNoTm9ybWFsTm9kZU1hdGVyaWFsO1xuIiwiaW1wb3J0IFRlbXBOb2RlIGZyb20gJy4uL2NvcmUvVGVtcE5vZGUuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25Xb3JsZERpcmVjdGlvbiB9IGZyb20gJy4uL2FjY2Vzc29ycy9Qb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHksIHZlYzIgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogQ2FuIGJlIHVzZWQgdG8gY29tcHV0ZSB0ZXh0dXJlIGNvb3JkaW5hdGVzIGZvciBwcm9qZWN0aW5nIGFuXG4gKiBlcXVpcmVjdGFuZ3VsYXIgdGV4dHVyZSBvbnRvIGEgbWVzaCBmb3IgdXNpbmcgaXQgYXMgdGhlIHNjZW5lJ3NcbiAqIGJhY2tncm91bmQuXG4gKlxuICogYGBganNcbiAqIHNjZW5lLmJhY2tncm91bmROb2RlID0gdGV4dHVyZSggZXF1aXJlY3RUZXh0dXJlLCBlcXVpcmVjdFVWKCkgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBUZW1wTm9kZVxuICovXG5jbGFzcyBFcXVpcmVjdFVWTm9kZSBleHRlbmRzIFRlbXBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0VxdWlyZWN0VVZOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZXF1aXJlY3QgdXYgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlPHZlYzM+fSBbZGlyTm9kZT1wb3NpdGlvbldvcmxkRGlyZWN0aW9uXSAtIEEgZGlyZWN0aW9uIHZlY3RvciBmb3Igc2FtcGxpbmcgd2hpY2ggaXMgYnkgZGVmYXVsdCBgcG9zaXRpb25Xb3JsZERpcmVjdGlvbmAuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggZGlyTm9kZSA9IHBvc2l0aW9uV29ybGREaXJlY3Rpb24gKSB7XG5cblx0XHRzdXBlciggJ3ZlYzInICk7XG5cblx0XHQvKipcblx0XHQgKiBBIGRpcmVjdGlvbiB2ZWN0b3IgZm9yIHNhbXBsaW5nIHdoeSBpcyBieSBkZWZhdWx0IGBwb3NpdGlvbldvcmxkRGlyZWN0aW9uYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZGlyTm9kZSA9IGRpck5vZGU7XG5cblx0fVxuXG5cdHNldHVwKCkge1xuXG5cdFx0Y29uc3QgZGlyID0gdGhpcy5kaXJOb2RlO1xuXG5cdFx0Y29uc3QgdSA9IGRpci56LmF0YW4oIGRpci54ICkubXVsKCAxIC8gKCBNYXRoLlBJICogMiApICkuYWRkKCAwLjUgKTtcblx0XHRjb25zdCB2ID0gZGlyLnkuY2xhbXAoIC0gMS4wLCAxLjAgKS5hc2luKCkubXVsKCAxIC8gTWF0aC5QSSApLmFkZCggMC41ICk7XG5cblx0XHRyZXR1cm4gdmVjMiggdSwgdiApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBFcXVpcmVjdFVWTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIGVxdWlyZWN0IHV2IG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IFtkaXJOb2RlPXBvc2l0aW9uV29ybGREaXJlY3Rpb25dIC0gQSBkaXJlY3Rpb24gdmVjdG9yIGZvciBzYW1wbGluZyB3aGljaCBpcyBieSBkZWZhdWx0IGBwb3NpdGlvbldvcmxkRGlyZWN0aW9uYC5cbiAqIEByZXR1cm5zIHtFcXVpcmVjdFVWTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVxdWlyZWN0VVYgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggRXF1aXJlY3RVVk5vZGUgKTtcbiIsImltcG9ydCB7IGVxdWlyZWN0VVYgfSBmcm9tICcuLi8uLi9ub2Rlcy91dGlscy9FcXVpcmVjdFVWTm9kZS5qcyc7XG5pbXBvcnQgeyB0ZXh0dXJlIGFzIFRTTF9UZXh0dXJlIH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL1RleHR1cmVOb2RlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uV29ybGREaXJlY3Rpb24gfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IE5vZGVNYXRlcmlhbCBmcm9tICcuLi8uLi9tYXRlcmlhbHMvbm9kZXMvTm9kZU1hdGVyaWFsLmpzJztcblxuaW1wb3J0IHsgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi4vLi4vcmVuZGVyZXJzL1dlYkdMQ3ViZVJlbmRlclRhcmdldC5qcyc7XG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gJy4uLy4uL3NjZW5lcy9TY2VuZS5qcyc7XG5pbXBvcnQgeyBDdWJlQ2FtZXJhIH0gZnJvbSAnLi4vLi4vY2FtZXJhcy9DdWJlQ2FtZXJhLmpzJztcbmltcG9ydCB7IEJveEdlb21ldHJ5IH0gZnJvbSAnLi4vLi4vZ2VvbWV0cmllcy9Cb3hHZW9tZXRyeS5qcyc7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSAnLi4vLi4vb2JqZWN0cy9NZXNoLmpzJztcbmltcG9ydCB7IEJhY2tTaWRlLCBOb0JsZW5kaW5nLCBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcG1hcExpbmVhckZpbHRlciB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbi8vIEBUT0RPOiBDb25zaWRlciByZW5hbWUgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IHRvIGp1c3QgQ3ViZVJlbmRlclRhcmdldFxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGN1YmUgcmVuZGVyIHRhcmdldC4gSXQgaXMgYSBzcGVjaWFsIHZlcnNpb25cbiAqIG9mIGBXZWJHTEN1YmVSZW5kZXJUYXJnZXRgIHdoaWNoIGlzIGNvbXBhdGlibGUgd2l0aCBgV2ViR1BVUmVuZGVyZXJgLlxuICpcbiAqIEBhdWdtZW50cyBXZWJHTEN1YmVSZW5kZXJUYXJnZXRcbiAqL1xuY2xhc3MgQ3ViZVJlbmRlclRhcmdldCBleHRlbmRzIFdlYkdMQ3ViZVJlbmRlclRhcmdldCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY3ViZSByZW5kZXIgdGFyZ2V0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gLSBUaGUgc2l6ZSBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtSZW5kZXJUYXJnZXR+T3B0aW9uc30gW29wdGlvbnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHNpemUgPSAxLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlciggc2l6ZSwgb3B0aW9ucyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0N1YmVSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlIHRvIGEgY3ViZSBtYXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmUuXG5cdCAqIEByZXR1cm4ge0N1YmVSZW5kZXJUYXJnZXR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY3ViZSByZW5kZXIgdGFyZ2V0LlxuXHQgKi9cblx0ZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUoIHJlbmRlcmVyLCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgY3VycmVudE1pbkZpbHRlciA9IHRleHR1cmUubWluRmlsdGVyO1xuXHRcdGNvbnN0IGN1cnJlbnRHZW5lcmF0ZU1pcG1hcHMgPSB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gdHJ1ZTtcblxuXHRcdHRoaXMudGV4dHVyZS50eXBlID0gdGV4dHVyZS50eXBlO1xuXHRcdHRoaXMudGV4dHVyZS5jb2xvclNwYWNlID0gdGV4dHVyZS5jb2xvclNwYWNlO1xuXG5cdFx0dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO1xuXHRcdHRoaXMudGV4dHVyZS5taW5GaWx0ZXIgPSB0ZXh0dXJlLm1pbkZpbHRlcjtcblx0XHR0aGlzLnRleHR1cmUubWFnRmlsdGVyID0gdGV4dHVyZS5tYWdGaWx0ZXI7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCb3hHZW9tZXRyeSggNSwgNSwgNSApO1xuXG5cdFx0Y29uc3QgdXZOb2RlID0gZXF1aXJlY3RVViggcG9zaXRpb25Xb3JsZERpcmVjdGlvbiApO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTm9kZU1hdGVyaWFsKCk7XG5cdFx0bWF0ZXJpYWwuY29sb3JOb2RlID0gVFNMX1RleHR1cmUoIHRleHR1cmUsIHV2Tm9kZSwgMCApO1xuXHRcdG1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRtYXRlcmlhbC5ibGVuZGluZyA9IE5vQmxlbmRpbmc7XG5cblx0XHRjb25zdCBtZXNoID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0Y29uc3Qgc2NlbmUgPSBuZXcgU2NlbmUoKTtcblx0XHRzY2VuZS5hZGQoIG1lc2ggKTtcblxuXHRcdC8vIEF2b2lkIGJsdXJyZWQgcG9sZXNcblx0XHRpZiAoIHRleHR1cmUubWluRmlsdGVyID09PSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgKSB0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHRcdGNvbnN0IGNhbWVyYSA9IG5ldyBDdWJlQ2FtZXJhKCAxLCAxMCwgdGhpcyApO1xuXG5cdFx0Y29uc3QgY3VycmVudE1SVCA9IHJlbmRlcmVyLmdldE1SVCgpO1xuXHRcdHJlbmRlcmVyLnNldE1SVCggbnVsbCApO1xuXG5cdFx0Y2FtZXJhLnVwZGF0ZSggcmVuZGVyZXIsIHNjZW5lICk7XG5cblx0XHRyZW5kZXJlci5zZXRNUlQoIGN1cnJlbnRNUlQgKTtcblxuXHRcdHRleHR1cmUubWluRmlsdGVyID0gY3VycmVudE1pbkZpbHRlcjtcblx0XHR0ZXh0dXJlLmN1cnJlbnRHZW5lcmF0ZU1pcG1hcHMgPSBjdXJyZW50R2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0bWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0bWVzaC5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3ViZVJlbmRlclRhcmdldDtcbiIsImltcG9ydCBUZW1wTm9kZSBmcm9tICcuLi9jb3JlL1RlbXBOb2RlLmpzJztcbmltcG9ydCB7IE5vZGVVcGRhdGVUeXBlIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgbm9kZVByb3h5IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgQ3ViZVRleHR1cmUgfSBmcm9tICcuLi8uLi90ZXh0dXJlcy9DdWJlVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBjdWJlVGV4dHVyZSB9IGZyb20gJy4uL2FjY2Vzc29ycy9DdWJlVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IEN1YmVSZW5kZXJUYXJnZXQgZnJvbSAnLi4vLi4vcmVuZGVyZXJzL2NvbW1vbi9DdWJlUmVuZGVyVGFyZ2V0LmpzJztcbmltcG9ydCB7IEN1YmVSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLCBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZywgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuXG5jb25zdCBfY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIFRoaXMgbm9kZSBjYW4gYmUgdXNlZCB0byBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgZW52aXJvbm1lbnQgbWFwcyBpbiB0aGVcbiAqIGVxdWlyZWN0YW5ndWxhciBmb3JtYXQgaW50byB0aGUgY3ViZSBtYXAgZm9ybWF0LlxuICpcbiAqIEBhdWdtZW50cyBUZW1wTm9kZVxuICovXG5jbGFzcyBDdWJlTWFwTm9kZSBleHRlbmRzIFRlbXBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0N1YmVNYXBOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY3ViZSBtYXAgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBlbnZOb2RlIC0gVGhlIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBlbnZpcm9ubWVudCBtYXAuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggZW52Tm9kZSApIHtcblxuXHRcdHN1cGVyKCAndmVjMycgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHJlcHJlc2VudGluZyB0aGUgZW52aXJvbm1lbnQgbWFwLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5lbnZOb2RlID0gZW52Tm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBjdWJlIHRleHR1cmUuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/Q3ViZVRleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2N1YmVUZXh0dXJlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBjdWJlIHRleHR1cmUgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge0N1YmVUZXh0dXJlTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLl9jdWJlVGV4dHVyZU5vZGUgPSBjdWJlVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgZGVmYXVsdFRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcblx0XHRkZWZhdWx0VGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBkZWZhdWx0IGN1YmUgdGV4dHVyZSB0aGF0IGFjdHMgYXMgYSBwbGFjZWhvbGRlci5cblx0XHQgKiBJdCBpcyB1c2VkIHdoZW4gdGhlIGNvbnZlcnNpb24gZnJvbSBlcXVpcmVjdGFuZ3VsYXIgdG8gY3ViZVxuXHRcdCAqIG1hcCBoYXMgbm90IGZpbmlzaGVkIHlldCBmb3IgYSBnaXZlbiB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7Q3ViZVRleHR1cmV9XG5cdFx0ICovXG5cdFx0dGhpcy5fZGVmYXVsdFRleHR1cmUgPSBkZWZhdWx0VGV4dHVyZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBgdXBkYXRlQmVmb3JlVHlwZWAgaXMgc2V0IHRvIGBOb2RlVXBkYXRlVHlwZS5SRU5ERVJgIHNpbmNlIHRoZSBub2RlIHVwZGF0ZXNcblx0XHQgKiB0aGUgdGV4dHVyZSBvbmNlIHBlciByZW5kZXIgaW4gaXRzIHtAbGluayBDdWJlTWFwTm9kZSN1cGRhdGVCZWZvcmV9IG1ldGhvZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ3JlbmRlcidcblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZUJlZm9yZVR5cGUgPSBOb2RlVXBkYXRlVHlwZS5SRU5ERVI7XG5cblx0fVxuXG5cdHVwZGF0ZUJlZm9yZSggZnJhbWUgKSB7XG5cblx0XHRjb25zdCB7IHJlbmRlcmVyLCBtYXRlcmlhbCB9ID0gZnJhbWU7XG5cblx0XHRjb25zdCBlbnZOb2RlID0gdGhpcy5lbnZOb2RlO1xuXG5cdFx0aWYgKCBlbnZOb2RlLmlzVGV4dHVyZU5vZGUgfHwgZW52Tm9kZS5pc01hdGVyaWFsUmVmZXJlbmNlTm9kZSApIHtcblxuXHRcdFx0Y29uc3QgdGV4dHVyZSA9ICggZW52Tm9kZS5pc1RleHR1cmVOb2RlICkgPyBlbnZOb2RlLnZhbHVlIDogbWF0ZXJpYWxbIGVudk5vZGUucHJvcGVydHkgXTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRcdGNvbnN0IG1hcHBpbmcgPSB0ZXh0dXJlLm1hcHBpbmc7XG5cblx0XHRcdFx0aWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApIHtcblxuXHRcdFx0XHRcdC8vIGNoZWNrIGZvciBjb252ZXJ0ZWQgY3ViZW1hcCBtYXBcblxuXHRcdFx0XHRcdGlmICggX2NhY2hlLmhhcyggdGV4dHVyZSApICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBjdWJlTWFwID0gX2NhY2hlLmdldCggdGV4dHVyZSApO1xuXG5cdFx0XHRcdFx0XHRtYXBUZXh0dXJlTWFwcGluZyggY3ViZU1hcCwgdGV4dHVyZS5tYXBwaW5nICk7XG5cdFx0XHRcdFx0XHR0aGlzLl9jdWJlVGV4dHVyZSA9IGN1YmVNYXA7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBjcmVhdGUgY3ViZSBtYXAgZnJvbSBlcXVpcmVjdGFuZ3VsYXIgbWFwXG5cblx0XHRcdFx0XHRcdGNvbnN0IGltYWdlID0gdGV4dHVyZS5pbWFnZTtcblxuXHRcdFx0XHRcdFx0aWYgKCBpc0VxdWlyZWN0YW5ndWxhck1hcFJlYWR5KCBpbWFnZSApICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IHJlbmRlclRhcmdldCA9IG5ldyBDdWJlUmVuZGVyVGFyZ2V0KCBpbWFnZS5oZWlnaHQgKTtcblx0XHRcdFx0XHRcdFx0cmVuZGVyVGFyZ2V0LmZyb21FcXVpcmVjdGFuZ3VsYXJUZXh0dXJlKCByZW5kZXJlciwgdGV4dHVyZSApO1xuXG5cdFx0XHRcdFx0XHRcdG1hcFRleHR1cmVNYXBwaW5nKCByZW5kZXJUYXJnZXQudGV4dHVyZSwgdGV4dHVyZS5tYXBwaW5nICk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2N1YmVUZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdFx0XHRcdFx0X2NhY2hlLnNldCggdGV4dHVyZSwgcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblxuXHRcdFx0XHRcdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmF1bHQgY3ViZSB0ZXh0dXJlIGFzIGZhbGxiYWNrIHdoZW4gZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmUgaXMgbm90IHlldCBsb2FkZWRcblxuXHRcdFx0XHRcdFx0XHR0aGlzLl9jdWJlVGV4dHVyZSA9IHRoaXMuX2RlZmF1bHRUZXh0dXJlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvL1xuXG5cdFx0XHRcdFx0dGhpcy5fY3ViZVRleHR1cmVOb2RlLnZhbHVlID0gdGhpcy5fY3ViZVRleHR1cmU7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGVudk5vZGUgYWxyZWFkeSByZWZlcnMgdG8gYSBjdWJlIG1hcFxuXG5cdFx0XHRcdFx0dGhpcy5fY3ViZVRleHR1cmVOb2RlID0gdGhpcy5lbnZOb2RlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdHRoaXMudXBkYXRlQmVmb3JlKCBidWlsZGVyICk7XG5cblx0XHRyZXR1cm4gdGhpcy5fY3ViZVRleHR1cmVOb2RlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDdWJlTWFwTm9kZTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGVxdWlyZWN0YW5ndWxhciBpbWFnZSBoYXMgYmVlbiBmdWxseSBsb2FkZWRcbiAqIGFuZCBpcyByZWFkeSBmb3IgZnVydGhlciBwcm9jZXNzaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWFnZSAtIFRoZSBlcXVpcmVjdGFuZ3VsYXIgaW1hZ2UgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBpbWFnZSBpcyByZWFkeSBvciBub3QuXG4gKi9cbmZ1bmN0aW9uIGlzRXF1aXJlY3Rhbmd1bGFyTWFwUmVhZHkoIGltYWdlICkge1xuXG5cdGlmICggaW1hZ2UgPT09IG51bGwgfHwgaW1hZ2UgPT09IHVuZGVmaW5lZCApIHJldHVybiBmYWxzZTtcblxuXHRyZXR1cm4gaW1hZ2UuaGVpZ2h0ID4gMDtcblxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgd2hlbiBgZGlzcG9zZSgpYCBpcyBjYWxsZWQgb24gdGhlIGVxdWlyZWN0YW5ndWxhclxuICogdGV4dHVyZS4gSW4gdGhpcyBjYXNlLCB0aGUgZ2VuZXJhdGVkIGN1YmUgbWFwIHdpdGggaXRzIHJlbmRlciB0YXJnZXRcbiAqIGlzIGRlbGV0ZWQgYXMgd2VsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gVGhlIGV2ZW50IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gb25UZXh0dXJlRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHR0ZXh0dXJlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdGNvbnN0IHJlbmRlclRhcmdldCA9IF9jYWNoZS5nZXQoIHRleHR1cmUgKTtcblxuXHRpZiAoIHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0X2NhY2hlLmRlbGV0ZSggdGV4dHVyZSApO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LmRpc3Bvc2UoKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIG1ha2VzIHN1cmUgdGhlIGdlbmVyYXRlZCBjdWJlIG1hcCB1c2VzIHRoZSBjb3JyZWN0XG4gKiB0ZXh0dXJlIG1hcHBpbmcgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgZXF1aXJlY3Rhbmd1bGFyIG9yaWdpbmFsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgY3ViZSB0ZXh0dXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IG1hcHBpbmcgLSBUaGUgb3JpZ2luYWwgdGV4dHVyZSBtYXBwaW5nLlxuICovXG5mdW5jdGlvbiBtYXBUZXh0dXJlTWFwcGluZyggdGV4dHVyZSwgbWFwcGluZyApIHtcblxuXHRpZiAoIG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nICkge1xuXG5cdFx0dGV4dHVyZS5tYXBwaW5nID0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nO1xuXG5cdH0gZWxzZSBpZiAoIG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nICkge1xuXG5cdFx0dGV4dHVyZS5tYXBwaW5nID0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBjdWJlIG1hcCBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBlbnZOb2RlIC0gVGhlIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBlbnZpcm9ubWVudCBtYXAuXG4gKiBAcmV0dXJucyB7Q3ViZU1hcE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjdWJlTWFwTm9kZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBDdWJlTWFwTm9kZSApO1xuIiwiaW1wb3J0IExpZ2h0aW5nTm9kZSBmcm9tICcuL0xpZ2h0aW5nTm9kZS5qcyc7XG5pbXBvcnQgeyBjdWJlTWFwTm9kZSB9IGZyb20gJy4uL3V0aWxzL0N1YmVNYXBOb2RlLmpzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYmFzaWMgbW9kZWwgZm9yIEltYWdlLWJhc2VkIGxpZ2h0aW5nIChJQkwpLiBUaGUgZW52aXJvbm1lbnRcbiAqIGlzIGRlZmluZWQgdmlhIGVudmlyb25tZW50IG1hcHMgaW4gdGhlIGVxdWlyZWN0YW5ndWxhciBvciBjdWJlIG1hcCBmb3JtYXQuXG4gKiBgQmFzaWNFbnZpcm9ubWVudE5vZGVgIGlzIGludGVuZGVkIGZvciBub24tUEJSIG1hdGVyaWFscyBsaWtlIHtAbGluayBNZXNoQmFzaWNOb2RlTWF0ZXJpYWx9XG4gKiBvciB7QGxpbmsgTWVzaFBob25nTm9kZU1hdGVyaWFsfS5cbiAqXG4gKiBAYXVnbWVudHMgTGlnaHRpbmdOb2RlXG4gKi9cbmNsYXNzIEJhc2ljRW52aXJvbm1lbnROb2RlIGV4dGVuZHMgTGlnaHRpbmdOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0Jhc2ljRW52aXJvbm1lbnROb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYmFzaWMgZW52aXJvbm1lbnQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBbZW52Tm9kZT1udWxsXSAtIEEgbm9kZSByZXByZXNlbnRpbmcgdGhlIGVudmlyb25tZW50LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGVudk5vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgbm9kZSByZXByZXNlbnRpbmcgdGhlIGVudmlyb25tZW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZW52Tm9kZSA9IGVudk5vZGU7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Ly8gZW52aXJvbm1lbnQgcHJvcGVydHkgaXMgdXNlZCBpbiB0aGUgZmluaXNoKCkgbWV0aG9kIG9mIEJhc2ljTGlnaHRpbmdNb2RlbFxuXG5cdFx0YnVpbGRlci5jb250ZXh0LmVudmlyb25tZW50ID0gY3ViZU1hcE5vZGUoIHRoaXMuZW52Tm9kZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXNpY0Vudmlyb25tZW50Tm9kZTtcbiIsImltcG9ydCBMaWdodGluZ05vZGUgZnJvbSAnLi9MaWdodGluZ05vZGUuanMnO1xuaW1wb3J0IHsgZmxvYXQgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogQSBzcGVjaWZpYyB2ZXJzaW9uIG9mIHtAbGluayBJcnJhZGlhbmNlTm9kZX0gdGhhdCBpcyBvbmx5IHJlbGV2YW50XG4gKiBmb3Ige0BsaW5rIE1lc2hCYXNpY05vZGVNYXRlcmlhbH0uIFNpbmNlIHRoZSBtYXRlcmlhbCBpcyB1bmxpdCwgaXRcbiAqIHJlcXVpcmVzIGEgc3BlY2lhbCBzY2FsaW5nIGZhY3RvciBmb3IgdGhlIGxpZ2h0IG1hcC5cbiAqXG4gKiBAYXVnbWVudHMgTGlnaHRpbmdOb2RlXG4gKi9cbmNsYXNzIEJhc2ljTGlnaHRNYXBOb2RlIGV4dGVuZHMgTGlnaHRpbmdOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0Jhc2ljTGlnaHRNYXBOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYmFzaWMgbGlnaHQgbWFwIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P05vZGU8dmVjMz59IFtsaWdodE1hcE5vZGU9bnVsbF0gLSBUaGUgbGlnaHQgbWFwIG5vZGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbGlnaHRNYXBOb2RlID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlnaHQgbWFwIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICovXG5cdFx0dGhpcy5saWdodE1hcE5vZGUgPSBsaWdodE1hcE5vZGU7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Ly8gaXJyYWRpYW5jZUxpZ2h0TWFwIHByb3BlcnR5IGlzIHVzZWQgaW4gdGhlIGluZGlyZWN0RGlmZnVzZSgpIG1ldGhvZCBvZiBCYXNpY0xpZ2h0aW5nTW9kZWxcblxuXHRcdGNvbnN0IFJFQ0lQUk9DQUxfUEkgPSBmbG9hdCggMSAvIE1hdGguUEkgKTtcblxuXHRcdGJ1aWxkZXIuY29udGV4dC5pcnJhZGlhbmNlTGlnaHRNYXAgPSB0aGlzLmxpZ2h0TWFwTm9kZS5tdWwoIFJFQ0lQUk9DQUxfUEkgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFzaWNMaWdodE1hcE5vZGU7XG4iLCIvKipcbiAqIEFic3RyYWN0IGNsYXNzIGZvciBpbXBsZW1lbnRpbmcgbGlnaHRpbmcgbW9kZWxzLiBUaGUgbW9kdWxlIGRlZmluZXNcbiAqIG11bHRpcGxlIG1ldGhvZHMgdGhhdCBjb25jcmV0ZSBsaWdodGluZyBtb2RlbHMgY2FuIGltcGxlbWVudC4gVGhlc2VcbiAqIG1ldGhvZHMgYXJlIGV4ZWN1dGVkIGF0IGRpZmZlcmVudCBwb2ludHMgZHVyaW5nIHRoZSBsaWdodCBldmFsdWF0aW9uXG4gKiBwcm9jZXNzLlxuICovXG5jbGFzcyBMaWdodGluZ01vZGVsIHtcblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIHNldHRpbmcgdXAgbGlnaHRpbmcgbW9kZWwgYW5kIGNvbnRleHQgZGF0YVxuXHQgKiB3aGljaCBhcmUgbGF0ZXIgdXNlZCBpbiB0aGUgZXZhbHVhdGlvbiBwcm9jZXNzLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICovXG5cdHN0YXJ0KCBidWlsZGVyICkge1xuXG5cdFx0Ly8gbGlnaHRzICggZGlyZWN0IClcblxuXHRcdGJ1aWxkZXIubGlnaHRzTm9kZS5zZXR1cExpZ2h0cyggYnVpbGRlciwgYnVpbGRlci5saWdodHNOb2RlLmdldExpZ2h0Tm9kZXMoIGJ1aWxkZXIgKSApO1xuXG5cdFx0Ly8gaW5kaXJlY3RcblxuXHRcdHRoaXMuaW5kaXJlY3QoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBleGVjdXRpbmcgZmluYWwgdGFza3MgbGlrZSBmaW5hbCB1cGRhdGVzXG5cdCAqIHRvIHRoZSBvdXRnb2luZyBsaWdodC5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRmaW5pc2goIC8qYnVpbGRlciovICkgeyB9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBpbXBsZW1lbnRpbmcgdGhlIGRpcmVjdCBsaWdodCB0ZXJtIGFuZFxuXHQgKiBleGVjdXRlZCBkdXJpbmcgdGhlIGJ1aWxkIHByb2Nlc3Mgb2YgZGlyZWN0aW9uYWwsIHBvaW50IGFuZCBzcG90IGxpZ2h0IG5vZGVzLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtPYmplY3R9IGxpZ2h0RGF0YSAtIFRoZSBsaWdodCBkYXRhLlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0ZGlyZWN0KCAvKmxpZ2h0RGF0YSwgYnVpbGRlciovICkgeyB9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBpbXBsZW1lbnRpbmcgdGhlIGRpcmVjdCBsaWdodCB0ZXJtIGZvclxuXHQgKiByZWN0IGFyZWEgbGlnaHQgbm9kZXMuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge09iamVjdH0gbGlnaHREYXRhIC0gVGhlIGxpZ2h0IGRhdGEuXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRkaXJlY3RSZWN0QXJlYSggLypsaWdodERhdGEsIGJ1aWxkZXIqLyApIHt9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBpbXBsZW1lbnRpbmcgdGhlIGluZGlyZWN0IGxpZ2h0IHRlcm0uXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0aW5kaXJlY3QoIC8qYnVpbGRlciovICkgeyB9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBpbXBsZW1lbnRpbmcgdGhlIGFtYmllbnQgb2NjbHVzaW9uIHRlcm0uXG5cdCAqIFVubGlrZSBvdGhlciBtZXRob2RzLCB0aGlzIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBtYW51YWxseSBieSB0aGUgbGlnaHRpbmdcblx0ICogbW9kZWwgaW4gaXRzIGluZGlyZWN0IHRlcm0uXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0YW1iaWVudE9jY2x1c2lvbiggLyppbnB1dCwgc3RhY2ssIGJ1aWxkZXIqLyApIHsgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IExpZ2h0aW5nTW9kZWw7XG4iLCJpbXBvcnQgTGlnaHRpbmdNb2RlbCBmcm9tICcuLi9jb3JlL0xpZ2h0aW5nTW9kZWwuanMnO1xuaW1wb3J0IHsgZGlmZnVzZUNvbG9yIH0gZnJvbSAnLi4vY29yZS9Qcm9wZXJ0eU5vZGUuanMnO1xuaW1wb3J0IHsgTXVsdGlwbHlPcGVyYXRpb24sIE1peE9wZXJhdGlvbiwgQWRkT3BlcmF0aW9uIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IG1hdGVyaWFsU3BlY3VsYXJTdHJlbmd0aCwgbWF0ZXJpYWxSZWZsZWN0aXZpdHkgfSBmcm9tICcuLi9hY2Nlc3NvcnMvTWF0ZXJpYWxOb2RlLmpzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJy4uL21hdGgvTWF0aE5vZGUuanMnO1xuaW1wb3J0IHsgdmVjNCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBsaWdodGluZyBtb2RlbCBmb3IgdW5saXQgbWF0ZXJpYWxzLiBUaGUgb25seSBsaWdodCBjb250cmlidXRpb25cbiAqIGlzIGJha2VkIGluZGlyZWN0IGxpZ2h0aW5nIG1vZHVsYXRlZCB3aXRoIGFtYmllbnQgb2NjbHVzaW9uIGFuZCB0aGUgbWF0ZXJpYWwnc1xuICogZGlmZnVzZSBjb2xvci4gRW52aXJvbm1lbnQgbWFwcGluZyBpcyBzdXBwb3J0ZWQuIFVzZWQgaW4ge0BsaW5rIE1lc2hCYXNpY05vZGVNYXRlcmlhbH0uXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0aW5nTW9kZWxcbiAqL1xuY2xhc3MgQmFzaWNMaWdodGluZ01vZGVsIGV4dGVuZHMgTGlnaHRpbmdNb2RlbCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYmFzaWMgbGlnaHRpbmcgbW9kZWwuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIHRoZSBiYWtlZCBpbmRpcmVjdCBsaWdodGluZyB3aXRoIGl0cyBtb2R1bGF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0aW5kaXJlY3QoIHsgY29udGV4dCB9ICkge1xuXG5cdFx0Y29uc3QgYW1iaWVudE9jY2x1c2lvbiA9IGNvbnRleHQuYW1iaWVudE9jY2x1c2lvbjtcblx0XHRjb25zdCByZWZsZWN0ZWRMaWdodCA9IGNvbnRleHQucmVmbGVjdGVkTGlnaHQ7XG5cdFx0Y29uc3QgaXJyYWRpYW5jZUxpZ2h0TWFwID0gY29udGV4dC5pcnJhZGlhbmNlTGlnaHRNYXA7XG5cblx0XHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UuYXNzaWduKCB2ZWM0KCAwLjAgKSApO1xuXG5cdFx0Ly8gYWNjdW11bGF0aW9uIChiYWtlZCBpbmRpcmVjdCBsaWdodGluZyBvbmx5KVxuXG5cdFx0aWYgKCBpcnJhZGlhbmNlTGlnaHRNYXAgKSB7XG5cblx0XHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZS5hZGRBc3NpZ24oIGlycmFkaWFuY2VMaWdodE1hcCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlLmFkZEFzc2lnbiggdmVjNCggMS4wLCAxLjAsIDEuMCwgMC4wICkgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vZHVsYXRpb25cblxuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZS5tdWxBc3NpZ24oIGFtYmllbnRPY2NsdXNpb24gKTtcblxuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZS5tdWxBc3NpZ24oIGRpZmZ1c2VDb2xvci5yZ2IgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEltcGxlbWVudHMgdGhlIGVudmlyb25tZW50IG1hcHBpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRmaW5pc2goIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCB7IG1hdGVyaWFsLCBjb250ZXh0IH0gPSBidWlsZGVyO1xuXG5cdFx0Y29uc3Qgb3V0Z29pbmdMaWdodCA9IGNvbnRleHQub3V0Z29pbmdMaWdodDtcblx0XHRjb25zdCBlbnZOb2RlID0gYnVpbGRlci5jb250ZXh0LmVudmlyb25tZW50O1xuXG5cdFx0aWYgKCBlbnZOb2RlICkge1xuXG5cdFx0XHRzd2l0Y2ggKCBtYXRlcmlhbC5jb21iaW5lICkge1xuXG5cdFx0XHRcdGNhc2UgTXVsdGlwbHlPcGVyYXRpb246XG5cdFx0XHRcdFx0b3V0Z29pbmdMaWdodC5yZ2IuYXNzaWduKCBtaXgoIG91dGdvaW5nTGlnaHQucmdiLCBvdXRnb2luZ0xpZ2h0LnJnYi5tdWwoIGVudk5vZGUucmdiICksIG1hdGVyaWFsU3BlY3VsYXJTdHJlbmd0aC5tdWwoIG1hdGVyaWFsUmVmbGVjdGl2aXR5ICkgKSApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgTWl4T3BlcmF0aW9uOlxuXHRcdFx0XHRcdG91dGdvaW5nTGlnaHQucmdiLmFzc2lnbiggbWl4KCBvdXRnb2luZ0xpZ2h0LnJnYiwgZW52Tm9kZS5yZ2IsIG1hdGVyaWFsU3BlY3VsYXJTdHJlbmd0aC5tdWwoIG1hdGVyaWFsUmVmbGVjdGl2aXR5ICkgKSApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgQWRkT3BlcmF0aW9uOlxuXHRcdFx0XHRcdG91dGdvaW5nTGlnaHQucmdiLmFkZEFzc2lnbiggZW52Tm9kZS5yZ2IubXVsKCBtYXRlcmlhbFNwZWN1bGFyU3RyZW5ndGgubXVsKCBtYXRlcmlhbFJlZmxlY3Rpdml0eSApICkgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJhc2ljTGlnaHRpbmdNb2RlbDogVW5zdXBwb3J0ZWQgLmNvbWJpbmUgdmFsdWU6JywgbWF0ZXJpYWwuY29tYmluZSApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2ljTGlnaHRpbmdNb2RlbDtcbiIsImltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi9Ob2RlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgbWF0ZXJpYWxMaWdodE1hcCB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9NYXRlcmlhbE5vZGUuanMnO1xuaW1wb3J0IEJhc2ljRW52aXJvbm1lbnROb2RlIGZyb20gJy4uLy4uL25vZGVzL2xpZ2h0aW5nL0Jhc2ljRW52aXJvbm1lbnROb2RlLmpzJztcbmltcG9ydCBCYXNpY0xpZ2h0TWFwTm9kZSBmcm9tICcuLi8uLi9ub2Rlcy9saWdodGluZy9CYXNpY0xpZ2h0TWFwTm9kZS5qcyc7XG5pbXBvcnQgQmFzaWNMaWdodGluZ01vZGVsIGZyb20gJy4uLy4uL25vZGVzL2Z1bmN0aW9ucy9CYXNpY0xpZ2h0aW5nTW9kZWwuanMnO1xuaW1wb3J0IHsgbm9ybWFsVmlldyB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9Ob3JtYWwuanMnO1xuaW1wb3J0IHsgZGlmZnVzZUNvbG9yIH0gZnJvbSAnLi4vLi4vbm9kZXMvY29yZS9Qcm9wZXJ0eU5vZGUuanMnO1xuXG5pbXBvcnQgeyBNZXNoQmFzaWNNYXRlcmlhbCB9IGZyb20gJy4uL01lc2hCYXNpY01hdGVyaWFsLmpzJztcblxuY29uc3QgX2RlZmF1bHRWYWx1ZXMgPSAvKkBfX1BVUkVfXyovIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgpO1xuXG4vKipcbiAqIE5vZGUgbWF0ZXJpYWwgdmVyc2lvbiBvZiB7QGxpbmsgTWVzaEJhc2ljTWF0ZXJpYWx9LlxuICpcbiAqIEBhdWdtZW50cyBOb2RlTWF0ZXJpYWxcbiAqL1xuY2xhc3MgTWVzaEJhc2ljTm9kZU1hdGVyaWFsIGV4dGVuZHMgTm9kZU1hdGVyaWFsIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ01lc2hCYXNpY05vZGVNYXRlcmlhbCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2ggYmFzaWMgbm9kZSBtYXRlcmlhbC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbWV0ZXJzXSAtIFRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNNZXNoQmFzaWNOb2RlTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQWx0aG91Z2ggdGhlIGJhc2ljIG1hdGVyaWFsIGlzIGJ5IGRlZmluaXRpb24gdW5saXQsIHdlIHNldFxuXHRcdCAqIHRoaXMgcHJvcGVydHkgdG8gYHRydWVgIHNpbmNlIHdlIHVzZSBhIGxpZ2h0aW5nIG1vZGVsIHRvIGNvbXB1dGVcblx0XHQgKiB0aGUgb3V0Z29pbmcgbGlnaHQgb2YgdGhlIGZyYWdtZW50IHNoYWRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0cyA9IHRydWU7XG5cblx0XHR0aGlzLnNldERlZmF1bHRWYWx1ZXMoIF9kZWZhdWx0VmFsdWVzICk7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQmFzaWMgbWF0ZXJpYWxzIGFyZSBub3QgYWZmZWN0ZWQgYnkgbm9ybWFsIGFuZCBidW1wIG1hcHMgc28gd2Vcblx0ICogcmV0dXJuIGJ5IGRlZmF1bHQge0BsaW5rIG5vcm1hbFZpZXd9LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgbm9ybWFsIG5vZGUuXG5cdCAqL1xuXHRzZXR1cE5vcm1hbCgpIHtcblxuXHRcdHJldHVybiBub3JtYWxWaWV3OyAvLyBzZWUgIzI4ODM5XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiBzaW5jZSB0aGlzIHR5cGUgb2YgbWF0ZXJpYWwgdXNlcyB7QGxpbmsgQmFzaWNFbnZpcm9ubWVudE5vZGV9XG5cdCAqIHRvIGltcGxlbWVudCB0aGUgZGVmYXVsdCBlbnZpcm9ubWVudCBtYXBwaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHs/QmFzaWNFbnZpcm9ubWVudE5vZGU8dmVjMz59IFRoZSBlbnZpcm9ubWVudCBub2RlLlxuXHQgKi9cblx0c2V0dXBFbnZpcm9ubWVudCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IGVudk5vZGUgPSBzdXBlci5zZXR1cEVudmlyb25tZW50KCBidWlsZGVyICk7XG5cblx0XHRyZXR1cm4gZW52Tm9kZSA/IG5ldyBCYXNpY0Vudmlyb25tZW50Tm9kZSggZW52Tm9kZSApIDogbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIG11c3QgYmUgb3ZlcndyaXR0ZW4gc2luY2UgbGlnaHQgbWFwcyBhcmUgZXZhbHVhdGVkXG5cdCAqIHdpdGggYSBzcGVjaWFsIHNjYWxpbmcgZmFjdG9yIGZvciBiYXNpYyBtYXRlcmlhbHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4gez9CYXNpY0xpZ2h0TWFwTm9kZTx2ZWMzPn0gVGhlIGxpZ2h0IG1hcCBub2RlLlxuXHQgKi9cblx0c2V0dXBMaWdodE1hcCggYnVpbGRlciApIHtcblxuXHRcdGxldCBub2RlID0gbnVsbDtcblxuXHRcdGlmICggYnVpbGRlci5tYXRlcmlhbC5saWdodE1hcCApIHtcblxuXHRcdFx0bm9kZSA9IG5ldyBCYXNpY0xpZ2h0TWFwTm9kZSggbWF0ZXJpYWxMaWdodE1hcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgbWF0ZXJpYWwgb3ZlcndyaXRlcyB0aGlzIG1ldGhvZCBiZWNhdXNlIGBsaWdodHNgIGlzIHNldCB0byBgdHJ1ZWAgYnV0XG5cdCAqIHdlIHN0aWxsIHdhbnQgdG8gcmV0dXJuIHRoZSBkaWZmdXNlIGNvbG9yIGFzIHRoZSBvdXRnb2luZyBsaWdodC5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIG91dGdvaW5nIGxpZ2h0IG5vZGUuXG5cdCAqL1xuXHRzZXR1cE91dGdvaW5nTGlnaHQoKSB7XG5cblx0XHRyZXR1cm4gZGlmZnVzZUNvbG9yLnJnYjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgbGlnaHRpbmcgbW9kZWwuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0Jhc2ljTGlnaHRpbmdNb2RlbH0gVGhlIGxpZ2h0aW5nIG1vZGVsLlxuXHQgKi9cblx0c2V0dXBMaWdodGluZ01vZGVsKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBCYXNpY0xpZ2h0aW5nTW9kZWwoKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVzaEJhc2ljTm9kZU1hdGVyaWFsO1xuIiwiaW1wb3J0IHsgRm4gfSBmcm9tICcuLi8uLi90c2wvVFNMQmFzZS5qcyc7XG5cbmNvbnN0IEZfU2NobGljayA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBmMCwgZjkwLCBkb3RWSCB9ICkgPT4ge1xuXG5cdC8vIE9yaWdpbmFsIGFwcHJveGltYXRpb24gYnkgQ2hyaXN0b3BoZSBTY2hsaWNrICc5NFxuXHQvLyBmbG9hdCBmcmVzbmVsID0gcG93KCAxLjAgLSBkb3RWSCwgNS4wICk7XG5cblx0Ly8gT3B0aW1pemVkIHZhcmlhbnQgKHByZXNlbnRlZCBieSBFcGljIGF0IFNJR0dSQVBIICcxMylcblx0Ly8gaHR0cHM6Ly9jZG4yLnVucmVhbGVuZ2luZS5jb20vUmVzb3VyY2VzL2ZpbGVzLzIwMTNTaWdncmFwaFByZXNlbnRhdGlvbnNOb3Rlcy0yNjkxNTczOC5wZGZcblx0Y29uc3QgZnJlc25lbCA9IGRvdFZILm11bCggLSA1LjU1NDczICkuc3ViKCA2Ljk4MzE2ICkubXVsKCBkb3RWSCApLmV4cDIoKTtcblxuXHRyZXR1cm4gZjAubXVsKCBmcmVzbmVsLm9uZU1pbnVzKCkgKS5hZGQoIGY5MC5tdWwoIGZyZXNuZWwgKSApO1xuXG59ICk7IC8vIHZhbGlkYXRlZFxuXG5leHBvcnQgZGVmYXVsdCBGX1NjaGxpY2s7XG4iLCJpbXBvcnQgeyBGbiB9IGZyb20gJy4uLy4uL3RzbC9UU0xCYXNlLmpzJztcblxuY29uc3QgQlJERl9MYW1iZXJ0ID0gLypAX19QVVJFX18qLyBGbiggKCBpbnB1dHMgKSA9PiB7XG5cblx0cmV0dXJuIGlucHV0cy5kaWZmdXNlQ29sb3IubXVsKCAxIC8gTWF0aC5QSSApOyAvLyBwdW5jdHVhbCBsaWdodFxuXG59ICk7IC8vIHZhbGlkYXRlZFxuXG5leHBvcnQgZGVmYXVsdCBCUkRGX0xhbWJlcnQ7XG4iLCJpbXBvcnQgQmFzaWNMaWdodGluZ01vZGVsIGZyb20gJy4vQmFzaWNMaWdodGluZ01vZGVsLmpzJztcbmltcG9ydCBGX1NjaGxpY2sgZnJvbSAnLi9CU0RGL0ZfU2NobGljay5qcyc7XG5pbXBvcnQgQlJERl9MYW1iZXJ0IGZyb20gJy4vQlNERi9CUkRGX0xhbWJlcnQuanMnO1xuaW1wb3J0IHsgZGlmZnVzZUNvbG9yLCBzaGluaW5lc3MsIHNwZWN1bGFyQ29sb3IgfSBmcm9tICcuLi9jb3JlL1Byb3BlcnR5Tm9kZS5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcgfSBmcm9tICcuLi9hY2Nlc3NvcnMvTm9ybWFsLmpzJztcbmltcG9ydCB7IG1hdGVyaWFsU3BlY3VsYXJTdHJlbmd0aCB9IGZyb20gJy4uL2FjY2Vzc29ycy9NYXRlcmlhbE5vZGUuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25WaWV3RGlyZWN0aW9uIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IEZuLCBmbG9hdCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuY29uc3QgR19CbGlublBob25nX0ltcGxpY2l0ID0gKCkgPT4gZmxvYXQoIDAuMjUgKTtcblxuY29uc3QgRF9CbGlublBob25nID0gLypAX19QVVJFX18qLyBGbiggKCB7IGRvdE5IIH0gKSA9PiB7XG5cblx0cmV0dXJuIHNoaW5pbmVzcy5tdWwoIGZsb2F0KCAwLjUgKSApLmFkZCggMS4wICkubXVsKCBmbG9hdCggMSAvIE1hdGguUEkgKSApLm11bCggZG90TkgucG93KCBzaGluaW5lc3MgKSApO1xuXG59ICk7XG5cbmNvbnN0IEJSREZfQmxpbm5QaG9uZyA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBsaWdodERpcmVjdGlvbiB9ICkgPT4ge1xuXG5cdGNvbnN0IGhhbGZEaXIgPSBsaWdodERpcmVjdGlvbi5hZGQoIHBvc2l0aW9uVmlld0RpcmVjdGlvbiApLm5vcm1hbGl6ZSgpO1xuXG5cdGNvbnN0IGRvdE5IID0gdHJhbnNmb3JtZWROb3JtYWxWaWV3LmRvdCggaGFsZkRpciApLmNsYW1wKCk7XG5cdGNvbnN0IGRvdFZIID0gcG9zaXRpb25WaWV3RGlyZWN0aW9uLmRvdCggaGFsZkRpciApLmNsYW1wKCk7XG5cblx0Y29uc3QgRiA9IEZfU2NobGljayggeyBmMDogc3BlY3VsYXJDb2xvciwgZjkwOiAxLjAsIGRvdFZIIH0gKTtcblx0Y29uc3QgRyA9IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCgpO1xuXHRjb25zdCBEID0gRF9CbGlublBob25nKCB7IGRvdE5IIH0gKTtcblxuXHRyZXR1cm4gRi5tdWwoIEcgKS5tdWwoIEQgKTtcblxufSApO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGxpZ2h0aW5nIG1vZGVsIGZvciBhIHBob25nIG1hdGVyaWFsLiBVc2VkIGluIHtAbGluayBNZXNoUGhvbmdOb2RlTWF0ZXJpYWx9LlxuICpcbiAqIEBhdWdtZW50cyBCYXNpY0xpZ2h0aW5nTW9kZWxcbiAqL1xuY2xhc3MgUGhvbmdMaWdodGluZ01vZGVsIGV4dGVuZHMgQmFzaWNMaWdodGluZ01vZGVsIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBwaG9uZyBsaWdodGluZyBtb2RlbC5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSBbc3BlY3VsYXI9dHJ1ZV0gLSBXaGV0aGVyIHNwZWN1bGFyIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggc3BlY3VsYXIgPSB0cnVlICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgc3BlY3VsYXIgaXMgc3VwcG9ydGVkIG9yIG5vdC4gU2V0IHRoaXMgdG8gYGZhbHNlYCBpZiB5b3UgYXJlXG5cdFx0ICogbG9va2luZyBmb3IgYSBMYW1iZXJ0LWxpa2UgbWF0ZXJpYWwgbWVhbmluZyBhIG1hdGVyaWFsIGZvciBub24tc2hpbnlcblx0XHQgKiBzdXJmYWNlcywgd2l0aG91dCBzcGVjdWxhciBoaWdobGlnaHRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuc3BlY3VsYXIgPSBzcGVjdWxhcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEltcGxlbWVudHMgdGhlIGRpcmVjdCBsaWdodGluZy4gVGhlIHNwZWN1bGFyIHBvcnRpb24gaXMgb3B0aW9uYWwgYW4gY2FuIGJlIGNvbnRyb2xsZWRcblx0ICogd2l0aCB0aGUge0BsaW5rIFBob25nTGlnaHRpbmdNb2RlbCNzcGVjdWxhcn0gZmxhZy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGxpZ2h0RGF0YSAtIFRoZSBsaWdodCBkYXRhLlxuXHQgKi9cblx0ZGlyZWN0KCB7IGxpZ2h0RGlyZWN0aW9uLCBsaWdodENvbG9yLCByZWZsZWN0ZWRMaWdodCB9ICkge1xuXG5cdFx0Y29uc3QgZG90TkwgPSB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcuZG90KCBsaWdodERpcmVjdGlvbiApLmNsYW1wKCk7XG5cdFx0Y29uc3QgaXJyYWRpYW5jZSA9IGRvdE5MLm11bCggbGlnaHRDb2xvciApO1xuXG5cdFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZS5hZGRBc3NpZ24oIGlycmFkaWFuY2UubXVsKCBCUkRGX0xhbWJlcnQoIHsgZGlmZnVzZUNvbG9yOiBkaWZmdXNlQ29sb3IucmdiIH0gKSApICk7XG5cblx0XHRpZiAoIHRoaXMuc3BlY3VsYXIgPT09IHRydWUgKSB7XG5cblx0XHRcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyLmFkZEFzc2lnbiggaXJyYWRpYW5jZS5tdWwoIEJSREZfQmxpbm5QaG9uZyggeyBsaWdodERpcmVjdGlvbiB9ICkgKS5tdWwoIG1hdGVyaWFsU3BlY3VsYXJTdHJlbmd0aCApICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIHRoZSBpbmRpcmVjdCBsaWdodGluZy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICovXG5cdGluZGlyZWN0KCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBhbWJpZW50T2NjbHVzaW9uLCBpcnJhZGlhbmNlLCByZWZsZWN0ZWRMaWdodCB9ID0gYnVpbGRlci5jb250ZXh0O1xuXG5cdFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlLmFkZEFzc2lnbiggaXJyYWRpYW5jZS5tdWwoIEJSREZfTGFtYmVydCggeyBkaWZmdXNlQ29sb3IgfSApICkgKTtcblxuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZS5tdWxBc3NpZ24oIGFtYmllbnRPY2NsdXNpb24gKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGhvbmdMaWdodGluZ01vZGVsO1xuIiwiaW1wb3J0IE5vZGVNYXRlcmlhbCBmcm9tICcuL05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgQmFzaWNFbnZpcm9ubWVudE5vZGUgZnJvbSAnLi4vLi4vbm9kZXMvbGlnaHRpbmcvQmFzaWNFbnZpcm9ubWVudE5vZGUuanMnO1xuaW1wb3J0IFBob25nTGlnaHRpbmdNb2RlbCBmcm9tICcuLi8uLi9ub2Rlcy9mdW5jdGlvbnMvUGhvbmdMaWdodGluZ01vZGVsLmpzJztcblxuaW1wb3J0IHsgTWVzaExhbWJlcnRNYXRlcmlhbCB9IGZyb20gJy4uL01lc2hMYW1iZXJ0TWF0ZXJpYWwuanMnO1xuXG5jb25zdCBfZGVmYXVsdFZhbHVlcyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1lc2hMYW1iZXJ0TWF0ZXJpYWwoKTtcblxuLyoqXG4gKiBOb2RlIG1hdGVyaWFsIHZlcnNpb24gb2Yge0BsaW5rIE1lc2hMYW1iZXJ0TWF0ZXJpYWx9LlxuICpcbiAqIEBhdWdtZW50cyBOb2RlTWF0ZXJpYWxcbiAqL1xuY2xhc3MgTWVzaExhbWJlcnROb2RlTWF0ZXJpYWwgZXh0ZW5kcyBOb2RlTWF0ZXJpYWwge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTWVzaExhbWJlcnROb2RlTWF0ZXJpYWwnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtZXNoIGxhbWJlcnQgbm9kZSBtYXRlcmlhbC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbWV0ZXJzXSAtIFRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNNZXNoTGFtYmVydE5vZGVNYXRlcmlhbCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBTZXQgdG8gYHRydWVgIGJlY2F1c2UgbGFtYmVydCBtYXRlcmlhbHMgcmVhY3Qgb24gbGlnaHRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRzID0gdHJ1ZTtcblxuXHRcdHRoaXMuc2V0RGVmYXVsdFZhbHVlcyggX2RlZmF1bHRWYWx1ZXMgKTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiBzaW5jZSB0aGlzIHR5cGUgb2YgbWF0ZXJpYWwgdXNlcyB7QGxpbmsgQmFzaWNFbnZpcm9ubWVudE5vZGV9XG5cdCAqIHRvIGltcGxlbWVudCB0aGUgZGVmYXVsdCBlbnZpcm9ubWVudCBtYXBwaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHs/QmFzaWNFbnZpcm9ubWVudE5vZGU8dmVjMz59IFRoZSBlbnZpcm9ubWVudCBub2RlLlxuXHQgKi9cblx0c2V0dXBFbnZpcm9ubWVudCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IGVudk5vZGUgPSBzdXBlci5zZXR1cEVudmlyb25tZW50KCBidWlsZGVyICk7XG5cblx0XHRyZXR1cm4gZW52Tm9kZSA/IG5ldyBCYXNpY0Vudmlyb25tZW50Tm9kZSggZW52Tm9kZSApIDogbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgbGlnaHRpbmcgbW9kZWwuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1Bob25nTGlnaHRpbmdNb2RlbH0gVGhlIGxpZ2h0aW5nIG1vZGVsLlxuXHQgKi9cblx0c2V0dXBMaWdodGluZ01vZGVsKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiBuZXcgUGhvbmdMaWdodGluZ01vZGVsKCBmYWxzZSApOyAvLyAoIHNwZWN1bGFyICkgLT4gZm9yY2UgbGFtYmVydFxuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNoTGFtYmVydE5vZGVNYXRlcmlhbDtcbiIsImltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi9Ob2RlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgc2hpbmluZXNzLCBzcGVjdWxhckNvbG9yIH0gZnJvbSAnLi4vLi4vbm9kZXMvY29yZS9Qcm9wZXJ0eU5vZGUuanMnO1xuaW1wb3J0IHsgbWF0ZXJpYWxTaGluaW5lc3MsIG1hdGVyaWFsU3BlY3VsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTWF0ZXJpYWxOb2RlLmpzJztcbmltcG9ydCB7IGZsb2F0IH0gZnJvbSAnLi4vLi4vbm9kZXMvdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IEJhc2ljRW52aXJvbm1lbnROb2RlIGZyb20gJy4uLy4uL25vZGVzL2xpZ2h0aW5nL0Jhc2ljRW52aXJvbm1lbnROb2RlLmpzJztcbmltcG9ydCBQaG9uZ0xpZ2h0aW5nTW9kZWwgZnJvbSAnLi4vLi4vbm9kZXMvZnVuY3Rpb25zL1Bob25nTGlnaHRpbmdNb2RlbC5qcyc7XG5cbmltcG9ydCB7IE1lc2hQaG9uZ01hdGVyaWFsIH0gZnJvbSAnLi4vTWVzaFBob25nTWF0ZXJpYWwuanMnO1xuXG5jb25zdCBfZGVmYXVsdFZhbHVlcyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1lc2hQaG9uZ01hdGVyaWFsKCk7XG5cbi8qKlxuICogTm9kZSBtYXRlcmlhbCB2ZXJzaW9uIG9mIHtAbGluayBNZXNoUGhvbmdNYXRlcmlhbH0uXG4gKlxuICogQGF1Z21lbnRzIE5vZGVNYXRlcmlhbFxuICovXG5jbGFzcyBNZXNoUGhvbmdOb2RlTWF0ZXJpYWwgZXh0ZW5kcyBOb2RlTWF0ZXJpYWwge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTWVzaFBob25nTm9kZU1hdGVyaWFsJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbWVzaCBsYW1iZXJ0IG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzTWVzaFBob25nTm9kZU1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldCB0byBgdHJ1ZWAgYmVjYXVzZSBwaG9uZyBtYXRlcmlhbHMgcmVhY3Qgb24gbGlnaHRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRzID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzaGluaW5lc3Mgb2YgcGhvbmcgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYHNoaW5pbmVzc2Bcblx0XHQgKiBwcm9wZXJ0eS4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSBzaGluaW5lc3Mgd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgc2hpbmluZXNzIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbFNoaW5pbmVzc30uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnNoaW5pbmVzc05vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNwZWN1bGFyIGNvbG9yIG9mIHBob25nIG1hdGVyaWFscyBpcyBieSBkZWZhdWx0IGluZmVycmVkIGZyb20gdGhlXG5cdFx0ICogYHNwZWN1bGFyYCBwcm9wZXJ0eS4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSBzcGVjdWxhciBjb2xvciB3aXRoIGEgbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBzcGVjdWxhciBjb2xvciBidXQgbW9kaWZ5IHRoZSBleGlzdGluZ1xuXHRcdCAqIHZhbHVlIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxTcGVjdWxhcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc3BlY3VsYXJOb2RlID0gbnVsbDtcblxuXHRcdHRoaXMuc2V0RGVmYXVsdFZhbHVlcyggX2RlZmF1bHRWYWx1ZXMgKTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiBzaW5jZSB0aGlzIHR5cGUgb2YgbWF0ZXJpYWwgdXNlcyB7QGxpbmsgQmFzaWNFbnZpcm9ubWVudE5vZGV9XG5cdCAqIHRvIGltcGxlbWVudCB0aGUgZGVmYXVsdCBlbnZpcm9ubWVudCBtYXBwaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHs/QmFzaWNFbnZpcm9ubWVudE5vZGU8dmVjMz59IFRoZSBlbnZpcm9ubWVudCBub2RlLlxuXHQgKi9cblx0c2V0dXBFbnZpcm9ubWVudCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IGVudk5vZGUgPSBzdXBlci5zZXR1cEVudmlyb25tZW50KCBidWlsZGVyICk7XG5cblx0XHRyZXR1cm4gZW52Tm9kZSA/IG5ldyBCYXNpY0Vudmlyb25tZW50Tm9kZSggZW52Tm9kZSApIDogbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgbGlnaHRpbmcgbW9kZWwuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1Bob25nTGlnaHRpbmdNb2RlbH0gVGhlIGxpZ2h0aW5nIG1vZGVsLlxuXHQgKi9cblx0c2V0dXBMaWdodGluZ01vZGVsKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiBuZXcgUGhvbmdMaWdodGluZ01vZGVsKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIHBob25nIHNwZWNpZmljIG5vZGUgdmFyaWFibGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0c2V0dXBWYXJpYW50cyggLypidWlsZGVyKi8gKSB7XG5cblx0XHQvLyBTSElOSU5FU1NcblxuXHRcdGNvbnN0IHNoaW5pbmVzc05vZGUgPSAoIHRoaXMuc2hpbmluZXNzTm9kZSA/IGZsb2F0KCB0aGlzLnNoaW5pbmVzc05vZGUgKSA6IG1hdGVyaWFsU2hpbmluZXNzICkubWF4KCAxZS00ICk7IC8vIHRvIHByZXZlbnQgcG93KCAwLjAsIDAuMCApXG5cblx0XHRzaGluaW5lc3MuYXNzaWduKCBzaGluaW5lc3NOb2RlICk7XG5cblx0XHQvLyBTUEVDVUxBUiBDT0xPUlxuXG5cdFx0Y29uc3Qgc3BlY3VsYXJOb2RlID0gdGhpcy5zcGVjdWxhck5vZGUgfHwgbWF0ZXJpYWxTcGVjdWxhcjtcblxuXHRcdHNwZWN1bGFyQ29sb3IuYXNzaWduKCBzcGVjdWxhck5vZGUgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5zaGluaW5lc3NOb2RlID0gc291cmNlLnNoaW5pbmVzc05vZGU7XG5cdFx0dGhpcy5zcGVjdWxhck5vZGUgPSBzb3VyY2Uuc3BlY3VsYXJOb2RlO1xuXG5cdFx0cmV0dXJuIHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNoUGhvbmdOb2RlTWF0ZXJpYWw7XG4iLCJpbXBvcnQgeyBub3JtYWxWaWV3IH0gZnJvbSAnLi4vLi4vYWNjZXNzb3JzL05vcm1hbC5qcyc7XG5pbXBvcnQgeyBmbG9hdCwgRm4gfSBmcm9tICcuLi8uLi90c2wvVFNMQmFzZS5qcyc7XG5cbmNvbnN0IGdldEdlb21ldHJ5Um91Z2huZXNzID0gLypAX19QVVJFX18qLyBGbiggKCBidWlsZGVyICkgPT4ge1xuXG5cdGlmICggYnVpbGRlci5nZW9tZXRyeS5oYXNBdHRyaWJ1dGUoICdub3JtYWwnICkgPT09IGZhbHNlICkge1xuXG5cdFx0cmV0dXJuIGZsb2F0KCAwICk7XG5cblx0fVxuXG5cdGNvbnN0IGR4eSA9IG5vcm1hbFZpZXcuZEZkeCgpLmFicygpLm1heCggbm9ybWFsVmlldy5kRmR5KCkuYWJzKCkgKTtcblx0Y29uc3QgZ2VvbWV0cnlSb3VnaG5lc3MgPSBkeHkueC5tYXgoIGR4eS55ICkubWF4KCBkeHkueiApO1xuXG5cdHJldHVybiBnZW9tZXRyeVJvdWdobmVzcztcblxufSApO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRHZW9tZXRyeVJvdWdobmVzcztcbiIsImltcG9ydCBnZXRHZW9tZXRyeVJvdWdobmVzcyBmcm9tICcuL2dldEdlb21ldHJ5Um91Z2huZXNzLmpzJztcbmltcG9ydCB7IEZuIH0gZnJvbSAnLi4vLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5jb25zdCBnZXRSb3VnaG5lc3MgPSAvKkBfX1BVUkVfXyovIEZuKCAoIGlucHV0cyApID0+IHtcblxuXHRjb25zdCB7IHJvdWdobmVzcyB9ID0gaW5wdXRzO1xuXG5cdGNvbnN0IGdlb21ldHJ5Um91Z2huZXNzID0gZ2V0R2VvbWV0cnlSb3VnaG5lc3MoKTtcblxuXHRsZXQgcm91Z2huZXNzRmFjdG9yID0gcm91Z2huZXNzLm1heCggMC4wNTI1ICk7IC8vIDAuMDUyNSBjb3JyZXNwb25kcyB0byB0aGUgYmFzZSBtaXAgb2YgYSAyNTYgY3ViZW1hcC5cblx0cm91Z2huZXNzRmFjdG9yID0gcm91Z2huZXNzRmFjdG9yLmFkZCggZ2VvbWV0cnlSb3VnaG5lc3MgKTtcblx0cm91Z2huZXNzRmFjdG9yID0gcm91Z2huZXNzRmFjdG9yLm1pbiggMS4wICk7XG5cblx0cmV0dXJuIHJvdWdobmVzc0ZhY3RvcjtcblxufSApO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRSb3VnaG5lc3M7XG4iLCJpbXBvcnQgeyBkaXYgfSBmcm9tICcuLi8uLi9tYXRoL09wZXJhdG9yTm9kZS5qcyc7XG5pbXBvcnQgeyBFUFNJTE9OIH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRoTm9kZS5qcyc7XG5pbXBvcnQgeyBGbiB9IGZyb20gJy4uLy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLy8gTW92aW5nIEZyb3N0Yml0ZSB0byBQaHlzaWNhbGx5IEJhc2VkIFJlbmRlcmluZyAzLjAgLSBwYWdlIDEyLCBsaXN0aW5nIDJcbi8vIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcbmNvbnN0IFZfR0dYX1NtaXRoQ29ycmVsYXRlZCA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBhbHBoYSwgZG90TkwsIGRvdE5WIH0gKSA9PiB7XG5cblx0Y29uc3QgYTIgPSBhbHBoYS5wb3cyKCk7XG5cblx0Y29uc3QgZ3YgPSBkb3ROTC5tdWwoIGEyLmFkZCggYTIub25lTWludXMoKS5tdWwoIGRvdE5WLnBvdzIoKSApICkuc3FydCgpICk7XG5cdGNvbnN0IGdsID0gZG90TlYubXVsKCBhMi5hZGQoIGEyLm9uZU1pbnVzKCkubXVsKCBkb3ROTC5wb3cyKCkgKSApLnNxcnQoKSApO1xuXG5cdHJldHVybiBkaXYoIDAuNSwgZ3YuYWRkKCBnbCApLm1heCggRVBTSUxPTiApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ1ZfR0dYX1NtaXRoQ29ycmVsYXRlZCcsXG5cdHR5cGU6ICdmbG9hdCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ2FscGhhJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ2RvdE5MJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ2RvdE5WJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTsgLy8gdmFsaWRhdGVkXG5cbmV4cG9ydCBkZWZhdWx0IFZfR0dYX1NtaXRoQ29ycmVsYXRlZDtcbiIsImltcG9ydCB7IGRpdiB9IGZyb20gJy4uLy4uL21hdGgvT3BlcmF0b3JOb2RlLmpzJztcbmltcG9ydCB7IEZuLCB2ZWMzIH0gZnJvbSAnLi4vLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vLyBodHRwczovL2dvb2dsZS5naXRodWIuaW8vZmlsYW1lbnQvRmlsYW1lbnQubWQuaHRtbCNtYXRlcmlhbHN5c3RlbS9hbmlzb3Ryb3BpY21vZGVsL2FuaXNvdHJvcGljc3BlY3VsYXJicmRmXG5cbmNvbnN0IFZfR0dYX1NtaXRoQ29ycmVsYXRlZF9Bbmlzb3Ryb3BpYyA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBhbHBoYVQsIGFscGhhQiwgZG90VFYsIGRvdEJWLCBkb3RUTCwgZG90QkwsIGRvdE5WLCBkb3ROTCB9ICkgPT4ge1xuXG5cdGNvbnN0IGd2ID0gZG90TkwubXVsKCB2ZWMzKCBhbHBoYVQubXVsKCBkb3RUViApLCBhbHBoYUIubXVsKCBkb3RCViApLCBkb3ROViApLmxlbmd0aCgpICk7XG5cdGNvbnN0IGdsID0gZG90TlYubXVsKCB2ZWMzKCBhbHBoYVQubXVsKCBkb3RUTCApLCBhbHBoYUIubXVsKCBkb3RCTCApLCBkb3ROTCApLmxlbmd0aCgpICk7XG5cdGNvbnN0IHYgPSBkaXYoIDAuNSwgZ3YuYWRkKCBnbCApICk7XG5cblx0cmV0dXJuIHYuc2F0dXJhdGUoKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnVl9HR1hfU21pdGhDb3JyZWxhdGVkX0FuaXNvdHJvcGljJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnYWxwaGFUJywgdHlwZTogJ2Zsb2F0JywgcXVhbGlmaWVyOiAnaW4nIH0sXG5cdFx0eyBuYW1lOiAnYWxwaGFCJywgdHlwZTogJ2Zsb2F0JywgcXVhbGlmaWVyOiAnaW4nIH0sXG5cdFx0eyBuYW1lOiAnZG90VFYnLCB0eXBlOiAnZmxvYXQnLCBxdWFsaWZpZXI6ICdpbicgfSxcblx0XHR7IG5hbWU6ICdkb3RCVicsIHR5cGU6ICdmbG9hdCcsIHF1YWxpZmllcjogJ2luJyB9LFxuXHRcdHsgbmFtZTogJ2RvdFRMJywgdHlwZTogJ2Zsb2F0JywgcXVhbGlmaWVyOiAnaW4nIH0sXG5cdFx0eyBuYW1lOiAnZG90QkwnLCB0eXBlOiAnZmxvYXQnLCBxdWFsaWZpZXI6ICdpbicgfSxcblx0XHR7IG5hbWU6ICdkb3ROVicsIHR5cGU6ICdmbG9hdCcsIHF1YWxpZmllcjogJ2luJyB9LFxuXHRcdHsgbmFtZTogJ2RvdE5MJywgdHlwZTogJ2Zsb2F0JywgcXVhbGlmaWVyOiAnaW4nIH1cblx0XVxufSApO1xuXG5leHBvcnQgZGVmYXVsdCBWX0dHWF9TbWl0aENvcnJlbGF0ZWRfQW5pc290cm9waWM7XG4iLCJpbXBvcnQgeyBGbiB9IGZyb20gJy4uLy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLy8gTWljcm9mYWNldCBNb2RlbHMgZm9yIFJlZnJhY3Rpb24gdGhyb3VnaCBSb3VnaCBTdXJmYWNlcyAtIGVxdWF0aW9uICgzMylcbi8vIGh0dHA6Ly9ncmFwaGljcmFudHMuYmxvZ3Nwb3QuY29tLzIwMTMvMDgvc3BlY3VsYXItYnJkZi1yZWZlcmVuY2UuaHRtbFxuLy8gYWxwaGEgaXMgXCJyb3VnaG5lc3Mgc3F1YXJlZFwiIGluIERpc25leeKAmXMgcmVwYXJhbWV0ZXJpemF0aW9uXG5jb25zdCBEX0dHWCA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBhbHBoYSwgZG90TkggfSApID0+IHtcblxuXHRjb25zdCBhMiA9IGFscGhhLnBvdzIoKTtcblxuXHRjb25zdCBkZW5vbSA9IGRvdE5ILnBvdzIoKS5tdWwoIGEyLm9uZU1pbnVzKCkgKS5vbmVNaW51cygpOyAvLyBhdm9pZCBhbHBoYSA9IDAgd2l0aCBkb3ROSCA9IDFcblxuXHRyZXR1cm4gYTIuZGl2KCBkZW5vbS5wb3cyKCkgKS5tdWwoIDEgLyBNYXRoLlBJICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ0RfR0dYJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnYWxwaGEnLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAnZG90TkgnLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApOyAvLyB2YWxpZGF0ZWRcblxuZXhwb3J0IGRlZmF1bHQgRF9HR1g7XG4iLCJpbXBvcnQgeyBGbiwgZmxvYXQsIHZlYzMgfSBmcm9tICcuLi8uLi90c2wvVFNMQmFzZS5qcyc7XG5cbmNvbnN0IFJFQ0lQUk9DQUxfUEkgPSAvKkBfX1BVUkVfXyovIGZsb2F0KCAxIC8gTWF0aC5QSSApO1xuXG4vLyBodHRwczovL2dvb2dsZS5naXRodWIuaW8vZmlsYW1lbnQvRmlsYW1lbnQubWQuaHRtbCNtYXRlcmlhbHN5c3RlbS9hbmlzb3Ryb3BpY21vZGVsL2FuaXNvdHJvcGljc3BlY3VsYXJicmRmXG5cbmNvbnN0IERfR0dYX0FuaXNvdHJvcGljID0gLypAX19QVVJFX18qLyBGbiggKCB7IGFscGhhVCwgYWxwaGFCLCBkb3ROSCwgZG90VEgsIGRvdEJIIH0gKSA9PiB7XG5cblx0Y29uc3QgYTIgPSBhbHBoYVQubXVsKCBhbHBoYUIgKTtcblx0Y29uc3QgdiA9IHZlYzMoIGFscGhhQi5tdWwoIGRvdFRIICksIGFscGhhVC5tdWwoIGRvdEJIICksIGEyLm11bCggZG90TkggKSApO1xuXHRjb25zdCB2MiA9IHYuZG90KCB2ICk7XG5cdGNvbnN0IHcyID0gYTIuZGl2KCB2MiApO1xuXG5cdHJldHVybiBSRUNJUFJPQ0FMX1BJLm11bCggYTIubXVsKCB3Mi5wb3cyKCkgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdEX0dHWF9Bbmlzb3Ryb3BpYycsXG5cdHR5cGU6ICdmbG9hdCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ2FscGhhVCcsIHR5cGU6ICdmbG9hdCcsIHF1YWxpZmllcjogJ2luJyB9LFxuXHRcdHsgbmFtZTogJ2FscGhhQicsIHR5cGU6ICdmbG9hdCcsIHF1YWxpZmllcjogJ2luJyB9LFxuXHRcdHsgbmFtZTogJ2RvdE5IJywgdHlwZTogJ2Zsb2F0JywgcXVhbGlmaWVyOiAnaW4nIH0sXG5cdFx0eyBuYW1lOiAnZG90VEgnLCB0eXBlOiAnZmxvYXQnLCBxdWFsaWZpZXI6ICdpbicgfSxcblx0XHR7IG5hbWU6ICdkb3RCSCcsIHR5cGU6ICdmbG9hdCcsIHF1YWxpZmllcjogJ2luJyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGRlZmF1bHQgRF9HR1hfQW5pc290cm9waWM7XG4iLCJpbXBvcnQgRl9TY2hsaWNrIGZyb20gJy4vRl9TY2hsaWNrLmpzJztcbmltcG9ydCBWX0dHWF9TbWl0aENvcnJlbGF0ZWQgZnJvbSAnLi9WX0dHWF9TbWl0aENvcnJlbGF0ZWQuanMnO1xuaW1wb3J0IFZfR0dYX1NtaXRoQ29ycmVsYXRlZF9Bbmlzb3Ryb3BpYyBmcm9tICcuL1ZfR0dYX1NtaXRoQ29ycmVsYXRlZF9Bbmlzb3Ryb3BpYy5qcyc7XG5pbXBvcnQgRF9HR1ggZnJvbSAnLi9EX0dHWC5qcyc7XG5pbXBvcnQgRF9HR1hfQW5pc290cm9waWMgZnJvbSAnLi9EX0dHWF9Bbmlzb3Ryb3BpYy5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcgfSBmcm9tICcuLi8uLi9hY2Nlc3NvcnMvTm9ybWFsLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uVmlld0RpcmVjdGlvbiB9IGZyb20gJy4uLy4uL2FjY2Vzc29ycy9Qb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBpcmlkZXNjZW5jZSwgYWxwaGFULCBhbmlzb3Ryb3B5VCwgYW5pc290cm9weUIgfSBmcm9tICcuLi8uLi9jb3JlL1Byb3BlcnR5Tm9kZS5qcyc7XG5pbXBvcnQgeyBGbiwgZGVmaW5lZCB9IGZyb20gJy4uLy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLy8gR0dYIERpc3RyaWJ1dGlvbiwgU2NobGljayBGcmVzbmVsLCBHR1hfU21pdGhDb3JyZWxhdGVkIFZpc2liaWxpdHlcbmNvbnN0IEJSREZfR0dYID0gLypAX19QVVJFX18qLyBGbiggKCBpbnB1dHMgKSA9PiB7XG5cblx0Y29uc3QgeyBsaWdodERpcmVjdGlvbiwgZjAsIGY5MCwgcm91Z2huZXNzLCBmLCBVU0VfSVJJREVTQ0VOQ0UsIFVTRV9BTklTT1RST1BZIH0gPSBpbnB1dHM7XG5cblx0Y29uc3Qgbm9ybWFsVmlldyA9IGlucHV0cy5ub3JtYWxWaWV3IHx8IHRyYW5zZm9ybWVkTm9ybWFsVmlldztcblxuXHRjb25zdCBhbHBoYSA9IHJvdWdobmVzcy5wb3cyKCk7IC8vIFVFNCdzIHJvdWdobmVzc1xuXG5cdGNvbnN0IGhhbGZEaXIgPSBsaWdodERpcmVjdGlvbi5hZGQoIHBvc2l0aW9uVmlld0RpcmVjdGlvbiApLm5vcm1hbGl6ZSgpO1xuXG5cdGNvbnN0IGRvdE5MID0gbm9ybWFsVmlldy5kb3QoIGxpZ2h0RGlyZWN0aW9uICkuY2xhbXAoKTtcblx0Y29uc3QgZG90TlYgPSBub3JtYWxWaWV3LmRvdCggcG9zaXRpb25WaWV3RGlyZWN0aW9uICkuY2xhbXAoKTsgLy8gQCBUT0RPOiBNb3ZlIHRvIGNvcmUgZG90TlZcblx0Y29uc3QgZG90TkggPSBub3JtYWxWaWV3LmRvdCggaGFsZkRpciApLmNsYW1wKCk7XG5cdGNvbnN0IGRvdFZIID0gcG9zaXRpb25WaWV3RGlyZWN0aW9uLmRvdCggaGFsZkRpciApLmNsYW1wKCk7XG5cblx0bGV0IEYgPSBGX1NjaGxpY2soIHsgZjAsIGY5MCwgZG90VkggfSApO1xuXHRsZXQgViwgRDtcblxuXHRpZiAoIGRlZmluZWQoIFVTRV9JUklERVNDRU5DRSApICkge1xuXG5cdFx0RiA9IGlyaWRlc2NlbmNlLm1peCggRiwgZiApO1xuXG5cdH1cblxuXHRpZiAoIGRlZmluZWQoIFVTRV9BTklTT1RST1BZICkgKSB7XG5cblx0XHRjb25zdCBkb3RUTCA9IGFuaXNvdHJvcHlULmRvdCggbGlnaHREaXJlY3Rpb24gKTtcblx0XHRjb25zdCBkb3RUViA9IGFuaXNvdHJvcHlULmRvdCggcG9zaXRpb25WaWV3RGlyZWN0aW9uICk7XG5cdFx0Y29uc3QgZG90VEggPSBhbmlzb3Ryb3B5VC5kb3QoIGhhbGZEaXIgKTtcblx0XHRjb25zdCBkb3RCTCA9IGFuaXNvdHJvcHlCLmRvdCggbGlnaHREaXJlY3Rpb24gKTtcblx0XHRjb25zdCBkb3RCViA9IGFuaXNvdHJvcHlCLmRvdCggcG9zaXRpb25WaWV3RGlyZWN0aW9uICk7XG5cdFx0Y29uc3QgZG90QkggPSBhbmlzb3Ryb3B5Qi5kb3QoIGhhbGZEaXIgKTtcblxuXHRcdFYgPSBWX0dHWF9TbWl0aENvcnJlbGF0ZWRfQW5pc290cm9waWMoIHsgYWxwaGFULCBhbHBoYUI6IGFscGhhLCBkb3RUViwgZG90QlYsIGRvdFRMLCBkb3RCTCwgZG90TlYsIGRvdE5MIH0gKTtcblx0XHREID0gRF9HR1hfQW5pc290cm9waWMoIHsgYWxwaGFULCBhbHBoYUI6IGFscGhhLCBkb3ROSCwgZG90VEgsIGRvdEJIIH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0ViA9IFZfR0dYX1NtaXRoQ29ycmVsYXRlZCggeyBhbHBoYSwgZG90TkwsIGRvdE5WIH0gKTtcblx0XHREID0gRF9HR1goIHsgYWxwaGEsIGRvdE5IIH0gKTtcblxuXHR9XG5cblx0cmV0dXJuIEYubXVsKCBWICkubXVsKCBEICk7XG5cbn0gKTsgLy8gdmFsaWRhdGVkXG5cbmV4cG9ydCBkZWZhdWx0IEJSREZfR0dYO1xuIiwiaW1wb3J0IHsgRm4sIHZlYzIsIHZlYzQgfSBmcm9tICcuLi8uLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8vIEFuYWx5dGljYWwgYXBwcm94aW1hdGlvbiBvZiB0aGUgREZHIExVVCwgb25lIGhhbGYgb2YgdGhlXG4vLyBzcGxpdC1zdW0gYXBwcm94aW1hdGlvbiB1c2VkIGluIGluZGlyZWN0IHNwZWN1bGFyIGxpZ2h0aW5nLlxuLy8gdmlhICdlbnZpcm9ubWVudEJSREYnIGZyb20gXCJQaHlzaWNhbGx5IEJhc2VkIFNoYWRpbmcgb24gTW9iaWxlXCJcbi8vIGh0dHBzOi8vd3d3LnVucmVhbGVuZ2luZS5jb20vYmxvZy9waHlzaWNhbGx5LWJhc2VkLXNoYWRpbmctb24tbW9iaWxlXG5jb25zdCBERkdBcHByb3ggPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgcm91Z2huZXNzLCBkb3ROViB9ICkgPT4ge1xuXG5cdGNvbnN0IGMwID0gdmVjNCggLSAxLCAtIDAuMDI3NSwgLSAwLjU3MiwgMC4wMjIgKTtcblxuXHRjb25zdCBjMSA9IHZlYzQoIDEsIDAuMDQyNSwgMS4wNCwgLSAwLjA0ICk7XG5cblx0Y29uc3QgciA9IHJvdWdobmVzcy5tdWwoIGMwICkuYWRkKCBjMSApO1xuXG5cdGNvbnN0IGEwMDQgPSByLngubXVsKCByLnggKS5taW4oIGRvdE5WLm11bCggLSA5LjI4ICkuZXhwMigpICkubXVsKCByLnggKS5hZGQoIHIueSApO1xuXG5cdGNvbnN0IGZhYiA9IHZlYzIoIC0gMS4wNCwgMS4wNCApLm11bCggYTAwNCApLmFkZCggci56dyApO1xuXG5cdHJldHVybiBmYWI7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ0RGR0FwcHJveCcsXG5cdHR5cGU6ICd2ZWMyJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncm91Z2huZXNzJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ2RvdE5WJywgdHlwZTogJ3ZlYzMnIH1cblx0XVxufSApO1xuXG5leHBvcnQgZGVmYXVsdCBERkdBcHByb3g7XG4iLCJpbXBvcnQgREZHQXBwcm94IGZyb20gJy4vREZHQXBwcm94LmpzJztcbmltcG9ydCB7IEZuIH0gZnJvbSAnLi4vLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5jb25zdCBFbnZpcm9ubWVudEJSREYgPSAvKkBfX1BVUkVfXyovIEZuKCAoIGlucHV0cyApID0+IHtcblxuXHRjb25zdCB7IGRvdE5WLCBzcGVjdWxhckNvbG9yLCBzcGVjdWxhckY5MCwgcm91Z2huZXNzIH0gPSBpbnB1dHM7XG5cblx0Y29uc3QgZmFiID0gREZHQXBwcm94KCB7IGRvdE5WLCByb3VnaG5lc3MgfSApO1xuXHRyZXR1cm4gc3BlY3VsYXJDb2xvci5tdWwoIGZhYi54ICkuYWRkKCBzcGVjdWxhckY5MC5tdWwoIGZhYi55ICkgKTtcblxufSApO1xuXG5leHBvcnQgZGVmYXVsdCBFbnZpcm9ubWVudEJSREY7XG4iLCJpbXBvcnQgeyBGbiwgdmVjMyB9IGZyb20gJy4uLy4uL3RzbC9UU0xCYXNlLmpzJztcblxuY29uc3QgU2NobGlja190b19GMCA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBmLCBmOTAsIGRvdFZIIH0gKSA9PiB7XG5cblx0Y29uc3QgeCA9IGRvdFZILm9uZU1pbnVzKCkuc2F0dXJhdGUoKTtcblx0Y29uc3QgeDIgPSB4Lm11bCggeCApO1xuXHRjb25zdCB4NSA9IHgubXVsKCB4MiwgeDIgKS5jbGFtcCggMCwgLjk5OTkgKTtcblxuXHRyZXR1cm4gZi5zdWIoIHZlYzMoIGY5MCApLm11bCggeDUgKSApLmRpdiggeDUub25lTWludXMoKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdTY2hsaWNrX3RvX0YwJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdmJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAnZjkwJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ2RvdFZIJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGRlZmF1bHQgU2NobGlja190b19GMDtcbiIsImltcG9ydCB7IHRyYW5zZm9ybWVkTm9ybWFsVmlldyB9IGZyb20gJy4uLy4uL2FjY2Vzc29ycy9Ob3JtYWwuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25WaWV3RGlyZWN0aW9uIH0gZnJvbSAnLi4vLi4vYWNjZXNzb3JzL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IHNoZWVuLCBzaGVlblJvdWdobmVzcyB9IGZyb20gJy4uLy4uL2NvcmUvUHJvcGVydHlOb2RlLmpzJztcbmltcG9ydCB7IEZuLCBmbG9hdCB9IGZyb20gJy4uLy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9maWxhbWVudC9ibG9iL21hc3Rlci9zaGFkZXJzL3NyYy9icmRmLmZzXG5jb25zdCBEX0NoYXJsaWUgPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgcm91Z2huZXNzLCBkb3ROSCB9ICkgPT4ge1xuXG5cdGNvbnN0IGFscGhhID0gcm91Z2huZXNzLnBvdzIoKTtcblxuXHQvLyBFc3RldmV6IGFuZCBLdWxsYSAyMDE3LCBcIlByb2R1Y3Rpb24gRnJpZW5kbHkgTWljcm9mYWNldCBTaGVlbiBCUkRGXCJcblx0Y29uc3QgaW52QWxwaGEgPSBmbG9hdCggMS4wICkuZGl2KCBhbHBoYSApO1xuXHRjb25zdCBjb3MyaCA9IGRvdE5ILnBvdzIoKTtcblx0Y29uc3Qgc2luMmggPSBjb3MyaC5vbmVNaW51cygpLm1heCggMC4wMDc4MTI1ICk7IC8vIDJeKC0xNC8yKSwgc28gc2luMmheMiA+IDAgaW4gZnAxNlxuXG5cdHJldHVybiBmbG9hdCggMi4wICkuYWRkKCBpbnZBbHBoYSApLm11bCggc2luMmgucG93KCBpbnZBbHBoYS5tdWwoIDAuNSApICkgKS5kaXYoIDIuMCAqIE1hdGguUEkgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnRF9DaGFybGllJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncm91Z2huZXNzJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ2RvdE5IJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9maWxhbWVudC9ibG9iL21hc3Rlci9zaGFkZXJzL3NyYy9icmRmLmZzXG5jb25zdCBWX05ldWJlbHQgPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgZG90TlYsIGRvdE5MIH0gKSA9PiB7XG5cblx0Ly8gTmV1YmVsdCBhbmQgUGV0dGluZW8gMjAxMywgXCJDcmFmdGluZyBhIE5leHQtZ2VuIE1hdGVyaWFsIFBpcGVsaW5lIGZvciBUaGUgT3JkZXI6IDE4ODZcIlxuXHRyZXR1cm4gZmxvYXQoIDEuMCApLmRpdiggZmxvYXQoIDQuMCApLm11bCggZG90TkwuYWRkKCBkb3ROViApLnN1YiggZG90TkwubXVsKCBkb3ROViApICkgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdWX05ldWJlbHQnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdkb3ROVicsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdkb3ROTCcsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbmNvbnN0IEJSREZfU2hlZW4gPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgbGlnaHREaXJlY3Rpb24gfSApID0+IHtcblxuXHRjb25zdCBoYWxmRGlyID0gbGlnaHREaXJlY3Rpb24uYWRkKCBwb3NpdGlvblZpZXdEaXJlY3Rpb24gKS5ub3JtYWxpemUoKTtcblxuXHRjb25zdCBkb3ROTCA9IHRyYW5zZm9ybWVkTm9ybWFsVmlldy5kb3QoIGxpZ2h0RGlyZWN0aW9uICkuY2xhbXAoKTtcblx0Y29uc3QgZG90TlYgPSB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcuZG90KCBwb3NpdGlvblZpZXdEaXJlY3Rpb24gKS5jbGFtcCgpO1xuXHRjb25zdCBkb3ROSCA9IHRyYW5zZm9ybWVkTm9ybWFsVmlldy5kb3QoIGhhbGZEaXIgKS5jbGFtcCgpO1xuXG5cdGNvbnN0IEQgPSBEX0NoYXJsaWUoIHsgcm91Z2huZXNzOiBzaGVlblJvdWdobmVzcywgZG90TkggfSApO1xuXHRjb25zdCBWID0gVl9OZXViZWx0KCB7IGRvdE5WLCBkb3ROTCB9ICk7XG5cblx0cmV0dXJuIHNoZWVuLm11bCggRCApLm11bCggViApO1xuXG59ICk7XG5cbmV4cG9ydCBkZWZhdWx0IEJSREZfU2hlZW47XG4iLCJpbXBvcnQgeyBGbiwgSWYsIG1hdDMsIHZlYzIsIHZlYzMgfSBmcm9tICcuLi8uLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBtYXggfSBmcm9tICcuLi8uLi9tYXRoL01hdGhOb2RlLmpzJztcblxuLy8gUmVjdCBBcmVhIExpZ2h0XG5cbi8vIFJlYWwtVGltZSBQb2x5Z29uYWwtTGlnaHQgU2hhZGluZyB3aXRoIExpbmVhcmx5IFRyYW5zZm9ybWVkIENvc2luZXNcbi8vIGJ5IEVyaWMgSGVpdHosIEpvbmF0aGFuIER1cHV5LCBTdGVwaGVuIEhpbGwgYW5kIERhdmlkIE5ldWJlbHRcbi8vIGNvZGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zZWxmc2hhZG93L2x0Y19jb2RlL1xuXG5jb25zdCBMVENfVXYgPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgTiwgViwgcm91Z2huZXNzIH0gKSA9PiB7XG5cblx0Y29uc3QgTFVUX1NJWkUgPSA2NC4wO1xuXHRjb25zdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcblx0Y29uc3QgTFVUX0JJQVMgPSAwLjUgLyBMVVRfU0laRTtcblxuXHRjb25zdCBkb3ROViA9IE4uZG90KCBWICkuc2F0dXJhdGUoKTtcblxuXHQvLyB0ZXh0dXJlIHBhcmFtZXRlcml6ZWQgYnkgc3FydCggR0dYIGFscGhhICkgYW5kIHNxcnQoIDEgLSBjb3MoIHRoZXRhICkgKVxuXHRjb25zdCB1diA9IHZlYzIoIHJvdWdobmVzcywgZG90TlYub25lTWludXMoKS5zcXJ0KCkgKTtcblxuXHR1di5hc3NpZ24oIHV2Lm11bCggTFVUX1NDQUxFICkuYWRkKCBMVVRfQklBUyApICk7XG5cblx0cmV0dXJuIHV2O1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdMVENfVXYnLFxuXHR0eXBlOiAndmVjMicsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ04nLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdWJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAncm91Z2huZXNzJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuY29uc3QgTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yID0gLypAX19QVVJFX18qLyBGbiggKCB7IGYgfSApID0+IHtcblxuXHQvLyBSZWFsLVRpbWUgQXJlYSBMaWdodGluZzogYSBKb3VybmV5IGZyb20gUmVzZWFyY2ggdG8gUHJvZHVjdGlvbiAocC4xMDIpXG5cdC8vIEFuIGFwcHJveGltYXRpb24gb2YgdGhlIGZvcm0gZmFjdG9yIG9mIGEgaG9yaXpvbi1jbGlwcGVkIHJlY3RhbmdsZS5cblxuXHRjb25zdCBsID0gZi5sZW5ndGgoKTtcblxuXHRyZXR1cm4gbWF4KCBsLm11bCggbCApLmFkZCggZi56ICkuZGl2KCBsLmFkZCggMS4wICkgKSwgMCApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3InLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdmJywgdHlwZTogJ3ZlYzMnIH1cblx0XVxufSApO1xuXG5jb25zdCBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IgPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgdjEsIHYyIH0gKSA9PiB7XG5cblx0Y29uc3QgeCA9IHYxLmRvdCggdjIgKTtcblx0Y29uc3QgeSA9IHguYWJzKCkudG9WYXIoKTtcblxuXHQvLyByYXRpb25hbCBwb2x5bm9taWFsIGFwcHJveGltYXRpb24gdG8gdGhldGEgLyBzaW4oIHRoZXRhICkgLyAyUElcblx0Y29uc3QgYSA9IHkubXVsKCAwLjAxNDUyMDYgKS5hZGQoIDAuNDk2NTE1NSApLm11bCggeSApLmFkZCggMC44NTQzOTg1ICkudG9WYXIoKTtcblx0Y29uc3QgYiA9IHkuYWRkKCA0LjE2MTY3MjQgKS5tdWwoIHkgKS5hZGQoIDMuNDE3NTk0MCApLnRvVmFyKCk7XG5cdGNvbnN0IHYgPSBhLmRpdiggYiApO1xuXG5cdGNvbnN0IHRoZXRhX3NpbnRoZXRhID0geC5ncmVhdGVyVGhhbiggMC4wICkuc2VsZWN0KCB2LCBtYXgoIHgubXVsKCB4ICkub25lTWludXMoKSwgMWUtNyApLmludmVyc2VTcXJ0KCkubXVsKCAwLjUgKS5zdWIoIHYgKSApO1xuXG5cdHJldHVybiB2MS5jcm9zcyggdjIgKS5tdWwoIHRoZXRhX3NpbnRoZXRhICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ0xUQ19FZGdlVmVjdG9yRm9ybUZhY3RvcicsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAndjEnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICd2MicsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcblxuY29uc3QgTFRDX0V2YWx1YXRlID0gLypAX19QVVJFX18qLyBGbiggKCB7IE4sIFYsIFAsIG1JbnYsIHAwLCBwMSwgcDIsIHAzIH0gKSA9PiB7XG5cblx0Ly8gYmFpbCBpZiBwb2ludCBpcyBvbiBiYWNrIHNpZGUgb2YgcGxhbmUgb2YgbGlnaHRcblx0Ly8gYXNzdW1lcyBjY3cgd2luZGluZyBvcmRlciBvZiBsaWdodCB2ZXJ0aWNlc1xuXHRjb25zdCB2MSA9IHAxLnN1YiggcDAgKS50b1ZhcigpO1xuXHRjb25zdCB2MiA9IHAzLnN1YiggcDAgKS50b1ZhcigpO1xuXG5cdGNvbnN0IGxpZ2h0Tm9ybWFsID0gdjEuY3Jvc3MoIHYyICk7XG5cdGNvbnN0IHJlc3VsdCA9IHZlYzMoKS50b1ZhcigpO1xuXG5cdElmKCBsaWdodE5vcm1hbC5kb3QoIFAuc3ViKCBwMCApICkuZ3JlYXRlclRoYW5FcXVhbCggMC4wICksICgpID0+IHtcblxuXHRcdC8vIGNvbnN0cnVjdCBvcnRob25vcm1hbCBiYXNpcyBhcm91bmQgTlxuXHRcdGNvbnN0IFQxID0gVi5zdWIoIE4ubXVsKCBWLmRvdCggTiApICkgKS5ub3JtYWxpemUoKTtcblx0XHRjb25zdCBUMiA9IE4uY3Jvc3MoIFQxICkubmVnYXRlKCk7IC8vIG5lZ2F0ZWQgZnJvbSBwYXBlcjsgcG9zc2libHkgZHVlIHRvIGEgZGlmZmVyZW50IGhhbmRlZG5lc3Mgb2Ygd29ybGQgY29vcmRpbmF0ZSBzeXN0ZW1cblxuXHRcdC8vIGNvbXB1dGUgdHJhbnNmb3JtXG5cdFx0Y29uc3QgbWF0ID0gbUludi5tdWwoIG1hdDMoIFQxLCBUMiwgTiApLnRyYW5zcG9zZSgpICkudG9WYXIoKTtcblxuXHRcdC8vIHRyYW5zZm9ybSByZWN0XG5cdFx0Ly8gJiBwcm9qZWN0IHJlY3Qgb250byBzcGhlcmVcblx0XHRjb25zdCBjb29yZHMwID0gbWF0Lm11bCggcDAuc3ViKCBQICkgKS5ub3JtYWxpemUoKS50b1ZhcigpO1xuXHRcdGNvbnN0IGNvb3JkczEgPSBtYXQubXVsKCBwMS5zdWIoIFAgKSApLm5vcm1hbGl6ZSgpLnRvVmFyKCk7XG5cdFx0Y29uc3QgY29vcmRzMiA9IG1hdC5tdWwoIHAyLnN1YiggUCApICkubm9ybWFsaXplKCkudG9WYXIoKTtcblx0XHRjb25zdCBjb29yZHMzID0gbWF0Lm11bCggcDMuc3ViKCBQICkgKS5ub3JtYWxpemUoKS50b1ZhcigpO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHZlY3RvciBmb3JtIGZhY3RvclxuXHRcdGNvbnN0IHZlY3RvckZvcm1GYWN0b3IgPSB2ZWMzKCAwICkudG9WYXIoKTtcblx0XHR2ZWN0b3JGb3JtRmFjdG9yLmFkZEFzc2lnbiggTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCB7IHYxOiBjb29yZHMwLCB2MjogY29vcmRzMSB9ICkgKTtcblx0XHR2ZWN0b3JGb3JtRmFjdG9yLmFkZEFzc2lnbiggTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCB7IHYxOiBjb29yZHMxLCB2MjogY29vcmRzMiB9ICkgKTtcblx0XHR2ZWN0b3JGb3JtRmFjdG9yLmFkZEFzc2lnbiggTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCB7IHYxOiBjb29yZHMyLCB2MjogY29vcmRzMyB9ICkgKTtcblx0XHR2ZWN0b3JGb3JtRmFjdG9yLmFkZEFzc2lnbiggTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCB7IHYxOiBjb29yZHMzLCB2MjogY29vcmRzMCB9ICkgKTtcblxuXHRcdC8vIGFkanVzdCBmb3IgaG9yaXpvbiBjbGlwcGluZ1xuXHRcdHJlc3VsdC5hc3NpZ24oIHZlYzMoIExUQ19DbGlwcGVkU3BoZXJlRm9ybUZhY3RvciggeyBmOiB2ZWN0b3JGb3JtRmFjdG9yIH0gKSApICk7XG5cblx0fSApO1xuXG5cdHJldHVybiByZXN1bHQ7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ0xUQ19FdmFsdWF0ZScsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnTicsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ1YnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdQJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAnbUludicsIHR5cGU6ICdtYXQzJyB9LFxuXHRcdHsgbmFtZTogJ3AwJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAncDEnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdwMicsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ3AzJywgdHlwZTogJ3ZlYzMnIH1cblx0XVxufSApO1xuXG5jb25zdCBMVENfRXZhbHVhdGVfVm9sdW1lID0gLypAX19QVVJFX18qLyBGbiggKCB7IFAsIHAwLCBwMSwgcDIsIHAzIH0gKSA9PiB7XG5cblx0Ly8gYmFpbCBpZiBwb2ludCBpcyBvbiBiYWNrIHNpZGUgb2YgcGxhbmUgb2YgbGlnaHRcblx0Ly8gYXNzdW1lcyBjY3cgd2luZGluZyBvcmRlciBvZiBsaWdodCB2ZXJ0aWNlc1xuXHRjb25zdCB2MSA9IHAxLnN1YiggcDAgKS50b1ZhcigpO1xuXHRjb25zdCB2MiA9IHAzLnN1YiggcDAgKS50b1ZhcigpO1xuXG5cdGNvbnN0IGxpZ2h0Tm9ybWFsID0gdjEuY3Jvc3MoIHYyICk7XG5cdGNvbnN0IHJlc3VsdCA9IHZlYzMoKS50b1ZhcigpO1xuXG5cdElmKCBsaWdodE5vcm1hbC5kb3QoIFAuc3ViKCBwMCApICkuZ3JlYXRlclRoYW5FcXVhbCggMC4wICksICgpID0+IHtcblxuXHRcdC8vIHRyYW5zZm9ybSByZWN0XG5cdFx0Ly8gJiBwcm9qZWN0IHJlY3Qgb250byBzcGhlcmVcblx0XHRjb25zdCBjb29yZHMwID0gcDAuc3ViKCBQICkubm9ybWFsaXplKCkudG9WYXIoKTtcblx0XHRjb25zdCBjb29yZHMxID0gcDEuc3ViKCBQICkubm9ybWFsaXplKCkudG9WYXIoKTtcblx0XHRjb25zdCBjb29yZHMyID0gcDIuc3ViKCBQICkubm9ybWFsaXplKCkudG9WYXIoKTtcblx0XHRjb25zdCBjb29yZHMzID0gcDMuc3ViKCBQICkubm9ybWFsaXplKCkudG9WYXIoKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSB2ZWN0b3IgZm9ybSBmYWN0b3Jcblx0XHRjb25zdCB2ZWN0b3JGb3JtRmFjdG9yID0gdmVjMyggMCApLnRvVmFyKCk7XG5cdFx0dmVjdG9yRm9ybUZhY3Rvci5hZGRBc3NpZ24oIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggeyB2MTogY29vcmRzMCwgdjI6IGNvb3JkczEgfSApICk7XG5cdFx0dmVjdG9yRm9ybUZhY3Rvci5hZGRBc3NpZ24oIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggeyB2MTogY29vcmRzMSwgdjI6IGNvb3JkczIgfSApICk7XG5cdFx0dmVjdG9yRm9ybUZhY3Rvci5hZGRBc3NpZ24oIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggeyB2MTogY29vcmRzMiwgdjI6IGNvb3JkczMgfSApICk7XG5cdFx0dmVjdG9yRm9ybUZhY3Rvci5hZGRBc3NpZ24oIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggeyB2MTogY29vcmRzMywgdjI6IGNvb3JkczAgfSApICk7XG5cblx0XHQvLyBhZGp1c3QgZm9yIGhvcml6b24gY2xpcHBpbmdcblx0XHRyZXN1bHQuYXNzaWduKCB2ZWMzKCBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIHsgZjogdmVjdG9yRm9ybUZhY3Rvci5hYnMoKSB9ICkgKSApO1xuXG5cdH0gKTtcblxuXHRyZXR1cm4gcmVzdWx0O1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdMVENfRXZhbHVhdGUnLFxuXHR0eXBlOiAndmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ1AnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdwMCcsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ3AxJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAncDInLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdwMycsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IHsgTFRDX0V2YWx1YXRlLCBMVENfRXZhbHVhdGVfVm9sdW1lLCBMVENfVXYgfTtcbiIsImltcG9ydCB7IGFkZCwgbXVsLCBkaXYgfSBmcm9tICcuLi9tYXRoL09wZXJhdG9yTm9kZS5qcyc7XG5pbXBvcnQgeyBmbG9vciwgY2VpbCwgZnJhY3QsIHBvdyB9IGZyb20gJy4uL21hdGgvTWF0aE5vZGUuanMnO1xuaW1wb3J0IHsgRm4sIGZsb2F0LCB2ZWMyLCB2ZWM0LCBpbnQgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8vIE1pcHBlZCBCaWN1YmljIFRleHR1cmUgRmlsdGVyaW5nIGJ5IE44XG4vLyBodHRwczovL3d3dy5zaGFkZXJ0b3kuY29tL3ZpZXcvRGwyU0RXXG5cbmNvbnN0IGJDID0gMS4wIC8gNi4wO1xuXG5jb25zdCB3MCA9ICggYSApID0+IG11bCggYkMsIG11bCggYSwgbXVsKCBhLCBhLm5lZ2F0ZSgpLmFkZCggMy4wICkgKS5zdWIoIDMuMCApICkuYWRkKCAxLjAgKSApO1xuXG5jb25zdCB3MSA9ICggYSApID0+IG11bCggYkMsIG11bCggYSwgbXVsKCBhLCBtdWwoIDMuMCwgYSApLnN1YiggNi4wICkgKSApLmFkZCggNC4wICkgKTtcblxuY29uc3QgdzIgPSAoIGEgKSA9PiBtdWwoIGJDLCBtdWwoIGEsIG11bCggYSwgbXVsKCAtIDMuMCwgYSApLmFkZCggMy4wICkgKS5hZGQoIDMuMCApICkuYWRkKCAxLjAgKSApO1xuXG5jb25zdCB3MyA9ICggYSApID0+IG11bCggYkMsIHBvdyggYSwgMyApICk7XG5cbmNvbnN0IGcwID0gKCBhICkgPT4gdzAoIGEgKS5hZGQoIHcxKCBhICkgKTtcblxuY29uc3QgZzEgPSAoIGEgKSA9PiB3MiggYSApLmFkZCggdzMoIGEgKSApO1xuXG4vLyBoMCBhbmQgaDEgYXJlIHRoZSB0d28gb2Zmc2V0IGZ1bmN0aW9uc1xuY29uc3QgaDAgPSAoIGEgKSA9PiBhZGQoIC0gMS4wLCB3MSggYSApLmRpdiggdzAoIGEgKS5hZGQoIHcxKCBhICkgKSApICk7XG5cbmNvbnN0IGgxID0gKCBhICkgPT4gYWRkKCAxLjAsIHczKCBhICkuZGl2KCB3MiggYSApLmFkZCggdzMoIGEgKSApICkgKTtcblxuY29uc3QgYmljdWJpYyA9ICggdGV4dHVyZU5vZGUsIHRleGVsU2l6ZSwgbG9kICkgPT4ge1xuXG5cdGNvbnN0IHV2ID0gdGV4dHVyZU5vZGUudXZOb2RlO1xuXHRjb25zdCB1dlNjYWxlZCA9IG11bCggdXYsIHRleGVsU2l6ZS56dyApLmFkZCggMC41ICk7XG5cblx0Y29uc3QgaXV2ID0gZmxvb3IoIHV2U2NhbGVkICk7XG5cdGNvbnN0IGZ1diA9IGZyYWN0KCB1dlNjYWxlZCApO1xuXG5cdGNvbnN0IGcweCA9IGcwKCBmdXYueCApO1xuXHRjb25zdCBnMXggPSBnMSggZnV2LnggKTtcblx0Y29uc3QgaDB4ID0gaDAoIGZ1di54ICk7XG5cdGNvbnN0IGgxeCA9IGgxKCBmdXYueCApO1xuXHRjb25zdCBoMHkgPSBoMCggZnV2LnkgKTtcblx0Y29uc3QgaDF5ID0gaDEoIGZ1di55ICk7XG5cblx0Y29uc3QgcDAgPSB2ZWMyKCBpdXYueC5hZGQoIGgweCApLCBpdXYueS5hZGQoIGgweSApICkuc3ViKCAwLjUgKS5tdWwoIHRleGVsU2l6ZS54eSApO1xuXHRjb25zdCBwMSA9IHZlYzIoIGl1di54LmFkZCggaDF4ICksIGl1di55LmFkZCggaDB5ICkgKS5zdWIoIDAuNSApLm11bCggdGV4ZWxTaXplLnh5ICk7XG5cdGNvbnN0IHAyID0gdmVjMiggaXV2LnguYWRkKCBoMHggKSwgaXV2LnkuYWRkKCBoMXkgKSApLnN1YiggMC41ICkubXVsKCB0ZXhlbFNpemUueHkgKTtcblx0Y29uc3QgcDMgPSB2ZWMyKCBpdXYueC5hZGQoIGgxeCApLCBpdXYueS5hZGQoIGgxeSApICkuc3ViKCAwLjUgKS5tdWwoIHRleGVsU2l6ZS54eSApO1xuXG5cdGNvbnN0IGEgPSBnMCggZnV2LnkgKS5tdWwoIGFkZCggZzB4Lm11bCggdGV4dHVyZU5vZGUuc2FtcGxlKCBwMCApLmxldmVsKCBsb2QgKSApLCBnMXgubXVsKCB0ZXh0dXJlTm9kZS5zYW1wbGUoIHAxICkubGV2ZWwoIGxvZCApICkgKSApO1xuXHRjb25zdCBiID0gZzEoIGZ1di55ICkubXVsKCBhZGQoIGcweC5tdWwoIHRleHR1cmVOb2RlLnNhbXBsZSggcDIgKS5sZXZlbCggbG9kICkgKSwgZzF4Lm11bCggdGV4dHVyZU5vZGUuc2FtcGxlKCBwMyApLmxldmVsKCBsb2QgKSApICkgKTtcblxuXHRyZXR1cm4gYS5hZGQoIGIgKTtcblxufTtcblxuLyoqXG4gKiBBcHBsaWVzIG1pcHBlZCBiaWN1YmljIHRleHR1cmUgZmlsdGVyaW5nIHRvIHRoZSBnaXZlbiB0ZXh0dXJlIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1RleHR1cmVOb2RlfSB0ZXh0dXJlTm9kZSAtIFRoZSB0ZXh0dXJlIG5vZGUgdGhhdCBzaG91bGQgYmUgZmlsdGVyZWQuXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBbbG9kTm9kZT1mbG9hdCgzKV0gLSBEZWZpbmVzIHRoZSBMT0QgdG8gc2FtcGxlIGZyb20uXG4gKiBAcmV0dXJuIHtOb2RlfSBUaGUgZmlsdGVyZWQgdGV4dHVyZSBzYW1wbGUuXG4gKi9cbmV4cG9ydCBjb25zdCB0ZXh0dXJlQmljdWJpYyA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyB0ZXh0dXJlTm9kZSwgbG9kTm9kZSA9IGZsb2F0KCAzICkgXSApID0+IHtcblxuXHRjb25zdCBmTG9kU2l6ZSA9IHZlYzIoIHRleHR1cmVOb2RlLnNpemUoIGludCggbG9kTm9kZSApICkgKTtcblx0Y29uc3QgY0xvZFNpemUgPSB2ZWMyKCB0ZXh0dXJlTm9kZS5zaXplKCBpbnQoIGxvZE5vZGUuYWRkKCAxLjAgKSApICkgKTtcblx0Y29uc3QgZkxvZFNpemVJbnYgPSBkaXYoIDEuMCwgZkxvZFNpemUgKTtcblx0Y29uc3QgY0xvZFNpemVJbnYgPSBkaXYoIDEuMCwgY0xvZFNpemUgKTtcblx0Y29uc3QgZlNhbXBsZSA9IGJpY3ViaWMoIHRleHR1cmVOb2RlLCB2ZWM0KCBmTG9kU2l6ZUludiwgZkxvZFNpemUgKSwgZmxvb3IoIGxvZE5vZGUgKSApO1xuXHRjb25zdCBjU2FtcGxlID0gYmljdWJpYyggdGV4dHVyZU5vZGUsIHZlYzQoIGNMb2RTaXplSW52LCBjTG9kU2l6ZSApLCBjZWlsKCBsb2ROb2RlICkgKTtcblxuXHRyZXR1cm4gZnJhY3QoIGxvZE5vZGUgKS5taXgoIGZTYW1wbGUsIGNTYW1wbGUgKTtcblxufSApO1xuIiwiaW1wb3J0IEJSREZfTGFtYmVydCBmcm9tICcuL0JTREYvQlJERl9MYW1iZXJ0LmpzJztcbmltcG9ydCBCUkRGX0dHWCBmcm9tICcuL0JTREYvQlJERl9HR1guanMnO1xuaW1wb3J0IERGR0FwcHJveCBmcm9tICcuL0JTREYvREZHQXBwcm94LmpzJztcbmltcG9ydCBFbnZpcm9ubWVudEJSREYgZnJvbSAnLi9CU0RGL0Vudmlyb25tZW50QlJERi5qcyc7XG5pbXBvcnQgRl9TY2hsaWNrIGZyb20gJy4vQlNERi9GX1NjaGxpY2suanMnO1xuaW1wb3J0IFNjaGxpY2tfdG9fRjAgZnJvbSAnLi9CU0RGL1NjaGxpY2tfdG9fRjAuanMnO1xuaW1wb3J0IEJSREZfU2hlZW4gZnJvbSAnLi9CU0RGL0JSREZfU2hlZW4uanMnO1xuaW1wb3J0IHsgTFRDX0V2YWx1YXRlLCBMVENfVXYgfSBmcm9tICcuL0JTREYvTFRDLmpzJztcbmltcG9ydCBMaWdodGluZ01vZGVsIGZyb20gJy4uL2NvcmUvTGlnaHRpbmdNb2RlbC5qcyc7XG5pbXBvcnQgeyBkaWZmdXNlQ29sb3IsIHNwZWN1bGFyQ29sb3IsIHNwZWN1bGFyRjkwLCByb3VnaG5lc3MsIGNsZWFyY29hdCwgY2xlYXJjb2F0Um91Z2huZXNzLCBzaGVlbiwgc2hlZW5Sb3VnaG5lc3MsIGlyaWRlc2NlbmNlLCBpcmlkZXNjZW5jZUlPUiwgaXJpZGVzY2VuY2VUaGlja25lc3MsIGlvciwgdGhpY2tuZXNzLCB0cmFuc21pc3Npb24sIGF0dGVudWF0aW9uRGlzdGFuY2UsIGF0dGVudWF0aW9uQ29sb3IsIGRpc3BlcnNpb24gfSBmcm9tICcuLi9jb3JlL1Byb3BlcnR5Tm9kZS5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcsIHRyYW5zZm9ybWVkQ2xlYXJjb2F0Tm9ybWFsVmlldywgdHJhbnNmb3JtZWROb3JtYWxXb3JsZCB9IGZyb20gJy4uL2FjY2Vzc29ycy9Ob3JtYWwuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25WaWV3RGlyZWN0aW9uLCBwb3NpdGlvblZpZXcsIHBvc2l0aW9uV29ybGQgfSBmcm9tICcuLi9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgRm4sIGZsb2F0LCB2ZWMyLCB2ZWMzLCB2ZWM0LCBtYXQzLCBJZiB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHNlbGVjdCB9IGZyb20gJy4uL21hdGgvQ29uZGl0aW9uYWxOb2RlLmpzJztcbmltcG9ydCB7IG1peCwgbm9ybWFsaXplLCByZWZyYWN0LCBsZW5ndGgsIGNsYW1wLCBsb2cyLCBsb2csIGV4cCwgc21vb3Roc3RlcCB9IGZyb20gJy4uL21hdGgvTWF0aE5vZGUuanMnO1xuaW1wb3J0IHsgZGl2IH0gZnJvbSAnLi4vbWF0aC9PcGVyYXRvck5vZGUuanMnO1xuaW1wb3J0IHsgY2FtZXJhUG9zaXRpb24sIGNhbWVyYVByb2plY3Rpb25NYXRyaXgsIGNhbWVyYVZpZXdNYXRyaXggfSBmcm9tICcuLi9hY2Nlc3NvcnMvQ2FtZXJhLmpzJztcbmltcG9ydCB7IG1vZGVsV29ybGRNYXRyaXggfSBmcm9tICcuLi9hY2Nlc3NvcnMvTW9kZWxOb2RlLmpzJztcbmltcG9ydCB7IHNjcmVlblNpemUgfSBmcm9tICcuLi9kaXNwbGF5L1NjcmVlbk5vZGUuanMnO1xuaW1wb3J0IHsgdmlld3BvcnRNaXBUZXh0dXJlIH0gZnJvbSAnLi4vZGlzcGxheS9WaWV3cG9ydFRleHR1cmVOb2RlLmpzJztcbmltcG9ydCB7IHRleHR1cmVCaWN1YmljIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1RleHR1cmVCaWN1YmljLmpzJztcbmltcG9ydCB7IExvb3AgfSBmcm9tICcuLi91dGlscy9Mb29wTm9kZS5qcyc7XG5pbXBvcnQgeyBCYWNrU2lkZSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbi8vXG4vLyBUcmFuc21pc3Npb25cbi8vXG5cbmNvbnN0IGdldFZvbHVtZVRyYW5zbWlzc2lvblJheSA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBuLCB2LCB0aGlja25lc3MsIGlvciwgbW9kZWxNYXRyaXggXSApID0+IHtcblxuXHQvLyBEaXJlY3Rpb24gb2YgcmVmcmFjdGVkIGxpZ2h0LlxuXHRjb25zdCByZWZyYWN0aW9uVmVjdG9yID0gdmVjMyggcmVmcmFjdCggdi5uZWdhdGUoKSwgbm9ybWFsaXplKCBuICksIGRpdiggMS4wLCBpb3IgKSApICk7XG5cblx0Ly8gQ29tcHV0ZSByb3RhdGlvbi1pbmRlcGVuZGVudCBzY2FsaW5nIG9mIHRoZSBtb2RlbCBtYXRyaXguXG5cdGNvbnN0IG1vZGVsU2NhbGUgPSB2ZWMzKFxuXHRcdGxlbmd0aCggbW9kZWxNYXRyaXhbIDAgXS54eXogKSxcblx0XHRsZW5ndGgoIG1vZGVsTWF0cml4WyAxIF0ueHl6ICksXG5cdFx0bGVuZ3RoKCBtb2RlbE1hdHJpeFsgMiBdLnh5eiApXG5cdCk7XG5cblx0Ly8gVGhlIHRoaWNrbmVzcyBpcyBzcGVjaWZpZWQgaW4gbG9jYWwgc3BhY2UuXG5cdHJldHVybiBub3JtYWxpemUoIHJlZnJhY3Rpb25WZWN0b3IgKS5tdWwoIHRoaWNrbmVzcy5tdWwoIG1vZGVsU2NhbGUgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdnZXRWb2x1bWVUcmFuc21pc3Npb25SYXknLFxuXHR0eXBlOiAndmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ24nLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICd2JywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAndGhpY2tuZXNzJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ2lvcicsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdtb2RlbE1hdHJpeCcsIHR5cGU6ICdtYXQ0JyB9XG5cdF1cbn0gKTtcblxuY29uc3QgYXBwbHlJb3JUb1JvdWdobmVzcyA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyByb3VnaG5lc3MsIGlvciBdICkgPT4ge1xuXG5cdC8vIFNjYWxlIHJvdWdobmVzcyB3aXRoIElPUiBzbyB0aGF0IGFuIElPUiBvZiAxLjAgcmVzdWx0cyBpbiBubyBtaWNyb2ZhY2V0IHJlZnJhY3Rpb24gYW5kXG5cdC8vIGFuIElPUiBvZiAxLjUgcmVzdWx0cyBpbiB0aGUgZGVmYXVsdCBhbW91bnQgb2YgbWljcm9mYWNldCByZWZyYWN0aW9uLlxuXHRyZXR1cm4gcm91Z2huZXNzLm11bCggY2xhbXAoIGlvci5tdWwoIDIuMCApLnN1YiggMi4wICksIDAuMCwgMS4wICkgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnYXBwbHlJb3JUb1JvdWdobmVzcycsXG5cdHR5cGU6ICdmbG9hdCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3JvdWdobmVzcycsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdpb3InLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApO1xuXG5jb25zdCB2aWV3cG9ydEJhY2tTaWRlVGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gdmlld3BvcnRNaXBUZXh0dXJlKCk7XG5jb25zdCB2aWV3cG9ydEZyb250U2lkZVRleHR1cmUgPSAvKkBfX1BVUkVfXyovIHZpZXdwb3J0TWlwVGV4dHVyZSgpO1xuXG5jb25zdCBnZXRUcmFuc21pc3Npb25TYW1wbGUgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgZnJhZ0Nvb3JkLCByb3VnaG5lc3MsIGlvciBdLCB7IG1hdGVyaWFsIH0gKSA9PiB7XG5cblx0Y29uc3QgdlRleHR1cmUgPSBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSA/IHZpZXdwb3J0QmFja1NpZGVUZXh0dXJlIDogdmlld3BvcnRGcm9udFNpZGVUZXh0dXJlO1xuXG5cdGNvbnN0IHRyYW5zbWlzc2lvblNhbXBsZSA9IHZUZXh0dXJlLnNhbXBsZSggZnJhZ0Nvb3JkICk7XG5cdC8vY29uc3QgdHJhbnNtaXNzaW9uU2FtcGxlID0gdmlld3BvcnRNaXBUZXh0dXJlKCBmcmFnQ29vcmQgKTtcblxuXHRjb25zdCBsb2QgPSBsb2cyKCBzY3JlZW5TaXplLnggKS5tdWwoIGFwcGx5SW9yVG9Sb3VnaG5lc3MoIHJvdWdobmVzcywgaW9yICkgKTtcblxuXHRyZXR1cm4gdGV4dHVyZUJpY3ViaWMoIHRyYW5zbWlzc2lvblNhbXBsZSwgbG9kICk7XG5cbn0gKTtcblxuY29uc3Qgdm9sdW1lQXR0ZW51YXRpb24gPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdHJhbnNtaXNzaW9uRGlzdGFuY2UsIGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgXSApID0+IHtcblxuXHRJZiggYXR0ZW51YXRpb25EaXN0YW5jZS5ub3RFcXVhbCggMCApLCAoKSA9PiB7XG5cblx0XHQvLyBDb21wdXRlIGxpZ2h0IGF0dGVudWF0aW9uIHVzaW5nIEJlZXIncyBsYXcuXG5cdFx0Y29uc3QgYXR0ZW51YXRpb25Db2VmZmljaWVudCA9IGxvZyggYXR0ZW51YXRpb25Db2xvciApLm5lZ2F0ZSgpLmRpdiggYXR0ZW51YXRpb25EaXN0YW5jZSApO1xuXHRcdGNvbnN0IHRyYW5zbWl0dGFuY2UgPSBleHAoIGF0dGVudWF0aW9uQ29lZmZpY2llbnQubmVnYXRlKCkubXVsKCB0cmFuc21pc3Npb25EaXN0YW5jZSApICk7XG5cblx0XHRyZXR1cm4gdHJhbnNtaXR0YW5jZTtcblxuXHR9ICk7XG5cblx0Ly8gQXR0ZW51YXRpb24gZGlzdGFuY2UgaXMgK+KIniwgaS5lLiB0aGUgdHJhbnNtaXR0ZWQgY29sb3IgaXMgbm90IGF0dGVudWF0ZWQgYXQgYWxsLlxuXHRyZXR1cm4gdmVjMyggMS4wICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ3ZvbHVtZUF0dGVudWF0aW9uJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICd0cmFuc21pc3Npb25EaXN0YW5jZScsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdhdHRlbnVhdGlvbkNvbG9yJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAnYXR0ZW51YXRpb25EaXN0YW5jZScsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbmNvbnN0IGdldElCTFZvbHVtZVJlZnJhY3Rpb24gPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgbiwgdiwgcm91Z2huZXNzLCBkaWZmdXNlQ29sb3IsIHNwZWN1bGFyQ29sb3IsIHNwZWN1bGFyRjkwLCBwb3NpdGlvbiwgbW9kZWxNYXRyaXgsIHZpZXdNYXRyaXgsIHByb2pNYXRyaXgsIGlvciwgdGhpY2tuZXNzLCBhdHRlbnVhdGlvbkNvbG9yLCBhdHRlbnVhdGlvbkRpc3RhbmNlLCBkaXNwZXJzaW9uIF0gKSA9PiB7XG5cblx0bGV0IHRyYW5zbWl0dGVkTGlnaHQsIHRyYW5zbWl0dGFuY2U7XG5cblx0aWYgKCBkaXNwZXJzaW9uICkge1xuXG5cdFx0dHJhbnNtaXR0ZWRMaWdodCA9IHZlYzQoKS50b1ZhcigpO1xuXHRcdHRyYW5zbWl0dGFuY2UgPSB2ZWMzKCkudG9WYXIoKTtcblxuXHRcdGNvbnN0IGhhbGZTcHJlYWQgPSBpb3Iuc3ViKCAxLjAgKS5tdWwoIGRpc3BlcnNpb24ubXVsKCAwLjAyNSApICk7XG5cdFx0Y29uc3QgaW9ycyA9IHZlYzMoIGlvci5zdWIoIGhhbGZTcHJlYWQgKSwgaW9yLCBpb3IuYWRkKCBoYWxmU3ByZWFkICkgKTtcblxuXHRcdExvb3AoIHsgc3RhcnQ6IDAsIGVuZDogMyB9LCAoIHsgaSB9ICkgPT4ge1xuXG5cdFx0XHRjb25zdCBpb3IgPSBpb3JzLmVsZW1lbnQoIGkgKTtcblxuXHRcdFx0Y29uc3QgdHJhbnNtaXNzaW9uUmF5ID0gZ2V0Vm9sdW1lVHJhbnNtaXNzaW9uUmF5KCBuLCB2LCB0aGlja25lc3MsIGlvciwgbW9kZWxNYXRyaXggKTtcblx0XHRcdGNvbnN0IHJlZnJhY3RlZFJheUV4aXQgPSBwb3NpdGlvbi5hZGQoIHRyYW5zbWlzc2lvblJheSApO1xuXG5cdFx0XHQvLyBQcm9qZWN0IHJlZnJhY3RlZCB2ZWN0b3Igb24gdGhlIGZyYW1lYnVmZmVyLCB3aGlsZSBtYXBwaW5nIHRvIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGVzLlxuXHRcdFx0Y29uc3QgbmRjUG9zID0gcHJvak1hdHJpeC5tdWwoIHZpZXdNYXRyaXgubXVsKCB2ZWM0KCByZWZyYWN0ZWRSYXlFeGl0LCAxLjAgKSApICk7XG5cdFx0XHRjb25zdCByZWZyYWN0aW9uQ29vcmRzID0gdmVjMiggbmRjUG9zLnh5LmRpdiggbmRjUG9zLncgKSApLnRvVmFyKCk7XG5cdFx0XHRyZWZyYWN0aW9uQ29vcmRzLmFkZEFzc2lnbiggMS4wICk7XG5cdFx0XHRyZWZyYWN0aW9uQ29vcmRzLmRpdkFzc2lnbiggMi4wICk7XG5cdFx0XHRyZWZyYWN0aW9uQ29vcmRzLmFzc2lnbiggdmVjMiggcmVmcmFjdGlvbkNvb3Jkcy54LCByZWZyYWN0aW9uQ29vcmRzLnkub25lTWludXMoKSApICk7IC8vIHdlYmdwdVxuXG5cdFx0XHQvLyBTYW1wbGUgZnJhbWVidWZmZXIgdG8gZ2V0IHBpeGVsIHRoZSByZWZyYWN0ZWQgcmF5IGhpdHMuXG5cdFx0XHRjb25zdCB0cmFuc21pc3Npb25TYW1wbGUgPSBnZXRUcmFuc21pc3Npb25TYW1wbGUoIHJlZnJhY3Rpb25Db29yZHMsIHJvdWdobmVzcywgaW9yICk7XG5cblx0XHRcdHRyYW5zbWl0dGVkTGlnaHQuZWxlbWVudCggaSApLmFzc2lnbiggdHJhbnNtaXNzaW9uU2FtcGxlLmVsZW1lbnQoIGkgKSApO1xuXHRcdFx0dHJhbnNtaXR0ZWRMaWdodC5hLmFkZEFzc2lnbiggdHJhbnNtaXNzaW9uU2FtcGxlLmEgKTtcblxuXHRcdFx0dHJhbnNtaXR0YW5jZS5lbGVtZW50KCBpICkuYXNzaWduKCBkaWZmdXNlQ29sb3IuZWxlbWVudCggaSApLm11bCggdm9sdW1lQXR0ZW51YXRpb24oIGxlbmd0aCggdHJhbnNtaXNzaW9uUmF5ICksIGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgKS5lbGVtZW50KCBpICkgKSApO1xuXG5cdFx0fSApO1xuXG5cdFx0dHJhbnNtaXR0ZWRMaWdodC5hLmRpdkFzc2lnbiggMy4wICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGNvbnN0IHRyYW5zbWlzc2lvblJheSA9IGdldFZvbHVtZVRyYW5zbWlzc2lvblJheSggbiwgdiwgdGhpY2tuZXNzLCBpb3IsIG1vZGVsTWF0cml4ICk7XG5cdFx0Y29uc3QgcmVmcmFjdGVkUmF5RXhpdCA9IHBvc2l0aW9uLmFkZCggdHJhbnNtaXNzaW9uUmF5ICk7XG5cblx0XHQvLyBQcm9qZWN0IHJlZnJhY3RlZCB2ZWN0b3Igb24gdGhlIGZyYW1lYnVmZmVyLCB3aGlsZSBtYXBwaW5nIHRvIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGVzLlxuXHRcdGNvbnN0IG5kY1BvcyA9IHByb2pNYXRyaXgubXVsKCB2aWV3TWF0cml4Lm11bCggdmVjNCggcmVmcmFjdGVkUmF5RXhpdCwgMS4wICkgKSApO1xuXHRcdGNvbnN0IHJlZnJhY3Rpb25Db29yZHMgPSB2ZWMyKCBuZGNQb3MueHkuZGl2KCBuZGNQb3MudyApICkudG9WYXIoKTtcblx0XHRyZWZyYWN0aW9uQ29vcmRzLmFkZEFzc2lnbiggMS4wICk7XG5cdFx0cmVmcmFjdGlvbkNvb3Jkcy5kaXZBc3NpZ24oIDIuMCApO1xuXHRcdHJlZnJhY3Rpb25Db29yZHMuYXNzaWduKCB2ZWMyKCByZWZyYWN0aW9uQ29vcmRzLngsIHJlZnJhY3Rpb25Db29yZHMueS5vbmVNaW51cygpICkgKTsgLy8gd2ViZ3B1XG5cblx0XHQvLyBTYW1wbGUgZnJhbWVidWZmZXIgdG8gZ2V0IHBpeGVsIHRoZSByZWZyYWN0ZWQgcmF5IGhpdHMuXG5cdFx0dHJhbnNtaXR0ZWRMaWdodCA9IGdldFRyYW5zbWlzc2lvblNhbXBsZSggcmVmcmFjdGlvbkNvb3Jkcywgcm91Z2huZXNzLCBpb3IgKTtcblx0XHR0cmFuc21pdHRhbmNlID0gZGlmZnVzZUNvbG9yLm11bCggdm9sdW1lQXR0ZW51YXRpb24oIGxlbmd0aCggdHJhbnNtaXNzaW9uUmF5ICksIGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgKSApO1xuXG5cdH1cblxuXHRjb25zdCBhdHRlbnVhdGVkQ29sb3IgPSB0cmFuc21pdHRhbmNlLnJnYi5tdWwoIHRyYW5zbWl0dGVkTGlnaHQucmdiICk7XG5cdGNvbnN0IGRvdE5WID0gbi5kb3QoIHYgKS5jbGFtcCgpO1xuXG5cdC8vIEdldCB0aGUgc3BlY3VsYXIgY29tcG9uZW50LlxuXHRjb25zdCBGID0gdmVjMyggRW52aXJvbm1lbnRCUkRGKCB7IC8vIG4sIHYsIHNwZWN1bGFyQ29sb3IsIHNwZWN1bGFyRjkwLCByb3VnaG5lc3Ncblx0XHRkb3ROVixcblx0XHRzcGVjdWxhckNvbG9yLFxuXHRcdHNwZWN1bGFyRjkwLFxuXHRcdHJvdWdobmVzc1xuXHR9ICkgKTtcblxuXHQvLyBBcyBsZXNzIGxpZ2h0IGlzIHRyYW5zbWl0dGVkLCB0aGUgb3BhY2l0eSBzaG91bGQgYmUgaW5jcmVhc2VkLiBUaGlzIHNpbXBsZSBhcHByb3hpbWF0aW9uIGRvZXMgYSBkZWNlbnQgam9iXG5cdC8vIG9mIG1vZHVsYXRpbmcgYSBDU1MgYmFja2dyb3VuZCwgYW5kIGhhcyBubyBlZmZlY3Qgd2hlbiB0aGUgYnVmZmVyIGlzIG9wYXF1ZSwgZHVlIHRvIGEgc29saWQgb2JqZWN0IG9yIGNsZWFyIGNvbG9yLlxuXHRjb25zdCB0cmFuc21pdHRhbmNlRmFjdG9yID0gdHJhbnNtaXR0YW5jZS5yLmFkZCggdHJhbnNtaXR0YW5jZS5nLCB0cmFuc21pdHRhbmNlLmIgKS5kaXYoIDMuMCApO1xuXG5cdHJldHVybiB2ZWM0KCBGLm9uZU1pbnVzKCkubXVsKCBhdHRlbnVhdGVkQ29sb3IgKSwgdHJhbnNtaXR0ZWRMaWdodC5hLm9uZU1pbnVzKCkubXVsKCB0cmFuc21pdHRhbmNlRmFjdG9yICkub25lTWludXMoKSApO1xuXG59ICk7XG5cbi8vXG4vLyBJcmlkZXNjZW5jZVxuLy9cblxuLy8gWFlaIHRvIGxpbmVhci1zUkdCIGNvbG9yIHNwYWNlXG5jb25zdCBYWVpfVE9fUkVDNzA5ID0gLypAX19QVVJFX18qLyBtYXQzKFxuXHQzLjI0MDQ1NDIsIC0gMC45NjkyNjYwLCAwLjA1NTY0MzQsXG5cdC0gMS41MzcxMzg1LCAxLjg3NjAxMDgsIC0gMC4yMDQwMjU5LFxuXHQtIDAuNDk4NTMxNCwgMC4wNDE1NTYwLCAxLjA1NzIyNTJcbik7XG5cbi8vIEFzc3VtZSBhaXIgaW50ZXJmYWNlIGZvciB0b3Bcbi8vIE5vdGU6IFdlIGRvbid0IGhhbmRsZSB0aGUgY2FzZSBmcmVzbmVsMCA9PSAxXG5jb25zdCBGcmVzbmVsMFRvSW9yID0gKCBmcmVzbmVsMCApID0+IHtcblxuXHRjb25zdCBzcXJ0RjAgPSBmcmVzbmVsMC5zcXJ0KCk7XG5cdHJldHVybiB2ZWMzKCAxLjAgKS5hZGQoIHNxcnRGMCApLmRpdiggdmVjMyggMS4wICkuc3ViKCBzcXJ0RjAgKSApO1xuXG59O1xuXG4vLyBpb3IgaXMgYSB2YWx1ZSBiZXR3ZWVuIDEuMCBhbmQgMy4wLiAxLjAgaXMgYWlyIGludGVyZmFjZVxuY29uc3QgSW9yVG9GcmVzbmVsMCA9ICggdHJhbnNtaXR0ZWRJb3IsIGluY2lkZW50SW9yICkgPT4ge1xuXG5cdHJldHVybiB0cmFuc21pdHRlZElvci5zdWIoIGluY2lkZW50SW9yICkuZGl2KCB0cmFuc21pdHRlZElvci5hZGQoIGluY2lkZW50SW9yICkgKS5wb3cyKCk7XG5cbn07XG5cbi8vIEZyZXNuZWwgZXF1YXRpb25zIGZvciBkaWVsZWN0cmljL2RpZWxlY3RyaWMgaW50ZXJmYWNlcy5cbi8vIFJlZjogaHR0cHM6Ly9iZWxjb3VyLmdpdGh1Yi5pby9ibG9nL3Jlc2VhcmNoLzIwMTcvMDUvMDEvYnJkZi10aGluLWZpbG0uaHRtbFxuLy8gRXZhbHVhdGlvbiBYWVogc2Vuc2l0aXZpdHkgY3VydmVzIGluIEZvdXJpZXIgc3BhY2VcbmNvbnN0IGV2YWxTZW5zaXRpdml0eSA9ICggT1BELCBzaGlmdCApID0+IHtcblxuXHRjb25zdCBwaGFzZSA9IE9QRC5tdWwoIDIuMCAqIE1hdGguUEkgKiAxLjBlLTkgKTtcblx0Y29uc3QgdmFsID0gdmVjMyggNS40ODU2ZS0xMywgNC40MjAxZS0xMywgNS4yNDgxZS0xMyApO1xuXHRjb25zdCBwb3MgPSB2ZWMzKCAxLjY4MTBlKzA2LCAxLjc5NTNlKzA2LCAyLjIwODRlKzA2ICk7XG5cdGNvbnN0IFZBUiA9IHZlYzMoIDQuMzI3OGUrMDksIDkuMzA0NmUrMDksIDYuNjEyMWUrMDkgKTtcblxuXHRjb25zdCB4ID0gZmxvYXQoIDkuNzQ3MGUtMTQgKiBNYXRoLnNxcnQoIDIuMCAqIE1hdGguUEkgKiA0LjUyODJlKzA5ICkgKS5tdWwoIHBoYXNlLm11bCggMi4yMzk5ZSswNiApLmFkZCggc2hpZnQueCApLmNvcygpICkubXVsKCBwaGFzZS5wb3cyKCkubXVsKCAtIDQuNTI4MmUrMDkgKS5leHAoKSApO1xuXG5cdGxldCB4eXogPSB2YWwubXVsKCBWQVIubXVsKCAyLjAgKiBNYXRoLlBJICkuc3FydCgpICkubXVsKCBwb3MubXVsKCBwaGFzZSApLmFkZCggc2hpZnQgKS5jb3MoKSApLm11bCggcGhhc2UucG93MigpLm5lZ2F0ZSgpLm11bCggVkFSICkuZXhwKCkgKTtcblx0eHl6ID0gdmVjMyggeHl6LnguYWRkKCB4ICksIHh5ei55LCB4eXoueiApLmRpdiggMS4wNjg1ZS03ICk7XG5cblx0Y29uc3QgcmdiID0gWFlaX1RPX1JFQzcwOS5tdWwoIHh5eiApO1xuXG5cdHJldHVybiByZ2I7XG5cbn07XG5cbmNvbnN0IGV2YWxJcmlkZXNjZW5jZSA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBvdXRzaWRlSU9SLCBldGEyLCBjb3NUaGV0YTEsIHRoaW5GaWxtVGhpY2tuZXNzLCBiYXNlRjAgfSApID0+IHtcblxuXHQvLyBGb3JjZSBpcmlkZXNjZW5jZUlPUiAtPiBvdXRzaWRlSU9SIHdoZW4gdGhpbkZpbG1UaGlja25lc3MgLT4gMC4wXG5cdGNvbnN0IGlyaWRlc2NlbmNlSU9SID0gbWl4KCBvdXRzaWRlSU9SLCBldGEyLCBzbW9vdGhzdGVwKCAwLjAsIDAuMDMsIHRoaW5GaWxtVGhpY2tuZXNzICkgKTtcblx0Ly8gRXZhbHVhdGUgdGhlIGNvc1RoZXRhIG9uIHRoZSBiYXNlIGxheWVyIChTbmVsbCBsYXcpXG5cdGNvbnN0IHNpblRoZXRhMlNxID0gb3V0c2lkZUlPUi5kaXYoIGlyaWRlc2NlbmNlSU9SICkucG93MigpLm11bCggY29zVGhldGExLnBvdzIoKS5vbmVNaW51cygpICk7XG5cblx0Ly8gSGFuZGxlIFRJUjpcblx0Y29uc3QgY29zVGhldGEyU3EgPSBzaW5UaGV0YTJTcS5vbmVNaW51cygpO1xuXG5cdElmKCBjb3NUaGV0YTJTcS5sZXNzVGhhbiggMCApLCAoKSA9PiB7XG5cblx0XHRyZXR1cm4gdmVjMyggMS4wICk7XG5cblx0fSApO1xuXG5cdGNvbnN0IGNvc1RoZXRhMiA9IGNvc1RoZXRhMlNxLnNxcnQoKTtcblxuXHQvLyBGaXJzdCBpbnRlcmZhY2Vcblx0Y29uc3QgUjAgPSBJb3JUb0ZyZXNuZWwwKCBpcmlkZXNjZW5jZUlPUiwgb3V0c2lkZUlPUiApO1xuXHRjb25zdCBSMTIgPSBGX1NjaGxpY2soIHsgZjA6IFIwLCBmOTA6IDEuMCwgZG90Vkg6IGNvc1RoZXRhMSB9ICk7XG5cdC8vY29uc3QgUjIxID0gUjEyO1xuXHRjb25zdCBUMTIxID0gUjEyLm9uZU1pbnVzKCk7XG5cdGNvbnN0IHBoaTEyID0gaXJpZGVzY2VuY2VJT1IubGVzc1RoYW4oIG91dHNpZGVJT1IgKS5zZWxlY3QoIE1hdGguUEksIDAuMCApO1xuXHRjb25zdCBwaGkyMSA9IGZsb2F0KCBNYXRoLlBJICkuc3ViKCBwaGkxMiApO1xuXG5cdC8vIFNlY29uZCBpbnRlcmZhY2Vcblx0Y29uc3QgYmFzZUlPUiA9IEZyZXNuZWwwVG9Jb3IoIGJhc2VGMC5jbGFtcCggMC4wLCAwLjk5OTkgKSApOyAvLyBndWFyZCBhZ2FpbnN0IDEuMFxuXHRjb25zdCBSMSA9IElvclRvRnJlc25lbDAoIGJhc2VJT1IsIGlyaWRlc2NlbmNlSU9SLnRvVmVjMygpICk7XG5cdGNvbnN0IFIyMyA9IEZfU2NobGljayggeyBmMDogUjEsIGY5MDogMS4wLCBkb3RWSDogY29zVGhldGEyIH0gKTtcblx0Y29uc3QgcGhpMjMgPSB2ZWMzKFxuXHRcdGJhc2VJT1IueC5sZXNzVGhhbiggaXJpZGVzY2VuY2VJT1IgKS5zZWxlY3QoIE1hdGguUEksIDAuMCApLFxuXHRcdGJhc2VJT1IueS5sZXNzVGhhbiggaXJpZGVzY2VuY2VJT1IgKS5zZWxlY3QoIE1hdGguUEksIDAuMCApLFxuXHRcdGJhc2VJT1Iuei5sZXNzVGhhbiggaXJpZGVzY2VuY2VJT1IgKS5zZWxlY3QoIE1hdGguUEksIDAuMCApXG5cdCk7XG5cblx0Ly8gUGhhc2Ugc2hpZnRcblx0Y29uc3QgT1BEID0gaXJpZGVzY2VuY2VJT1IubXVsKCB0aGluRmlsbVRoaWNrbmVzcywgY29zVGhldGEyLCAyLjAgKTtcblx0Y29uc3QgcGhpID0gdmVjMyggcGhpMjEgKS5hZGQoIHBoaTIzICk7XG5cblx0Ly8gQ29tcG91bmQgdGVybXNcblx0Y29uc3QgUjEyMyA9IFIxMi5tdWwoIFIyMyApLmNsYW1wKCAxZS01LCAwLjk5OTkgKTtcblx0Y29uc3QgcjEyMyA9IFIxMjMuc3FydCgpO1xuXHRjb25zdCBScyA9IFQxMjEucG93MigpLm11bCggUjIzICkuZGl2KCB2ZWMzKCAxLjAgKS5zdWIoIFIxMjMgKSApO1xuXG5cdC8vIFJlZmxlY3RhbmNlIHRlcm0gZm9yIG0gPSAwIChEQyB0ZXJtIGFtcGxpdHVkZSlcblx0Y29uc3QgQzAgPSBSMTIuYWRkKCBScyApO1xuXHRjb25zdCBJID0gQzAudG9WYXIoKTtcblxuXHQvLyBSZWZsZWN0YW5jZSB0ZXJtIGZvciBtID4gMCAocGFpcnMgb2YgZGlyYWNzKVxuXHRjb25zdCBDbSA9IFJzLnN1YiggVDEyMSApLnRvVmFyKCk7XG5cblx0TG9vcCggeyBzdGFydDogMSwgZW5kOiAyLCBjb25kaXRpb246ICc8PScsIG5hbWU6ICdtJyB9LCAoIHsgbSB9ICkgPT4ge1xuXG5cdFx0Q20ubXVsQXNzaWduKCByMTIzICk7XG5cdFx0Y29uc3QgU20gPSBldmFsU2Vuc2l0aXZpdHkoIGZsb2F0KCBtICkubXVsKCBPUEQgKSwgZmxvYXQoIG0gKS5tdWwoIHBoaSApICkubXVsKCAyLjAgKTtcblx0XHRJLmFkZEFzc2lnbiggQ20ubXVsKCBTbSApICk7XG5cblx0fSApO1xuXG5cdC8vIFNpbmNlIG91dCBvZiBnYW11dCBjb2xvcnMgbWlnaHQgYmUgcHJvZHVjZWQsIG5lZ2F0aXZlIGNvbG9yIHZhbHVlcyBhcmUgY2xhbXBlZCB0byAwLlxuXHRyZXR1cm4gSS5tYXgoIHZlYzMoIDAuMCApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ2V2YWxJcmlkZXNjZW5jZScsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnb3V0c2lkZUlPUicsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdldGEyJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ2Nvc1RoZXRhMScsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd0aGluRmlsbVRoaWNrbmVzcycsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdiYXNlRjAnLCB0eXBlOiAndmVjMycgfVxuXHRdXG59ICk7XG5cbi8vXG4vL1x0U2hlZW5cbi8vXG5cbi8vIFRoaXMgaXMgYSBjdXJ2ZS1maXQgYXBwcm94aW1hdGlvbiB0byB0aGUgXCJDaGFybGllIHNoZWVuXCIgQlJERiBpbnRlZ3JhdGVkIG92ZXIgdGhlIGhlbWlzcGhlcmUgZnJvbVxuLy8gRXN0ZXZleiBhbmQgS3VsbGEgMjAxNywgXCJQcm9kdWN0aW9uIEZyaWVuZGx5IE1pY3JvZmFjZXQgU2hlZW4gQlJERlwiLiBUaGUgYW5hbHlzaXMgY2FuIGJlIGZvdW5kXG4vLyBpbiB0aGUgU2hlZW4gc2VjdGlvbiBvZiBodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzFUMEQxVlN5UjRBbGxxSUpUUUFyYUVJempsYjVoNEZLSC92aWV3P3VzcD1zaGFyaW5nXG5jb25zdCBJQkxTaGVlbkJSREYgPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgfSApID0+IHtcblxuXHRjb25zdCBkb3ROViA9IG5vcm1hbC5kb3QoIHZpZXdEaXIgKS5zYXR1cmF0ZSgpO1xuXG5cdGNvbnN0IHIyID0gcm91Z2huZXNzLnBvdzIoKTtcblxuXHRjb25zdCBhID0gc2VsZWN0KFxuXHRcdHJvdWdobmVzcy5sZXNzVGhhbiggMC4yNSApLFxuXHRcdGZsb2F0KCAtIDMzOS4yICkubXVsKCByMiApLmFkZCggZmxvYXQoIDE2MS40ICkubXVsKCByb3VnaG5lc3MgKSApLnN1YiggMjUuOSApLFxuXHRcdGZsb2F0KCAtIDguNDggKS5tdWwoIHIyICkuYWRkKCBmbG9hdCggMTQuMyApLm11bCggcm91Z2huZXNzICkgKS5zdWIoIDkuOTUgKVxuXHQpO1xuXG5cdGNvbnN0IGIgPSBzZWxlY3QoXG5cdFx0cm91Z2huZXNzLmxlc3NUaGFuKCAwLjI1ICksXG5cdFx0ZmxvYXQoIDQ0LjAgKS5tdWwoIHIyICkuc3ViKCBmbG9hdCggMjMuNyApLm11bCggcm91Z2huZXNzICkgKS5hZGQoIDMuMjYgKSxcblx0XHRmbG9hdCggMS45NyApLm11bCggcjIgKS5zdWIoIGZsb2F0KCAzLjI3ICkubXVsKCByb3VnaG5lc3MgKSApLmFkZCggMC43MiApXG5cdCk7XG5cblx0Y29uc3QgREcgPSBzZWxlY3QoIHJvdWdobmVzcy5sZXNzVGhhbiggMC4yNSApLCAwLjAsIGZsb2F0KCAwLjEgKS5tdWwoIHJvdWdobmVzcyApLnN1YiggMC4wMjUgKSApLmFkZCggYS5tdWwoIGRvdE5WICkuYWRkKCBiICkuZXhwKCkgKTtcblxuXHRyZXR1cm4gREcubXVsKCAxLjAgLyBNYXRoLlBJICkuc2F0dXJhdGUoKTtcblxufSApO1xuXG5jb25zdCBjbGVhcmNvYXRGMCA9IHZlYzMoIDAuMDQgKTtcbmNvbnN0IGNsZWFyY29hdEY5MCA9IGZsb2F0KCAxICk7XG5cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBsaWdodGluZyBtb2RlbCBmb3IgYSBQQlIgbWF0ZXJpYWwuXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0aW5nTW9kZWxcbiAqL1xuY2xhc3MgUGh5c2ljYWxMaWdodGluZ01vZGVsIGV4dGVuZHMgTGlnaHRpbmdNb2RlbCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcGh5c2ljYWwgbGlnaHRpbmcgbW9kZWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NsZWFyY29hdD1mYWxzZV0gLSBXaGV0aGVyIGNsZWFyY29hdCBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaGVlbj1mYWxzZV0gLSBXaGV0aGVyIHNoZWVuIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lyaWRlc2NlbmNlPWZhbHNlXSAtIFdoZXRoZXIgaXJpZGVzY2VuY2UgaXMgc3VwcG9ydGVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbYW5pc290cm9weT1mYWxzZV0gLSBXaGV0aGVyIGFuaXNvdHJvcHkgaXMgc3VwcG9ydGVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbdHJhbnNtaXNzaW9uPWZhbHNlXSAtIFdoZXRoZXIgdHJhbnNtaXNzaW9uIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Rpc3BlcnNpb249ZmFsc2VdIC0gV2hldGhlciBkaXNwZXJzaW9uIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggY2xlYXJjb2F0ID0gZmFsc2UsIHNoZWVuID0gZmFsc2UsIGlyaWRlc2NlbmNlID0gZmFsc2UsIGFuaXNvdHJvcHkgPSBmYWxzZSwgdHJhbnNtaXNzaW9uID0gZmFsc2UsIGRpc3BlcnNpb24gPSBmYWxzZSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIGNsZWFyY29hdCBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmNsZWFyY29hdCA9IGNsZWFyY29hdDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgc2hlZW4gaXMgc3VwcG9ydGVkIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5zaGVlbiA9IHNoZWVuO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciBpcmlkZXNjZW5jZSBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmlyaWRlc2NlbmNlID0gaXJpZGVzY2VuY2U7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIGFuaXNvdHJvcHkgaXMgc3VwcG9ydGVkIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5hbmlzb3Ryb3B5ID0gYW5pc290cm9weTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdHJhbnNtaXNzaW9uIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMudHJhbnNtaXNzaW9uID0gdHJhbnNtaXNzaW9uO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciBkaXNwZXJzaW9uIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGVyc2lvbiA9IGRpc3BlcnNpb247XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2xlYXIgY29hdCByYWRpYW5jZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jbGVhcmNvYXRSYWRpYW5jZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2xlYXIgY29hdCBzcGVjdWxhciBkaXJlY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJjb2F0U3BlY3VsYXJEaXJlY3QgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNsZWFyIGNvYXQgc3BlY3VsYXIgaW5kaXJlY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2hlZW4gc3BlY3VsYXIgZGlyZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnNoZWVuU3BlY3VsYXJEaXJlY3QgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNoZWVuIHNwZWN1bGFyIGluZGlyZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnNoZWVuU3BlY3VsYXJJbmRpcmVjdCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaXJpZGVzY2VuY2UgRnJlc25lbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5pcmlkZXNjZW5jZUZyZXNuZWwgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGlyaWRlc2NlbmNlIEYwLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmlyaWRlc2NlbmNlRjAgPSBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVwZW5kaW5nIG9uIHdoYXQgZmVhdHVyZXMgYXJlIHJlcXVlc3RlZCwgdGhlIG1ldGhvZCBwcmVwYXJlcyBjZXJ0YWluIG5vZGUgdmFyaWFibGVzXG5cdCAqIHdoaWNoIGFyZSBsYXRlciB1c2VkIGZvciBsaWdodGluZyBjb21wdXRhdGlvbnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzdGFydCggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXQgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuY2xlYXJjb2F0UmFkaWFuY2UgPSB2ZWMzKCkudG9WYXIoICdjbGVhcmNvYXRSYWRpYW5jZScgKTtcblx0XHRcdHRoaXMuY2xlYXJjb2F0U3BlY3VsYXJEaXJlY3QgPSB2ZWMzKCkudG9WYXIoICdjbGVhcmNvYXRTcGVjdWxhckRpcmVjdCcgKTtcblx0XHRcdHRoaXMuY2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCA9IHZlYzMoKS50b1ZhciggJ2NsZWFyY29hdFNwZWN1bGFySW5kaXJlY3QnICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuc2hlZW4gPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuc2hlZW5TcGVjdWxhckRpcmVjdCA9IHZlYzMoKS50b1ZhciggJ3NoZWVuU3BlY3VsYXJEaXJlY3QnICk7XG5cdFx0XHR0aGlzLnNoZWVuU3BlY3VsYXJJbmRpcmVjdCA9IHZlYzMoKS50b1ZhciggJ3NoZWVuU3BlY3VsYXJJbmRpcmVjdCcgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pcmlkZXNjZW5jZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc3QgZG90TlZpID0gdHJhbnNmb3JtZWROb3JtYWxWaWV3LmRvdCggcG9zaXRpb25WaWV3RGlyZWN0aW9uICkuY2xhbXAoKTtcblxuXHRcdFx0dGhpcy5pcmlkZXNjZW5jZUZyZXNuZWwgPSBldmFsSXJpZGVzY2VuY2UoIHtcblx0XHRcdFx0b3V0c2lkZUlPUjogZmxvYXQoIDEuMCApLFxuXHRcdFx0XHRldGEyOiBpcmlkZXNjZW5jZUlPUixcblx0XHRcdFx0Y29zVGhldGExOiBkb3ROVmksXG5cdFx0XHRcdHRoaW5GaWxtVGhpY2tuZXNzOiBpcmlkZXNjZW5jZVRoaWNrbmVzcyxcblx0XHRcdFx0YmFzZUYwOiBzcGVjdWxhckNvbG9yXG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuaXJpZGVzY2VuY2VGMCA9IFNjaGxpY2tfdG9fRjAoIHsgZjogdGhpcy5pcmlkZXNjZW5jZUZyZXNuZWwsIGY5MDogMS4wLCBkb3RWSDogZG90TlZpIH0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy50cmFuc21pc3Npb24gPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25Xb3JsZDtcblx0XHRcdGNvbnN0IHYgPSBjYW1lcmFQb3NpdGlvbi5zdWIoIHBvc2l0aW9uV29ybGQgKS5ub3JtYWxpemUoKTsgLy8gVE9ETzogQ3JlYXRlIE5vZGUgZm9yIHRoaXMsIHNhbWUgaXNzdWUgaW4gTWF0ZXJpYWxYXG5cdFx0XHRjb25zdCBuID0gdHJhbnNmb3JtZWROb3JtYWxXb3JsZDtcblxuXHRcdFx0Y29uc3QgY29udGV4dCA9IGJ1aWxkZXIuY29udGV4dDtcblxuXHRcdFx0Y29udGV4dC5iYWNrZHJvcCA9IGdldElCTFZvbHVtZVJlZnJhY3Rpb24oXG5cdFx0XHRcdG4sXG5cdFx0XHRcdHYsXG5cdFx0XHRcdHJvdWdobmVzcyxcblx0XHRcdFx0ZGlmZnVzZUNvbG9yLFxuXHRcdFx0XHRzcGVjdWxhckNvbG9yLFxuXHRcdFx0XHRzcGVjdWxhckY5MCwgLy8gc3BlY3VsYXJGOTBcblx0XHRcdFx0cG9zaXRpb24sIC8vIHBvc2l0aW9uV29ybGRcblx0XHRcdFx0bW9kZWxXb3JsZE1hdHJpeCwgLy8gbW9kZWxNYXRyaXhcblx0XHRcdFx0Y2FtZXJhVmlld01hdHJpeCwgLy8gdmlld01hdHJpeFxuXHRcdFx0XHRjYW1lcmFQcm9qZWN0aW9uTWF0cml4LCAvLyBwcm9qTWF0cml4XG5cdFx0XHRcdGlvcixcblx0XHRcdFx0dGhpY2tuZXNzLFxuXHRcdFx0XHRhdHRlbnVhdGlvbkNvbG9yLFxuXHRcdFx0XHRhdHRlbnVhdGlvbkRpc3RhbmNlLFxuXHRcdFx0XHR0aGlzLmRpc3BlcnNpb24gPyBkaXNwZXJzaW9uIDogbnVsbFxuXHRcdFx0KTtcblxuXHRcdFx0Y29udGV4dC5iYWNrZHJvcEFscGhhID0gdHJhbnNtaXNzaW9uO1xuXG5cdFx0XHRkaWZmdXNlQ29sb3IuYS5tdWxBc3NpZ24oIG1peCggMSwgY29udGV4dC5iYWNrZHJvcC5hLCB0cmFuc21pc3Npb24gKSApO1xuXG5cdFx0fVxuXG5cdFx0c3VwZXIuc3RhcnQoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0Ly8gRmRlei1BZ8O8ZXJhJ3MgXCJNdWx0aXBsZS1TY2F0dGVyaW5nIE1pY3JvZmFjZXQgTW9kZWwgZm9yIFJlYWwtVGltZSBJbWFnZSBCYXNlZCBMaWdodGluZ1wiXG5cdC8vIEFwcHJveGltYXRlcyBtdWx0aS1zY2F0dGVyaW5nIGluIG9yZGVyIHRvIHByZXNlcnZlIGVuZXJneS5cblx0Ly8gaHR0cDovL3d3dy5qY2d0Lm9yZy9wdWJsaXNoZWQvMDAwOC8wMS8wMy9cblxuXHRjb21wdXRlTXVsdGlzY2F0dGVyaW5nKCBzaW5nbGVTY2F0dGVyLCBtdWx0aVNjYXR0ZXIsIHNwZWN1bGFyRjkwICkge1xuXG5cdFx0Y29uc3QgZG90TlYgPSB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcuZG90KCBwb3NpdGlvblZpZXdEaXJlY3Rpb24gKS5jbGFtcCgpOyAvLyBAIFRPRE86IE1vdmUgdG8gY29yZSBkb3ROVlxuXG5cdFx0Y29uc3QgZmFiID0gREZHQXBwcm94KCB7IHJvdWdobmVzcywgZG90TlYgfSApO1xuXG5cdFx0Y29uc3QgRnIgPSB0aGlzLmlyaWRlc2NlbmNlRjAgPyBpcmlkZXNjZW5jZS5taXgoIHNwZWN1bGFyQ29sb3IsIHRoaXMuaXJpZGVzY2VuY2VGMCApIDogc3BlY3VsYXJDb2xvcjtcblxuXHRcdGNvbnN0IEZzc0VzcyA9IEZyLm11bCggZmFiLnggKS5hZGQoIHNwZWN1bGFyRjkwLm11bCggZmFiLnkgKSApO1xuXG5cdFx0Y29uc3QgRXNzID0gZmFiLnguYWRkKCBmYWIueSApO1xuXHRcdGNvbnN0IEVtcyA9IEVzcy5vbmVNaW51cygpO1xuXG5cdFx0Y29uc3QgRmF2ZyA9IHNwZWN1bGFyQ29sb3IuYWRkKCBzcGVjdWxhckNvbG9yLm9uZU1pbnVzKCkubXVsKCAwLjA0NzYxOSApICk7IC8vIDEvMjFcblx0XHRjb25zdCBGbXMgPSBGc3NFc3MubXVsKCBGYXZnICkuZGl2KCBFbXMubXVsKCBGYXZnICkub25lTWludXMoKSApO1xuXG5cdFx0c2luZ2xlU2NhdHRlci5hZGRBc3NpZ24oIEZzc0VzcyApO1xuXHRcdG11bHRpU2NhdHRlci5hZGRBc3NpZ24oIEZtcy5tdWwoIEVtcyApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIHRoZSBkaXJlY3QgbGlnaHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBsaWdodERhdGEgLSBUaGUgbGlnaHQgZGF0YS5cblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICovXG5cdGRpcmVjdCggeyBsaWdodERpcmVjdGlvbiwgbGlnaHRDb2xvciwgcmVmbGVjdGVkTGlnaHQgfSApIHtcblxuXHRcdGNvbnN0IGRvdE5MID0gdHJhbnNmb3JtZWROb3JtYWxWaWV3LmRvdCggbGlnaHREaXJlY3Rpb24gKS5jbGFtcCgpO1xuXHRcdGNvbnN0IGlycmFkaWFuY2UgPSBkb3ROTC5tdWwoIGxpZ2h0Q29sb3IgKTtcblxuXHRcdGlmICggdGhpcy5zaGVlbiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5zaGVlblNwZWN1bGFyRGlyZWN0LmFkZEFzc2lnbiggaXJyYWRpYW5jZS5tdWwoIEJSREZfU2hlZW4oIHsgbGlnaHREaXJlY3Rpb24gfSApICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXQgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGRvdE5MY2MgPSB0cmFuc2Zvcm1lZENsZWFyY29hdE5vcm1hbFZpZXcuZG90KCBsaWdodERpcmVjdGlvbiApLmNsYW1wKCk7XG5cdFx0XHRjb25zdCBjY0lycmFkaWFuY2UgPSBkb3ROTGNjLm11bCggbGlnaHRDb2xvciApO1xuXG5cdFx0XHR0aGlzLmNsZWFyY29hdFNwZWN1bGFyRGlyZWN0LmFkZEFzc2lnbiggY2NJcnJhZGlhbmNlLm11bCggQlJERl9HR1goIHsgbGlnaHREaXJlY3Rpb24sIGYwOiBjbGVhcmNvYXRGMCwgZjkwOiBjbGVhcmNvYXRGOTAsIHJvdWdobmVzczogY2xlYXJjb2F0Um91Z2huZXNzLCBub3JtYWxWaWV3OiB0cmFuc2Zvcm1lZENsZWFyY29hdE5vcm1hbFZpZXcgfSApICkgKTtcblxuXHRcdH1cblxuXHRcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UuYWRkQXNzaWduKCBpcnJhZGlhbmNlLm11bCggQlJERl9MYW1iZXJ0KCB7IGRpZmZ1c2VDb2xvcjogZGlmZnVzZUNvbG9yLnJnYiB9ICkgKSApO1xuXG5cdFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIuYWRkQXNzaWduKCBpcnJhZGlhbmNlLm11bCggQlJERl9HR1goIHsgbGlnaHREaXJlY3Rpb24sIGYwOiBzcGVjdWxhckNvbG9yLCBmOTA6IDEsIHJvdWdobmVzcywgaXJpZGVzY2VuY2U6IHRoaXMuaXJpZGVzY2VuY2UsIGY6IHRoaXMuaXJpZGVzY2VuY2VGcmVzbmVsLCBVU0VfSVJJREVTQ0VOQ0U6IHRoaXMuaXJpZGVzY2VuY2UsIFVTRV9BTklTT1RST1BZOiB0aGlzLmFuaXNvdHJvcHkgfSApICkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBpbXBsZW1lbnRpbmcgdGhlIGRpcmVjdCBsaWdodCB0ZXJtIGZvclxuXHQgKiByZWN0IGFyZWEgbGlnaHQgbm9kZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dCAtIFRoZSBpbnB1dCBkYXRhLlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0ZGlyZWN0UmVjdEFyZWEoIHsgbGlnaHRDb2xvciwgbGlnaHRQb3NpdGlvbiwgaGFsZldpZHRoLCBoYWxmSGVpZ2h0LCByZWZsZWN0ZWRMaWdodCwgbHRjXzEsIGx0Y18yIH0gKSB7XG5cblx0XHRjb25zdCBwMCA9IGxpZ2h0UG9zaXRpb24uYWRkKCBoYWxmV2lkdGggKS5zdWIoIGhhbGZIZWlnaHQgKTsgLy8gY291bnRlcmNsb2Nrd2lzZTsgbGlnaHQgc2hpbmVzIGluIGxvY2FsIG5lZyB6IGRpcmVjdGlvblxuXHRcdGNvbnN0IHAxID0gbGlnaHRQb3NpdGlvbi5zdWIoIGhhbGZXaWR0aCApLnN1YiggaGFsZkhlaWdodCApO1xuXHRcdGNvbnN0IHAyID0gbGlnaHRQb3NpdGlvbi5zdWIoIGhhbGZXaWR0aCApLmFkZCggaGFsZkhlaWdodCApO1xuXHRcdGNvbnN0IHAzID0gbGlnaHRQb3NpdGlvbi5hZGQoIGhhbGZXaWR0aCApLmFkZCggaGFsZkhlaWdodCApO1xuXG5cdFx0Y29uc3QgTiA9IHRyYW5zZm9ybWVkTm9ybWFsVmlldztcblx0XHRjb25zdCBWID0gcG9zaXRpb25WaWV3RGlyZWN0aW9uO1xuXHRcdGNvbnN0IFAgPSBwb3NpdGlvblZpZXcudG9WYXIoKTtcblxuXHRcdGNvbnN0IHV2ID0gTFRDX1V2KCB7IE4sIFYsIHJvdWdobmVzcyB9ICk7XG5cblx0XHRjb25zdCB0MSA9IGx0Y18xLnNhbXBsZSggdXYgKS50b1ZhcigpO1xuXHRcdGNvbnN0IHQyID0gbHRjXzIuc2FtcGxlKCB1diApLnRvVmFyKCk7XG5cblx0XHRjb25zdCBtSW52ID0gbWF0Myhcblx0XHRcdHZlYzMoIHQxLngsIDAsIHQxLnkgKSxcblx0XHRcdHZlYzMoIDAsIDEsIDAgKSxcblx0XHRcdHZlYzMoIHQxLnosIDAsIHQxLncgKVxuXHRcdCkudG9WYXIoKTtcblxuXHRcdC8vIExUQyBGcmVzbmVsIEFwcHJveGltYXRpb24gYnkgU3RlcGhlbiBIaWxsXG5cdFx0Ly8gaHR0cDovL2Jsb2cuc2VsZnNoYWRvdy5jb20vcHVibGljYXRpb25zL3MyMDE2LWFkdmFuY2VzL3MyMDE2X2x0Y19mcmVzbmVsLnBkZlxuXHRcdGNvbnN0IGZyZXNuZWwgPSBzcGVjdWxhckNvbG9yLm11bCggdDIueCApLmFkZCggc3BlY3VsYXJDb2xvci5vbmVNaW51cygpLm11bCggdDIueSApICkudG9WYXIoKTtcblxuXHRcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyLmFkZEFzc2lnbiggbGlnaHRDb2xvci5tdWwoIGZyZXNuZWwgKS5tdWwoIExUQ19FdmFsdWF0ZSggeyBOLCBWLCBQLCBtSW52LCBwMCwgcDEsIHAyLCBwMyB9ICkgKSApO1xuXG5cdFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZS5hZGRBc3NpZ24oIGxpZ2h0Q29sb3IubXVsKCBkaWZmdXNlQ29sb3IgKS5tdWwoIExUQ19FdmFsdWF0ZSggeyBOLCBWLCBQLCBtSW52OiBtYXQzKCAxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxICksIHAwLCBwMSwgcDIsIHAzIH0gKSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIHRoZSBpbmRpcmVjdCBsaWdodGluZy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICovXG5cdGluZGlyZWN0KCBidWlsZGVyICkge1xuXG5cdFx0dGhpcy5pbmRpcmVjdERpZmZ1c2UoIGJ1aWxkZXIgKTtcblx0XHR0aGlzLmluZGlyZWN0U3BlY3VsYXIoIGJ1aWxkZXIgKTtcblx0XHR0aGlzLmFtYmllbnRPY2NsdXNpb24oIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEltcGxlbWVudHMgdGhlIGluZGlyZWN0IGRpZmZ1c2UgdGVybS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICovXG5cdGluZGlyZWN0RGlmZnVzZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgaXJyYWRpYW5jZSwgcmVmbGVjdGVkTGlnaHQgfSA9IGJ1aWxkZXIuY29udGV4dDtcblxuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZS5hZGRBc3NpZ24oIGlycmFkaWFuY2UubXVsKCBCUkRGX0xhbWJlcnQoIHsgZGlmZnVzZUNvbG9yIH0gKSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIHRoZSBpbmRpcmVjdCBzcGVjdWxhciB0ZXJtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0aW5kaXJlY3RTcGVjdWxhciggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgcmFkaWFuY2UsIGlibElycmFkaWFuY2UsIHJlZmxlY3RlZExpZ2h0IH0gPSBidWlsZGVyLmNvbnRleHQ7XG5cblx0XHRpZiAoIHRoaXMuc2hlZW4gPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuc2hlZW5TcGVjdWxhckluZGlyZWN0LmFkZEFzc2lnbiggaWJsSXJyYWRpYW5jZS5tdWwoXG5cdFx0XHRcdHNoZWVuLFxuXHRcdFx0XHRJQkxTaGVlbkJSREYoIHtcblx0XHRcdFx0XHRub3JtYWw6IHRyYW5zZm9ybWVkTm9ybWFsVmlldyxcblx0XHRcdFx0XHR2aWV3RGlyOiBwb3NpdGlvblZpZXdEaXJlY3Rpb24sXG5cdFx0XHRcdFx0cm91Z2huZXNzOiBzaGVlblJvdWdobmVzc1xuXHRcdFx0XHR9IClcblx0XHRcdCkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXQgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGRvdE5WY2MgPSB0cmFuc2Zvcm1lZENsZWFyY29hdE5vcm1hbFZpZXcuZG90KCBwb3NpdGlvblZpZXdEaXJlY3Rpb24gKS5jbGFtcCgpO1xuXG5cdFx0XHRjb25zdCBjbGVhcmNvYXRFbnYgPSBFbnZpcm9ubWVudEJSREYoIHtcblx0XHRcdFx0ZG90TlY6IGRvdE5WY2MsXG5cdFx0XHRcdHNwZWN1bGFyQ29sb3I6IGNsZWFyY29hdEYwLFxuXHRcdFx0XHRzcGVjdWxhckY5MDogY2xlYXJjb2F0RjkwLFxuXHRcdFx0XHRyb3VnaG5lc3M6IGNsZWFyY29hdFJvdWdobmVzc1xuXHRcdFx0fSApO1xuXG5cdFx0XHR0aGlzLmNsZWFyY29hdFNwZWN1bGFySW5kaXJlY3QuYWRkQXNzaWduKCB0aGlzLmNsZWFyY29hdFJhZGlhbmNlLm11bCggY2xlYXJjb2F0RW52ICkgKTtcblxuXHRcdH1cblxuXHRcdC8vIEJvdGggaW5kaXJlY3Qgc3BlY3VsYXIgYW5kIGluZGlyZWN0IGRpZmZ1c2UgbGlnaHQgYWNjdW11bGF0ZSBoZXJlXG5cblx0XHRjb25zdCBzaW5nbGVTY2F0dGVyaW5nID0gdmVjMygpLnRvVmFyKCAnc2luZ2xlU2NhdHRlcmluZycgKTtcblx0XHRjb25zdCBtdWx0aVNjYXR0ZXJpbmcgPSB2ZWMzKCkudG9WYXIoICdtdWx0aVNjYXR0ZXJpbmcnICk7XG5cdFx0Y29uc3QgY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlID0gaWJsSXJyYWRpYW5jZS5tdWwoIDEgLyBNYXRoLlBJICk7XG5cblx0XHR0aGlzLmNvbXB1dGVNdWx0aXNjYXR0ZXJpbmcoIHNpbmdsZVNjYXR0ZXJpbmcsIG11bHRpU2NhdHRlcmluZywgc3BlY3VsYXJGOTAgKTtcblxuXHRcdGNvbnN0IHRvdGFsU2NhdHRlcmluZyA9IHNpbmdsZVNjYXR0ZXJpbmcuYWRkKCBtdWx0aVNjYXR0ZXJpbmcgKTtcblxuXHRcdGNvbnN0IGRpZmZ1c2UgPSBkaWZmdXNlQ29sb3IubXVsKCB0b3RhbFNjYXR0ZXJpbmcuci5tYXgoIHRvdGFsU2NhdHRlcmluZy5nICkubWF4KCB0b3RhbFNjYXR0ZXJpbmcuYiApLm9uZU1pbnVzKCkgKTtcblxuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIuYWRkQXNzaWduKCByYWRpYW5jZS5tdWwoIHNpbmdsZVNjYXR0ZXJpbmcgKSApO1xuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIuYWRkQXNzaWduKCBtdWx0aVNjYXR0ZXJpbmcubXVsKCBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2UgKSApO1xuXG5cdFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlLmFkZEFzc2lnbiggZGlmZnVzZS5tdWwoIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIHRoZSBhbWJpZW50IG9jY2x1c2lvbiB0ZXJtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0YW1iaWVudE9jY2x1c2lvbiggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgYW1iaWVudE9jY2x1c2lvbiwgcmVmbGVjdGVkTGlnaHQgfSA9IGJ1aWxkZXIuY29udGV4dDtcblxuXHRcdGNvbnN0IGRvdE5WID0gdHJhbnNmb3JtZWROb3JtYWxWaWV3LmRvdCggcG9zaXRpb25WaWV3RGlyZWN0aW9uICkuY2xhbXAoKTsgLy8gQCBUT0RPOiBNb3ZlIHRvIGNvcmUgZG90TlZcblxuXHRcdGNvbnN0IGFvTlYgPSBkb3ROVi5hZGQoIGFtYmllbnRPY2NsdXNpb24gKTtcblx0XHRjb25zdCBhb0V4cCA9IHJvdWdobmVzcy5tdWwoIC0gMTYuMCApLm9uZU1pbnVzKCkubmVnYXRlKCkuZXhwMigpO1xuXG5cdFx0Y29uc3QgYW9Ob2RlID0gYW1iaWVudE9jY2x1c2lvbi5zdWIoIGFvTlYucG93KCBhb0V4cCApLm9uZU1pbnVzKCkgKS5jbGFtcCgpO1xuXG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5jbGVhcmNvYXRTcGVjdWxhckluZGlyZWN0Lm11bEFzc2lnbiggYW1iaWVudE9jY2x1c2lvbiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnNoZWVuID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNoZWVuU3BlY3VsYXJJbmRpcmVjdC5tdWxBc3NpZ24oIGFtYmllbnRPY2NsdXNpb24gKTtcblxuXHRcdH1cblxuXHRcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZS5tdWxBc3NpZ24oIGFtYmllbnRPY2NsdXNpb24gKTtcblx0XHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyLm11bEFzc2lnbiggYW9Ob2RlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVc2VkIGZvciBmaW5hbCBsaWdodGluZyBhY2N1bXVsYXRpb25zIGRlcGVuZGluZyBvbiB0aGUgcmVxdWVzdGVkIGZlYXR1cmVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0ZmluaXNoKCB7IGNvbnRleHQgfSApIHtcblxuXHRcdGNvbnN0IHsgb3V0Z29pbmdMaWdodCB9ID0gY29udGV4dDtcblxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXQgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGRvdE5WY2MgPSB0cmFuc2Zvcm1lZENsZWFyY29hdE5vcm1hbFZpZXcuZG90KCBwb3NpdGlvblZpZXdEaXJlY3Rpb24gKS5jbGFtcCgpO1xuXG5cdFx0XHRjb25zdCBGY2MgPSBGX1NjaGxpY2soIHtcblx0XHRcdFx0ZG90Vkg6IGRvdE5WY2MsXG5cdFx0XHRcdGYwOiBjbGVhcmNvYXRGMCxcblx0XHRcdFx0ZjkwOiBjbGVhcmNvYXRGOTBcblx0XHRcdH0gKTtcblxuXHRcdFx0Y29uc3QgY2xlYXJjb2F0TGlnaHQgPSBvdXRnb2luZ0xpZ2h0Lm11bCggY2xlYXJjb2F0Lm11bCggRmNjICkub25lTWludXMoKSApLmFkZCggdGhpcy5jbGVhcmNvYXRTcGVjdWxhckRpcmVjdC5hZGQoIHRoaXMuY2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCApLm11bCggY2xlYXJjb2F0ICkgKTtcblxuXHRcdFx0b3V0Z29pbmdMaWdodC5hc3NpZ24oIGNsZWFyY29hdExpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuc2hlZW4gPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IHNoZWVuRW5lcmd5Q29tcCA9IHNoZWVuLnIubWF4KCBzaGVlbi5nICkubWF4KCBzaGVlbi5iICkubXVsKCAwLjE1NyApLm9uZU1pbnVzKCk7XG5cdFx0XHRjb25zdCBzaGVlbkxpZ2h0ID0gb3V0Z29pbmdMaWdodC5tdWwoIHNoZWVuRW5lcmd5Q29tcCApLmFkZCggdGhpcy5zaGVlblNwZWN1bGFyRGlyZWN0LCB0aGlzLnNoZWVuU3BlY3VsYXJJbmRpcmVjdCApO1xuXG5cdFx0XHRvdXRnb2luZ0xpZ2h0LmFzc2lnbiggc2hlZW5MaWdodCApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQaHlzaWNhbExpZ2h0aW5nTW9kZWw7XG4iLCJpbXBvcnQgeyBGbiwgaW50LCBmbG9hdCwgdmVjMiwgdmVjMywgdmVjNCwgSWYgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBjb3MsIHNpbiwgYWJzLCBtYXgsIGV4cDIsIGxvZzIsIGNsYW1wLCBmcmFjdCwgbWl4LCBmbG9vciwgbm9ybWFsaXplLCBjcm9zcywgYWxsIH0gZnJvbSAnLi4vbWF0aC9NYXRoTm9kZS5qcyc7XG5pbXBvcnQgeyBtdWwgfSBmcm9tICcuLi9tYXRoL09wZXJhdG9yTm9kZS5qcyc7XG5pbXBvcnQgeyBzZWxlY3QgfSBmcm9tICcuLi9tYXRoL0NvbmRpdGlvbmFsTm9kZS5qcyc7XG5pbXBvcnQgeyBMb29wLCBCcmVhayB9IGZyb20gJy4uL3V0aWxzL0xvb3BOb2RlLmpzJztcblxuLy8gVGhlc2UgZGVmaW5lcyBtdXN0IG1hdGNoIHdpdGggUE1SRU1HZW5lcmF0b3JcblxuY29uc3QgY3ViZVVWX3IwID0gLypAX19QVVJFX18qLyBmbG9hdCggMS4wICk7XG5jb25zdCBjdWJlVVZfbTAgPSAvKkBfX1BVUkVfXyovIGZsb2F0KCAtIDIuMCApO1xuY29uc3QgY3ViZVVWX3IxID0gLypAX19QVVJFX18qLyBmbG9hdCggMC44ICk7XG5jb25zdCBjdWJlVVZfbTEgPSAvKkBfX1BVUkVfXyovIGZsb2F0KCAtIDEuMCApO1xuY29uc3QgY3ViZVVWX3I0ID0gLypAX19QVVJFX18qLyBmbG9hdCggMC40ICk7XG5jb25zdCBjdWJlVVZfbTQgPSAvKkBfX1BVUkVfXyovIGZsb2F0KCAyLjAgKTtcbmNvbnN0IGN1YmVVVl9yNSA9IC8qQF9fUFVSRV9fKi8gZmxvYXQoIDAuMzA1ICk7XG5jb25zdCBjdWJlVVZfbTUgPSAvKkBfX1BVUkVfXyovIGZsb2F0KCAzLjAgKTtcbmNvbnN0IGN1YmVVVl9yNiA9IC8qQF9fUFVSRV9fKi8gZmxvYXQoIDAuMjEgKTtcbmNvbnN0IGN1YmVVVl9tNiA9IC8qQF9fUFVSRV9fKi8gZmxvYXQoIDQuMCApO1xuXG5jb25zdCBjdWJlVVZfbWluTWlwTGV2ZWwgPSAvKkBfX1BVUkVfXyovIGZsb2F0KCA0LjAgKTtcbmNvbnN0IGN1YmVVVl9taW5UaWxlU2l6ZSA9IC8qQF9fUFVSRV9fKi8gZmxvYXQoIDE2LjAgKTtcblxuLy8gVGhlc2Ugc2hhZGVyIGZ1bmN0aW9ucyBjb252ZXJ0IGJldHdlZW4gdGhlIFVWIGNvb3JkaW5hdGVzIG9mIGEgc2luZ2xlIGZhY2Ugb2Zcbi8vIGEgY3ViZW1hcCwgdGhlIDAtNSBpbnRlZ2VyIGluZGV4IG9mIGEgY3ViZSBmYWNlLCBhbmQgdGhlIGRpcmVjdGlvbiB2ZWN0b3IgZm9yXG4vLyBzYW1wbGluZyBhIHRleHR1cmVDdWJlIChub3QgZ2VuZXJhbGx5IG5vcm1hbGl6ZWQgKS5cblxuY29uc3QgZ2V0RmFjZSA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBkaXJlY3Rpb24gXSApID0+IHtcblxuXHRjb25zdCBhYnNEaXJlY3Rpb24gPSB2ZWMzKCBhYnMoIGRpcmVjdGlvbiApICkudG9WYXIoKTtcblx0Y29uc3QgZmFjZSA9IGZsb2F0KCAtIDEuMCApLnRvVmFyKCk7XG5cblx0SWYoIGFic0RpcmVjdGlvbi54LmdyZWF0ZXJUaGFuKCBhYnNEaXJlY3Rpb24ueiApLCAoKSA9PiB7XG5cblx0XHRJZiggYWJzRGlyZWN0aW9uLnguZ3JlYXRlclRoYW4oIGFic0RpcmVjdGlvbi55ICksICgpID0+IHtcblxuXHRcdFx0ZmFjZS5hc3NpZ24oIHNlbGVjdCggZGlyZWN0aW9uLnguZ3JlYXRlclRoYW4oIDAuMCApLCAwLjAsIDMuMCApICk7XG5cblx0XHR9ICkuRWxzZSggKCkgPT4ge1xuXG5cdFx0XHRmYWNlLmFzc2lnbiggc2VsZWN0KCBkaXJlY3Rpb24ueS5ncmVhdGVyVGhhbiggMC4wICksIDEuMCwgNC4wICkgKTtcblxuXHRcdH0gKTtcblxuXHR9ICkuRWxzZSggKCkgPT4ge1xuXG5cdFx0SWYoIGFic0RpcmVjdGlvbi56LmdyZWF0ZXJUaGFuKCBhYnNEaXJlY3Rpb24ueSApLCAoKSA9PiB7XG5cblx0XHRcdGZhY2UuYXNzaWduKCBzZWxlY3QoIGRpcmVjdGlvbi56LmdyZWF0ZXJUaGFuKCAwLjAgKSwgMi4wLCA1LjAgKSApO1xuXG5cdFx0fSApLkVsc2UoICgpID0+IHtcblxuXHRcdFx0ZmFjZS5hc3NpZ24oIHNlbGVjdCggZGlyZWN0aW9uLnkuZ3JlYXRlclRoYW4oIDAuMCApLCAxLjAsIDQuMCApICk7XG5cblx0XHR9ICk7XG5cblx0fSApO1xuXG5cdHJldHVybiBmYWNlO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdnZXRGYWNlJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnZGlyZWN0aW9uJywgdHlwZTogJ3ZlYzMnIH1cblx0XVxufSApO1xuXG4vLyBSSCBjb29yZGluYXRlIHN5c3RlbTsgUE1SRU0gZmFjZS1pbmRleGluZyBjb252ZW50aW9uXG5jb25zdCBnZXRVViA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBkaXJlY3Rpb24sIGZhY2UgXSApID0+IHtcblxuXHRjb25zdCB1diA9IHZlYzIoKS50b1ZhcigpO1xuXG5cdElmKCBmYWNlLmVxdWFsKCAwLjAgKSwgKCkgPT4ge1xuXG5cdFx0dXYuYXNzaWduKCB2ZWMyKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkgKS5kaXYoIGFicyggZGlyZWN0aW9uLnggKSApICk7IC8vIHBvcyB4XG5cblx0fSApLkVsc2VJZiggZmFjZS5lcXVhbCggMS4wICksICgpID0+IHtcblxuXHRcdHV2LmFzc2lnbiggdmVjMiggZGlyZWN0aW9uLngubmVnYXRlKCksIGRpcmVjdGlvbi56Lm5lZ2F0ZSgpICkuZGl2KCBhYnMoIGRpcmVjdGlvbi55ICkgKSApOyAvLyBwb3MgeVxuXG5cdH0gKS5FbHNlSWYoIGZhY2UuZXF1YWwoIDIuMCApLCAoKSA9PiB7XG5cblx0XHR1di5hc3NpZ24oIHZlYzIoIGRpcmVjdGlvbi54Lm5lZ2F0ZSgpLCBkaXJlY3Rpb24ueSApLmRpdiggYWJzKCBkaXJlY3Rpb24ueiApICkgKTsgLy8gcG9zIHpcblxuXHR9ICkuRWxzZUlmKCBmYWNlLmVxdWFsKCAzLjAgKSwgKCkgPT4ge1xuXG5cdFx0dXYuYXNzaWduKCB2ZWMyKCBkaXJlY3Rpb24uei5uZWdhdGUoKSwgZGlyZWN0aW9uLnkgKS5kaXYoIGFicyggZGlyZWN0aW9uLnggKSApICk7IC8vIG5lZyB4XG5cblx0fSApLkVsc2VJZiggZmFjZS5lcXVhbCggNC4wICksICgpID0+IHtcblxuXHRcdHV2LmFzc2lnbiggdmVjMiggZGlyZWN0aW9uLngubmVnYXRlKCksIGRpcmVjdGlvbi56ICkuZGl2KCBhYnMoIGRpcmVjdGlvbi55ICkgKSApOyAvLyBuZWcgeVxuXG5cdH0gKS5FbHNlKCAoKSA9PiB7XG5cblx0XHR1di5hc3NpZ24oIHZlYzIoIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSApLmRpdiggYWJzKCBkaXJlY3Rpb24ueiApICkgKTsgLy8gbmVnIHpcblxuXHR9ICk7XG5cblx0cmV0dXJuIG11bCggMC41LCB1di5hZGQoIDEuMCApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ2dldFVWJyxcblx0dHlwZTogJ3ZlYzInLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdkaXJlY3Rpb24nLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdmYWNlJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuY29uc3Qgcm91Z2huZXNzVG9NaXAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcm91Z2huZXNzIF0gKSA9PiB7XG5cblx0Y29uc3QgbWlwID0gZmxvYXQoIDAuMCApLnRvVmFyKCk7XG5cblx0SWYoIHJvdWdobmVzcy5ncmVhdGVyVGhhbkVxdWFsKCBjdWJlVVZfcjEgKSwgKCkgPT4ge1xuXG5cdFx0bWlwLmFzc2lnbiggY3ViZVVWX3IwLnN1Yiggcm91Z2huZXNzICkubXVsKCBjdWJlVVZfbTEuc3ViKCBjdWJlVVZfbTAgKSApLmRpdiggY3ViZVVWX3IwLnN1YiggY3ViZVVWX3IxICkgKS5hZGQoIGN1YmVVVl9tMCApICk7XG5cblx0fSApLkVsc2VJZiggcm91Z2huZXNzLmdyZWF0ZXJUaGFuRXF1YWwoIGN1YmVVVl9yNCApLCAoKSA9PiB7XG5cblx0XHRtaXAuYXNzaWduKCBjdWJlVVZfcjEuc3ViKCByb3VnaG5lc3MgKS5tdWwoIGN1YmVVVl9tNC5zdWIoIGN1YmVVVl9tMSApICkuZGl2KCBjdWJlVVZfcjEuc3ViKCBjdWJlVVZfcjQgKSApLmFkZCggY3ViZVVWX20xICkgKTtcblxuXHR9ICkuRWxzZUlmKCByb3VnaG5lc3MuZ3JlYXRlclRoYW5FcXVhbCggY3ViZVVWX3I1ICksICgpID0+IHtcblxuXHRcdG1pcC5hc3NpZ24oIGN1YmVVVl9yNC5zdWIoIHJvdWdobmVzcyApLm11bCggY3ViZVVWX201LnN1YiggY3ViZVVWX200ICkgKS5kaXYoIGN1YmVVVl9yNC5zdWIoIGN1YmVVVl9yNSApICkuYWRkKCBjdWJlVVZfbTQgKSApO1xuXG5cdH0gKS5FbHNlSWYoIHJvdWdobmVzcy5ncmVhdGVyVGhhbkVxdWFsKCBjdWJlVVZfcjYgKSwgKCkgPT4ge1xuXG5cdFx0bWlwLmFzc2lnbiggY3ViZVVWX3I1LnN1Yiggcm91Z2huZXNzICkubXVsKCBjdWJlVVZfbTYuc3ViKCBjdWJlVVZfbTUgKSApLmRpdiggY3ViZVVWX3I1LnN1YiggY3ViZVVWX3I2ICkgKS5hZGQoIGN1YmVVVl9tNSApICk7XG5cblx0fSApLkVsc2UoICgpID0+IHtcblxuXHRcdG1pcC5hc3NpZ24oIGZsb2F0KCAtIDIuMCApLm11bCggbG9nMiggbXVsKCAxLjE2LCByb3VnaG5lc3MgKSApICkgKTsgLy8gMS4xNiA9IDEuNzleMC4yNVxuXG5cdH0gKTtcblxuXHRyZXR1cm4gbWlwO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdyb3VnaG5lc3NUb01pcCcsXG5cdHR5cGU6ICdmbG9hdCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3JvdWdobmVzcycsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbi8vIFJIIGNvb3JkaW5hdGUgc3lzdGVtOyBQTVJFTSBmYWNlLWluZGV4aW5nIGNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCBnZXREaXJlY3Rpb24gPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdXZfaW1tdXRhYmxlLCBmYWNlIF0gKSA9PiB7XG5cblx0Y29uc3QgdXYgPSB1dl9pbW11dGFibGUudG9WYXIoKTtcblx0dXYuYXNzaWduKCBtdWwoIDIuMCwgdXYgKS5zdWIoIDEuMCApICk7XG5cdGNvbnN0IGRpcmVjdGlvbiA9IHZlYzMoIHV2LCAxLjAgKS50b1ZhcigpO1xuXG5cdElmKCBmYWNlLmVxdWFsKCAwLjAgKSwgKCkgPT4ge1xuXG5cdFx0ZGlyZWN0aW9uLmFzc2lnbiggZGlyZWN0aW9uLnp5eCApOyAvLyAoIDEsIHYsIHUgKSBwb3MgeFxuXG5cdH0gKS5FbHNlSWYoIGZhY2UuZXF1YWwoIDEuMCApLCAoKSA9PiB7XG5cblx0XHRkaXJlY3Rpb24uYXNzaWduKCBkaXJlY3Rpb24ueHp5ICk7XG5cdFx0ZGlyZWN0aW9uLnh6Lm11bEFzc2lnbiggLSAxLjAgKTsgLy8gKCAtdSwgMSwgLXYgKSBwb3MgeVxuXG5cdH0gKS5FbHNlSWYoIGZhY2UuZXF1YWwoIDIuMCApLCAoKSA9PiB7XG5cblx0XHRkaXJlY3Rpb24ueC5tdWxBc3NpZ24oIC0gMS4wICk7IC8vICggLXUsIHYsIDEgKSBwb3MgelxuXG5cdH0gKS5FbHNlSWYoIGZhY2UuZXF1YWwoIDMuMCApLCAoKSA9PiB7XG5cblx0XHRkaXJlY3Rpb24uYXNzaWduKCBkaXJlY3Rpb24uenl4ICk7XG5cdFx0ZGlyZWN0aW9uLnh6Lm11bEFzc2lnbiggLSAxLjAgKTsgLy8gKCAtMSwgdiwgLXUgKSBuZWcgeFxuXG5cdH0gKS5FbHNlSWYoIGZhY2UuZXF1YWwoIDQuMCApLCAoKSA9PiB7XG5cblx0XHRkaXJlY3Rpb24uYXNzaWduKCBkaXJlY3Rpb24ueHp5ICk7XG5cdFx0ZGlyZWN0aW9uLnh5Lm11bEFzc2lnbiggLSAxLjAgKTsgLy8gKCAtdSwgLTEsIHYgKSBuZWcgeVxuXG5cdH0gKS5FbHNlSWYoIGZhY2UuZXF1YWwoIDUuMCApLCAoKSA9PiB7XG5cblx0XHRkaXJlY3Rpb24uei5tdWxBc3NpZ24oIC0gMS4wICk7IC8vICggdSwgdiwgLTEgKSBuZWcgelNcblxuXHR9ICk7XG5cblx0cmV0dXJuIGRpcmVjdGlvbjtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnZ2V0RGlyZWN0aW9uJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICd1dicsIHR5cGU6ICd2ZWMyJyB9LFxuXHRcdHsgbmFtZTogJ2ZhY2UnLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApO1xuXG4vL1xuXG5leHBvcnQgY29uc3QgdGV4dHVyZUN1YmVVViA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBlbnZNYXAsIHNhbXBsZURpcl9pbW11dGFibGUsIHJvdWdobmVzc19pbW11dGFibGUsIENVQkVVVl9URVhFTF9XSURUSCwgQ1VCRVVWX1RFWEVMX0hFSUdIVCwgQ1VCRVVWX01BWF9NSVAgXSApID0+IHtcblxuXHRjb25zdCByb3VnaG5lc3MgPSBmbG9hdCggcm91Z2huZXNzX2ltbXV0YWJsZSApO1xuXHRjb25zdCBzYW1wbGVEaXIgPSB2ZWMzKCBzYW1wbGVEaXJfaW1tdXRhYmxlICk7XG5cblx0Y29uc3QgbWlwID0gY2xhbXAoIHJvdWdobmVzc1RvTWlwKCByb3VnaG5lc3MgKSwgY3ViZVVWX20wLCBDVUJFVVZfTUFYX01JUCApO1xuXHRjb25zdCBtaXBGID0gZnJhY3QoIG1pcCApO1xuXHRjb25zdCBtaXBJbnQgPSBmbG9vciggbWlwICk7XG5cdGNvbnN0IGNvbG9yMCA9IHZlYzMoIGJpbGluZWFyQ3ViZVVWKCBlbnZNYXAsIHNhbXBsZURpciwgbWlwSW50LCBDVUJFVVZfVEVYRUxfV0lEVEgsIENVQkVVVl9URVhFTF9IRUlHSFQsIENVQkVVVl9NQVhfTUlQICkgKS50b1ZhcigpO1xuXG5cdElmKCBtaXBGLm5vdEVxdWFsKCAwLjAgKSwgKCkgPT4ge1xuXG5cdFx0Y29uc3QgY29sb3IxID0gdmVjMyggYmlsaW5lYXJDdWJlVVYoIGVudk1hcCwgc2FtcGxlRGlyLCBtaXBJbnQuYWRkKCAxLjAgKSwgQ1VCRVVWX1RFWEVMX1dJRFRILCBDVUJFVVZfVEVYRUxfSEVJR0hULCBDVUJFVVZfTUFYX01JUCApICkudG9WYXIoKTtcblxuXHRcdGNvbG9yMC5hc3NpZ24oIG1peCggY29sb3IwLCBjb2xvcjEsIG1pcEYgKSApO1xuXG5cdH0gKTtcblxuXHRyZXR1cm4gY29sb3IwO1xuXG59ICk7XG5cbmNvbnN0IGJpbGluZWFyQ3ViZVVWID0gLypAX19QVVJFX18qLyBGbiggKCBbIGVudk1hcCwgZGlyZWN0aW9uX2ltbXV0YWJsZSwgbWlwSW50X2ltbXV0YWJsZSwgQ1VCRVVWX1RFWEVMX1dJRFRILCBDVUJFVVZfVEVYRUxfSEVJR0hULCBDVUJFVVZfTUFYX01JUCBdICkgPT4ge1xuXG5cdGNvbnN0IG1pcEludCA9IGZsb2F0KCBtaXBJbnRfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgZGlyZWN0aW9uID0gdmVjMyggZGlyZWN0aW9uX2ltbXV0YWJsZSApO1xuXHRjb25zdCBmYWNlID0gZmxvYXQoIGdldEZhY2UoIGRpcmVjdGlvbiApICkudG9WYXIoKTtcblx0Y29uc3QgZmlsdGVySW50ID0gZmxvYXQoIG1heCggY3ViZVVWX21pbk1pcExldmVsLnN1YiggbWlwSW50ICksIDAuMCApICkudG9WYXIoKTtcblx0bWlwSW50LmFzc2lnbiggbWF4KCBtaXBJbnQsIGN1YmVVVl9taW5NaXBMZXZlbCApICk7XG5cdGNvbnN0IGZhY2VTaXplID0gZmxvYXQoIGV4cDIoIG1pcEludCApICkudG9WYXIoKTtcblx0Y29uc3QgdXYgPSB2ZWMyKCBnZXRVViggZGlyZWN0aW9uLCBmYWNlICkubXVsKCBmYWNlU2l6ZS5zdWIoIDIuMCApICkuYWRkKCAxLjAgKSApLnRvVmFyKCk7XG5cblx0SWYoIGZhY2UuZ3JlYXRlclRoYW4oIDIuMCApLCAoKSA9PiB7XG5cblx0XHR1di55LmFkZEFzc2lnbiggZmFjZVNpemUgKTtcblx0XHRmYWNlLnN1YkFzc2lnbiggMy4wICk7XG5cblx0fSApO1xuXG5cdHV2LnguYWRkQXNzaWduKCBmYWNlLm11bCggZmFjZVNpemUgKSApO1xuXHR1di54LmFkZEFzc2lnbiggZmlsdGVySW50Lm11bCggbXVsKCAzLjAsIGN1YmVVVl9taW5UaWxlU2l6ZSApICkgKTtcblx0dXYueS5hZGRBc3NpZ24oIG11bCggNC4wLCBleHAyKCBDVUJFVVZfTUFYX01JUCApLnN1YiggZmFjZVNpemUgKSApICk7XG5cdHV2LngubXVsQXNzaWduKCBDVUJFVVZfVEVYRUxfV0lEVEggKTtcblx0dXYueS5tdWxBc3NpZ24oIENVQkVVVl9URVhFTF9IRUlHSFQgKTtcblxuXHRyZXR1cm4gZW52TWFwLnNhbXBsZSggdXYgKS5ncmFkKCB2ZWMyKCksIHZlYzIoKSApOyAvLyBkaXNhYmxlIGFuaXNvdHJvcGljIGZpbHRlcmluZ1xuXG59ICk7XG5cbmNvbnN0IGdldFNhbXBsZSA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBlbnZNYXAsIG1pcEludCwgb3V0cHV0RGlyZWN0aW9uLCB0aGV0YSwgYXhpcywgQ1VCRVVWX1RFWEVMX1dJRFRILCBDVUJFVVZfVEVYRUxfSEVJR0hULCBDVUJFVVZfTUFYX01JUCB9ICkgPT4ge1xuXG5cdGNvbnN0IGNvc1RoZXRhID0gY29zKCB0aGV0YSApO1xuXG5cdC8vIFJvZHJpZ3VlcycgYXhpcy1hbmdsZSByb3RhdGlvblxuXHRjb25zdCBzYW1wbGVEaXJlY3Rpb24gPSBvdXRwdXREaXJlY3Rpb24ubXVsKCBjb3NUaGV0YSApXG5cdFx0LmFkZCggYXhpcy5jcm9zcyggb3V0cHV0RGlyZWN0aW9uICkubXVsKCBzaW4oIHRoZXRhICkgKSApXG5cdFx0LmFkZCggYXhpcy5tdWwoIGF4aXMuZG90KCBvdXRwdXREaXJlY3Rpb24gKS5tdWwoIGNvc1RoZXRhLm9uZU1pbnVzKCkgKSApICk7XG5cblx0cmV0dXJuIGJpbGluZWFyQ3ViZVVWKCBlbnZNYXAsIHNhbXBsZURpcmVjdGlvbiwgbWlwSW50LCBDVUJFVVZfVEVYRUxfV0lEVEgsIENVQkVVVl9URVhFTF9IRUlHSFQsIENVQkVVVl9NQVhfTUlQICk7XG5cbn0gKTtcblxuZXhwb3J0IGNvbnN0IGJsdXIgPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgbiwgbGF0aXR1ZGluYWwsIHBvbGVBeGlzLCBvdXRwdXREaXJlY3Rpb24sIHdlaWdodHMsIHNhbXBsZXMsIGRUaGV0YSwgbWlwSW50LCBlbnZNYXAsIENVQkVVVl9URVhFTF9XSURUSCwgQ1VCRVVWX1RFWEVMX0hFSUdIVCwgQ1VCRVVWX01BWF9NSVAgfSApID0+IHtcblxuXHRjb25zdCBheGlzID0gdmVjMyggc2VsZWN0KCBsYXRpdHVkaW5hbCwgcG9sZUF4aXMsIGNyb3NzKCBwb2xlQXhpcywgb3V0cHV0RGlyZWN0aW9uICkgKSApLnRvVmFyKCk7XG5cblx0SWYoIGFsbCggYXhpcy5lcXVhbHMoIHZlYzMoIDAuMCApICkgKSwgKCkgPT4ge1xuXG5cdFx0YXhpcy5hc3NpZ24oIHZlYzMoIG91dHB1dERpcmVjdGlvbi56LCAwLjAsIG91dHB1dERpcmVjdGlvbi54Lm5lZ2F0ZSgpICkgKTtcblxuXHR9ICk7XG5cblx0YXhpcy5hc3NpZ24oIG5vcm1hbGl6ZSggYXhpcyApICk7XG5cblx0Y29uc3QgZ2xfRnJhZ0NvbG9yID0gdmVjMygpLnRvVmFyKCk7XG5cdGdsX0ZyYWdDb2xvci5hZGRBc3NpZ24oIHdlaWdodHMuZWxlbWVudCggMCApLm11bCggZ2V0U2FtcGxlKCB7IHRoZXRhOiAwLjAsIGF4aXMsIG91dHB1dERpcmVjdGlvbiwgbWlwSW50LCBlbnZNYXAsIENVQkVVVl9URVhFTF9XSURUSCwgQ1VCRVVWX1RFWEVMX0hFSUdIVCwgQ1VCRVVWX01BWF9NSVAgfSApICkgKTtcblxuXHRMb29wKCB7IHN0YXJ0OiBpbnQoIDEgKSwgZW5kOiBuIH0sICggeyBpIH0gKSA9PiB7XG5cblx0XHRJZiggaS5ncmVhdGVyVGhhbkVxdWFsKCBzYW1wbGVzICksICgpID0+IHtcblxuXHRcdFx0QnJlYWsoKTtcblxuXHRcdH0gKTtcblxuXHRcdGNvbnN0IHRoZXRhID0gZmxvYXQoIGRUaGV0YS5tdWwoIGZsb2F0KCBpICkgKSApLnRvVmFyKCk7XG5cdFx0Z2xfRnJhZ0NvbG9yLmFkZEFzc2lnbiggd2VpZ2h0cy5lbGVtZW50KCBpICkubXVsKCBnZXRTYW1wbGUoIHsgdGhldGE6IHRoZXRhLm11bCggLSAxLjAgKSwgYXhpcywgb3V0cHV0RGlyZWN0aW9uLCBtaXBJbnQsIGVudk1hcCwgQ1VCRVVWX1RFWEVMX1dJRFRILCBDVUJFVVZfVEVYRUxfSEVJR0hULCBDVUJFVVZfTUFYX01JUCB9ICkgKSApO1xuXHRcdGdsX0ZyYWdDb2xvci5hZGRBc3NpZ24oIHdlaWdodHMuZWxlbWVudCggaSApLm11bCggZ2V0U2FtcGxlKCB7IHRoZXRhLCBheGlzLCBvdXRwdXREaXJlY3Rpb24sIG1pcEludCwgZW52TWFwLCBDVUJFVVZfVEVYRUxfV0lEVEgsIENVQkVVVl9URVhFTF9IRUlHSFQsIENVQkVVVl9NQVhfTUlQIH0gKSApICk7XG5cblx0fSApO1xuXG5cdHJldHVybiB2ZWM0KCBnbF9GcmFnQ29sb3IsIDEgKTtcblxufSApO1xuIiwiaW1wb3J0IE5vZGVNYXRlcmlhbCBmcm9tICcuLi8uLi8uLi9tYXRlcmlhbHMvbm9kZXMvTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCB7IGdldERpcmVjdGlvbiwgYmx1ciB9IGZyb20gJy4uLy4uLy4uL25vZGVzL3BtcmVtL1BNUkVNVXRpbHMuanMnO1xuaW1wb3J0IHsgZXF1aXJlY3RVViB9IGZyb20gJy4uLy4uLy4uL25vZGVzL3V0aWxzL0VxdWlyZWN0VVZOb2RlLmpzJztcbmltcG9ydCB7IHVuaWZvcm0gfSBmcm9tICcuLi8uLi8uLi9ub2Rlcy9jb3JlL1VuaWZvcm1Ob2RlLmpzJztcbmltcG9ydCB7IHVuaWZvcm1BcnJheSB9IGZyb20gJy4uLy4uLy4uL25vZGVzL2FjY2Vzc29ycy9Vbmlmb3JtQXJyYXlOb2RlLmpzJztcbmltcG9ydCB7IHRleHR1cmUgfSBmcm9tICcuLi8uLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgY3ViZVRleHR1cmUgfSBmcm9tICcuLi8uLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvQ3ViZVRleHR1cmVOb2RlLmpzJztcbmltcG9ydCB7IGZsb2F0LCB2ZWMzIH0gZnJvbSAnLi4vLi4vLi4vbm9kZXMvdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgdXYgfSBmcm9tICcuLi8uLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvVVYuanMnO1xuaW1wb3J0IHsgYXR0cmlidXRlIH0gZnJvbSAnLi4vLi4vLi4vbm9kZXMvY29yZS9BdHRyaWJ1dGVOb2RlLmpzJztcblxuaW1wb3J0IHsgT3J0aG9ncmFwaGljQ2FtZXJhIH0gZnJvbSAnLi4vLi4vLi4vY2FtZXJhcy9PcnRob2dyYXBoaWNDYW1lcmEuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgQnVmZmVyR2VvbWV0cnkgfSBmcm9tICcuLi8uLi8uLi9jb3JlL0J1ZmZlckdlb21ldHJ5LmpzJztcbmltcG9ydCB7IEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IFJlbmRlclRhcmdldCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvUmVuZGVyVGFyZ2V0LmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi8uLi8uLi9vYmplY3RzL01lc2guanMnO1xuaW1wb3J0IHsgUGVyc3BlY3RpdmVDYW1lcmEgfSBmcm9tICcuLi8uLi8uLi9jYW1lcmFzL1BlcnNwZWN0aXZlQ2FtZXJhLmpzJztcbmltcG9ydCB7IE1lc2hCYXNpY01hdGVyaWFsIH0gZnJvbSAnLi4vLi4vLi4vbWF0ZXJpYWxzL01lc2hCYXNpY01hdGVyaWFsLmpzJztcbmltcG9ydCB7IEJveEdlb21ldHJ5IH0gZnJvbSAnLi4vLi4vLi4vZ2VvbWV0cmllcy9Cb3hHZW9tZXRyeS5qcyc7XG5pbXBvcnQge1xuXHRDdWJlUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEN1YmVSZWZyYWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcsXG5cdExpbmVhckZpbHRlcixcblx0Tm9CbGVuZGluZyxcblx0UkdCQUZvcm1hdCxcblx0SGFsZkZsb2F0VHlwZSxcblx0QmFja1NpZGUsXG5cdExpbmVhclNSR0JDb2xvclNwYWNlXG59IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IExPRF9NSU4gPSA0O1xuXG4vLyBUaGUgc3RhbmRhcmQgZGV2aWF0aW9ucyAocmFkaWFucykgYXNzb2NpYXRlZCB3aXRoIHRoZSBleHRyYSBtaXBzLiBUaGVzZSBhcmVcbi8vIGNob3NlbiB0byBhcHByb3hpbWF0ZSBhIFRyb3dicmlkZ2UtUmVpdHogZGlzdHJpYnV0aW9uIGZ1bmN0aW9uIHRpbWVzIHRoZVxuLy8gZ2VvbWV0cmljIHNoYWRvd2luZyBmdW5jdGlvbi4gVGhlc2Ugc2lnbWEgdmFsdWVzIHNxdWFyZWQgbXVzdCBtYXRjaCB0aGVcbi8vIHZhcmlhbmNlICNkZWZpbmVzIGluIGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudC5nbHNsLmpzLlxuY29uc3QgRVhUUkFfTE9EX1NJR01BID0gWyAwLjEyNSwgMC4yMTUsIDAuMzUsIDAuNDQ2LCAwLjUyNiwgMC41ODIgXTtcblxuLy8gVGhlIG1heGltdW0gbGVuZ3RoIG9mIHRoZSBibHVyIGZvciBsb29wLiBTbWFsbGVyIHNpZ21hcyB3aWxsIHVzZSBmZXdlclxuLy8gc2FtcGxlcyBhbmQgZXhpdCBlYXJseSwgYnV0IG5vdCByZWNvbXBpbGUgdGhlIHNoYWRlci5cbmNvbnN0IE1BWF9TQU1QTEVTID0gMjA7XG5cbmNvbnN0IF9mbGF0Q2FtZXJhID0gLypAX19QVVJFX18qLyBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCAtIDEsIDEsIDEsIC0gMSwgMCwgMSApO1xuY29uc3QgX2N1YmVDYW1lcmEgPSAvKkBfX1BVUkVfXyovIG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggOTAsIDEgKTtcbmNvbnN0IF9jbGVhckNvbG9yID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTtcbmxldCBfb2xkVGFyZ2V0ID0gbnVsbDtcbmxldCBfb2xkQWN0aXZlQ3ViZUZhY2UgPSAwO1xubGV0IF9vbGRBY3RpdmVNaXBtYXBMZXZlbCA9IDA7XG5cbi8vIEdvbGRlbiBSYXRpb1xuY29uc3QgUEhJID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7XG5jb25zdCBJTlZfUEhJID0gMSAvIFBISTtcblxuLy8gVmVydGljZXMgb2YgYSBkb2RlY2FoZWRyb24gKGV4Y2VwdCB0aGUgb3Bwb3NpdGVzLCB3aGljaCByZXByZXNlbnQgdGhlXG4vLyBzYW1lIGF4aXMpLCB1c2VkIGFzIGF4aXMgZGlyZWN0aW9ucyBldmVubHkgc3ByZWFkIG9uIGEgc3BoZXJlLlxuY29uc3QgX2F4aXNEaXJlY3Rpb25zID0gW1xuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAtIFBISSwgSU5WX1BISSwgMCApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCBQSEksIElOVl9QSEksIDAgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLSBJTlZfUEhJLCAwLCBQSEkgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggSU5WX1BISSwgMCwgUEhJICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIFBISSwgLSBJTlZfUEhJICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIFBISSwgSU5WX1BISSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAtIDEsIDEsIC0gMSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAxLCAxLCAtIDEgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLSAxLCAxLCAxICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKVxuXTtcblxuY29uc3QgX29yaWdpbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuLy8gbWFwcyBibHVyIG1hdGVyaWFscyB0byB0aGVpciB1bmlmb3JtcyBkaWN0aW9uYXJ5XG5cbmNvbnN0IF91bmlmb3Jtc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbi8vIFdlYkdQVSBGYWNlIGluZGljZXNcbmNvbnN0IF9mYWNlTGliID0gW1xuXHQzLCAxLCA1LFxuXHQwLCA0LCAyXG5dO1xuXG5jb25zdCBfZGlyZWN0aW9uID0gLypAX19QVVJFX18qLyBnZXREaXJlY3Rpb24oIHV2KCksIGF0dHJpYnV0ZSggJ2ZhY2VJbmRleCcgKSApLm5vcm1hbGl6ZSgpO1xuY29uc3QgX291dHB1dERpcmVjdGlvbiA9IC8qQF9fUFVSRV9fKi8gdmVjMyggX2RpcmVjdGlvbi54LCBfZGlyZWN0aW9uLnksIF9kaXJlY3Rpb24ueiApO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZ2VuZXJhdGVzIGEgUHJlZmlsdGVyZWQsIE1pcG1hcHBlZCBSYWRpYW5jZSBFbnZpcm9ubWVudCBNYXBcbiAqIChQTVJFTSkgZnJvbSBhIGN1YmVNYXAgZW52aXJvbm1lbnQgdGV4dHVyZS4gVGhpcyBhbGxvd3MgZGlmZmVyZW50IGxldmVscyBvZlxuICogYmx1ciB0byBiZSBxdWlja2x5IGFjY2Vzc2VkIGJhc2VkIG9uIG1hdGVyaWFsIHJvdWdobmVzcy4gSXQgaXMgcGFja2VkIGludG8gYVxuICogc3BlY2lhbCBDdWJlVVYgZm9ybWF0IHRoYXQgYWxsb3dzIHVzIHRvIHBlcmZvcm0gY3VzdG9tIGludGVycG9sYXRpb24gc28gdGhhdFxuICogd2UgY2FuIHN1cHBvcnQgbm9ubGluZWFyIGZvcm1hdHMgc3VjaCBhcyBSR0JFLiBVbmxpa2UgYSB0cmFkaXRpb25hbCBtaXBtYXBcbiAqIGNoYWluLCBpdCBvbmx5IGdvZXMgZG93biB0byB0aGUgTE9EX01JTiBsZXZlbCAoYWJvdmUpLCBhbmQgdGhlbiBjcmVhdGVzIGV4dHJhXG4gKiBldmVuIG1vcmUgZmlsdGVyZWQgJ21pcHMnIGF0IHRoZSBzYW1lIExPRF9NSU4gcmVzb2x1dGlvbiwgYXNzb2NpYXRlZCB3aXRoXG4gKiBoaWdoZXIgcm91Z2huZXNzIGxldmVscy4gSW4gdGhpcyB3YXkgd2UgbWFpbnRhaW4gcmVzb2x1dGlvbiB0byBzbW9vdGhseVxuICogaW50ZXJwb2xhdGUgZGlmZnVzZSBsaWdodGluZyB3aGlsZSBsaW1pdGluZyBzYW1wbGluZyBjb21wdXRhdGlvbi5cbiAqXG4gKiBQYXBlcjogRmFzdCwgQWNjdXJhdGUgSW1hZ2UtQmFzZWQgTGlnaHRpbmc6XG4gKiB7QGxpbmsgaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xNXk4cl9VcEtsVTlTdlY0SUxiMEMzcUNQZWNTOHB2THovdmlld31cbiovXG5jbGFzcyBQTVJFTUdlbmVyYXRvciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgUE1SRU0gZ2VuZXJhdG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByZW5kZXJlciApIHtcblxuXHRcdHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG5cdFx0dGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0dGhpcy5fbG9kTWF4ID0gMDtcblx0XHR0aGlzLl9jdWJlU2l6ZSA9IDA7XG5cdFx0dGhpcy5fbG9kUGxhbmVzID0gW107XG5cdFx0dGhpcy5fc2l6ZUxvZHMgPSBbXTtcblx0XHR0aGlzLl9zaWdtYXMgPSBbXTtcblx0XHR0aGlzLl9sb2RNZXNoZXMgPSBbXTtcblxuXHRcdHRoaXMuX2JsdXJNYXRlcmlhbCA9IG51bGw7XG5cdFx0dGhpcy5fY3ViZW1hcE1hdGVyaWFsID0gbnVsbDtcblx0XHR0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gbnVsbDtcblx0XHR0aGlzLl9iYWNrZ3JvdW5kQm94ID0gbnVsbDtcblxuXHR9XG5cblx0Z2V0IF9oYXNJbml0aWFsaXplZCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9yZW5kZXJlci5oYXNJbml0aWFsaXplZCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhIHN1cHBsaWVkIFNjZW5lLCB3aGljaCBjYW4gYmUgZmFzdGVyIHRoYW4gdXNpbmcgYW5cblx0ICogaW1hZ2UgaWYgbmV0d29ya2luZyBiYW5kd2lkdGggaXMgbG93LiBPcHRpb25hbCBzaWdtYSBzcGVjaWZpZXMgYSBibHVyIHJhZGl1c1xuXHQgKiBpbiByYWRpYW5zIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHNjZW5lIGJlZm9yZSBQTVJFTSBnZW5lcmF0aW9uLiBPcHRpb25hbCBuZWFyXG5cdCAqIGFuZCBmYXIgcGxhbmVzIGVuc3VyZSB0aGUgc2NlbmUgaXMgcmVuZGVyZWQgaW4gaXRzIGVudGlyZXR5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZSB0byBiZSBjYXB0dXJlZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzaWdtYT0wXSAtIFRoZSBibHVyIHJhZGl1cyBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW25lYXI9MC4xXSAtIFRoZSBuZWFyIHBsYW5lIGRpc3RhbmNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zhcj0xMDBdIC0gVGhlIGZhciBwbGFuZSBkaXN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zaXplPTI1Nl0gLSBUaGUgdGV4dHVyZSBzaXplIG9mIHRoZSBQTVJFTS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbb3B0aW9ucy5yZW5kZXJUYXJnZXQ9b3JpZ2luXSAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgaW50ZXJuYWwgY3ViZSBjYW1lcmEgdGhhdCByZW5kZXJzIHRoZSBzY2VuZS5cblx0ICogQHBhcmFtIHs/UmVuZGVyVGFyZ2V0fSBbb3B0aW9ucy5yZW5kZXJUYXJnZXQ9bnVsbF0gLSBUaGUgcmVuZGVyIHRhcmdldCB0byB1c2UuXG5cdCAqIEByZXR1cm4ge1JlbmRlclRhcmdldH0gVGhlIHJlc3VsdGluZyBQTVJFTS5cblx0ICogQHNlZSB7QGxpbmsgUE1SRU1HZW5lcmF0b3IjZnJvbVNjZW5lQXN5bmN9XG5cdCAqL1xuXHRmcm9tU2NlbmUoIHNjZW5lLCBzaWdtYSA9IDAsIG5lYXIgPSAwLjEsIGZhciA9IDEwMCwgb3B0aW9ucyA9IHt9ICkge1xuXG5cdFx0Y29uc3Qge1xuXHRcdFx0c2l6ZSA9IDI1Nixcblx0XHRcdHBvc2l0aW9uID0gX29yaWdpbixcblx0XHRcdHJlbmRlclRhcmdldCA9IG51bGwsXG5cdFx0fSA9IG9wdGlvbnM7XG5cblx0XHR0aGlzLl9zZXRTaXplKCBzaXplICk7XG5cblx0XHRpZiAoIHRoaXMuX2hhc0luaXRpYWxpemVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUE1SRU1HZW5lcmF0b3I6IC5mcm9tU2NlbmUoKSBjYWxsZWQgYmVmb3JlIHRoZSBiYWNrZW5kIGlzIGluaXRpYWxpemVkLiBUcnkgdXNpbmcgLmZyb21TY2VuZUFzeW5jKCkgaW5zdGVhZC4nICk7XG5cblx0XHRcdGNvbnN0IGN1YmVVVlJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldCB8fCB0aGlzLl9hbGxvY2F0ZVRhcmdldHMoKTtcblxuXHRcdFx0b3B0aW9ucy5yZW5kZXJUYXJnZXQgPSBjdWJlVVZSZW5kZXJUYXJnZXQ7XG5cblx0XHRcdHRoaXMuZnJvbVNjZW5lQXN5bmMoIHNjZW5lLCBzaWdtYSwgbmVhciwgZmFyLCBvcHRpb25zICk7XG5cblx0XHRcdHJldHVybiBjdWJlVVZSZW5kZXJUYXJnZXQ7XG5cblx0XHR9XG5cblx0XHRfb2xkVGFyZ2V0ID0gdGhpcy5fcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0X29sZEFjdGl2ZUN1YmVGYWNlID0gdGhpcy5fcmVuZGVyZXIuZ2V0QWN0aXZlQ3ViZUZhY2UoKTtcblx0XHRfb2xkQWN0aXZlTWlwbWFwTGV2ZWwgPSB0aGlzLl9yZW5kZXJlci5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xuXG5cdFx0Y29uc3QgY3ViZVVWUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0IHx8IHRoaXMuX2FsbG9jYXRlVGFyZ2V0cygpO1xuXHRcdGN1YmVVVlJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciA9IHRydWU7XG5cblx0XHR0aGlzLl9zY2VuZVRvQ3ViZVVWKCBzY2VuZSwgbmVhciwgZmFyLCBjdWJlVVZSZW5kZXJUYXJnZXQsIHBvc2l0aW9uICk7XG5cblx0XHRpZiAoIHNpZ21hID4gMCApIHtcblxuXHRcdFx0dGhpcy5fYmx1ciggY3ViZVVWUmVuZGVyVGFyZ2V0LCAwLCAwLCBzaWdtYSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR0aGlzLl9jbGVhbnVwKCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJldHVybiBjdWJlVVZSZW5kZXJUYXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgYSBQTVJFTSBmcm9tIGEgc3VwcGxpZWQgU2NlbmUsIHdoaWNoIGNhbiBiZSBmYXN0ZXIgdGhhbiB1c2luZyBhblxuXHQgKiBpbWFnZSBpZiBuZXR3b3JraW5nIGJhbmR3aWR0aCBpcyBsb3cuIE9wdGlvbmFsIHNpZ21hIHNwZWNpZmllcyBhIGJsdXIgcmFkaXVzXG5cdCAqIGluIHJhZGlhbnMgdG8gYmUgYXBwbGllZCB0byB0aGUgc2NlbmUgYmVmb3JlIFBNUkVNIGdlbmVyYXRpb24uIE9wdGlvbmFsIG5lYXJcblx0ICogYW5kIGZhciBwbGFuZXMgZW5zdXJlIHRoZSBzY2VuZSBpcyByZW5kZXJlZCBpbiBpdHMgZW50aXJldHkgKHRoZSBjdWJlQ2FtZXJhXG5cdCAqIGlzIHBsYWNlZCBhdCB0aGUgb3JpZ2luKS5cblx0ICpcblx0ICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBUaGUgc2NlbmUgdG8gYmUgY2FwdHVyZWQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbc2lnbWE9MF0gLSBUaGUgYmx1ciByYWRpdXMgaW4gcmFkaWFucy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuZWFyPTAuMV0gLSBUaGUgbmVhciBwbGFuZSBkaXN0YW5jZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtmYXI9MTAwXSAtIFRoZSBmYXIgcGxhbmUgZGlzdGFuY2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2l6ZT0yNTZdIC0gVGhlIHRleHR1cmUgc2l6ZSBvZiB0aGUgUE1SRU0uXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW29wdGlvbnMucG9zaXRpb249b3JpZ2luXSAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgaW50ZXJuYWwgY3ViZSBjYW1lcmEgdGhhdCByZW5kZXJzIHRoZSBzY2VuZS5cblx0ICogQHBhcmFtIHs/UmVuZGVyVGFyZ2V0fSBbb3B0aW9ucy5yZW5kZXJUYXJnZXQ9bnVsbF0gLSBUaGUgcmVuZGVyIHRhcmdldCB0byB1c2UuXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8UmVuZGVyVGFyZ2V0Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZSB3aXRoIHRoZSBQTVJFTSB3aGVuIHRoZSBnZW5lcmF0aW9uIGhhcyBiZWVuIGZpbmlzaGVkLlxuXHQgKiBAc2VlIHtAbGluayBQTVJFTUdlbmVyYXRvciNmcm9tU2NlbmV9XG5cdCAqL1xuXHRhc3luYyBmcm9tU2NlbmVBc3luYyggc2NlbmUsIHNpZ21hID0gMCwgbmVhciA9IDAuMSwgZmFyID0gMTAwLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRpZiAoIHRoaXMuX2hhc0luaXRpYWxpemVkID09PSBmYWxzZSApIGF3YWl0IHRoaXMuX3JlbmRlcmVyLmluaXQoKTtcblxuXHRcdHJldHVybiB0aGlzLmZyb21TY2VuZSggc2NlbmUsIHNpZ21hLCBuZWFyLCBmYXIsIG9wdGlvbnMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIFBNUkVNIGZyb20gYW4gZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmUsIHdoaWNoIGNhbiBiZSBlaXRoZXIgTERSXG5cdCAqIG9yIEhEUi4gVGhlIGlkZWFsIGlucHV0IGltYWdlIHNpemUgaXMgMWsgKDEwMjQgeCA1MTIpLFxuXHQgKiBhcyB0aGlzIG1hdGNoZXMgYmVzdCB3aXRoIHRoZSAyNTYgeCAyNTYgY3ViZW1hcCBvdXRwdXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gZXF1aXJlY3Rhbmd1bGFyIC0gVGhlIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlIHRvIGJlIGNvbnZlcnRlZC5cblx0ICogQHBhcmFtIHs/UmVuZGVyVGFyZ2V0fSBbcmVuZGVyVGFyZ2V0PW51bGxdIC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gdXNlLlxuXHQgKiBAcmV0dXJuIHtSZW5kZXJUYXJnZXR9IFRoZSByZXN1bHRpbmcgUE1SRU0uXG5cdCAqIEBzZWUge0BsaW5rIFBNUkVNR2VuZXJhdG9yI2Zyb21FcXVpcmVjdGFuZ3VsYXJBc3luY31cblx0ICovXG5cdGZyb21FcXVpcmVjdGFuZ3VsYXIoIGVxdWlyZWN0YW5ndWxhciwgcmVuZGVyVGFyZ2V0ID0gbnVsbCApIHtcblxuXHRcdGlmICggdGhpcy5faGFzSW5pdGlhbGl6ZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QTVJFTUdlbmVyYXRvcjogLmZyb21FcXVpcmVjdGFuZ3VsYXIoKSBjYWxsZWQgYmVmb3JlIHRoZSBiYWNrZW5kIGlzIGluaXRpYWxpemVkLiBUcnkgdXNpbmcgLmZyb21FcXVpcmVjdGFuZ3VsYXJBc3luYygpIGluc3RlYWQuJyApO1xuXG5cdFx0XHR0aGlzLl9zZXRTaXplRnJvbVRleHR1cmUoIGVxdWlyZWN0YW5ndWxhciApO1xuXG5cdFx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQgfHwgdGhpcy5fYWxsb2NhdGVUYXJnZXRzKCk7XG5cblx0XHRcdHRoaXMuZnJvbUVxdWlyZWN0YW5ndWxhckFzeW5jKCBlcXVpcmVjdGFuZ3VsYXIsIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2Zyb21UZXh0dXJlKCBlcXVpcmVjdGFuZ3VsYXIsIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhbiBlcXVpcmVjdGFuZ3VsYXIgdGV4dHVyZSwgd2hpY2ggY2FuIGJlIGVpdGhlciBMRFJcblx0ICogb3IgSERSLiBUaGUgaWRlYWwgaW5wdXQgaW1hZ2Ugc2l6ZSBpcyAxayAoMTAyNCB4IDUxMiksXG5cdCAqIGFzIHRoaXMgbWF0Y2hlcyBiZXN0IHdpdGggdGhlIDI1NiB4IDI1NiBjdWJlbWFwIG91dHB1dC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSBlcXVpcmVjdGFuZ3VsYXIgLSBUaGUgZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmUgdG8gYmUgY29udmVydGVkLlxuXHQgKiBAcGFyYW0gez9SZW5kZXJUYXJnZXR9IFtyZW5kZXJUYXJnZXQ9bnVsbF0gLSBUaGUgcmVuZGVyIHRhcmdldCB0byB1c2UuXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8UmVuZGVyVGFyZ2V0Pn0gVGhlIHJlc3VsdGluZyBQTVJFTS5cblx0ICogQHNlZSB7QGxpbmsgUE1SRU1HZW5lcmF0b3IjZnJvbUVxdWlyZWN0YW5ndWxhcn1cblx0ICovXG5cdGFzeW5jIGZyb21FcXVpcmVjdGFuZ3VsYXJBc3luYyggZXF1aXJlY3Rhbmd1bGFyLCByZW5kZXJUYXJnZXQgPSBudWxsICkge1xuXG5cdFx0aWYgKCB0aGlzLl9oYXNJbml0aWFsaXplZCA9PT0gZmFsc2UgKSBhd2FpdCB0aGlzLl9yZW5kZXJlci5pbml0KCk7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJvbVRleHR1cmUoIGVxdWlyZWN0YW5ndWxhciwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgYSBQTVJFTSBmcm9tIGFuIGN1YmVtYXAgdGV4dHVyZSwgd2hpY2ggY2FuIGJlIGVpdGhlciBMRFJcblx0ICogb3IgSERSLiBUaGUgaWRlYWwgaW5wdXQgY3ViZSBzaXplIGlzIDI1NiB4IDI1Nixcblx0ICogYXMgdGhpcyBtYXRjaGVzIGJlc3Qgd2l0aCB0aGUgMjU2IHggMjU2IGN1YmVtYXAgb3V0cHV0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IGN1YmVtYXAgLSBUaGUgY3ViZW1hcCB0ZXh0dXJlIHRvIGJlIGNvbnZlcnRlZC5cblx0ICogQHBhcmFtIHs/UmVuZGVyVGFyZ2V0fSBbcmVuZGVyVGFyZ2V0PW51bGxdIC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gdXNlLlxuXHQgKiBAcmV0dXJuIHtSZW5kZXJUYXJnZXR9IFRoZSByZXN1bHRpbmcgUE1SRU0uXG5cdCAqIEBzZWUge0BsaW5rIFBNUkVNR2VuZXJhdG9yI2Zyb21DdWJlbWFwQXN5bmN9XG5cdCAqL1xuXHRmcm9tQ3ViZW1hcCggY3ViZW1hcCwgcmVuZGVyVGFyZ2V0ID0gbnVsbCApIHtcblxuXHRcdGlmICggdGhpcy5faGFzSW5pdGlhbGl6ZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QTVJFTUdlbmVyYXRvcjogLmZyb21DdWJlbWFwKCkgY2FsbGVkIGJlZm9yZSB0aGUgYmFja2VuZCBpcyBpbml0aWFsaXplZC4gVHJ5IHVzaW5nIC5mcm9tQ3ViZW1hcEFzeW5jKCkgaW5zdGVhZC4nICk7XG5cblx0XHRcdHRoaXMuX3NldFNpemVGcm9tVGV4dHVyZSggY3ViZW1hcCApO1xuXG5cdFx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQgfHwgdGhpcy5fYWxsb2NhdGVUYXJnZXRzKCk7XG5cblx0XHRcdHRoaXMuZnJvbUN1YmVtYXBBc3luYyggY3ViZW1hcCwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdHJldHVybiBjdWJlVVZSZW5kZXJUYXJnZXQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJvbVRleHR1cmUoIGN1YmVtYXAsIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhbiBjdWJlbWFwIHRleHR1cmUsIHdoaWNoIGNhbiBiZSBlaXRoZXIgTERSXG5cdCAqIG9yIEhEUi4gVGhlIGlkZWFsIGlucHV0IGN1YmUgc2l6ZSBpcyAyNTYgeCAyNTYsXG5cdCAqIHdpdGggdGhlIDI1NiB4IDI1NiBjdWJlbWFwIG91dHB1dC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSBjdWJlbWFwIC0gVGhlIGN1YmVtYXAgdGV4dHVyZSB0byBiZSBjb252ZXJ0ZWQuXG5cdCAqIEBwYXJhbSB7P1JlbmRlclRhcmdldH0gW3JlbmRlclRhcmdldD1udWxsXSAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIHVzZS5cblx0ICogQHJldHVybiB7UHJvbWlzZTxSZW5kZXJUYXJnZXQ+fSBUaGUgcmVzdWx0aW5nIFBNUkVNLlxuXHQgKiBAc2VlIHtAbGluayBQTVJFTUdlbmVyYXRvciNmcm9tQ3ViZW1hcH1cblx0ICovXG5cdGFzeW5jIGZyb21DdWJlbWFwQXN5bmMoIGN1YmVtYXAsIHJlbmRlclRhcmdldCA9IG51bGwgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2hhc0luaXRpYWxpemVkID09PSBmYWxzZSApIGF3YWl0IHRoaXMuX3JlbmRlcmVyLmluaXQoKTtcblxuXHRcdHJldHVybiB0aGlzLl9mcm9tVGV4dHVyZSggY3ViZW1hcCwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcmUtY29tcGlsZXMgdGhlIGN1YmVtYXAgc2hhZGVyLiBZb3UgY2FuIGdldCBmYXN0ZXIgc3RhcnQtdXAgYnkgaW52b2tpbmcgdGhpcyBtZXRob2QgZHVyaW5nXG5cdCAqIHlvdXIgdGV4dHVyZSdzIG5ldHdvcmsgZmV0Y2ggZm9yIGluY3JlYXNlZCBjb25jdXJyZW5jeS5cblx0ICpcblx0ICogQHJldHVybnMge1Byb21pc2V9XG5cdCAqL1xuXHRhc3luYyBjb21waWxlQ3ViZW1hcFNoYWRlcigpIHtcblxuXHRcdGlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgPSBfZ2V0Q3ViZW1hcE1hdGVyaWFsKCk7XG5cdFx0XHRhd2FpdCB0aGlzLl9jb21waWxlTWF0ZXJpYWwoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUHJlLWNvbXBpbGVzIHRoZSBlcXVpcmVjdGFuZ3VsYXIgc2hhZGVyLiBZb3UgY2FuIGdldCBmYXN0ZXIgc3RhcnQtdXAgYnkgaW52b2tpbmcgdGhpcyBtZXRob2QgZHVyaW5nXG5cdCAqIHlvdXIgdGV4dHVyZSdzIG5ldHdvcmsgZmV0Y2ggZm9yIGluY3JlYXNlZCBjb25jdXJyZW5jeS5cblx0ICpcblx0ICogQHJldHVybnMge1Byb21pc2V9XG5cdCAqL1xuXHRhc3luYyBjb21waWxlRXF1aXJlY3Rhbmd1bGFyU2hhZGVyKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKTtcblx0XHRcdGF3YWl0IHRoaXMuX2NvbXBpbGVNYXRlcmlhbCggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhlIFBNUkVNR2VuZXJhdG9yJ3MgaW50ZXJuYWwgbWVtb3J5LiBOb3RlIHRoYXQgUE1SRU1HZW5lcmF0b3IgaXMgYSBzdGF0aWMgY2xhc3MsXG5cdCAqIHNvIHlvdSBzaG91bGQgbm90IG5lZWQgbW9yZSB0aGFuIG9uZSBQTVJFTUdlbmVyYXRvciBvYmplY3QuIElmIHlvdSBkbywgY2FsbGluZyBkaXNwb3NlKCkgb25cblx0ICogb25lIG9mIHRoZW0gd2lsbCBjYXVzZSBhbnkgb3RoZXJzIHRvIGFsc28gYmVjb21lIHVudXNhYmxlLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuX2Rpc3Bvc2UoKTtcblxuXHRcdGlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5fY3ViZW1hcE1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHRpZiAoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgIT09IG51bGwgKSB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHRpZiAoIHRoaXMuX2JhY2tncm91bmRCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2JhY2tncm91bmRCb3guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdFx0dGhpcy5fYmFja2dyb3VuZEJveC5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIHByaXZhdGUgaW50ZXJmYWNlXG5cblx0X3NldFNpemVGcm9tVGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGlmICggdGV4dHVyZS5tYXBwaW5nID09PSBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgfHwgdGV4dHVyZS5tYXBwaW5nID09PSBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdHRoaXMuX3NldFNpemUoIHRleHR1cmUuaW1hZ2UubGVuZ3RoID09PSAwID8gMTYgOiAoIHRleHR1cmUuaW1hZ2VbIDAgXS53aWR0aCB8fCB0ZXh0dXJlLmltYWdlWyAwIF0uaW1hZ2Uud2lkdGggKSApO1xuXG5cdFx0fSBlbHNlIHsgLy8gRXF1aXJlY3Rhbmd1bGFyXG5cblx0XHRcdHRoaXMuX3NldFNpemUoIHRleHR1cmUuaW1hZ2Uud2lkdGggLyA0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9zZXRTaXplKCBjdWJlU2l6ZSApIHtcblxuXHRcdHRoaXMuX2xvZE1heCA9IE1hdGguZmxvb3IoIE1hdGgubG9nMiggY3ViZVNpemUgKSApO1xuXHRcdHRoaXMuX2N1YmVTaXplID0gTWF0aC5wb3coIDIsIHRoaXMuX2xvZE1heCApO1xuXG5cdH1cblxuXHRfZGlzcG9zZSgpIHtcblxuXHRcdGlmICggdGhpcy5fYmx1ck1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5fYmx1ck1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHRcdGlmICggdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgIT09IG51bGwgKSB0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldC5kaXNwb3NlKCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLl9sb2RQbGFuZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLl9sb2RQbGFuZXNbIGkgXS5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9jbGVhbnVwKCBvdXRwdXRUYXJnZXQgKSB7XG5cblx0XHR0aGlzLl9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIF9vbGRUYXJnZXQsIF9vbGRBY3RpdmVDdWJlRmFjZSwgX29sZEFjdGl2ZU1pcG1hcExldmVsICk7XG5cdFx0b3V0cHV0VGFyZ2V0LnNjaXNzb3JUZXN0ID0gZmFsc2U7XG5cdFx0X3NldFZpZXdwb3J0KCBvdXRwdXRUYXJnZXQsIDAsIDAsIG91dHB1dFRhcmdldC53aWR0aCwgb3V0cHV0VGFyZ2V0LmhlaWdodCApO1xuXG5cdH1cblxuXHRfZnJvbVRleHR1cmUoIHRleHR1cmUsIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHRoaXMuX3NldFNpemVGcm9tVGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdFx0X29sZFRhcmdldCA9IHRoaXMuX3JlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXHRcdF9vbGRBY3RpdmVDdWJlRmFjZSA9IHRoaXMuX3JlbmRlcmVyLmdldEFjdGl2ZUN1YmVGYWNlKCk7XG5cdFx0X29sZEFjdGl2ZU1pcG1hcExldmVsID0gdGhpcy5fcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTtcblxuXHRcdGNvbnN0IGN1YmVVVlJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldCB8fCB0aGlzLl9hbGxvY2F0ZVRhcmdldHMoKTtcblx0XHR0aGlzLl90ZXh0dXJlVG9DdWJlVVYoIHRleHR1cmUsIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXHRcdHRoaXMuX2FwcGx5UE1SRU0oIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXHRcdHRoaXMuX2NsZWFudXAoIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXG5cdFx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxuXHR9XG5cblx0X2FsbG9jYXRlVGFyZ2V0cygpIHtcblxuXHRcdGNvbnN0IHdpZHRoID0gMyAqIE1hdGgubWF4KCB0aGlzLl9jdWJlU2l6ZSwgMTYgKiA3ICk7XG5cdFx0Y29uc3QgaGVpZ2h0ID0gNCAqIHRoaXMuX2N1YmVTaXplO1xuXG5cdFx0Y29uc3QgcGFyYW1zID0ge1xuXHRcdFx0bWFnRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXG5cdFx0XHRtaW5GaWx0ZXI6IExpbmVhckZpbHRlcixcblx0XHRcdGdlbmVyYXRlTWlwbWFwczogZmFsc2UsXG5cdFx0XHR0eXBlOiBIYWxmRmxvYXRUeXBlLFxuXHRcdFx0Zm9ybWF0OiBSR0JBRm9ybWF0LFxuXHRcdFx0Y29sb3JTcGFjZTogTGluZWFyU1JHQkNvbG9yU3BhY2UsXG5cdFx0XHQvL2RlcHRoQnVmZmVyOiBmYWxzZVxuXHRcdH07XG5cblx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSBfY3JlYXRlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBwYXJhbXMgKTtcblxuXHRcdGlmICggdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0LmhlaWdodCAhPT0gaGVpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX2Rpc3Bvc2UoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCA9IF9jcmVhdGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApO1xuXG5cdFx0XHRjb25zdCB7IF9sb2RNYXggfSA9IHRoaXM7XG5cdFx0XHQoIHsgc2l6ZUxvZHM6IHRoaXMuX3NpemVMb2RzLCBsb2RQbGFuZXM6IHRoaXMuX2xvZFBsYW5lcywgc2lnbWFzOiB0aGlzLl9zaWdtYXMsIGxvZE1lc2hlczogdGhpcy5fbG9kTWVzaGVzIH0gPSBfY3JlYXRlUGxhbmVzKCBfbG9kTWF4ICkgKTtcblxuXHRcdFx0dGhpcy5fYmx1ck1hdGVyaWFsID0gX2dldEJsdXJTaGFkZXIoIF9sb2RNYXgsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjdWJlVVZSZW5kZXJUYXJnZXQ7XG5cblx0fVxuXG5cdGFzeW5jIF9jb21waWxlTWF0ZXJpYWwoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgdG1wTWVzaCA9IG5ldyBNZXNoKCB0aGlzLl9sb2RQbGFuZXNbIDAgXSwgbWF0ZXJpYWwgKTtcblx0XHRhd2FpdCB0aGlzLl9yZW5kZXJlci5jb21waWxlKCB0bXBNZXNoLCBfZmxhdENhbWVyYSApO1xuXG5cdH1cblxuXHRfc2NlbmVUb0N1YmVVViggc2NlbmUsIG5lYXIsIGZhciwgY3ViZVVWUmVuZGVyVGFyZ2V0LCBwb3NpdGlvbiApIHtcblxuXHRcdGNvbnN0IGN1YmVDYW1lcmEgPSBfY3ViZUNhbWVyYTtcblx0XHRjdWJlQ2FtZXJhLm5lYXIgPSBuZWFyO1xuXHRcdGN1YmVDYW1lcmEuZmFyID0gZmFyO1xuXG5cdFx0Ly8gcHgsIHB5LCBweiwgbngsIG55LCBuelxuXHRcdGNvbnN0IHVwU2lnbiA9IFsgMSwgMSwgMSwgMSwgLSAxLCAxIF07XG5cdFx0Y29uc3QgZm9yd2FyZFNpZ24gPSBbIDEsIC0gMSwgMSwgLSAxLCAxLCAtIDEgXTtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG5cblx0XHRjb25zdCBvcmlnaW5hbEF1dG9DbGVhciA9IHJlbmRlcmVyLmF1dG9DbGVhcjtcblxuXHRcdHJlbmRlcmVyLmdldENsZWFyQ29sb3IoIF9jbGVhckNvbG9yICk7XG5cblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTtcblxuXHRcdGxldCBiYWNrZ3JvdW5kQm94ID0gdGhpcy5fYmFja2dyb3VuZEJveDtcblxuXHRcdGlmICggYmFja2dyb3VuZEJveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgYmFja2dyb3VuZE1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7XG5cdFx0XHRcdG5hbWU6ICdQTVJFTS5CYWNrZ3JvdW5kJyxcblx0XHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0XHRkZXB0aFRlc3Q6IGZhbHNlXG5cdFx0XHR9ICk7XG5cblx0XHRcdGJhY2tncm91bmRCb3ggPSBuZXcgTWVzaCggbmV3IEJveEdlb21ldHJ5KCksIGJhY2tncm91bmRNYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdFx0bGV0IHVzZVNvbGlkQ29sb3IgPSBmYWxzZTtcblx0XHRjb25zdCBiYWNrZ3JvdW5kID0gc2NlbmUuYmFja2dyb3VuZDtcblxuXHRcdGlmICggYmFja2dyb3VuZCApIHtcblxuXHRcdFx0aWYgKCBiYWNrZ3JvdW5kLmlzQ29sb3IgKSB7XG5cblx0XHRcdFx0YmFja2dyb3VuZEJveC5tYXRlcmlhbC5jb2xvci5jb3B5KCBiYWNrZ3JvdW5kICk7XG5cdFx0XHRcdHNjZW5lLmJhY2tncm91bmQgPSBudWxsO1xuXHRcdFx0XHR1c2VTb2xpZENvbG9yID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YmFja2dyb3VuZEJveC5tYXRlcmlhbC5jb2xvci5jb3B5KCBfY2xlYXJDb2xvciApO1xuXHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXG5cdFx0cmVuZGVyZXIuY2xlYXIoKTtcblxuXHRcdGlmICggdXNlU29saWRDb2xvciApIHtcblxuXHRcdFx0cmVuZGVyZXIucmVuZGVyKCBiYWNrZ3JvdW5kQm94LCBjdWJlQ2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjb2wgPSBpICUgMztcblxuXHRcdFx0aWYgKCBjb2wgPT09IDAgKSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBwb3NpdGlvbi54ICsgZm9yd2FyZFNpZ25bIGkgXSwgcG9zaXRpb24ueSwgcG9zaXRpb24ueiApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjb2wgPT09IDEgKSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIDAsIHVwU2lnblsgaSBdICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55ICsgZm9yd2FyZFNpZ25bIGkgXSwgcG9zaXRpb24ueiApO1xuXG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICsgZm9yd2FyZFNpZ25bIGkgXSApO1xuXG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2l6ZSA9IHRoaXMuX2N1YmVTaXplO1xuXG5cdFx0XHRfc2V0Vmlld3BvcnQoIGN1YmVVVlJlbmRlclRhcmdldCwgY29sICogc2l6ZSwgaSA+IDIgPyBzaXplIDogMCwgc2l6ZSwgc2l6ZSApO1xuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjdWJlQ2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBvcmlnaW5hbEF1dG9DbGVhcjtcblx0XHRzY2VuZS5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblxuXHR9XG5cblx0X3RleHR1cmVUb0N1YmVVViggdGV4dHVyZSwgY3ViZVVWUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblxuXHRcdGNvbnN0IGlzQ3ViZVRleHR1cmUgPSAoIHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIHx8IHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICk7XG5cblx0XHRpZiAoIGlzQ3ViZVRleHR1cmUgKSB7XG5cblx0XHRcdGlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9IF9nZXRDdWJlbWFwTWF0ZXJpYWwoIHRleHR1cmUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgPSBfZ2V0RXF1aXJlY3RNYXRlcmlhbCggdGV4dHVyZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IGlzQ3ViZVRleHR1cmUgPyB0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgOiB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsO1xuXHRcdG1hdGVyaWFsLmZyYWdtZW50Tm9kZS52YWx1ZSA9IHRleHR1cmU7XG5cblx0XHRjb25zdCBtZXNoID0gdGhpcy5fbG9kTWVzaGVzWyAwIF07XG5cdFx0bWVzaC5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG5cdFx0Y29uc3Qgc2l6ZSA9IHRoaXMuX2N1YmVTaXplO1xuXG5cdFx0X3NldFZpZXdwb3J0KCBjdWJlVVZSZW5kZXJUYXJnZXQsIDAsIDAsIDMgKiBzaXplLCAyICogc2l6ZSApO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIG1lc2gsIF9mbGF0Q2FtZXJhICk7XG5cblx0fVxuXG5cdF9hcHBseVBNUkVNKCBjdWJlVVZSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuXHRcdGNvbnN0IGF1dG9DbGVhciA9IHJlbmRlcmVyLmF1dG9DbGVhcjtcblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTtcblx0XHRjb25zdCBuID0gdGhpcy5fbG9kUGxhbmVzLmxlbmd0aDtcblxuXHRcdGZvciAoIGxldCBpID0gMTsgaSA8IG47IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHNpZ21hID0gTWF0aC5zcXJ0KCB0aGlzLl9zaWdtYXNbIGkgXSAqIHRoaXMuX3NpZ21hc1sgaSBdIC0gdGhpcy5fc2lnbWFzWyBpIC0gMSBdICogdGhpcy5fc2lnbWFzWyBpIC0gMSBdICk7XG5cblx0XHRcdGNvbnN0IHBvbGVBeGlzID0gX2F4aXNEaXJlY3Rpb25zWyAoIG4gLSBpIC0gMSApICUgX2F4aXNEaXJlY3Rpb25zLmxlbmd0aCBdO1xuXG5cdFx0XHR0aGlzLl9ibHVyKCBjdWJlVVZSZW5kZXJUYXJnZXQsIGkgLSAxLCBpLCBzaWdtYSwgcG9sZUF4aXMgKTtcblxuXHRcdH1cblxuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IGF1dG9DbGVhcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgaXMgYSB0d28tcGFzcyBHYXVzc2lhbiBibHVyIGZvciBhIGN1YmVtYXAuIE5vcm1hbGx5IHRoaXMgaXMgZG9uZVxuXHQgKiB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHksIGJ1dCB0aGlzIGJyZWFrcyBkb3duIG9uIGEgY3ViZS4gSGVyZSB3ZSBhcHBseVxuXHQgKiB0aGUgYmx1ciBsYXRpdHVkaW5hbGx5IChhcm91bmQgdGhlIHBvbGVzKSwgYW5kIHRoZW4gbG9uZ2l0dWRpbmFsbHkgKHRvd2FyZHNcblx0ICogdGhlIHBvbGVzKSB0byBhcHByb3hpbWF0ZSB0aGUgb3J0aG9nb25hbGx5LXNlcGFyYWJsZSBibHVyLiBJdCBpcyBsZWFzdFxuXHQgKiBhY2N1cmF0ZSBhdCB0aGUgcG9sZXMsIGJ1dCBzdGlsbCBkb2VzIGEgZGVjZW50IGpvYi5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtSZW5kZXJUYXJnZXR9IGN1YmVVVlJlbmRlclRhcmdldCAtIFRoZSBjdWJlbWFwIHJlbmRlciB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsb2RJbiAtIFRoZSBpbnB1dCBsZXZlbC1vZi1kZXRhaWwuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsb2RPdXQgLSBUaGUgb3V0cHV0IGxldmVsLW9mLWRldGFpbC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHNpZ21hIC0gVGhlIGJsdXIgcmFkaXVzIGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW3BvbGVBeGlzXSAtIFRoZSBwb2xlIGF4aXMuXG5cdCAqL1xuXHRfYmx1ciggY3ViZVVWUmVuZGVyVGFyZ2V0LCBsb2RJbiwgbG9kT3V0LCBzaWdtYSwgcG9sZUF4aXMgKSB7XG5cblx0XHRjb25zdCBwaW5nUG9uZ1JlbmRlclRhcmdldCA9IHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0O1xuXG5cdFx0dGhpcy5faGFsZkJsdXIoXG5cdFx0XHRjdWJlVVZSZW5kZXJUYXJnZXQsXG5cdFx0XHRwaW5nUG9uZ1JlbmRlclRhcmdldCxcblx0XHRcdGxvZEluLFxuXHRcdFx0bG9kT3V0LFxuXHRcdFx0c2lnbWEsXG5cdFx0XHQnbGF0aXR1ZGluYWwnLFxuXHRcdFx0cG9sZUF4aXMgKTtcblxuXHRcdHRoaXMuX2hhbGZCbHVyKFxuXHRcdFx0cGluZ1BvbmdSZW5kZXJUYXJnZXQsXG5cdFx0XHRjdWJlVVZSZW5kZXJUYXJnZXQsXG5cdFx0XHRsb2RPdXQsXG5cdFx0XHRsb2RPdXQsXG5cdFx0XHRzaWdtYSxcblx0XHRcdCdsb25naXR1ZGluYWwnLFxuXHRcdFx0cG9sZUF4aXMgKTtcblxuXHR9XG5cblx0X2hhbGZCbHVyKCB0YXJnZXRJbiwgdGFyZ2V0T3V0LCBsb2RJbiwgbG9kT3V0LCBzaWdtYVJhZGlhbnMsIGRpcmVjdGlvbiwgcG9sZUF4aXMgKSB7XG5cblx0XHRjb25zdCByZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuXHRcdGNvbnN0IGJsdXJNYXRlcmlhbCA9IHRoaXMuX2JsdXJNYXRlcmlhbDtcblxuXHRcdGlmICggZGlyZWN0aW9uICE9PSAnbGF0aXR1ZGluYWwnICYmIGRpcmVjdGlvbiAhPT0gJ2xvbmdpdHVkaW5hbCcgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdibHVyIGRpcmVjdGlvbiBtdXN0IGJlIGVpdGhlciBsYXRpdHVkaW5hbCBvciBsb25naXR1ZGluYWwhJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gTnVtYmVyIG9mIHN0YW5kYXJkIGRldmlhdGlvbnMgYXQgd2hpY2ggdG8gY3V0IG9mZiB0aGUgZGlzY3JldGUgYXBwcm94aW1hdGlvbi5cblx0XHRjb25zdCBTVEFOREFSRF9ERVZJQVRJT05TID0gMztcblxuXHRcdGNvbnN0IGJsdXJNZXNoID0gdGhpcy5fbG9kTWVzaGVzWyBsb2RPdXQgXTtcblx0XHRibHVyTWVzaC5tYXRlcmlhbCA9IGJsdXJNYXRlcmlhbDtcblxuXHRcdGNvbnN0IGJsdXJVbmlmb3JtcyA9IF91bmlmb3Jtc01hcC5nZXQoIGJsdXJNYXRlcmlhbCApO1xuXG5cdFx0Y29uc3QgcGl4ZWxzID0gdGhpcy5fc2l6ZUxvZHNbIGxvZEluIF0gLSAxO1xuXHRcdGNvbnN0IHJhZGlhbnNQZXJQaXhlbCA9IGlzRmluaXRlKCBzaWdtYVJhZGlhbnMgKSA/IE1hdGguUEkgLyAoIDIgKiBwaXhlbHMgKSA6IDIgKiBNYXRoLlBJIC8gKCAyICogTUFYX1NBTVBMRVMgLSAxICk7XG5cdFx0Y29uc3Qgc2lnbWFQaXhlbHMgPSBzaWdtYVJhZGlhbnMgLyByYWRpYW5zUGVyUGl4ZWw7XG5cdFx0Y29uc3Qgc2FtcGxlcyA9IGlzRmluaXRlKCBzaWdtYVJhZGlhbnMgKSA/IDEgKyBNYXRoLmZsb29yKCBTVEFOREFSRF9ERVZJQVRJT05TICogc2lnbWFQaXhlbHMgKSA6IE1BWF9TQU1QTEVTO1xuXG5cdFx0aWYgKCBzYW1wbGVzID4gTUFYX1NBTVBMRVMgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggYHNpZ21hUmFkaWFucywgJHtcblx0XHRcdFx0c2lnbWFSYWRpYW5zfSwgaXMgdG9vIGxhcmdlIGFuZCB3aWxsIGNsaXAsIGFzIGl0IHJlcXVlc3RlZCAke1xuXHRcdFx0XHRzYW1wbGVzfSBzYW1wbGVzIHdoZW4gdGhlIG1heGltdW0gaXMgc2V0IHRvICR7TUFYX1NBTVBMRVN9YCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgd2VpZ2h0cyA9IFtdO1xuXHRcdGxldCBzdW0gPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgTUFYX1NBTVBMRVM7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IHggPSBpIC8gc2lnbWFQaXhlbHM7XG5cdFx0XHRjb25zdCB3ZWlnaHQgPSBNYXRoLmV4cCggLSB4ICogeCAvIDIgKTtcblx0XHRcdHdlaWdodHMucHVzaCggd2VpZ2h0ICk7XG5cblx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRzdW0gKz0gd2VpZ2h0O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBpIDwgc2FtcGxlcyApIHtcblxuXHRcdFx0XHRzdW0gKz0gMiAqIHdlaWdodDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgd2VpZ2h0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHdlaWdodHNbIGkgXSA9IHdlaWdodHNbIGkgXSAvIHN1bTtcblxuXHRcdH1cblxuXHRcdHRhcmdldEluLnRleHR1cmUuZnJhbWUgPSAoIHRhcmdldEluLnRleHR1cmUuZnJhbWUgfHwgMCApICsgMTtcblxuXHRcdGJsdXJVbmlmb3Jtcy5lbnZNYXAudmFsdWUgPSB0YXJnZXRJbi50ZXh0dXJlO1xuXHRcdGJsdXJVbmlmb3Jtcy5zYW1wbGVzLnZhbHVlID0gc2FtcGxlcztcblx0XHRibHVyVW5pZm9ybXMud2VpZ2h0cy5hcnJheSA9IHdlaWdodHM7XG5cdFx0Ymx1clVuaWZvcm1zLmxhdGl0dWRpbmFsLnZhbHVlID0gZGlyZWN0aW9uID09PSAnbGF0aXR1ZGluYWwnID8gMSA6IDA7XG5cblx0XHRpZiAoIHBvbGVBeGlzICkge1xuXG5cdFx0XHRibHVyVW5pZm9ybXMucG9sZUF4aXMudmFsdWUgPSBwb2xlQXhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IHsgX2xvZE1heCB9ID0gdGhpcztcblx0XHRibHVyVW5pZm9ybXMuZFRoZXRhLnZhbHVlID0gcmFkaWFuc1BlclBpeGVsO1xuXHRcdGJsdXJVbmlmb3Jtcy5taXBJbnQudmFsdWUgPSBfbG9kTWF4IC0gbG9kSW47XG5cblx0XHRjb25zdCBvdXRwdXRTaXplID0gdGhpcy5fc2l6ZUxvZHNbIGxvZE91dCBdO1xuXHRcdGNvbnN0IHggPSAzICogb3V0cHV0U2l6ZSAqICggbG9kT3V0ID4gX2xvZE1heCAtIExPRF9NSU4gPyBsb2RPdXQgLSBfbG9kTWF4ICsgTE9EX01JTiA6IDAgKTtcblx0XHRjb25zdCB5ID0gNCAqICggdGhpcy5fY3ViZVNpemUgLSBvdXRwdXRTaXplICk7XG5cblx0XHRfc2V0Vmlld3BvcnQoIHRhcmdldE91dCwgeCwgeSwgMyAqIG91dHB1dFNpemUsIDIgKiBvdXRwdXRTaXplICk7XG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0YXJnZXRPdXQgKTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIGJsdXJNZXNoLCBfZmxhdENhbWVyYSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBfY3JlYXRlUGxhbmVzKCBsb2RNYXggKSB7XG5cblx0Y29uc3QgbG9kUGxhbmVzID0gW107XG5cdGNvbnN0IHNpemVMb2RzID0gW107XG5cdGNvbnN0IHNpZ21hcyA9IFtdO1xuXHRjb25zdCBsb2RNZXNoZXMgPSBbXTtcblxuXHRsZXQgbG9kID0gbG9kTWF4O1xuXG5cdGNvbnN0IHRvdGFsTG9kcyA9IGxvZE1heCAtIExPRF9NSU4gKyAxICsgRVhUUkFfTE9EX1NJR01BLmxlbmd0aDtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0b3RhbExvZHM7IGkgKysgKSB7XG5cblx0XHRjb25zdCBzaXplTG9kID0gTWF0aC5wb3coIDIsIGxvZCApO1xuXHRcdHNpemVMb2RzLnB1c2goIHNpemVMb2QgKTtcblx0XHRsZXQgc2lnbWEgPSAxLjAgLyBzaXplTG9kO1xuXG5cdFx0aWYgKCBpID4gbG9kTWF4IC0gTE9EX01JTiApIHtcblxuXHRcdFx0c2lnbWEgPSBFWFRSQV9MT0RfU0lHTUFbIGkgLSBsb2RNYXggKyBMT0RfTUlOIC0gMSBdO1xuXG5cdFx0fSBlbHNlIGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0c2lnbWEgPSAwO1xuXG5cdFx0fVxuXG5cdFx0c2lnbWFzLnB1c2goIHNpZ21hICk7XG5cblx0XHRjb25zdCB0ZXhlbFNpemUgPSAxLjAgLyAoIHNpemVMb2QgLSAyICk7XG5cdFx0Y29uc3QgbWluID0gLSB0ZXhlbFNpemU7XG5cdFx0Y29uc3QgbWF4ID0gMSArIHRleGVsU2l6ZTtcblx0XHRjb25zdCB1djEgPSBbIG1pbiwgbWluLCBtYXgsIG1pbiwgbWF4LCBtYXgsIG1pbiwgbWluLCBtYXgsIG1heCwgbWluLCBtYXggXTtcblxuXHRcdGNvbnN0IGN1YmVGYWNlcyA9IDY7XG5cdFx0Y29uc3QgdmVydGljZXMgPSA2O1xuXHRcdGNvbnN0IHBvc2l0aW9uU2l6ZSA9IDM7XG5cdFx0Y29uc3QgdXZTaXplID0gMjtcblx0XHRjb25zdCBmYWNlSW5kZXhTaXplID0gMTtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gbmV3IEZsb2F0MzJBcnJheSggcG9zaXRpb25TaXplICogdmVydGljZXMgKiBjdWJlRmFjZXMgKTtcblx0XHRjb25zdCB1diA9IG5ldyBGbG9hdDMyQXJyYXkoIHV2U2l6ZSAqIHZlcnRpY2VzICogY3ViZUZhY2VzICk7XG5cdFx0Y29uc3QgZmFjZUluZGV4ID0gbmV3IEZsb2F0MzJBcnJheSggZmFjZUluZGV4U2l6ZSAqIHZlcnRpY2VzICogY3ViZUZhY2VzICk7XG5cblx0XHRmb3IgKCBsZXQgZmFjZSA9IDA7IGZhY2UgPCBjdWJlRmFjZXM7IGZhY2UgKysgKSB7XG5cblx0XHRcdGNvbnN0IHggPSAoIGZhY2UgJSAzICkgKiAyIC8gMyAtIDE7XG5cdFx0XHRjb25zdCB5ID0gZmFjZSA+IDIgPyAwIDogLSAxO1xuXHRcdFx0Y29uc3QgY29vcmRpbmF0ZXMgPSBbXG5cdFx0XHRcdHgsIHksIDAsXG5cdFx0XHRcdHggKyAyIC8gMywgeSwgMCxcblx0XHRcdFx0eCArIDIgLyAzLCB5ICsgMSwgMCxcblx0XHRcdFx0eCwgeSwgMCxcblx0XHRcdFx0eCArIDIgLyAzLCB5ICsgMSwgMCxcblx0XHRcdFx0eCwgeSArIDEsIDBcblx0XHRcdF07XG5cblx0XHRcdGNvbnN0IGZhY2VJZHggPSBfZmFjZUxpYlsgZmFjZSBdO1xuXHRcdFx0cG9zaXRpb24uc2V0KCBjb29yZGluYXRlcywgcG9zaXRpb25TaXplICogdmVydGljZXMgKiBmYWNlSWR4ICk7XG5cdFx0XHR1di5zZXQoIHV2MSwgdXZTaXplICogdmVydGljZXMgKiBmYWNlSWR4ICk7XG5cdFx0XHRjb25zdCBmaWxsID0gWyBmYWNlSWR4LCBmYWNlSWR4LCBmYWNlSWR4LCBmYWNlSWR4LCBmYWNlSWR4LCBmYWNlSWR4IF07XG5cdFx0XHRmYWNlSW5kZXguc2V0KCBmaWxsLCBmYWNlSW5kZXhTaXplICogdmVydGljZXMgKiBmYWNlSWR4ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwbGFuZXMgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgcG9zaXRpb25TaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1diwgdXZTaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAnZmFjZUluZGV4JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggZmFjZUluZGV4LCBmYWNlSW5kZXhTaXplICkgKTtcblx0XHRsb2RQbGFuZXMucHVzaCggcGxhbmVzICk7XG5cdFx0bG9kTWVzaGVzLnB1c2goIG5ldyBNZXNoKCBwbGFuZXMsIG51bGwgKSApO1xuXG5cdFx0aWYgKCBsb2QgPiBMT0RfTUlOICkge1xuXG5cdFx0XHRsb2QgLS07XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7IGxvZFBsYW5lcywgc2l6ZUxvZHMsIHNpZ21hcywgbG9kTWVzaGVzIH07XG5cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgcGFyYW1zICkge1xuXG5cdGNvbnN0IGN1YmVVVlJlbmRlclRhcmdldCA9IG5ldyBSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApO1xuXHRjdWJlVVZSZW5kZXJUYXJnZXQudGV4dHVyZS5tYXBwaW5nID0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc7XG5cdGN1YmVVVlJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSAnUE1SRU0uY3ViZVV2Jztcblx0Y3ViZVVWUmVuZGVyVGFyZ2V0LnRleHR1cmUuaXNQTVJFTVRleHR1cmUgPSB0cnVlO1xuXHRjdWJlVVZSZW5kZXJUYXJnZXQuc2Npc3NvclRlc3QgPSB0cnVlO1xuXHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG59XG5cbmZ1bmN0aW9uIF9zZXRWaWV3cG9ydCggdGFyZ2V0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdHRhcmdldC52aWV3cG9ydC5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblx0dGFyZ2V0LnNjaXNzb3Iuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cbn1cblxuZnVuY3Rpb24gX2dldE1hdGVyaWFsKCB0eXBlICkge1xuXG5cdGNvbnN0IG1hdGVyaWFsID0gbmV3IE5vZGVNYXRlcmlhbCgpO1xuXHRtYXRlcmlhbC5kZXB0aFRlc3QgPSBmYWxzZTtcblx0bWF0ZXJpYWwuZGVwdGhXcml0ZSA9IGZhbHNlO1xuXHRtYXRlcmlhbC5ibGVuZGluZyA9IE5vQmxlbmRpbmc7XG5cdG1hdGVyaWFsLm5hbWUgPSBgUE1SRU1fJHsgdHlwZSB9YDtcblxuXHRyZXR1cm4gbWF0ZXJpYWw7XG5cbn1cblxuZnVuY3Rpb24gX2dldEJsdXJTaGFkZXIoIGxvZE1heCwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRjb25zdCB3ZWlnaHRzID0gdW5pZm9ybUFycmF5KCBuZXcgQXJyYXkoIE1BWF9TQU1QTEVTICkuZmlsbCggMCApICk7XG5cdGNvbnN0IHBvbGVBeGlzID0gdW5pZm9ybSggbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSApO1xuXHRjb25zdCBkVGhldGEgPSB1bmlmb3JtKCAwICk7XG5cdGNvbnN0IG4gPSBmbG9hdCggTUFYX1NBTVBMRVMgKTtcblx0Y29uc3QgbGF0aXR1ZGluYWwgPSB1bmlmb3JtKCAwICk7IC8vIGZhbHNlLCBib29sXG5cdGNvbnN0IHNhbXBsZXMgPSB1bmlmb3JtKCAxICk7IC8vIGludFxuXHRjb25zdCBlbnZNYXAgPSB0ZXh0dXJlKCBudWxsICk7XG5cdGNvbnN0IG1pcEludCA9IHVuaWZvcm0oIDAgKTsgLy8gaW50XG5cdGNvbnN0IENVQkVVVl9URVhFTF9XSURUSCA9IGZsb2F0KCAxIC8gd2lkdGggKTtcblx0Y29uc3QgQ1VCRVVWX1RFWEVMX0hFSUdIVCA9IGZsb2F0KCAxIC8gaGVpZ2h0ICk7XG5cdGNvbnN0IENVQkVVVl9NQVhfTUlQID0gZmxvYXQoIGxvZE1heCApO1xuXG5cdGNvbnN0IG1hdGVyaWFsVW5pZm9ybXMgPSB7XG5cdFx0bixcblx0XHRsYXRpdHVkaW5hbCxcblx0XHR3ZWlnaHRzLFxuXHRcdHBvbGVBeGlzLFxuXHRcdG91dHB1dERpcmVjdGlvbjogX291dHB1dERpcmVjdGlvbixcblx0XHRkVGhldGEsXG5cdFx0c2FtcGxlcyxcblx0XHRlbnZNYXAsXG5cdFx0bWlwSW50LFxuXHRcdENVQkVVVl9URVhFTF9XSURUSCxcblx0XHRDVUJFVVZfVEVYRUxfSEVJR0hULFxuXHRcdENVQkVVVl9NQVhfTUlQXG5cdH07XG5cblx0Y29uc3QgbWF0ZXJpYWwgPSBfZ2V0TWF0ZXJpYWwoICdibHVyJyApO1xuXHRtYXRlcmlhbC5mcmFnbWVudE5vZGUgPSBibHVyKCB7IC4uLm1hdGVyaWFsVW5pZm9ybXMsIGxhdGl0dWRpbmFsOiBsYXRpdHVkaW5hbC5lcXVhbCggMSApIH0gKTtcblxuXHRfdW5pZm9ybXNNYXAuc2V0KCBtYXRlcmlhbCwgbWF0ZXJpYWxVbmlmb3JtcyApO1xuXG5cdHJldHVybiBtYXRlcmlhbDtcblxufVxuXG5mdW5jdGlvbiBfZ2V0Q3ViZW1hcE1hdGVyaWFsKCBlbnZUZXh0dXJlICkge1xuXG5cdGNvbnN0IG1hdGVyaWFsID0gX2dldE1hdGVyaWFsKCAnY3ViZW1hcCcgKTtcblx0bWF0ZXJpYWwuZnJhZ21lbnROb2RlID0gY3ViZVRleHR1cmUoIGVudlRleHR1cmUsIF9vdXRwdXREaXJlY3Rpb24gKTtcblxuXHRyZXR1cm4gbWF0ZXJpYWw7XG5cbn1cblxuZnVuY3Rpb24gX2dldEVxdWlyZWN0TWF0ZXJpYWwoIGVudlRleHR1cmUgKSB7XG5cblx0Y29uc3QgbWF0ZXJpYWwgPSBfZ2V0TWF0ZXJpYWwoICdlcXVpcmVjdCcgKTtcblx0bWF0ZXJpYWwuZnJhZ21lbnROb2RlID0gdGV4dHVyZSggZW52VGV4dHVyZSwgZXF1aXJlY3RVViggX291dHB1dERpcmVjdGlvbiApLCAwICk7XG5cblx0cmV0dXJuIG1hdGVyaWFsO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBNUkVNR2VuZXJhdG9yO1xuIiwiaW1wb3J0IFRlbXBOb2RlIGZyb20gJy4uL2NvcmUvVGVtcE5vZGUuanMnO1xuaW1wb3J0IHsgdGV4dHVyZSB9IGZyb20gJy4uL2FjY2Vzc29ycy9UZXh0dXJlTm9kZS5qcyc7XG5pbXBvcnQgeyB0ZXh0dXJlQ3ViZVVWIH0gZnJvbSAnLi9QTVJFTVV0aWxzLmpzJztcbmltcG9ydCB7IHVuaWZvcm0gfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Ob2RlLmpzJztcbmltcG9ydCB7IE5vZGVVcGRhdGVUeXBlIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgbm9kZVByb3h5LCB2ZWMzIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vLi4vdGV4dHVyZXMvVGV4dHVyZS5qcyc7XG5pbXBvcnQgUE1SRU1HZW5lcmF0b3IgZnJvbSAnLi4vLi4vcmVuZGVyZXJzL2NvbW1vbi9leHRyYXMvUE1SRU1HZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgbWF0ZXJpYWxFbnZSb3RhdGlvbiB9IGZyb20gJy4uL2FjY2Vzc29ycy9NYXRlcmlhbFByb3BlcnRpZXMuanMnO1xuXG5jb25zdCBfY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEdlbmVyYXRlcyB0aGUgY3ViZVVWIHNpemUgYmFzZWQgb24gdGhlIGdpdmVuIGltYWdlIGhlaWdodC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGltYWdlSGVpZ2h0IC0gVGhlIGltYWdlIGhlaWdodC5cbiAqIEByZXR1cm4ge3t0ZXhlbFdpZHRoOiBudW1iZXIsdGV4ZWxIZWlnaHQ6IG51bWJlciwgbWF4TWlwOiBudW1iZXJ9fSBUaGUgcmVzdWx0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gX2dlbmVyYXRlQ3ViZVVWU2l6ZSggaW1hZ2VIZWlnaHQgKSB7XG5cblx0Y29uc3QgbWF4TWlwID0gTWF0aC5sb2cyKCBpbWFnZUhlaWdodCApIC0gMjtcblxuXHRjb25zdCB0ZXhlbEhlaWdodCA9IDEuMCAvIGltYWdlSGVpZ2h0O1xuXG5cdGNvbnN0IHRleGVsV2lkdGggPSAxLjAgLyAoIDMgKiBNYXRoLm1heCggTWF0aC5wb3coIDIsIG1heE1pcCApLCA3ICogMTYgKSApO1xuXG5cdHJldHVybiB7IHRleGVsV2lkdGgsIHRleGVsSGVpZ2h0LCBtYXhNaXAgfTtcblxufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIFBNUkVNIGZyb20gdGhlIGdpdmVuIHRleHR1cmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSB0aGUgUE1SRU0gZm9yLlxuICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG4gKiBAcGFyYW0ge1BNUkVNR2VuZXJhdG9yfSBnZW5lcmF0b3IgLSBUaGUgUE1SRU0gZ2VuZXJhdG9yLlxuICogQHJldHVybiB7P1RleHR1cmV9IFRoZSBQTVJFTS5cbiAqL1xuZnVuY3Rpb24gX2dldFBNUkVNRnJvbVRleHR1cmUoIHRleHR1cmUsIHJlbmRlcmVyLCBnZW5lcmF0b3IgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSBfZ2V0Q2FjaGUoIHJlbmRlcmVyICk7XG5cblx0bGV0IGNhY2hlVGV4dHVyZSA9IGNhY2hlLmdldCggdGV4dHVyZSApO1xuXG5cdGNvbnN0IHBtcmVtVmVyc2lvbiA9IGNhY2hlVGV4dHVyZSAhPT0gdW5kZWZpbmVkID8gY2FjaGVUZXh0dXJlLnBtcmVtVmVyc2lvbiA6IC0gMTtcblxuXHRpZiAoIHBtcmVtVmVyc2lvbiAhPT0gdGV4dHVyZS5wbXJlbVZlcnNpb24gKSB7XG5cblx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNDdWJlVGV4dHVyZSApIHtcblxuXHRcdFx0aWYgKCBpc0N1YmVNYXBSZWFkeSggaW1hZ2UgKSApIHtcblxuXHRcdFx0XHRjYWNoZVRleHR1cmUgPSBnZW5lcmF0b3IuZnJvbUN1YmVtYXAoIHRleHR1cmUsIGNhY2hlVGV4dHVyZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggaXNFcXVpcmVjdGFuZ3VsYXJNYXBSZWFkeSggaW1hZ2UgKSApIHtcblxuXHRcdFx0XHRjYWNoZVRleHR1cmUgPSBnZW5lcmF0b3IuZnJvbUVxdWlyZWN0YW5ndWxhciggdGV4dHVyZSwgY2FjaGVUZXh0dXJlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNhY2hlVGV4dHVyZS5wbXJlbVZlcnNpb24gPSB0ZXh0dXJlLnBtcmVtVmVyc2lvbjtcblxuXHRcdGNhY2hlLnNldCggdGV4dHVyZSwgY2FjaGVUZXh0dXJlICk7XG5cblx0fVxuXG5cdHJldHVybiBjYWNoZVRleHR1cmUudGV4dHVyZTtcblxufVxuXG4vKipcbiAqIFJldHVybnMgYSBjYWNoZSB0aGF0IHN0b3JlcyBnZW5lcmF0ZWQgUE1SRU1zIGZvciB0aGUgcmVzcGVjdGl2ZSB0ZXh0dXJlcy5cbiAqIEEgY2FjaGUgbXVzdCBiZSBtYWludGFpbmVkIHBlciByZW5kZXJlciBzaW5jZSBQTVJFTXMgYXJlIHJlbmRlciB0YXJnZXQgdGV4dHVyZXNcbiAqIHdoaWNoIGNhbid0IGJlIHNoYXJlZCBhY3Jvc3MgcmVuZGVyIGNvbnRleHRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cbiAqIEByZXR1cm4ge1dlYWtNYXA8VGV4dHVyZSwgVGV4dHVyZT59IFRoZSBQTVJFTSBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gX2dldENhY2hlKCByZW5kZXJlciApIHtcblxuXHRsZXQgcmVuZGVyZXJDYWNoZSA9IF9jYWNoZS5nZXQoIHJlbmRlcmVyICk7XG5cblx0aWYgKCByZW5kZXJlckNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyZW5kZXJlckNhY2hlID0gbmV3IFdlYWtNYXAoKTtcblx0XHRfY2FjaGUuc2V0KCByZW5kZXJlciwgcmVuZGVyZXJDYWNoZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gcmVuZGVyZXJDYWNoZTtcblxufVxuXG4vKipcbiAqIFRoaXMgbm9kZSByZXByZXNlbnRzIGEgUE1SRU0gd2hpY2ggaXMgYSBzcGVjaWFsIHR5cGUgb2YgcHJlcHJvY2Vzc2VkXG4gKiBlbnZpcm9ubWVudCBtYXAgaW50ZW5kZWQgZm9yIFBCUiBtYXRlcmlhbHMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hTdGFuZGFyZE5vZGVNYXRlcmlhbCgpO1xuICogbWF0ZXJpYWwuZW52Tm9kZSA9IHBtcmVtVGV4dHVyZSggZW52TWFwICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgUE1SRU1Ob2RlIGV4dGVuZHMgVGVtcE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnUE1SRU1Ob2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZnVuY3Rpb24gb3ZlcmxvYWRpbmcgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB2YWx1ZSAtIFRoZSBpbnB1dCB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge05vZGU8dmVjMj59IFt1dk5vZGU9bnVsbF0gLSBUaGUgdXYgbm9kZS5cblx0ICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gW2xldmVsTm9kZT1udWxsXSAtIFRoZSBsZXZlbCBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHZhbHVlLCB1dk5vZGUgPSBudWxsLCBsZXZlbE5vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoICd2ZWMzJyApO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBpbnB1dCB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7VGV4dHVyZX1cblx0XHQgKi9cblx0XHR0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBnZW5lcmF0ZWQgUE1SRU0uXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtUZXh0dXJlIHwgbnVsbH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fcG1yZW0gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogIFRoZSB1diBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGU8dmVjMj59XG5cdFx0ICovXG5cdFx0dGhpcy51dk5vZGUgPSB1dk5vZGU7XG5cblx0XHQvKipcblx0XHQgKiAgVGhlIGxldmVsIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG5cdFx0ICovXG5cdFx0dGhpcy5sZXZlbE5vZGUgPSBsZXZlbE5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gYSBQTVJFTSBnZW5lcmF0b3IuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/UE1SRU1HZW5lcmF0b3J9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2dlbmVyYXRvciA9IG51bGw7XG5cblx0XHRjb25zdCBkZWZhdWx0VGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG5cdFx0ZGVmYXVsdFRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIG5vZGUgaG9sZGluZyB0aGUgZ2VuZXJhdGVkIFBNUkVNLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7VGV4dHVyZU5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5fdGV4dHVyZSA9IHRleHR1cmUoIGRlZmF1bHRUZXh0dXJlICk7XG5cblx0XHQvKipcblx0XHQgKiBBIHVuaWZvcm0gcmVwcmVzZW50aW5nIHRoZSBQTVJFTSdzIHdpZHRoLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGU8ZmxvYXQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX3dpZHRoID0gdW5pZm9ybSggMCApO1xuXG5cdFx0LyoqXG5cdFx0ICogQSB1bmlmb3JtIHJlcHJlc2VudGluZyB0aGUgUE1SRU0ncyBoZWlnaHQuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtVbmlmb3JtTm9kZTxmbG9hdD59XG5cdFx0ICovXG5cdFx0dGhpcy5faGVpZ2h0ID0gdW5pZm9ybSggMCApO1xuXG5cdFx0LyoqXG5cdFx0ICogQSB1bmlmb3JtIHJlcHJlc2VudGluZyB0aGUgUE1SRU0ncyBtYXggTWlwLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGU8ZmxvYXQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX21heE1pcCA9IHVuaWZvcm0oIDAgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBgdXBkYXRlQmVmb3JlVHlwZWAgaXMgc2V0IHRvIGBOb2RlVXBkYXRlVHlwZS5SRU5ERVJgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAncmVuZGVyJ1xuXHRcdCAqL1xuXHRcdHRoaXMudXBkYXRlQmVmb3JlVHlwZSA9IE5vZGVVcGRhdGVUeXBlLlJFTkRFUjtcblxuXHR9XG5cblx0c2V0IHZhbHVlKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy5fcG1yZW0gPSBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG5vZGUncyB0ZXh0dXJlIHZhbHVlLlxuXHQgKlxuXHQgKiBAdHlwZSB7VGV4dHVyZX1cblx0ICovXG5cdGdldCB2YWx1ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLl92YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVzZXMgdGhlIGdpdmVuIFBNUkVNIHRleHR1cmUgdG8gdXBkYXRlIGludGVybmFsIHZhbHVlcy5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIFBNUkVNIHRleHR1cmUuXG5cdCAqL1xuXHR1cGRhdGVGcm9tVGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IGN1YmVVVlNpemUgPSBfZ2VuZXJhdGVDdWJlVVZTaXplKCB0ZXh0dXJlLmltYWdlLmhlaWdodCApO1xuXG5cdFx0dGhpcy5fdGV4dHVyZS52YWx1ZSA9IHRleHR1cmU7XG5cdFx0dGhpcy5fd2lkdGgudmFsdWUgPSBjdWJlVVZTaXplLnRleGVsV2lkdGg7XG5cdFx0dGhpcy5faGVpZ2h0LnZhbHVlID0gY3ViZVVWU2l6ZS50ZXhlbEhlaWdodDtcblx0XHR0aGlzLl9tYXhNaXAudmFsdWUgPSBjdWJlVVZTaXplLm1heE1pcDtcblxuXHR9XG5cblx0dXBkYXRlQmVmb3JlKCBmcmFtZSApIHtcblxuXHRcdGxldCBwbXJlbSA9IHRoaXMuX3BtcmVtO1xuXG5cdFx0Y29uc3QgcG1yZW1WZXJzaW9uID0gcG1yZW0gPyBwbXJlbS5wbXJlbVZlcnNpb24gOiAtIDE7XG5cdFx0Y29uc3QgdGV4dHVyZSA9IHRoaXMuX3ZhbHVlO1xuXG5cdFx0aWYgKCBwbXJlbVZlcnNpb24gIT09IHRleHR1cmUucG1yZW1WZXJzaW9uICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuaXNQTVJFTVRleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0cG1yZW0gPSB0ZXh0dXJlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHBtcmVtID0gX2dldFBNUkVNRnJvbVRleHR1cmUoIHRleHR1cmUsIGZyYW1lLnJlbmRlcmVyLCB0aGlzLl9nZW5lcmF0b3IgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHBtcmVtICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX3BtcmVtID0gcG1yZW07XG5cblx0XHRcdFx0dGhpcy51cGRhdGVGcm9tVGV4dHVyZSggcG1yZW0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5fZ2VuZXJhdG9yID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9nZW5lcmF0b3IgPSBuZXcgUE1SRU1HZW5lcmF0b3IoIGJ1aWxkZXIucmVuZGVyZXIgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlQmVmb3JlKCBidWlsZGVyICk7XG5cblx0XHQvL1xuXG5cdFx0bGV0IHV2Tm9kZSA9IHRoaXMudXZOb2RlO1xuXG5cdFx0aWYgKCB1dk5vZGUgPT09IG51bGwgJiYgYnVpbGRlci5jb250ZXh0LmdldFVWICkge1xuXG5cdFx0XHR1dk5vZGUgPSBidWlsZGVyLmNvbnRleHQuZ2V0VVYoIHRoaXMgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR1dk5vZGUgPSBtYXRlcmlhbEVudlJvdGF0aW9uLm11bCggdmVjMyggdXZOb2RlLngsIHV2Tm9kZS55Lm5lZ2F0ZSgpLCB1dk5vZGUueiApICk7XG5cblx0XHQvL1xuXG5cdFx0bGV0IGxldmVsTm9kZSA9IHRoaXMubGV2ZWxOb2RlO1xuXG5cdFx0aWYgKCBsZXZlbE5vZGUgPT09IG51bGwgJiYgYnVpbGRlci5jb250ZXh0LmdldFRleHR1cmVMZXZlbCApIHtcblxuXHRcdFx0bGV2ZWxOb2RlID0gYnVpbGRlci5jb250ZXh0LmdldFRleHR1cmVMZXZlbCggdGhpcyApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHJldHVybiB0ZXh0dXJlQ3ViZVVWKCB0aGlzLl90ZXh0dXJlLCB1dk5vZGUsIGxldmVsTm9kZSwgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCwgdGhpcy5fbWF4TWlwICk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHRzdXBlci5kaXNwb3NlKCk7XG5cblx0XHRpZiAoIHRoaXMuX2dlbmVyYXRvciAhPT0gbnVsbCApIHRoaXMuX2dlbmVyYXRvci5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBNUkVNTm9kZTtcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gY3ViZSBtYXAgaW1hZ2UgaGFzIGJlZW4gZnVsbHkgbG9hZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gez9BcnJheTwoSW1hZ2V8T2JqZWN0KT59IFtpbWFnZV0gLSBUaGUgY3ViZSBtYXAgaW1hZ2UuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBjdWJlIG1hcCBpcyByZWFkeSBvciBub3QuXG4gKi9cbmZ1bmN0aW9uIGlzQ3ViZU1hcFJlYWR5KCBpbWFnZSApIHtcblxuXHRpZiAoIGltYWdlID09PSBudWxsIHx8IGltYWdlID09PSB1bmRlZmluZWQgKSByZXR1cm4gZmFsc2U7XG5cblx0bGV0IGNvdW50ID0gMDtcblx0Y29uc3QgbGVuZ3RoID0gNjtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRpZiAoIGltYWdlWyBpIF0gIT09IHVuZGVmaW5lZCApIGNvdW50ICsrO1xuXG5cdH1cblxuXHRyZXR1cm4gY291bnQgPT09IGxlbmd0aDtcblxuXG59XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGVxdWlyZWN0YW5ndWxhciBpbWFnZSBoYXMgYmVlbiBmdWxseSBsb2FkZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7KEltYWdlfE9iamVjdCl9IGltYWdlIC0gVGhlIGVxdWlyZWN0YW5ndWxhciBpbWFnZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGN1YmUgbWFwIGlzIHJlYWR5IG9yIG5vdC5cbiAqL1xuZnVuY3Rpb24gaXNFcXVpcmVjdGFuZ3VsYXJNYXBSZWFkeSggaW1hZ2UgKSB7XG5cblx0aWYgKCBpbWFnZSA9PT0gbnVsbCB8fCBpbWFnZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdHJldHVybiBpbWFnZS5oZWlnaHQgPiAwO1xuXG59XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIFBNUkVNIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1RleHR1cmV9IHZhbHVlIC0gVGhlIGlucHV0IHRleHR1cmUuXG4gKiBAcGFyYW0ge05vZGU8dmVjMj59IFt1dk5vZGU9bnVsbF0gLSBUaGUgdXYgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IFtsZXZlbE5vZGU9bnVsbF0gLSBUaGUgbGV2ZWwgbm9kZS5cbiAqIEByZXR1cm5zIHtQTVJFTU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBwbXJlbVRleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggUE1SRU1Ob2RlICk7XG4iLCJpbXBvcnQgTGlnaHRpbmdOb2RlIGZyb20gJy4vTGlnaHRpbmdOb2RlLmpzJztcbmltcG9ydCB7IGNhY2hlIH0gZnJvbSAnLi4vY29yZS9DYWNoZU5vZGUuanMnO1xuaW1wb3J0IHsgcm91Z2huZXNzLCBjbGVhcmNvYXRSb3VnaG5lc3MgfSBmcm9tICcuLi9jb3JlL1Byb3BlcnR5Tm9kZS5qcyc7XG5pbXBvcnQgeyBjYW1lcmFWaWV3TWF0cml4IH0gZnJvbSAnLi4vYWNjZXNzb3JzL0NhbWVyYS5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1lZENsZWFyY29hdE5vcm1hbFZpZXcsIHRyYW5zZm9ybWVkTm9ybWFsVmlldywgdHJhbnNmb3JtZWROb3JtYWxXb3JsZCB9IGZyb20gJy4uL2FjY2Vzc29ycy9Ob3JtYWwuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25WaWV3RGlyZWN0aW9uIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IGZsb2F0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtZWRCZW50Tm9ybWFsVmlldyB9IGZyb20gJy4uL2FjY2Vzc29ycy9BY2Nlc3NvcnNVdGlscy5qcyc7XG5pbXBvcnQgeyBwbXJlbVRleHR1cmUgfSBmcm9tICcuLi9wbXJlbS9QTVJFTU5vZGUuanMnO1xuaW1wb3J0IHsgbWF0ZXJpYWxFbnZJbnRlbnNpdHkgfSBmcm9tICcuLi9hY2Nlc3NvcnMvTWF0ZXJpYWxQcm9wZXJ0aWVzLmpzJztcblxuY29uc3QgX2Vudk5vZGVDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHBoeXNpY2FsIG1vZGVsIGZvciBJbWFnZS1iYXNlZCBsaWdodGluZyAoSUJMKS4gVGhlIGVudmlyb25tZW50XG4gKiBpcyBkZWZpbmVkIHZpYSBlbnZpcm9ubWVudCBtYXBzIGluIHRoZSBlcXVpcmVjdGFuZ3VsYXIsIGN1YmUgbWFwIG9yIGN1YmVVViAoUE1SRU0pIGZvcm1hdC5cbiAqIGBFbnZpcm9ubWVudE5vZGVgIGlzIGludGVuZGVkIGZvciBQQlIgbWF0ZXJpYWxzIGxpa2Uge0BsaW5rIE1lc2hTdGFuZGFyZE5vZGVNYXRlcmlhbH0uXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0aW5nTm9kZVxuICovXG5jbGFzcyBFbnZpcm9ubWVudE5vZGUgZXh0ZW5kcyBMaWdodGluZ05vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnRW52aXJvbm1lbnROb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZW52aXJvbm1lbnQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBbZW52Tm9kZT1udWxsXSAtIEEgbm9kZSByZXByZXNlbnRpbmcgdGhlIGVudmlyb25tZW50LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGVudk5vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgbm9kZSByZXByZXNlbnRpbmcgdGhlIGVudmlyb25tZW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmVudk5vZGUgPSBlbnZOb2RlO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgbWF0ZXJpYWwgfSA9IGJ1aWxkZXI7XG5cblx0XHRsZXQgZW52Tm9kZSA9IHRoaXMuZW52Tm9kZTtcblxuXHRcdGlmICggZW52Tm9kZS5pc1RleHR1cmVOb2RlIHx8IGVudk5vZGUuaXNNYXRlcmlhbFJlZmVyZW5jZU5vZGUgKSB7XG5cblx0XHRcdGNvbnN0IHZhbHVlID0gKCBlbnZOb2RlLmlzVGV4dHVyZU5vZGUgKSA/IGVudk5vZGUudmFsdWUgOiBtYXRlcmlhbFsgZW52Tm9kZS5wcm9wZXJ0eSBdO1xuXG5cdFx0XHRsZXQgY2FjaGVFbnZOb2RlID0gX2Vudk5vZGVDYWNoZS5nZXQoIHZhbHVlICk7XG5cblx0XHRcdGlmICggY2FjaGVFbnZOb2RlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y2FjaGVFbnZOb2RlID0gcG1yZW1UZXh0dXJlKCB2YWx1ZSApO1xuXG5cdFx0XHRcdF9lbnZOb2RlQ2FjaGUuc2V0KCB2YWx1ZSwgY2FjaGVFbnZOb2RlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZW52Tm9kZVx0PSBjYWNoZUVudk5vZGU7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgdXNlQW5pc290cm9weSA9IG1hdGVyaWFsLnVzZUFuaXNvdHJvcHkgPT09IHRydWUgfHwgbWF0ZXJpYWwuYW5pc290cm9weSA+IDA7XG5cdFx0Y29uc3QgcmFkaWFuY2VOb3JtYWxWaWV3ID0gdXNlQW5pc290cm9weSA/IHRyYW5zZm9ybWVkQmVudE5vcm1hbFZpZXcgOiB0cmFuc2Zvcm1lZE5vcm1hbFZpZXc7XG5cblx0XHRjb25zdCByYWRpYW5jZSA9IGVudk5vZGUuY29udGV4dCggY3JlYXRlUmFkaWFuY2VDb250ZXh0KCByb3VnaG5lc3MsIHJhZGlhbmNlTm9ybWFsVmlldyApICkubXVsKCBtYXRlcmlhbEVudkludGVuc2l0eSApO1xuXHRcdGNvbnN0IGlycmFkaWFuY2UgPSBlbnZOb2RlLmNvbnRleHQoIGNyZWF0ZUlycmFkaWFuY2VDb250ZXh0KCB0cmFuc2Zvcm1lZE5vcm1hbFdvcmxkICkgKS5tdWwoIE1hdGguUEkgKS5tdWwoIG1hdGVyaWFsRW52SW50ZW5zaXR5ICk7XG5cblx0XHRjb25zdCBpc29sYXRlUmFkaWFuY2UgPSBjYWNoZSggcmFkaWFuY2UgKTtcblx0XHRjb25zdCBpc29sYXRlSXJyYWRpYW5jZSA9IGNhY2hlKCBpcnJhZGlhbmNlICk7XG5cblx0XHQvL1xuXG5cdFx0YnVpbGRlci5jb250ZXh0LnJhZGlhbmNlLmFkZEFzc2lnbiggaXNvbGF0ZVJhZGlhbmNlICk7XG5cblx0XHRidWlsZGVyLmNvbnRleHQuaWJsSXJyYWRpYW5jZS5hZGRBc3NpZ24oIGlzb2xhdGVJcnJhZGlhbmNlICk7XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgY2xlYXJjb2F0UmFkaWFuY2UgPSBidWlsZGVyLmNvbnRleHQubGlnaHRpbmdNb2RlbC5jbGVhcmNvYXRSYWRpYW5jZTtcblxuXHRcdGlmICggY2xlYXJjb2F0UmFkaWFuY2UgKSB7XG5cblx0XHRcdGNvbnN0IGNsZWFyY29hdFJhZGlhbmNlQ29udGV4dCA9IGVudk5vZGUuY29udGV4dCggY3JlYXRlUmFkaWFuY2VDb250ZXh0KCBjbGVhcmNvYXRSb3VnaG5lc3MsIHRyYW5zZm9ybWVkQ2xlYXJjb2F0Tm9ybWFsVmlldyApICkubXVsKCBtYXRlcmlhbEVudkludGVuc2l0eSApO1xuXHRcdFx0Y29uc3QgaXNvbGF0ZUNsZWFyY29hdFJhZGlhbmNlID0gY2FjaGUoIGNsZWFyY29hdFJhZGlhbmNlQ29udGV4dCApO1xuXG5cdFx0XHRjbGVhcmNvYXRSYWRpYW5jZS5hZGRBc3NpZ24oIGlzb2xhdGVDbGVhcmNvYXRSYWRpYW5jZSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBFbnZpcm9ubWVudE5vZGU7XG5cbmNvbnN0IGNyZWF0ZVJhZGlhbmNlQ29udGV4dCA9ICggcm91Z2huZXNzTm9kZSwgbm9ybWFsVmlld05vZGUgKSA9PiB7XG5cblx0bGV0IHJlZmxlY3RWZWMgPSBudWxsO1xuXG5cdHJldHVybiB7XG5cdFx0Z2V0VVY6ICgpID0+IHtcblxuXHRcdFx0aWYgKCByZWZsZWN0VmVjID09PSBudWxsICkge1xuXG5cdFx0XHRcdHJlZmxlY3RWZWMgPSBwb3NpdGlvblZpZXdEaXJlY3Rpb24ubmVnYXRlKCkucmVmbGVjdCggbm9ybWFsVmlld05vZGUgKTtcblxuXHRcdFx0XHQvLyBNaXhpbmcgdGhlIHJlZmxlY3Rpb24gd2l0aCB0aGUgbm9ybWFsIGlzIG1vcmUgYWNjdXJhdGUgYW5kIGtlZXBzIHJvdWdoIG9iamVjdHMgZnJvbSBnYXRoZXJpbmcgbGlnaHQgZnJvbSBiZWhpbmQgdGhlaXIgdGFuZ2VudCBwbGFuZS5cblx0XHRcdFx0cmVmbGVjdFZlYyA9IHJvdWdobmVzc05vZGUubXVsKCByb3VnaG5lc3NOb2RlICkubWl4KCByZWZsZWN0VmVjLCBub3JtYWxWaWV3Tm9kZSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdHJlZmxlY3RWZWMgPSByZWZsZWN0VmVjLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhVmlld01hdHJpeCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZWZsZWN0VmVjO1xuXG5cdFx0fSxcblx0XHRnZXRUZXh0dXJlTGV2ZWw6ICgpID0+IHtcblxuXHRcdFx0cmV0dXJuIHJvdWdobmVzc05vZGU7XG5cblx0XHR9XG5cdH07XG5cbn07XG5cbmNvbnN0IGNyZWF0ZUlycmFkaWFuY2VDb250ZXh0ID0gKCBub3JtYWxXb3JsZE5vZGUgKSA9PiB7XG5cblx0cmV0dXJuIHtcblx0XHRnZXRVVjogKCkgPT4ge1xuXG5cdFx0XHRyZXR1cm4gbm9ybWFsV29ybGROb2RlO1xuXG5cdFx0fSxcblx0XHRnZXRUZXh0dXJlTGV2ZWw6ICgpID0+IHtcblxuXHRcdFx0cmV0dXJuIGZsb2F0KCAxLjAgKTtcblxuXHRcdH1cblx0fTtcblxufTtcbiIsImltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi9Ob2RlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgZGlmZnVzZUNvbG9yLCBtZXRhbG5lc3MsIHJvdWdobmVzcywgc3BlY3VsYXJDb2xvciwgc3BlY3VsYXJGOTAgfSBmcm9tICcuLi8uLi9ub2Rlcy9jb3JlL1Byb3BlcnR5Tm9kZS5qcyc7XG5pbXBvcnQgeyBtaXggfSBmcm9tICcuLi8uLi9ub2Rlcy9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IG1hdGVyaWFsUm91Z2huZXNzLCBtYXRlcmlhbE1ldGFsbmVzcyB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9NYXRlcmlhbE5vZGUuanMnO1xuaW1wb3J0IGdldFJvdWdobmVzcyBmcm9tICcuLi8uLi9ub2Rlcy9mdW5jdGlvbnMvbWF0ZXJpYWwvZ2V0Um91Z2huZXNzLmpzJztcbmltcG9ydCBQaHlzaWNhbExpZ2h0aW5nTW9kZWwgZnJvbSAnLi4vLi4vbm9kZXMvZnVuY3Rpb25zL1BoeXNpY2FsTGlnaHRpbmdNb2RlbC5qcyc7XG5pbXBvcnQgRW52aXJvbm1lbnROb2RlIGZyb20gJy4uLy4uL25vZGVzL2xpZ2h0aW5nL0Vudmlyb25tZW50Tm9kZS5qcyc7XG5pbXBvcnQgeyBmbG9hdCwgdmVjMywgdmVjNCB9IGZyb20gJy4uLy4uL25vZGVzL3RzbC9UU0xCYXNlLmpzJztcblxuaW1wb3J0IHsgTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfSBmcm9tICcuLi9NZXNoU3RhbmRhcmRNYXRlcmlhbC5qcyc7XG5cbmNvbnN0IF9kZWZhdWx0VmFsdWVzID0gLypAX19QVVJFX18qLyBuZXcgTWVzaFN0YW5kYXJkTWF0ZXJpYWwoKTtcblxuLyoqXG4gKiBOb2RlIG1hdGVyaWFsIHZlcnNpb24gb2Yge0BsaW5rIE1lc2hTdGFuZGFyZE1hdGVyaWFsfS5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZU1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hTdGFuZGFyZE5vZGVNYXRlcmlhbCBleHRlbmRzIE5vZGVNYXRlcmlhbCB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdNZXNoU3RhbmRhcmROb2RlTWF0ZXJpYWwnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtZXNoIHN0YW5kYXJkIG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzTWVzaFN0YW5kYXJkTm9kZU1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldCB0byBgdHJ1ZWAgYmVjYXVzZSBzdGFuZGFyZCBtYXRlcmlhbHMgcmVhY3Qgb24gbGlnaHRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRzID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBlbWlzc2l2ZSBjb2xvciBvZiBzdGFuZGFyZCBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgZW1pc3NpdmVgLFxuXHRcdCAqIGBlbWlzc2l2ZUludGVuc2l0eWAgYW5kIGBlbWlzc2l2ZU1hcGAgcHJvcGVydGllcy4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0b1xuXHRcdCAqIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCBhbmQgZGVmaW5lIHRoZSBlbWlzc2l2ZSBjb2xvciB3aXRoIGEgbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBlbWlzc2l2ZSBjb2xvciBidXQgbW9kaWZ5IHRoZSBleGlzdGluZ1xuXHRcdCAqIHZhbHVlIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxFbWlzc2l2ZX0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZW1pc3NpdmVOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBtZXRhbG5lc3Mgb2Ygc3RhbmRhcmQgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYG1ldGFsbmVzc2AsXG5cdFx0ICogYW5kIGBtZXRhbG5lc3NNYXBgIHByb3BlcnRpZXMuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG9cblx0XHQgKiBvdmVyd3JpdGUgdGhlIGRlZmF1bHQgYW5kIGRlZmluZSB0aGUgbWV0YWxuZXNzIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIG1ldGFsbmVzcyBidXQgbW9kaWZ5IHRoZSBleGlzdGluZ1xuXHRcdCAqIHZhbHVlIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxNZXRhbG5lc3N9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5tZXRhbG5lc3NOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByb3VnaG5lc3Mgb2Ygc3RhbmRhcmQgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYHJvdWdobmVzc2AsXG5cdFx0ICogYW5kIGByb3VnaG5lc3NNYXBgIHByb3BlcnRpZXMuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG9cblx0XHQgKiBvdmVyd3JpdGUgdGhlIGRlZmF1bHQgYW5kIGRlZmluZSB0aGUgcm91Z2huZXNzIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIHJvdWdobmVzcyBidXQgbW9kaWZ5IHRoZSBleGlzdGluZ1xuXHRcdCAqIHZhbHVlIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxSb3VnaG5lc3N9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5yb3VnaG5lc3NOb2RlID0gbnVsbDtcblxuXHRcdHRoaXMuc2V0RGVmYXVsdFZhbHVlcyggX2RlZmF1bHRWYWx1ZXMgKTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiBzaW5jZSB0aGlzIHR5cGUgb2YgbWF0ZXJpYWwgdXNlcyB7QGxpbmsgRW52aXJvbm1lbnROb2RlfVxuXHQgKiB0byBpbXBsZW1lbnQgdGhlIFBCUiAoUE1SRU0gYmFzZWQpIGVudmlyb25tZW50IG1hcHBpbmcuIEJlc2lkZXMsIHRoZVxuXHQgKiBtZXRob2QgaG9ub3JzIGBTY2VuZS5lbnZpcm9ubWVudGAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4gez9FbnZpcm9ubWVudE5vZGU8dmVjMz59IFRoZSBlbnZpcm9ubWVudCBub2RlLlxuXHQgKi9cblx0c2V0dXBFbnZpcm9ubWVudCggYnVpbGRlciApIHtcblxuXHRcdGxldCBlbnZOb2RlID0gc3VwZXIuc2V0dXBFbnZpcm9ubWVudCggYnVpbGRlciApO1xuXG5cdFx0aWYgKCBlbnZOb2RlID09PSBudWxsICYmIGJ1aWxkZXIuZW52aXJvbm1lbnROb2RlICkge1xuXG5cdFx0XHRlbnZOb2RlID0gYnVpbGRlci5lbnZpcm9ubWVudE5vZGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZW52Tm9kZSA/IG5ldyBFbnZpcm9ubWVudE5vZGUoIGVudk5vZGUgKSA6IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGxpZ2h0aW5nIG1vZGVsLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtQaHlzaWNhbExpZ2h0aW5nTW9kZWx9IFRoZSBsaWdodGluZyBtb2RlbC5cblx0ICovXG5cdHNldHVwTGlnaHRpbmdNb2RlbCggLypidWlsZGVyKi8gKSB7XG5cblx0XHRyZXR1cm4gbmV3IFBoeXNpY2FsTGlnaHRpbmdNb2RlbCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBzcGVjdWxhciByZWxhdGVkIG5vZGUgdmFyaWFibGVzLlxuXHQgKi9cblx0c2V0dXBTcGVjdWxhcigpIHtcblxuXHRcdGNvbnN0IHNwZWN1bGFyQ29sb3JOb2RlID0gbWl4KCB2ZWMzKCAwLjA0ICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzcyApO1xuXG5cdFx0c3BlY3VsYXJDb2xvci5hc3NpZ24oIHNwZWN1bGFyQ29sb3JOb2RlICk7XG5cdFx0c3BlY3VsYXJGOTAuYXNzaWduKCAxLjAgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgc3RhbmRhcmQgc3BlY2lmaWMgbm9kZSB2YXJpYWJsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cFZhcmlhbnRzKCkge1xuXG5cdFx0Ly8gTUVUQUxORVNTXG5cblx0XHRjb25zdCBtZXRhbG5lc3NOb2RlID0gdGhpcy5tZXRhbG5lc3NOb2RlID8gZmxvYXQoIHRoaXMubWV0YWxuZXNzTm9kZSApIDogbWF0ZXJpYWxNZXRhbG5lc3M7XG5cblx0XHRtZXRhbG5lc3MuYXNzaWduKCBtZXRhbG5lc3NOb2RlICk7XG5cblx0XHQvLyBST1VHSE5FU1NcblxuXHRcdGxldCByb3VnaG5lc3NOb2RlID0gdGhpcy5yb3VnaG5lc3NOb2RlID8gZmxvYXQoIHRoaXMucm91Z2huZXNzTm9kZSApIDogbWF0ZXJpYWxSb3VnaG5lc3M7XG5cdFx0cm91Z2huZXNzTm9kZSA9IGdldFJvdWdobmVzcyggeyByb3VnaG5lc3M6IHJvdWdobmVzc05vZGUgfSApO1xuXG5cdFx0cm91Z2huZXNzLmFzc2lnbiggcm91Z2huZXNzTm9kZSApO1xuXG5cdFx0Ly8gU1BFQ1VMQVIgQ09MT1JcblxuXHRcdHRoaXMuc2V0dXBTcGVjdWxhcigpO1xuXG5cdFx0Ly8gRElGRlVTRSBDT0xPUlxuXG5cdFx0ZGlmZnVzZUNvbG9yLmFzc2lnbiggdmVjNCggZGlmZnVzZUNvbG9yLnJnYi5tdWwoIG1ldGFsbmVzc05vZGUub25lTWludXMoKSApLCBkaWZmdXNlQ29sb3IuYSApICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuZW1pc3NpdmVOb2RlID0gc291cmNlLmVtaXNzaXZlTm9kZTtcblxuXHRcdHRoaXMubWV0YWxuZXNzTm9kZSA9IHNvdXJjZS5tZXRhbG5lc3NOb2RlO1xuXHRcdHRoaXMucm91Z2huZXNzTm9kZSA9IHNvdXJjZS5yb3VnaG5lc3NOb2RlO1xuXG5cdFx0cmV0dXJuIHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNoU3RhbmRhcmROb2RlTWF0ZXJpYWw7XG4iLCJpbXBvcnQgeyBjbGVhcmNvYXQsIGNsZWFyY29hdFJvdWdobmVzcywgc2hlZW4sIHNoZWVuUm91Z2huZXNzLCBpcmlkZXNjZW5jZSwgaXJpZGVzY2VuY2VJT1IsIGlyaWRlc2NlbmNlVGhpY2tuZXNzLCBzcGVjdWxhckNvbG9yLCBzcGVjdWxhckY5MCwgZGlmZnVzZUNvbG9yLCBtZXRhbG5lc3MsIHJvdWdobmVzcywgYW5pc290cm9weSwgYWxwaGFULCBhbmlzb3Ryb3B5VCwgYW5pc290cm9weUIsIGlvciwgdHJhbnNtaXNzaW9uLCB0aGlja25lc3MsIGF0dGVudWF0aW9uRGlzdGFuY2UsIGF0dGVudWF0aW9uQ29sb3IsIGRpc3BlcnNpb24gfSBmcm9tICcuLi8uLi9ub2Rlcy9jb3JlL1Byb3BlcnR5Tm9kZS5qcyc7XG5pbXBvcnQgeyBtYXRlcmlhbENsZWFyY29hdCwgbWF0ZXJpYWxDbGVhcmNvYXRSb3VnaG5lc3MsIG1hdGVyaWFsQ2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbFNoZWVuLCBtYXRlcmlhbFNoZWVuUm91Z2huZXNzLCBtYXRlcmlhbElyaWRlc2NlbmNlLCBtYXRlcmlhbElyaWRlc2NlbmNlSU9SLCBtYXRlcmlhbElyaWRlc2NlbmNlVGhpY2tuZXNzLCBtYXRlcmlhbFNwZWN1bGFySW50ZW5zaXR5LCBtYXRlcmlhbFNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsQW5pc290cm9weSwgbWF0ZXJpYWxJT1IsIG1hdGVyaWFsVHJhbnNtaXNzaW9uLCBtYXRlcmlhbFRoaWNrbmVzcywgbWF0ZXJpYWxBdHRlbnVhdGlvbkRpc3RhbmNlLCBtYXRlcmlhbEF0dGVudWF0aW9uQ29sb3IsIG1hdGVyaWFsRGlzcGVyc2lvbiB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9NYXRlcmlhbE5vZGUuanMnO1xuaW1wb3J0IHsgZmxvYXQsIHZlYzIsIHZlYzMsIElmIH0gZnJvbSAnLi4vLi4vbm9kZXMvdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IGdldFJvdWdobmVzcyBmcm9tICcuLi8uLi9ub2Rlcy9mdW5jdGlvbnMvbWF0ZXJpYWwvZ2V0Um91Z2huZXNzLmpzJztcbmltcG9ydCB7IFRCTlZpZXdNYXRyaXggfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvQWNjZXNzb3JzVXRpbHMuanMnO1xuaW1wb3J0IFBoeXNpY2FsTGlnaHRpbmdNb2RlbCBmcm9tICcuLi8uLi9ub2Rlcy9mdW5jdGlvbnMvUGh5c2ljYWxMaWdodGluZ01vZGVsLmpzJztcbmltcG9ydCBNZXNoU3RhbmRhcmROb2RlTWF0ZXJpYWwgZnJvbSAnLi9NZXNoU3RhbmRhcmROb2RlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHsgbWl4LCBwb3cyLCBtaW4gfSBmcm9tICcuLi8uLi9ub2Rlcy9tYXRoL01hdGhOb2RlLmpzJztcblxuaW1wb3J0IHsgTWVzaFBoeXNpY2FsTWF0ZXJpYWwgfSBmcm9tICcuLi9NZXNoUGh5c2ljYWxNYXRlcmlhbC5qcyc7XG5cbmNvbnN0IF9kZWZhdWx0VmFsdWVzID0gLypAX19QVVJFX18qLyBuZXcgTWVzaFBoeXNpY2FsTWF0ZXJpYWwoKTtcblxuLyoqXG4gKiBOb2RlIG1hdGVyaWFsIHZlcnNpb24gb2Yge0BsaW5rIE1lc2hQaHlzaWNhbE1hdGVyaWFsfS5cbiAqXG4gKiBAYXVnbWVudHMgTWVzaFN0YW5kYXJkTm9kZU1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hQaHlzaWNhbE5vZGVNYXRlcmlhbCBleHRlbmRzIE1lc2hTdGFuZGFyZE5vZGVNYXRlcmlhbCB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdNZXNoUGh5c2ljYWxOb2RlTWF0ZXJpYWwnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtZXNoIHBoeXNpY2FsIG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzTWVzaFBoeXNpY2FsTm9kZU1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjbGVhcmNvYXQgb2YgcGh5c2ljYWwgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYGNsZWFyY29hdGBcblx0XHQgKiBhbmQgYGNsZWFyY29hdE1hcGAgcHJvcGVydGllcy4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSBjbGVhcmNvYXQgd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgY2xlYXJjb2F0IGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbENsZWFyY29hdH0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNsZWFyY29hdE5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNsZWFyY29hdCByb3VnaG5lc3Mgb2YgcGh5c2ljYWwgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYGNsZWFyY29hdFJvdWdobmVzc2Bcblx0XHQgKiBhbmQgYGNsZWFyY29hdFJvdWdobmVzc01hcGAgcHJvcGVydGllcy4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSBjbGVhcmNvYXQgcm91Z2huZXNzIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIGNsZWFyY29hdCByb3VnaG5lc3MgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsQ2xlYXJjb2F0Um91Z2huZXNzfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2xlYXJjb2F0IG5vcm1hbCBvZiBwaHlzaWNhbCBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgY2xlYXJjb2F0Tm9ybWFsTWFwYFxuXHRcdCAqIHByb3BlcnR5LiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuZCBkZWZpbmUgdGhlIGNsZWFyY29hdCBub3JtYWwgd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgY2xlYXJjb2F0IG5vcm1hbCBidXQgbW9kaWZ5IHRoZSBleGlzdGluZ1xuXHRcdCAqIHZhbHVlIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxDbGVhcmNvYXROb3JtYWx9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPHZlYzM+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbE5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNoZWVuIG9mIHBoeXNpY2FsIG1hdGVyaWFscyBpcyBieSBkZWZhdWx0IGluZmVycmVkIGZyb20gdGhlIGBzaGVlbmAsIGBzaGVlbkNvbG9yYFxuXHRcdCAqIGFuZCBgc2hlZW5Db2xvck1hcGAgcHJvcGVydGllcy4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSBzaGVlbiB3aXRoIGEgbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBzaGVlbiBidXQgbW9kaWZ5IHRoZSBleGlzdGluZ1xuXHRcdCAqIHZhbHVlIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxTaGVlbn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2hlZW5Ob2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzaGVlbiByb3VnaG5lc3Mgb2YgcGh5c2ljYWwgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYHNoZWVuUm91Z2huZXNzYCBhbmRcblx0XHQgKiBgc2hlZW5Sb3VnaG5lc3NNYXBgIHByb3BlcnRpZXMuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0XG5cdFx0ICogYW5kIGRlZmluZSB0aGUgc2hlZW4gcm91Z2huZXNzIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIHNoZWVuIHJvdWdobmVzcyBidXQgbW9kaWZ5IHRoZSBleGlzdGluZ1xuXHRcdCAqIHZhbHVlIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxTaGVlblJvdWdobmVzc30uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaXJpZGVzY2VuY2Ugb2YgcGh5c2ljYWwgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYGlyaWRlc2NlbmNlYFxuXHRcdCAqIHByb3BlcnR5LiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuZCBkZWZpbmUgdGhlIGlyaWRlc2NlbmNlIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIGlyaWRlc2NlbmNlIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbElyaWRlc2NlbmNlfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuaXJpZGVzY2VuY2VOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpcmlkZXNjZW5jZSBJT1Igb2YgcGh5c2ljYWwgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYGlyaWRlc2NlbmNlSU9SYFxuXHRcdCAqIHByb3BlcnR5LiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuZCBkZWZpbmUgdGhlIGlyaWRlc2NlbmNlIElPUiB3aXRoIGEgbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBpcmlkZXNjZW5jZSBJT1IgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsSXJpZGVzY2VuY2VJT1J9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5pcmlkZXNjZW5jZUlPUk5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGlyaWRlc2NlbmNlIHRoaWNrbmVzcyBvZiBwaHlzaWNhbCBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZWBcblx0XHQgKiBhbmQgYGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwYCBwcm9wZXJ0aWVzLiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuZCBkZWZpbmUgdGhlIGlyaWRlc2NlbmNlIHRoaWNrbmVzcyB3aXRoIGEgbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBpcmlkZXNjZW5jZSB0aGlja25lc3MgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsSXJpZGVzY2VuY2VUaGlja25lc3N9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc05vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNwZWN1bGFyIGludGVuc2l0eSBvZiBwaHlzaWNhbCBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgc3BlY3VsYXJJbnRlbnNpdHlgXG5cdFx0ICogYW5kIGBzcGVjdWxhckludGVuc2l0eU1hcGAgcHJvcGVydGllcy4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSBzcGVjdWxhciBpbnRlbnNpdHkgd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgc3BlY3VsYXIgaW50ZW5zaXR5IGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbFNwZWN1bGFySW50ZW5zaXR5fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzcGVjdWxhciBjb2xvciBvZiBwaHlzaWNhbCBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgc3BlY3VsYXJDb2xvcmBcblx0XHQgKiBhbmQgYHNwZWN1bGFyQ29sb3JNYXBgIHByb3BlcnRpZXMuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0XG5cdFx0ICogYW5kIGRlZmluZSB0aGUgc3BlY3VsYXIgY29sb3Igd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgc3BlY3VsYXIgY29sb3IgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsU3BlY3VsYXJDb2xvcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc3BlY3VsYXJDb2xvck5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGlvciBvZiBwaHlzaWNhbCBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgaW9yYFxuXHRcdCAqIHByb3BlcnR5LiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuZCBkZWZpbmUgdGhlIGlvciB3aXRoIGEgbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBpb3IgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsSU9SfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuaW9yTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdHJhbnNtaXNzaW9uIG9mIHBoeXNpY2FsIG1hdGVyaWFscyBpcyBieSBkZWZhdWx0IGluZmVycmVkIGZyb20gdGhlIGB0cmFuc21pc3Npb25gIGFuZFxuXHRcdCAqIGB0cmFuc21pc3Npb25NYXBgIHByb3BlcnRpZXMuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0XG5cdFx0ICogYW5kIGRlZmluZSB0aGUgdHJhbnNtaXNzaW9uIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIHRyYW5zbWlzc2lvbiBidXQgbW9kaWZ5IHRoZSBleGlzdGluZ1xuXHRcdCAqIHZhbHVlIGluc3RlYWQsIHVzZSB7QGxpbmsgbWF0ZXJpYWxUcmFuc21pc3Npb259LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy50cmFuc21pc3Npb25Ob2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0aGlja25lc3Mgb2YgcGh5c2ljYWwgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGUgYHRoaWNrbmVzc2AgYW5kXG5cdFx0ICogYHRoaWNrbmVzc01hcGAgcHJvcGVydGllcy4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSB0aGlja25lc3Mgd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgdGhpY2tuZXNzIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbFRoaWNrbmVzc30uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnRoaWNrbmVzc05vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGF0dGVudWF0aW9uIGRpc3RhbmNlIG9mIHBoeXNpY2FsIG1hdGVyaWFscyBpcyBieSBkZWZhdWx0IGluZmVycmVkIGZyb20gdGhlXG5cdFx0ICogYGF0dGVudWF0aW9uRGlzdGFuY2VgIHByb3BlcnR5LiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuZCBkZWZpbmUgdGhlIGF0dGVudWF0aW9uIGRpc3RhbmNlIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIGF0dGVudWF0aW9uIGRpc3RhbmNlIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbEF0dGVudWF0aW9uRGlzdGFuY2V9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYXR0ZW51YXRpb24gY29sb3Igb2YgcGh5c2ljYWwgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGVcblx0XHQgKiBgYXR0ZW51YXRpb25Db2xvcmAgcHJvcGVydHkuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0XG5cdFx0ICogYW5kIGRlZmluZSB0aGUgYXR0ZW51YXRpb24gY29sb3Igd2l0aCBhIG5vZGUgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIElmIHlvdSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSB0aGUgYXR0ZW51YXRpb24gY29sb3IgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsQXR0ZW51YXRpb25Db2xvcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYXR0ZW51YXRpb25Db2xvck5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRpc3BlcnNpb24gb2YgcGh5c2ljYWwgbWF0ZXJpYWxzIGlzIGJ5IGRlZmF1bHQgaW5mZXJyZWQgZnJvbSB0aGVcblx0XHQgKiBgZGlzcGVyc2lvbmAgcHJvcGVydHkuIFRoaXMgbm9kZSBwcm9wZXJ0eSBhbGxvd3MgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0XG5cdFx0ICogYW5kIGRlZmluZSB0aGUgZGlzcGVyc2lvbiB3aXRoIGEgbm9kZSBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogSWYgeW91IGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBkaXNwZXJzaW9uIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbERpc3BlcnNpb259LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwZXJzaW9uTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYW5pc290cm9weSBvZiBwaHlzaWNhbCBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZVxuXHRcdCAqIGBhbmlzb3Ryb3B5YCBwcm9wZXJ0eS4gVGhpcyBub2RlIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHRcblx0XHQgKiBhbmQgZGVmaW5lIHRoZSBhbmlzb3Ryb3B5IHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIGFuaXNvdHJvcHkgYnV0IG1vZGlmeSB0aGUgZXhpc3Rpbmdcblx0XHQgKiB2YWx1ZSBpbnN0ZWFkLCB1c2Uge0BsaW5rIG1hdGVyaWFsQW5pc290cm9weX0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8ZmxvYXQ+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmFuaXNvdHJvcHlOb2RlID0gbnVsbDtcblxuXHRcdHRoaXMuc2V0RGVmYXVsdFZhbHVlcyggX2RlZmF1bHRWYWx1ZXMgKTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoZSBsaWdodGluZyBtb2RlbCBzaG91bGQgdXNlIGNsZWFyY29hdCBvciBub3QuXG5cdCAqXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAZGVmYXVsdCB0cnVlXG5cdCAqL1xuXHRnZXQgdXNlQ2xlYXJjb2F0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY2xlYXJjb2F0ID4gMCB8fCB0aGlzLmNsZWFyY29hdE5vZGUgIT09IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoZSBsaWdodGluZyBtb2RlbCBzaG91bGQgdXNlIGlyaWRlc2NlbmNlIG9yIG5vdC5cblx0ICpcblx0ICogQHR5cGUge2Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IHRydWVcblx0ICovXG5cdGdldCB1c2VJcmlkZXNjZW5jZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmlyaWRlc2NlbmNlID4gMCB8fCB0aGlzLmlyaWRlc2NlbmNlTm9kZSAhPT0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIGxpZ2h0aW5nIG1vZGVsIHNob3VsZCB1c2Ugc2hlZW4gb3Igbm90LlxuXHQgKlxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICogQGRlZmF1bHQgdHJ1ZVxuXHQgKi9cblx0Z2V0IHVzZVNoZWVuKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2hlZW4gPiAwIHx8IHRoaXMuc2hlZW5Ob2RlICE9PSBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgbGlnaHRpbmcgbW9kZWwgc2hvdWxkIHVzZSBhbmlzb3Ryb3B5IG9yIG5vdC5cblx0ICpcblx0ICogQHR5cGUge2Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IHRydWVcblx0ICovXG5cdGdldCB1c2VBbmlzb3Ryb3B5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYW5pc290cm9weSA+IDAgfHwgdGhpcy5hbmlzb3Ryb3B5Tm9kZSAhPT0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIGxpZ2h0aW5nIG1vZGVsIHNob3VsZCB1c2UgdHJhbnNtaXNzaW9uIG9yIG5vdC5cblx0ICpcblx0ICogQHR5cGUge2Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IHRydWVcblx0ICovXG5cdGdldCB1c2VUcmFuc21pc3Npb24oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy50cmFuc21pc3Npb24gPiAwIHx8IHRoaXMudHJhbnNtaXNzaW9uTm9kZSAhPT0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIGxpZ2h0aW5nIG1vZGVsIHNob3VsZCB1c2UgZGlzcGVyc2lvbiBvciBub3QuXG5cdCAqXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAZGVmYXVsdCB0cnVlXG5cdCAqL1xuXHRnZXQgdXNlRGlzcGVyc2lvbigpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpc3BlcnNpb24gPiAwIHx8IHRoaXMuZGlzcGVyc2lvbk5vZGUgIT09IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIHNwZWN1bGFyIHJlbGF0ZWQgbm9kZSB2YXJpYWJsZXMuXG5cdCAqL1xuXHRzZXR1cFNwZWN1bGFyKCkge1xuXG5cdFx0Y29uc3QgaW9yTm9kZSA9IHRoaXMuaW9yTm9kZSA/IGZsb2F0KCB0aGlzLmlvck5vZGUgKSA6IG1hdGVyaWFsSU9SO1xuXG5cdFx0aW9yLmFzc2lnbiggaW9yTm9kZSApO1xuXHRcdHNwZWN1bGFyQ29sb3IuYXNzaWduKCBtaXgoIG1pbiggcG93MiggaW9yLnN1YiggMS4wICkuZGl2KCBpb3IuYWRkKCAxLjAgKSApICkubXVsKCBtYXRlcmlhbFNwZWN1bGFyQ29sb3IgKSwgdmVjMyggMS4wICkgKS5tdWwoIG1hdGVyaWFsU3BlY3VsYXJJbnRlbnNpdHkgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzICkgKTtcblx0XHRzcGVjdWxhckY5MC5hc3NpZ24oIG1peCggbWF0ZXJpYWxTcGVjdWxhckludGVuc2l0eSwgMS4wLCBtZXRhbG5lc3MgKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBsaWdodGluZyBtb2RlbC5cblx0ICpcblx0ICogQHJldHVybiB7UGh5c2ljYWxMaWdodGluZ01vZGVsfSBUaGUgbGlnaHRpbmcgbW9kZWwuXG5cdCAqL1xuXHRzZXR1cExpZ2h0aW5nTW9kZWwoIC8qYnVpbGRlciovICkge1xuXG5cdFx0cmV0dXJuIG5ldyBQaHlzaWNhbExpZ2h0aW5nTW9kZWwoIHRoaXMudXNlQ2xlYXJjb2F0LCB0aGlzLnVzZVNoZWVuLCB0aGlzLnVzZUlyaWRlc2NlbmNlLCB0aGlzLnVzZUFuaXNvdHJvcHksIHRoaXMudXNlVHJhbnNtaXNzaW9uLCB0aGlzLnVzZURpc3BlcnNpb24gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgcGh5c2ljYWwgc3BlY2lmaWMgbm9kZSB2YXJpYWJsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cFZhcmlhbnRzKCBidWlsZGVyICkge1xuXG5cdFx0c3VwZXIuc2V0dXBWYXJpYW50cyggYnVpbGRlciApO1xuXG5cdFx0Ly8gQ0xFQVJDT0FUXG5cblx0XHRpZiAoIHRoaXMudXNlQ2xlYXJjb2F0ICkge1xuXG5cdFx0XHRjb25zdCBjbGVhcmNvYXROb2RlID0gdGhpcy5jbGVhcmNvYXROb2RlID8gZmxvYXQoIHRoaXMuY2xlYXJjb2F0Tm9kZSApIDogbWF0ZXJpYWxDbGVhcmNvYXQ7XG5cdFx0XHRjb25zdCBjbGVhcmNvYXRSb3VnaG5lc3NOb2RlID0gdGhpcy5jbGVhcmNvYXRSb3VnaG5lc3NOb2RlID8gZmxvYXQoIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTm9kZSApIDogbWF0ZXJpYWxDbGVhcmNvYXRSb3VnaG5lc3M7XG5cblx0XHRcdGNsZWFyY29hdC5hc3NpZ24oIGNsZWFyY29hdE5vZGUgKTtcblx0XHRcdGNsZWFyY29hdFJvdWdobmVzcy5hc3NpZ24oIGdldFJvdWdobmVzcyggeyByb3VnaG5lc3M6IGNsZWFyY29hdFJvdWdobmVzc05vZGUgfSApICk7XG5cblx0XHR9XG5cblx0XHQvLyBTSEVFTlxuXG5cdFx0aWYgKCB0aGlzLnVzZVNoZWVuICkge1xuXG5cdFx0XHRjb25zdCBzaGVlbk5vZGUgPSB0aGlzLnNoZWVuTm9kZSA/IHZlYzMoIHRoaXMuc2hlZW5Ob2RlICkgOiBtYXRlcmlhbFNoZWVuO1xuXHRcdFx0Y29uc3Qgc2hlZW5Sb3VnaG5lc3NOb2RlID0gdGhpcy5zaGVlblJvdWdobmVzc05vZGUgPyBmbG9hdCggdGhpcy5zaGVlblJvdWdobmVzc05vZGUgKSA6IG1hdGVyaWFsU2hlZW5Sb3VnaG5lc3M7XG5cblx0XHRcdHNoZWVuLmFzc2lnbiggc2hlZW5Ob2RlICk7XG5cdFx0XHRzaGVlblJvdWdobmVzcy5hc3NpZ24oIHNoZWVuUm91Z2huZXNzTm9kZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gSVJJREVTQ0VOQ0VcblxuXHRcdGlmICggdGhpcy51c2VJcmlkZXNjZW5jZSApIHtcblxuXHRcdFx0Y29uc3QgaXJpZGVzY2VuY2VOb2RlID0gdGhpcy5pcmlkZXNjZW5jZU5vZGUgPyBmbG9hdCggdGhpcy5pcmlkZXNjZW5jZU5vZGUgKSA6IG1hdGVyaWFsSXJpZGVzY2VuY2U7XG5cdFx0XHRjb25zdCBpcmlkZXNjZW5jZUlPUk5vZGUgPSB0aGlzLmlyaWRlc2NlbmNlSU9STm9kZSA/IGZsb2F0KCB0aGlzLmlyaWRlc2NlbmNlSU9STm9kZSApIDogbWF0ZXJpYWxJcmlkZXNjZW5jZUlPUjtcblx0XHRcdGNvbnN0IGlyaWRlc2NlbmNlVGhpY2tuZXNzTm9kZSA9IHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NOb2RlID8gZmxvYXQoIHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NOb2RlICkgOiBtYXRlcmlhbElyaWRlc2NlbmNlVGhpY2tuZXNzO1xuXG5cdFx0XHRpcmlkZXNjZW5jZS5hc3NpZ24oIGlyaWRlc2NlbmNlTm9kZSApO1xuXHRcdFx0aXJpZGVzY2VuY2VJT1IuYXNzaWduKCBpcmlkZXNjZW5jZUlPUk5vZGUgKTtcblx0XHRcdGlyaWRlc2NlbmNlVGhpY2tuZXNzLmFzc2lnbiggaXJpZGVzY2VuY2VUaGlja25lc3NOb2RlICk7XG5cblx0XHR9XG5cblx0XHQvLyBBTklTT1RST1BZXG5cblx0XHRpZiAoIHRoaXMudXNlQW5pc290cm9weSApIHtcblxuXHRcdFx0Y29uc3QgYW5pc290cm9weVYgPSAoIHRoaXMuYW5pc290cm9weU5vZGUgPyB2ZWMyKCB0aGlzLmFuaXNvdHJvcHlOb2RlICkgOiBtYXRlcmlhbEFuaXNvdHJvcHkgKS50b1ZhcigpO1xuXG5cdFx0XHRhbmlzb3Ryb3B5LmFzc2lnbiggYW5pc290cm9weVYubGVuZ3RoKCkgKTtcblxuXHRcdFx0SWYoIGFuaXNvdHJvcHkuZXF1YWwoIDAuMCApLCAoKSA9PiB7XG5cblx0XHRcdFx0YW5pc290cm9weVYuYXNzaWduKCB2ZWMyKCAxLjAsIDAuMCApICk7XG5cblx0XHRcdH0gKS5FbHNlKCAoKSA9PiB7XG5cblx0XHRcdFx0YW5pc290cm9weVYuZGl2QXNzaWduKCB2ZWMyKCBhbmlzb3Ryb3B5ICkgKTtcblx0XHRcdFx0YW5pc290cm9weS5hc3NpZ24oIGFuaXNvdHJvcHkuc2F0dXJhdGUoKSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIFJvdWdobmVzcyBhbG9uZyB0aGUgYW5pc290cm9weSBiaXRhbmdlbnQgaXMgdGhlIG1hdGVyaWFsIHJvdWdobmVzcywgd2hpbGUgdGhlIHRhbmdlbnQgcm91Z2huZXNzIGluY3JlYXNlcyB3aXRoIGFuaXNvdHJvcHkuXG5cdFx0XHRhbHBoYVQuYXNzaWduKCBhbmlzb3Ryb3B5LnBvdzIoKS5taXgoIHJvdWdobmVzcy5wb3cyKCksIDEuMCApICk7XG5cblx0XHRcdGFuaXNvdHJvcHlULmFzc2lnbiggVEJOVmlld01hdHJpeFsgMCBdLm11bCggYW5pc290cm9weVYueCApLmFkZCggVEJOVmlld01hdHJpeFsgMSBdLm11bCggYW5pc290cm9weVYueSApICkgKTtcblx0XHRcdGFuaXNvdHJvcHlCLmFzc2lnbiggVEJOVmlld01hdHJpeFsgMSBdLm11bCggYW5pc290cm9weVYueCApLnN1YiggVEJOVmlld01hdHJpeFsgMCBdLm11bCggYW5pc290cm9weVYueSApICkgKTtcblxuXHRcdH1cblxuXHRcdC8vIFRSQU5TTUlTU0lPTlxuXG5cdFx0aWYgKCB0aGlzLnVzZVRyYW5zbWlzc2lvbiApIHtcblxuXHRcdFx0Y29uc3QgdHJhbnNtaXNzaW9uTm9kZSA9IHRoaXMudHJhbnNtaXNzaW9uTm9kZSA/IGZsb2F0KCB0aGlzLnRyYW5zbWlzc2lvbk5vZGUgKSA6IG1hdGVyaWFsVHJhbnNtaXNzaW9uO1xuXHRcdFx0Y29uc3QgdGhpY2tuZXNzTm9kZSA9IHRoaXMudGhpY2tuZXNzTm9kZSA/IGZsb2F0KCB0aGlzLnRoaWNrbmVzc05vZGUgKSA6IG1hdGVyaWFsVGhpY2tuZXNzO1xuXHRcdFx0Y29uc3QgYXR0ZW51YXRpb25EaXN0YW5jZU5vZGUgPSB0aGlzLmF0dGVudWF0aW9uRGlzdGFuY2VOb2RlID8gZmxvYXQoIHRoaXMuYXR0ZW51YXRpb25EaXN0YW5jZU5vZGUgKSA6IG1hdGVyaWFsQXR0ZW51YXRpb25EaXN0YW5jZTtcblx0XHRcdGNvbnN0IGF0dGVudWF0aW9uQ29sb3JOb2RlID0gdGhpcy5hdHRlbnVhdGlvbkNvbG9yTm9kZSA/IHZlYzMoIHRoaXMuYXR0ZW51YXRpb25Db2xvck5vZGUgKSA6IG1hdGVyaWFsQXR0ZW51YXRpb25Db2xvcjtcblxuXHRcdFx0dHJhbnNtaXNzaW9uLmFzc2lnbiggdHJhbnNtaXNzaW9uTm9kZSApO1xuXHRcdFx0dGhpY2tuZXNzLmFzc2lnbiggdGhpY2tuZXNzTm9kZSApO1xuXHRcdFx0YXR0ZW51YXRpb25EaXN0YW5jZS5hc3NpZ24oIGF0dGVudWF0aW9uRGlzdGFuY2VOb2RlICk7XG5cdFx0XHRhdHRlbnVhdGlvbkNvbG9yLmFzc2lnbiggYXR0ZW51YXRpb25Db2xvck5vZGUgKTtcblxuXHRcdFx0aWYgKCB0aGlzLnVzZURpc3BlcnNpb24gKSB7XG5cblx0XHRcdFx0Y29uc3QgZGlzcGVyc2lvbk5vZGUgPSB0aGlzLmRpc3BlcnNpb25Ob2RlID8gZmxvYXQoIHRoaXMuZGlzcGVyc2lvbk5vZGUgKSA6IG1hdGVyaWFsRGlzcGVyc2lvbjtcblxuXHRcdFx0XHRkaXNwZXJzaW9uLmFzc2lnbiggZGlzcGVyc2lvbk5vZGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBjbGVhcmNvYXQgbm9ybWFsIG5vZGUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSBjbGVhcmNvYXQgbm9ybWFsLlxuXHQgKi9cblx0c2V0dXBDbGVhcmNvYXROb3JtYWwoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jbGVhcmNvYXROb3JtYWxOb2RlID8gdmVjMyggdGhpcy5jbGVhcmNvYXROb3JtYWxOb2RlICkgOiBtYXRlcmlhbENsZWFyY29hdE5vcm1hbDtcblxuXHR9XG5cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRidWlsZGVyLmNvbnRleHQuc2V0dXBDbGVhcmNvYXROb3JtYWwgPSAoKSA9PiB0aGlzLnNldHVwQ2xlYXJjb2F0Tm9ybWFsKCBidWlsZGVyICk7XG5cblx0XHRzdXBlci5zZXR1cCggYnVpbGRlciApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmNsZWFyY29hdE5vZGUgPSBzb3VyY2UuY2xlYXJjb2F0Tm9kZTtcblx0XHR0aGlzLmNsZWFyY29hdFJvdWdobmVzc05vZGUgPSBzb3VyY2UuY2xlYXJjb2F0Um91Z2huZXNzTm9kZTtcblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbE5vZGUgPSBzb3VyY2UuY2xlYXJjb2F0Tm9ybWFsTm9kZTtcblxuXHRcdHRoaXMuc2hlZW5Ob2RlID0gc291cmNlLnNoZWVuTm9kZTtcblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzTm9kZSA9IHNvdXJjZS5zaGVlblJvdWdobmVzc05vZGU7XG5cblx0XHR0aGlzLmlyaWRlc2NlbmNlTm9kZSA9IHNvdXJjZS5pcmlkZXNjZW5jZU5vZGU7XG5cdFx0dGhpcy5pcmlkZXNjZW5jZUlPUk5vZGUgPSBzb3VyY2UuaXJpZGVzY2VuY2VJT1JOb2RlO1xuXHRcdHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NOb2RlID0gc291cmNlLmlyaWRlc2NlbmNlVGhpY2tuZXNzTm9kZTtcblxuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlOb2RlID0gc291cmNlLnNwZWN1bGFySW50ZW5zaXR5Tm9kZTtcblx0XHR0aGlzLnNwZWN1bGFyQ29sb3JOb2RlID0gc291cmNlLnNwZWN1bGFyQ29sb3JOb2RlO1xuXG5cdFx0dGhpcy50cmFuc21pc3Npb25Ob2RlID0gc291cmNlLnRyYW5zbWlzc2lvbk5vZGU7XG5cdFx0dGhpcy50aGlja25lc3NOb2RlID0gc291cmNlLnRoaWNrbmVzc05vZGU7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlTm9kZSA9IHNvdXJjZS5hdHRlbnVhdGlvbkRpc3RhbmNlTm9kZTtcblx0XHR0aGlzLmF0dGVudWF0aW9uQ29sb3JOb2RlID0gc291cmNlLmF0dGVudWF0aW9uQ29sb3JOb2RlO1xuXHRcdHRoaXMuZGlzcGVyc2lvbk5vZGUgPSBzb3VyY2UuZGlzcGVyc2lvbk5vZGU7XG5cblx0XHR0aGlzLmFuaXNvdHJvcHlOb2RlID0gc291cmNlLmFuaXNvdHJvcHlOb2RlO1xuXG5cdFx0cmV0dXJuIHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNoUGh5c2ljYWxOb2RlTWF0ZXJpYWw7XG4iLCJpbXBvcnQgTWVzaFBoeXNpY2FsTm9kZU1hdGVyaWFsIGZyb20gJy4vTWVzaFBoeXNpY2FsTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCBQaHlzaWNhbExpZ2h0aW5nTW9kZWwgZnJvbSAnLi4vLi4vbm9kZXMvZnVuY3Rpb25zL1BoeXNpY2FsTGlnaHRpbmdNb2RlbC5qcyc7XG5pbXBvcnQgeyB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTm9ybWFsLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uVmlld0RpcmVjdGlvbiB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9Qb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBmbG9hdCwgdmVjMyB9IGZyb20gJy4uLy4uL25vZGVzL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBsaWdodGluZyBtb2RlbCBmb3Ige0BsaW5rIE1lc2hTU1NOb2RlTWF0ZXJpYWx9LlxuICpcbiAqIEBhdWdtZW50cyBQaHlzaWNhbExpZ2h0aW5nTW9kZWxcbiAqL1xuY2xhc3MgU1NTTGlnaHRpbmdNb2RlbCBleHRlbmRzIFBoeXNpY2FsTGlnaHRpbmdNb2RlbCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcGh5c2ljYWwgbGlnaHRpbmcgbW9kZWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NsZWFyY29hdD1mYWxzZV0gLSBXaGV0aGVyIGNsZWFyY29hdCBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtzaGVlbj1mYWxzZV0gLSBXaGV0aGVyIHNoZWVuIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lyaWRlc2NlbmNlPWZhbHNlXSAtIFdoZXRoZXIgaXJpZGVzY2VuY2UgaXMgc3VwcG9ydGVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbYW5pc290cm9weT1mYWxzZV0gLSBXaGV0aGVyIGFuaXNvdHJvcHkgaXMgc3VwcG9ydGVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbdHJhbnNtaXNzaW9uPWZhbHNlXSAtIFdoZXRoZXIgdHJhbnNtaXNzaW9uIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Rpc3BlcnNpb249ZmFsc2VdIC0gV2hldGhlciBkaXNwZXJzaW9uIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Nzcz1mYWxzZV0gLSBXaGV0aGVyIFNTUyBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNsZWFyY29hdCA9IGZhbHNlLCBzaGVlbiA9IGZhbHNlLCBpcmlkZXNjZW5jZSA9IGZhbHNlLCBhbmlzb3Ryb3B5ID0gZmFsc2UsIHRyYW5zbWlzc2lvbiA9IGZhbHNlLCBkaXNwZXJzaW9uID0gZmFsc2UsIHNzcyA9IGZhbHNlICkge1xuXG5cdFx0c3VwZXIoIGNsZWFyY29hdCwgc2hlZW4sIGlyaWRlc2NlbmNlLCBhbmlzb3Ryb3B5LCB0cmFuc21pc3Npb24sIGRpc3BlcnNpb24gKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGxpZ2h0aW5nIG1vZGVsIHNob3VsZCB1c2UgU1NTIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy51c2VTU1MgPSBzc3M7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeHRlbmRzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHdpdGggYSBTU1MgdGVybS5cblx0ICpcblx0ICogUmVmZXJlbmNlOiBbQXBwcm94aW1hdGluZyBUcmFuc2x1Y2VuY3kgZm9yIGEgRmFzdCwgQ2hlYXAgYW5kIENvbnZpbmNpbmcgU3Vic3VyZmFjZSBTY2F0dGVyaW5nIExvb2tde0BsaW5rIGh0dHBzOi8vY29saW5iYXJyZWJyaXNlYm9pcy5jb20vMjAxMS8wMy8wNy9nZGMtMjAxMS1hcHByb3hpbWF0aW5nLXRyYW5zbHVjZW5jeS1mb3ItYS1mYXN0LWNoZWFwLWFuZC1jb252aW5jaW5nLXN1YnN1cmZhY2Utc2NhdHRlcmluZy1sb29rL31cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGlucHV0IC0gVGhlIGlucHV0IGRhdGEuXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRkaXJlY3QoIHsgbGlnaHREaXJlY3Rpb24sIGxpZ2h0Q29sb3IsIHJlZmxlY3RlZExpZ2h0IH0sIGJ1aWxkZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMudXNlU1NTID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCBtYXRlcmlhbCA9IGJ1aWxkZXIubWF0ZXJpYWw7XG5cblx0XHRcdGNvbnN0IHsgdGhpY2tuZXNzQ29sb3JOb2RlLCB0aGlja25lc3NEaXN0b3J0aW9uTm9kZSwgdGhpY2tuZXNzQW1iaWVudE5vZGUsIHRoaWNrbmVzc0F0dGVudWF0aW9uTm9kZSwgdGhpY2tuZXNzUG93ZXJOb2RlLCB0aGlja25lc3NTY2FsZU5vZGUgfSA9IG1hdGVyaWFsO1xuXG5cdFx0XHRjb25zdCBzY2F0dGVyaW5nSGFsZiA9IGxpZ2h0RGlyZWN0aW9uLmFkZCggdHJhbnNmb3JtZWROb3JtYWxWaWV3Lm11bCggdGhpY2tuZXNzRGlzdG9ydGlvbk5vZGUgKSApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0Y29uc3Qgc2NhdHRlcmluZ0RvdCA9IGZsb2F0KCBwb3NpdGlvblZpZXdEaXJlY3Rpb24uZG90KCBzY2F0dGVyaW5nSGFsZi5uZWdhdGUoKSApLnNhdHVyYXRlKCkucG93KCB0aGlja25lc3NQb3dlck5vZGUgKS5tdWwoIHRoaWNrbmVzc1NjYWxlTm9kZSApICk7XG5cdFx0XHRjb25zdCBzY2F0dGVyaW5nSWxsdSA9IHZlYzMoIHNjYXR0ZXJpbmdEb3QuYWRkKCB0aGlja25lc3NBbWJpZW50Tm9kZSApLm11bCggdGhpY2tuZXNzQ29sb3JOb2RlICkgKTtcblxuXHRcdFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZS5hZGRBc3NpZ24oIHNjYXR0ZXJpbmdJbGx1Lm11bCggdGhpY2tuZXNzQXR0ZW51YXRpb25Ob2RlLm11bCggbGlnaHRDb2xvciApICkgKTtcblxuXHRcdH1cblxuXHRcdHN1cGVyLmRpcmVjdCggeyBsaWdodERpcmVjdGlvbiwgbGlnaHRDb2xvciwgcmVmbGVjdGVkTGlnaHQgfSwgYnVpbGRlciApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoaXMgbm9kZSBtYXRlcmlhbCBpcyBhbiBleHBlcmltZW50YWwgZXh0ZW5zaW9uIG9mIHtAbGluayBNZXNoUGh5c2ljYWxOb2RlTWF0ZXJpYWx9XG4gKiB0aGF0IGltcGxlbWVudHMgYSBTdWJzdXJmYWNlIHNjYXR0ZXJpbmcgKFNTUykgdGVybS5cbiAqXG4gKiBAYXVnbWVudHMgTWVzaFBoeXNpY2FsTm9kZU1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hTU1NOb2RlTWF0ZXJpYWwgZXh0ZW5kcyBNZXNoUGh5c2ljYWxOb2RlTWF0ZXJpYWwge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTWVzaFNTU05vZGVNYXRlcmlhbCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2ggU1NTIG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCBwYXJhbWV0ZXJzICk7XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIHRoZSB0aGlja25lc3MgY29sb3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudGhpY2tuZXNzQ29sb3JOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIGRpc3RvcnRpb24gZmFjdG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnRoaWNrbmVzc0Rpc3RvcnRpb25Ob2RlID0gZmxvYXQoIDAuMSApO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgdGhpY2tuZXNzIGFtYmllbnQgZmFjdG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnRoaWNrbmVzc0FtYmllbnROb2RlID0gZmxvYXQoIDAuMCApO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgdGhpY2tuZXNzIGF0dGVudWF0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnRoaWNrbmVzc0F0dGVudWF0aW9uTm9kZSA9IGZsb2F0KCAuMSApO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgdGhpY2tuZXNzIHBvd2VyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPGZsb2F0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnRoaWNrbmVzc1Bvd2VyTm9kZSA9IGZsb2F0KCAyLjAgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIHRoaWNrbmVzcyBzY2FsZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICovXG5cdFx0dGhpcy50aGlja25lc3NTY2FsZU5vZGUgPSBmbG9hdCggMTAuMCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgbGlnaHRpbmcgbW9kZWwgc2hvdWxkIHVzZSBTU1Mgb3Igbm90LlxuXHQgKlxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICogQGRlZmF1bHQgdHJ1ZVxuXHQgKi9cblx0Z2V0IHVzZVNTUygpIHtcblxuXHRcdHJldHVybiB0aGlzLnRoaWNrbmVzc0NvbG9yTm9kZSAhPT0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgbGlnaHRpbmcgbW9kZWwuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1NTU0xpZ2h0aW5nTW9kZWx9IFRoZSBsaWdodGluZyBtb2RlbC5cblx0ICovXG5cdHNldHVwTGlnaHRpbmdNb2RlbCggLypidWlsZGVyKi8gKSB7XG5cblx0XHRyZXR1cm4gbmV3IFNTU0xpZ2h0aW5nTW9kZWwoIHRoaXMudXNlQ2xlYXJjb2F0LCB0aGlzLnVzZVNoZWVuLCB0aGlzLnVzZUlyaWRlc2NlbmNlLCB0aGlzLnVzZUFuaXNvdHJvcHksIHRoaXMudXNlVHJhbnNtaXNzaW9uLCB0aGlzLnVzZURpc3BlcnNpb24sIHRoaXMudXNlU1NTICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMudGhpY2tuZXNzQ29sb3JOb2RlID0gc291cmNlLnRoaWNrbmVzc0NvbG9yTm9kZTtcblx0XHR0aGlzLnRoaWNrbmVzc0Rpc3RvcnRpb25Ob2RlID0gc291cmNlLnRoaWNrbmVzc0Rpc3RvcnRpb25Ob2RlO1xuXHRcdHRoaXMudGhpY2tuZXNzQW1iaWVudE5vZGUgPSBzb3VyY2UudGhpY2tuZXNzQW1iaWVudE5vZGU7XG5cdFx0dGhpcy50aGlja25lc3NBdHRlbnVhdGlvbk5vZGUgPSBzb3VyY2UudGhpY2tuZXNzQXR0ZW51YXRpb25Ob2RlO1xuXHRcdHRoaXMudGhpY2tuZXNzUG93ZXJOb2RlID0gc291cmNlLnRoaWNrbmVzc1Bvd2VyTm9kZTtcblx0XHR0aGlzLnRoaWNrbmVzc1NjYWxlTm9kZSA9IHNvdXJjZS50aGlja25lc3NTY2FsZU5vZGU7XG5cblx0XHRyZXR1cm4gc3VwZXIuY29weSggc291cmNlICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lc2hTU1NOb2RlTWF0ZXJpYWw7XG4iLCJpbXBvcnQgTGlnaHRpbmdNb2RlbCBmcm9tICcuLi9jb3JlL0xpZ2h0aW5nTW9kZWwuanMnO1xuaW1wb3J0IEJSREZfTGFtYmVydCBmcm9tICcuL0JTREYvQlJERl9MYW1iZXJ0LmpzJztcbmltcG9ydCB7IGRpZmZ1c2VDb2xvciB9IGZyb20gJy4uL2NvcmUvUHJvcGVydHlOb2RlLmpzJztcbmltcG9ydCB7IG5vcm1hbEdlb21ldHJ5IH0gZnJvbSAnLi4vYWNjZXNzb3JzL05vcm1hbC5qcyc7XG5pbXBvcnQgeyBGbiwgZmxvYXQsIHZlYzIsIHZlYzMgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBtaXgsIHNtb290aHN0ZXAgfSBmcm9tICcuLi9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IG1hdGVyaWFsUmVmZXJlbmNlIH0gZnJvbSAnLi4vYWNjZXNzb3JzL01hdGVyaWFsUmVmZXJlbmNlTm9kZS5qcyc7XG5cbmNvbnN0IGdldEdyYWRpZW50SXJyYWRpYW5jZSA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBub3JtYWwsIGxpZ2h0RGlyZWN0aW9uLCBidWlsZGVyIH0gKSA9PiB7XG5cblx0Ly8gZG90Tkwgd2lsbCBiZSBmcm9tIC0xLjAgdG8gMS4wXG5cdGNvbnN0IGRvdE5MID0gbm9ybWFsLmRvdCggbGlnaHREaXJlY3Rpb24gKTtcblx0Y29uc3QgY29vcmQgPSB2ZWMyKCBkb3ROTC5tdWwoIDAuNSApLmFkZCggMC41ICksIDAuMCApO1xuXG5cdGlmICggYnVpbGRlci5tYXRlcmlhbC5ncmFkaWVudE1hcCApIHtcblxuXHRcdGNvbnN0IGdyYWRpZW50TWFwID0gbWF0ZXJpYWxSZWZlcmVuY2UoICdncmFkaWVudE1hcCcsICd0ZXh0dXJlJyApLmNvbnRleHQoIHsgZ2V0VVY6ICgpID0+IGNvb3JkIH0gKTtcblxuXHRcdHJldHVybiB2ZWMzKCBncmFkaWVudE1hcC5yICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGNvbnN0IGZ3ID0gY29vcmQuZndpZHRoKCkubXVsKCAwLjUgKTtcblxuXHRcdHJldHVybiBtaXgoIHZlYzMoIDAuNyApLCB2ZWMzKCAxLjAgKSwgc21vb3Roc3RlcCggZmxvYXQoIDAuNyApLnN1YiggZncueCApLCBmbG9hdCggMC43ICkuYWRkKCBmdy54ICksIGNvb3JkLnggKSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGxpZ2h0aW5nIG1vZGVsIGZvciBhIHRvb24gbWF0ZXJpYWwuIFVzZWQgaW4ge0BsaW5rIE1lc2hUb29uTm9kZU1hdGVyaWFsfS5cbiAqXG4gKiBAYXVnbWVudHMgTGlnaHRpbmdNb2RlbFxuICovXG5jbGFzcyBUb29uTGlnaHRpbmdNb2RlbCBleHRlbmRzIExpZ2h0aW5nTW9kZWwge1xuXG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIHRoZSBkaXJlY3QgbGlnaHRpbmcuIEluc3RlYWQgb2YgdXNpbmcgYSBjb252ZW50aW9uYWwgc21vb3RoIGlycmFkaWFuY2UsIHRoZSBpcnJhZGlhbmNlIGlzXG5cdCAqIHJlZHVjZWQgdG8gYSBzbWFsbCBudW1iZXIgb2YgZGlzY3JldGUgc2hhZGVzIHRvIGNyZWF0ZSBhIGNvbWljLWxpa2UsIGZsYXQgbG9vay5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGxpZ2h0RGF0YSAtIFRoZSBsaWdodCBkYXRhLlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0ZGlyZWN0KCB7IGxpZ2h0RGlyZWN0aW9uLCBsaWdodENvbG9yLCByZWZsZWN0ZWRMaWdodCB9LCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgaXJyYWRpYW5jZSA9IGdldEdyYWRpZW50SXJyYWRpYW5jZSggeyBub3JtYWw6IG5vcm1hbEdlb21ldHJ5LCBsaWdodERpcmVjdGlvbiwgYnVpbGRlciB9ICkubXVsKCBsaWdodENvbG9yICk7XG5cblx0XHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlLmFkZEFzc2lnbiggaXJyYWRpYW5jZS5tdWwoIEJSREZfTGFtYmVydCggeyBkaWZmdXNlQ29sb3I6IGRpZmZ1c2VDb2xvci5yZ2IgfSApICkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEltcGxlbWVudHMgdGhlIGluZGlyZWN0IGxpZ2h0aW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0aW5kaXJlY3QoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCB7IGFtYmllbnRPY2NsdXNpb24sIGlycmFkaWFuY2UsIHJlZmxlY3RlZExpZ2h0IH0gPSBidWlsZGVyLmNvbnRleHQ7XG5cblx0XHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UuYWRkQXNzaWduKCBpcnJhZGlhbmNlLm11bCggQlJERl9MYW1iZXJ0KCB7IGRpZmZ1c2VDb2xvciB9ICkgKSApO1xuXG5cdFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlLm11bEFzc2lnbiggYW1iaWVudE9jY2x1c2lvbiApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUb29uTGlnaHRpbmdNb2RlbDtcbiIsImltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi9Ob2RlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IFRvb25MaWdodGluZ01vZGVsIGZyb20gJy4uLy4uL25vZGVzL2Z1bmN0aW9ucy9Ub29uTGlnaHRpbmdNb2RlbC5qcyc7XG5cbmltcG9ydCB7IE1lc2hUb29uTWF0ZXJpYWwgfSBmcm9tICcuLi9NZXNoVG9vbk1hdGVyaWFsLmpzJztcblxuY29uc3QgX2RlZmF1bHRWYWx1ZXMgPSAvKkBfX1BVUkVfXyovIG5ldyBNZXNoVG9vbk1hdGVyaWFsKCk7XG5cbi8qKlxuICogTm9kZSBtYXRlcmlhbCB2ZXJzaW9uIG9mIHtAbGluayBNZXNoVG9vbk1hdGVyaWFsfS5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZU1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hUb29uTm9kZU1hdGVyaWFsIGV4dGVuZHMgTm9kZU1hdGVyaWFsIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ01lc2hUb29uTm9kZU1hdGVyaWFsJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbWVzaCB0b29uIG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzTWVzaFRvb25Ob2RlTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0IHRvIGB0cnVlYCBiZWNhdXNlIHRvb24gbWF0ZXJpYWxzIHJlYWN0IG9uIGxpZ2h0cy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0cyA9IHRydWU7XG5cblx0XHR0aGlzLnNldERlZmF1bHRWYWx1ZXMoIF9kZWZhdWx0VmFsdWVzICk7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBsaWdodGluZyBtb2RlbC5cblx0ICpcblx0ICogQHJldHVybiB7VG9vbkxpZ2h0aW5nTW9kZWx9IFRoZSBsaWdodGluZyBtb2RlbC5cblx0ICovXG5cdHNldHVwTGlnaHRpbmdNb2RlbCggLypidWlsZGVyKi8gKSB7XG5cblx0XHRyZXR1cm4gbmV3IFRvb25MaWdodGluZ01vZGVsKCk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lc2hUb29uTm9kZU1hdGVyaWFsO1xuIiwiaW1wb3J0IFRlbXBOb2RlIGZyb20gJy4uL2NvcmUvVGVtcE5vZGUuanMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtZWROb3JtYWxWaWV3IH0gZnJvbSAnLi4vYWNjZXNzb3JzL05vcm1hbC5qcyc7XG5pbXBvcnQgeyBwb3NpdGlvblZpZXdEaXJlY3Rpb24gfSBmcm9tICcuLi9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgbm9kZUltbXV0YWJsZSwgdmVjMiwgdmVjMyB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBDYW4gYmUgdXNlZCB0byBjb21wdXRlIHRleHR1cmUgY29vcmRpbmF0ZXMgZm9yIHByb2plY3RpbmcgYVxuICogbWF0Y2FwIG9udG8gYSBtZXNoLiBVc2VkIGJ5IHtAbGluayBNZXNoTWF0Y2FwTm9kZU1hdGVyaWFsfS5cbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgTWF0Y2FwVVZOb2RlIGV4dGVuZHMgVGVtcE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTWF0Y2FwVVZOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbWF0Y2FwIHV2IG5vZGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCAndmVjMicgKTtcblxuXHR9XG5cblx0c2V0dXAoKSB7XG5cblx0XHRjb25zdCB4ID0gdmVjMyggcG9zaXRpb25WaWV3RGlyZWN0aW9uLnosIDAsIHBvc2l0aW9uVmlld0RpcmVjdGlvbi54Lm5lZ2F0ZSgpICkubm9ybWFsaXplKCk7XG5cdFx0Y29uc3QgeSA9IHBvc2l0aW9uVmlld0RpcmVjdGlvbi5jcm9zcyggeCApO1xuXG5cdFx0cmV0dXJuIHZlYzIoIHguZG90KCB0cmFuc2Zvcm1lZE5vcm1hbFZpZXcgKSwgeS5kb3QoIHRyYW5zZm9ybWVkTm9ybWFsVmlldyApICkubXVsKCAwLjQ5NSApLmFkZCggMC41ICk7IC8vIDAuNDk1IHRvIHJlbW92ZSBhcnRpZmFjdHMgY2F1c2VkIGJ5IHVuZGVyc2l6ZWQgbWF0Y2FwIGRpc2tzXG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hdGNhcFVWTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgbWF0Y2FwIHV2IG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7TWF0Y2FwVVZOb2RlfVxuICovXG5leHBvcnQgY29uc3QgbWF0Y2FwVVYgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIE1hdGNhcFVWTm9kZSApO1xuIiwiaW1wb3J0IE5vZGVNYXRlcmlhbCBmcm9tICcuL05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBtYXRlcmlhbFJlZmVyZW5jZSB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9NYXRlcmlhbFJlZmVyZW5jZU5vZGUuanMnO1xuaW1wb3J0IHsgZGlmZnVzZUNvbG9yIH0gZnJvbSAnLi4vLi4vbm9kZXMvY29yZS9Qcm9wZXJ0eU5vZGUuanMnO1xuaW1wb3J0IHsgdmVjMyB9IGZyb20gJy4uLy4uL25vZGVzL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IG1peCB9IGZyb20gJy4uLy4uL25vZGVzL21hdGgvTWF0aE5vZGUuanMnO1xuaW1wb3J0IHsgbWF0Y2FwVVYgfSBmcm9tICcuLi8uLi9ub2Rlcy91dGlscy9NYXRjYXBVVk5vZGUuanMnO1xuXG5pbXBvcnQgeyBNZXNoTWF0Y2FwTWF0ZXJpYWwgfSBmcm9tICcuLi9NZXNoTWF0Y2FwTWF0ZXJpYWwuanMnO1xuXG5jb25zdCBfZGVmYXVsdFZhbHVlcyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1lc2hNYXRjYXBNYXRlcmlhbCgpO1xuXG4vKipcbiAqIE5vZGUgbWF0ZXJpYWwgdmVyc2lvbiBvZiB7QGxpbmsgTWVzaE1hdGNhcE1hdGVyaWFsfS5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZU1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hNYXRjYXBOb2RlTWF0ZXJpYWwgZXh0ZW5kcyBOb2RlTWF0ZXJpYWwge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnTWVzaE1hdGNhcE5vZGVNYXRlcmlhbCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2ggbm9ybWFsIG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzTWVzaE1hdGNhcE5vZGVNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnNldERlZmF1bHRWYWx1ZXMoIF9kZWZhdWx0VmFsdWVzICk7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBtYXRjYXAgc3BlY2lmaWMgbm9kZSB2YXJpYWJsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cFZhcmlhbnRzKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgdXYgPSBtYXRjYXBVVjtcblxuXHRcdGxldCBtYXRjYXBDb2xvcjtcblxuXHRcdGlmICggYnVpbGRlci5tYXRlcmlhbC5tYXRjYXAgKSB7XG5cblx0XHRcdG1hdGNhcENvbG9yID0gbWF0ZXJpYWxSZWZlcmVuY2UoICdtYXRjYXAnLCAndGV4dHVyZScgKS5jb250ZXh0KCB7IGdldFVWOiAoKSA9PiB1diB9ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRtYXRjYXBDb2xvciA9IHZlYzMoIG1peCggMC4yLCAwLjgsIHV2LnkgKSApOyAvLyBkZWZhdWx0IGlmIG1hdGNhcCBpcyBtaXNzaW5nXG5cblx0XHR9XG5cblx0XHRkaWZmdXNlQ29sb3IucmdiLm11bEFzc2lnbiggbWF0Y2FwQ29sb3IucmdiICk7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVzaE1hdGNhcE5vZGVNYXRlcmlhbDtcbiIsImltcG9ydCBUZW1wTm9kZSBmcm9tICcuLi9jb3JlL1RlbXBOb2RlLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSwgdmVjNCwgbWF0MiwgbWF0NCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IGNvcywgc2luIH0gZnJvbSAnLi4vbWF0aC9NYXRoTm9kZS5qcyc7XG5cbi8qKlxuICogQXBwbGllcyBhIHJvdGF0aW9uIHRvIHRoZSBnaXZlbiBwb3NpdGlvbiBub2RlLlxuICpcbiAqIEBhdWdtZW50cyBUZW1wTm9kZVxuICovXG5jbGFzcyBSb3RhdGVOb2RlIGV4dGVuZHMgVGVtcE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnUm90YXRlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJvdGF0ZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IHBvc2l0aW9uTm9kZSAtIFRoZSBwb3NpdGlvbiBub2RlLlxuXHQgKiBAcGFyYW0ge05vZGV9IHJvdGF0aW9uTm9kZSAtIFJlcHJlc2VudHMgdGhlIHJvdGF0aW9uIHRoYXQgaXMgYXBwbGllZCB0byB0aGUgcG9zaXRpb24gbm9kZS4gRGVwZW5kaW5nXG5cdCAqIG9uIHdoZXRoZXIgdGhlIHBvc2l0aW9uIGRhdGEgYXJlIDJEIG9yIDNELCB0aGUgcm90YXRpb24gaXMgZXhwcmVzc2VkIGEgc2luZ2xlIGZsb2F0IHZhbHVlIG9yIGFuIEV1bGVyIHZhbHVlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBvc2l0aW9uTm9kZSwgcm90YXRpb25Ob2RlICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwb3NpdGlvbiBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5wb3NpdGlvbk5vZGUgPSBwb3NpdGlvbk5vZGU7XG5cblx0XHQvKipcblx0XHQgKiAgUmVwcmVzZW50cyB0aGUgcm90YXRpb24gdGhhdCBpcyBhcHBsaWVkIHRvIHRoZSBwb3NpdGlvbiBub2RlLlxuXHRcdCAqICBEZXBlbmRpbmcgb24gd2hldGhlciB0aGUgcG9zaXRpb24gZGF0YSBhcmUgMkQgb3IgM0QsIHRoZSByb3RhdGlvbiBpcyBleHByZXNzZWQgYSBzaW5nbGUgZmxvYXQgdmFsdWUgb3IgYW4gRXVsZXIgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnJvdGF0aW9uTm9kZSA9IHJvdGF0aW9uTm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSB0eXBlIG9mIHRoZSB7QGxpbmsgUm90YXRlTm9kZSNwb3NpdGlvbk5vZGV9IGRlZmluZXMgdGhlIG5vZGUncyB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlJ3MgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMucG9zaXRpb25Ob2RlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyByb3RhdGlvbk5vZGUsIHBvc2l0aW9uTm9kZSB9ID0gdGhpcztcblxuXHRcdGNvbnN0IG5vZGVUeXBlID0gdGhpcy5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXG5cdFx0aWYgKCBub2RlVHlwZSA9PT0gJ3ZlYzInICkge1xuXG5cdFx0XHRjb25zdCBjb3NBbmdsZSA9IHJvdGF0aW9uTm9kZS5jb3MoKTtcblx0XHRcdGNvbnN0IHNpbkFuZ2xlID0gcm90YXRpb25Ob2RlLnNpbigpO1xuXG5cdFx0XHRjb25zdCByb3RhdGlvbk1hdHJpeCA9IG1hdDIoXG5cdFx0XHRcdGNvc0FuZ2xlLCBzaW5BbmdsZSxcblx0XHRcdFx0c2luQW5nbGUubmVnYXRlKCksIGNvc0FuZ2xlXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gcm90YXRpb25NYXRyaXgubXVsKCBwb3NpdGlvbk5vZGUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHJvdGF0aW9uID0gcm90YXRpb25Ob2RlO1xuXHRcdFx0Y29uc3Qgcm90YXRpb25YTWF0cml4ID0gbWF0NCggdmVjNCggMS4wLCAwLjAsIDAuMCwgMC4wICksIHZlYzQoIDAuMCwgY29zKCByb3RhdGlvbi54ICksIHNpbiggcm90YXRpb24ueCApLm5lZ2F0ZSgpLCAwLjAgKSwgdmVjNCggMC4wLCBzaW4oIHJvdGF0aW9uLnggKSwgY29zKCByb3RhdGlvbi54ICksIDAuMCApLCB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKSApO1xuXHRcdFx0Y29uc3Qgcm90YXRpb25ZTWF0cml4ID0gbWF0NCggdmVjNCggY29zKCByb3RhdGlvbi55ICksIDAuMCwgc2luKCByb3RhdGlvbi55ICksIDAuMCApLCB2ZWM0KCAwLjAsIDEuMCwgMC4wLCAwLjAgKSwgdmVjNCggc2luKCByb3RhdGlvbi55ICkubmVnYXRlKCksIDAuMCwgY29zKCByb3RhdGlvbi55ICksIDAuMCApLCB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKSApO1xuXHRcdFx0Y29uc3Qgcm90YXRpb25aTWF0cml4ID0gbWF0NCggdmVjNCggY29zKCByb3RhdGlvbi56ICksIHNpbiggcm90YXRpb24ueiApLm5lZ2F0ZSgpLCAwLjAsIDAuMCApLCB2ZWM0KCBzaW4oIHJvdGF0aW9uLnogKSwgY29zKCByb3RhdGlvbi56ICksIDAuMCwgMC4wICksIHZlYzQoIDAuMCwgMC4wLCAxLjAsIDAuMCApLCB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKSApO1xuXG5cdFx0XHRyZXR1cm4gcm90YXRpb25YTWF0cml4Lm11bCggcm90YXRpb25ZTWF0cml4ICkubXVsKCByb3RhdGlvblpNYXRyaXggKS5tdWwoIHZlYzQoIHBvc2l0aW9uTm9kZSwgMS4wICkgKS54eXo7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdGF0ZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHJvdGF0ZSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBwb3NpdGlvbk5vZGUgLSBUaGUgcG9zaXRpb24gbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gcm90YXRpb25Ob2RlIC0gUmVwcmVzZW50cyB0aGUgcm90YXRpb24gdGhhdCBpcyBhcHBsaWVkIHRvIHRoZSBwb3NpdGlvbiBub2RlLiBEZXBlbmRpbmdcbiAqIG9uIHdoZXRoZXIgdGhlIHBvc2l0aW9uIGRhdGEgYXJlIDJEIG9yIDNELCB0aGUgcm90YXRpb24gaXMgZXhwcmVzc2VkIGEgc2luZ2xlIGZsb2F0IHZhbHVlIG9yIGFuIEV1bGVyIHZhbHVlLlxuICogQHJldHVybnMge1JvdGF0ZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCByb3RhdGUgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggUm90YXRlTm9kZSApO1xuIiwiaW1wb3J0IE5vZGVNYXRlcmlhbCBmcm9tICcuL05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBjYW1lcmFQcm9qZWN0aW9uTWF0cml4IH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL0NhbWVyYS5qcyc7XG5pbXBvcnQgeyBtYXRlcmlhbFJvdGF0aW9uIH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL01hdGVyaWFsTm9kZS5qcyc7XG5pbXBvcnQgeyBtb2RlbFZpZXdNYXRyaXgsIG1vZGVsV29ybGRNYXRyaXggfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTW9kZWxOb2RlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uR2VvbWV0cnkgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgcm90YXRlIH0gZnJvbSAnLi4vLi4vbm9kZXMvdXRpbHMvUm90YXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBmbG9hdCwgdmVjMiwgdmVjMywgdmVjNCB9IGZyb20gJy4uLy4uL25vZGVzL3RzbC9UU0xCYXNlLmpzJztcblxuaW1wb3J0IHsgU3ByaXRlTWF0ZXJpYWwgfSBmcm9tICcuLi9TcHJpdGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyByZWZlcmVuY2UgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvUmVmZXJlbmNlQmFzZU5vZGUuanMnO1xuXG5jb25zdCBfZGVmYXVsdFZhbHVlcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFNwcml0ZU1hdGVyaWFsKCk7XG5cbi8qKlxuICogTm9kZSBtYXRlcmlhbCB2ZXJzaW9uIG9mIHtAbGluayBTcHJpdGVNYXRlcmlhbH0uXG4gKlxuICogQGF1Z21lbnRzIE5vZGVNYXRlcmlhbFxuICovXG5jbGFzcyBTcHJpdGVOb2RlTWF0ZXJpYWwgZXh0ZW5kcyBOb2RlTWF0ZXJpYWwge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU3ByaXRlTm9kZU1hdGVyaWFsJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc3ByaXRlIG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU3ByaXRlTm9kZU1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3VzZVNpemVBdHRlbnVhdGlvbiA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIHByb3BlcnR5IG1ha2VzIGl0IHBvc3NpYmxlIHRvIGRlZmluZSB0aGUgcG9zaXRpb24gb2YgdGhlIHNwcml0ZSB3aXRoIGFcblx0XHQgKiBub2RlLiBUaGF0IGNhbiBiZSB1c2VmdWwgd2hlbiB0aGUgbWF0ZXJpYWwgaXMgdXNlZCB3aXRoIGluc3RhbmNlZCByZW5kZXJpbmdcblx0XHQgKiBhbmQgbm9kZSBkYXRhIGFyZSBkZWZpbmVkIHdpdGggYW4gaW5zdGFuY2VkIGF0dHJpYnV0ZSBub2RlOlxuXHRcdCAqIGBgYGpzXG5cdFx0ICogY29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvbnMgKSwgMyApO1xuXHRcdCAqIG1hdGVyaWFsLnBvc2l0aW9uTm9kZSA9IGluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUgKTtcblx0XHQgKiBgYGBcblx0XHQgKiBBbm90aGVyIHBvc3NpYmlsaXR5IGlzIHRvIGNvbXB1dGUgdGhlIGluc3RhbmNlZCBkYXRhIHdpdGggYSBjb21wdXRlIHNoYWRlcjpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIGNvbnN0IHBvc2l0aW9uQnVmZmVyID0gaW5zdGFuY2VkQXJyYXkoIHBhcnRpY2xlQ291bnQsICd2ZWMzJyApO1xuXHRcdCAqIHBhcnRpY2xlTWF0ZXJpYWwucG9zaXRpb25Ob2RlID0gcG9zaXRpb25CdWZmZXIudG9BdHRyaWJ1dGUoKTtcblx0XHQgKiBgYGBcblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTx2ZWMyPn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5wb3NpdGlvbk5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJvdGF0aW9uIG9mIHNwcml0ZSBtYXRlcmlhbHMgaXMgYnkgZGVmYXVsdCBpbmZlcnJlZCBmcm9tIHRoZSBgcm90YXRpb25gLFxuXHRcdCAqIHByb3BlcnR5LiBUaGlzIG5vZGUgcHJvcGVydHkgYWxsb3dzIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCBhbmQgZGVmaW5lXG5cdFx0ICogdGhlIHJvdGF0aW9uIHdpdGggYSBub2RlIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgdGhlIHJvdGF0aW9uIGJ1dCBtb2RpZnkgdGhlIGV4aXN0aW5nXG5cdFx0ICogdmFsdWUgaW5zdGVhZCwgdXNlIHtAbGluayBtYXRlcmlhbFJvdGF0aW9ufS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucm90YXRpb25Ob2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgbm9kZSBwcm9wZXJ0eSBwcm92aWRlcyBhbiBhZGRpdGlvbmFsIHdheSB0byBzY2FsZSBzcHJpdGVzIG5leHQgdG9cblx0XHQgKiBgT2JqZWN0M0Quc2NhbGVgLiBUaGUgc2NhbGUgdHJhbnNmb3JtYXRpb24gYmFzZWQgaW4gYE9iamVjdDNELnNjYWxlYFxuXHRcdCAqIGlzIG11bHRpcGxpZWQgd2l0aCB0aGUgc2NhbGUgdmFsdWUgb2YgdGhpcyBub2RlIGluIHRoZSB2ZXJ0ZXggc2hhZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlPHZlYzI+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnNjYWxlTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBJbiBTcHJpdGVzLCB0aGUgdHJhbnNwYXJlbnQgcHJvcGVydHkgaXMgZW5hYmxlZCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXREZWZhdWx0VmFsdWVzKCBfZGVmYXVsdFZhbHVlcyApO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgcG9zaXRpb24gbm9kZSBpbiB2aWV3IHNwYWNlLiBUaGlzIG1ldGhvZCBpbXBsZW1lbnRzXG5cdCAqIHRoZSBzcHJpdGUgc3BlY2lmaWMgdmVydGV4IHNoYWRlci5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHBvc2l0aW9uIGluIHZpZXcgc3BhY2UuXG5cdCAqL1xuXHRzZXR1cFBvc2l0aW9uVmlldyggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHsgb2JqZWN0LCBjYW1lcmEgfSA9IGJ1aWxkZXI7XG5cblx0XHRjb25zdCBzaXplQXR0ZW51YXRpb24gPSB0aGlzLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdGNvbnN0IHsgcG9zaXRpb25Ob2RlLCByb3RhdGlvbk5vZGUsIHNjYWxlTm9kZSB9ID0gdGhpcztcblxuXHRcdGNvbnN0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXgubXVsKCB2ZWMzKCBwb3NpdGlvbk5vZGUgfHwgMCApICk7XG5cblx0XHRsZXQgc2NhbGUgPSB2ZWMyKCBtb2RlbFdvcmxkTWF0cml4WyAwIF0ueHl6Lmxlbmd0aCgpLCBtb2RlbFdvcmxkTWF0cml4WyAxIF0ueHl6Lmxlbmd0aCgpICk7XG5cblx0XHRpZiAoIHNjYWxlTm9kZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0c2NhbGUgPSBzY2FsZS5tdWwoIHZlYzIoIHNjYWxlTm9kZSApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHNpemVBdHRlbnVhdGlvbiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGlmICggY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdFx0c2NhbGUgPSBzY2FsZS5tdWwoIG12UG9zaXRpb24uei5uZWdhdGUoKSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IG9ydGhvU2NhbGUgPSBmbG9hdCggMi4wICkuZGl2KCBjYW1lcmFQcm9qZWN0aW9uTWF0cml4LmVsZW1lbnQoIDEgKS5lbGVtZW50KCAxICkgKTtcblx0XHRcdFx0c2NhbGUgPSBzY2FsZS5tdWwoIG9ydGhvU2NhbGUubXVsKCAyICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0bGV0IGFsaWduZWRQb3NpdGlvbiA9IHBvc2l0aW9uR2VvbWV0cnkueHk7XG5cblx0XHRpZiAoIG9iamVjdC5jZW50ZXIgJiYgb2JqZWN0LmNlbnRlci5pc1ZlY3RvcjIgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGNlbnRlciA9IHJlZmVyZW5jZSggJ2NlbnRlcicsICd2ZWMyJywgb2JqZWN0ICk7XG5cblx0XHRcdGFsaWduZWRQb3NpdGlvbiA9IGFsaWduZWRQb3NpdGlvbi5zdWIoIGNlbnRlci5zdWIoIDAuNSApICk7XG5cblx0XHR9XG5cblx0XHRhbGlnbmVkUG9zaXRpb24gPSBhbGlnbmVkUG9zaXRpb24ubXVsKCBzY2FsZSApO1xuXG5cdFx0Y29uc3Qgcm90YXRpb24gPSBmbG9hdCggcm90YXRpb25Ob2RlIHx8IG1hdGVyaWFsUm90YXRpb24gKTtcblxuXHRcdGNvbnN0IHJvdGF0ZWRQb3NpdGlvbiA9IHJvdGF0ZSggYWxpZ25lZFBvc2l0aW9uLCByb3RhdGlvbiApO1xuXG5cdFx0cmV0dXJuIHZlYzQoIG12UG9zaXRpb24ueHkuYWRkKCByb3RhdGVkUG9zaXRpb24gKSwgbXZQb3NpdGlvbi56dyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLnBvc2l0aW9uTm9kZSA9IHNvdXJjZS5wb3NpdGlvbk5vZGU7XG5cdFx0dGhpcy5yb3RhdGlvbk5vZGUgPSBzb3VyY2Uucm90YXRpb25Ob2RlO1xuXHRcdHRoaXMuc2NhbGVOb2RlID0gc291cmNlLnNjYWxlTm9kZTtcblxuXHRcdHJldHVybiBzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdG8gdXNlIHNpemUgYXR0ZW51YXRpb24gb3Igbm90LlxuXHQgKlxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICogQGRlZmF1bHQgdHJ1ZVxuXHQgKi9cblx0Z2V0IHNpemVBdHRlbnVhdGlvbigpIHtcblxuXHRcdHJldHVybiB0aGlzLl91c2VTaXplQXR0ZW51YXRpb247XG5cblx0fVxuXG5cdHNldCBzaXplQXR0ZW51YXRpb24oIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl91c2VTaXplQXR0ZW51YXRpb24gIT09IHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl91c2VTaXplQXR0ZW51YXRpb24gPSB2YWx1ZTtcblx0XHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTcHJpdGVOb2RlTWF0ZXJpYWw7XG4iLCJpbXBvcnQgU3ByaXRlTm9kZU1hdGVyaWFsIGZyb20gJy4vU3ByaXRlTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSAnLi4vLi4vbm9kZXMvZGlzcGxheS9TY3JlZW5Ob2RlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uR2VvbWV0cnksIHBvc2l0aW9uTG9jYWwsIHBvc2l0aW9uVmlldyB9IGZyb20gJy4uLy4uL25vZGVzL2FjY2Vzc29ycy9Qb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBtb2RlbFZpZXdNYXRyaXggfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTW9kZWxOb2RlLmpzJztcbmltcG9ydCB7IG1hdGVyaWFsUG9pbnRTaXplIH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL01hdGVyaWFsTm9kZS5qcyc7XG5pbXBvcnQgeyByb3RhdGUgfSBmcm9tICcuLi8uLi9ub2Rlcy91dGlscy9Sb3RhdGVOb2RlLmpzJztcbmltcG9ydCB7IGZsb2F0LCB2ZWMyLCB2ZWMzLCB2ZWM0IH0gZnJvbSAnLi4vLi4vbm9kZXMvdHNsL1RTTEJhc2UuanMnO1xuXG5pbXBvcnQgeyBQb2ludHNNYXRlcmlhbCB9IGZyb20gJy4uL1BvaW50c01hdGVyaWFsLmpzJztcblxuY29uc3QgX2RlZmF1bHRWYWx1ZXMgPSAvKkBfX1BVUkVfXyovIG5ldyBQb2ludHNNYXRlcmlhbCgpO1xuXG4vKipcbiAqIE5vZGUgbWF0ZXJpYWwgdmVyc2lvbiBvZiB7QGxpbmsgUG9pbnRzTWF0ZXJpYWx9LlxuICpcbiAqIEBhdWdtZW50cyBTcHJpdGVOb2RlTWF0ZXJpYWxcbiAqL1xuY2xhc3MgUG9pbnRzTm9kZU1hdGVyaWFsIGV4dGVuZHMgU3ByaXRlTm9kZU1hdGVyaWFsIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1BvaW50c05vZGVNYXRlcmlhbCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBvaW50cyBub2RlIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBub2RlIHByb3BlcnR5IHByb3ZpZGVzIGFuIGFkZGl0aW9uYWwgd2F5IHRvIHNldCB0aGUgcG9pbnQgc2l6ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZTx2ZWMyPn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zaXplTm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUG9pbnRzTm9kZU1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMuc2V0RGVmYXVsdFZhbHVlcyggX2RlZmF1bHRWYWx1ZXMgKTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdHNldHVwUG9zaXRpb25WaWV3KCkge1xuXG5cdFx0Y29uc3QgeyBwb3NpdGlvbk5vZGUgfSA9IHRoaXM7XG5cblx0XHRyZXR1cm4gbW9kZWxWaWV3TWF0cml4Lm11bCggdmVjMyggcG9zaXRpb25Ob2RlIHx8IHBvc2l0aW9uTG9jYWwgKSApLnh5ejtcblxuXHR9XG5cblx0c2V0dXBWZXJ0ZXgoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBtdnAgPSBzdXBlci5zZXR1cFZlcnRleCggYnVpbGRlciApO1xuXG5cdFx0Ly8gc2tpcCBmdXJ0aGVyIHByb2Nlc3NpbmcgaWYgdGhlIG1hdGVyaWFsIGlzIG5vdCBhIG5vZGUgbWF0ZXJpYWxcblxuXHRcdGlmICggYnVpbGRlci5tYXRlcmlhbC5pc05vZGVNYXRlcmlhbCAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0cmV0dXJuIG12cDtcblxuXHRcdH1cblxuXHRcdC8vIG5kYyBzcGFjZVxuXG5cdFx0Y29uc3QgeyByb3RhdGlvbk5vZGUsIHNjYWxlTm9kZSwgc2l6ZU5vZGUgfSA9IHRoaXM7XG5cblx0XHRjb25zdCBhbGlnbmVkUG9zaXRpb24gPSBwb3NpdGlvbkdlb21ldHJ5Lnh5LnRvVmFyKCk7XG5cdFx0Y29uc3QgYXNwZWN0ID0gdmlld3BvcnQuei5kaXYoIHZpZXdwb3J0LncgKTtcblxuXHRcdC8vIHJvdGF0aW9uXG5cblx0XHRpZiAoIHJvdGF0aW9uTm9kZSAmJiByb3RhdGlvbk5vZGUuaXNOb2RlICkge1xuXG5cdFx0XHRjb25zdCByb3RhdGlvbiA9IGZsb2F0KCByb3RhdGlvbk5vZGUgKTtcblxuXHRcdFx0YWxpZ25lZFBvc2l0aW9uLmFzc2lnbiggcm90YXRlKCBhbGlnbmVkUG9zaXRpb24sIHJvdGF0aW9uICkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHBvaW50IHNpemVcblxuXHRcdGxldCBwb2ludFNpemUgPSBzaXplTm9kZSAhPT0gbnVsbCA/IHZlYzIoIHNpemVOb2RlICkgOiBtYXRlcmlhbFBvaW50U2l6ZTtcblxuXHRcdGlmICggdGhpcy5zaXplQXR0ZW51YXRpb24gPT09IHRydWUgKSB7XG5cblx0XHRcdHBvaW50U2l6ZSA9IHBvaW50U2l6ZS5tdWwoIHBvaW50U2l6ZS5kaXYoIHBvc2l0aW9uVmlldy56Lm5lZ2F0ZSgpICkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHNjYWxlXG5cblx0XHRpZiAoIHNjYWxlTm9kZSAmJiBzY2FsZU5vZGUuaXNOb2RlICkge1xuXG5cdFx0XHRwb2ludFNpemUgPSBwb2ludFNpemUubXVsKCB2ZWMyKCBzY2FsZU5vZGUgKSApO1xuXG5cdFx0fVxuXG5cdFx0YWxpZ25lZFBvc2l0aW9uLm11bEFzc2lnbiggcG9pbnRTaXplLm11bCggMiApICk7XG5cblx0XHRhbGlnbmVkUG9zaXRpb24uYXNzaWduKCBhbGlnbmVkUG9zaXRpb24uZGl2KCB2aWV3cG9ydC56ICkgKTtcblx0XHRhbGlnbmVkUG9zaXRpb24ueS5hc3NpZ24oIGFsaWduZWRQb3NpdGlvbi55Lm11bCggYXNwZWN0ICkgKTtcblxuXHRcdC8vIGJhY2sgdG8gY2xpcCBzcGFjZVxuXHRcdGFsaWduZWRQb3NpdGlvbi5hc3NpZ24oIGFsaWduZWRQb3NpdGlvbi5tdWwoIG12cC53ICkgKTtcblxuXHRcdC8vY2xpcFBvcy54eSArPSBvZmZzZXQ7XG5cdFx0bXZwLmFkZEFzc2lnbiggdmVjNCggYWxpZ25lZFBvc2l0aW9uLCAwLCAwICkgKTtcblxuXHRcdHJldHVybiBtdnA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIGFscGhhIHRvIGNvdmVyYWdlIHNob3VsZCBiZSB1c2VkIG9yIG5vdC5cblx0ICpcblx0ICogQHR5cGUge2Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IHRydWVcblx0ICovXG5cdGdldCBhbHBoYVRvQ292ZXJhZ2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fdXNlQWxwaGFUb0NvdmVyYWdlO1xuXG5cdH1cblxuXHRzZXQgYWxwaGFUb0NvdmVyYWdlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fdXNlQWxwaGFUb0NvdmVyYWdlICE9PSB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5fdXNlQWxwaGFUb0NvdmVyYWdlID0gdmFsdWU7XG5cdFx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9pbnRzTm9kZU1hdGVyaWFsO1xuIiwiaW1wb3J0IExpZ2h0aW5nTW9kZWwgZnJvbSAnLi4vY29yZS9MaWdodGluZ01vZGVsLmpzJztcbmltcG9ydCB7IGRpZmZ1c2VDb2xvciB9IGZyb20gJy4uL2NvcmUvUHJvcGVydHlOb2RlLmpzJztcbmltcG9ydCB7IGZsb2F0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgbGlnaHRpbmcgbW9kZWwgZm9yIGEgc2hhZG93IG1hdGVyaWFsLiBVc2VkIGluIHtAbGluayBTaGFkb3dOb2RlTWF0ZXJpYWx9LlxuICpcbiAqIEBhdWdtZW50cyBMaWdodGluZ01vZGVsXG4gKi9cbmNsYXNzIFNoYWRvd01hc2tNb2RlbCBleHRlbmRzIExpZ2h0aW5nTW9kZWwge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHNoYWRvdyBtYXNrIG1vZGVsLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNoYWRvdyBtYXNrIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnNoYWRvd05vZGUgPSBmbG9hdCggMSApLnRvVmFyKCAnc2hhZG93TWFzaycgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE9ubHkgdXNlZCB0byBzYXZlIHRoZSBzaGFkb3cgbWFzay5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGlucHV0IC0gVGhlIGlucHV0IGRhdGEuXG5cdCAqL1xuXHRkaXJlY3QoIHsgc2hhZG93TWFzayB9ICkge1xuXG5cdFx0dGhpcy5zaGFkb3dOb2RlLm11bEFzc2lnbiggc2hhZG93TWFzayApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXNlcyB0aGUgc2hhZG93IG1hc2sgdG8gcHJvZHVjZSB0aGUgZmluYWwgY29sb3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29udGV4dE5vZGV9IGNvbnRleHQgLSBUaGUgY3VycmVudCBub2RlIGNvbnRleHQuXG5cdCAqL1xuXHRmaW5pc2goIGNvbnRleHQgKSB7XG5cblx0XHRkaWZmdXNlQ29sb3IuYS5tdWxBc3NpZ24oIHRoaXMuc2hhZG93Tm9kZS5vbmVNaW51cygpICk7XG5cblx0XHRjb250ZXh0Lm91dGdvaW5nTGlnaHQucmdiLmFzc2lnbiggZGlmZnVzZUNvbG9yLnJnYiApOyAvLyBUT0RPOiBPcHRpbWl6ZSBMaWdodHNOb2RlIHRvIGF2b2lkIHRoaXMgYXNzaWdubWVudFxuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTaGFkb3dNYXNrTW9kZWw7XG4iLCJpbXBvcnQgTm9kZU1hdGVyaWFsIGZyb20gJy4vTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCBTaGFkb3dNYXNrTW9kZWwgZnJvbSAnLi4vLi4vbm9kZXMvZnVuY3Rpb25zL1NoYWRvd01hc2tNb2RlbC5qcyc7XG5cbmltcG9ydCB7IFNoYWRvd01hdGVyaWFsIH0gZnJvbSAnLi4vU2hhZG93TWF0ZXJpYWwuanMnO1xuXG5jb25zdCBfZGVmYXVsdFZhbHVlcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFNoYWRvd01hdGVyaWFsKCk7XG5cbi8qKlxuICogTm9kZSBtYXRlcmlhbCB2ZXJzaW9uIG9mIHtAbGluayBTaGFkb3dNYXRlcmlhbH0uXG4gKlxuICogQGF1Z21lbnRzIE5vZGVNYXRlcmlhbFxuICovXG5jbGFzcyBTaGFkb3dOb2RlTWF0ZXJpYWwgZXh0ZW5kcyBOb2RlTWF0ZXJpYWwge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU2hhZG93Tm9kZU1hdGVyaWFsJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc2hhZG93IG5vZGUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU2hhZG93Tm9kZU1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldCB0byBgdHJ1ZWAgYmVjYXVzZSBzbyBpdCdzIHBvc3NpYmxlIHRvIGltcGxlbWVudFxuXHRcdCAqIHRoZSBzaGFkb3cgbWFzayBlZmZlY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5saWdodHMgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXREZWZhdWx0VmFsdWVzKCBfZGVmYXVsdFZhbHVlcyApO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgbGlnaHRpbmcgbW9kZWwuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1NoYWRvd01hc2tNb2RlbH0gVGhlIGxpZ2h0aW5nIG1vZGVsLlxuXHQgKi9cblx0c2V0dXBMaWdodGluZ01vZGVsKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiBuZXcgU2hhZG93TWFza01vZGVsKCk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNoYWRvd05vZGVNYXRlcmlhbDtcbiIsImltcG9ydCBMaWdodGluZ01vZGVsIGZyb20gJy4uL2NvcmUvTGlnaHRpbmdNb2RlbC5qcyc7XG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gJy4uL2NvcmUvUHJvcGVydHlOb2RlLmpzJztcbmltcG9ydCB7IGZsb2F0LCBJZiwgdW5pZm9ybSwgdmVjMywgdmVjNCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uV29ybGQgfSBmcm9tICcuLi9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgY2FtZXJhRmFyLCBjYW1lcmFOZWFyLCBjYW1lcmFQb3NpdGlvbiwgY2FtZXJhVmlld01hdHJpeCB9IGZyb20gJy4uL2FjY2Vzc29ycy9DYW1lcmEuanMnO1xuaW1wb3J0IHsgTG9vcCB9IGZyb20gJy4uL3V0aWxzL0xvb3BOb2RlLmpzJztcbmltcG9ydCB7IGxpbmVhckRlcHRoLCB2aWV3WlRvUGVyc3BlY3RpdmVEZXB0aCB9IGZyb20gJy4uL2Rpc3BsYXkvVmlld3BvcnREZXB0aE5vZGUuanMnO1xuaW1wb3J0IHsgbW9kZWxSYWRpdXMgfSBmcm9tICcuLi9hY2Nlc3NvcnMvTW9kZWxOb2RlLmpzJztcbmltcG9ydCB7IExUQ19FdmFsdWF0ZV9Wb2x1bWUgfSBmcm9tICcuL0JTREYvTFRDLmpzJztcblxuY29uc3Qgc2NhdHRlcmluZ0RlbnNpdHkgPSBwcm9wZXJ0eSggJ3ZlYzMnICk7XG5jb25zdCBsaW5lYXJEZXB0aFJheSA9IHByb3BlcnR5KCAndmVjMycgKTtcbmNvbnN0IG91dGdvaW5nUmF5TGlnaHQgPSBwcm9wZXJ0eSggJ3ZlYzMnICk7XG5cbi8qKlxuICogVm9sdW1ldHJpY0xpZ2h0aW5nTW9kZWwgY2xhc3MgZXh0ZW5kcyB0aGUgTGlnaHRpbmdNb2RlbCB0byBpbXBsZW1lbnQgdm9sdW1ldHJpYyBsaWdodGluZyBlZmZlY3RzLlxuICogVGhpcyBtb2RlbCBjYWxjdWxhdGVzIHRoZSBzY2F0dGVyaW5nIGFuZCB0cmFuc21pdHRhbmNlIG9mIGxpZ2h0IHRocm91Z2ggYSB2b2x1bWV0cmljIG1lZGl1bS5cbiAqIEl0IGR5bmFtaWNhbGx5IGFkanVzdHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgcmF5IGJhc2VkIG9uIHRoZSBjYW1lcmEgYW5kIG9iamVjdCBwb3NpdGlvbnMuXG4gKiBUaGUgbW9kZWwgc3VwcG9ydHMgY3VzdG9tIHNjYXR0ZXJpbmcgYW5kIGRlcHRoIG5vZGVzIHRvIGVuaGFuY2UgdGhlIGxpZ2h0aW5nIGVmZmVjdHMuXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0aW5nTW9kZWxcbiAqL1xuY2xhc3MgVm9sdW1ldHJpY0xpZ2h0aW5nTW9kZWwgZXh0ZW5kcyBMaWdodGluZ01vZGVsIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0fVxuXG5cdHN0YXJ0KCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBtYXRlcmlhbCwgY29udGV4dCB9ID0gYnVpbGRlcjtcblxuXHRcdGNvbnN0IHN0YXJ0UG9zID0gcHJvcGVydHkoICd2ZWMzJyApO1xuXHRcdGNvbnN0IGVuZFBvcyA9IHByb3BlcnR5KCAndmVjMycgKTtcblxuXHRcdC8vIFRoaXMgYXBwcm9hY2ggZHluYW1pY2FsbHkgY2hhbmdlcyB0aGUgZGlyZWN0aW9uIG9mIHRoZSByYXksXG5cdFx0Ly8gcHJpb3JpdGl6aW5nIHRoZSByYXkgZnJvbSB0aGUgY2FtZXJhIHRvIHRoZSBvYmplY3QgaWYgaXQgaXMgaW5zaWRlIHRoZSBtZXNoLCBhbmQgZnJvbSB0aGUgb2JqZWN0IHRvIHRoZSBjYW1lcmEgaWYgaXQgaXMgZmFyIGF3YXkuXG5cblx0XHRJZiggY2FtZXJhUG9zaXRpb24uc3ViKCBwb3NpdGlvbldvcmxkICkubGVuZ3RoKCkuZ3JlYXRlclRoYW4oIG1vZGVsUmFkaXVzLm11bCggMiApICksICgpID0+IHtcblxuXHRcdFx0c3RhcnRQb3MuYXNzaWduKCBjYW1lcmFQb3NpdGlvbiApO1xuXHRcdFx0ZW5kUG9zLmFzc2lnbiggcG9zaXRpb25Xb3JsZCApO1xuXG5cdFx0fSApLkVsc2UoICgpID0+IHtcblxuXHRcdFx0c3RhcnRQb3MuYXNzaWduKCBwb3NpdGlvbldvcmxkICk7XG5cdFx0XHRlbmRQb3MuYXNzaWduKCBjYW1lcmFQb3NpdGlvbiApO1xuXG5cdFx0fSApO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHZpZXdWZWN0b3IgPSBlbmRQb3Muc3ViKCBzdGFydFBvcyApO1xuXG5cdFx0Y29uc3Qgc3RlcHMgPSB1bmlmb3JtKCAnaW50JyApLm9uUmVuZGVyVXBkYXRlKCAoIHsgbWF0ZXJpYWwgfSApID0+IG1hdGVyaWFsLnN0ZXBzICk7XG5cdFx0Y29uc3Qgc3RlcFNpemUgPSB2aWV3VmVjdG9yLmxlbmd0aCgpLmRpdiggc3RlcHMgKS50b1ZhcigpO1xuXG5cdFx0Y29uc3QgcmF5RGlyID0gdmlld1ZlY3Rvci5ub3JtYWxpemUoKS50b1ZhcigpOyAvLyBUT0RPOiB0b1ZhcigpIHNob3VsZCBiZSBhdXRvbWF0aWMgaGVyZSAoIGluIGxvb3AgKVxuXG5cdFx0Y29uc3QgZGlzdFRyYXZlbGxlZCA9IGZsb2F0KCAwLjAgKS50b1ZhcigpO1xuXHRcdGNvbnN0IHRyYW5zbWl0dGFuY2UgPSB2ZWMzKCAxICkudG9WYXIoKTtcblxuXHRcdGlmICggbWF0ZXJpYWwub2Zmc2V0Tm9kZSApIHtcblxuXHRcdFx0Ly8gcmVkdWNlIGJhbmRpbmdcblxuXHRcdFx0ZGlzdFRyYXZlbGxlZC5hZGRBc3NpZ24oIG1hdGVyaWFsLm9mZnNldE5vZGUubXVsKCBzdGVwU2l6ZSApICk7XG5cblx0XHR9XG5cblx0XHRMb29wKCBzdGVwcywgKCkgPT4ge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvblJheSA9IHN0YXJ0UG9zLmFkZCggcmF5RGlyLm11bCggZGlzdFRyYXZlbGxlZCApICk7XG5cdFx0XHRjb25zdCBwb3NpdGlvblZpZXdSYXkgPSBjYW1lcmFWaWV3TWF0cml4Lm11bCggdmVjNCggcG9zaXRpb25SYXksIDEgKSApLnh5ejtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5kZXB0aE5vZGUgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0bGluZWFyRGVwdGhSYXkuYXNzaWduKCBsaW5lYXJEZXB0aCggdmlld1pUb1BlcnNwZWN0aXZlRGVwdGgoIHBvc2l0aW9uVmlld1JheS56LCBjYW1lcmFOZWFyLCBjYW1lcmFGYXIgKSApICk7XG5cblx0XHRcdFx0Y29udGV4dC5zY2VuZURlcHRoTm9kZSA9IGxpbmVhckRlcHRoKCBtYXRlcmlhbC5kZXB0aE5vZGUgKS50b1ZhcigpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRleHQucG9zaXRpb25Xb3JsZCA9IHBvc2l0aW9uUmF5O1xuXHRcdFx0Y29udGV4dC5zaGFkb3dQb3NpdGlvbldvcmxkID0gcG9zaXRpb25SYXk7XG5cdFx0XHRjb250ZXh0LnBvc2l0aW9uVmlldyA9IHBvc2l0aW9uVmlld1JheTtcblxuXHRcdFx0c2NhdHRlcmluZ0RlbnNpdHkuYXNzaWduKCAwICk7XG5cblx0XHRcdGxldCBzY2F0dGVyaW5nTm9kZTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5zY2F0dGVyaW5nTm9kZSApIHtcblxuXHRcdFx0XHRzY2F0dGVyaW5nTm9kZSA9IG1hdGVyaWFsLnNjYXR0ZXJpbmdOb2RlKCB7XG5cdFx0XHRcdFx0cG9zaXRpb25SYXlcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN1cGVyLnN0YXJ0KCBidWlsZGVyICk7XG5cblx0XHRcdGlmICggc2NhdHRlcmluZ05vZGUgKSB7XG5cblx0XHRcdFx0c2NhdHRlcmluZ0RlbnNpdHkubXVsQXNzaWduKCBzY2F0dGVyaW5nTm9kZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGJlZXIncyBsYXdcblxuXHRcdFx0Y29uc3QgZmFsbG9mZiA9IHNjYXR0ZXJpbmdEZW5zaXR5Lm11bCggLjAxICkubmVnYXRlKCkubXVsKCBzdGVwU2l6ZSApLmV4cCgpO1xuXHRcdFx0dHJhbnNtaXR0YW5jZS5tdWxBc3NpZ24oIGZhbGxvZmYgKTtcblxuXHRcdFx0Ly8gbW92ZSBhbG9uZyB0aGUgcmF5XG5cblx0XHRcdGRpc3RUcmF2ZWxsZWQuYWRkQXNzaWduKCBzdGVwU2l6ZSApO1xuXG5cdFx0fSApO1xuXG5cdFx0b3V0Z29pbmdSYXlMaWdodC5hZGRBc3NpZ24oIHRyYW5zbWl0dGFuY2Uuc2F0dXJhdGUoKS5vbmVNaW51cygpICk7XG5cblx0fVxuXG5cdHNjYXR0ZXJpbmdMaWdodCggbGlnaHRDb2xvciwgYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHNjZW5lRGVwdGhOb2RlID0gYnVpbGRlci5jb250ZXh0LnNjZW5lRGVwdGhOb2RlO1xuXG5cdFx0aWYgKCBzY2VuZURlcHRoTm9kZSApIHtcblxuXHRcdFx0SWYoIHNjZW5lRGVwdGhOb2RlLmdyZWF0ZXJUaGFuRXF1YWwoIGxpbmVhckRlcHRoUmF5ICksICgpID0+IHtcblxuXHRcdFx0XHRzY2F0dGVyaW5nRGVuc2l0eS5hZGRBc3NpZ24oIGxpZ2h0Q29sb3IgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c2NhdHRlcmluZ0RlbnNpdHkuYWRkQXNzaWduKCBsaWdodENvbG9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGRpcmVjdCggeyBsaWdodE5vZGUsIGxpZ2h0Q29sb3IgfSwgYnVpbGRlciApIHtcblxuXHRcdC8vIElnbm9yZSBsaWdodHMgd2l0aCBpbmZpbml0ZSBkaXN0YW5jZVxuXG5cdFx0aWYgKCBsaWdodE5vZGUubGlnaHQuZGlzdGFuY2UgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdC8vIFRPRE86IFdlIG5lZWQgYSB2aWV3cG9ydE9wYXF1ZSooKSAoIG91dHB1dCwgZGVwdGggKSB0byBmaXQgd2l0aCBtb2Rlcm4gcmVuZGVyaW5nIGFwcHJvYWNoZXNcblxuXHRcdGNvbnN0IGRpcmVjdExpZ2h0ID0gbGlnaHRDb2xvci54eXoudG9WYXIoKTtcblx0XHRkaXJlY3RMaWdodC5tdWxBc3NpZ24oIGxpZ2h0Tm9kZS5zaGFkb3dOb2RlICk7IC8vIGl0IG5vIHNob3VsZCBiZSBuZWNlc3NhcnkgaWYgdXNlZCBpbiB0aGUgc2FtZSByZW5kZXIgcGFzc1xuXG5cdFx0dGhpcy5zY2F0dGVyaW5nTGlnaHQoIGRpcmVjdExpZ2h0LCBidWlsZGVyICk7XG5cblx0fVxuXG5cdGRpcmVjdFJlY3RBcmVhKCB7IGxpZ2h0Q29sb3IsIGxpZ2h0UG9zaXRpb24sIGhhbGZXaWR0aCwgaGFsZkhlaWdodCB9LCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgcDAgPSBsaWdodFBvc2l0aW9uLmFkZCggaGFsZldpZHRoICkuc3ViKCBoYWxmSGVpZ2h0ICk7IC8vIGNvdW50ZXJjbG9ja3dpc2U7IGxpZ2h0IHNoaW5lcyBpbiBsb2NhbCBuZWcgeiBkaXJlY3Rpb25cblx0XHRjb25zdCBwMSA9IGxpZ2h0UG9zaXRpb24uc3ViKCBoYWxmV2lkdGggKS5zdWIoIGhhbGZIZWlnaHQgKTtcblx0XHRjb25zdCBwMiA9IGxpZ2h0UG9zaXRpb24uc3ViKCBoYWxmV2lkdGggKS5hZGQoIGhhbGZIZWlnaHQgKTtcblx0XHRjb25zdCBwMyA9IGxpZ2h0UG9zaXRpb24uYWRkKCBoYWxmV2lkdGggKS5hZGQoIGhhbGZIZWlnaHQgKTtcblxuXHRcdGNvbnN0IFAgPSBidWlsZGVyLmNvbnRleHQucG9zaXRpb25WaWV3O1xuXG5cdFx0Y29uc3QgZGlyZWN0TGlnaHQgPSBsaWdodENvbG9yLnh5ei5tdWwoIExUQ19FdmFsdWF0ZV9Wb2x1bWUoIHsgUCwgcDAsIHAxLCBwMiwgcDMgfSApICkucG93KCAxLjUgKTtcblxuXHRcdHRoaXMuc2NhdHRlcmluZ0xpZ2h0KCBkaXJlY3RMaWdodCwgYnVpbGRlciApO1xuXG5cdH1cblxuXHRmaW5pc2goIGJ1aWxkZXIgKSB7XG5cblx0XHRidWlsZGVyLmNvbnRleHQub3V0Z29pbmdMaWdodC5hc3NpZ24oIG91dGdvaW5nUmF5TGlnaHQgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVm9sdW1ldHJpY0xpZ2h0aW5nTW9kZWw7XG4iLCJpbXBvcnQgTm9kZU1hdGVyaWFsIGZyb20gJy4vTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCBWb2x1bWV0cmljTGlnaHRpbmdNb2RlbCBmcm9tICcuLi8uLi9ub2Rlcy9mdW5jdGlvbnMvVm9sdW1ldHJpY0xpZ2h0aW5nTW9kZWwuanMnO1xuaW1wb3J0IHsgQmFja1NpZGUgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIFZvbHVtZSBub2RlIG1hdGVyaWFsLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlTWF0ZXJpYWxcbiAqL1xuY2xhc3MgVm9sdW1lTm9kZU1hdGVyaWFsIGV4dGVuZHMgTm9kZU1hdGVyaWFsIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1ZvbHVtZU5vZGVNYXRlcmlhbCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHZvbHVtZSBub2RlIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1ZvbHVtZU5vZGVNYXRlcmlhbCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBOdW1iZXIgb2Ygc3RlcHMgdXNlZCBmb3IgcmF5bWFyY2hpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDI1XG5cdFx0ICovXG5cdFx0dGhpcy5zdGVwcyA9IDI1O1xuXG5cdFx0LyoqXG5cdFx0ICogTm9kZSB1c2VkIGZvciBzY2F0dGVyaW5nIGNhbGN1bGF0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtGdW5jdGlvbnxGdW5jdGlvbk5vZGU8dmVjND59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2NhdHRlcmluZ05vZGUgPSBudWxsO1xuXG5cdFx0dGhpcy5saWdodHMgPSB0cnVlO1xuXG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG5cdFx0dGhpcy5zaWRlID0gQmFja1NpZGU7XG5cblx0XHR0aGlzLmRlcHRoVGVzdCA9IGZhbHNlO1xuXHRcdHRoaXMuZGVwdGhXcml0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0c2V0dXBMaWdodGluZ01vZGVsKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBWb2x1bWV0cmljTGlnaHRpbmdNb2RlbCgpO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBWb2x1bWVOb2RlTWF0ZXJpYWw7XG4iLCJcbi8qKlxuICogVGhpcyBtb2R1bGUgbWFuYWdlcyB0aGUgaW50ZXJuYWwgYW5pbWF0aW9uIGxvb3Agb2YgdGhlIHJlbmRlcmVyLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEFuaW1hdGlvbiB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYW5pbWF0aW9uIGxvb3AgbWFuYWdlbWVudCBjb21wb25lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZXN9IG5vZGVzIC0gUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBub2RlcyByZWxhdGVkIGxvZ2ljLlxuXHQgKiBAcGFyYW0ge0luZm99IGluZm8gLSBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIG1ldHJpY3MgYW5kIG1vbml0b3JpbmcgZGF0YS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlcywgaW5mbyApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgbm9kZXMgcmVsYXRlZCBsb2dpYy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2Rlc31cblx0XHQgKi9cblx0XHR0aGlzLm5vZGVzID0gbm9kZXM7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIG1ldHJpY3MgYW5kIG1vbml0b3JpbmcgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtJbmZvfVxuXHRcdCAqL1xuXHRcdHRoaXMuaW5mbyA9IGluZm87XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgY29udGV4dCBmcm9tIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKWAgY2FuXG5cdFx0ICogYmUgY2FsbGVkICh1c3VhbGx5IGB3aW5kb3dgKS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXaW5kb3d8WFJTZXNzaW9ufVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvbnRleHQgPSBzZWxmO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVzZXItZGVmaW5lZCBhbmltYXRpb24gbG9vcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/RnVuY3Rpb259XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2FuaW1hdGlvbkxvb3AgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlcXVlc3RJZCB3aGljaCBpcyByZXR1cm5lZCBmcm9tIHRoZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKClgIGNhbGwuXG5cdFx0ICogQ2FuIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSBzdG9wIHRoZSBhbmltYXRpb24gbG9vcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9yZXF1ZXN0SWQgPSBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3RhcnRzIHRoZSBpbnRlcm5hbCBhbmltYXRpb24gbG9vcC5cblx0ICovXG5cdHN0YXJ0KCkge1xuXG5cdFx0Y29uc3QgdXBkYXRlID0gKCB0aW1lLCB4ckZyYW1lICkgPT4ge1xuXG5cdFx0XHR0aGlzLl9yZXF1ZXN0SWQgPSB0aGlzLl9jb250ZXh0LnJlcXVlc3RBbmltYXRpb25GcmFtZSggdXBkYXRlICk7XG5cblx0XHRcdGlmICggdGhpcy5pbmZvLmF1dG9SZXNldCA9PT0gdHJ1ZSApIHRoaXMuaW5mby5yZXNldCgpO1xuXG5cdFx0XHR0aGlzLm5vZGVzLm5vZGVGcmFtZS51cGRhdGUoKTtcblxuXHRcdFx0dGhpcy5pbmZvLmZyYW1lID0gdGhpcy5ub2Rlcy5ub2RlRnJhbWUuZnJhbWVJZDtcblxuXHRcdFx0aWYgKCB0aGlzLl9hbmltYXRpb25Mb29wICE9PSBudWxsICkgdGhpcy5fYW5pbWF0aW9uTG9vcCggdGltZSwgeHJGcmFtZSApO1xuXG5cdFx0fTtcblxuXHRcdHVwZGF0ZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3RvcHMgdGhlIGludGVybmFsIGFuaW1hdGlvbiBsb29wLlxuXHQgKi9cblx0c3RvcCgpIHtcblxuXHRcdHRoaXMuX2NvbnRleHQuY2FuY2VsQW5pbWF0aW9uRnJhbWUoIHRoaXMuX3JlcXVlc3RJZCApO1xuXG5cdFx0dGhpcy5fcmVxdWVzdElkID0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHVzZXItbGV2ZWwgYW5pbWF0aW9uIGxvb3AuXG5cdCAqXG5cdCAqIEByZXR1cm4gez9GdW5jdGlvbn0gVGhlIGFuaW1hdGlvbiBsb29wLlxuXHQgKi9cblx0Z2V0QW5pbWF0aW9uTG9vcCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9hbmltYXRpb25Mb29wO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgdXNlci1sZXZlbCBhbmltYXRpb24gbG9vcC5cblx0ICpcblx0ICogQHBhcmFtIHs/RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGFuaW1hdGlvbiBsb29wLlxuXHQgKi9cblx0c2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLl9hbmltYXRpb25Mb29wID0gY2FsbGJhY2s7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBhbmltYXRpb24gY29udGV4dC5cblx0ICpcblx0ICogQHJldHVybiB7V2luZG93fFhSU2Vzc2lvbn0gVGhlIGFuaW1hdGlvbiBjb250ZXh0LlxuXHQgKi9cblx0Z2V0Q29udGV4dCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jb250ZXh0O1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgY29udGV4dCBpbiB3aGljaCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKClgIGlzIGV4ZWN1dGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dpbmRvd3xYUlNlc3Npb259IGNvbnRleHQgLSBUaGUgY29udGV4dCB0byBzZXQuXG5cdCAqL1xuXHRzZXRDb250ZXh0KCBjb250ZXh0ICkge1xuXG5cdFx0dGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyBhbGwgaW50ZXJuYWwgcmVzb3VyY2VzIGFuZCBzdG9wcyB0aGUgYW5pbWF0aW9uIGxvb3AuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5zdG9wKCk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGlvbjtcbiIsIi8qKlxuICogRGF0YSBzdHJ1Y3R1cmUgZm9yIHRoZSByZW5kZXJlci4gSXQgYWxsb3dzIGRlZmluaW5nIHZhbHVlc1xuICogd2l0aCBjaGFpbmVkLCBoaWVyYXJjaGljYWwga2V5cy4gS2V5cyBhcmUgbWVhbnQgdG8gYmVcbiAqIG9iamVjdHMgc2luY2UgdGhlIG1vZHVsZSBpbnRlcm5hbGx5IHdvcmtzIHdpdGggV2VhayBNYXBzXG4gKiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBDaGFpbk1hcCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgQ2hhaW4gTWFwLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcm9vdCBXZWFrIE1hcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWFrTWFwfVxuXHRcdCAqL1xuXHRcdHRoaXMud2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGFycmF5IG9mIGtleXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0ga2V5cyAtIExpc3Qgb2Yga2V5cy5cblx0ICogQHJldHVybiB7YW55fSBUaGUgdmFsdWUuIFJldHVybnMgYHVuZGVmaW5lZGAgaWYgbm8gdmFsdWUgd2FzIGZvdW5kLlxuXHQgKi9cblx0Z2V0KCBrZXlzICkge1xuXG5cdFx0bGV0IG1hcCA9IHRoaXMud2Vha01hcDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoIC0gMTsgaSArKyApIHtcblxuXHRcdFx0bWFwID0gbWFwLmdldCgga2V5c1sgaSBdICk7XG5cblx0XHRcdGlmICggbWFwID09PSB1bmRlZmluZWQgKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcC5nZXQoIGtleXNbIGtleXMubGVuZ3RoIC0gMSBdICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGtleXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0ga2V5cyAtIExpc3Qgb2Yga2V5cy5cblx0ICogQHBhcmFtIHthbnl9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7Q2hhaW5NYXB9IEEgcmVmZXJlbmNlIHRvIHRoaXMgQ2hhaW4gTWFwLlxuXHQgKi9cblx0c2V0KCBrZXlzLCB2YWx1ZSApIHtcblxuXHRcdGxldCBtYXAgPSB0aGlzLndlYWtNYXA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aCAtIDE7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGtleSA9IGtleXNbIGkgXTtcblxuXHRcdFx0aWYgKCBtYXAuaGFzKCBrZXkgKSA9PT0gZmFsc2UgKSBtYXAuc2V0KCBrZXksIG5ldyBXZWFrTWFwKCkgKTtcblxuXHRcdFx0bWFwID0gbWFwLmdldCgga2V5ICk7XG5cblx0XHR9XG5cblx0XHRtYXAuc2V0KCBrZXlzWyBrZXlzLmxlbmd0aCAtIDEgXSwgdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVsZXRlcyBhIHZhbHVlIGZvciB0aGUgZ2l2ZW4ga2V5cy5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBrZXlzIC0gVGhlIGtleXMuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZSBoYXMgYmVlbiByZW1vdmVkIHN1Y2Nlc3NmdWxseSBhbmQgYGZhbHNlYCBpZiB0aGUgdmFsdWUgaGFzIG5vdCBiZSBmb3VuZC5cblx0ICovXG5cdGRlbGV0ZSgga2V5cyApIHtcblxuXHRcdGxldCBtYXAgPSB0aGlzLndlYWtNYXA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aCAtIDE7IGkgKysgKSB7XG5cblx0XHRcdG1hcCA9IG1hcC5nZXQoIGtleXNbIGkgXSApO1xuXG5cdFx0XHRpZiAoIG1hcCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcC5kZWxldGUoIGtleXNbIGtleXMubGVuZ3RoIC0gMSBdICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENoYWluTWFwO1xuIiwiaW1wb3J0IHsgaGFzaCwgaGFzaFN0cmluZyB9IGZyb20gJy4uLy4uL25vZGVzL2NvcmUvTm9kZVV0aWxzLmpzJztcblxubGV0IF9pZCA9IDA7XG5cbmZ1bmN0aW9uIGdldEtleXMoIG9iaiApIHtcblxuXHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoIG9iaiApO1xuXG5cdGxldCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiggb2JqICk7XG5cblx0d2hpbGUgKCBwcm90byApIHtcblxuXHRcdGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoIHByb3RvICk7XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gZGVzY3JpcHRvcnMgKSB7XG5cblx0XHRcdGlmICggZGVzY3JpcHRvcnNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JzWyBrZXkgXTtcblxuXHRcdFx0XHRpZiAoIGRlc2NyaXB0b3IgJiYgdHlwZW9mIGRlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nICkge1xuXG5cdFx0XHRcdFx0a2V5cy5wdXNoKCBrZXkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKCBwcm90byApO1xuXG5cdH1cblxuXHRyZXR1cm4ga2V5cztcblxufVxuXG4vKipcbiAqIEEgcmVuZGVyIG9iamVjdCBpcyB0aGUgcmVuZGVyZXIncyByZXByZXNlbnRhdGlvbiBvZiBzaW5nbGUgZW50aXR5IHRoYXQgZ2V0cyBkcmF3blxuICogd2l0aCBhIGRyYXcgY29tbWFuZC4gVGhlcmUgaXMgbm8gdW5pcXVlIG1hcHBpbmcgb2YgcmVuZGVyIG9iamVjdHMgdG8gM0Qgb2JqZWN0cyBpbiB0aGVcbiAqIHNjZW5lIHNpbmNlIHJlbmRlciBvYmplY3RzIGFsc28gZGVwZW5kIGZyb20gdGhlIHVzZWQgbWF0ZXJpYWwsIHRoZSBjdXJyZW50IHJlbmRlciBjb250ZXh0XG4gKiBhbmQgdGhlIGN1cnJlbnQgc2NlbmUncyBsaWdodGluZy5cbiAqXG4gKiBJbiBnZW5lcmFsLCB0aGUgYmFzaWMgcHJvY2VzcyBvZiB0aGUgcmVuZGVyZXIgaXM6XG4gKlxuICogLSBBbmFseXplIHRoZSAzRCBvYmplY3RzIGluIHRoZSBzY2VuZSBhbmQgZ2VuZXJhdGUgcmVuZGVyIGxpc3RzIGNvbnRhaW5pbmcgcmVuZGVyIGl0ZW1zLlxuICogLSBQcm9jZXNzIHRoZSByZW5kZXIgbGlzdHMgYnkgY2FsbGluZyBvbmUgb3IgbW9yZSByZW5kZXIgY29tbWFuZHMgZm9yIGVhY2ggcmVuZGVyIGl0ZW0uXG4gKiAtIEZvciBlYWNoIHJlbmRlciBjb21tYW5kLCByZXF1ZXN0IGEgcmVuZGVyIG9iamVjdCBhbmQgcGVyZm9ybSB0aGUgZHJhdy5cbiAqXG4gKiBUaGUgbW9kdWxlIHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byBnZXQgZGF0YSByZXF1aXJlZCBmb3IgdGhlIGRyYXcgY29tbWFuZCBsaWtlIHRoZSBhY3R1YWxcbiAqIGRyYXcgcGFyYW1ldGVycyBvciB2ZXJ0ZXggYnVmZmVycy4gSXQgYWxzbyBob2xkcyBhIHNlcmllcyBvZiBjYWNoaW5nIHJlbGF0ZWQgbWV0aG9kcyBzaW5jZVxuICogY3JlYXRpbmcgcmVuZGVyIG9iamVjdHMgc2hvdWxkIG9ubHkgYmUgZG9uZSB3aGVuIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBSZW5kZXJPYmplY3Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlbmRlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZXN9IG5vZGVzIC0gUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBub2RlcyByZWxhdGVkIGxvZ2ljLlxuXHQgKiBAcGFyYW0ge0dlb21ldHJpZXN9IGdlb21ldHJpZXMgLSBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIGdlb21ldHJpZXMuXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge01hdGVyaWFsfSBtYXRlcmlhbCAtIFRoZSAzRCBvYmplY3QncyBtYXRlcmlhbC5cblx0ICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBUaGUgc2NlbmUgdGhlIDNEIG9iamVjdCBiZWxvbmdzIHRvLlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGUgb2JqZWN0IHNob3VsZCBiZSByZW5kZXJlZCB3aXRoLlxuXHQgKiBAcGFyYW0ge0xpZ2h0c05vZGV9IGxpZ2h0c05vZGUgLSBUaGUgbGlnaHRzIG5vZGUuXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICogQHBhcmFtIHtDbGlwcGluZ0NvbnRleHR9IGNsaXBwaW5nQ29udGV4dCAtIFRoZSBjbGlwcGluZyBjb250ZXh0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5vZGVzLCBnZW9tZXRyaWVzLCByZW5kZXJlciwgb2JqZWN0LCBtYXRlcmlhbCwgc2NlbmUsIGNhbWVyYSwgbGlnaHRzTm9kZSwgcmVuZGVyQ29udGV4dCwgY2xpcHBpbmdDb250ZXh0ICkge1xuXG5cdFx0dGhpcy5pZCA9IF9pZCArKztcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgbm9kZXMgcmVsYXRlZCBsb2dpYy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2Rlc31cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX25vZGVzID0gbm9kZXM7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIGdlb21ldHJpZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7R2VvbWV0cmllc31cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX2dlb21ldHJpZXMgPSBnZW9tZXRyaWVzO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlbmRlcmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1JlbmRlcmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSAzRCBvYmplY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0M0R9XG5cdFx0ICovXG5cdFx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgM0Qgb2JqZWN0J3MgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7TWF0ZXJpYWx9XG5cdFx0ICovXG5cdFx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNjZW5lIHRoZSAzRCBvYmplY3QgYmVsb25ncyB0by5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtTY2VuZX1cblx0XHQgKi9cblx0XHR0aGlzLnNjZW5lID0gc2NlbmU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2FtZXJhIHRoZSAzRCBvYmplY3Qgc2hvdWxkIGJlIHJlbmRlcmVkIHdpdGguXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q2FtZXJhfVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpZ2h0cyBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0xpZ2h0c05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5saWdodHNOb2RlID0gbGlnaHRzTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXIgY29udGV4dC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtSZW5kZXJDb250ZXh0fVxuXHRcdCAqL1xuXHRcdHRoaXMuY29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgM0Qgb2JqZWN0J3MgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QnVmZmVyR2VvbWV0cnl9XG5cdFx0ICovXG5cdFx0dGhpcy5nZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXIgb2JqZWN0J3MgdmVyc2lvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy52ZXJzaW9uID0gbWF0ZXJpYWwudmVyc2lvbjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkcmF3IHJhbmdlIG9mIHRoZSBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmRyYXdSYW5nZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBob2xkaW5nIHRoZSBidWZmZXIgYXR0cmlidXRlc1xuXHRcdCAqIG9mIHRoZSByZW5kZXIgb2JqZWN0LiBUaGlzIGVudGFpbHMgYXR0cmlidXRlXG5cdFx0ICogZGVmaW5pdGlvbnMgb24gZ2VvbWV0cnkgYW5kIG5vZGUgbGV2ZWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0FycmF5PEJ1ZmZlckF0dHJpYnV0ZT59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIHJlbmRlciBwaXBlbGluZSB0aGUgcmVuZGVyXG5cdFx0ICogb2JqZWN0IGlzIHByb2Nlc3NlZCB3aXRoLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1JlbmRlclBpcGVsaW5lfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnBpcGVsaW5lID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIE9ubHkgcmVsZXZhbnQgZm9yIG9iamVjdHMgdXNpbmdcblx0XHQgKiBtdWx0aXBsZSBtYXRlcmlhbHMuIFRoaXMgcmVwcmVzZW50cyBhIGdyb3VwIGVudHJ5XG5cdFx0ICogZnJvbSB0aGUgcmVzcGVjdGl2ZSBgQnVmZmVyR2VvbWV0cnlgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez97c3RhcnQ6IG51bWJlciwgY291bnQ6IG51bWJlcn19XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZ3JvdXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgaG9sZGluZyB0aGUgdmVydGV4IGJ1ZmZlcnMgd2hpY2ggY2FuXG5cdFx0ICogYmUgYnVmZmVyIGF0dHJpYnV0ZXMgYnV0IGFsc28gaW50ZXJsZWF2ZWQgYnVmZmVycy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/QXJyYXk8QnVmZmVyQXR0cmlidXRlfEludGVybGVhdmVkQnVmZmVyPn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy52ZXJ0ZXhCdWZmZXJzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgZHJhdyBjb21tYW5kLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9PYmplY3R9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZHJhd1BhcmFtcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBJZiB0aGlzIHJlbmRlciBvYmplY3QgaXMgdXNlZCBpbnNpZGUgYSByZW5kZXIgYnVuZGxlLFxuXHRcdCAqIHRoaXMgcHJvcGVydHkgcG9pbnRzIHRvIHRoZSByZXNwZWN0aXZlIGJ1bmRsZSBncm91cC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/QnVuZGxlR3JvdXB9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYnVuZGxlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjbGlwcGluZyBjb250ZXh0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0NsaXBwaW5nQ29udGV4dH1cblx0XHQgKi9cblx0XHR0aGlzLmNsaXBwaW5nQ29udGV4dCA9IGNsaXBwaW5nQ29udGV4dDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjbGlwcGluZyBjb250ZXh0J3MgY2FjaGUga2V5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLmNsaXBwaW5nQ29udGV4dENhY2hlS2V5ID0gY2xpcHBpbmdDb250ZXh0ICE9PSBudWxsID8gY2xpcHBpbmdDb250ZXh0LmNhY2hlS2V5IDogJyc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW5pdGlhbCBub2RlIGNhY2hlIGtleS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5pbml0aWFsTm9kZXNDYWNoZUtleSA9IHRoaXMuZ2V0RHluYW1pY0NhY2hlS2V5KCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW5pdGlhbCBjYWNoZSBrZXkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuaW5pdGlhbENhY2hlS2V5ID0gdGhpcy5nZXRDYWNoZUtleSgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgYnVpbGRlciBzdGF0ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZUJ1aWxkZXJTdGF0ZX1cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9ub2RlQnVpbGRlclN0YXRlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IG9mIGJpbmRpbmdzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9BcnJheTxCaW5kR3JvdXA+fVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2JpbmRpbmdzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgbm9kZSBtYXRlcmlhbCBvYnNlcnZlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZU1hdGVyaWFsT2JzZXJ2ZXJ9XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fbW9uaXRvciA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbiBldmVudCBsaXN0ZW5lciB3aGljaCBpcyBkZWZpbmVkIGJ5IGBSZW5kZXJPYmplY3RzYC4gSXQgcGVyZm9ybXNcblx0XHQgKiBjbGVhbiB1cCB0YXNrcyB3aGVuIGBkaXNwb3NlKClgIG9uIHRoaXMgcmVuZGVyIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEBtZXRob2Rcblx0XHQgKi9cblx0XHR0aGlzLm9uRGlzcG9zZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUmVuZGVyT2JqZWN0ID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGV2ZW50IGxpc3RlbmVyIHdoaWNoIGlzIGV4ZWN1dGVkIHdoZW4gYGRpc3Bvc2UoKWAgaXMgY2FsbGVkIG9uXG5cdFx0ICogdGhlIHJlbmRlciBvYmplY3QncyBtYXRlcmlhbC5cblx0XHQgKlxuXHRcdCAqIEBtZXRob2Rcblx0XHQgKi9cblx0XHR0aGlzLm9uTWF0ZXJpYWxEaXNwb3NlID0gKCkgPT4ge1xuXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdH07XG5cblx0XHR0aGlzLm1hdGVyaWFsLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgdGhpcy5vbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgY2xpcHBpbmcgY29udGV4dC5cblx0ICpcblx0ICogQHBhcmFtIHtDbGlwcGluZ0NvbnRleHR9IGNvbnRleHQgLSBUaGUgY2xpcHBpbmcgY29udGV4dCB0byBzZXQuXG5cdCAqL1xuXHR1cGRhdGVDbGlwcGluZyggY29udGV4dCApIHtcblxuXHRcdHRoaXMuY2xpcHBpbmdDb250ZXh0ID0gY29udGV4dDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIGNsaXBwaW5nIHJlcXVpcmVzIGFuIHVwZGF0ZSBvciBub3QuXG5cdCAqXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAcmVhZG9ubHlcblx0ICovXG5cdGdldCBjbGlwcGluZ05lZWRzVXBkYXRlKCkge1xuXG5cdFx0aWYgKCB0aGlzLmNsaXBwaW5nQ29udGV4dCA9PT0gbnVsbCB8fCB0aGlzLmNsaXBwaW5nQ29udGV4dC5jYWNoZUtleSA9PT0gdGhpcy5jbGlwcGluZ0NvbnRleHRDYWNoZUtleSApIHJldHVybiBmYWxzZTtcblxuXHRcdHRoaXMuY2xpcHBpbmdDb250ZXh0Q2FjaGVLZXkgPSB0aGlzLmNsaXBwaW5nQ29udGV4dC5jYWNoZUtleTtcblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiBjbGlwcGluZyBwbGFuZXMgZGVmaW5lZCBpbiBjb250ZXh0IG9mIGhhcmR3YXJlIGNsaXBwaW5nLlxuXHQgKlxuXHQgKiBAdHlwZSB7bnVtYmVyfVxuXHQgKiBAcmVhZG9ubHlcblx0ICovXG5cdGdldCBoYXJkd2FyZUNsaXBwaW5nUGxhbmVzKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWF0ZXJpYWwuaGFyZHdhcmVDbGlwcGluZyA9PT0gdHJ1ZSA/IHRoaXMuY2xpcHBpbmdDb250ZXh0LnVuaW9uQ2xpcHBpbmdDb3VudCA6IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBub2RlIGJ1aWxkZXIgc3RhdGUgb2YgdGhpcyByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtOb2RlQnVpbGRlclN0YXRlfSBUaGUgbm9kZSBidWlsZGVyIHN0YXRlLlxuXHQgKi9cblx0Z2V0Tm9kZUJ1aWxkZXJTdGF0ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9ub2RlQnVpbGRlclN0YXRlIHx8ICggdGhpcy5fbm9kZUJ1aWxkZXJTdGF0ZSA9IHRoaXMuX25vZGVzLmdldEZvclJlbmRlciggdGhpcyApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBub2RlIG1hdGVyaWFsIG9ic2VydmVyIG9mIHRoaXMgcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZU1hdGVyaWFsT2JzZXJ2ZXJ9IFRoZSBub2RlIG1hdGVyaWFsIG9ic2VydmVyLlxuXHQgKi9cblx0Z2V0TW9uaXRvcigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9tb25pdG9yIHx8ICggdGhpcy5fbW9uaXRvciA9IHRoaXMuZ2V0Tm9kZUJ1aWxkZXJTdGF0ZSgpLm9ic2VydmVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGJpbmQgZ3JvdXBzIG9mIHRoaXMgcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHJldHVybiB7QXJyYXk8QmluZEdyb3VwPn0gVGhlIGJpbmRpbmdzLlxuXHQgKi9cblx0Z2V0QmluZGluZ3MoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fYmluZGluZ3MgfHwgKCB0aGlzLl9iaW5kaW5ncyA9IHRoaXMuZ2V0Tm9kZUJ1aWxkZXJTdGF0ZSgpLmNyZWF0ZUJpbmRpbmdzKCkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBiaW5kaW5nIGdyb3VwIGJ5IGdyb3VwIG5hbWUgb2YgdGhpcyByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBiaW5kaW5nIGdyb3VwLlxuXHQgKiBAcmV0dXJuIHs/QmluZEdyb3VwfSBUaGUgYmluZGluZ3MuXG5cdCAqL1xuXHRnZXRCaW5kaW5nR3JvdXAoIG5hbWUgKSB7XG5cblx0XHRmb3IgKCBjb25zdCBiaW5kaW5nR3JvdXAgb2YgdGhpcy5nZXRCaW5kaW5ncygpICkge1xuXG5cdFx0XHRpZiAoIGJpbmRpbmdHcm91cC5uYW1lID09PSBuYW1lICkge1xuXG5cdFx0XHRcdHJldHVybiBiaW5kaW5nR3JvdXA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSByZW5kZXIgb2JqZWN0J3MgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEByZXR1cm4gez9CdWZmZXJBdHRyaWJ1dGV9IFRoZSBpbmRleC4gUmV0dXJucyBgbnVsbGAgZm9yIG5vbi1pbmRleGVkIGdlb21ldHJpZXMuXG5cdCAqL1xuXHRnZXRJbmRleCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9nZW9tZXRyaWVzLmdldEluZGV4KCB0aGlzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbmRpcmVjdCBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHs/QnVmZmVyQXR0cmlidXRlfSBUaGUgaW5kaXJlY3QgYXR0cmlidXRlLiBgbnVsbGAgaWYgbm8gaW5kaXJlY3QgZHJhd2luZyBpcyB1c2VkLlxuXHQgKi9cblx0Z2V0SW5kaXJlY3QoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZ2VvbWV0cmllcy5nZXRJbmRpcmVjdCggdGhpcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSB0aGF0IGFjdHMgYXMgYSBrZXkgZm9yIGlkZW50aWZ5aW5nIHRoZSByZW5kZXIgb2JqZWN0IGluIGEgY2hhaW4gbWFwLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBcnJheTxPYmplY3Q+fSBBbiBhcnJheSB3aXRoIG9iamVjdCByZWZlcmVuY2VzLlxuXHQgKi9cblx0Z2V0Q2hhaW5BcnJheSgpIHtcblxuXHRcdHJldHVybiBbIHRoaXMub2JqZWN0LCB0aGlzLm1hdGVyaWFsLCB0aGlzLmNvbnRleHQsIHRoaXMubGlnaHRzTm9kZSBdO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgdXNlZCB3aGVuIHRoZSBnZW9tZXRyeSBvZiBhIDNEIG9iamVjdCBoYXMgYmVlbiBleGNoYW5nZWQgYW5kIHRoZVxuXHQgKiByZXNwZWN0aXZlIHJlbmRlciBvYmplY3Qgbm93IHJlcXVpcmVzIGFuIHVwZGF0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnkgLSBUaGUgZ2VvbWV0cnkgdG8gc2V0LlxuXHQgKi9cblx0c2V0R2VvbWV0cnkoIGdlb21ldHJ5ICkge1xuXG5cdFx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBidWZmZXIgYXR0cmlidXRlcyBvZiB0aGUgcmVuZGVyIG9iamVjdC4gVGhlIHJldHVybmVkIGFycmF5IGhvbGRzXG5cdCAqIGF0dHJpYnV0ZSBkZWZpbml0aW9ucyBvbiBnZW9tZXRyeSBhbmQgbm9kZSBsZXZlbC5cblx0ICpcblx0ICogQHJldHVybiB7QXJyYXk8QnVmZmVyQXR0cmlidXRlPn0gQW4gYXJyYXkgd2l0aCBidWZmZXIgYXR0cmlidXRlcy5cblx0ICovXG5cdGdldEF0dHJpYnV0ZXMoKSB7XG5cblx0XHRpZiAoIHRoaXMuYXR0cmlidXRlcyAhPT0gbnVsbCApIHJldHVybiB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRjb25zdCBub2RlQXR0cmlidXRlcyA9IHRoaXMuZ2V0Tm9kZUJ1aWxkZXJTdGF0ZSgpLm5vZGVBdHRyaWJ1dGVzO1xuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0ZXhCdWZmZXJzID0gbmV3IFNldCgpO1xuXG5cdFx0Zm9yICggY29uc3Qgbm9kZUF0dHJpYnV0ZSBvZiBub2RlQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gbm9kZUF0dHJpYnV0ZS5ub2RlICYmIG5vZGVBdHRyaWJ1dGUubm9kZS5hdHRyaWJ1dGUgPyBub2RlQXR0cmlidXRlLm5vZGUuYXR0cmlidXRlIDogZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCBub2RlQXR0cmlidXRlLm5hbWUgKTtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnB1c2goIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHRjb25zdCBidWZmZXJBdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSA/IGF0dHJpYnV0ZS5kYXRhIDogYXR0cmlidXRlO1xuXHRcdFx0dmVydGV4QnVmZmVycy5hZGQoIGJ1ZmZlckF0dHJpYnV0ZSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcblx0XHR0aGlzLnZlcnRleEJ1ZmZlcnMgPSBBcnJheS5mcm9tKCB2ZXJ0ZXhCdWZmZXJzLnZhbHVlcygpICk7XG5cblx0XHRyZXR1cm4gYXR0cmlidXRlcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZlcnRleCBidWZmZXJzIG9mIHRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBcnJheTxCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXI+fSBBbiBhcnJheSB3aXRoIGJ1ZmZlciBhdHRyaWJ1dGUgb3IgaW50ZXJsZWF2ZWQgYnVmZmVycy5cblx0ICovXG5cdGdldFZlcnRleEJ1ZmZlcnMoKSB7XG5cblx0XHRpZiAoIHRoaXMudmVydGV4QnVmZmVycyA9PT0gbnVsbCApIHRoaXMuZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0cmV0dXJuIHRoaXMudmVydGV4QnVmZmVycztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRyYXcgcGFyYW1ldGVycyBmb3IgdGhlIHJlbmRlciBvYmplY3QuXG5cdCAqXG5cdCAqIEByZXR1cm4gez97dmVydGV4Q291bnQ6IG51bWJlciwgZmlyc3RWZXJ0ZXg6IG51bWJlciwgaW5zdGFuY2VDb3VudDogbnVtYmVyLCBmaXJzdEluc3RhbmNlOiBudW1iZXJ9fSBUaGUgZHJhdyBwYXJhbWV0ZXJzLlxuXHQgKi9cblx0Z2V0RHJhd1BhcmFtZXRlcnMoKSB7XG5cblx0XHRjb25zdCB7IG9iamVjdCwgbWF0ZXJpYWwsIGdlb21ldHJ5LCBncm91cCwgZHJhd1JhbmdlIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgZHJhd1BhcmFtcyA9IHRoaXMuZHJhd1BhcmFtcyB8fCAoIHRoaXMuZHJhd1BhcmFtcyA9IHtcblx0XHRcdHZlcnRleENvdW50OiAwLFxuXHRcdFx0Zmlyc3RWZXJ0ZXg6IDAsXG5cdFx0XHRpbnN0YW5jZUNvdW50OiAwLFxuXHRcdFx0Zmlyc3RJbnN0YW5jZTogMFxuXHRcdH0gKTtcblxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5nZXRJbmRleCgpO1xuXHRcdGNvbnN0IGhhc0luZGV4ID0gKCBpbmRleCAhPT0gbnVsbCApO1xuXHRcdGNvbnN0IGluc3RhbmNlQ291bnQgPSBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID8gZ2VvbWV0cnkuaW5zdGFuY2VDb3VudCA6ICggb2JqZWN0LmNvdW50ID4gMSA/IG9iamVjdC5jb3VudCA6IDEgKTtcblxuXHRcdGlmICggaW5zdGFuY2VDb3VudCA9PT0gMCApIHJldHVybiBudWxsO1xuXG5cdFx0ZHJhd1BhcmFtcy5pbnN0YW5jZUNvdW50ID0gaW5zdGFuY2VDb3VudDtcblxuXHRcdGlmICggb2JqZWN0LmlzQmF0Y2hlZE1lc2ggPT09IHRydWUgKSByZXR1cm4gZHJhd1BhcmFtcztcblxuXHRcdGxldCByYW5nZUZhY3RvciA9IDE7XG5cblx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSAmJiAhIG9iamVjdC5pc1BvaW50cyAmJiAhIG9iamVjdC5pc0xpbmVTZWdtZW50cyAmJiAhIG9iamVjdC5pc0xpbmUgJiYgISBvYmplY3QuaXNMaW5lTG9vcCApIHtcblxuXHRcdFx0cmFuZ2VGYWN0b3IgPSAyO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGZpcnN0VmVydGV4ID0gZHJhd1JhbmdlLnN0YXJ0ICogcmFuZ2VGYWN0b3I7XG5cdFx0bGV0IGxhc3RWZXJ0ZXggPSAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICogcmFuZ2VGYWN0b3I7XG5cblx0XHRpZiAoIGdyb3VwICE9PSBudWxsICkge1xuXG5cdFx0XHRmaXJzdFZlcnRleCA9IE1hdGgubWF4KCBmaXJzdFZlcnRleCwgZ3JvdXAuc3RhcnQgKiByYW5nZUZhY3RvciApO1xuXHRcdFx0bGFzdFZlcnRleCA9IE1hdGgubWluKCBsYXN0VmVydGV4LCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSAqIHJhbmdlRmFjdG9yICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0bGV0IGl0ZW1Db3VudCA9IEluZmluaXR5O1xuXG5cdFx0aWYgKCBoYXNJbmRleCApIHtcblxuXHRcdFx0aXRlbUNvdW50ID0gaW5kZXguY291bnQ7XG5cblx0XHR9IGVsc2UgaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICYmIHBvc2l0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRpdGVtQ291bnQgPSBwb3NpdGlvbi5jb3VudDtcblxuXHRcdH1cblxuXHRcdGZpcnN0VmVydGV4ID0gTWF0aC5tYXgoIGZpcnN0VmVydGV4LCAwICk7XG5cdFx0bGFzdFZlcnRleCA9IE1hdGgubWluKCBsYXN0VmVydGV4LCBpdGVtQ291bnQgKTtcblxuXHRcdGNvbnN0IGNvdW50ID0gbGFzdFZlcnRleCAtIGZpcnN0VmVydGV4O1xuXG5cdFx0aWYgKCBjb3VudCA8IDAgfHwgY291bnQgPT09IEluZmluaXR5ICkgcmV0dXJuIG51bGw7XG5cblx0XHRkcmF3UGFyYW1zLnZlcnRleENvdW50ID0gY291bnQ7XG5cdFx0ZHJhd1BhcmFtcy5maXJzdFZlcnRleCA9IGZpcnN0VmVydGV4O1xuXG5cdFx0cmV0dXJuIGRyYXdQYXJhbXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSByZW5kZXIgb2JqZWN0J3MgZ2VvbWV0cnkgY2FjaGUga2V5LlxuXHQgKlxuXHQgKiBUaGUgZ2VvbWV0cnkgY2FjaGUga2V5IGlzIHBhcnQgb2YgdGhlIG1hdGVyaWFsIGNhY2hlIGtleS5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VvbWV0cnkgY2FjaGUga2V5LlxuXHQgKi9cblx0Z2V0R2VvbWV0cnlDYWNoZUtleSgpIHtcblxuXHRcdGNvbnN0IHsgZ2VvbWV0cnkgfSA9IHRoaXM7XG5cblx0XHRsZXQgY2FjaGVLZXkgPSAnJztcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoIGdlb21ldHJ5LmF0dHJpYnV0ZXMgKS5zb3J0KCkgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0Y2FjaGVLZXkgKz0gbmFtZSArICcsJztcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUuZGF0YSApIGNhY2hlS2V5ICs9IGF0dHJpYnV0ZS5kYXRhLnN0cmlkZSArICcsJztcblx0XHRcdGlmICggYXR0cmlidXRlLm9mZnNldCApIGNhY2hlS2V5ICs9IGF0dHJpYnV0ZS5vZmZzZXQgKyAnLCc7XG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5pdGVtU2l6ZSApIGNhY2hlS2V5ICs9IGF0dHJpYnV0ZS5pdGVtU2l6ZSArICcsJztcblx0XHRcdGlmICggYXR0cmlidXRlLm5vcm1hbGl6ZWQgKSBjYWNoZUtleSArPSAnbiwnO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc3RydWN0dXJhbCBlcXVhbGl0eSBpc24ndCBzdWZmaWNpZW50IGZvciBtb3JwaCB0YXJnZXRzIHNpbmNlIHRoZVxuXHRcdC8vIGRhdGEgYXJlIG1haW50YWluZWQgaW4gdGV4dHVyZXMuIG9ubHkgaWYgdGhlIHRhcmdldHMgYXJlIGFsbCBlcXVhbFxuXHRcdC8vIHRoZSB0ZXh0dXJlIGFuZCB0aHVzIHRoZSBpbnN0YW5jZSBvZiBgTW9ycGhOb2RlYCBjYW4gYmUgc2hhcmVkLlxuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICkuc29ydCgpICkge1xuXG5cdFx0XHRjb25zdCB0YXJnZXRzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGNhY2hlS2V5ICs9ICdtb3JwaC0nICsgbmFtZSArICcsJztcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGFyZ2V0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IHRhcmdldHNbIGkgXTtcblxuXHRcdFx0XHRjYWNoZUtleSArPSBhdHRyaWJ1dGUuaWQgKyAnLCc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuaW5kZXggKSB7XG5cblx0XHRcdGNhY2hlS2V5ICs9ICdpbmRleCwnO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlS2V5O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcmVuZGVyIG9iamVjdCdzIG1hdGVyaWFsIGNhY2hlIGtleS5cblx0ICpcblx0ICogVGhlIG1hdGVyaWFsIGNhY2hlIGtleSBpcyBwYXJ0IG9mIHRoZSByZW5kZXIgb2JqZWN0IGNhY2hlIGtleS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgbWF0ZXJpYWwgY2FjaGUga2V5LlxuXHQgKi9cblx0Z2V0TWF0ZXJpYWxDYWNoZUtleSgpIHtcblxuXHRcdGNvbnN0IHsgb2JqZWN0LCBtYXRlcmlhbCB9ID0gdGhpcztcblxuXHRcdGxldCBjYWNoZUtleSA9IG1hdGVyaWFsLmN1c3RvbVByb2dyYW1DYWNoZUtleSgpO1xuXG5cdFx0Zm9yICggY29uc3QgcHJvcGVydHkgb2YgZ2V0S2V5cyggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0aWYgKCAvXihpc1tBLVpdfF8pfF4odmlzaWJsZXx2ZXJzaW9ufHV1aWR8bmFtZXxvcGFjaXR5fHVzZXJEYXRhKSQvLnRlc3QoIHByb3BlcnR5ICkgKSBjb250aW51ZTtcblxuXHRcdFx0Y29uc3QgdmFsdWUgPSBtYXRlcmlhbFsgcHJvcGVydHkgXTtcblxuXHRcdFx0bGV0IHZhbHVlS2V5O1xuXG5cdFx0XHRpZiAoIHZhbHVlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdC8vIHNvbWUgbWF0ZXJpYWwgdmFsdWVzIHJlcXVpcmUgYSBmb3JtYXR0aW5nXG5cblx0XHRcdFx0Y29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHRcdFx0dmFsdWVLZXkgPSB2YWx1ZSAhPT0gMCA/ICcxJyA6ICcwJzsgLy8gQ29udmVydCB0byBvbi9vZmYsIGltcG9ydGFudCBmb3IgY2xlYXJjb2F0LCB0cmFuc21pc3Npb24sIGV0Y1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09ICdvYmplY3QnICkge1xuXG5cdFx0XHRcdFx0dmFsdWVLZXkgPSAneyc7XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdFx0dmFsdWVLZXkgKz0gdmFsdWUubWFwcGluZztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhbHVlS2V5ICs9ICd9JztcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dmFsdWVLZXkgPSBTdHJpbmcoIHZhbHVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhbHVlS2V5ID0gU3RyaW5nKCB2YWx1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNhY2hlS2V5ICs9IC8qcHJvcGVydHkgKyAnOicgKyovIHZhbHVlS2V5ICsgJywnO1xuXG5cdFx0fVxuXG5cdFx0Y2FjaGVLZXkgKz0gdGhpcy5jbGlwcGluZ0NvbnRleHRDYWNoZUtleSArICcsJztcblxuXHRcdGlmICggb2JqZWN0Lmdlb21ldHJ5ICkge1xuXG5cdFx0XHRjYWNoZUtleSArPSB0aGlzLmdldEdlb21ldHJ5Q2FjaGVLZXkoKTtcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0LnNrZWxldG9uICkge1xuXG5cdFx0XHRjYWNoZUtleSArPSBvYmplY3Quc2tlbGV0b24uYm9uZXMubGVuZ3RoICsgJywnO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaXNCYXRjaGVkTWVzaCApIHtcblxuXHRcdFx0Y2FjaGVLZXkgKz0gb2JqZWN0Ll9tYXRyaWNlc1RleHR1cmUudXVpZCArICcsJztcblxuXHRcdFx0aWYgKCBvYmplY3QuX2NvbG9yc1RleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y2FjaGVLZXkgKz0gb2JqZWN0Ll9jb2xvcnNUZXh0dXJlLnV1aWQgKyAnLCc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0LmNvdW50ID4gMSApIHtcblxuXHRcdFx0Ly8gVE9ETzogaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzI5MDY2I2lzc3VlY29tbWVudC0yMjY5NDAwODUwXG5cblx0XHRcdGNhY2hlS2V5ICs9IG9iamVjdC51dWlkICsgJywnO1xuXG5cdFx0fVxuXG5cdFx0Y2FjaGVLZXkgKz0gb2JqZWN0LnJlY2VpdmVTaGFkb3cgKyAnLCc7XG5cblx0XHRyZXR1cm4gaGFzaFN0cmluZyggY2FjaGVLZXkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIGdlb21ldHJ5IHJlcXVpcmVzIGFuIHVwZGF0ZSBvciBub3QuXG5cdCAqXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAcmVhZG9ubHlcblx0ICovXG5cdGdldCBuZWVkc0dlb21ldHJ5VXBkYXRlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnkuaWQgIT09IHRoaXMub2JqZWN0Lmdlb21ldHJ5LmlkO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgcmVuZGVyIG9iamVjdCByZXF1aXJlcyBhbiB1cGRhdGUgb3Igbm90LlxuXHQgKlxuXHQgKiBOb3RlOiBUaGVyZSBhcmUgdHdvIGRpc3RpbmN0IHBsYWNlcyB3aGVyZSByZW5kZXIgb2JqZWN0cyBhcmUgY2hlY2tlZCBmb3IgYW4gdXBkYXRlLlxuXHQgKlxuXHQgKiAxLiBJbiBgUmVuZGVyT2JqZWN0cy5nZXQoKWAgd2hpY2ggaXMgZXhlY3V0ZWQgd2hlbiB0aGUgcmVuZGVyIG9iamVjdCBpcyByZXF1ZXN0LiBUaGlzXG5cdCAqIG1ldGhvZCBjaGVja3MgdGhlIGBuZWVkc1VwZGF0ZWAgZmxhZyBhbmQgcmVjcmVhdGVzIHRoZSByZW5kZXIgb2JqZWN0IGlmIG5lY2Vzc2FyeS5cblx0ICogMi4gSW4gYFJlbmRlcmVyLl9yZW5kZXJPYmplY3REaXJlY3QoKWAgcmlnaHQgYWZ0ZXIgZ2V0dGluZyB0aGUgcmVuZGVyIG9iamVjdCB2aWFcblx0ICogYFJlbmRlck9iamVjdHMuZ2V0KClgLiBUaGUgcmVuZGVyIG9iamVjdCdzIE5vZGVNYXRlcmlhbE9ic2VydmVyIGlzIHRoZW4gdXNlZCB0byBkZXRlY3Rcblx0ICogYSBuZWVkIGZvciBhIHJlZnJlc2ggZHVlIHRvIG1hdGVyaWFsLCBnZW9tZXRyeSBvciBvYmplY3QgcmVsYXRlZCB2YWx1ZSBjaGFuZ2VzLlxuXHQgKlxuXHQgKiBUT0RPOiBJbnZlc3RpZ2F0ZSBpZiBpdCdzIHBvc3NpYmxlIHRvIG1lcmdlIGJvdGggc3RlcHMgc28gdGhlcmUgaXMgb25seSBhIHNpbmdsZSBwbGFjZVxuXHQgKiB0aGF0IHBlcmZvcm1zIHRoZSAnbmVlZHNVcGRhdGUnIGNoZWNrLlxuXHQgKlxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICogQHJlYWRvbmx5XG5cdCAqL1xuXHRnZXQgbmVlZHNVcGRhdGUoKSB7XG5cblx0XHRyZXR1cm4gLyp0aGlzLm9iamVjdC5zdGF0aWMgIT09IHRydWUgJiYqLyAoIHRoaXMuaW5pdGlhbE5vZGVzQ2FjaGVLZXkgIT09IHRoaXMuZ2V0RHluYW1pY0NhY2hlS2V5KCkgfHwgdGhpcy5jbGlwcGluZ05lZWRzVXBkYXRlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBkeW5hbWljIGNhY2hlIGtleSB3aGljaCByZXByZXNlbnRzIGEga2V5IHRoYXQgaXMgY29tcHV0ZWQgcGVyIGRyYXcgY29tbWFuZC5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY2FjaGUga2V5LlxuXHQgKi9cblx0Z2V0RHluYW1pY0NhY2hlS2V5KCkge1xuXG5cdFx0bGV0IGNhY2hlS2V5ID0gMDtcblxuXHRcdC8vIGBOb2Rlcy5nZXRDYWNoZUtleSgpYCByZXR1cm5zIGFuIGVudmlyb25tZW50IGNhY2hlIGtleSB3aGljaCBpcyBub3QgcmVsZXZhbnQgd2hlblxuXHRcdC8vIHRoZSByZW5kZXJlciBpcyBpbnNpZGUgYSBzaGFkb3cgcGFzcy5cblxuXHRcdGlmICggdGhpcy5tYXRlcmlhbC5pc1NoYWRvd1Bhc3NNYXRlcmlhbCAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0Y2FjaGVLZXkgPSB0aGlzLl9ub2Rlcy5nZXRDYWNoZUtleSggdGhpcy5zY2VuZSwgdGhpcy5saWdodHNOb2RlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2FtZXJhLmlzQXJyYXlDYW1lcmEgKSB7XG5cblx0XHRcdGNhY2hlS2V5ID0gaGFzaCggY2FjaGVLZXksIHRoaXMuY2FtZXJhLmNhbWVyYXMubGVuZ3RoICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMub2JqZWN0LnJlY2VpdmVTaGFkb3cgKSB7XG5cblx0XHRcdGNhY2hlS2V5ID0gaGFzaCggY2FjaGVLZXksIDEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjYWNoZUtleTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHJlbmRlciBvYmplY3QncyBjYWNoZSBrZXkuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNhY2hlIGtleS5cblx0ICovXG5cdGdldENhY2hlS2V5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0TWF0ZXJpYWxDYWNoZUtleSgpICsgdGhpcy5nZXREeW5hbWljQ2FjaGVLZXkoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIGludGVybmFsIHJlc291cmNlcy5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLm1hdGVyaWFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgdGhpcy5vbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0dGhpcy5vbkRpc3Bvc2UoKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVuZGVyT2JqZWN0O1xuIiwiaW1wb3J0IENoYWluTWFwIGZyb20gJy4vQ2hhaW5NYXAuanMnO1xuaW1wb3J0IFJlbmRlck9iamVjdCBmcm9tICcuL1JlbmRlck9iamVjdC5qcyc7XG5cbmNvbnN0IF9jaGFpbktleXMgPSBbXTtcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBtYW5hZ2VzIHRoZSByZW5kZXIgb2JqZWN0cyBvZiB0aGUgcmVuZGVyZXIuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUmVuZGVyT2JqZWN0cyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcmVuZGVyIG9iamVjdCBtYW5hZ2VtZW50IGNvbXBvbmVudC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7Tm9kZXN9IG5vZGVzIC0gUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBub2RlcyByZWxhdGVkIGxvZ2ljLlxuXHQgKiBAcGFyYW0ge0dlb21ldHJpZXN9IGdlb21ldHJpZXMgLSBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIGdlb21ldHJpZXMuXG5cdCAqIEBwYXJhbSB7UGlwZWxpbmVzfSBwaXBlbGluZXMgLSBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIHBpcGVsaW5lcy5cblx0ICogQHBhcmFtIHtCaW5kaW5nc30gYmluZGluZ3MgLSBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIGJpbmRpbmdzLlxuXHQgKiBAcGFyYW0ge0luZm99IGluZm8gLSBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIG1ldHJpY3MgYW5kIG1vbml0b3JpbmcgZGF0YS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByZW5kZXJlciwgbm9kZXMsIGdlb21ldHJpZXMsIHBpcGVsaW5lcywgYmluZGluZ3MsIGluZm8gKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVuZGVyZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7UmVuZGVyZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBub2RlcyByZWxhdGVkIGxvZ2ljLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGVzfVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZXMgPSBub2RlcztcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgZ2VvbWV0cmllcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtHZW9tZXRyaWVzfVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2VvbWV0cmllcyA9IGdlb21ldHJpZXM7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIHBpcGVsaW5lcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtQaXBlbGluZXN9XG5cdFx0ICovXG5cdFx0dGhpcy5waXBlbGluZXMgPSBwaXBlbGluZXM7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIGJpbmRpbmdzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0JpbmRpbmdzfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZGluZ3MgPSBiaW5kaW5ncztcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgbWV0cmljcyBhbmQgbW9uaXRvcmluZyBkYXRhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0luZm99XG5cdFx0ICovXG5cdFx0dGhpcy5pbmZvID0gaW5mbztcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSB0aGF0IG1hbmFnZXMgcmVuZGVyIGNvbnRleHRzIGluIGNoYWluIG1hcHNcblx0XHQgKiBmb3IgZWFjaCBwYXNzIElELlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsQ2hhaW5NYXA+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY2hhaW5NYXBzID0ge307XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcmVuZGVyIG9iamVjdCBmb3IgdGhlIGdpdmVuIG9iamVjdCBhbmQgc3RhdGUgZGF0YS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgM0Qgb2JqZWN0J3MgbWF0ZXJpYWwuXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lIHRoZSAzRCBvYmplY3QgYmVsb25ncyB0by5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhlIDNEIG9iamVjdCBzaG91bGQgYmUgcmVuZGVyZWQgd2l0aC5cblx0ICogQHBhcmFtIHtMaWdodHNOb2RlfSBsaWdodHNOb2RlIC0gVGhlIGxpZ2h0cyBub2RlLlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7Q2xpcHBpbmdDb250ZXh0fSBjbGlwcGluZ0NvbnRleHQgLSBUaGUgY2xpcHBpbmcgY29udGV4dC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtwYXNzSWRdIC0gQW4gb3B0aW9uYWwgSUQgZm9yIGlkZW50aWZ5aW5nIHRoZSBwYXNzLlxuXHQgKiBAcmV0dXJuIHtSZW5kZXJPYmplY3R9IFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKi9cblx0Z2V0KCBvYmplY3QsIG1hdGVyaWFsLCBzY2VuZSwgY2FtZXJhLCBsaWdodHNOb2RlLCByZW5kZXJDb250ZXh0LCBjbGlwcGluZ0NvbnRleHQsIHBhc3NJZCApIHtcblxuXHRcdGNvbnN0IGNoYWluTWFwID0gdGhpcy5nZXRDaGFpbk1hcCggcGFzc0lkICk7XG5cblx0XHQvLyByZXVzZSBjaGFpbkFycmF5XG5cdFx0X2NoYWluS2V5c1sgMCBdID0gb2JqZWN0O1xuXHRcdF9jaGFpbktleXNbIDEgXSA9IG1hdGVyaWFsO1xuXHRcdF9jaGFpbktleXNbIDIgXSA9IHJlbmRlckNvbnRleHQ7XG5cdFx0X2NoYWluS2V5c1sgMyBdID0gbGlnaHRzTm9kZTtcblxuXHRcdGxldCByZW5kZXJPYmplY3QgPSBjaGFpbk1hcC5nZXQoIF9jaGFpbktleXMgKTtcblxuXHRcdGlmICggcmVuZGVyT2JqZWN0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlck9iamVjdCA9IHRoaXMuY3JlYXRlUmVuZGVyT2JqZWN0KCB0aGlzLm5vZGVzLCB0aGlzLmdlb21ldHJpZXMsIHRoaXMucmVuZGVyZXIsIG9iamVjdCwgbWF0ZXJpYWwsIHNjZW5lLCBjYW1lcmEsIGxpZ2h0c05vZGUsIHJlbmRlckNvbnRleHQsIGNsaXBwaW5nQ29udGV4dCwgcGFzc0lkICk7XG5cblx0XHRcdGNoYWluTWFwLnNldCggX2NoYWluS2V5cywgcmVuZGVyT2JqZWN0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJPYmplY3QudXBkYXRlQ2xpcHBpbmcoIGNsaXBwaW5nQ29udGV4dCApO1xuXG5cdFx0XHRpZiAoIHJlbmRlck9iamVjdC5uZWVkc0dlb21ldHJ5VXBkYXRlICkge1xuXG5cdFx0XHRcdHJlbmRlck9iamVjdC5zZXRHZW9tZXRyeSggb2JqZWN0Lmdlb21ldHJ5ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZW5kZXJPYmplY3QudmVyc2lvbiAhPT0gbWF0ZXJpYWwudmVyc2lvbiB8fCByZW5kZXJPYmplY3QubmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdFx0aWYgKCByZW5kZXJPYmplY3QuaW5pdGlhbENhY2hlS2V5ICE9PSByZW5kZXJPYmplY3QuZ2V0Q2FjaGVLZXkoKSApIHtcblxuXHRcdFx0XHRcdHJlbmRlck9iamVjdC5kaXNwb3NlKCk7XG5cblx0XHRcdFx0XHRyZW5kZXJPYmplY3QgPSB0aGlzLmdldCggb2JqZWN0LCBtYXRlcmlhbCwgc2NlbmUsIGNhbWVyYSwgbGlnaHRzTm9kZSwgcmVuZGVyQ29udGV4dCwgY2xpcHBpbmdDb250ZXh0LCBwYXNzSWQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmVuZGVyT2JqZWN0LnZlcnNpb24gPSBtYXRlcmlhbC52ZXJzaW9uO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0X2NoYWluS2V5cy5sZW5ndGggPSAwO1xuXG5cdFx0cmV0dXJuIHJlbmRlck9iamVjdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBjaGFpbiBtYXAgZm9yIHRoZSBnaXZlbiBwYXNzIElELlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3Bhc3NJZD0nZGVmYXVsdCddIC0gVGhlIHBhc3MgSUQuXG5cdCAqIEByZXR1cm4ge0NoYWluTWFwfSBUaGUgY2hhaW4gbWFwLlxuXHQgKi9cblx0Z2V0Q2hhaW5NYXAoIHBhc3NJZCA9ICdkZWZhdWx0JyApIHtcblxuXHRcdHJldHVybiB0aGlzLmNoYWluTWFwc1sgcGFzc0lkIF0gfHwgKCB0aGlzLmNoYWluTWFwc1sgcGFzc0lkIF0gPSBuZXcgQ2hhaW5NYXAoKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgaW50ZXJuYWwgcmVzb3VyY2VzLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuY2hhaW5NYXBzID0ge307XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgcmVuZGVyIG9iamVjdHMgd2l0aCB0aGUgZ2l2ZW4gbGlzdCBvZiBwYXJhbWV0ZXJzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVzfSBub2RlcyAtIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgbm9kZXMgcmVsYXRlZCBsb2dpYy5cblx0ICogQHBhcmFtIHtHZW9tZXRyaWVzfSBnZW9tZXRyaWVzIC0gUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBnZW9tZXRyaWVzLlxuXHQgKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgb2JqZWN0J3MgbWF0ZXJpYWwuXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lIHRoZSAzRCBvYmplY3QgYmVsb25ncyB0by5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhlIG9iamVjdCBzaG91bGQgYmUgcmVuZGVyZWQgd2l0aC5cblx0ICogQHBhcmFtIHtMaWdodHNOb2RlfSBsaWdodHNOb2RlIC0gVGhlIGxpZ2h0cyBub2RlLlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7Q2xpcHBpbmdDb250ZXh0fSBjbGlwcGluZ0NvbnRleHQgLSBUaGUgY2xpcHBpbmcgY29udGV4dC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtwYXNzSWRdIC0gQW4gb3B0aW9uYWwgSUQgZm9yIGlkZW50aWZ5aW5nIHRoZSBwYXNzLlxuXHQgKiBAcmV0dXJuIHtSZW5kZXJPYmplY3R9IFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKi9cblx0Y3JlYXRlUmVuZGVyT2JqZWN0KCBub2RlcywgZ2VvbWV0cmllcywgcmVuZGVyZXIsIG9iamVjdCwgbWF0ZXJpYWwsIHNjZW5lLCBjYW1lcmEsIGxpZ2h0c05vZGUsIHJlbmRlckNvbnRleHQsIGNsaXBwaW5nQ29udGV4dCwgcGFzc0lkICkge1xuXG5cdFx0Y29uc3QgY2hhaW5NYXAgPSB0aGlzLmdldENoYWluTWFwKCBwYXNzSWQgKTtcblxuXHRcdGNvbnN0IHJlbmRlck9iamVjdCA9IG5ldyBSZW5kZXJPYmplY3QoIG5vZGVzLCBnZW9tZXRyaWVzLCByZW5kZXJlciwgb2JqZWN0LCBtYXRlcmlhbCwgc2NlbmUsIGNhbWVyYSwgbGlnaHRzTm9kZSwgcmVuZGVyQ29udGV4dCwgY2xpcHBpbmdDb250ZXh0ICk7XG5cblx0XHRyZW5kZXJPYmplY3Qub25EaXNwb3NlID0gKCkgPT4ge1xuXG5cdFx0XHR0aGlzLnBpcGVsaW5lcy5kZWxldGUoIHJlbmRlck9iamVjdCApO1xuXHRcdFx0dGhpcy5iaW5kaW5ncy5kZWxldGUoIHJlbmRlck9iamVjdCApO1xuXHRcdFx0dGhpcy5ub2Rlcy5kZWxldGUoIHJlbmRlck9iamVjdCApO1xuXG5cdFx0XHRjaGFpbk1hcC5kZWxldGUoIHJlbmRlck9iamVjdC5nZXRDaGFpbkFycmF5KCkgKTtcblxuXHRcdH07XG5cblx0XHRyZXR1cm4gcmVuZGVyT2JqZWN0O1xuXG5cdH1cblxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlbmRlck9iamVjdHM7XG4iLCIvKipcbiAqIERhdGEgc3RydWN0dXJlIGZvciB0aGUgcmVuZGVyZXIuIEl0IGlzIGludGVuZGVkIHRvIG1hbmFnZVxuICogZGF0YSBvZiBvYmplY3RzIGluIGRpY3Rpb25hcmllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBEYXRhTWFwIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBkYXRhIG1hcC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0LyoqXG5cdFx0ICogYERhdGFNYXBgIGludGVybmFsbHkgdXNlcyBhIHdlYWsgbWFwXG5cdFx0ICogdG8gbWFuYWdlIGl0cyBkYXRhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1dlYWtNYXB9XG5cdFx0ICovXG5cdFx0dGhpcy5kYXRhID0gbmV3IFdlYWtNYXAoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRpY3Rpb25hcnkgZm9yIHRoZSBnaXZlbiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBUaGUgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBkaWN0aW9uYXJ5LlxuXHQgKi9cblx0Z2V0KCBvYmplY3QgKSB7XG5cblx0XHRsZXQgbWFwID0gdGhpcy5kYXRhLmdldCggb2JqZWN0ICk7XG5cblx0XHRpZiAoIG1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXAgPSB7fTtcblx0XHRcdHRoaXMuZGF0YS5zZXQoIG9iamVjdCwgbWFwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWFwO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVsZXRlcyB0aGUgZGljdGlvbmFyeSBmb3IgdGhlIGdpdmVuIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAtIFRoZSBvYmplY3QuXG5cdCAqIEByZXR1cm4gez9PYmplY3R9IFRoZSBkZWxldGVkIGRpY3Rpb25hcnkuXG5cdCAqL1xuXHRkZWxldGUoIG9iamVjdCApIHtcblxuXHRcdGxldCBtYXAgPSBudWxsO1xuXG5cdFx0aWYgKCB0aGlzLmRhdGEuaGFzKCBvYmplY3QgKSApIHtcblxuXHRcdFx0bWFwID0gdGhpcy5kYXRhLmdldCggb2JqZWN0ICk7XG5cblx0XHRcdHRoaXMuZGF0YS5kZWxldGUoIG9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGEgZGljdGlvbmFyeSBkZWZpbmVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IC0gVGhlIG9iamVjdCB0byB0ZXN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGEgZGljdGlvbmFyeSBpcyBkZWZpbmVkIG9yIG5vdC5cblx0ICovXG5cdGhhcyggb2JqZWN0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5oYXMoIG9iamVjdCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgaW50ZXJuYWwgcmVzb3VyY2VzLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGF0YSA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFNYXA7XG4iLCJleHBvcnQgY29uc3QgQXR0cmlidXRlVHlwZSA9IHtcblx0VkVSVEVYOiAxLFxuXHRJTkRFWDogMixcblx0U1RPUkFHRTogMyxcblx0SU5ESVJFQ1Q6IDRcbn07XG5cbi8vIHNpemUgb2YgYSBjaHVuayBpbiBieXRlcyAoU1REMTQwIGxheW91dClcblxuZXhwb3J0IGNvbnN0IEdQVV9DSFVOS19CWVRFUyA9IDE2O1xuXG4vLyBAVE9ETzogTW92ZSB0byBzcmMvY29uc3RhbnRzLmpzXG5cbmV4cG9ydCBjb25zdCBCbGVuZENvbG9yRmFjdG9yID0gMjExO1xuZXhwb3J0IGNvbnN0IE9uZU1pbnVzQmxlbmRDb2xvckZhY3RvciA9IDIxMjtcbiIsImltcG9ydCBEYXRhTWFwIGZyb20gJy4vRGF0YU1hcC5qcyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVUeXBlIH0gZnJvbSAnLi9Db25zdGFudHMuanMnO1xuXG5pbXBvcnQgeyBEeW5hbWljRHJhd1VzYWdlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBUaGlzIHJlbmRlcmVyIG1vZHVsZSBtYW5hZ2VzIGdlb21ldHJ5IGF0dHJpYnV0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBEYXRhTWFwXG4gKi9cbmNsYXNzIEF0dHJpYnV0ZXMgZXh0ZW5kcyBEYXRhTWFwIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBhdHRyaWJ1dGUgbWFuYWdlbWVudCBjb21wb25lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QmFja2VuZH0gYmFja2VuZCAtIFRoZSByZW5kZXJlcidzIGJhY2tlbmQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYmFja2VuZCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVuZGVyZXIncyBiYWNrZW5kLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0JhY2tlbmR9XG5cdFx0ICovXG5cdFx0dGhpcy5iYWNrZW5kID0gYmFja2VuZDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlbGV0ZXMgdGhlIGRhdGEgZm9yIHRoZSBnaXZlbiBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYXR0cmlidXRlLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R8bnVsbH0gVGhlIGRlbGV0ZWQgYXR0cmlidXRlIGRhdGEuXG5cdCAqL1xuXHRkZWxldGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGNvbnN0IGF0dHJpYnV0ZURhdGEgPSBzdXBlci5kZWxldGUoIGF0dHJpYnV0ZSApO1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGVEYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuYmFja2VuZC5kZXN0cm95QXR0cmlidXRlKCBhdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhdHRyaWJ1dGVEYXRhO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgZ2l2ZW4gYXR0cmlidXRlLiBUaGlzIG1ldGhvZCBjcmVhdGVzIGF0dHJpYnV0ZSBidWZmZXJzXG5cdCAqIGZvciBuZXcgYXR0cmlidXRlcyBhbmQgdXBkYXRlcyBkYXRhIGZvciBleGlzdGluZyBvbmVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGF0dHJpYnV0ZSB0byB1cGRhdGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlIC0gVGhlIGF0dHJpYnV0ZSB0eXBlLlxuXHQgKi9cblx0dXBkYXRlKCBhdHRyaWJ1dGUsIHR5cGUgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gdGhpcy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0aWYgKCBkYXRhLnZlcnNpb24gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB0eXBlID09PSBBdHRyaWJ1dGVUeXBlLlZFUlRFWCApIHtcblxuXHRcdFx0XHR0aGlzLmJhY2tlbmQuY3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gQXR0cmlidXRlVHlwZS5JTkRFWCApIHtcblxuXHRcdFx0XHR0aGlzLmJhY2tlbmQuY3JlYXRlSW5kZXhBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBBdHRyaWJ1dGVUeXBlLlNUT1JBR0UgKSB7XG5cblx0XHRcdFx0dGhpcy5iYWNrZW5kLmNyZWF0ZVN0b3JhZ2VBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBBdHRyaWJ1dGVUeXBlLklORElSRUNUICkge1xuXG5cdFx0XHRcdHRoaXMuYmFja2VuZC5jcmVhdGVJbmRpcmVjdFN0b3JhZ2VBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRhdGEudmVyc2lvbiA9IHRoaXMuX2dldEJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkudmVyc2lvbjtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IGJ1ZmZlckF0dHJpYnV0ZSA9IHRoaXMuX2dldEJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICk7XG5cblx0XHRcdGlmICggZGF0YS52ZXJzaW9uIDwgYnVmZmVyQXR0cmlidXRlLnZlcnNpb24gfHwgYnVmZmVyQXR0cmlidXRlLnVzYWdlID09PSBEeW5hbWljRHJhd1VzYWdlICkge1xuXG5cdFx0XHRcdHRoaXMuYmFja2VuZC51cGRhdGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdGRhdGEudmVyc2lvbiA9IGJ1ZmZlckF0dHJpYnV0ZS52ZXJzaW9uO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVdGlsaXR5IG1ldGhvZCBmb3IgaGFuZGxpbmcgaW50ZXJsZWF2ZWQgYnVmZmVyIGF0dHJpYnV0ZXMgY29ycmVjdGx5LlxuXHQgKiBUbyBwcm9jZXNzIHRoZW0sIHRoZWlyIGBJbnRlcmxlYXZlZEJ1ZmZlcmAgaXMgcmV0dXJuZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYXR0cmlidXRlLlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJ9XG5cdCAqL1xuXHRfZ2V0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRyZXR1cm4gYXR0cmlidXRlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBdHRyaWJ1dGVzO1xuIiwiaW1wb3J0IERhdGFNYXAgZnJvbSAnLi9EYXRhTWFwLmpzJztcbmltcG9ydCB7IEF0dHJpYnV0ZVR5cGUgfSBmcm9tICcuL0NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBhcnJheU5lZWRzVWludDMyIH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnO1xuXG5pbXBvcnQgeyBVaW50MTZCdWZmZXJBdHRyaWJ1dGUsIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB3aXJlZnJhbWUgdmVyc2lvbiBmb3IgdGhlIGdpdmVuIGdlb21ldHJ5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5IC0gVGhlIGdlb21ldHJ5LlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0V2lyZWZyYW1lVmVyc2lvbiggZ2VvbWV0cnkgKSB7XG5cblx0cmV0dXJuICggZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgKSA/IGdlb21ldHJ5LmluZGV4LnZlcnNpb24gOiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZlcnNpb247XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgd2lyZWZyYW1lIGluZGV4IGF0dHJpYnV0ZSBmb3IgdGhlIGdpdmVuIGdlb21ldHJ5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5IC0gVGhlIGdlb21ldHJ5LlxuICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBUaGUgd2lyZWZyYW1lIGluZGV4IGF0dHJpYnV0ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0V2lyZWZyYW1lSW5kZXgoIGdlb21ldHJ5ICkge1xuXG5cdGNvbnN0IGluZGljZXMgPSBbXTtcblxuXHRjb25zdCBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdGNvbnN0IGdlb21ldHJ5UG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdGlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gZ2VvbWV0cnlJbmRleC5hcnJheTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gMyApIHtcblxuXHRcdFx0Y29uc3QgYSA9IGFycmF5WyBpICsgMCBdO1xuXHRcdFx0Y29uc3QgYiA9IGFycmF5WyBpICsgMSBdO1xuXHRcdFx0Y29uc3QgYyA9IGFycmF5WyBpICsgMiBdO1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBnZW9tZXRyeVBvc2l0aW9uLmFycmF5O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gKCBhcnJheS5sZW5ndGggLyAzICkgLSAxOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRjb25zdCBhID0gaSArIDA7XG5cdFx0XHRjb25zdCBiID0gaSArIDE7XG5cdFx0XHRjb25zdCBjID0gaSArIDI7XG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjb25zdCBhdHRyaWJ1dGUgPSBuZXcgKCBhcnJheU5lZWRzVWludDMyKCBpbmRpY2VzICkgPyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgOiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgKSggaW5kaWNlcywgMSApO1xuXHRhdHRyaWJ1dGUudmVyc2lvbiA9IGdldFdpcmVmcmFtZVZlcnNpb24oIGdlb21ldHJ5ICk7XG5cblx0cmV0dXJuIGF0dHJpYnV0ZTtcblxufVxuXG4vKipcbiAqIFRoaXMgcmVuZGVyZXIgbW9kdWxlIG1hbmFnZXMgZ2VvbWV0cmllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIERhdGFNYXBcbiAqL1xuY2xhc3MgR2VvbWV0cmllcyBleHRlbmRzIERhdGFNYXAge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGdlb21ldHJ5IG1hbmFnZW1lbnQgY29tcG9uZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0F0dHJpYnV0ZXN9IGF0dHJpYnV0ZXMgLSBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIGF0dHJpYnV0ZXMuXG5cdCAqIEBwYXJhbSB7SW5mb30gaW5mbyAtIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgbWV0cmljcyBhbmQgbW9uaXRvcmluZyBkYXRhLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGF0dHJpYnV0ZXMsIGluZm8gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBhdHRyaWJ1dGVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0F0dHJpYnV0ZXN9XG5cdFx0ICovXG5cdFx0dGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgbWV0cmljcyBhbmQgbW9uaXRvcmluZyBkYXRhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0luZm99XG5cdFx0ICovXG5cdFx0dGhpcy5pbmZvID0gaW5mbztcblxuXHRcdC8qKlxuXHRcdCAqIFdlYWsgTWFwIGZvciBtYW5hZ2luZyBhdHRyaWJ1dGVzIGZvciB3aXJlZnJhbWUgcmVuZGVyaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1dlYWtNYXA8QnVmZmVyR2VvbWV0cnksQnVmZmVyQXR0cmlidXRlPn1cblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBXZWFrIE1hcCBpcyB1c2VkIHRvIG1ha2Ugc3VyZSBidWZmZXIgYXR0cmlidXRlcyBhcmVcblx0XHQgKiB1cGRhdGVkIG9ubHkgb25jZSBwZXIgcmVuZGVyIGNhbGwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2Vha01hcDxCdWZmZXJBdHRyaWJ1dGUsbnVtYmVyPn1cblx0XHQgKi9cblx0XHR0aGlzLmF0dHJpYnV0ZUNhbGwgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHJlbmRlciBvYmplY3QgaGFzIGFuIGluaXRpYWxpemVkIGdlb21ldHJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgaWYgdGhlIGdpdmVuIHJlbmRlciBvYmplY3QgaGFzIGFuIGluaXRpYWxpemVkIGdlb21ldHJ5IG9yIG5vdC5cblx0ICovXG5cdGhhcyggcmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSByZW5kZXJPYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRyZXR1cm4gc3VwZXIuaGFzKCBnZW9tZXRyeSApICYmIHRoaXMuZ2V0KCBnZW9tZXRyeSApLmluaXRpYWxpemVkID09PSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUHJlcGFyZXMgdGhlIGdlb21ldHJ5IG9mIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0IGZvciByZW5kZXJpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICovXG5cdHVwZGF0ZUZvclJlbmRlciggcmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0aWYgKCB0aGlzLmhhcyggcmVuZGVyT2JqZWN0ICkgPT09IGZhbHNlICkgdGhpcy5pbml0R2VvbWV0cnkoIHJlbmRlck9iamVjdCApO1xuXG5cdFx0dGhpcy51cGRhdGVBdHRyaWJ1dGVzKCByZW5kZXJPYmplY3QgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBnZW9tZXRyeSBvZiB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKi9cblx0aW5pdEdlb21ldHJ5KCByZW5kZXJPYmplY3QgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHJlbmRlck9iamVjdC5nZW9tZXRyeTtcblx0XHRjb25zdCBnZW9tZXRyeURhdGEgPSB0aGlzLmdldCggZ2VvbWV0cnkgKTtcblxuXHRcdGdlb21ldHJ5RGF0YS5pbml0aWFsaXplZCA9IHRydWU7XG5cblx0XHR0aGlzLmluZm8ubWVtb3J5Lmdlb21ldHJpZXMgKys7XG5cblx0XHRjb25zdCBvbkRpc3Bvc2UgPSAoKSA9PiB7XG5cblx0XHRcdHRoaXMuaW5mby5tZW1vcnkuZ2VvbWV0cmllcyAtLTtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdGNvbnN0IGdlb21ldHJ5QXR0cmlidXRlcyA9IHJlbmRlck9iamVjdC5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5hdHRyaWJ1dGVzLmRlbGV0ZSggaW5kZXggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZSBvZiBnZW9tZXRyeUF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0dGhpcy5hdHRyaWJ1dGVzLmRlbGV0ZSggZ2VvbWV0cnlBdHRyaWJ1dGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB3aXJlZnJhbWVBdHRyaWJ1dGUgPSB0aGlzLndpcmVmcmFtZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0XHRpZiAoIHdpcmVmcmFtZUF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuYXR0cmlidXRlcy5kZWxldGUoIHdpcmVmcmFtZUF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25EaXNwb3NlICk7XG5cblx0XHR9O1xuXG5cdFx0Z2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkRpc3Bvc2UgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGdlb21ldHJ5IGF0dHJpYnV0ZXMgb2YgdGhlIGdpdmVuIHJlbmRlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICovXG5cdHVwZGF0ZUF0dHJpYnV0ZXMoIHJlbmRlck9iamVjdCApIHtcblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSByZW5kZXJPYmplY3QuZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0Zm9yICggY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLmlzU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZSB8fCBhdHRyaWJ1dGUuaXNTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdHRoaXMudXBkYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIEF0dHJpYnV0ZVR5cGUuU1RPUkFHRSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMudXBkYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIEF0dHJpYnV0ZVR5cGUuVkVSVEVYICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGluZGV4ZXNcblxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5nZXRJbmRleCggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZUF0dHJpYnV0ZSggaW5kZXgsIEF0dHJpYnV0ZVR5cGUuSU5ERVggKTtcblxuXHRcdH1cblxuXHRcdC8vIGluZGlyZWN0XG5cblx0XHRjb25zdCBpbmRpcmVjdCA9IHJlbmRlck9iamVjdC5nZW9tZXRyeS5pbmRpcmVjdDtcblxuXHRcdGlmICggaW5kaXJlY3QgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudXBkYXRlQXR0cmlidXRlKCBpbmRpcmVjdCwgQXR0cmlidXRlVHlwZS5JTkRJUkVDVCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgZ2l2ZW4gYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGF0dHJpYnV0ZSB0byB1cGRhdGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlIC0gVGhlIGF0dHJpYnV0ZSB0eXBlLlxuXHQgKi9cblx0dXBkYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIHR5cGUgKSB7XG5cblx0XHRjb25zdCBjYWxsSWQgPSB0aGlzLmluZm8ucmVuZGVyLmNhbGxzO1xuXG5cdFx0aWYgKCAhIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuYXR0cmlidXRlQ2FsbC5nZXQoIGF0dHJpYnV0ZSApICE9PSBjYWxsSWQgKSB7XG5cblx0XHRcdFx0dGhpcy5hdHRyaWJ1dGVzLnVwZGF0ZSggYXR0cmlidXRlLCB0eXBlICk7XG5cblx0XHRcdFx0dGhpcy5hdHRyaWJ1dGVDYWxsLnNldCggYXR0cmlidXRlLCBjYWxsSWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCB0aGlzLmF0dHJpYnV0ZUNhbGwuZ2V0KCBhdHRyaWJ1dGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuYXR0cmlidXRlcy51cGRhdGUoIGF0dHJpYnV0ZSwgdHlwZSApO1xuXG5cdFx0XHRcdHRoaXMuYXR0cmlidXRlQ2FsbC5zZXQoIGF0dHJpYnV0ZSwgY2FsbElkICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMuYXR0cmlidXRlQ2FsbC5nZXQoIGF0dHJpYnV0ZS5kYXRhICkgIT09IGNhbGxJZCApIHtcblxuXHRcdFx0XHR0aGlzLmF0dHJpYnV0ZXMudXBkYXRlKCBhdHRyaWJ1dGUsIHR5cGUgKTtcblxuXHRcdFx0XHR0aGlzLmF0dHJpYnV0ZUNhbGwuc2V0KCBhdHRyaWJ1dGUuZGF0YSwgY2FsbElkICk7XG5cblx0XHRcdFx0dGhpcy5hdHRyaWJ1dGVDYWxsLnNldCggYXR0cmlidXRlLCBjYWxsSWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5kaXJlY3QgYnVmZmVyIGF0dHJpYnV0ZSBvZiB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHs/QnVmZmVyQXR0cmlidXRlfSBUaGUgaW5kaXJlY3QgYXR0cmlidXRlLiBgbnVsbGAgaWYgbm8gaW5kaXJlY3QgZHJhd2luZyBpcyB1c2VkLlxuXHQgKi9cblx0Z2V0SW5kaXJlY3QoIHJlbmRlck9iamVjdCApIHtcblxuXHRcdHJldHVybiByZW5kZXJPYmplY3QuZ2VvbWV0cnkuaW5kaXJlY3Q7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdCdzIGdlb21ldHJ5LiBUaGlzIGlzIGltcGxlbWVudGVkXG5cdCAqIGluIGEgbWV0aG9kIHRvIHJldHVybiBhIHdpcmVmcmFtZSBpbmRleCBpZiBuZWNlc3NhcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICogQHJldHVybiB7P0J1ZmZlckF0dHJpYnV0ZX0gVGhlIGluZGV4LiBSZXR1cm5zIGBudWxsYCBmb3Igbm9uLWluZGV4ZWQgZ2VvbWV0cmllcy5cblx0ICovXG5cdGdldEluZGV4KCByZW5kZXJPYmplY3QgKSB7XG5cblx0XHRjb25zdCB7IGdlb21ldHJ5LCBtYXRlcmlhbCB9ID0gcmVuZGVyT2JqZWN0O1xuXG5cdFx0bGV0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cblx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc3Qgd2lyZWZyYW1lcyA9IHRoaXMud2lyZWZyYW1lcztcblxuXHRcdFx0bGV0IHdpcmVmcmFtZUF0dHJpYnV0ZSA9IHdpcmVmcmFtZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0XHRpZiAoIHdpcmVmcmFtZUF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHdpcmVmcmFtZUF0dHJpYnV0ZSA9IGdldFdpcmVmcmFtZUluZGV4KCBnZW9tZXRyeSApO1xuXG5cdFx0XHRcdHdpcmVmcmFtZXMuc2V0KCBnZW9tZXRyeSwgd2lyZWZyYW1lQXR0cmlidXRlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHdpcmVmcmFtZUF0dHJpYnV0ZS52ZXJzaW9uICE9PSBnZXRXaXJlZnJhbWVWZXJzaW9uKCBnZW9tZXRyeSApICkge1xuXG5cdFx0XHRcdHRoaXMuYXR0cmlidXRlcy5kZWxldGUoIHdpcmVmcmFtZUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdHdpcmVmcmFtZUF0dHJpYnV0ZSA9IGdldFdpcmVmcmFtZUluZGV4KCBnZW9tZXRyeSApO1xuXG5cdFx0XHRcdHdpcmVmcmFtZXMuc2V0KCBnZW9tZXRyeSwgd2lyZWZyYW1lQXR0cmlidXRlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aW5kZXggPSB3aXJlZnJhbWVBdHRyaWJ1dGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW5kZXg7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEdlb21ldHJpZXM7XG4iLCIvKipcbiAqIFRoaXMgcmVuZGVyZXIgbW9kdWxlIHByb3ZpZGVzIGEgc2VyaWVzIG9mIHN0YXRpc3RpY2FsIGluZm9ybWF0aW9uXG4gKiBhYm91dCB0aGUgR1BVIG1lbW9yeSBhbmQgdGhlIHJlbmRlcmluZyBwcm9jZXNzLiBVc2VmdWwgZm9yIGRlYnVnZ2luZ1xuICogYW5kIG1vbml0b3JpbmcuXG4gKi9cbmNsYXNzIEluZm8ge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGluZm8gY29tcG9uZW50LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIGZyYW1lIHJlbGF0ZWQgbWV0cmljcyBzaG91bGQgYXV0b21hdGljYWxseVxuXHRcdCAqIGJlIHJlc2V0dGVkIG9yIG5vdC4gVGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgc2V0IHRvIGBmYWxzZWBcblx0XHQgKiBieSBhcHBzIHdoaWNoIG1hbmFnZSB0aGVpciBvd24gYW5pbWF0aW9uIGxvb3AuIFRoZXkgbXVzdFxuXHRcdCAqIHRoZW4gY2FsbCBgcmVuZGVyZXIuaW5mby5yZXNldCgpYCBvbmNlIHBlciBmcmFtZSBtYW51YWxseS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmF1dG9SZXNldCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VycmVudCBmcmFtZSBJRC4gVGhpcyBJRCBpcyBtYW5hZ2VkXG5cdFx0ICogYnkgYE5vZGVGcmFtZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmZyYW1lID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBudW1iZXIgb2YgcmVuZGVyIGNhbGxzIHNpbmNlIHRoZVxuXHRcdCAqIGFwcCBoYXMgYmVlbiBzdGFydGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5jYWxscyA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXIgcmVsYXRlZCBtZXRyaWNzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gY2FsbHMgLSBUaGUgbnVtYmVyIG9mIHJlbmRlciBjYWxscyBzaW5jZSB0aGUgYXBwIGhhcyBiZWVuIHN0YXJ0ZWQuXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGZyYW1lQ2FsbHMgLSBUaGUgbnVtYmVyIG9mIHJlbmRlciBjYWxscyBvZiB0aGUgY3VycmVudCBmcmFtZS5cblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gZHJhd0NhbGxzIC0gVGhlIG51bWJlciBvZiBkcmF3IGNhbGxzIG9mIHRoZSBjdXJyZW50IGZyYW1lLlxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0cmlhbmdsZXMgLSBUaGUgbnVtYmVyIG9mIHJlbmRlcmVkIHRyaWFuZ2xlIHByaW1pdGl2ZXMgb2YgdGhlIGN1cnJlbnQgZnJhbWUuXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IHBvaW50cyAtIFRoZSBudW1iZXIgb2YgcmVuZGVyZWQgcG9pbnQgcHJpbWl0aXZlcyBvZiB0aGUgY3VycmVudCBmcmFtZS5cblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gbGluZXMgLSBUaGUgbnVtYmVyIG9mIHJlbmRlcmVkIGxpbmUgcHJpbWl0aXZlcyBvZiB0aGUgY3VycmVudCBmcmFtZS5cblx0XHQgKiBAcHJvcGVydHkge251bWJlcn0gdGltZXN0YW1wIC0gVGhlIHRpbWVzdGFtcCBvZiB0aGUgZnJhbWUgd2hlbiB1c2luZyBgcmVuZGVyZXIucmVuZGVyQXN5bmMoKWAuXG5cdFx0ICovXG5cdFx0dGhpcy5yZW5kZXIgPSB7XG5cdFx0XHRjYWxsczogMCxcblx0XHRcdGZyYW1lQ2FsbHM6IDAsXG5cdFx0XHRkcmF3Q2FsbHM6IDAsXG5cdFx0XHR0cmlhbmdsZXM6IDAsXG5cdFx0XHRwb2ludHM6IDAsXG5cdFx0XHRsaW5lczogMCxcblx0XHRcdHRpbWVzdGFtcDogMCxcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ29tcHV0ZSByZWxhdGVkIG1ldHJpY3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjYWxscyAtIFRoZSBudW1iZXIgb2YgY29tcHV0ZSBjYWxscyBzaW5jZSB0aGUgYXBwIGhhcyBiZWVuIHN0YXJ0ZWQuXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGZyYW1lQ2FsbHMgLSBUaGUgbnVtYmVyIG9mIGNvbXB1dGUgY2FsbHMgb2YgdGhlIGN1cnJlbnQgZnJhbWUuXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IHRpbWVzdGFtcCAtIFRoZSB0aW1lc3RhbXAgb2YgdGhlIGZyYW1lIHdoZW4gdXNpbmcgYHJlbmRlcmVyLmNvbXB1dGVBc3luYygpYC5cblx0XHQgKi9cblx0XHR0aGlzLmNvbXB1dGUgPSB7XG5cdFx0XHRjYWxsczogMCxcblx0XHRcdGZyYW1lQ2FsbHM6IDAsXG5cdFx0XHR0aW1lc3RhbXA6IDBcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogTWVtb3J5IHJlbGF0ZWQgbWV0cmljcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGdlb21ldHJpZXMgLSBUaGUgbnVtYmVyIG9mIGFjdGl2ZSBnZW9tZXRyaWVzLlxuXHRcdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmcmFtZUNhbGxzIC0gVGhlIG51bWJlciBvZiBhY3RpdmUgdGV4dHVyZXMuXG5cdFx0ICovXG5cdFx0dGhpcy5tZW1vcnkgPSB7XG5cdFx0XHRnZW9tZXRyaWVzOiAwLFxuXHRcdFx0dGV4dHVyZXM6IDBcblx0XHR9O1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGV4ZWN1dGVkIHBlciBkcmF3IGNhbGwgYW5kIHVwZGF0ZXMgdGhlIGNvcnJlc3BvbmRpbmcgbWV0cmljcy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0aGF0IGlzIGdvaW5nIHRvIGJlIHJlbmRlcmVkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBUaGUgdmVydGV4IG9yIGluZGV4IGNvdW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5zdGFuY2VDb3VudCAtIFRoZSBpbnN0YW5jZSBjb3VudC5cblx0ICovXG5cdHVwZGF0ZSggb2JqZWN0LCBjb3VudCwgaW5zdGFuY2VDb3VudCApIHtcblxuXHRcdHRoaXMucmVuZGVyLmRyYXdDYWxscyArKztcblxuXHRcdGlmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNTcHJpdGUgKSB7XG5cblx0XHRcdHRoaXMucmVuZGVyLnRyaWFuZ2xlcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAvIDMgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1BvaW50cyApIHtcblxuXHRcdFx0dGhpcy5yZW5kZXIucG9pbnRzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xpbmVTZWdtZW50cyApIHtcblxuXHRcdFx0dGhpcy5yZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLyAyICk7XG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lICkge1xuXG5cdFx0XHR0aGlzLnJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAtIDEgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHUFVJbmZvOiBVbmtub3duIG9iamVjdCB0eXBlLicgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlc2V0cyBmcmFtZSByZWxhdGVkIG1ldHJpY3MuXG5cdCAqL1xuXHRyZXNldCgpIHtcblxuXHRcdHRoaXMucmVuZGVyLmRyYXdDYWxscyA9IDA7XG5cdFx0dGhpcy5yZW5kZXIuZnJhbWVDYWxscyA9IDA7XG5cdFx0dGhpcy5jb21wdXRlLmZyYW1lQ2FsbHMgPSAwO1xuXG5cdFx0dGhpcy5yZW5kZXIudHJpYW5nbGVzID0gMDtcblx0XHR0aGlzLnJlbmRlci5wb2ludHMgPSAwO1xuXHRcdHRoaXMucmVuZGVyLmxpbmVzID0gMDtcblxuXG5cdH1cblxuXHQvKipcblx0ICogUGVyZm9ybXMgYSBjb21wbGV0ZSByZXNldCBvZiB0aGUgb2JqZWN0LlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMucmVzZXQoKTtcblxuXHRcdHRoaXMuY2FsbHMgPSAwO1xuXG5cdFx0dGhpcy5yZW5kZXIuY2FsbHMgPSAwO1xuXHRcdHRoaXMuY29tcHV0ZS5jYWxscyA9IDA7XG5cblx0XHR0aGlzLnJlbmRlci50aW1lc3RhbXAgPSAwO1xuXHRcdHRoaXMuY29tcHV0ZS50aW1lc3RhbXAgPSAwO1xuXHRcdHRoaXMubWVtb3J5Lmdlb21ldHJpZXMgPSAwO1xuXHRcdHRoaXMubWVtb3J5LnRleHR1cmVzID0gMDtcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBJbmZvO1xuIiwiLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIHBpcGVsaW5lcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIFBpcGVsaW5lIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBwaXBlbGluZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlS2V5IC0gVGhlIHBpcGVsaW5lJ3MgY2FjaGUga2V5LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNhY2hlS2V5ICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBpcGVsaW5lJ3MgY2FjaGUga2V5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLmNhY2hlS2V5ID0gY2FjaGVLZXk7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgb2Z0ZW4gdGhlIHBpcGVsaW5lIGlzIGN1cnJlbnRseSBpbiB1c2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnVzZWRUaW1lcyA9IDA7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBpcGVsaW5lO1xuIiwiaW1wb3J0IFBpcGVsaW5lIGZyb20gJy4vUGlwZWxpbmUuanMnO1xuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgcmVuZGVyIHBpcGVsaW5lcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFBpcGVsaW5lXG4gKi9cbmNsYXNzIFJlbmRlclBpcGVsaW5lIGV4dGVuZHMgUGlwZWxpbmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlbmRlciBwaXBlbGluZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlS2V5IC0gVGhlIHBpcGVsaW5lJ3MgY2FjaGUga2V5LlxuXHQgKiBAcGFyYW0ge1Byb2dyYW1tYWJsZVN0YWdlfSB2ZXJ0ZXhQcm9ncmFtIC0gVGhlIHBpcGVsaW5lJ3MgdmVydGV4IHNoYWRlci5cblx0ICogQHBhcmFtIHtQcm9ncmFtbWFibGVTdGFnZX0gZnJhZ21lbnRQcm9ncmFtIC0gVGhlIHBpcGVsaW5lJ3MgZnJhZ21lbnQgc2hhZGVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNhY2hlS2V5LCB2ZXJ0ZXhQcm9ncmFtLCBmcmFnbWVudFByb2dyYW0gKSB7XG5cblx0XHRzdXBlciggY2FjaGVLZXkgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwaXBlbGluZSdzIHZlcnRleCBzaGFkZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7UHJvZ3JhbW1hYmxlU3RhZ2V9XG5cdFx0ICovXG5cdFx0dGhpcy52ZXJ0ZXhQcm9ncmFtID0gdmVydGV4UHJvZ3JhbTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwaXBlbGluZSdzIGZyYWdtZW50IHNoYWRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtQcm9ncmFtbWFibGVTdGFnZX1cblx0XHQgKi9cblx0XHR0aGlzLmZyYWdtZW50UHJvZ3JhbSA9IGZyYWdtZW50UHJvZ3JhbTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVuZGVyUGlwZWxpbmU7XG4iLCJpbXBvcnQgUGlwZWxpbmUgZnJvbSAnLi9QaXBlbGluZS5qcyc7XG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcHJlc2VudGluZyBjb21wdXRlIHBpcGVsaW5lcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFBpcGVsaW5lXG4gKi9cbmNsYXNzIENvbXB1dGVQaXBlbGluZSBleHRlbmRzIFBpcGVsaW5lIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyByZW5kZXIgcGlwZWxpbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUtleSAtIFRoZSBwaXBlbGluZSdzIGNhY2hlIGtleS5cblx0ICogQHBhcmFtIHtQcm9ncmFtbWFibGVTdGFnZX0gY29tcHV0ZVByb2dyYW0gLSBUaGUgcGlwZWxpbmUncyBjb21wdXRlIHNoYWRlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjYWNoZUtleSwgY29tcHV0ZVByb2dyYW0gKSB7XG5cblx0XHRzdXBlciggY2FjaGVLZXkgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwaXBlbGluZSdzIGNvbXB1dGUgc2hhZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1Byb2dyYW1tYWJsZVN0YWdlfVxuXHRcdCAqL1xuXHRcdHRoaXMuY29tcHV0ZVByb2dyYW0gPSBjb21wdXRlUHJvZ3JhbTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNDb21wdXRlUGlwZWxpbmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21wdXRlUGlwZWxpbmU7XG4iLCJsZXQgX2lkID0gMDtcblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIHByb2dyYW1tYWJsZSBzdGFnZXMgd2hpY2ggYXJlIHZlcnRleCxcbiAqIGZyYWdtZW50IG9yIGNvbXB1dGUgc2hhZGVycy4gVW5saWtlIGZpeGVkLWZ1bmN0aW9uIHN0YXRlcyAobGlrZSBibGVuZGluZyksXG4gKiB0aGV5IHJlcHJlc2VudCB0aGUgcHJvZ3JhbW1hYmxlIHBhcnQgb2YgYSBwaXBlbGluZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBQcm9ncmFtbWFibGVTdGFnZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcHJvZ3JhbW1hYmxlIHN0YWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29kZSAtIFRoZSBzaGFkZXIgY29kZS5cblx0ICogQHBhcmFtIHsoJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZScpfSBzdGFnZSAtIFRoZSB0eXBlIG9mIHN0YWdlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBzaGFkZXIuXG5cdCAqIEBwYXJhbSB7P0FycmF5PE9iamVjdD59IFt0cmFuc2Zvcm1zPW51bGxdIC0gVGhlIHRyYW5zZm9ybXMgKG9ubHkgcmVsZXZhbnQgZm9yIGNvbXB1dGUgc3RhZ2VzIHdpdGggV2ViR0wgMiB3aGljaCB1c2VzIFRyYW5zZm9ybSBGZWVkYmFjaykuXG5cdCAqIEBwYXJhbSB7P0FycmF5PE9iamVjdD59IFthdHRyaWJ1dGVzPW51bGxdIC0gVGhlIGF0dHJpYnV0ZXMgKG9ubHkgcmVsZXZhbnQgZm9yIGNvbXB1dGUgc3RhZ2VzIHdpdGggV2ViR0wgMiB3aGljaCB1c2VzIFRyYW5zZm9ybSBGZWVkYmFjaykuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggY29kZSwgc3RhZ2UsIG5hbWUsIHRyYW5zZm9ybXMgPSBudWxsLCBhdHRyaWJ1dGVzID0gbnVsbCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpZCBvZiB0aGUgcHJvZ3JhbW1hYmxlIHN0YWdlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLmlkID0gX2lkICsrO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNoYWRlciBjb2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLmNvZGUgPSBjb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgb2Ygc3RhZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuc3RhZ2UgPSBzdGFnZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSBzdGFnZS5cblx0XHQgKiBUaGlzIGlzIHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0cmFuc2Zvcm1zIChvbmx5IHJlbGV2YW50IGZvciBjb21wdXRlIHN0YWdlcyB3aXRoIFdlYkdMIDIgd2hpY2ggdXNlcyBUcmFuc2Zvcm0gRmVlZGJhY2spLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9BcnJheTxPYmplY3Q+fVxuXHRcdCAqL1xuXHRcdHRoaXMudHJhbnNmb3JtcyA9IHRyYW5zZm9ybXM7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYXR0cmlidXRlcyAob25seSByZWxldmFudCBmb3IgY29tcHV0ZSBzdGFnZXMgd2l0aCBXZWJHTCAyIHdoaWNoIHVzZXMgVHJhbnNmb3JtIEZlZWRiYWNrKS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/QXJyYXk8T2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG9mdGVuIHRoZSBwcm9ncmFtbWFibGUgc3RhZ2UgaXMgY3VycmVudGx5IGluIHVzZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMudXNlZFRpbWVzID0gMDtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZ3JhbW1hYmxlU3RhZ2U7XG4iLCJpbXBvcnQgRGF0YU1hcCBmcm9tICcuL0RhdGFNYXAuanMnO1xuaW1wb3J0IFJlbmRlclBpcGVsaW5lIGZyb20gJy4vUmVuZGVyUGlwZWxpbmUuanMnO1xuaW1wb3J0IENvbXB1dGVQaXBlbGluZSBmcm9tICcuL0NvbXB1dGVQaXBlbGluZS5qcyc7XG5pbXBvcnQgUHJvZ3JhbW1hYmxlU3RhZ2UgZnJvbSAnLi9Qcm9ncmFtbWFibGVTdGFnZS5qcyc7XG5cbi8qKlxuICogVGhpcyByZW5kZXJlciBtb2R1bGUgbWFuYWdlcyB0aGUgcGlwZWxpbmVzIG9mIHRoZSByZW5kZXJlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIERhdGFNYXBcbiAqL1xuY2xhc3MgUGlwZWxpbmVzIGV4dGVuZHMgRGF0YU1hcCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcGlwZWxpbmUgbWFuYWdlbWVudCBjb21wb25lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QmFja2VuZH0gYmFja2VuZCAtIFRoZSByZW5kZXJlcidzIGJhY2tlbmQuXG5cdCAqIEBwYXJhbSB7Tm9kZXN9IG5vZGVzIC0gUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBub2RlcyByZWxhdGVkIGxvZ2ljLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGJhY2tlbmQsIG5vZGVzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXJlcidzIGJhY2tlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QmFja2VuZH1cblx0XHQgKi9cblx0XHR0aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBub2RlcyByZWxhdGVkIGxvZ2ljLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGVzfVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZXMgPSBub2RlcztcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlcyB0byB0aGUgYmluZGluZ3MgbWFuYWdlbWVudCBjb21wb25lbnQuXG5cdFx0ICogVGhpcyByZWZlcmVuY2Ugd2lsbCBiZSBzZXQgaW5zaWRlIHRoZSBgQmluZGluZ3NgXG5cdFx0ICogY29uc3RydWN0b3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0JpbmRpbmdzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJpbmRpbmdzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEludGVybmFsIGNhY2hlIGZvciBtYWludGFpbmluZyBwaXBlbGluZXMuXG5cdFx0ICogVGhlIGtleSBvZiB0aGUgbWFwIGlzIGEgY2FjaGUga2V5LCB0aGUgdmFsdWUgdGhlIHBpcGVsaW5lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hcDxzdHJpbmcsUGlwZWxpbmU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FjaGVzID0gbmV3IE1hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBkaWN0aW9uYXJ5IG1haW50YWlucyBmb3IgZWFjaCBzaGFkZXIgc3RhZ2UgdHlwZSAodmVydGV4LFxuXHRcdCAqIGZyYWdtZW50IGFuZCBjb21wdXRlKSB0aGUgcHJvZ3JhbW1hYmxlIHN0YWdlIG9iamVjdHMgd2hpY2hcblx0XHQgKiByZXByZXNlbnQgdGhlIGFjdHVhbCBzaGFkZXIgY29kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLE1hcD59XG5cdFx0ICovXG5cdFx0dGhpcy5wcm9ncmFtcyA9IHtcblx0XHRcdHZlcnRleDogbmV3IE1hcCgpLFxuXHRcdFx0ZnJhZ21lbnQ6IG5ldyBNYXAoKSxcblx0XHRcdGNvbXB1dGU6IG5ldyBNYXAoKVxuXHRcdH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgY29tcHV0ZSBwaXBlbGluZSBmb3IgdGhlIGdpdmVuIGNvbXB1dGUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBjb21wdXRlTm9kZSAtIFRoZSBjb21wdXRlIG5vZGUuXG5cdCAqIEBwYXJhbSB7QXJyYXk8QmluZEdyb3VwPn0gYmluZGluZ3MgLSBUaGUgYmluZGluZ3MuXG5cdCAqIEByZXR1cm4ge0NvbXB1dGVQaXBlbGluZX0gVGhlIGNvbXB1dGUgcGlwZWxpbmUuXG5cdCAqL1xuXHRnZXRGb3JDb21wdXRlKCBjb21wdXRlTm9kZSwgYmluZGluZ3MgKSB7XG5cblx0XHRjb25zdCB7IGJhY2tlbmQgfSA9IHRoaXM7XG5cblx0XHRjb25zdCBkYXRhID0gdGhpcy5nZXQoIGNvbXB1dGVOb2RlICk7XG5cblx0XHRpZiAoIHRoaXMuX25lZWRzQ29tcHV0ZVVwZGF0ZSggY29tcHV0ZU5vZGUgKSApIHtcblxuXHRcdFx0Y29uc3QgcHJldmlvdXNQaXBlbGluZSA9IGRhdGEucGlwZWxpbmU7XG5cblx0XHRcdGlmICggcHJldmlvdXNQaXBlbGluZSApIHtcblxuXHRcdFx0XHRwcmV2aW91c1BpcGVsaW5lLnVzZWRUaW1lcyAtLTtcblx0XHRcdFx0cHJldmlvdXNQaXBlbGluZS5jb21wdXRlUHJvZ3JhbS51c2VkVGltZXMgLS07XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2V0IHNoYWRlclxuXG5cdFx0XHRjb25zdCBub2RlQnVpbGRlclN0YXRlID0gdGhpcy5ub2Rlcy5nZXRGb3JDb21wdXRlKCBjb21wdXRlTm9kZSApO1xuXG5cdFx0XHQvLyBwcm9ncmFtbWFibGUgc3RhZ2VcblxuXHRcdFx0bGV0IHN0YWdlQ29tcHV0ZSA9IHRoaXMucHJvZ3JhbXMuY29tcHV0ZS5nZXQoIG5vZGVCdWlsZGVyU3RhdGUuY29tcHV0ZVNoYWRlciApO1xuXG5cdFx0XHRpZiAoIHN0YWdlQ29tcHV0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggcHJldmlvdXNQaXBlbGluZSAmJiBwcmV2aW91c1BpcGVsaW5lLmNvbXB1dGVQcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHRoaXMuX3JlbGVhc2VQcm9ncmFtKCBwcmV2aW91c1BpcGVsaW5lLmNvbXB1dGVQcm9ncmFtICk7XG5cblx0XHRcdFx0c3RhZ2VDb21wdXRlID0gbmV3IFByb2dyYW1tYWJsZVN0YWdlKCBub2RlQnVpbGRlclN0YXRlLmNvbXB1dGVTaGFkZXIsICdjb21wdXRlJywgY29tcHV0ZU5vZGUubmFtZSwgbm9kZUJ1aWxkZXJTdGF0ZS50cmFuc2Zvcm1zLCBub2RlQnVpbGRlclN0YXRlLm5vZGVBdHRyaWJ1dGVzICk7XG5cdFx0XHRcdHRoaXMucHJvZ3JhbXMuY29tcHV0ZS5zZXQoIG5vZGVCdWlsZGVyU3RhdGUuY29tcHV0ZVNoYWRlciwgc3RhZ2VDb21wdXRlICk7XG5cblx0XHRcdFx0YmFja2VuZC5jcmVhdGVQcm9ncmFtKCBzdGFnZUNvbXB1dGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBkZXRlcm1pbmUgY29tcHV0ZSBwaXBlbGluZVxuXG5cdFx0XHRjb25zdCBjYWNoZUtleSA9IHRoaXMuX2dldENvbXB1dGVDYWNoZUtleSggY29tcHV0ZU5vZGUsIHN0YWdlQ29tcHV0ZSApO1xuXG5cdFx0XHRsZXQgcGlwZWxpbmUgPSB0aGlzLmNhY2hlcy5nZXQoIGNhY2hlS2V5ICk7XG5cblx0XHRcdGlmICggcGlwZWxpbmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIHByZXZpb3VzUGlwZWxpbmUgJiYgcHJldmlvdXNQaXBlbGluZS51c2VkVGltZXMgPT09IDAgKSB0aGlzLl9yZWxlYXNlUGlwZWxpbmUoIHByZXZpb3VzUGlwZWxpbmUgKTtcblxuXHRcdFx0XHRwaXBlbGluZSA9IHRoaXMuX2dldENvbXB1dGVQaXBlbGluZSggY29tcHV0ZU5vZGUsIHN0YWdlQ29tcHV0ZSwgY2FjaGVLZXksIGJpbmRpbmdzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8ga2VlcCB0cmFjayBvZiBhbGwgdXNlZCB0aW1lc1xuXG5cdFx0XHRwaXBlbGluZS51c2VkVGltZXMgKys7XG5cdFx0XHRzdGFnZUNvbXB1dGUudXNlZFRpbWVzICsrO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRkYXRhLnZlcnNpb24gPSBjb21wdXRlTm9kZS52ZXJzaW9uO1xuXHRcdFx0ZGF0YS5waXBlbGluZSA9IHBpcGVsaW5lO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEucGlwZWxpbmU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcmVuZGVyIHBpcGVsaW5lIGZvciB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcGFyYW0gez9BcnJheTxQcm9taXNlPn0gW3Byb21pc2VzPW51bGxdIC0gQW4gYXJyYXkgb2YgY29tcGlsYXRpb24gcHJvbWlzZXMgd2hpY2ggaXMgb25seSByZWxldmFudCBpbiBjb250ZXh0IG9mIGBSZW5kZXJlci5jb21waWxlQXN5bmMoKWAuXG5cdCAqIEByZXR1cm4ge1JlbmRlclBpcGVsaW5lfSBUaGUgcmVuZGVyIHBpcGVsaW5lLlxuXHQgKi9cblx0Z2V0Rm9yUmVuZGVyKCByZW5kZXJPYmplY3QsIHByb21pc2VzID0gbnVsbCApIHtcblxuXHRcdGNvbnN0IHsgYmFja2VuZCB9ID0gdGhpcztcblxuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLmdldCggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHRpZiAoIHRoaXMuX25lZWRzUmVuZGVyVXBkYXRlKCByZW5kZXJPYmplY3QgKSApIHtcblxuXHRcdFx0Y29uc3QgcHJldmlvdXNQaXBlbGluZSA9IGRhdGEucGlwZWxpbmU7XG5cblx0XHRcdGlmICggcHJldmlvdXNQaXBlbGluZSApIHtcblxuXHRcdFx0XHRwcmV2aW91c1BpcGVsaW5lLnVzZWRUaW1lcyAtLTtcblx0XHRcdFx0cHJldmlvdXNQaXBlbGluZS52ZXJ0ZXhQcm9ncmFtLnVzZWRUaW1lcyAtLTtcblx0XHRcdFx0cHJldmlvdXNQaXBlbGluZS5mcmFnbWVudFByb2dyYW0udXNlZFRpbWVzIC0tO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGdldCBzaGFkZXJcblxuXHRcdFx0Y29uc3Qgbm9kZUJ1aWxkZXJTdGF0ZSA9IHJlbmRlck9iamVjdC5nZXROb2RlQnVpbGRlclN0YXRlKCk7XG5cblx0XHRcdGNvbnN0IG5hbWUgPSByZW5kZXJPYmplY3QubWF0ZXJpYWwgPyByZW5kZXJPYmplY3QubWF0ZXJpYWwubmFtZSA6ICcnO1xuXG5cdFx0XHQvLyBwcm9ncmFtbWFibGUgc3RhZ2VzXG5cblx0XHRcdGxldCBzdGFnZVZlcnRleCA9IHRoaXMucHJvZ3JhbXMudmVydGV4LmdldCggbm9kZUJ1aWxkZXJTdGF0ZS52ZXJ0ZXhTaGFkZXIgKTtcblxuXHRcdFx0aWYgKCBzdGFnZVZlcnRleCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggcHJldmlvdXNQaXBlbGluZSAmJiBwcmV2aW91c1BpcGVsaW5lLnZlcnRleFByb2dyYW0udXNlZFRpbWVzID09PSAwICkgdGhpcy5fcmVsZWFzZVByb2dyYW0oIHByZXZpb3VzUGlwZWxpbmUudmVydGV4UHJvZ3JhbSApO1xuXG5cdFx0XHRcdHN0YWdlVmVydGV4ID0gbmV3IFByb2dyYW1tYWJsZVN0YWdlKCBub2RlQnVpbGRlclN0YXRlLnZlcnRleFNoYWRlciwgJ3ZlcnRleCcsIG5hbWUgKTtcblx0XHRcdFx0dGhpcy5wcm9ncmFtcy52ZXJ0ZXguc2V0KCBub2RlQnVpbGRlclN0YXRlLnZlcnRleFNoYWRlciwgc3RhZ2VWZXJ0ZXggKTtcblxuXHRcdFx0XHRiYWNrZW5kLmNyZWF0ZVByb2dyYW0oIHN0YWdlVmVydGV4ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IHN0YWdlRnJhZ21lbnQgPSB0aGlzLnByb2dyYW1zLmZyYWdtZW50LmdldCggbm9kZUJ1aWxkZXJTdGF0ZS5mcmFnbWVudFNoYWRlciApO1xuXG5cdFx0XHRpZiAoIHN0YWdlRnJhZ21lbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIHByZXZpb3VzUGlwZWxpbmUgJiYgcHJldmlvdXNQaXBlbGluZS5mcmFnbWVudFByb2dyYW0udXNlZFRpbWVzID09PSAwICkgdGhpcy5fcmVsZWFzZVByb2dyYW0oIHByZXZpb3VzUGlwZWxpbmUuZnJhZ21lbnRQcm9ncmFtICk7XG5cblx0XHRcdFx0c3RhZ2VGcmFnbWVudCA9IG5ldyBQcm9ncmFtbWFibGVTdGFnZSggbm9kZUJ1aWxkZXJTdGF0ZS5mcmFnbWVudFNoYWRlciwgJ2ZyYWdtZW50JywgbmFtZSApO1xuXHRcdFx0XHR0aGlzLnByb2dyYW1zLmZyYWdtZW50LnNldCggbm9kZUJ1aWxkZXJTdGF0ZS5mcmFnbWVudFNoYWRlciwgc3RhZ2VGcmFnbWVudCApO1xuXG5cdFx0XHRcdGJhY2tlbmQuY3JlYXRlUHJvZ3JhbSggc3RhZ2VGcmFnbWVudCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGRldGVybWluZSByZW5kZXIgcGlwZWxpbmVcblxuXHRcdFx0Y29uc3QgY2FjaGVLZXkgPSB0aGlzLl9nZXRSZW5kZXJDYWNoZUtleSggcmVuZGVyT2JqZWN0LCBzdGFnZVZlcnRleCwgc3RhZ2VGcmFnbWVudCApO1xuXG5cdFx0XHRsZXQgcGlwZWxpbmUgPSB0aGlzLmNhY2hlcy5nZXQoIGNhY2hlS2V5ICk7XG5cblx0XHRcdGlmICggcGlwZWxpbmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIHByZXZpb3VzUGlwZWxpbmUgJiYgcHJldmlvdXNQaXBlbGluZS51c2VkVGltZXMgPT09IDAgKSB0aGlzLl9yZWxlYXNlUGlwZWxpbmUoIHByZXZpb3VzUGlwZWxpbmUgKTtcblxuXHRcdFx0XHRwaXBlbGluZSA9IHRoaXMuX2dldFJlbmRlclBpcGVsaW5lKCByZW5kZXJPYmplY3QsIHN0YWdlVmVydGV4LCBzdGFnZUZyYWdtZW50LCBjYWNoZUtleSwgcHJvbWlzZXMgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZW5kZXJPYmplY3QucGlwZWxpbmUgPSBwaXBlbGluZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBrZWVwIHRyYWNrIG9mIGFsbCB1c2VkIHRpbWVzXG5cblx0XHRcdHBpcGVsaW5lLnVzZWRUaW1lcyArKztcblx0XHRcdHN0YWdlVmVydGV4LnVzZWRUaW1lcyArKztcblx0XHRcdHN0YWdlRnJhZ21lbnQudXNlZFRpbWVzICsrO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRkYXRhLnBpcGVsaW5lID0gcGlwZWxpbmU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YS5waXBlbGluZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlbGV0ZXMgdGhlIHBpcGVsaW5lIGZvciB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IG9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHs/T2JqZWN0fSBUaGUgZGVsZXRlZCBkaWN0aW9uYXJ5LlxuXHQgKi9cblx0ZGVsZXRlKCBvYmplY3QgKSB7XG5cblx0XHRjb25zdCBwaXBlbGluZSA9IHRoaXMuZ2V0KCBvYmplY3QgKS5waXBlbGluZTtcblxuXHRcdGlmICggcGlwZWxpbmUgKSB7XG5cblx0XHRcdC8vIHBpcGVsaW5lXG5cblx0XHRcdHBpcGVsaW5lLnVzZWRUaW1lcyAtLTtcblxuXHRcdFx0aWYgKCBwaXBlbGluZS51c2VkVGltZXMgPT09IDAgKSB0aGlzLl9yZWxlYXNlUGlwZWxpbmUoIHBpcGVsaW5lICk7XG5cblx0XHRcdC8vIHByb2dyYW1zXG5cblx0XHRcdGlmICggcGlwZWxpbmUuaXNDb21wdXRlUGlwZWxpbmUgKSB7XG5cblx0XHRcdFx0cGlwZWxpbmUuY29tcHV0ZVByb2dyYW0udXNlZFRpbWVzIC0tO1xuXG5cdFx0XHRcdGlmICggcGlwZWxpbmUuY29tcHV0ZVByb2dyYW0udXNlZFRpbWVzID09PSAwICkgdGhpcy5fcmVsZWFzZVByb2dyYW0oIHBpcGVsaW5lLmNvbXB1dGVQcm9ncmFtICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cGlwZWxpbmUuZnJhZ21lbnRQcm9ncmFtLnVzZWRUaW1lcyAtLTtcblx0XHRcdFx0cGlwZWxpbmUudmVydGV4UHJvZ3JhbS51c2VkVGltZXMgLS07XG5cblx0XHRcdFx0aWYgKCBwaXBlbGluZS52ZXJ0ZXhQcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHRoaXMuX3JlbGVhc2VQcm9ncmFtKCBwaXBlbGluZS52ZXJ0ZXhQcm9ncmFtICk7XG5cdFx0XHRcdGlmICggcGlwZWxpbmUuZnJhZ21lbnRQcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHRoaXMuX3JlbGVhc2VQcm9ncmFtKCBwaXBlbGluZS5mcmFnbWVudFByb2dyYW0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN1cGVyLmRlbGV0ZSggb2JqZWN0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyBpbnRlcm5hbCByZXNvdXJjZXMuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0c3VwZXIuZGlzcG9zZSgpO1xuXG5cdFx0dGhpcy5jYWNoZXMgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5wcm9ncmFtcyA9IHtcblx0XHRcdHZlcnRleDogbmV3IE1hcCgpLFxuXHRcdFx0ZnJhZ21lbnQ6IG5ldyBNYXAoKSxcblx0XHRcdGNvbXB1dGU6IG5ldyBNYXAoKVxuXHRcdH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBwaXBlbGluZSBmb3IgdGhlIGdpdmVuIHJlbmRlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICovXG5cdHVwZGF0ZUZvclJlbmRlciggcmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0dGhpcy5nZXRGb3JSZW5kZXIoIHJlbmRlck9iamVjdCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGNvbXB1dGUgcGlwZWxpbmUgZm9yIHRoZSBnaXZlbiBwYXJhbWV0ZXJzLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge05vZGV9IGNvbXB1dGVOb2RlIC0gVGhlIGNvbXB1dGUgbm9kZS5cblx0ICogQHBhcmFtIHtQcm9ncmFtbWFibGVTdGFnZX0gc3RhZ2VDb21wdXRlIC0gVGhlIHByb2dyYW1tYWJsZSBzdGFnZSByZXByZXNlbnRpbmcgdGhlIGNvbXB1dGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVLZXkgLSBUaGUgY2FjaGUga2V5LlxuXHQgKiBAcGFyYW0ge0FycmF5PEJpbmRHcm91cD59IGJpbmRpbmdzIC0gVGhlIGJpbmRpbmdzLlxuXHQgKiBAcmV0dXJuIHtDb21wdXRlUGlwZWxpbmV9IFRoZSBjb21wdXRlIHBpcGVsaW5lLlxuXHQgKi9cblx0X2dldENvbXB1dGVQaXBlbGluZSggY29tcHV0ZU5vZGUsIHN0YWdlQ29tcHV0ZSwgY2FjaGVLZXksIGJpbmRpbmdzICkge1xuXG5cdFx0Ly8gY2hlY2sgZm9yIGV4aXN0aW5nIHBpcGVsaW5lXG5cblx0XHRjYWNoZUtleSA9IGNhY2hlS2V5IHx8IHRoaXMuX2dldENvbXB1dGVDYWNoZUtleSggY29tcHV0ZU5vZGUsIHN0YWdlQ29tcHV0ZSApO1xuXG5cdFx0bGV0IHBpcGVsaW5lID0gdGhpcy5jYWNoZXMuZ2V0KCBjYWNoZUtleSApO1xuXG5cdFx0aWYgKCBwaXBlbGluZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwaXBlbGluZSA9IG5ldyBDb21wdXRlUGlwZWxpbmUoIGNhY2hlS2V5LCBzdGFnZUNvbXB1dGUgKTtcblxuXHRcdFx0dGhpcy5jYWNoZXMuc2V0KCBjYWNoZUtleSwgcGlwZWxpbmUgKTtcblxuXHRcdFx0dGhpcy5iYWNrZW5kLmNyZWF0ZUNvbXB1dGVQaXBlbGluZSggcGlwZWxpbmUsIGJpbmRpbmdzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcGlwZWxpbmU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcmVuZGVyIHBpcGVsaW5lIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVycy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1Byb2dyYW1tYWJsZVN0YWdlfSBzdGFnZVZlcnRleCAtIFRoZSBwcm9ncmFtbWFibGUgc3RhZ2UgcmVwcmVzZW50aW5nIHRoZSB2ZXJ0ZXggc2hhZGVyLlxuXHQgKiBAcGFyYW0ge1Byb2dyYW1tYWJsZVN0YWdlfSBzdGFnZUZyYWdtZW50IC0gVGhlIHByb2dyYW1tYWJsZSBzdGFnZSByZXByZXNlbnRpbmcgdGhlIGZyYWdtZW50IHNoYWRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlS2V5IC0gVGhlIGNhY2hlIGtleS5cblx0ICogQHBhcmFtIHs/QXJyYXk8UHJvbWlzZT59IHByb21pc2VzIC0gQW4gYXJyYXkgb2YgY29tcGlsYXRpb24gcHJvbWlzZXMgd2hpY2ggaXMgb25seSByZWxldmFudCBpbiBjb250ZXh0IG9mIGBSZW5kZXJlci5jb21waWxlQXN5bmMoKWAuXG5cdCAqIEByZXR1cm4ge0NvbXB1dGVQaXBlbGluZX0gVGhlIGNvbXB1dGUgcGlwZWxpbmUuXG5cdCAqL1xuXHRfZ2V0UmVuZGVyUGlwZWxpbmUoIHJlbmRlck9iamVjdCwgc3RhZ2VWZXJ0ZXgsIHN0YWdlRnJhZ21lbnQsIGNhY2hlS2V5LCBwcm9taXNlcyApIHtcblxuXHRcdC8vIGNoZWNrIGZvciBleGlzdGluZyBwaXBlbGluZVxuXG5cdFx0Y2FjaGVLZXkgPSBjYWNoZUtleSB8fCB0aGlzLl9nZXRSZW5kZXJDYWNoZUtleSggcmVuZGVyT2JqZWN0LCBzdGFnZVZlcnRleCwgc3RhZ2VGcmFnbWVudCApO1xuXG5cdFx0bGV0IHBpcGVsaW5lID0gdGhpcy5jYWNoZXMuZ2V0KCBjYWNoZUtleSApO1xuXG5cdFx0aWYgKCBwaXBlbGluZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwaXBlbGluZSA9IG5ldyBSZW5kZXJQaXBlbGluZSggY2FjaGVLZXksIHN0YWdlVmVydGV4LCBzdGFnZUZyYWdtZW50ICk7XG5cblx0XHRcdHRoaXMuY2FjaGVzLnNldCggY2FjaGVLZXksIHBpcGVsaW5lICk7XG5cblx0XHRcdHJlbmRlck9iamVjdC5waXBlbGluZSA9IHBpcGVsaW5lO1xuXG5cdFx0XHQvLyBUaGUgYHByb21pc2VzYCBhcnJheSBpcyBgbnVsbGAgYnkgZGVmYXVsdCBhbmQgb25seSBzZXQgdG8gYW4gZW1wdHkgYXJyYXkgd2hlblxuXHRcdFx0Ly8gYFJlbmRlcmVyLmNvbXBpbGVBc3luYygpYCBpcyB1c2VkLiBUaGUgbmV4dCBjYWxsIGFjdHVhbGx5IGZpbGxzIHRoZSBhcnJheSB3aXRoXG5cdFx0XHQvLyBwZW5kaW5nIHByb21pc2VzIHRoYXQgcmVzb2x2ZSB3aGVuIHRoZSByZW5kZXIgcGlwZWxpbmVzIGFyZSByZWFkeSBmb3IgcmVuZGVyaW5nLlxuXG5cdFx0XHR0aGlzLmJhY2tlbmQuY3JlYXRlUmVuZGVyUGlwZWxpbmUoIHJlbmRlck9iamVjdCwgcHJvbWlzZXMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwaXBlbGluZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIGEgY2FjaGUga2V5IHJlcHJlc2VudGluZyBhIGNvbXB1dGUgcGlwZWxpbmUuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7Tm9kZX0gY29tcHV0ZU5vZGUgLSBUaGUgY29tcHV0ZSBub2RlLlxuXHQgKiBAcGFyYW0ge1Byb2dyYW1tYWJsZVN0YWdlfSBzdGFnZUNvbXB1dGUgLSBUaGUgcHJvZ3JhbW1hYmxlIHN0YWdlIHJlcHJlc2VudGluZyB0aGUgY29tcHV0ZSBzaGFkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNhY2hlIGtleS5cblx0ICovXG5cdF9nZXRDb21wdXRlQ2FjaGVLZXkoIGNvbXB1dGVOb2RlLCBzdGFnZUNvbXB1dGUgKSB7XG5cblx0XHRyZXR1cm4gY29tcHV0ZU5vZGUuaWQgKyAnLCcgKyBzdGFnZUNvbXB1dGUuaWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBhIGNhY2hlIGtleSByZXByZXNlbnRpbmcgYSByZW5kZXIgcGlwZWxpbmUuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICogQHBhcmFtIHtQcm9ncmFtbWFibGVTdGFnZX0gc3RhZ2VWZXJ0ZXggLSBUaGUgcHJvZ3JhbW1hYmxlIHN0YWdlIHJlcHJlc2VudGluZyB0aGUgdmVydGV4IHNoYWRlci5cblx0ICogQHBhcmFtIHtQcm9ncmFtbWFibGVTdGFnZX0gc3RhZ2VGcmFnbWVudCAtIFRoZSBwcm9ncmFtbWFibGUgc3RhZ2UgcmVwcmVzZW50aW5nIHRoZSBmcmFnbWVudCBzaGFkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNhY2hlIGtleS5cblx0ICovXG5cdF9nZXRSZW5kZXJDYWNoZUtleSggcmVuZGVyT2JqZWN0LCBzdGFnZVZlcnRleCwgc3RhZ2VGcmFnbWVudCApIHtcblxuXHRcdHJldHVybiBzdGFnZVZlcnRleC5pZCArICcsJyArIHN0YWdlRnJhZ21lbnQuaWQgKyAnLCcgKyB0aGlzLmJhY2tlbmQuZ2V0UmVuZGVyQ2FjaGVLZXkoIHJlbmRlck9iamVjdCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVsZWFzZXMgdGhlIGdpdmVuIHBpcGVsaW5lLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1BpcGVsaW5lfSBwaXBlbGluZSAtIFRoZSBwaXBlbGluZSB0byByZWxlYXNlLlxuXHQgKi9cblx0X3JlbGVhc2VQaXBlbGluZSggcGlwZWxpbmUgKSB7XG5cblx0XHR0aGlzLmNhY2hlcy5kZWxldGUoIHBpcGVsaW5lLmNhY2hlS2V5ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZWxlYXNlcyB0aGUgc2hhZGVyIHByb2dyYW0uXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwcm9ncmFtIC0gVGhlIHNoYWRlciBwcm9ncmFtIHRvIHJlbGVhc2UuXG5cdCAqL1xuXHRfcmVsZWFzZVByb2dyYW0oIHByb2dyYW0gKSB7XG5cblx0XHRjb25zdCBjb2RlID0gcHJvZ3JhbS5jb2RlO1xuXHRcdGNvbnN0IHN0YWdlID0gcHJvZ3JhbS5zdGFnZTtcblxuXHRcdHRoaXMucHJvZ3JhbXNbIHN0YWdlIF0uZGVsZXRlKCBjb2RlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgY29tcHV0ZSBwaXBlbGluZSBmb3IgdGhlIGdpdmVuIGNvbXB1dGUgbm9kZSByZXF1aXJlcyBhbiB1cGRhdGUuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7Tm9kZX0gY29tcHV0ZU5vZGUgLSBUaGUgY29tcHV0ZSBub2RlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjb21wdXRlIHBpcGVsaW5lIGZvciB0aGUgZ2l2ZW4gY29tcHV0ZSBub2RlIHJlcXVpcmVzIGFuIHVwZGF0ZSBvciBub3QuXG5cdCAqL1xuXHRfbmVlZHNDb21wdXRlVXBkYXRlKCBjb21wdXRlTm9kZSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLmdldCggY29tcHV0ZU5vZGUgKTtcblxuXHRcdHJldHVybiBkYXRhLnBpcGVsaW5lID09PSB1bmRlZmluZWQgfHwgZGF0YS52ZXJzaW9uICE9PSBjb21wdXRlTm9kZS52ZXJzaW9uO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHJlbmRlciBwaXBlbGluZSBmb3IgdGhlIGdpdmVuIHJlbmRlciBvYmplY3QgcmVxdWlyZXMgYW4gdXBkYXRlLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlbmRlciBvYmplY3QgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0IHJlcXVpcmVzIGFuIHVwZGF0ZSBvciBub3QuXG5cdCAqL1xuXHRfbmVlZHNSZW5kZXJVcGRhdGUoIHJlbmRlck9iamVjdCApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLmdldCggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHRyZXR1cm4gZGF0YS5waXBlbGluZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuYmFja2VuZC5uZWVkc1JlbmRlclVwZGF0ZSggcmVuZGVyT2JqZWN0ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBpcGVsaW5lcztcbiIsImltcG9ydCBEYXRhTWFwIGZyb20gJy4vRGF0YU1hcC5qcyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVUeXBlIH0gZnJvbSAnLi9Db25zdGFudHMuanMnO1xuXG4vKipcbiAqIFRoaXMgcmVuZGVyZXIgbW9kdWxlIG1hbmFnZXMgdGhlIGJpbmRpbmdzIG9mIHRoZSByZW5kZXJlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIERhdGFNYXBcbiAqL1xuY2xhc3MgQmluZGluZ3MgZXh0ZW5kcyBEYXRhTWFwIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBiaW5kaW5ncyBtYW5hZ2VtZW50IGNvbXBvbmVudC5cblx0ICpcblx0ICogQHBhcmFtIHtCYWNrZW5kfSBiYWNrZW5kIC0gVGhlIHJlbmRlcmVyJ3MgYmFja2VuZC5cblx0ICogQHBhcmFtIHtOb2Rlc30gbm9kZXMgLSBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIG5vZGVzIHJlbGF0ZWQgbG9naWMuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZXN9IHRleHR1cmVzIC0gUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyB0ZXh0dXJlcy5cblx0ICogQHBhcmFtIHtBdHRyaWJ1dGVzfSBhdHRyaWJ1dGVzIC0gUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBhdHRyaWJ1dGVzLlxuXHQgKiBAcGFyYW0ge1BpcGVsaW5lc30gcGlwZWxpbmVzIC0gUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBwaXBlbGluZXMuXG5cdCAqIEBwYXJhbSB7SW5mb30gaW5mbyAtIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgbWV0cmljcyBhbmQgbW9uaXRvcmluZyBkYXRhLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGJhY2tlbmQsIG5vZGVzLCB0ZXh0dXJlcywgYXR0cmlidXRlcywgcGlwZWxpbmVzLCBpbmZvICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXJlcidzIGJhY2tlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QmFja2VuZH1cblx0XHQgKi9cblx0XHR0aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyB0ZXh0dXJlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtUZXh0dXJlc31cblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmVzID0gdGV4dHVyZXM7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIHBpcGVsaW5lcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtQaXBlbGluZXN9XG5cdFx0ICovXG5cdFx0dGhpcy5waXBlbGluZXMgPSBwaXBlbGluZXM7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIGF0dHJpYnV0ZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXR0cmlidXRlc31cblx0XHQgKi9cblx0XHR0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBub2RlcyByZWxhdGVkIGxvZ2ljLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGVzfVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZXMgPSBub2RlcztcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgbWV0cmljcyBhbmQgbW9uaXRvcmluZyBkYXRhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0luZm99XG5cdFx0ICovXG5cdFx0dGhpcy5pbmZvID0gaW5mbztcblxuXHRcdHRoaXMucGlwZWxpbmVzLmJpbmRpbmdzID0gdGhpczsgLy8gYXNzaWduIGJpbmRpbmdzIHRvIHBpcGVsaW5lc1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYmluZCBncm91cHMgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QuXG5cdCAqIEByZXR1cm4ge0FycmF5PEJpbmRHcm91cD59IFRoZSBiaW5kIGdyb3Vwcy5cblx0ICovXG5cdGdldEZvclJlbmRlciggcmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSByZW5kZXJPYmplY3QuZ2V0QmluZGluZ3MoKTtcblxuXHRcdGZvciAoIGNvbnN0IGJpbmRHcm91cCBvZiBiaW5kaW5ncyApIHtcblxuXHRcdFx0Y29uc3QgZ3JvdXBEYXRhID0gdGhpcy5nZXQoIGJpbmRHcm91cCApO1xuXG5cdFx0XHRpZiAoIGdyb3VwRGF0YS5iaW5kR3JvdXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBlYWNoIG9iamVjdCBkZWZpbmVzIGFuIGFycmF5IG9mIGJpbmRpbmdzICh1Ym9zLCB0ZXh0dXJlcywgc2FtcGxlcnMgZXRjLilcblxuXHRcdFx0XHR0aGlzLl9pbml0KCBiaW5kR3JvdXAgKTtcblxuXHRcdFx0XHR0aGlzLmJhY2tlbmQuY3JlYXRlQmluZGluZ3MoIGJpbmRHcm91cCwgYmluZGluZ3MsIDAgKTtcblxuXHRcdFx0XHRncm91cERhdGEuYmluZEdyb3VwID0gYmluZEdyb3VwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYmluZGluZ3M7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBiaW5kIGdyb3VwcyBmb3IgdGhlIGdpdmVuIGNvbXB1dGUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBjb21wdXRlTm9kZSAtIFRoZSBjb21wdXRlIG5vZGUuXG5cdCAqIEByZXR1cm4ge0FycmF5PEJpbmRHcm91cD59IFRoZSBiaW5kIGdyb3Vwcy5cblx0ICovXG5cdGdldEZvckNvbXB1dGUoIGNvbXB1dGVOb2RlICkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLm5vZGVzLmdldEZvckNvbXB1dGUoIGNvbXB1dGVOb2RlICkuYmluZGluZ3M7XG5cblx0XHRmb3IgKCBjb25zdCBiaW5kR3JvdXAgb2YgYmluZGluZ3MgKSB7XG5cblx0XHRcdGNvbnN0IGdyb3VwRGF0YSA9IHRoaXMuZ2V0KCBiaW5kR3JvdXAgKTtcblxuXHRcdFx0aWYgKCBncm91cERhdGEuYmluZEdyb3VwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGhpcy5faW5pdCggYmluZEdyb3VwICk7XG5cblx0XHRcdFx0dGhpcy5iYWNrZW5kLmNyZWF0ZUJpbmRpbmdzKCBiaW5kR3JvdXAsIGJpbmRpbmdzLCAwICk7XG5cblx0XHRcdFx0Z3JvdXBEYXRhLmJpbmRHcm91cCA9IGJpbmRHcm91cDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJpbmRpbmdzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgYmluZGluZ3MgZm9yIHRoZSBnaXZlbiBjb21wdXRlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gY29tcHV0ZU5vZGUgLSBUaGUgY29tcHV0ZSBub2RlLlxuXHQgKi9cblx0dXBkYXRlRm9yQ29tcHV0ZSggY29tcHV0ZU5vZGUgKSB7XG5cblx0XHR0aGlzLl91cGRhdGVCaW5kaW5ncyggdGhpcy5nZXRGb3JDb21wdXRlKCBjb21wdXRlTm9kZSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBiaW5kaW5ncyBmb3IgdGhlIGdpdmVuIHJlbmRlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICovXG5cdHVwZGF0ZUZvclJlbmRlciggcmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0dGhpcy5fdXBkYXRlQmluZGluZ3MoIHRoaXMuZ2V0Rm9yUmVuZGVyKCByZW5kZXJPYmplY3QgKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgZ2l2ZW4gYXJyYXkgb2YgYmluZGluZ3MuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8QmluZEdyb3VwPn0gYmluZGluZ3MgLSBUaGUgYmluZCBncm91cHMuXG5cdCAqL1xuXHRfdXBkYXRlQmluZGluZ3MoIGJpbmRpbmdzICkge1xuXG5cdFx0Zm9yICggY29uc3QgYmluZEdyb3VwIG9mIGJpbmRpbmdzICkge1xuXG5cdFx0XHR0aGlzLl91cGRhdGUoIGJpbmRHcm91cCwgYmluZGluZ3MgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBnaXZlbiBiaW5kIGdyb3VwLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JpbmRHcm91cH0gYmluZEdyb3VwIC0gVGhlIGJpbmQgZ3JvdXAgdG8gaW5pdGlhbGl6ZS5cblx0ICovXG5cdF9pbml0KCBiaW5kR3JvdXAgKSB7XG5cblx0XHRmb3IgKCBjb25zdCBiaW5kaW5nIG9mIGJpbmRHcm91cC5iaW5kaW5ncyApIHtcblxuXHRcdFx0aWYgKCBiaW5kaW5nLmlzU2FtcGxlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0dGhpcy50ZXh0dXJlcy51cGRhdGVUZXh0dXJlKCBiaW5kaW5nLnRleHR1cmUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggYmluZGluZy5pc1N0b3JhZ2VCdWZmZXIgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYmluZGluZy5hdHRyaWJ1dGU7XG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZVR5cGUgPSBhdHRyaWJ1dGUuaXNJbmRpcmVjdFN0b3JhZ2VCdWZmZXJBdHRyaWJ1dGUgPyBBdHRyaWJ1dGVUeXBlLklORElSRUNUIDogQXR0cmlidXRlVHlwZS5TVE9SQUdFO1xuXG5cdFx0XHRcdHRoaXMuYXR0cmlidXRlcy51cGRhdGUoIGF0dHJpYnV0ZSwgYXR0cmlidXRlVHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBnaXZlbiBiaW5kIGdyb3VwLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JpbmRHcm91cH0gYmluZEdyb3VwIC0gVGhlIGJpbmQgZ3JvdXAgdG8gdXBkYXRlLlxuXHQgKiBAcGFyYW0ge0FycmF5PEJpbmRHcm91cD59IGJpbmRpbmdzIC0gVGhlIGJpbmQgZ3JvdXBzLlxuXHQgKi9cblx0X3VwZGF0ZSggYmluZEdyb3VwLCBiaW5kaW5ncyApIHtcblxuXHRcdGNvbnN0IHsgYmFja2VuZCB9ID0gdGhpcztcblxuXHRcdGxldCBuZWVkc0JpbmRpbmdzVXBkYXRlID0gZmFsc2U7XG5cdFx0bGV0IGNhY2hlQmluZGluZ3MgPSB0cnVlO1xuXHRcdGxldCBjYWNoZUluZGV4ID0gMDtcblx0XHRsZXQgdmVyc2lvbiA9IDA7XG5cblx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIGJpbmRpbmdzIGFuZCBjaGVjayBpZiBidWZmZXIgdXBkYXRlcyBvciBhIG5ldyBiaW5kaW5nIGdyb3VwIGlzIHJlcXVpcmVkXG5cblx0XHRmb3IgKCBjb25zdCBiaW5kaW5nIG9mIGJpbmRHcm91cC5iaW5kaW5ncyApIHtcblxuXHRcdFx0aWYgKCBiaW5kaW5nLmlzTm9kZVVuaWZvcm1zR3JvdXAgKSB7XG5cblx0XHRcdFx0Y29uc3QgdXBkYXRlZCA9IHRoaXMubm9kZXMudXBkYXRlR3JvdXAoIGJpbmRpbmcgKTtcblxuXHRcdFx0XHQvLyBldmVyeSB1bmlmb3JtcyBncm91cCBpcyBhIHVuaWZvcm0gYnVmZmVyLiBTbyBpZiBubyB1cGRhdGUgaXMgcmVxdWlyZWQsXG5cdFx0XHRcdC8vIHdlIG1vdmUgb25lIHdpdGggdGhlIG5leHQgYmluZGluZy4gT3RoZXJ3aXNlIHRoZSBuZXh0IGlmIGJsb2NrIHdpbGwgdXBkYXRlIHRoZSBncm91cC5cblxuXHRcdFx0XHRpZiAoIHVwZGF0ZWQgPT09IGZhbHNlICkgY29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBiaW5kaW5nLmlzU3RvcmFnZUJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBiaW5kaW5nLmF0dHJpYnV0ZTtcblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlVHlwZSA9IGF0dHJpYnV0ZS5pc0luZGlyZWN0U3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZSA/IEF0dHJpYnV0ZVR5cGUuSU5ESVJFQ1QgOiBBdHRyaWJ1dGVUeXBlLlNUT1JBR0U7XG5cblx0XHRcdFx0dGhpcy5hdHRyaWJ1dGVzLnVwZGF0ZSggYXR0cmlidXRlLCBhdHRyaWJ1dGVUeXBlICk7XG5cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJpbmRpbmcuaXNVbmlmb3JtQnVmZmVyICkge1xuXG5cdFx0XHRcdGNvbnN0IHVwZGF0ZWQgPSBiaW5kaW5nLnVwZGF0ZSgpO1xuXG5cdFx0XHRcdGlmICggdXBkYXRlZCApIHtcblxuXHRcdFx0XHRcdGJhY2tlbmQudXBkYXRlQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggYmluZGluZy5pc1NhbXBsZXIgKSB7XG5cblx0XHRcdFx0YmluZGluZy51cGRhdGUoKTtcblxuXHRcdFx0fSBlbHNlIGlmICggYmluZGluZy5pc1NhbXBsZWRUZXh0dXJlICkge1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVzVGV4dHVyZURhdGEgPSB0aGlzLnRleHR1cmVzLmdldCggYmluZGluZy50ZXh0dXJlICk7XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nLm5lZWRzQmluZGluZ3NVcGRhdGUoIHRleHR1cmVzVGV4dHVyZURhdGEuZ2VuZXJhdGlvbiApICkgbmVlZHNCaW5kaW5nc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0Y29uc3QgdXBkYXRlZCA9IGJpbmRpbmcudXBkYXRlKCk7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IGJpbmRpbmcudGV4dHVyZTtcblxuXHRcdFx0XHRpZiAoIHVwZGF0ZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnRleHR1cmVzLnVwZGF0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZURhdGEgPSBiYWNrZW5kLmdldCggdGV4dHVyZSApO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZURhdGEuZXh0ZXJuYWxUZXh0dXJlICE9PSB1bmRlZmluZWQgfHwgdGV4dHVyZXNUZXh0dXJlRGF0YS5pc0RlZmF1bHRUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0Y2FjaGVCaW5kaW5ncyA9IGZhbHNlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjYWNoZUluZGV4ID0gY2FjaGVJbmRleCAqIDEwICsgdGV4dHVyZS5pZDtcblx0XHRcdFx0XHR2ZXJzaW9uICs9IHRleHR1cmUudmVyc2lvbjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBiYWNrZW5kLmlzV2ViR1BVQmFja2VuZCA9PT0gdHJ1ZSAmJiB0ZXh0dXJlRGF0YS50ZXh0dXJlID09PSB1bmRlZmluZWQgJiYgdGV4dHVyZURhdGEuZXh0ZXJuYWxUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBUT0RPOiBSZW1vdmUgdGhpcyBvbmNlIHdlIGZvdW5kIHdoeSB1cGRhdGVkID09PSBmYWxzZSBpc24ndCBib3VuZCB0byBhIHRleHR1cmUgaW4gdGhlIFdlYkdQVSBiYWNrZW5kXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ0JpbmRpbmdzLl91cGRhdGU6IGJpbmRpbmcgc2hvdWxkIGJlIGF2YWlsYWJsZTonLCBiaW5kaW5nLCB1cGRhdGVkLCB0ZXh0dXJlLCBiaW5kaW5nLnRleHR1cmVOb2RlLnZhbHVlLCBuZWVkc0JpbmRpbmdzVXBkYXRlICk7XG5cblx0XHRcdFx0XHR0aGlzLnRleHR1cmVzLnVwZGF0ZVRleHR1cmUoIHRleHR1cmUgKTtcblx0XHRcdFx0XHRuZWVkc0JpbmRpbmdzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLmlzU3RvcmFnZVRleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlRGF0YSA9IHRoaXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0XHRpZiAoIGJpbmRpbmcuc3RvcmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdHRleHR1cmVEYXRhLm5lZWRzTWlwbWFwID0gdHJ1ZTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHRoaXMudGV4dHVyZXMubmVlZHNNaXBtYXBzKCB0ZXh0dXJlICkgJiYgdGV4dHVyZURhdGEubmVlZHNNaXBtYXAgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuYmFja2VuZC5nZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKTtcblxuXHRcdFx0XHRcdFx0dGV4dHVyZURhdGEubmVlZHNNaXBtYXAgPSBmYWxzZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbmVlZHNCaW5kaW5nc1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5iYWNrZW5kLnVwZGF0ZUJpbmRpbmdzKCBiaW5kR3JvdXAsIGJpbmRpbmdzLCBjYWNoZUJpbmRpbmdzID8gY2FjaGVJbmRleCA6IDAsIHZlcnNpb24gKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmluZGluZ3M7XG4iLCJpbXBvcnQgeyBEb3VibGVTaWRlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBEZWZhdWx0IHNvcnRpbmcgZnVuY3Rpb24gZm9yIG9wYXF1ZSByZW5kZXIgaXRlbXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IGEgLSBUaGUgZmlyc3QgcmVuZGVyIGl0ZW0uXG4gKiBAcGFyYW0ge09iamVjdH0gYiAtIFRoZSBzZWNvbmQgcmVuZGVyIGl0ZW0uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEEgbnVtZXJpYyB2YWx1ZSB3aGljaCBkZWZpbmVzIHRoZSBzb3J0IG9yZGVyLlxuICovXG5mdW5jdGlvbiBwYWludGVyU29ydFN0YWJsZSggYSwgYiApIHtcblxuXHRpZiAoIGEuZ3JvdXBPcmRlciAhPT0gYi5ncm91cE9yZGVyICkge1xuXG5cdFx0cmV0dXJuIGEuZ3JvdXBPcmRlciAtIGIuZ3JvdXBPcmRlcjtcblxuXHR9IGVsc2UgaWYgKCBhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyICkge1xuXG5cdFx0cmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEubWF0ZXJpYWwuaWQgIT09IGIubWF0ZXJpYWwuaWQgKSB7XG5cblx0XHRyZXR1cm4gYS5tYXRlcmlhbC5pZCAtIGIubWF0ZXJpYWwuaWQ7XG5cblx0fSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYS56IC0gYi56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cbi8qKlxuICogRGVmYXVsdCBzb3J0aW5nIGZ1bmN0aW9uIGZvciB0cmFuc3BhcmVudCByZW5kZXIgaXRlbXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IGEgLSBUaGUgZmlyc3QgcmVuZGVyIGl0ZW0uXG4gKiBAcGFyYW0ge09iamVjdH0gYiAtIFRoZSBzZWNvbmQgcmVuZGVyIGl0ZW0uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEEgbnVtZXJpYyB2YWx1ZSB3aGljaCBkZWZpbmVzIHRoZSBzb3J0IG9yZGVyLlxuICovXG5mdW5jdGlvbiByZXZlcnNlUGFpbnRlclNvcnRTdGFibGUoIGEsIGIgKSB7XG5cblx0aWYgKCBhLmdyb3VwT3JkZXIgIT09IGIuZ3JvdXBPcmRlciApIHtcblxuXHRcdHJldHVybiBhLmdyb3VwT3JkZXIgLSBiLmdyb3VwT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHtcblxuXHRcdHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcblxuXHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcblxuXHRcdHJldHVybiBiLnogLSBhLno7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBhLmlkIC0gYi5pZDtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gdHJhbnNwYXJlbnQgbWF0ZXJpYWwgcmVxdWlyZXMgYSBkb3VibGUgcGFzcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge01hdGVyaWFsfSBtYXRlcmlhbCAtIFRoZSB0cmFuc3BhcmVudCBtYXRlcmlhbC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIG1hdGVyaWFsIHJlcXVpcmVzIGEgZG91YmxlIHBhc3Mgb3Igbm90LlxuICovXG5mdW5jdGlvbiBuZWVkc0RvdWJsZVBhc3MoIG1hdGVyaWFsICkge1xuXG5cdGNvbnN0IGhhc1RyYW5zbWlzc2lvbiA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAgfHwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uTm9kZTtcblxuXHRyZXR1cm4gaGFzVHJhbnNtaXNzaW9uICYmIG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUgJiYgbWF0ZXJpYWwuZm9yY2VTaW5nbGVQYXNzID09PSBmYWxzZTtcblxufVxuXG4vKipcbiAqIFdoZW4gdGhlIHJlbmRlcmVyIGFuYWx5emVzIHRoZSBzY2VuZSBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgcmVuZGVyIGNhbGwsXG4gKiBpdCBzdG9yZXMgM0Qgb2JqZWN0IGZvciBmdXJ0aGVyIHByb2Nlc3NpbmcgaW4gcmVuZGVyIGxpc3RzLiBEZXBlbmRpbmcgb24gdGhlXG4gKiBwcm9wZXJ0aWVzIG9mIGEgM0Qgb2JqZWN0cyAobGlrZSB0aGVpciB0cmFuc2Zvcm1hdGlvbiBvciBtYXRlcmlhbCBzdGF0ZSksIHRoZVxuICogb2JqZWN0cyBhcmUgbWFpbnRhaW5lZCBpbiBvcmRlcmVkIGxpc3RzIGZvciB0aGUgYWN0dWFsIHJlbmRlcmluZy5cbiAqXG4gKiBSZW5kZXIgbGlzdHMgYXJlIHVuaXF1ZSBwZXIgc2NlbmUgYW5kIGNhbWVyYSBjb21iaW5hdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFBpcGVsaW5lXG4gKi9cbmNsYXNzIFJlbmRlckxpc3Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgcmVuZGVyIGxpc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGlnaHRpbmd9IGxpZ2h0aW5nIC0gVGhlIGxpZ2h0aW5nIG1hbmFnZW1lbnQgY29tcG9uZW50LlxuXHQgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZS5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhlIHNjZW5lIGlzIHJlbmRlcmVkIHdpdGguXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbGlnaHRpbmcsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHQvKipcblx0XHQgKiAzRCBvYmplY3RzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvIHJlbmRlciBpdGVtcyBhbmQgc3RvcmVkIGluIHRoaXMgYXJyYXkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlckl0ZW1zID0gW107XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VycmVudCByZW5kZXIgaXRlbXMgaW5kZXguXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlckl0ZW1zSW5kZXggPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IHdpdGggb3BhcXVlIHJlbmRlciBpdGVtcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxPYmplY3Q+fVxuXHRcdCAqL1xuXHRcdHRoaXMub3BhcXVlID0gW107XG5cblx0XHQvKipcblx0XHQgKiBBIGxpc3Qgd2l0aCB0cmFuc3BhcmVudCByZW5kZXIgaXRlbXMgd2hpY2ggcmVxdWlyZVxuXHRcdCAqIGRvdWJsZSBwYXNzIHJlbmRlcmluZyAoZS5nLiB0cmFuc21pc3NpdmUgb2JqZWN0cykuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnRyYW5zcGFyZW50RG91YmxlUGFzcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IHdpdGggdHJhbnNwYXJlbnQgcmVuZGVyIGl0ZW1zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE9iamVjdD59XG5cdFx0ICovXG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IHdpdGggdHJhbnNwYXJlbnQgcmVuZGVyIGJ1bmRsZSBkYXRhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE9iamVjdD59XG5cdFx0ICovXG5cdFx0dGhpcy5idW5kbGVzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVuZGVyIGxpc3QncyBsaWdodHMgbm9kZS4gVGhpcyBub2RlIGlzIGxhdGVyXG5cdFx0ICogcmVsZXZhbnQgZm9yIHRoZSBhY3R1YWwgYW5hbHl0aWNhbCBsaWdodCBub2RlcyB3aGljaFxuXHRcdCAqIGNvbXB1dGUgdGhlIHNjZW5lJ3MgbGlnaHRpbmcgaW4gdGhlIHNoYWRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtMaWdodHNOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRzTm9kZSA9IGxpZ2h0aW5nLmdldE5vZGUoIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzY2VuZSdzIGxpZ2h0cyBzdG9yZWQgaW4gYW4gYXJyYXkuIFRoaXMgYXJyYXlcblx0XHQgKiBpcyB1c2VkIHRvIHNldHVwIHRoZSBsaWdodHMgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxMaWdodD59XG5cdFx0ICovXG5cdFx0dGhpcy5saWdodHNBcnJheSA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNjZW5lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1NjZW5lfVxuXHRcdCAqL1xuXHRcdHRoaXMuc2NlbmUgPSBzY2VuZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjYW1lcmEgdGhlIHNjZW5lIGlzIHJlbmRlcmVkIHdpdGguXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q2FtZXJhfVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG1hbnkgb2JqZWN0cyBwZXJmb3JtIG9jY2x1c2lvbiBxdWVyeSB0ZXN0cy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMub2NjbHVzaW9uUXVlcnlDb3VudCA9IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgcmlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiBhIHJlbmRlciBjYWxsXG5cdCAqIGJlZm9yZSB0aGUgc2NlbmUgaXMgYW5hbHl6ZWQuIEl0IHByZXBhcmVzIHRoZSBpbnRlcm5hbCBkYXRhXG5cdCAqIHN0cnVjdHVyZXMgZm9yIHRoZSB1cGNvbWluZyByZW5kZXIgbGlzdHMgZ2VuZXJhdGlvbi5cblx0ICpcblx0ICogQHJldHVybiB7UmVuZGVyTGlzdH0gQSByZWZlcmVuY2UgdG8gdGhpcyByZW5kZXIgbGlzdC5cblx0ICovXG5cdGJlZ2luKCkge1xuXG5cdFx0dGhpcy5yZW5kZXJJdGVtc0luZGV4ID0gMDtcblxuXHRcdHRoaXMub3BhcXVlLmxlbmd0aCA9IDA7XG5cdFx0dGhpcy50cmFuc3BhcmVudERvdWJsZVBhc3MubGVuZ3RoID0gMDtcblx0XHR0aGlzLnRyYW5zcGFyZW50Lmxlbmd0aCA9IDA7XG5cdFx0dGhpcy5idW5kbGVzLmxlbmd0aCA9IDA7XG5cblx0XHR0aGlzLmxpZ2h0c0FycmF5Lmxlbmd0aCA9IDA7XG5cblx0XHR0aGlzLm9jY2x1c2lvblF1ZXJ5Q291bnQgPSAwO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcmVuZGVyIGl0ZW0gZm9yIHRoZSBnaXZpbmcgcmVuZGVyIGl0ZW0gc3RhdGUuIFRoZSBzdGF0ZSBpcyBkZWZpbmVkXG5cdCAqIGJ5IGEgc2VyaWVzIG9mIG9iamVjdC1yZWxhdGVkIHBhcmFtZXRlcnMuXG5cdCAqXG5cdCAqIFRoZSBtZXRob2QgYXZvaWRzIG9iamVjdCBjcmVhdGlvbiBieSBob2xkaW5nIHJlbmRlciBpdGVtcyBhbmQgcmV1c2luZyB0aGVtIGluXG5cdCAqIHN1YnNlcXVlbnQgcmVuZGVyIGNhbGxzIChqdXN0IHdpdGggZGlmZmVyZW50IHByb3BlcnR5IHZhbHVlcykuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5IC0gVGhlIDNEIG9iamVjdCdzIGdlb21ldHJ5LlxuXHQgKiBAcGFyYW0ge01hdGVyaWFsfSBtYXRlcmlhbCAtIFRoZSAzRCBvYmplY3QncyBtYXRlcmlhbC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGdyb3VwT3JkZXIgLSBUaGUgY3VycmVudCBncm91cCBvcmRlci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaCAzRCBvYmplY3QncyBkZXB0aCB2YWx1ZSAoeiB2YWx1ZSBpbiBjbGlwIHNwYWNlKS5cblx0ICogQHBhcmFtIHs/bnVtYmVyfSBncm91cCAtIHs/T2JqZWN0fSBncm91cCAtIE9ubHkgcmVsZXZhbnQgZm9yIG9iamVjdHMgdXNpbmcgbXVsdGlwbGUgbWF0ZXJpYWxzLiBUaGlzIHJlcHJlc2VudHMgYSBncm91cCBlbnRyeSBmcm9tIHRoZSByZXNwZWN0aXZlIGBCdWZmZXJHZW9tZXRyeWAuXG5cdCAqIEBwYXJhbSB7Q2xpcHBpbmdDb250ZXh0fSBjbGlwcGluZ0NvbnRleHQgLSBUaGUgY3VycmVudCBjbGlwcGluZyBjb250ZXh0LlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZW5kZXIgaXRlbS5cblx0ICovXG5cdGdldE5leHRSZW5kZXJJdGVtKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAsIGNsaXBwaW5nQ29udGV4dCApIHtcblxuXHRcdGxldCByZW5kZXJJdGVtID0gdGhpcy5yZW5kZXJJdGVtc1sgdGhpcy5yZW5kZXJJdGVtc0luZGV4IF07XG5cblx0XHRpZiAoIHJlbmRlckl0ZW0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmVuZGVySXRlbSA9IHtcblx0XHRcdFx0aWQ6IG9iamVjdC5pZCxcblx0XHRcdFx0b2JqZWN0OiBvYmplY3QsXG5cdFx0XHRcdGdlb21ldHJ5OiBnZW9tZXRyeSxcblx0XHRcdFx0bWF0ZXJpYWw6IG1hdGVyaWFsLFxuXHRcdFx0XHRncm91cE9yZGVyOiBncm91cE9yZGVyLFxuXHRcdFx0XHRyZW5kZXJPcmRlcjogb2JqZWN0LnJlbmRlck9yZGVyLFxuXHRcdFx0XHR6OiB6LFxuXHRcdFx0XHRncm91cDogZ3JvdXAsXG5cdFx0XHRcdGNsaXBwaW5nQ29udGV4dDogY2xpcHBpbmdDb250ZXh0XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLnJlbmRlckl0ZW1zWyB0aGlzLnJlbmRlckl0ZW1zSW5kZXggXSA9IHJlbmRlckl0ZW07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gb2JqZWN0LmlkO1xuXHRcdFx0cmVuZGVySXRlbS5vYmplY3QgPSBvYmplY3Q7XG5cdFx0XHRyZW5kZXJJdGVtLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cdFx0XHRyZW5kZXJJdGVtLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwT3JkZXIgPSBncm91cE9yZGVyO1xuXHRcdFx0cmVuZGVySXRlbS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcblx0XHRcdHJlbmRlckl0ZW0ueiA9IHo7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gZ3JvdXA7XG5cdFx0XHRyZW5kZXJJdGVtLmNsaXBwaW5nQ29udGV4dCA9IGNsaXBwaW5nQ29udGV4dDtcblxuXHRcdH1cblxuXHRcdHRoaXMucmVuZGVySXRlbXNJbmRleCArKztcblxuXHRcdHJldHVybiByZW5kZXJJdGVtO1xuXG5cdH1cblxuXHQvKipcblx0ICogUHVzaGVzIHRoZSBnaXZlbiBvYmplY3QgYXMgYSByZW5kZXIgaXRlbSB0byB0aGUgaW50ZXJuYWwgcmVuZGVyIGxpc3RzLlxuXHQgKiBUaGUgc2VsZWN0ZWQgbGlzdHMgZGVwZW5kIG9uIHRoZSBvYmplY3QgcHJvcGVydGllcy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnkgLSBUaGUgM0Qgb2JqZWN0J3MgZ2VvbWV0cnkuXG5cdCAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdGVyaWFsIC0gVGhlIDNEIG9iamVjdCdzIG1hdGVyaWFsLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZ3JvdXBPcmRlciAtIFRoZSBjdXJyZW50IGdyb3VwIG9yZGVyLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoIDNEIG9iamVjdCdzIGRlcHRoIHZhbHVlICh6IHZhbHVlIGluIGNsaXAgc3BhY2UpLlxuXHQgKiBAcGFyYW0gez9udW1iZXJ9IGdyb3VwIC0gez9PYmplY3R9IGdyb3VwIC0gT25seSByZWxldmFudCBmb3Igb2JqZWN0cyB1c2luZyBtdWx0aXBsZSBtYXRlcmlhbHMuIFRoaXMgcmVwcmVzZW50cyBhIGdyb3VwIGVudHJ5IGZyb20gdGhlIHJlc3BlY3RpdmUgYEJ1ZmZlckdlb21ldHJ5YC5cblx0ICogQHBhcmFtIHtDbGlwcGluZ0NvbnRleHR9IGNsaXBwaW5nQ29udGV4dCAtIFRoZSBjdXJyZW50IGNsaXBwaW5nIGNvbnRleHQuXG5cdCAqL1xuXHRwdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAsIGNsaXBwaW5nQ29udGV4dCApIHtcblxuXHRcdGNvbnN0IHJlbmRlckl0ZW0gPSB0aGlzLmdldE5leHRSZW5kZXJJdGVtKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAsIGNsaXBwaW5nQ29udGV4dCApO1xuXG5cdFx0aWYgKCBvYmplY3Qub2NjbHVzaW9uVGVzdCA9PT0gdHJ1ZSApIHRoaXMub2NjbHVzaW9uUXVlcnlDb3VudCArKztcblxuXHRcdGlmICggbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgfHwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uID4gMCApIHtcblxuXHRcdFx0aWYgKCBuZWVkc0RvdWJsZVBhc3MoIG1hdGVyaWFsICkgKSB0aGlzLnRyYW5zcGFyZW50RG91YmxlUGFzcy5wdXNoKCByZW5kZXJJdGVtICk7XG5cblx0XHRcdHRoaXMudHJhbnNwYXJlbnQucHVzaCggcmVuZGVySXRlbSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5vcGFxdWUucHVzaCggcmVuZGVySXRlbSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogSW5zZXJ0cyB0aGUgZ2l2ZW4gb2JqZWN0IGFzIGEgcmVuZGVyIGl0ZW0gYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnRlcm5hbCByZW5kZXIgbGlzdHMuXG5cdCAqIFRoZSBzZWxlY3RlZCBsaXN0cyBkZXBlbmQgb24gdGhlIG9iamVjdCBwcm9wZXJ0aWVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeSAtIFRoZSAzRCBvYmplY3QncyBnZW9tZXRyeS5cblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgM0Qgb2JqZWN0J3MgbWF0ZXJpYWwuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBncm91cE9yZGVyIC0gVGhlIGN1cnJlbnQgZ3JvdXAgb3JkZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGggM0Qgb2JqZWN0J3MgZGVwdGggdmFsdWUgKHogdmFsdWUgaW4gY2xpcCBzcGFjZSkuXG5cdCAqIEBwYXJhbSB7P251bWJlcn0gZ3JvdXAgLSB7P09iamVjdH0gZ3JvdXAgLSBPbmx5IHJlbGV2YW50IGZvciBvYmplY3RzIHVzaW5nIG11bHRpcGxlIG1hdGVyaWFscy4gVGhpcyByZXByZXNlbnRzIGEgZ3JvdXAgZW50cnkgZnJvbSB0aGUgcmVzcGVjdGl2ZSBgQnVmZmVyR2VvbWV0cnlgLlxuXHQgKiBAcGFyYW0ge0NsaXBwaW5nQ29udGV4dH0gY2xpcHBpbmdDb250ZXh0IC0gVGhlIGN1cnJlbnQgY2xpcHBpbmcgY29udGV4dC5cblx0ICovXG5cdHVuc2hpZnQoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCwgY2xpcHBpbmdDb250ZXh0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVySXRlbSA9IHRoaXMuZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCwgY2xpcHBpbmdDb250ZXh0ICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlIHx8IG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAgKSB7XG5cblx0XHRcdGlmICggbmVlZHNEb3VibGVQYXNzKCBtYXRlcmlhbCApICkgdGhpcy50cmFuc3BhcmVudERvdWJsZVBhc3MudW5zaGlmdCggcmVuZGVySXRlbSApO1xuXG5cdFx0XHR0aGlzLnRyYW5zcGFyZW50LnVuc2hpZnQoIHJlbmRlckl0ZW0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMub3BhcXVlLnVuc2hpZnQoIHJlbmRlckl0ZW0gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFB1c2hlcyByZW5kZXIgYnVuZGxlIGdyb3VwIGRhdGEgaW50byB0aGUgcmVuZGVyIGxpc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBncm91cCAtIEJ1bmRsZSBncm91cCBkYXRhLlxuXHQgKi9cblx0cHVzaEJ1bmRsZSggZ3JvdXAgKSB7XG5cblx0XHR0aGlzLmJ1bmRsZXMucHVzaCggZ3JvdXAgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFB1c2hlcyBhIGxpZ2h0IGludG8gdGhlIHJlbmRlciBsaXN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xpZ2h0fSBsaWdodCAtIFRoZSBsaWdodC5cblx0ICovXG5cdHB1c2hMaWdodCggbGlnaHQgKSB7XG5cblx0XHR0aGlzLmxpZ2h0c0FycmF5LnB1c2goIGxpZ2h0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTb3J0cyB0aGUgaW50ZXJuYWwgcmVuZGVyIGxpc3RzLlxuXHQgKlxuXHQgKiBAcGFyYW0gez9mdW5jdGlvbihhbnksIGFueSk6IG51bWJlcn0gY3VzdG9tT3BhcXVlU29ydCAtIEEgY3VzdG9tIHNvcnQgZnVuY3Rpb24gZm9yIG9wYXF1ZSBvYmplY3RzLlxuXHQgKiBAcGFyYW0gez9mdW5jdGlvbihhbnksIGFueSk6IG51bWJlcn0gY3VzdG9tVHJhbnNwYXJlbnRTb3J0IC0gIEEgY3VzdG9tIHNvcnQgZnVuY3Rpb24gZm9yIHRyYW5zcGFyZW50IG9iamVjdHMuXG5cdCAqL1xuXHRzb3J0KCBjdXN0b21PcGFxdWVTb3J0LCBjdXN0b21UcmFuc3BhcmVudFNvcnQgKSB7XG5cblx0XHRpZiAoIHRoaXMub3BhcXVlLmxlbmd0aCA+IDEgKSB0aGlzLm9wYXF1ZS5zb3J0KCBjdXN0b21PcGFxdWVTb3J0IHx8IHBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0aGlzLnRyYW5zcGFyZW50RG91YmxlUGFzcy5sZW5ndGggPiAxICkgdGhpcy50cmFuc3BhcmVudERvdWJsZVBhc3Muc29ydCggY3VzdG9tVHJhbnNwYXJlbnRTb3J0IHx8IHJldmVyc2VQYWludGVyU29ydFN0YWJsZSApO1xuXHRcdGlmICggdGhpcy50cmFuc3BhcmVudC5sZW5ndGggPiAxICkgdGhpcy50cmFuc3BhcmVudC5zb3J0KCBjdXN0b21UcmFuc3BhcmVudFNvcnQgfHwgcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyBmaW5hbGl6aW5nIHRhc2tzIHJpZ2h0IGFmdGVyIHRoZSByZW5kZXIgbGlzdHNcblx0ICogaGF2ZSBiZWVuIGdlbmVyYXRlZC5cblx0ICovXG5cdGZpbmlzaCgpIHtcblxuXHRcdC8vIHVwZGF0ZSBsaWdodHNcblxuXHRcdHRoaXMubGlnaHRzTm9kZS5zZXRMaWdodHMoIHRoaXMubGlnaHRzQXJyYXkgKTtcblxuXHRcdC8vIENsZWFyIHJlZmVyZW5jZXMgZnJvbSBpbmFjdGl2ZSByZW5kZXJJdGVtcyBpbiB0aGUgbGlzdFxuXG5cdFx0Zm9yICggbGV0IGkgPSB0aGlzLnJlbmRlckl0ZW1zSW5kZXgsIGlsID0gdGhpcy5yZW5kZXJJdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVySXRlbSA9IHRoaXMucmVuZGVySXRlbXNbIGkgXTtcblxuXHRcdFx0aWYgKCByZW5kZXJJdGVtLmlkID09PSBudWxsICkgYnJlYWs7XG5cblx0XHRcdHJlbmRlckl0ZW0uaWQgPSBudWxsO1xuXHRcdFx0cmVuZGVySXRlbS5vYmplY3QgPSBudWxsO1xuXHRcdFx0cmVuZGVySXRlbS5nZW9tZXRyeSA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLm1hdGVyaWFsID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0uZ3JvdXBPcmRlciA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLnJlbmRlck9yZGVyID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0ueiA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0uY2xpcHBpbmdDb250ZXh0ID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVuZGVyTGlzdDtcbiIsImltcG9ydCBDaGFpbk1hcCBmcm9tICcuL0NoYWluTWFwLmpzJztcbmltcG9ydCBSZW5kZXJMaXN0IGZyb20gJy4vUmVuZGVyTGlzdC5qcyc7XG5cbmNvbnN0IF9jaGFpbktleXMgPSBbXTtcblxuLyoqXG4gKiBUaGlzIHJlbmRlcmVyIG1vZHVsZSBtYW5hZ2VzIHRoZSByZW5kZXIgbGlzdHMgd2hpY2ggYXJlIHVuaXF1ZVxuICogcGVyIHNjZW5lIGFuZCBjYW1lcmEgY29tYmluYXRpb24uXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUmVuZGVyTGlzdHMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgcmVuZGVyIGxpc3RzIG1hbmFnZW1lbnQgY29tcG9uZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xpZ2h0aW5nfSBsaWdodGluZyAtIFRoZSBsaWdodGluZyBtYW5hZ2VtZW50IGNvbXBvbmVudC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBsaWdodGluZyApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaWdodGluZyBtYW5hZ2VtZW50IGNvbXBvbmVudC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtMaWdodGluZ31cblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0aW5nID0gbGlnaHRpbmc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW50ZXJuYWwgY2hhaW4gbWFwIHdoaWNoIGhvbGRzIHRoZSByZW5kZXIgbGlzdHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q2hhaW5NYXB9XG5cdFx0ICovXG5cdFx0dGhpcy5saXN0cyA9IG5ldyBDaGFpbk1hcCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHJlbmRlciBsaXN0IGZvciB0aGUgZ2l2ZW4gc2NlbmUgYW5kIGNhbWVyYS5cblx0ICpcblx0ICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBUaGUgc2NlbmUuXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLlxuXHQgKiBAcmV0dXJuIHtSZW5kZXJMaXN0fSBUaGUgcmVuZGVyIGxpc3QuXG5cdCAqL1xuXHRnZXQoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRjb25zdCBsaXN0cyA9IHRoaXMubGlzdHM7XG5cblx0XHRfY2hhaW5LZXlzWyAwIF0gPSBzY2VuZTtcblx0XHRfY2hhaW5LZXlzWyAxIF0gPSBjYW1lcmE7XG5cblx0XHRsZXQgbGlzdCA9IGxpc3RzLmdldCggX2NoYWluS2V5cyApO1xuXG5cdFx0aWYgKCBsaXN0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxpc3QgPSBuZXcgUmVuZGVyTGlzdCggdGhpcy5saWdodGluZywgc2NlbmUsIGNhbWVyYSApO1xuXHRcdFx0bGlzdHMuc2V0KCBfY2hhaW5LZXlzLCBsaXN0ICk7XG5cblx0XHR9XG5cblx0XHRfY2hhaW5LZXlzLmxlbmd0aCA9IDA7XG5cblx0XHRyZXR1cm4gbGlzdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIGFsbCBpbnRlcm5hbCByZXNvdXJjZXMuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5saXN0cyA9IG5ldyBDaGFpbk1hcCgpO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSZW5kZXJMaXN0cztcbiIsImltcG9ydCB7IFZlY3RvcjQgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjQuanMnO1xuaW1wb3J0IHsgaGFzaEFycmF5IH0gZnJvbSAnLi4vLi4vbm9kZXMvY29yZS9Ob2RlVXRpbHMuanMnO1xuXG5sZXQgX2lkID0gMDtcblxuLyoqXG4gKiBBbnkgcmVuZGVyIG9yIGNvbXB1dGUgY29tbWFuZCBpcyBleGVjdXRlZCBpbiBhIHNwZWNpZmljIGNvbnRleHQgdGhhdCBkZWZpbmVzXG4gKiB0aGUgc3RhdGUgb2YgdGhlIHJlbmRlcmVyIGFuZCBpdHMgYmFja2VuZC4gVHlwaWNhbCBleGFtcGxlcyBmb3Igc3VjaCBjb250ZXh0XG4gKiBkYXRhIGFyZSB0aGUgY3VycmVudCBjbGVhciB2YWx1ZXMgb3IgZGF0YSBmcm9tIHRoZSBhY3RpdmUgZnJhbWVidWZmZXIuIFRoaXNcbiAqIG1vZHVsZSBpcyB1c2VkIHRvIHJlcHJlc2VudCB0aGVzZSBjb250ZXh0cyBhcyBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFJlbmRlckNvbnRleHQge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlbmRlciBjb250ZXh0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29udGV4dCdzIElELlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLmlkID0gX2lkICsrO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgY3VycmVudCBhY3RpdmUgZnJhbWVidWZmZXIgaGFzIGEgY29sb3IgYXR0YWNobWVudC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGNvbG9yIGF0dGFjaG1lbnQgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJDb2xvciA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2xlYXIgY29sb3IgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmNsZWFyQ29sb3JWYWx1ZSA9IHsgcjogMCwgZzogMCwgYjogMCwgYTogMSB9O1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgY3VycmVudCBhY3RpdmUgZnJhbWVidWZmZXIgaGFzIGEgZGVwdGggYXR0YWNobWVudC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmRlcHRoID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGRlcHRoIGF0dGFjaG1lbnQgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJEZXB0aCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2xlYXIgZGVwdGggdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmNsZWFyRGVwdGhWYWx1ZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBjdXJyZW50IGFjdGl2ZSBmcmFtZWJ1ZmZlciBoYXMgYSBzdGVuY2lsIGF0dGFjaG1lbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuc3RlbmNpbCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgc3RlbmNpbCBhdHRhY2htZW50IHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmNsZWFyU3RlbmNpbCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2xlYXIgc3RlbmNpbCB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJTdGVuY2lsVmFsdWUgPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogQnkgZGVmYXVsdCB0aGUgdmlld3BvcnQgZW5jbG9zZXMgdGhlIGVudGlyZSBmcmFtZWJ1ZmZlciBJZiBhIHNtYWxsZXJcblx0XHQgKiB2aWV3cG9ydCBpcyBtYW51YWxseSBkZWZpbmVkLCB0aGlzIHByb3BlcnR5IGlzIHRvIGB0cnVlYCBieSB0aGUgcmVuZGVyZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMudmlld3BvcnQgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2aWV3cG9ydCB2YWx1ZS4gVGhpcyB2YWx1ZSBpcyBpbiBwaHlzaWNhbCBwaXhlbHMgbWVhbmluZyBpdCBpbmNvcnBvcmF0ZXNcblx0XHQgKiB0aGUgcmVuZGVyZXIncyBwaXhlbCByYXRpby4gVGhlIHZpZXdwb3J0IHByb3BlcnR5IG9mIHJlbmRlciB0YXJnZXRzIG9yXG5cdFx0ICogdGhlIHJlbmRlcmVyIGlzIGluIGxvZ2ljYWwgcGl4ZWxzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjR9XG5cdFx0ICovXG5cdFx0dGhpcy52aWV3cG9ydFZhbHVlID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gdGhlIHNjaXNzb3IgdGVzdCBpcyBhY3RpdmUgYW5kIHNjaXNzb3IgcmVjdGFuZ2xlIHNtYWxsZXIgdGhhbiB0aGVcblx0XHQgKiBmcmFtZWJ1ZmZlcnMgZGltZW5zaW9ucywgdGhpcyBwcm9wZXJ0eSBpcyB0byBgdHJ1ZWAgYnkgdGhlIHJlbmRlcmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLnNjaXNzb3IgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzY2lzc29yIHJlY3RhbmdsZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3I0fVxuXHRcdCAqL1xuXHRcdHRoaXMuc2Npc3NvclZhbHVlID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhY3RpdmUgcmVuZGVyIHRhcmdldC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/UmVuZGVyVGFyZ2V0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGV4dHVyZXMgb2YgdGhlIGFjdGl2ZSByZW5kZXIgdGFyZ2V0LlxuXHRcdCAqIGBudWxsYCB3aGVuIG5vIHJlbmRlciB0YXJnZXQgaXMgc2V0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9BcnJheTxUZXh0dXJlPn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy50ZXh0dXJlcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGVwdGggdGV4dHVyZSBvZiB0aGUgYWN0aXZlIHJlbmRlciB0YXJnZXQuXG5cdFx0ICogYG51bGxgIHdoZW4gbm8gcmVuZGVyIHRhcmdldCBpcyBzZXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0RlcHRoVGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aFRleHR1cmUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGFjdGl2ZSBjdWJlIGZhY2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmFjdGl2ZUN1YmVGYWNlID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhY3RpdmUgbWlwbWFwIGxldmVsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5hY3RpdmVNaXBtYXBMZXZlbCA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbnVtYmVyIG9mIE1TQUEgc2FtcGxlcy4gVGhpcyB2YWx1ZSBpcyBhbHdheXMgYDFgIHdoZW5cblx0XHQgKiBNU0FBIGlzbid0IHVzZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnNhbXBsZUNvdW50ID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhY3RpdmUgcmVuZGVyIHRhcmdldCdzIHdpZHRoIGluIHBoeXNpY2FsIHBpeGVscy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMud2lkdGggPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGFjdGl2ZSByZW5kZXIgdGFyZ2V0J3MgaGVpZ2h0IGluIHBoeXNpY2FsIHBpeGVscy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuaGVpZ2h0ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvY2NsdXNpb24gcXVlcnkgY291bnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLm9jY2x1c2lvblF1ZXJ5Q291bnQgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgY2xpcHBpbmcgY29udGV4dC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Q2xpcHBpbmdDb250ZXh0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNsaXBwaW5nQ29udGV4dCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUmVuZGVyQ29udGV4dCA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjYWNoZSBrZXkgb2YgdGhpcyByZW5kZXIgY29udGV4dC5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY2FjaGUga2V5LlxuXHQgKi9cblx0Z2V0Q2FjaGVLZXkoKSB7XG5cblx0XHRyZXR1cm4gZ2V0Q2FjaGVLZXkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhIGNhY2hlIGtleSBmb3IgdGhlIGdpdmVuIHJlbmRlciBjb250ZXh0LiBUaGlzIGtleVxuICogc2hvdWxkIGlkZW50aWZ5IHRoZSByZW5kZXIgdGFyZ2V0IHN0YXRlIHNvIGl0IGlzIHBvc3NpYmxlIHRvXG4gKiBjb25maWd1cmUgdGhlIGNvcnJlY3QgYXR0YWNobWVudHMgaW4gdGhlIHJlc3BlY3RpdmUgYmFja2VuZC5cbiAqXG4gKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjYWNoZSBrZXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWNoZUtleSggcmVuZGVyQ29udGV4dCApIHtcblxuXHRjb25zdCB7IHRleHR1cmVzLCBhY3RpdmVDdWJlRmFjZSB9ID0gcmVuZGVyQ29udGV4dDtcblxuXHRjb25zdCB2YWx1ZXMgPSBbIGFjdGl2ZUN1YmVGYWNlIF07XG5cblx0Zm9yICggY29uc3QgdGV4dHVyZSBvZiB0ZXh0dXJlcyApIHtcblxuXHRcdHZhbHVlcy5wdXNoKCB0ZXh0dXJlLmlkICk7XG5cblx0fVxuXG5cdHJldHVybiBoYXNoQXJyYXkoIHZhbHVlcyApO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlbmRlckNvbnRleHQ7XG4iLCJpbXBvcnQgQ2hhaW5NYXAgZnJvbSAnLi9DaGFpbk1hcC5qcyc7XG5pbXBvcnQgUmVuZGVyQ29udGV4dCBmcm9tICcuL1JlbmRlckNvbnRleHQuanMnO1xuaW1wb3J0IHsgU2NlbmUgfSBmcm9tICcuLi8uLi9zY2VuZXMvU2NlbmUuanMnO1xuaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSAnLi4vLi4vY2FtZXJhcy9DYW1lcmEuanMnO1xuXG5jb25zdCBfY2hhaW5LZXlzID0gW107XG5jb25zdCBfZGVmYXVsdFNjZW5lID0gLypAX19QVVJFX18qLyBuZXcgU2NlbmUoKTtcbmNvbnN0IF9kZWZhdWx0Q2FtZXJhID0gLypAX19QVVJFX18qLyBuZXcgQ2FtZXJhKCk7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgbWFuYWdlcyB0aGUgcmVuZGVyIGNvbnRleHRzIG9mIHRoZSByZW5kZXJlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBSZW5kZXJDb250ZXh0cyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcmVuZGVyIGNvbnRleHQgbWFuYWdlbWVudCBjb21wb25lbnQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSB0aGF0IG1hbmFnZXMgcmVuZGVyIGNvbnRleHRzIGluIGNoYWluIG1hcHNcblx0XHQgKiBmb3IgZWFjaCBhdHRhY2htZW50IHN0YXRlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsQ2hhaW5NYXA+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY2hhaW5NYXBzID0ge307XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcmVuZGVyIGNvbnRleHQgZm9yIHRoZSBnaXZlbiBzY2VuZSwgY2FtZXJhIGFuZCByZW5kZXIgdGFyZ2V0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZS5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhhdCBpcyB1c2VkIHRvIHJlbmRlciB0aGUgc2NlbmUuXG5cdCAqIEBwYXJhbSB7P1JlbmRlclRhcmdldH0gW3JlbmRlclRhcmdldD1udWxsXSAtIFRoZSBhY3RpdmUgcmVuZGVyIHRhcmdldC5cblx0ICogQHJldHVybiB7UmVuZGVyQ29udGV4dH0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKi9cblx0Z2V0KCBzY2VuZSwgY2FtZXJhLCByZW5kZXJUYXJnZXQgPSBudWxsICkge1xuXG5cdFx0X2NoYWluS2V5c1sgMCBdID0gc2NlbmU7XG5cdFx0X2NoYWluS2V5c1sgMSBdID0gY2FtZXJhO1xuXG5cdFx0bGV0IGF0dGFjaG1lbnRTdGF0ZTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ID09PSBudWxsICkge1xuXG5cdFx0XHRhdHRhY2htZW50U3RhdGUgPSAnZGVmYXVsdCc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBmb3JtYXQgPSByZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQ7XG5cdFx0XHRjb25zdCBjb3VudCA9IHJlbmRlclRhcmdldC50ZXh0dXJlcy5sZW5ndGg7XG5cblx0XHRcdGF0dGFjaG1lbnRTdGF0ZSA9IGAkeyBjb3VudCB9OiR7IGZvcm1hdCB9OiR7IHJlbmRlclRhcmdldC5zYW1wbGVzIH06JHsgcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyIH06JHsgcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgfWA7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjaGFpbk1hcCA9IHRoaXMuX2dldENoYWluTWFwKCBhdHRhY2htZW50U3RhdGUgKTtcblxuXHRcdGxldCByZW5kZXJTdGF0ZSA9IGNoYWluTWFwLmdldCggX2NoYWluS2V5cyApO1xuXG5cdFx0aWYgKCByZW5kZXJTdGF0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZW5kZXJTdGF0ZSA9IG5ldyBSZW5kZXJDb250ZXh0KCk7XG5cblx0XHRcdGNoYWluTWFwLnNldCggX2NoYWluS2V5cywgcmVuZGVyU3RhdGUgKTtcblxuXHRcdH1cblxuXHRcdF9jaGFpbktleXMubGVuZ3RoID0gMDtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICE9PSBudWxsICkgcmVuZGVyU3RhdGUuc2FtcGxlQ291bnQgPSByZW5kZXJUYXJnZXQuc2FtcGxlcyA9PT0gMCA/IDEgOiByZW5kZXJUYXJnZXQuc2FtcGxlcztcblxuXHRcdHJldHVybiByZW5kZXJTdGF0ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSByZW5kZXIgY29udGV4dCBpbnRlbmRlZCBmb3IgY2xlYXIgb3BlcmF0aW9ucy5cblx0ICpcblx0ICogQHBhcmFtIHs/UmVuZGVyVGFyZ2V0fSBbcmVuZGVyVGFyZ2V0PW51bGxdIC0gVGhlIGFjdGl2ZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcmV0dXJuIHtSZW5kZXJDb250ZXh0fSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqL1xuXHRnZXRGb3JDbGVhciggcmVuZGVyVGFyZ2V0ID0gbnVsbCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldCggX2RlZmF1bHRTY2VuZSwgX2RlZmF1bHRDYW1lcmEsIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGNoYWluIG1hcCBmb3IgdGhlIGdpdmVuIGF0dGFjaG1lbnQgc3RhdGUuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBhdHRhY2htZW50U3RhdGUgLSBUaGUgYXR0YWNobWVudCBzdGF0ZS5cblx0ICogQHJldHVybiB7Q2hhaW5NYXB9IFRoZSBjaGFpbiBtYXAuXG5cdCAqL1xuXHRfZ2V0Q2hhaW5NYXAoIGF0dGFjaG1lbnRTdGF0ZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmNoYWluTWFwc1sgYXR0YWNobWVudFN0YXRlIF0gfHwgKCB0aGlzLmNoYWluTWFwc1sgYXR0YWNobWVudFN0YXRlIF0gPSBuZXcgQ2hhaW5NYXAoKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgaW50ZXJuYWwgcmVzb3VyY2VzLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuY2hhaW5NYXBzID0ge307XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlbmRlckNvbnRleHRzO1xuIiwiaW1wb3J0IERhdGFNYXAgZnJvbSAnLi9EYXRhTWFwLmpzJztcblxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBEZXB0aFRleHR1cmUgfSBmcm9tICcuLi8uLi90ZXh0dXJlcy9EZXB0aFRleHR1cmUuanMnO1xuaW1wb3J0IHsgRGVwdGhTdGVuY2lsRm9ybWF0LCBEZXB0aEZvcm1hdCwgVW5zaWduZWRJbnRUeXBlLCBVbnNpZ25lZEludDI0OFR5cGUsIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZywgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsIFVuc2lnbmVkQnl0ZVR5cGUgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuXG5jb25zdCBfc2l6ZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBtYW5hZ2VzIHRoZSB0ZXh0dXJlcyBvZiB0aGUgcmVuZGVyZXIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBEYXRhTWFwXG4gKi9cbmNsYXNzIFRleHR1cmVzIGV4dGVuZHMgRGF0YU1hcCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdGV4dHVyZSBtYW5hZ2VtZW50IGNvbXBvbmVudC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7QmFja2VuZH0gYmFja2VuZCAtIFRoZSByZW5kZXJlcidzIGJhY2tlbmQuXG5cdCAqIEBwYXJhbSB7SW5mb30gaW5mbyAtIFJlbmRlcmVyIGNvbXBvbmVudCBmb3IgbWFuYWdpbmcgbWV0cmljcyBhbmQgbW9uaXRvcmluZyBkYXRhLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJlbmRlcmVyLCBiYWNrZW5kLCBpbmZvICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXJlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtSZW5kZXJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYmFja2VuZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtCYWNrZW5kfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJlciBjb21wb25lbnQgZm9yIG1hbmFnaW5nIG1ldHJpY3MgYW5kIG1vbml0b3JpbmcgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtJbmZvfVxuXHRcdCAqL1xuXHRcdHRoaXMuaW5mbyA9IGluZm87XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBnaXZlbiByZW5kZXIgdGFyZ2V0LiBCYXNlZCBvbiB0aGUgZ2l2ZW4gcmVuZGVyIHRhcmdldCBjb25maWd1cmF0aW9uLFxuXHQgKiBpdCB1cGRhdGVzIHRoZSB0ZXh0dXJlIHN0YXRlcyByZXByZXNlbnRpbmcgdGhlIGF0dGFjaG1lbnRzIG9mIHRoZSBmcmFtZWJ1ZmZlci5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJUYXJnZXR9IHJlbmRlclRhcmdldCAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIHVwZGF0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthY3RpdmVNaXBtYXBMZXZlbD0wXSAtIFRoZSBhY3RpdmUgbWlwbWFwIGxldmVsLlxuXHQgKi9cblx0dXBkYXRlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIGFjdGl2ZU1pcG1hcExldmVsID0gMCApIHtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldERhdGEgPSB0aGlzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRjb25zdCBzYW1wbGVDb3VudCA9IHJlbmRlclRhcmdldC5zYW1wbGVzID09PSAwID8gMSA6IHJlbmRlclRhcmdldC5zYW1wbGVzO1xuXHRcdGNvbnN0IGRlcHRoVGV4dHVyZU1pcHMgPSByZW5kZXJUYXJnZXREYXRhLmRlcHRoVGV4dHVyZU1pcHMgfHwgKCByZW5kZXJUYXJnZXREYXRhLmRlcHRoVGV4dHVyZU1pcHMgPSB7fSApO1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7XG5cblx0XHRjb25zdCBzaXplID0gdGhpcy5nZXRTaXplKCB0ZXh0dXJlc1sgMCBdICk7XG5cblx0XHRjb25zdCBtaXBXaWR0aCA9IHNpemUud2lkdGggPj4gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cdFx0Y29uc3QgbWlwSGVpZ2h0ID0gc2l6ZS5oZWlnaHQgPj4gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0XHRsZXQgZGVwdGhUZXh0dXJlID0gcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSB8fCBkZXB0aFRleHR1cmVNaXBzWyBhY3RpdmVNaXBtYXBMZXZlbCBdO1xuXHRcdGNvbnN0IHVzZURlcHRoVGV4dHVyZSA9IHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciA9PT0gdHJ1ZSB8fCByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciA9PT0gdHJ1ZTtcblxuXHRcdGxldCB0ZXh0dXJlTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdGlmICggZGVwdGhUZXh0dXJlID09PSB1bmRlZmluZWQgJiYgdXNlRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRkZXB0aFRleHR1cmUgPSBuZXcgRGVwdGhUZXh0dXJlKCk7XG5cdFx0XHRkZXB0aFRleHR1cmUuZm9ybWF0ID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyBEZXB0aFN0ZW5jaWxGb3JtYXQgOiBEZXB0aEZvcm1hdDtcblx0XHRcdGRlcHRoVGV4dHVyZS50eXBlID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyBVbnNpZ25lZEludDI0OFR5cGUgOiBVbnNpZ25lZEludFR5cGU7IC8vIEZsb2F0VHlwZVxuXHRcdFx0ZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoID0gbWlwV2lkdGg7XG5cdFx0XHRkZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gbWlwSGVpZ2h0O1xuXG5cdFx0XHRkZXB0aFRleHR1cmVNaXBzWyBhY3RpdmVNaXBtYXBMZXZlbCBdID0gZGVwdGhUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXREYXRhLndpZHRoICE9PSBzaXplLndpZHRoIHx8IHNpemUuaGVpZ2h0ICE9PSByZW5kZXJUYXJnZXREYXRhLmhlaWdodCApIHtcblxuXHRcdFx0dGV4dHVyZU5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBkZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdFx0ZGVwdGhUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0ZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoID0gbWlwV2lkdGg7XG5cdFx0XHRcdGRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgPSBtaXBIZWlnaHQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJlbmRlclRhcmdldERhdGEud2lkdGggPSBzaXplLndpZHRoO1xuXHRcdHJlbmRlclRhcmdldERhdGEuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cdFx0cmVuZGVyVGFyZ2V0RGF0YS50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdHJlbmRlclRhcmdldERhdGEuZGVwdGhUZXh0dXJlID0gZGVwdGhUZXh0dXJlIHx8IG51bGw7XG5cdFx0cmVuZGVyVGFyZ2V0RGF0YS5kZXB0aCA9IHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlcjtcblx0XHRyZW5kZXJUYXJnZXREYXRhLnN0ZW5jaWwgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlcjtcblx0XHRyZW5kZXJUYXJnZXREYXRhLnJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0RGF0YS5zYW1wbGVDb3VudCAhPT0gc2FtcGxlQ291bnQgKSB7XG5cblx0XHRcdHRleHR1cmVOZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdGlmICggZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdGRlcHRoVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0cmVuZGVyVGFyZ2V0RGF0YS5zYW1wbGVDb3VudCA9IHNhbXBsZUNvdW50O1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXG5cdFx0Y29uc3Qgb3B0aW9ucyA9IHsgc2FtcGxlQ291bnQgfTtcblxuXHRcdC8vIFhSIHJlbmRlciB0YXJnZXRzIHJlcXVpcmUgbm8gdGV4dHVyZSB1cGRhdGVzXG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ICE9PSB0cnVlICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IHRleHR1cmVzWyBpIF07XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNVcGRhdGUgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR0aGlzLnVwZGF0ZVRleHR1cmUoIHRleHR1cmUsIG9wdGlvbnMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGRlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0XHR0aGlzLnVwZGF0ZVRleHR1cmUoIGRlcHRoVGV4dHVyZSwgb3B0aW9ucyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBkaXNwb3NlIGhhbmRsZXJcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0RGF0YS5pbml0aWFsaXplZCAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0RGF0YS5pbml0aWFsaXplZCA9IHRydWU7XG5cblx0XHRcdC8vIGRpc3Bvc2VcblxuXHRcdFx0Y29uc3Qgb25EaXNwb3NlID0gKCkgPT4ge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uRGlzcG9zZSApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHRoaXMuX2Rlc3Ryb3lUZXh0dXJlKCB0ZXh0dXJlc1sgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0dGhpcy5fZGVzdHJveVRleHR1cmUoIGRlcHRoVGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmRlbGV0ZSggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdH07XG5cblx0XHRcdHJlbmRlclRhcmdldC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uRGlzcG9zZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgZ2l2ZW4gdGV4dHVyZS4gRGVwZW5kaW5nIG9uIHRoZSB0ZXh0dXJlIHN0YXRlLCB0aGlzIG1ldGhvZFxuXHQgKiB0cmlnZ2VycyB0aGUgdXBsb2FkIG9mIHRleHR1cmUgZGF0YSB0byB0aGUgR1BVIG1lbW9yeS4gSWYgdGhlIHRleHR1cmUgZGF0YSBhcmVcblx0ICogbm90IHlldCByZWFkeSBmb3IgdGhlIHVwbG9hZCwgaXQgdXNlcyBkZWZhdWx0IHRleHR1cmUgZGF0YSBmb3IgYXMgYSBwbGFjZWhvbGRlci5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gdXBkYXRlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gVGhlIG9wdGlvbnMuXG5cdCAqL1xuXHR1cGRhdGVUZXh0dXJlKCB0ZXh0dXJlLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlRGF0YSA9IHRoaXMuZ2V0KCB0ZXh0dXJlICk7XG5cdFx0aWYgKCB0ZXh0dXJlRGF0YS5pbml0aWFsaXplZCA9PT0gdHJ1ZSAmJiB0ZXh0dXJlRGF0YS52ZXJzaW9uID09PSB0ZXh0dXJlLnZlcnNpb24gKSByZXR1cm47XG5cblx0XHRjb25zdCBpc1JlbmRlclRhcmdldCA9IHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlIHx8IHRleHR1cmUuaXNEZXB0aFRleHR1cmUgfHwgdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZTtcblx0XHRjb25zdCBiYWNrZW5kID0gdGhpcy5iYWNrZW5kO1xuXG5cdFx0aWYgKCBpc1JlbmRlclRhcmdldCAmJiB0ZXh0dXJlRGF0YS5pbml0aWFsaXplZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Ly8gaXQncyBhbiB1cGRhdGVcblxuXHRcdFx0YmFja2VuZC5kZXN0cm95U2FtcGxlciggdGV4dHVyZSApO1xuXHRcdFx0YmFja2VuZC5kZXN0cm95VGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS50eXBlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUudHlwZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSBVbnNpZ25lZEJ5dGVUeXBlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9ID0gdGhpcy5nZXRTaXplKCB0ZXh0dXJlICk7XG5cblx0XHRvcHRpb25zLndpZHRoID0gd2lkdGg7XG5cdFx0b3B0aW9ucy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0b3B0aW9ucy5kZXB0aCA9IGRlcHRoO1xuXHRcdG9wdGlvbnMubmVlZHNNaXBtYXBzID0gdGhpcy5uZWVkc01pcG1hcHMoIHRleHR1cmUgKTtcblx0XHRvcHRpb25zLmxldmVscyA9IG9wdGlvbnMubmVlZHNNaXBtYXBzID8gdGhpcy5nZXRNaXBMZXZlbHMoIHRleHR1cmUsIHdpZHRoLCBoZWlnaHQgKSA6IDE7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBpc1JlbmRlclRhcmdldCB8fCB0ZXh0dXJlLmlzU3RvcmFnZVRleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdGJhY2tlbmQuY3JlYXRlU2FtcGxlciggdGV4dHVyZSApO1xuXHRcdFx0YmFja2VuZC5jcmVhdGVUZXh0dXJlKCB0ZXh0dXJlLCBvcHRpb25zICk7XG5cblx0XHRcdHRleHR1cmVEYXRhLmdlbmVyYXRpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBuZWVkc0NyZWF0ZSA9IHRleHR1cmVEYXRhLmluaXRpYWxpemVkICE9PSB0cnVlO1xuXG5cdFx0XHRpZiAoIG5lZWRzQ3JlYXRlICkgYmFja2VuZC5jcmVhdGVTYW1wbGVyKCB0ZXh0dXJlICk7XG5cblx0XHRcdGlmICggdGV4dHVyZS52ZXJzaW9uID4gMCApIHtcblxuXHRcdFx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdFx0aWYgKCBpbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIHVuZGVmaW5lZC4nICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggaW1hZ2UuY29tcGxldGUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIGluY29tcGxldGUuJyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHRleHR1cmUuaW1hZ2VzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBpbWFnZXMgPSBbXTtcblxuXHRcdFx0XHRcdFx0Zm9yICggY29uc3QgaW1hZ2Ugb2YgdGV4dHVyZS5pbWFnZXMgKSB7XG5cblx0XHRcdFx0XHRcdFx0aW1hZ2VzLnB1c2goIGltYWdlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0b3B0aW9ucy5pbWFnZXMgPSBpbWFnZXM7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRvcHRpb25zLmltYWdlID0gaW1hZ2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIHRleHR1cmVEYXRhLmlzRGVmYXVsdFRleHR1cmUgPT09IHVuZGVmaW5lZCB8fCB0ZXh0dXJlRGF0YS5pc0RlZmF1bHRUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRiYWNrZW5kLmNyZWF0ZVRleHR1cmUoIHRleHR1cmUsIG9wdGlvbnMgKTtcblxuXHRcdFx0XHRcdFx0dGV4dHVyZURhdGEuaXNEZWZhdWx0VGV4dHVyZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dGV4dHVyZURhdGEuZ2VuZXJhdGlvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggdGV4dHVyZS5zb3VyY2UuZGF0YVJlYWR5ID09PSB0cnVlICkgYmFja2VuZC51cGRhdGVUZXh0dXJlKCB0ZXh0dXJlLCBvcHRpb25zICk7XG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbnMubmVlZHNNaXBtYXBzICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPT09IDAgKSBiYWNrZW5kLmdlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBhc3luYyB1cGRhdGVcblxuXHRcdFx0XHRiYWNrZW5kLmNyZWF0ZURlZmF1bHRUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0dGV4dHVyZURhdGEuaXNEZWZhdWx0VGV4dHVyZSA9IHRydWU7XG5cdFx0XHRcdHRleHR1cmVEYXRhLmdlbmVyYXRpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGRpc3Bvc2UgaGFuZGxlclxuXG5cdFx0aWYgKCB0ZXh0dXJlRGF0YS5pbml0aWFsaXplZCAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0dGV4dHVyZURhdGEuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFx0dGV4dHVyZURhdGEuZ2VuZXJhdGlvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHRcdFx0Ly9cblxuXHRcdFx0dGhpcy5pbmZvLm1lbW9yeS50ZXh0dXJlcyArKztcblxuXHRcdFx0Ly8gZGlzcG9zZVxuXG5cdFx0XHRjb25zdCBvbkRpc3Bvc2UgPSAoKSA9PiB7XG5cblx0XHRcdFx0dGV4dHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uRGlzcG9zZSApO1xuXG5cdFx0XHRcdHRoaXMuX2Rlc3Ryb3lUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0dGhpcy5pbmZvLm1lbW9yeS50ZXh0dXJlcyAtLTtcblxuXHRcdFx0fTtcblxuXHRcdFx0dGV4dHVyZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uRGlzcG9zZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHRleHR1cmVEYXRhLnZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgc2l6ZSBvZiB0aGUgZ2l2ZW4gdGV4dHVyZSBhbmQgd3JpdGVzIHRoZSByZXN1bHRcblx0ICogaW50byB0aGUgdGFyZ2V0IHZlY3Rvci4gVGhpcyB2ZWN0b3IgaXMgYWxzbyByZXR1cm5lZCBieSB0aGVcblx0ICogbWV0aG9kLlxuXHQgKlxuXHQgKiBJZiBubyB0ZXh0dXJlIGRhdGEgYXJlIGF2YWlsYWJsZSBmb3IgdGhlIGNvbXB1dGUgeWV0LCB0aGUgbWV0aG9kXG5cdCAqIHJldHVybnMgZGVmYXVsdCBzaXplIHZhbHVlcy5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gY29tcHV0ZSB0aGUgc2l6ZSBmb3IuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSB0YXJnZXQgdmVjdG9yLlxuXHQgKi9cblx0Z2V0U2l6ZSggdGV4dHVyZSwgdGFyZ2V0ID0gX3NpemUgKSB7XG5cblx0XHRsZXQgaW1hZ2UgPSB0ZXh0dXJlLmltYWdlcyA/IHRleHR1cmUuaW1hZ2VzWyAwIF0gOiB0ZXh0dXJlLmltYWdlO1xuXG5cdFx0aWYgKCBpbWFnZSApIHtcblxuXHRcdFx0aWYgKCBpbWFnZS5pbWFnZSAhPT0gdW5kZWZpbmVkICkgaW1hZ2UgPSBpbWFnZS5pbWFnZTtcblxuXHRcdFx0dGFyZ2V0LndpZHRoID0gaW1hZ2Uud2lkdGggfHwgMTtcblx0XHRcdHRhcmdldC5oZWlnaHQgPSBpbWFnZS5oZWlnaHQgfHwgMTtcblx0XHRcdHRhcmdldC5kZXB0aCA9IHRleHR1cmUuaXNDdWJlVGV4dHVyZSA/IDYgOiAoIGltYWdlLmRlcHRoIHx8IDEgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRhcmdldC53aWR0aCA9IHRhcmdldC5oZWlnaHQgPSB0YXJnZXQuZGVwdGggPSAxO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBudW1iZXIgb2YgbWlwbWFwIGxldmVscyBmb3IgdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgdGV4dHVyZSdzIHdpZHRoLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIHRleHR1cmUncyBoZWlnaHQuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBtaXBtYXAgbGV2ZWxzLlxuXHQgKi9cblx0Z2V0TWlwTGV2ZWxzKCB0ZXh0dXJlLCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0bGV0IG1pcExldmVsQ291bnQ7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm1pcG1hcHMgKSB7XG5cblx0XHRcdFx0bWlwTGV2ZWxDb3VudCA9IHRleHR1cmUubWlwbWFwcy5sZW5ndGg7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bWlwTGV2ZWxDb3VudCA9IDE7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pcExldmVsQ291bnQgPSBNYXRoLmZsb29yKCBNYXRoLmxvZzIoIE1hdGgubWF4KCB3aWR0aCwgaGVpZ2h0ICkgKSApICsgMTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBtaXBMZXZlbENvdW50O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHRleHR1cmUgcmVxdWlyZXMgbWlwbWFwcy5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgbWlwbWFwcyBhcmUgcmVxdWlyZWQgb3Igbm90LlxuXHQgKi9cblx0bmVlZHNNaXBtYXBzKCB0ZXh0dXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbnZpcm9ubWVudFRleHR1cmUoIHRleHR1cmUgKSB8fCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgPT09IHRydWUgfHwgdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gdGV4dHVyZSBpcyBhbiBlbnZpcm9ubWVudCBtYXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiB0ZXh0dXJlIGlzIGFuIGVudmlyb25tZW50IG1hcCBvciBub3QuXG5cdCAqL1xuXHRpc0Vudmlyb25tZW50VGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IG1hcHBpbmcgPSB0ZXh0dXJlLm1hcHBpbmc7XG5cblx0XHRyZXR1cm4gKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApIHx8ICggbWFwcGluZyA9PT0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIHx8IG1hcHBpbmcgPT09IEN1YmVSZWZyYWN0aW9uTWFwcGluZyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgaW50ZXJuYWwgcmVzb3VyY2Ugd2hlbiB0aGUgZ2l2ZW4gdGV4dHVyZSBpc24ndFxuXHQgKiByZXF1aXJlZCBhbnltb3JlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBkZXN0cm95LlxuXHQgKi9cblx0X2Rlc3Ryb3lUZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0dGhpcy5iYWNrZW5kLmRlc3Ryb3lTYW1wbGVyKCB0ZXh0dXJlICk7XG5cdFx0dGhpcy5iYWNrZW5kLmRlc3Ryb3lUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHR0aGlzLmRlbGV0ZSggdGV4dHVyZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0dXJlcztcbiIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vbWF0aC9Db2xvci5qcyc7XG5cbi8qKlxuICogQSBmb3VyLWNvbXBvbmVudCB2ZXJzaW9uIG9mIHtAbGluayBDb2xvcn0gd2hpY2ggaXMgaW50ZXJuYWxseVxuICogdXNlZCBieSB0aGUgcmVuZGVyZXIgdG8gcmVwcmVzZW50cyBjbGVhciBjb2xvciB3aXRoIGFscGhhIGFzXG4gKiBvbmUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgQ29sb3JcbiAqL1xuY2xhc3MgQ29sb3I0IGV4dGVuZHMgQ29sb3Ige1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGZvdXItY29tcG9uZW50IGNvbG9yLlxuXHQgKiBZb3UgY2FuIGFsc28gcGFzcyBhIHNpbmdsZSBUSFJFRS5Db2xvciwgaGV4IG9yXG5cdCAqIHN0cmluZyBhcmd1bWVudCB0byB0aGlzIGNvbnN0cnVjdG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtyPTFdIC0gVGhlIHJlZCB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtnPTFdIC0gVGhlIGdyZWVuIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2I9MV0gLSBUaGUgYmx1ZSB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthPTFdIC0gVGhlIGFscGhhIHZhbHVlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHIsIGcsIGIsIGEgPSAxICkge1xuXG5cdFx0c3VwZXIoIHIsIGcsIGIgKTtcblxuXHRcdHRoaXMuYSA9IGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdGVzIHRoZSBkZWZhdWx0IHRvIGhvbm9yIGFscGhhLlxuXHQgKiBZb3UgY2FuIGFsc28gcGFzcyBhIHNpbmdsZSBUSFJFRS5Db2xvciwgaGV4IG9yXG5cdCAqIHN0cmluZyBhcmd1bWVudCB0byB0aGlzIG1ldGhvZC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSByIC0gVGhlIHJlZCB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGcgLSBUaGUgZ3JlZW4gdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBiIC0gVGhlIGJsdWUgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYT0xXSAtIFRoZSBhbHBoYSB2YWx1ZS5cblx0ICogQHJldHVybiB7Q29sb3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG9iamVjdC5cblx0ICovXG5cdHNldCggciwgZywgYiwgYSA9IDEgKSB7XG5cblx0XHR0aGlzLmEgPSBhO1xuXG5cdFx0cmV0dXJuIHN1cGVyLnNldCggciwgZywgYiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCB0byBob25vciBhbHBoYS5cblx0ICpcblx0ICogQHBhcmFtIHtDb2xvcjR9IGNvbG9yIC0gVGhlIGNvbG9yIHRvIGNvcHkuXG5cdCAqIEByZXR1cm4ge0NvbG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyBvYmplY3QuXG5cdCAqL1xuXHRjb3B5KCBjb2xvciApIHtcblxuXHRcdGlmICggY29sb3IuYSAhPT0gdW5kZWZpbmVkICkgdGhpcy5hID0gY29sb3IuYTtcblxuXHRcdHJldHVybiBzdXBlci5jb3B5KCBjb2xvciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCB0byBob25vciBhbHBoYS5cblx0ICpcblx0ICogQHJldHVybiB7Q29sb3I0fSBUaGUgY2xvbmVkIGNvbG9yLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuciwgdGhpcy5nLCB0aGlzLmIsIHRoaXMuYSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2xvcjQ7XG4iLCJpbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IFByb3BlcnR5Tm9kZSBmcm9tICcuL1Byb3BlcnR5Tm9kZS5qcyc7XG5cbi8qKlxuICogU3BlY2lhbCB2ZXJzaW9uIG9mIHtAbGluayBQcm9wZXJ0eU5vZGV9IHdoaWNoIGlzIHVzZWQgZm9yIHBhcmFtZXRlcnMuXG4gKlxuICogQGF1Z21lbnRzIFByb3BlcnR5Tm9kZVxuICovXG5jbGFzcyBQYXJhbWV0ZXJOb2RlIGV4dGVuZHMgUHJvcGVydHlOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1BhcmFtZXRlck5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBwYXJhbWV0ZXIgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5vZGVUeXBlIC0gVGhlIHR5cGUgb2YgdGhlIG5vZGUuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gW25hbWU9bnVsbF0gLSBUaGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyIGluIHRoZSBzaGFkZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZVR5cGUsIG5hbWUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIG5vZGVUeXBlLCBuYW1lICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUGFyYW1ldGVyTm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdGdldEhhc2goKSB7XG5cblx0XHRyZXR1cm4gdGhpcy51dWlkO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5hbWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhcmFtZXRlck5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHBhcmFtZXRlciBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiB0aGUgbm9kZS5cbiAqIEBwYXJhbSB7P3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIHNoYWRlci5cbiAqIEByZXR1cm5zIHtQYXJhbWV0ZXJOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcGFyYW1ldGVyID0gKCB0eXBlLCBuYW1lICkgPT4gbm9kZU9iamVjdCggbmV3IFBhcmFtZXRlck5vZGUoIHR5cGUsIG5hbWUgKSApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IHNlbGVjdCB9IGZyb20gJy4uL21hdGgvQ29uZGl0aW9uYWxOb2RlLmpzJztcbmltcG9ydCB7IFNoYWRlck5vZGUsIG5vZGVQcm94eSwgZ2V0Q3VycmVudFN0YWNrLCBzZXRDdXJyZW50U3RhY2sgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogU3RhY2sgaXMgYSBoZWxwZXIgZm9yIE5vZGVzIHRoYXQgbmVlZCB0byBwcm9kdWNlIHN0YWNrLWJhc2VkIGNvZGUgaW5zdGVhZCBvZiBjb250aW51b3VzIGZsb3cuXG4gKiBUaGV5IGFyZSB1c3VhbGx5IG5lZWRlZCBpbiBjYXNlcyBsaWtlIGBJZmAsIGBFbHNlYC5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBTdGFja05vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1N0YWNrTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHN0YWNrIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P1N0YWNrTm9kZX0gW3BhcmVudD1udWxsXSAtIFRoZSBwYXJlbnQgc3RhY2sgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJlbnQgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIExpc3Qgb2Ygbm9kZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Tm9kZT59XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG91dHB1dCBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm91dHB1dE5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBhcmVudCBzdGFjayBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9TdGFja05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucGFyZW50ID0gcGFyZW50O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgY29uZGl0aW9uYWwgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge0NvbmRpdGlvbmFsTm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fY3VycmVudENvbmQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1N0YWNrTm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdGdldE5vZGVUeXBlKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMub3V0cHV0Tm9kZSA/IHRoaXMub3V0cHV0Tm9kZS5nZXROb2RlVHlwZSggYnVpbGRlciApIDogJ3ZvaWQnO1xuXG5cdH1cblxuXHRnZXRNZW1iZXJUeXBlKCBidWlsZGVyLCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMub3V0cHV0Tm9kZSA/IHRoaXMub3V0cHV0Tm9kZS5nZXRNZW1iZXJUeXBlKCBidWlsZGVyLCBuYW1lICkgOiAndm9pZCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgbm9kZSB0byB0aGlzIHN0YWNrLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSB0byBhZGQuXG5cdCAqIEByZXR1cm4ge1N0YWNrTm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBzdGFjayBub2RlLlxuXHQgKi9cblx0YWRkKCBub2RlICkge1xuXG5cdFx0dGhpcy5ub2Rlcy5wdXNoKCBub2RlICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlcHJlc2VudCBhbiBgaWZgIHN0YXRlbWVudCBpbiBUU0wuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gYm9vbE5vZGUgLSBSZXByZXNlbnRzIHRoZSBjb25kaXRpb24uXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCAtIFRTTCBjb2RlIHdoaWNoIGlzIGV4ZWN1dGVkIGlmIHRoZSBjb25kaXRpb24gZXZhbHVhdGVzIHRvIGB0cnVlYC5cblx0ICogQHJldHVybiB7U3RhY2tOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHN0YWNrIG5vZGUuXG5cdCAqL1xuXHRJZiggYm9vbE5vZGUsIG1ldGhvZCApIHtcblxuXHRcdGNvbnN0IG1ldGhvZE5vZGUgPSBuZXcgU2hhZGVyTm9kZSggbWV0aG9kICk7XG5cdFx0dGhpcy5fY3VycmVudENvbmQgPSBzZWxlY3QoIGJvb2xOb2RlLCBtZXRob2ROb2RlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5hZGQoIHRoaXMuX2N1cnJlbnRDb25kICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXByZXNlbnQgYW4gYGVsc2VpZmAgc3RhdGVtZW50IGluIFRTTC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBib29sTm9kZSAtIFJlcHJlc2VudHMgdGhlIGNvbmRpdGlvbi5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIC0gVFNMIGNvZGUgd2hpY2ggaXMgZXhlY3V0ZWQgaWYgdGhlIGNvbmRpdGlvbiBldmFsdWF0ZXMgdG8gYHRydWVgLlxuXHQgKiBAcmV0dXJuIHtTdGFja05vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc3RhY2sgbm9kZS5cblx0ICovXG5cdEVsc2VJZiggYm9vbE5vZGUsIG1ldGhvZCApIHtcblxuXHRcdGNvbnN0IG1ldGhvZE5vZGUgPSBuZXcgU2hhZGVyTm9kZSggbWV0aG9kICk7XG5cdFx0Y29uc3QgaWZOb2RlID0gc2VsZWN0KCBib29sTm9kZSwgbWV0aG9kTm9kZSApO1xuXG5cdFx0dGhpcy5fY3VycmVudENvbmQuZWxzZU5vZGUgPSBpZk5vZGU7XG5cdFx0dGhpcy5fY3VycmVudENvbmQgPSBpZk5vZGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlcHJlc2VudCBhbiBgZWxzZWAgc3RhdGVtZW50IGluIFRTTC5cblx0ICpcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIC0gVFNMIGNvZGUgd2hpY2ggaXMgZXhlY3V0ZWQgaW4gdGhlIGBlbHNlYCBjYXNlLlxuXHQgKiBAcmV0dXJuIHtTdGFja05vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc3RhY2sgbm9kZS5cblx0ICovXG5cdEVsc2UoIG1ldGhvZCApIHtcblxuXHRcdHRoaXMuX2N1cnJlbnRDb25kLmVsc2VOb2RlID0gbmV3IFNoYWRlck5vZGUoIG1ldGhvZCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGJ1aWxkKCBidWlsZGVyLCAuLi5wYXJhbXMgKSB7XG5cblx0XHRjb25zdCBwcmV2aW91c1N0YWNrID0gZ2V0Q3VycmVudFN0YWNrKCk7XG5cblx0XHRzZXRDdXJyZW50U3RhY2soIHRoaXMgKTtcblxuXHRcdGZvciAoIGNvbnN0IG5vZGUgb2YgdGhpcy5ub2RlcyApIHtcblxuXHRcdFx0bm9kZS5idWlsZCggYnVpbGRlciwgJ3ZvaWQnICk7XG5cblx0XHR9XG5cblx0XHRzZXRDdXJyZW50U3RhY2soIHByZXZpb3VzU3RhY2sgKTtcblxuXHRcdHJldHVybiB0aGlzLm91dHB1dE5vZGUgPyB0aGlzLm91dHB1dE5vZGUuYnVpbGQoIGJ1aWxkZXIsIC4uLnBhcmFtcyApIDogc3VwZXIuYnVpbGQoIGJ1aWxkZXIsIC4uLnBhcmFtcyApO1xuXG5cdH1cblxuXHQvLyBEZXByZWNhdGVkXG5cblx0LyoqXG5cdCAqIEBmdW5jdGlvblxuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSByMTY4LiBVc2Uge0BsaW5rIFN0YWNrTm9kZSNFbHNlfSBpbnN0ZWFkLlxuXHQgKlxuXHQgKiBAcGFyYW0gIHsuLi5hbnl9IHBhcmFtc1xuXHQgKiBAcmV0dXJucyB7U3RhY2tOb2RlfVxuXHQgKi9cblx0ZWxzZSggLi4ucGFyYW1zICkgeyAvLyBAZGVwcmVjYXRlZCwgcjE2OFxuXG5cdFx0Y29uc29sZS53YXJuKCAnVFNMLlN0YWNrTm9kZTogLmVsc2UoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5FbHNlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLkVsc2UoIC4uLnBhcmFtcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgcjE2OC4gVXNlIHtAbGluayBTdGFja05vZGUjRWxzZUlmfSBpbnN0ZWFkLlxuXHQgKlxuXHQgKiBAcGFyYW0gIHsuLi5hbnl9IHBhcmFtc1xuXHQgKiBAcmV0dXJucyB7U3RhY2tOb2RlfVxuXHQgKi9cblx0ZWxzZWlmKCAuLi5wYXJhbXMgKSB7IC8vIEBkZXByZWNhdGVkLCByMTY4XG5cblx0XHRjb25zb2xlLndhcm4oICdUU0wuU3RhY2tOb2RlOiAuZWxzZWlmKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuRWxzZUlmKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLkVsc2VJZiggLi4ucGFyYW1zICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YWNrTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc3RhY2sgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7P1N0YWNrTm9kZX0gW3BhcmVudD1udWxsXSAtIFRoZSBwYXJlbnQgc3RhY2sgbm9kZS5cbiAqIEByZXR1cm5zIHtTdGFja05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBzdGFjayA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBTdGFja05vZGUgKTtcbiIsIlxuaW1wb3J0IE5vZGUgZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IGdldExlbmd0aEZyb21UeXBlIH0gZnJvbSAnLi9Ob2RlVXRpbHMuanMnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGxheW91dCBmb3Igc3RydWN0IG1lbWJlcnMuXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGFuIG9iamVjdCByZXByZXNlbnRpbmcgc3RydWN0IG1lbWJlcnMgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgbWVtYmVyIGxheW91dHMuXG4gKiBFYWNoIG1lbWJlciBsYXlvdXQgaW5jbHVkZXMgdGhlIG1lbWJlcidzIG5hbWUsIHR5cGUsIGFuZCB3aGV0aGVyIGl0IGlzIGF0b21pYy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBzdHJpbmd8T2JqZWN0Pn0gbWVtYmVycyAtIEFuIG9iamVjdCB3aGVyZSBrZXlzIGFyZSBtZW1iZXIgbmFtZXMgYW5kIHZhbHVlcyBhcmUgZWl0aGVyIHR5cGVzIChhcyBzdHJpbmdzKSBvciBvYmplY3RzIHdpdGggdHlwZSBhbmQgYXRvbWljIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7QXJyYXkuPHtuYW1lOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgYXRvbWljOiBib29sZWFufT59IEFuIGFycmF5IG9mIG1lbWJlciBsYXlvdXRzLlxuICovXG5mdW5jdGlvbiBnZXRNZW1iZXJzTGF5b3V0KCBtZW1iZXJzICkge1xuXG5cdHJldHVybiBPYmplY3QuZW50cmllcyggbWVtYmVycyApLm1hcCggKCBbIG5hbWUsIHZhbHVlIF0gKSA9PiB7XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgKSB7XG5cblx0XHRcdHJldHVybiB7IG5hbWUsIHR5cGU6IHZhbHVlLCBhdG9taWM6IGZhbHNlIH07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4geyBuYW1lLCB0eXBlOiB2YWx1ZS50eXBlLCBhdG9taWM6IHZhbHVlLmF0b21pYyB8fCBmYWxzZSB9O1xuXG5cdH0gKTtcblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzdHJ1Y3QgdHlwZSBub2RlIGluIHRoZSBub2RlLWJhc2VkIHN5c3RlbS5cbiAqIFRoaXMgY2xhc3MgaXMgdXNlZCB0byBkZWZpbmUgYW5kIG1hbmFnZSB0aGUgbGF5b3V0IGFuZCB0eXBlcyBvZiBzdHJ1Y3QgbWVtYmVycy5cbiAqIEl0IGV4dGVuZHMgdGhlIGJhc2UgTm9kZSBjbGFzcyBhbmQgcHJvdmlkZXMgbWV0aG9kcyB0byBnZXQgdGhlIGxlbmd0aCBvZiB0aGUgc3RydWN0LFxuICogcmV0cmlldmUgbWVtYmVyIHR5cGVzLCBhbmQgZ2VuZXJhdGUgdGhlIHN0cnVjdCB0eXBlIGZvciBhIGJ1aWxkZXIuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgU3RydWN0VHlwZU5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1N0cnVjdFR5cGVOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgU3RydWN0VHlwZU5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBtZW1iZXJzTGF5b3V0IC0gVGhlIGxheW91dCBvZiB0aGUgbWVtYmVycyBmb3IgdGhlIHN0cnVjdC5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbbmFtZT1udWxsXSAtIFRoZSBvcHRpb25hbCBuYW1lIG9mIHRoZSBzdHJ1Y3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWVtYmVyc0xheW91dCwgbmFtZSA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggJ3N0cnVjdCcgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsYXlvdXQgb2YgdGhlIG1lbWJlcnMgZm9yIHRoZSBzdHJ1Y3Rcblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheS48e25hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nLCBhdG9taWM6IGJvb2xlYW59Pn1cblx0XHQgKi9cblx0XHR0aGlzLm1lbWJlcnNMYXlvdXQgPSBnZXRNZW1iZXJzTGF5b3V0KCBtZW1iZXJzTGF5b3V0ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbmFtZSBvZiB0aGUgc3RydWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU3RydWN0TGF5b3V0Tm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIHN0cnVjdC5cblx0ICogVGhlIGxlbmd0aCBpcyBjYWxjdWxhdGVkIGJ5IHN1bW1pbmcgdGhlIGxlbmd0aHMgb2YgdGhlIHN0cnVjdCdzIG1lbWJlcnMuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhlIHN0cnVjdC5cblx0ICovXG5cdGdldExlbmd0aCgpIHtcblxuXHRcdGxldCBsZW5ndGggPSAwO1xuXG5cdFx0Zm9yICggY29uc3QgbWVtYmVyIG9mIHRoaXMubWVtYmVyc0xheW91dCApIHtcblxuXHRcdFx0bGVuZ3RoICs9IGdldExlbmd0aEZyb21UeXBlKCBtZW1iZXIudHlwZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbmd0aDtcblxuXHR9XG5cblx0Z2V0TWVtYmVyVHlwZSggYnVpbGRlciwgbmFtZSApIHtcblxuXHRcdGNvbnN0IG1lbWJlciA9IHRoaXMubWVtYmVyc0xheW91dC5maW5kKCBtID0+IG0ubmFtZSA9PT0gbmFtZSApO1xuXG5cdFx0cmV0dXJuIG1lbWJlciA/IG1lbWJlci50eXBlIDogJ3ZvaWQnO1xuXG5cdH1cblxuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHN0cnVjdFR5cGUgPSBidWlsZGVyLmdldFN0cnVjdFR5cGVGcm9tTm9kZSggdGhpcywgdGhpcy5tZW1iZXJzTGF5b3V0LCB0aGlzLm5hbWUgKTtcblxuXHRcdHJldHVybiBzdHJ1Y3RUeXBlLm5hbWU7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0YnVpbGRlci5hZGRJbmNsdWRlKCB0aGlzICk7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RydWN0VHlwZU5vZGU7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuL05vZGUuanMnO1xuaW1wb3J0IFN0cnVjdFR5cGVOb2RlIGZyb20gJy4vU3RydWN0VHlwZU5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZU9iamVjdCB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcblxuLyoqXG4gKiBTdHJ1Y3ROb2RlIGFsbG93cyB0byBjcmVhdGUgY3VzdG9tIHN0cnVjdHVyZXMgd2l0aCBtdWx0aXBsZSBtZW1iZXJzLlxuICogVGhpcyBjYW4gYWxzbyBiZSB1c2VkIHRvIGRlZmluZSBzdHJ1Y3R1cmVzIGluIGF0dHJpYnV0ZSBhbmQgdW5pZm9ybSBkYXRhLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBEZWZpbmUgYSBjdXN0b20gc3RydWN0XG4gKiBjb25zdCBCb3VuZGluZ0JveCA9IHN0cnVjdCggeyBtaW46ICd2ZWMzJywgbWF4OiAndmVjMycgfSApO1xuICpcbiAqIC8vIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgc3RydWN0XG4gKiBjb25zdCBiYiA9IEJvdW5kaW5nQm94KCB2ZWMzKCAwICksIHZlYzMoIDEgKSApOyAvLyBzdHlsZSAxXG4gKiBjb25zdCBiYiA9IEJvdW5kaW5nQm94KCB7IG1pbjogdmVjMyggMCApLCBtYXg6IHZlYzMoIDEgKSB9ICk7IC8vIHN0eWxlIDJcbiAqXG4gKiAvLyBBY2Nlc3MgdGhlIHN0cnVjdCBtZW1iZXJzXG4gKiBjb25zdCBtaW4gPSBiYi5nZXQoICdtaW4nICk7XG4gKlxuICogLy8gQXNzaWduIGEgbmV3IHZhbHVlIHRvIGEgbWVtYmVyXG4gKiBtaW4uYXNzaWduKCB2ZWMzKCkgKTtcbiAqIGBgYFxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgU3RydWN0Tm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU3RydWN0Tm9kZSc7XG5cblx0fVxuXG5cdGNvbnN0cnVjdG9yKCBzdHJ1Y3RMYXlvdXROb2RlLCB2YWx1ZXMgKSB7XG5cblx0XHRzdXBlciggJ3ZlYzMnICk7XG5cblx0XHR0aGlzLnN0cnVjdExheW91dE5vZGUgPSBzdHJ1Y3RMYXlvdXROb2RlO1xuXHRcdHRoaXMudmFsdWVzID0gdmFsdWVzO1xuXG5cdFx0dGhpcy5pc1N0cnVjdE5vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLnN0cnVjdExheW91dE5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0Z2V0TWVtYmVyVHlwZSggYnVpbGRlciwgbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLnN0cnVjdExheW91dE5vZGUuZ2V0TWVtYmVyVHlwZSggYnVpbGRlciwgbmFtZSApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IG5vZGVWYXIgPSBidWlsZGVyLmdldFZhckZyb21Ob2RlKCB0aGlzICk7XG5cdFx0Y29uc3Qgc3RydWN0VHlwZSA9IG5vZGVWYXIudHlwZTtcblx0XHRjb25zdCBwcm9wZXJ0eU5hbWUgPSBidWlsZGVyLmdldFByb3BlcnR5TmFtZSggbm9kZVZhciApO1xuXG5cdFx0YnVpbGRlci5hZGRMaW5lRmxvd0NvZGUoIGAkeyBwcm9wZXJ0eU5hbWUgfSA9ICR7IGJ1aWxkZXIuZ2VuZXJhdGVTdHJ1Y3QoIHN0cnVjdFR5cGUsIHRoaXMuc3RydWN0TGF5b3V0Tm9kZS5tZW1iZXJzTGF5b3V0LCB0aGlzLnZhbHVlcyApIH1gLCB0aGlzICk7XG5cblx0XHRyZXR1cm4gbm9kZVZhci5uYW1lO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTdHJ1Y3ROb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBzdHJ1Y3Qgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBtZW1iZXJzTGF5b3V0IC0gVGhlIGxheW91dCBvZiB0aGUgc3RydWN0IG1lbWJlcnMuXG4gKiBAcGFyYW0gez9zdHJpbmd9IFtuYW1lPW51bGxdIC0gVGhlIG5hbWUgb2YgdGhlIHN0cnVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gVGhlIHN0cnVjdCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IHN0cnVjdCA9ICggbWVtYmVyc0xheW91dCwgbmFtZSA9IG51bGwgKSA9PiB7XG5cblx0Y29uc3Qgc3RydWN0TGF5b3V0ID0gbmV3IFN0cnVjdFR5cGVOb2RlKCBtZW1iZXJzTGF5b3V0LCBuYW1lICk7XG5cblx0Y29uc3Qgc3RydWN0ID0gKCAuLi5wYXJhbXMgKSA9PiB7XG5cblx0XHRsZXQgdmFsdWVzID0gbnVsbDtcblxuXHRcdGlmICggcGFyYW1zLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGlmICggcGFyYW1zWyAwIF0uaXNOb2RlICkge1xuXG5cdFx0XHRcdHZhbHVlcyA9IHt9O1xuXG5cdFx0XHRcdGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoIG1lbWJlcnNMYXlvdXQgKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFsdWVzWyBuYW1lc1sgaSBdIF0gPSBwYXJhbXNbIGkgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFsdWVzID0gcGFyYW1zWyAwIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBub2RlT2JqZWN0KCBuZXcgU3RydWN0Tm9kZSggc3RydWN0TGF5b3V0LCB2YWx1ZXMgKSApO1xuXG5cdH07XG5cblx0c3RydWN0LmxheW91dCA9IHN0cnVjdExheW91dDtcblx0c3RydWN0LmlzU3RydWN0ID0gdHJ1ZTtcblxuXHRyZXR1cm4gc3RydWN0O1xuXG59O1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBUaGlzIG5vZGUgY2FuIGJlIHVzZWQgdG8gZGVmaW5lIG11bHRpcGxlIG91dHB1dHMgaW4gYSBzaGFkZXIgcHJvZ3JhbXMuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgT3V0cHV0U3RydWN0Tm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnT3V0cHV0U3RydWN0Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG91dHB1dCBzdHJ1Y3Qgbm9kZS4gVGhlIGNvbnN0cnVjdG9yIGNhbiBiZSBpbnZva2VkIHdpdGggYW5cblx0ICogYXJiaXRyYXJ5IG51bWJlciBvZiBub2RlcyByZXByZXNlbnRpbmcgdGhlIG1lbWJlcnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Li4uTm9kZX0gbWVtYmVycyAtIEEgcGFyYW1ldGVyIGxpc3Qgb2Ygbm9kZXMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggLi4ubWVtYmVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBvZiBub2RlcyB3aGljaCBkZWZpbmVzIHRoZSBvdXRwdXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Tm9kZT59XG5cdFx0ICovXG5cdFx0dGhpcy5tZW1iZXJzID0gbWVtYmVycztcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNPdXRwdXRTdHJ1Y3ROb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBwcm9wZXJ0aWVzID0gYnVpbGRlci5nZXROb2RlUHJvcGVydGllcyggdGhpcyApO1xuXG5cdFx0aWYgKCBwcm9wZXJ0aWVzLm1lbWJlcnNMYXlvdXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgbWVtYmVycyA9IHRoaXMubWVtYmVycztcblx0XHRcdGNvbnN0IG1lbWJlcnNMYXlvdXQgPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbWVtYmVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgbmFtZSA9ICdtJyArIGk7XG5cdFx0XHRcdGNvbnN0IHR5cGUgPSBtZW1iZXJzWyBpIF0uZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdFx0XHRtZW1iZXJzTGF5b3V0LnB1c2goIHsgbmFtZSwgdHlwZSwgaW5kZXg6IGkgfSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHByb3BlcnRpZXMubWVtYmVyc0xheW91dCA9IG1lbWJlcnNMYXlvdXQ7XG5cdFx0XHRwcm9wZXJ0aWVzLnN0cnVjdFR5cGUgPSBidWlsZGVyLmdldE91dHB1dFN0cnVjdFR5cGVGcm9tTm9kZSggdGhpcywgcHJvcGVydGllcy5tZW1iZXJzTGF5b3V0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvcGVydGllcy5zdHJ1Y3RUeXBlLm5hbWU7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgcHJvcGVydHlOYW1lID0gYnVpbGRlci5nZXRPdXRwdXRTdHJ1Y3ROYW1lKCk7XG5cdFx0Y29uc3QgbWVtYmVycyA9IHRoaXMubWVtYmVycztcblxuXHRcdGNvbnN0IHN0cnVjdFByZWZpeCA9IHByb3BlcnR5TmFtZSAhPT0gJycgPyBwcm9wZXJ0eU5hbWUgKyAnLicgOiAnJztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG1lbWJlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzbmlwcGV0ID0gbWVtYmVyc1sgaSBdLmJ1aWxkKCBidWlsZGVyICk7XG5cblx0XHRcdGJ1aWxkZXIuYWRkTGluZUZsb3dDb2RlKCBgJHsgc3RydWN0UHJlZml4IH1tJHsgaSB9ID0gJHsgc25pcHBldCB9YCwgdGhpcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb3BlcnR5TmFtZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgT3V0cHV0U3RydWN0Tm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIG91dHB1dCBzdHJ1Y3Qgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Li4uTm9kZX0gbWVtYmVycyAtIEEgcGFyYW1ldGVyIGxpc3Qgb2Ygbm9kZXMuXG4gKiBAcmV0dXJucyB7T3V0cHV0U3RydWN0Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IG91dHB1dFN0cnVjdCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBPdXRwdXRTdHJ1Y3ROb2RlICk7XG4iLCJpbXBvcnQgT3V0cHV0U3RydWN0Tm9kZSBmcm9tICcuL091dHB1dFN0cnVjdE5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZVByb3h5LCB2ZWM0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIE1SVCB0ZXh0dXJlIGluZGV4IGZvciB0aGUgZ2l2ZW4gbmFtZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFRleHR1cmU+fSB0ZXh0dXJlcyAtIFRoZSB0ZXh0dXJlcyBvZiBhIE1SVC1jb25maWd1cmVkIHJlbmRlciB0YXJnZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBNUlQgdGV4dHVyZSB3aGljaCBpbmRleCBpcyByZXF1ZXN0ZWQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB0ZXh0dXJlIGluZGV4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dHVyZUluZGV4KCB0ZXh0dXJlcywgbmFtZSApIHtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRpZiAoIHRleHR1cmVzWyBpIF0ubmFtZSA9PT0gbmFtZSApIHtcblxuXHRcdFx0cmV0dXJuIGk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiAtIDE7XG5cbn1cblxuLyoqXG4gKiBUaGlzIG5vZGUgY2FuIGJlIHVzZWQgc2V0dXAgYSBNUlQgY29udGV4dCBmb3IgcmVuZGVyaW5nLiBBIHR5cGljYWwgTVJUIHNldHVwIGZvclxuICogcG9zdC1wcm9jZXNzaW5nIGlzIHNob3duIGJlbG93OlxuICogYGBganNcbiAqIGNvbnN0IG1ydE5vZGUgPSBtcnQoIHtcbiAqICAgb3V0cHV0OiBvdXRwdXQsXG4gKiAgIG5vcm1hbDogbm9ybWFsVmlld1xuICogfSApICk7XG4gKiBgYGBcbiAqIFRoZSBNUlQgb3V0cHV0IGlzIGRlZmluZWQgYXMgYSBkaWN0aW9uYXJ5LlxuICpcbiAqIEBhdWdtZW50cyBPdXRwdXRTdHJ1Y3ROb2RlXG4gKi9cbmNsYXNzIE1SVE5vZGUgZXh0ZW5kcyBPdXRwdXRTdHJ1Y3ROb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ01SVE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBvdXRwdXQgc3RydWN0IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgTm9kZT59IG91dHB1dE5vZGVzIC0gVGhlIE1SVCBvdXRwdXRzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG91dHB1dE5vZGVzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSByZXByZXNlbnRpbmcgdGhlIE1SVCBvdXRwdXRzLiBUaGUga2V5XG5cdFx0ICogaXMgdGhlIG5hbWUgb2YgdGhlIG91dHB1dCwgdGhlIHZhbHVlIHRoZSBub2RlIHdoaWNoIHByb2R1Y2VzXG5cdFx0ICogdGhlIG91dHB1dCByZXN1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgTm9kZT59XG5cdFx0ICovXG5cdFx0dGhpcy5vdXRwdXROb2RlcyA9IG91dHB1dE5vZGVzO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01SVE5vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIE1SVCBub2RlIGhhcyBhbiBvdXRwdXQgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgb3V0cHV0LlxuXHQgKiBAcmV0dXJuIHtOb2RlQnVpbGRlcn0gV2hldGhlciB0aGUgTVJUIG5vZGUgaGFzIGFuIG91dHB1dCBmb3IgdGhlIGdpdmVuIG5hbWUgb3Igbm90LlxuXHQgKi9cblx0aGFzKCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMub3V0cHV0Tm9kZXNbIG5hbWUgXSAhPT0gdW5kZWZpbmVkO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgb3V0cHV0IG5vZGUgZm9yIHRoZSBnaXZlbiBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBvdXRwdXQuXG5cdCAqIEByZXR1cm4ge05vZGV9IFRoZSBvdXRwdXQgbm9kZS5cblx0ICovXG5cdGdldCggbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLm91dHB1dE5vZGVzWyBuYW1lIF07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNZXJnZXMgdGhlIG91dHB1dHMgb2YgdGhlIGdpdmVuIE1SVCBub2RlIHdpdGggdGhlIG91dHB1dHMgb2YgdGhpcyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge01SVE5vZGV9IG1ydE5vZGUgLSBUaGUgTVJUIHRvIG1lcmdlLlxuXHQgKiBAcmV0dXJuIHtNUlROb2RlfSBBIG5ldyBNUlQgbm9kZSB3aXRoIG1lcmdlZCBvdXRwdXRzLi5cblx0ICovXG5cdG1lcmdlKCBtcnROb2RlICkge1xuXG5cdFx0Y29uc3Qgb3V0cHV0cyA9IHsgLi4udGhpcy5vdXRwdXROb2RlcywgLi4ubXJ0Tm9kZS5vdXRwdXROb2RlcyB9O1xuXG5cdFx0cmV0dXJuIG1ydCggb3V0cHV0cyApO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IG91dHB1dE5vZGVzID0gdGhpcy5vdXRwdXROb2Rlcztcblx0XHRjb25zdCBtcnQgPSBidWlsZGVyLnJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0Y29uc3QgbWVtYmVycyA9IFtdO1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSBtcnQudGV4dHVyZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIG91dHB1dE5vZGVzICkge1xuXG5cdFx0XHRjb25zdCBpbmRleCA9IGdldFRleHR1cmVJbmRleCggdGV4dHVyZXMsIG5hbWUgKTtcblxuXHRcdFx0bWVtYmVyc1sgaW5kZXggXSA9IHZlYzQoIG91dHB1dE5vZGVzWyBuYW1lIF0gKTtcblxuXHRcdH1cblxuXHRcdHRoaXMubWVtYmVycyA9IG1lbWJlcnM7XG5cblx0XHRyZXR1cm4gc3VwZXIuc2V0dXAoIGJ1aWxkZXIgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTVJUTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgTVJUIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIE5vZGU+fSBvdXRwdXROb2RlcyAtIFRoZSBNUlQgb3V0cHV0cy5cbiAqIEByZXR1cm5zIHtNUlROb2RlfVxuICovXG5leHBvcnQgY29uc3QgbXJ0ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIE1SVE5vZGUgKTtcbiIsImltcG9ydCB7IEZuIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGhhc2ggdmFsdWUgaW4gdGhlIHJhbmdlIGBbMCwgMV1gIGZyb20gdGhlIGdpdmVuIHNlZWQuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBzZWVkIC0gVGhlIHNlZWQuXG4gKiBAcmV0dXJuIHtOb2RlPGZsb2F0Pn0gVGhlIGhhc2ggdmFsdWUuXG4gKi9cbmV4cG9ydCBjb25zdCBoYXNoID0gLypAX19QVVJFX18qLyBGbiggKCBbIHNlZWQgXSApID0+IHtcblxuXHQvLyBUYWtlbiBmcm9tIGh0dHBzOi8vd3d3LnNoYWRlcnRveS5jb20vdmlldy9YbEdjUmgsIG9yaWdpbmFsbHkgZnJvbSBwY2ctcmFuZG9tLm9yZ1xuXG5cdGNvbnN0IHN0YXRlID0gc2VlZC50b1VpbnQoKS5tdWwoIDc0Nzc5NjQwNSApLmFkZCggMjg5MTMzNjQ1MyApO1xuXHRjb25zdCB3b3JkID0gc3RhdGUuc2hpZnRSaWdodCggc3RhdGUuc2hpZnRSaWdodCggMjggKS5hZGQoIDQgKSApLmJpdFhvciggc3RhdGUgKS5tdWwoIDI3NzgwMzczNyApO1xuXHRjb25zdCByZXN1bHQgPSB3b3JkLnNoaWZ0UmlnaHQoIDIyICkuYml0WG9yKCB3b3JkICk7XG5cblx0cmV0dXJuIHJlc3VsdC50b0Zsb2F0KCkubXVsKCAxIC8gMiAqKiAzMiApOyAvLyBDb252ZXJ0IHRvIHJhbmdlIFswLCAxKVxuXG59ICk7XG4iLCJpbXBvcnQgeyBzdWIsIG11bCwgZGl2LCBhZGQgfSBmcm9tICcuL09wZXJhdG9yTm9kZS5qcyc7XG5pbXBvcnQgeyBQSSwgcG93LCBzaW4gfSBmcm9tICcuL01hdGhOb2RlLmpzJztcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmVtYXBzIHRoZSBgWzAsMV1gIGludGVydmFsIGludG8gdGhlIGBbMCwxXWAgaW50ZXJ2YWwuXG4gKiBUaGUgY29ybmVycyBhcmUgbWFwcGVkIHRvIGAwYCBhbmQgdGhlIGNlbnRlciB0byBgMWAuXG4gKiBSZWZlcmVuY2U6IHtAbGluayBodHRwczovL2lxdWlsZXpsZXMub3JnL2FydGljbGVzL2Z1bmN0aW9ucy99LlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0geCAtIFRoZSB2YWx1ZSB0byByZW1hcC5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGsgLSBBbGxvd3MgdG8gY29udHJvbCB0aGUgcmVtYXBwaW5nIGZ1bmN0aW9ucyBzaGFwZSBieSByaXNpbmcgdGhlIHBhcmFib2xhIHRvIGEgcG93ZXIgYGtgLlxuICogQHJldHVybiB7Tm9kZTxmbG9hdD59IFRoZSByZW1hcHBlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHBhcmFib2xhID0gKCB4LCBrICkgPT4gcG93KCBtdWwoIDQuMCwgeC5tdWwoIHN1YiggMS4wLCB4ICkgKSApLCBrICk7XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHJlbWFwcyB0aGUgYFswLDFdYCBpbnRlcnZhbCBpbnRvIHRoZSBgWzAsMV1gIGludGVydmFsLlxuICogRXhwYW5kcyB0aGUgc2lkZXMgYW5kIGNvbXByZXNzZXMgdGhlIGNlbnRlciwgYW5kIGtlZXBzIGAwLjVgIG1hcHBlZCB0byBgMC41YC5cbiAqIFJlZmVyZW5jZToge0BsaW5rIGh0dHBzOi8vaXF1aWxlemxlcy5vcmcvYXJ0aWNsZXMvZnVuY3Rpb25zL30uXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSB4IC0gVGhlIHZhbHVlIHRvIHJlbWFwLlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gayAtIGBrPTFgIGlzIHRoZSBpZGVudGl0eSBjdXJ2ZSxgazwxYCBwcm9kdWNlcyB0aGUgY2xhc3NpYyBgZ2FpbigpYCBzaGFwZSwgYW5kIGBrPjFgIHByb2R1Y2VzIFwic1wiIHNoYXBlZCBjdXJ2ZXMuXG4gKiBAcmV0dXJuIHtOb2RlPGZsb2F0Pn0gVGhlIHJlbWFwcGVkIHZhbHVlLlxuICovXG5leHBvcnQgY29uc3QgZ2FpbiA9ICggeCwgayApID0+IHgubGVzc1RoYW4oIDAuNSApID8gcGFyYWJvbGEoIHgubXVsKCAyLjAgKSwgayApLmRpdiggMi4wICkgOiBzdWIoIDEuMCwgcGFyYWJvbGEoIG11bCggc3ViKCAxLjAsIHggKSwgMi4wICksIGsgKS5kaXYoIDIuMCApICk7XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHJlbWFwcyB0aGUgYFswLDFdYCBpbnRlcnZhbCBpbnRvIHRoZSBgWzAsMV1gIGludGVydmFsLlxuICogQSBnZW5lcmFsaXphdGlvbiBvZiB0aGUgYHBhcmFib2xhKClgLiBLZWVwcyB0aGUgY29ybmVycyBtYXBwZWQgdG8gMCBidXQgYWxsb3dzIHRoZSBjb250cm9sIG9mIHRoZSBzaGFwZSBvbmUgZWl0aGVyIHNpZGUgb2YgdGhlIGN1cnZlLlxuICogUmVmZXJlbmNlOiB7QGxpbmsgaHR0cHM6Ly9pcXVpbGV6bGVzLm9yZy9hcnRpY2xlcy9mdW5jdGlvbnMvfS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IHggLSBUaGUgdmFsdWUgdG8gcmVtYXAuXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBhIC0gRmlyc3QgY29udHJvbCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBiIC0gU2Vjb25kIGNvbnRyb2wgcGFyYW1ldGVyLlxuICogQHJldHVybiB7Tm9kZTxmbG9hdD59IFRoZSByZW1hcHBlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHBjdXJ2ZSA9ICggeCwgYSwgYiApID0+IHBvdyggZGl2KCBwb3coIHgsIGEgKSwgYWRkKCBwb3coIHgsIGEgKSwgcG93KCBzdWIoIDEuMCwgeCApLCBiICkgKSApLCAxLjAgLyBhICk7XG5cbi8qKlxuICogQSBwaGFzZSBzaGlmdGVkIHNpbnVzIGN1cnZlIHRoYXQgc3RhcnRzIGF0IHplcm8gYW5kIGVuZHMgYXQgemVybywgd2l0aCBib3VuY2luZyBiZWhhdmlvci5cbiAqIFJlZmVyZW5jZToge0BsaW5rIGh0dHBzOi8vaXF1aWxlemxlcy5vcmcvYXJ0aWNsZXMvZnVuY3Rpb25zL30uXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSB4IC0gVGhlIHZhbHVlIHRvIGNvbXB1dGUgdGhlIHNpbiBmb3IuXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBrIC0gQ29udHJvbHMgdGhlIGFtb3VudCBvZiBib3VuY2VzLlxuICogQHJldHVybiB7Tm9kZTxmbG9hdD59IFRoZSByZXN1bHQgdmFsdWUuXG4gKi9cbmV4cG9ydCBjb25zdCBzaW5jID0gKCB4LCBrICkgPT4gc2luKCBQSS5tdWwoIGsubXVsKCB4ICkuc3ViKCAxLjAgKSApICkuZGl2KCBQSS5tdWwoIGsubXVsKCB4ICkuc3ViKCAxLjAgKSApICk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vY2FiYmliby9nbHNsLXRyaS1ub2lzZS0zZFxuXG5pbXBvcnQgeyBMb29wIH0gZnJvbSAnLi4vdXRpbHMvTG9vcE5vZGUuanMnO1xuaW1wb3J0IHsgZmxvYXQsIHZlYzMsIEZuIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5jb25zdCB0cmkgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgeCBdICkgPT4ge1xuXG5cdHJldHVybiB4LmZyYWN0KCkuc3ViKCAuNSApLmFicygpO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICd0cmknLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICd4JywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuY29uc3QgdHJpMyA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBwIF0gKSA9PiB7XG5cblx0cmV0dXJuIHZlYzMoIHRyaSggcC56LmFkZCggdHJpKCBwLnkubXVsKCAxLiApICkgKSApLCB0cmkoIHAuei5hZGQoIHRyaSggcC54Lm11bCggMS4gKSApICkgKSwgdHJpKCBwLnkuYWRkKCB0cmkoIHAueC5tdWwoIDEuICkgKSApICkgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAndHJpMycsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncCcsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBub2lzZSB2YWx1ZSBmcm9tIHRoZSBnaXZlbiBwb3NpdGlvbiwgc3BlZWQgYW5kIHRpbWUgcGFyYW1ldGVycy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24uXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBzcGVlZCAtIFRoZSBzcGVlZC5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IHRpbWUgLSBUaGUgdGltZS5cbiAqIEByZXR1cm4ge05vZGU8ZmxvYXQ+fSBUaGUgZ2VuZXJhdGVkIG5vaXNlLlxuICovXG5leHBvcnQgY29uc3QgdHJpTm9pc2UzRCA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBwb3NpdGlvbiwgc3BlZWQsIHRpbWUgXSApID0+IHtcblxuXHRjb25zdCBwID0gdmVjMyggcG9zaXRpb24gKS50b1ZhcigpO1xuXHRjb25zdCB6ID0gZmxvYXQoIDEuNCApLnRvVmFyKCk7XG5cdGNvbnN0IHJ6ID0gZmxvYXQoIDAuMCApLnRvVmFyKCk7XG5cdGNvbnN0IGJwID0gdmVjMyggcCApLnRvVmFyKCk7XG5cblx0TG9vcCggeyBzdGFydDogZmxvYXQoIDAuMCApLCBlbmQ6IGZsb2F0KCAzLjAgKSwgdHlwZTogJ2Zsb2F0JywgY29uZGl0aW9uOiAnPD0nIH0sICgpID0+IHtcblxuXHRcdGNvbnN0IGRnID0gdmVjMyggdHJpMyggYnAubXVsKCAyLjAgKSApICkudG9WYXIoKTtcblx0XHRwLmFkZEFzc2lnbiggZGcuYWRkKCB0aW1lLm11bCggZmxvYXQoIDAuMSApLm11bCggc3BlZWQgKSApICkgKTtcblx0XHRicC5tdWxBc3NpZ24oIDEuOCApO1xuXHRcdHoubXVsQXNzaWduKCAxLjUgKTtcblx0XHRwLm11bEFzc2lnbiggMS4yICk7XG5cblx0XHRjb25zdCB0ID0gZmxvYXQoIHRyaSggcC56LmFkZCggdHJpKCBwLnguYWRkKCB0cmkoIHAueSApICkgKSApICkgKS50b1ZhcigpO1xuXHRcdHJ6LmFkZEFzc2lnbiggdC5kaXYoIHogKSApO1xuXHRcdGJwLmFkZEFzc2lnbiggMC4xNCApO1xuXG5cdH0gKTtcblxuXHRyZXR1cm4gcno7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ3RyaU5vaXNlM0QnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwb3NpdGlvbicsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ3NwZWVkJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ3RpbWUnLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xDb3JlLmpzJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGFsbG93cyB0byBkZWZpbmUgbXVsdGlwbGUgb3ZlcmxvYWRlZCB2ZXJzaW9uc1xuICogb2YgdGhlIHNhbWUgZnVuY3Rpb24uIERlcGVuZGluZyBvbiB0aGUgcGFyYW1ldGVycyBvZiB0aGUgZnVuY3Rpb25cbiAqIGNhbGwsIHRoZSBub2RlIHBpY2tzIHRoZSBiZXN0LWZpdCBvdmVybG9hZGVkIHZlcnNpb24uXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgRnVuY3Rpb25PdmVybG9hZGluZ05vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0Z1bmN0aW9uT3ZlcmxvYWRpbmdOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZnVuY3Rpb24gb3ZlcmxvYWRpbmcgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxGdW5jdGlvbj59IGZ1bmN0aW9uTm9kZXMgLSBBcnJheSBvZiBgRm5gIGZ1bmN0aW9uIGRlZmluaXRpb25zLlxuXHQgKiBAcGFyYW0gey4uLk5vZGV9IHBhcmFtZXRlcnNOb2RlcyAtIEEgbGlzdCBvZiBwYXJhbWV0ZXIgbm9kZXMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggZnVuY3Rpb25Ob2RlcyA9IFtdLCAuLi5wYXJhbWV0ZXJzTm9kZXMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogQXJyYXkgb2YgYEZuYCBmdW5jdGlvbiBkZWZpbml0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxGdW5jdGlvbj59XG5cdFx0ICovXG5cdFx0dGhpcy5mdW5jdGlvbk5vZGVzID0gZnVuY3Rpb25Ob2RlcztcblxuXHRcdC8qKlxuXHRcdCAqIEEgbGlzdCBvZiBwYXJhbWV0ZXIgbm9kZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Tm9kZT59XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJhbWV0ZXJzTm9kZXMgPSBwYXJhbWV0ZXJzTm9kZXM7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2VsZWN0ZWQgb3ZlcmxvYWRlZCBmdW5jdGlvbiBjYWxsLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7U2hhZGVyQ2FsbE5vZGVJbnRlcm5hbH1cblx0XHQgKi9cblx0XHR0aGlzLl9jYW5kaWRhdGVGbkNhbGwgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBub2RlIGlzIG1hcmtlZCBhcyBnbG9iYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5nbG9iYWwgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgb3ZlcndyaXR0ZW4gc2luY2UgdGhlIG5vZGUgdHlwZSBpcyBpbmZlcnJlZCBmcm9tXG5cdCAqIHRoZSBmdW5jdGlvbidzIHJldHVybiB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmZ1bmN0aW9uTm9kZXNbIDAgXS5zaGFkZXJOb2RlLmxheW91dC50eXBlO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IHBhcmFtcyA9IHRoaXMucGFyYW1ldGVyc05vZGVzO1xuXG5cdFx0bGV0IGNhbmRpZGF0ZUZuQ2FsbCA9IHRoaXMuX2NhbmRpZGF0ZUZuQ2FsbDtcblxuXHRcdGlmICggY2FuZGlkYXRlRm5DYWxsID09PSBudWxsICkge1xuXG5cdFx0XHRsZXQgY2FuZGlkYXRlRm4gPSBudWxsO1xuXHRcdFx0bGV0IGNhbmRpZGF0ZVNjb3JlID0gLSAxO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBmdW5jdGlvbk5vZGUgb2YgdGhpcy5mdW5jdGlvbk5vZGVzICkge1xuXG5cdFx0XHRcdGNvbnN0IHNoYWRlck5vZGUgPSBmdW5jdGlvbk5vZGUuc2hhZGVyTm9kZTtcblx0XHRcdFx0Y29uc3QgbGF5b3V0ID0gc2hhZGVyTm9kZS5sYXlvdXQ7XG5cblx0XHRcdFx0aWYgKCBsYXlvdXQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdGdW5jdGlvbk92ZXJsb2FkaW5nTm9kZTogRnVuY3Rpb25Ob2RlIG11c3QgYmUgYSBsYXlvdXQuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBpbnB1dHMgPSBsYXlvdXQuaW5wdXRzO1xuXG5cdFx0XHRcdGlmICggcGFyYW1zLmxlbmd0aCA9PT0gaW5wdXRzLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdGxldCBzY29yZSA9IDA7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBwYXJhbSA9IHBhcmFtc1sgaSBdO1xuXHRcdFx0XHRcdFx0Y29uc3QgaW5wdXQgPSBpbnB1dHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCBwYXJhbS5nZXROb2RlVHlwZSggYnVpbGRlciApID09PSBpbnB1dC50eXBlICkge1xuXG5cdFx0XHRcdFx0XHRcdHNjb3JlICsrO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHNjb3JlID0gMDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBzY29yZSA+IGNhbmRpZGF0ZVNjb3JlICkge1xuXG5cdFx0XHRcdFx0XHRjYW5kaWRhdGVGbiA9IGZ1bmN0aW9uTm9kZTtcblx0XHRcdFx0XHRcdGNhbmRpZGF0ZVNjb3JlID0gc2NvcmU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2NhbmRpZGF0ZUZuQ2FsbCA9IGNhbmRpZGF0ZUZuQ2FsbCA9IGNhbmRpZGF0ZUZuKCAuLi5wYXJhbXMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjYW5kaWRhdGVGbkNhbGw7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZ1bmN0aW9uT3ZlcmxvYWRpbmdOb2RlO1xuXG5jb25zdCBvdmVybG9hZGluZ0Jhc2VGbiA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBGdW5jdGlvbk92ZXJsb2FkaW5nTm9kZSApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBmdW5jdGlvbiBvdmVybG9hZGluZyBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtBcnJheTxGdW5jdGlvbj59IGZ1bmN0aW9uTm9kZXMgLSBBcnJheSBvZiBgRm5gIGZ1bmN0aW9uIGRlZmluaXRpb25zLlxuICogQHJldHVybnMge0Z1bmN0aW9uT3ZlcmxvYWRpbmdOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgb3ZlcmxvYWRpbmdGbiA9ICggZnVuY3Rpb25Ob2RlcyApID0+ICggLi4ucGFyYW1zICkgPT4gb3ZlcmxvYWRpbmdCYXNlRm4oIGZ1bmN0aW9uTm9kZXMsIC4uLnBhcmFtcyApO1xuIiwiaW1wb3J0IHsgcmVuZGVyR3JvdXAgfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Hcm91cE5vZGUuanMnO1xuaW1wb3J0IHsgdW5pZm9ybSB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybU5vZGUuanMnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGVsYXBzZWQgdGltZSBpbiBzZWNvbmRzLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtVbmlmb3JtTm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCB0aW1lID0gLypAX19QVVJFX18qLyB1bmlmb3JtKCAwICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICkub25SZW5kZXJVcGRhdGUoICggZnJhbWUgKSA9PiBmcmFtZS50aW1lICk7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgZGVsdGEgdGltZSBpbiBzZWNvbmRzLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtVbmlmb3JtTm9kZTxmbG9hdD59XG4gKi9cbmV4cG9ydCBjb25zdCBkZWx0YVRpbWUgPSAvKkBfX1BVUkVfXyovIHVuaWZvcm0oIDAgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKS5vblJlbmRlclVwZGF0ZSggKCBmcmFtZSApID0+IGZyYW1lLmRlbHRhVGltZSApO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGN1cnJlbnQgZnJhbWUgSUQuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1VuaWZvcm1Ob2RlPHVpbnQ+fVxuICovXG5leHBvcnQgY29uc3QgZnJhbWVJZCA9IC8qQF9fUFVSRV9fKi8gdW5pZm9ybSggMCwgJ3VpbnQnICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICkub25SZW5kZXJVcGRhdGUoICggZnJhbWUgKSA9PiBmcmFtZS5mcmFtZUlkICk7XG5cbi8vIERlcHJlY2F0ZWRcblxuLyoqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBkZXByZWNhdGVkIHNpbmNlIHIxNzAuIFVzZSB7QGxpbmsgdGltZX0gaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW3RpbWVTY2FsZT0xXSAtIFRoZSB0aW1lIHNjYWxlLlxuICogQHJldHVybnMge1VuaWZvcm1Ob2RlPGZsb2F0Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHRpbWVyTG9jYWwgPSAoIHRpbWVTY2FsZSA9IDEgKSA9PiB7IC8vIEBkZXByZWNhdGVkLCByMTcwXG5cblx0Y29uc29sZS53YXJuKCAnVFNMOiB0aW1lckxvY2FsKCkgaXMgZGVwcmVjYXRlZC4gVXNlIFwidGltZVwiIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gdGltZS5tdWwoIHRpbWVTY2FsZSApO1xuXG59O1xuXG4vKipcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQGRlcHJlY2F0ZWQgc2luY2UgcjE3MC4gVXNlIHtAbGluayB0aW1lfSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZVNjYWxlPTFdIC0gVGhlIHRpbWUgc2NhbGUuXG4gKiBAcmV0dXJucyB7VW5pZm9ybU5vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgdGltZXJHbG9iYWwgPSAoIHRpbWVTY2FsZSA9IDEgKSA9PiB7IC8vIEBkZXByZWNhdGVkLCByMTcwXG5cblx0Y29uc29sZS53YXJuKCAnVFNMOiB0aW1lckdsb2JhbCgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBcInRpbWVcIiBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHRpbWUubXVsKCB0aW1lU2NhbGUgKTtcblxufTtcblxuLyoqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBkZXByZWNhdGVkIHNpbmNlIHIxNzAuIFVzZSB7QGxpbmsgZGVsdGFUaW1lfSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZVNjYWxlPTFdIC0gVGhlIHRpbWUgc2NhbGUuXG4gKiBAcmV0dXJucyB7VW5pZm9ybU5vZGU8ZmxvYXQ+fVxuICovXG5leHBvcnQgY29uc3QgdGltZXJEZWx0YSA9ICggdGltZVNjYWxlID0gMSApID0+IHsgLy8gQGRlcHJlY2F0ZWQsIHIxNzBcblxuXHRjb25zb2xlLndhcm4oICdUU0w6IHRpbWVyRGVsdGEoKSBpcyBkZXByZWNhdGVkLiBVc2UgXCJkZWx0YVRpbWVcIiBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIGRlbHRhVGltZS5tdWwoIHRpbWVTY2FsZSApO1xuXG59O1xuIiwiaW1wb3J0IHsgRm4sIHZlYzIgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyByb3RhdGUgfSBmcm9tICcuL1JvdGF0ZU5vZGUuanMnO1xuXG4vKipcbiAqIFJvdGF0ZXMgdGhlIGdpdmVuIHV2IGNvb3JkaW5hdGVzIGFyb3VuZCBhIGNlbnRlciBwb2ludFxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzI+fSB1diAtIFRoZSB1diBjb29yZGluYXRlcy5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IHJvdGF0aW9uIC0gVGhlIHJvdGF0aW9uIGRlZmluZWQgaW4gcmFkaWFucy5cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyPn0gY2VudGVyIC0gVGhlIGNlbnRlciBvZiByb3RhdGlvblxuICogQHJldHVybiB7Tm9kZTx2ZWMyPn0gVGhlIHJvdGF0ZWQgdXYgY29vcmRpbmF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCByb3RhdGVVViA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyB1diwgcm90YXRpb24sIGNlbnRlciA9IHZlYzIoIDAuNSApIF0gKSA9PiB7XG5cblx0cmV0dXJuIHJvdGF0ZSggdXYuc3ViKCBjZW50ZXIgKSwgcm90YXRpb24gKS5hZGQoIGNlbnRlciApO1xuXG59ICk7XG5cbi8qKlxuICogQXBwbGllcyBhIHNwaGVyaWNhbCB3YXJwaW5nIGVmZmVjdCB0byB0aGUgZ2l2ZW4gdXYgY29vcmRpbmF0ZXMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMj59IHV2IC0gVGhlIHV2IGNvb3JkaW5hdGVzLlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gc3RyZW5ndGggLSBUaGUgc3RyZW5ndGggb2YgdGhlIGVmZmVjdC5cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyPn0gY2VudGVyIC0gVGhlIGNlbnRlciBwb2ludFxuICogQHJldHVybiB7Tm9kZTx2ZWMyPn0gVGhlIHVwZGF0ZWQgdXYgY29vcmRpbmF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBzcGhlcml6ZVVWID0gLypAX19QVVJFX18qLyBGbiggKCBbIHV2LCBzdHJlbmd0aCwgY2VudGVyID0gdmVjMiggMC41ICkgXSApID0+IHtcblxuXHRjb25zdCBkZWx0YSA9IHV2LnN1YiggY2VudGVyICk7XG5cdGNvbnN0IGRlbHRhMiA9IGRlbHRhLmRvdCggZGVsdGEgKTtcblx0Y29uc3QgZGVsdGE0ID0gZGVsdGEyLm11bCggZGVsdGEyICk7XG5cdGNvbnN0IGRlbHRhT2Zmc2V0ID0gZGVsdGE0Lm11bCggc3RyZW5ndGggKTtcblxuXHRyZXR1cm4gdXYuYWRkKCBkZWx0YS5tdWwoIGRlbHRhT2Zmc2V0ICkgKTtcblxufSApO1xuIiwiaW1wb3J0IHsgbW9kZWxXb3JsZE1hdHJpeCB9IGZyb20gJy4uL2FjY2Vzc29ycy9Nb2RlbE5vZGUuanMnO1xuaW1wb3J0IHsgY2FtZXJhVmlld01hdHJpeCwgY2FtZXJhUHJvamVjdGlvbk1hdHJpeCB9IGZyb20gJy4uL2FjY2Vzc29ycy9DYW1lcmEuanMnO1xuaW1wb3J0IHsgcG9zaXRpb25Mb2NhbCB9IGZyb20gJy4uL2FjY2Vzc29ycy9Qb3NpdGlvbi5qcyc7XG5pbXBvcnQgeyBGbiwgZGVmaW5lZCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGFjaGlldmUgYSBiaWxsYm9hcmRpbmcgYmVoYXZpb3IgZm9yIGZsYXQgbWVzaGVzLiBUaGF0IG1lYW5zIHRoZXkgYXJlXG4gKiBvcmllbnRlZCBhbHdheXMgdG93YXJkcyB0aGUgY2FtZXJhLlxuICpcbiAqIGBgYGpzXG4gKiBtYXRlcmlhbC52ZXJ0ZXhOb2RlID0gYmlsbGJvYXJkaW5nKCk7XG4gKiBgYGBcbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gez9Ob2RlPHZlYzM+fSBbY29uZmlnLnBvc2l0aW9uPW51bGxdIC0gQ2FuIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSB2ZXJ0ZXggcG9zaXRpb25zIGluIHdvcmxkIHNwYWNlLlxuICogQHBhcmFtIHtib29sZWFufSBbY29uZmlnLmhvcml6b250YWw9dHJ1ZV0gLSBXaGV0aGVyIHRvIGZvbGxvdyB0aGUgY2FtZXJhIHJvdGF0aW9uIGhvcml6b250YWxseSBvciBub3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtjb25maWcudmVydGljYWw9ZmFsc2VdIC0gV2hldGhlciB0byBmb2xsb3cgdGhlIGNhbWVyYSByb3RhdGlvbiB2ZXJ0aWNhbGx5IG9yIG5vdC5cbiAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSB1cGRhdGVkIHZlcnRleCBwb3NpdGlvbiBpbiBjbGlwIHNwYWNlLlxuICovXG5leHBvcnQgY29uc3QgYmlsbGJvYXJkaW5nID0gLypAX19QVVJFX18qLyBGbiggKCB7IHBvc2l0aW9uID0gbnVsbCwgaG9yaXpvbnRhbCA9IHRydWUsIHZlcnRpY2FsID0gZmFsc2UgfSApID0+IHtcblxuXHRsZXQgd29ybGRNYXRyaXg7XG5cblx0aWYgKCBwb3NpdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdHdvcmxkTWF0cml4ID0gbW9kZWxXb3JsZE1hdHJpeC50b1ZhcigpO1xuXHRcdHdvcmxkTWF0cml4WyAzIF1bIDAgXSA9IHBvc2l0aW9uLng7XG5cdFx0d29ybGRNYXRyaXhbIDMgXVsgMSBdID0gcG9zaXRpb24ueTtcblx0XHR3b3JsZE1hdHJpeFsgMyBdWyAyIF0gPSBwb3NpdGlvbi56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHR3b3JsZE1hdHJpeCA9IG1vZGVsV29ybGRNYXRyaXg7XG5cblx0fVxuXG5cdGNvbnN0IG1vZGVsVmlld01hdHJpeCA9IGNhbWVyYVZpZXdNYXRyaXgubXVsKCB3b3JsZE1hdHJpeCApO1xuXG5cdGlmICggZGVmaW5lZCggaG9yaXpvbnRhbCApICkge1xuXG5cdFx0bW9kZWxWaWV3TWF0cml4WyAwIF1bIDAgXSA9IG1vZGVsV29ybGRNYXRyaXhbIDAgXS5sZW5ndGgoKTtcblx0XHRtb2RlbFZpZXdNYXRyaXhbIDAgXVsgMSBdID0gMDtcblx0XHRtb2RlbFZpZXdNYXRyaXhbIDAgXVsgMiBdID0gMDtcblxuXHR9XG5cblx0aWYgKCBkZWZpbmVkKCB2ZXJ0aWNhbCApICkge1xuXG5cdFx0bW9kZWxWaWV3TWF0cml4WyAxIF1bIDAgXSA9IDA7XG5cdFx0bW9kZWxWaWV3TWF0cml4WyAxIF1bIDEgXSA9IG1vZGVsV29ybGRNYXRyaXhbIDEgXS5sZW5ndGgoKTtcblx0XHRtb2RlbFZpZXdNYXRyaXhbIDEgXVsgMiBdID0gMDtcblxuXHR9XG5cblx0bW9kZWxWaWV3TWF0cml4WyAyIF1bIDAgXSA9IDA7XG5cdG1vZGVsVmlld01hdHJpeFsgMiBdWyAxIF0gPSAwO1xuXHRtb2RlbFZpZXdNYXRyaXhbIDIgXVsgMiBdID0gMTtcblxuXHRyZXR1cm4gY2FtZXJhUHJvamVjdGlvbk1hdHJpeC5tdWwoIG1vZGVsVmlld01hdHJpeCApLm11bCggcG9zaXRpb25Mb2NhbCApO1xuXG59ICk7XG4iLCJpbXBvcnQgeyBGbiB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHNjcmVlblVWIH0gZnJvbSAnLi4vZGlzcGxheS9TY3JlZW5Ob2RlLmpzJztcbmltcG9ydCB7IHZpZXdwb3J0RGVwdGhUZXh0dXJlIH0gZnJvbSAnLi4vZGlzcGxheS9WaWV3cG9ydERlcHRoVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgbGluZWFyRGVwdGggfSBmcm9tICcuLi9kaXNwbGF5L1ZpZXdwb3J0RGVwdGhOb2RlLmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWwgdmVyc2lvbiBvZiBhIHNjcmVlbiB1diBmdW5jdGlvbiB0aGF0IGludm9sdmVzIGEgZGVwdGggY29tcGFyaXNvblxuICogd2hlbiBjb21wdXRpbmcgdGhlIGZpbmFsIHV2cy4gVGhlIGZ1bmN0aW9uIG1pdGlnYXRlcyB2aXN1YWwgZXJyb3JzIHdoZW5cbiAqIHVzaW5nIHZpZXdwb3J0IHRleHR1cmUgbm9kZXMgZm9yIHJlZnJhY3Rpb24gcHVycG9zZXMuIFdpdGhvdXQgdGhpcyBmdW5jdGlvblxuICogb2JqZWN0cyBpbiBmcm9udCBvZiBhIHJlZnJhY3RpdmUgc3VyZmFjZSBtaWdodCBhcHBlYXIgb24gdGhlIHJlZnJhY3RpdmUgc3VyZmFjZVxuICogd2hpY2ggaXMgaW5jb3JyZWN0LlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHs/Tm9kZTx2ZWMyPn0gdXYgLSBPcHRpb25hbCB1diBjb29yZGluYXRlcy4gQnkgZGVmYXVsdCBgc2NyZWVuVVZgIGlzIHVzZWQuXG4gKiBAcmV0dXJuIHtOb2RlPHZlYzI+fSBUaGUgdXBkYXRlIHV2IGNvb3JkaW5hdGVzLlxuICovXG5leHBvcnQgY29uc3Qgdmlld3BvcnRTYWZlVVYgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdXYgPSBudWxsIF0gKSA9PiB7XG5cblx0Y29uc3QgZGVwdGggPSBsaW5lYXJEZXB0aCgpO1xuXHRjb25zdCBkZXB0aERpZmYgPSBsaW5lYXJEZXB0aCggdmlld3BvcnREZXB0aFRleHR1cmUoIHV2ICkgKS5zdWIoIGRlcHRoICk7XG5cdGNvbnN0IGZpbmFsVVYgPSBkZXB0aERpZmYubGVzc1RoYW4oIDAgKS5zZWxlY3QoIHNjcmVlblVWLCB1diApO1xuXG5cdHJldHVybiBmaW5hbFVWO1xuXG59ICk7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuaW1wb3J0IHsgdXYgfSBmcm9tICcuLi9hY2Nlc3NvcnMvVVYuanMnO1xuaW1wb3J0IHsgbm9kZVByb3h5LCBmbG9hdCwgdmVjMiB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBDYW4gYmUgdXNlZCB0byBjb21wdXRlIHRleHR1cmUgY29vcmRpbmF0ZXMgZm9yIGFuaW1hdGVkIHNwcml0ZSBzaGVldHMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHV2Tm9kZSA9IHNwcml0ZXNoZWV0VVYoIHZlYzIoIDYsIDYgKSwgdXYoKSwgdGltZS5tdWwoIGFuaW1hdGlvblNwZWVkICkgKTtcbiAqXG4gKiBtYXRlcmlhbC5jb2xvck5vZGUgPSB0ZXh0dXJlKCBzcHJpdGVTaGVldCwgdXZOb2RlICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBTcHJpdGVTaGVldFVWTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU3ByaXRlU2hlZXRVVk5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzcHJpdGUgc2hlZXQgdXYgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlPHZlYzI+fSBjb3VudE5vZGUgLSBUaGUgbm9kZSB0aGF0IGRlZmluZXMgdGhlIG51bWJlciBvZiBzcHJpdGVzIGluIHRoZSB4IGFuZCB5IGRpcmVjdGlvbiAoZS5nIDZ4NikuXG5cdCAqIEBwYXJhbSB7Tm9kZTx2ZWMyPn0gW3V2Tm9kZT11digpXSAtIFRoZSB1diBub2RlLlxuXHQgKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBbZnJhbWVOb2RlPWZsb2F0KCldIC0gVGhlIG5vZGUgdGhhdCBkZWZpbmVzIHRoZSBjdXJyZW50IGZyYW1lL3Nwcml0ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjb3VudE5vZGUsIHV2Tm9kZSA9IHV2KCksIGZyYW1lTm9kZSA9IGZsb2F0KCAwICkgKSB7XG5cblx0XHRzdXBlciggJ3ZlYzInICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB0aGF0IGRlZmluZXMgdGhlIG51bWJlciBvZiBzcHJpdGVzIGluIHRoZSB4IGFuZCB5IGRpcmVjdGlvbiAoZS5nIDZ4NikuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZTx2ZWMyPn1cblx0XHQgKi9cblx0XHR0aGlzLmNvdW50Tm9kZSA9IGNvdW50Tm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1diBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGU8dmVjMj59XG5cdFx0ICovXG5cdFx0dGhpcy51dk5vZGUgPSB1dk5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB0aGF0IGRlZmluZXMgdGhlIGN1cnJlbnQgZnJhbWUvc3ByaXRlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGU8ZmxvYXQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZnJhbWVOb2RlID0gZnJhbWVOb2RlO1xuXG5cdH1cblxuXHRzZXR1cCgpIHtcblxuXHRcdGNvbnN0IHsgZnJhbWVOb2RlLCB1dk5vZGUsIGNvdW50Tm9kZSB9ID0gdGhpcztcblxuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY291bnROb2RlO1xuXG5cdFx0Y29uc3QgZnJhbWVOdW0gPSBmcmFtZU5vZGUubW9kKCB3aWR0aC5tdWwoIGhlaWdodCApICkuZmxvb3IoKTtcblxuXHRcdGNvbnN0IGNvbHVtbiA9IGZyYW1lTnVtLm1vZCggd2lkdGggKTtcblx0XHRjb25zdCByb3cgPSBoZWlnaHQuc3ViKCBmcmFtZU51bS5hZGQoIDEgKS5kaXYoIHdpZHRoICkuY2VpbCgpICk7XG5cblx0XHRjb25zdCBzY2FsZSA9IGNvdW50Tm9kZS5yZWNpcHJvY2FsKCk7XG5cdFx0Y29uc3QgdXZGcmFtZU9mZnNldCA9IHZlYzIoIGNvbHVtbiwgcm93ICk7XG5cblx0XHRyZXR1cm4gdXZOb2RlLmFkZCggdXZGcmFtZU9mZnNldCApLm11bCggc2NhbGUgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3ByaXRlU2hlZXRVVk5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHNwcml0ZSBzaGVldCB1diBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzI+fSBjb3VudE5vZGUgLSBUaGUgbm9kZSB0aGF0IGRlZmluZXMgdGhlIG51bWJlciBvZiBzcHJpdGVzIGluIHRoZSB4IGFuZCB5IGRpcmVjdGlvbiAoZS5nIDZ4NikuXG4gKiBAcGFyYW0ge05vZGU8dmVjMj59IFt1dk5vZGU9dXYoKV0gLSBUaGUgdXYgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IFtmcmFtZU5vZGU9ZmxvYXQoKV0gLSBUaGUgbm9kZSB0aGF0IGRlZmluZXMgdGhlIGN1cnJlbnQgZnJhbWUvc3ByaXRlLlxuICogQHJldHVybnMge1Nwcml0ZVNoZWV0VVZOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgc3ByaXRlc2hlZXRVViA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBTcHJpdGVTaGVldFVWTm9kZSApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IGFkZCB9IGZyb20gJy4uL21hdGgvT3BlcmF0b3JOb2RlLmpzJztcbmltcG9ydCB7IG5vcm1hbExvY2FsIH0gZnJvbSAnLi4vYWNjZXNzb3JzL05vcm1hbC5qcyc7XG5pbXBvcnQgeyBwb3NpdGlvbkxvY2FsIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IHRleHR1cmUgfSBmcm9tICcuLi9hY2Nlc3NvcnMvVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZVByb3h5LCBmbG9hdCwgdmVjMyB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBDYW4gYmUgdXNlZCBmb3IgdHJpcGxhbmFyIHRleHR1cmUgbWFwcGluZy5cbiAqXG4gKiBgYGBqc1xuICogbWF0ZXJpYWwuY29sb3JOb2RlID0gdHJpcGxhbmFyVGV4dHVyZSggdGV4dHVyZSggZGlmZnVzZU1hcCApICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBUcmlwbGFuYXJUZXh0dXJlc05vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1RyaXBsYW5hclRleHR1cmVzTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHRyaXBsYW5hciB0ZXh0dXJlcyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IHRleHR1cmVYTm9kZSAtIEZpcnN0IHRleHR1cmUgbm9kZS5cblx0ICogQHBhcmFtIHs/Tm9kZX0gW3RleHR1cmVZTm9kZT1udWxsXSAtIFNlY29uZCB0ZXh0dXJlIG5vZGUuIFdoZW4gbm90IHNldCwgdGhlIHNoYWRlciB3aWxsIHNhbXBsZSBmcm9tIGB0ZXh0dXJlWE5vZGVgIGluc3RlYWQuXG5cdCAqIEBwYXJhbSB7P05vZGV9IFt0ZXh0dXJlWk5vZGU9bnVsbF0gLSBUaGlyZCB0ZXh0dXJlIG5vZGUuIFdoZW4gbm90IHNldCwgdGhlIHNoYWRlciB3aWxsIHNhbXBsZSBmcm9tIGB0ZXh0dXJlWE5vZGVgIGluc3RlYWQuXG5cdCAqIEBwYXJhbSB7P05vZGU8ZmxvYXQ+fSBbc2NhbGVOb2RlPWZsb2F0KDEpXSAtIFRoZSBzY2FsZSBub2RlLlxuXHQgKiBAcGFyYW0gez9Ob2RlPHZlYzM+fSBbcG9zaXRpb25Ob2RlPXBvc2l0aW9uTG9jYWxdIC0gVmVydGV4IHBvc2l0aW9ucyBpbiBsb2NhbCBzcGFjZS5cblx0ICogQHBhcmFtIHs/Tm9kZTx2ZWMzPn0gW25vcm1hbE5vZGU9bm9ybWFsTG9jYWxdIC0gTm9ybWFscyBpbiBsb2NhbCBzcGFjZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB0ZXh0dXJlWE5vZGUsIHRleHR1cmVZTm9kZSA9IG51bGwsIHRleHR1cmVaTm9kZSA9IG51bGwsIHNjYWxlTm9kZSA9IGZsb2F0KCAxICksIHBvc2l0aW9uTm9kZSA9IHBvc2l0aW9uTG9jYWwsIG5vcm1hbE5vZGUgPSBub3JtYWxMb2NhbCApIHtcblxuXHRcdHN1cGVyKCAndmVjNCcgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEZpcnN0IHRleHR1cmUgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMudGV4dHVyZVhOb2RlID0gdGV4dHVyZVhOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogU2Vjb25kIHRleHR1cmUgbm9kZS4gV2hlbiBub3Qgc2V0LCB0aGUgc2hhZGVyIHdpbGwgc2FtcGxlIGZyb20gYHRleHR1cmVYTm9kZWAgaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy50ZXh0dXJlWU5vZGUgPSB0ZXh0dXJlWU5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlyZCB0ZXh0dXJlIG5vZGUuIFdoZW4gbm90IHNldCwgdGhlIHNoYWRlciB3aWxsIHNhbXBsZSBmcm9tIGB0ZXh0dXJlWE5vZGVgIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudGV4dHVyZVpOb2RlID0gdGV4dHVyZVpOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNjYWxlIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZTxmbG9hdD59XG5cdFx0ICogQGRlZmF1bHQgZmxvYXQoMSlcblx0XHQgKi9cblx0XHR0aGlzLnNjYWxlTm9kZSA9IHNjYWxlTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFZlcnRleCBwb3NpdGlvbnMgaW4gbG9jYWwgc3BhY2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZTx2ZWMzPn1cblx0XHQgKiBAZGVmYXVsdCBwb3NpdGlvbkxvY2FsXG5cdFx0ICovXG5cdFx0dGhpcy5wb3NpdGlvbk5vZGUgPSBwb3NpdGlvbk5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBOb3JtYWxzIGluIGxvY2FsIHNwYWNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGU8dmVjMz59XG5cdFx0ICogQGRlZmF1bHQgbm9ybWFsTG9jYWxcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbE5vZGUgPSBub3JtYWxOb2RlO1xuXG5cdH1cblxuXHRzZXR1cCgpIHtcblxuXHRcdGNvbnN0IHsgdGV4dHVyZVhOb2RlLCB0ZXh0dXJlWU5vZGUsIHRleHR1cmVaTm9kZSwgc2NhbGVOb2RlLCBwb3NpdGlvbk5vZGUsIG5vcm1hbE5vZGUgfSA9IHRoaXM7XG5cblx0XHQvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9rZWlqaXJvL1N0YW5kYXJkVHJpcGxhbmFyXG5cblx0XHQvLyBCbGVuZGluZyBmYWN0b3Igb2YgdHJpcGxhbmFyIG1hcHBpbmdcblx0XHRsZXQgYmYgPSBub3JtYWxOb2RlLmFicygpLm5vcm1hbGl6ZSgpO1xuXHRcdGJmID0gYmYuZGl2KCBiZi5kb3QoIHZlYzMoIDEuMCApICkgKTtcblxuXHRcdC8vIFRyaXBsYW5hciBtYXBwaW5nXG5cdFx0Y29uc3QgdHggPSBwb3NpdGlvbk5vZGUueXoubXVsKCBzY2FsZU5vZGUgKTtcblx0XHRjb25zdCB0eSA9IHBvc2l0aW9uTm9kZS56eC5tdWwoIHNjYWxlTm9kZSApO1xuXHRcdGNvbnN0IHR6ID0gcG9zaXRpb25Ob2RlLnh5Lm11bCggc2NhbGVOb2RlICk7XG5cblx0XHQvLyBCYXNlIGNvbG9yXG5cdFx0Y29uc3QgdGV4dHVyZVggPSB0ZXh0dXJlWE5vZGUudmFsdWU7XG5cdFx0Y29uc3QgdGV4dHVyZVkgPSB0ZXh0dXJlWU5vZGUgIT09IG51bGwgPyB0ZXh0dXJlWU5vZGUudmFsdWUgOiB0ZXh0dXJlWDtcblx0XHRjb25zdCB0ZXh0dXJlWiA9IHRleHR1cmVaTm9kZSAhPT0gbnVsbCA/IHRleHR1cmVaTm9kZS52YWx1ZSA6IHRleHR1cmVYO1xuXG5cdFx0Y29uc3QgY3ggPSB0ZXh0dXJlKCB0ZXh0dXJlWCwgdHggKS5tdWwoIGJmLnggKTtcblx0XHRjb25zdCBjeSA9IHRleHR1cmUoIHRleHR1cmVZLCB0eSApLm11bCggYmYueSApO1xuXHRcdGNvbnN0IGN6ID0gdGV4dHVyZSggdGV4dHVyZVosIHR6ICkubXVsKCBiZi56ICk7XG5cblx0XHRyZXR1cm4gYWRkKCBjeCwgY3ksIGN6ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyaXBsYW5hclRleHR1cmVzTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgdHJpcGxhbmFyIHRleHR1cmVzIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IHRleHR1cmVYTm9kZSAtIEZpcnN0IHRleHR1cmUgbm9kZS5cbiAqIEBwYXJhbSB7P05vZGV9IFt0ZXh0dXJlWU5vZGU9bnVsbF0gLSBTZWNvbmQgdGV4dHVyZSBub2RlLiBXaGVuIG5vdCBzZXQsIHRoZSBzaGFkZXIgd2lsbCBzYW1wbGUgZnJvbSBgdGV4dHVyZVhOb2RlYCBpbnN0ZWFkLlxuICogQHBhcmFtIHs/Tm9kZX0gW3RleHR1cmVaTm9kZT1udWxsXSAtIFRoaXJkIHRleHR1cmUgbm9kZS4gV2hlbiBub3Qgc2V0LCB0aGUgc2hhZGVyIHdpbGwgc2FtcGxlIGZyb20gYHRleHR1cmVYTm9kZWAgaW5zdGVhZC5cbiAqIEBwYXJhbSB7P05vZGU8ZmxvYXQ+fSBbc2NhbGVOb2RlPWZsb2F0KDEpXSAtIFRoZSBzY2FsZSBub2RlLlxuICogQHBhcmFtIHs/Tm9kZTx2ZWMzPn0gW3Bvc2l0aW9uTm9kZT1wb3NpdGlvbkxvY2FsXSAtIFZlcnRleCBwb3NpdGlvbnMgaW4gbG9jYWwgc3BhY2UuXG4gKiBAcGFyYW0gez9Ob2RlPHZlYzM+fSBbbm9ybWFsTm9kZT1ub3JtYWxMb2NhbF0gLSBOb3JtYWxzIGluIGxvY2FsIHNwYWNlLlxuICogQHJldHVybnMge1RyaXBsYW5hclRleHR1cmVzTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRyaXBsYW5hclRleHR1cmVzID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFRyaXBsYW5hclRleHR1cmVzTm9kZSApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSB0cmlwbGFuYXIgdGV4dHVyZXMgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gdGV4dHVyZVhOb2RlIC0gRmlyc3QgdGV4dHVyZSBub2RlLlxuICogQHBhcmFtIHs/Tm9kZX0gW3RleHR1cmVZTm9kZT1udWxsXSAtIFNlY29uZCB0ZXh0dXJlIG5vZGUuIFdoZW4gbm90IHNldCwgdGhlIHNoYWRlciB3aWxsIHNhbXBsZSBmcm9tIGB0ZXh0dXJlWE5vZGVgIGluc3RlYWQuXG4gKiBAcGFyYW0gez9Ob2RlfSBbdGV4dHVyZVpOb2RlPW51bGxdIC0gVGhpcmQgdGV4dHVyZSBub2RlLiBXaGVuIG5vdCBzZXQsIHRoZSBzaGFkZXIgd2lsbCBzYW1wbGUgZnJvbSBgdGV4dHVyZVhOb2RlYCBpbnN0ZWFkLlxuICogQHBhcmFtIHs/Tm9kZTxmbG9hdD59IFtzY2FsZU5vZGU9ZmxvYXQoMSldIC0gVGhlIHNjYWxlIG5vZGUuXG4gKiBAcGFyYW0gez9Ob2RlPHZlYzM+fSBbcG9zaXRpb25Ob2RlPXBvc2l0aW9uTG9jYWxdIC0gVmVydGV4IHBvc2l0aW9ucyBpbiBsb2NhbCBzcGFjZS5cbiAqIEBwYXJhbSB7P05vZGU8dmVjMz59IFtub3JtYWxOb2RlPW5vcm1hbExvY2FsXSAtIE5vcm1hbHMgaW4gbG9jYWwgc3BhY2UuXG4gKiBAcmV0dXJucyB7VHJpcGxhbmFyVGV4dHVyZXNOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdHJpcGxhbmFyVGV4dHVyZSA9ICggLi4ucGFyYW1zICkgPT4gdHJpcGxhbmFyVGV4dHVyZXMoIC4uLnBhcmFtcyApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCBUZXh0dXJlTm9kZSBmcm9tICcuLi9hY2Nlc3NvcnMvVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZU9iamVjdCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IE5vZGVVcGRhdGVUeXBlIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgc2NyZWVuVVYgfSBmcm9tICcuLi9kaXNwbGF5L1NjcmVlbk5vZGUuanMnO1xuXG5pbXBvcnQgeyBIYWxmRmxvYXRUeXBlLCBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIsIFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgUGxhbmUgfSBmcm9tICcuLi8uLi9tYXRoL1BsYW5lLmpzJztcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vLi4vY29yZS9PYmplY3QzRC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yNC5qcyc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IFJlbmRlclRhcmdldCB9IGZyb20gJy4uLy4uL2NvcmUvUmVuZGVyVGFyZ2V0LmpzJztcbmltcG9ydCB7IERlcHRoVGV4dHVyZSB9IGZyb20gJy4uLy4uL3RleHR1cmVzL0RlcHRoVGV4dHVyZS5qcyc7XG5cbmNvbnN0IF9yZWZsZWN0b3JQbGFuZSA9IG5ldyBQbGFuZSgpO1xuY29uc3QgX25vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcmVmbGVjdG9yV29ybGRQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfY2FtZXJhV29ybGRQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcm90YXRpb25NYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2xvb2tBdFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApO1xuY29uc3QgY2xpcFBsYW5lID0gbmV3IFZlY3RvcjQoKTtcblxuY29uc3QgX3ZpZXcgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3RhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcSA9IG5ldyBWZWN0b3I0KCk7XG5cbmNvbnN0IF9zaXplID0gbmV3IFZlY3RvcjIoKTtcblxuY29uc3QgX2RlZmF1bHRSVCA9IG5ldyBSZW5kZXJUYXJnZXQoKTtcbmNvbnN0IF9kZWZhdWx0VVYgPSBzY3JlZW5VVi5mbGlwWCgpO1xuXG5fZGVmYXVsdFJULmRlcHRoVGV4dHVyZSA9IG5ldyBEZXB0aFRleHR1cmUoIDEsIDEgKTtcblxubGV0IF9pblJlZmxlY3RvciA9IGZhbHNlO1xuXG4vKipcbiAqIFRoaXMgbm9kZSBjYW4gYmUgdXNlZCB0byBpbXBsZW1lbnQgbWlycm9yLWxpa2UgZmxhdCByZWZsZWN0aXZlIHN1cmZhY2VzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBncm91bmRSZWZsZWN0b3IgPSByZWZsZWN0b3IoKTtcbiAqIG1hdGVyaWFsLmNvbG9yTm9kZSA9IGdyb3VuZFJlZmxlY3RvcjtcbiAqXG4gKiBjb25zdCBwbGFuZSA9IG5ldyBNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIHBsYW5lLmFkZCggZ3JvdW5kUmVmbGVjdG9yLnRhcmdldCApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIFRleHR1cmVOb2RlXG4gKi9cbmNsYXNzIFJlZmxlY3Rvck5vZGUgZXh0ZW5kcyBUZXh0dXJlTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdSZWZsZWN0b3JOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcmVmbGVjdG9yIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVycz17fV0gLSBBbiBvYmplY3QgaG9sZGluZyBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IFtwYXJhbWV0ZXJzLnRhcmdldD1uZXcgT2JqZWN0M0QoKV0gLSBUaGUgM0Qgb2JqZWN0IHRoZSByZWZsZWN0b3IgaXMgbGlua2VkIHRvLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtZXRlcnMucmVzb2x1dGlvbj0xXSAtIFRoZSByZXNvbHV0aW9uIHNjYWxlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJhbWV0ZXJzLmdlbmVyYXRlTWlwbWFwcz1mYWxzZV0gLSBXaGV0aGVyIG1pcG1hcHMgc2hvdWxkIGJlIGdlbmVyYXRlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtZXRlcnMuYm91bmNlcz10cnVlXSAtIFdoZXRoZXIgcmVmbGVjdG9ycyBjYW4gcmVuZGVyIG90aGVyIHJlZmxlY3RvciBub2RlcyBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtZXRlcnMuZGVwdGg9ZmFsc2VdIC0gV2hldGhlciBkZXB0aCBkYXRhIHNob3VsZCBiZSBnZW5lcmF0ZWQgb3Igbm90LlxuXHQgKiBAcGFyYW0ge1RleHR1cmVOb2RlfSBbcGFyYW1ldGVycy5kZWZhdWx0VGV4dHVyZV0gLSBUaGUgZGVmYXVsdCB0ZXh0dXJlIG5vZGUuXG5cdCAqIEBwYXJhbSB7UmVmbGVjdG9yQmFzZU5vZGV9IFtwYXJhbWV0ZXJzLnJlZmxlY3Rvcl0gLSBUaGUgcmVmbGVjdG9yIGJhc2Ugbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzID0ge30gKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVycy5kZWZhdWx0VGV4dHVyZSB8fCBfZGVmYXVsdFJULnRleHR1cmUsIF9kZWZhdWx0VVYgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCByZWZsZWN0b3IgYmFzZSBub2RlIHdoaWNoIGhvbGRzIHRoZSBhY3R1YWwgaW1wbGVtZW50YXRpb24uXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtSZWZsZWN0b3JCYXNlTm9kZX1cblx0XHQgKiBAZGVmYXVsdCBSZWZsZWN0b3JCYXNlTm9kZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3JlZmxlY3RvckJhc2VOb2RlID0gcGFyYW1ldGVycy5yZWZsZWN0b3IgfHwgbmV3IFJlZmxlY3RvckJhc2VOb2RlKCB0aGlzLCBwYXJhbWV0ZXJzICk7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgaW50ZXJuYWwgZGVwdGggbm9kZS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9kZXB0aE5vZGUgPSBudWxsO1xuXG5cdFx0dGhpcy5zZXRVcGRhdGVNYXRyaXgoIGZhbHNlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgaW50ZXJuYWwgcmVmbGVjdG9yIG5vZGUuXG5cdCAqXG5cdCAqIEB0eXBlIHtSZWZsZWN0b3JCYXNlTm9kZX1cblx0ICovXG5cdGdldCByZWZsZWN0b3IoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fcmVmbGVjdG9yQmFzZU5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBIHJlZmVyZW5jZSB0byAzRCBvYmplY3QgdGhlIHJlZmxlY3RvciBpcyBsaW5rZWQgdG8uXG5cdCAqXG5cdCAqIEB0eXBlIHtPYmplY3QzRH1cblx0ICovXG5cdGdldCB0YXJnZXQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fcmVmbGVjdG9yQmFzZU5vZGUudGFyZ2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBtaXJyb3IncyBkZXB0aC4gVGhhdCBjYW4gYmUgdXNlZFxuXHQgKiB0byBpbXBsZW1lbnQgbW9yZSBhZHZhbmNlZCByZWZsZWN0aW9uIGVmZmVjdHMgbGlrZSBkaXN0YW5jZSBhdHRlbnVhdGlvbi5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIGRlcHRoIG5vZGUuXG5cdCAqL1xuXHRnZXREZXB0aE5vZGUoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2RlcHRoTm9kZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCB0aGlzLl9yZWZsZWN0b3JCYXNlTm9kZS5kZXB0aCAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5SZWZsZWN0b3JOb2RlOiBEZXB0aCBub2RlIGNhbiBvbmx5IGJlIHJlcXVlc3RlZCB3aGVuIHRoZSByZWZsZWN0b3IgaXMgY3JlYXRlZCB3aXRoIHsgZGVwdGg6IHRydWUgfS4gJyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2RlcHRoTm9kZSA9IG5vZGVPYmplY3QoIG5ldyBSZWZsZWN0b3JOb2RlKCB7XG5cdFx0XHRcdGRlZmF1bHRUZXh0dXJlOiBfZGVmYXVsdFJULmRlcHRoVGV4dHVyZSxcblx0XHRcdFx0cmVmbGVjdG9yOiB0aGlzLl9yZWZsZWN0b3JCYXNlTm9kZVxuXHRcdFx0fSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fZGVwdGhOb2RlO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdC8vIGlnbm9yZSBpZiB1c2VkIGluIHBvc3QtcHJvY2Vzc2luZ1xuXHRcdGlmICggISBidWlsZGVyLm9iamVjdC5pc1F1YWRNZXNoICkgdGhpcy5fcmVmbGVjdG9yQmFzZU5vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHRcdHJldHVybiBzdXBlci5zZXR1cCggYnVpbGRlciApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5yZWZsZWN0b3JOb2RlICk7XG5cdFx0dGV4dHVyZS5fcmVmbGVjdG9yQmFzZU5vZGUgPSB0aGlzLl9yZWZsZWN0b3JCYXNlTm9kZTtcblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEhvbGRzIHRoZSBhY3R1YWwgaW1wbGVtZW50YXRpb24gb2YgdGhlIHJlZmxlY3Rvci5cbiAqXG4gKiBUT0RPOiBFeHBsYWluIHdoeSBgUmVmbGVjdG9yQmFzZU5vZGVgLiBPcmlnaW5hbGx5IHRoZSBlbnRpcmUgbG9naWMgd2FzIGltcGxlbWVudGVkXG4gKiBpbiBgUmVmbGVjdG9yTm9kZWAsIHNlZSAjMjk2MTkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFJlZmxlY3RvckJhc2VOb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdSZWZsZWN0b3JCYXNlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlZmxlY3RvciBiYXNlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZU5vZGV9IHRleHR1cmVOb2RlIC0gUmVwcmVzZW50cyB0aGUgcmVuZGVyZWQgcmVmbGVjdGlvbnMgYXMgYSB0ZXh0dXJlIG5vZGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVycz17fV0gLSBBbiBvYmplY3QgaG9sZGluZyBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IFtwYXJhbWV0ZXJzLnRhcmdldD1uZXcgT2JqZWN0M0QoKV0gLSBUaGUgM0Qgb2JqZWN0IHRoZSByZWZsZWN0b3IgaXMgbGlua2VkIHRvLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtZXRlcnMucmVzb2x1dGlvbj0xXSAtIFRoZSByZXNvbHV0aW9uIHNjYWxlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJhbWV0ZXJzLmdlbmVyYXRlTWlwbWFwcz1mYWxzZV0gLSBXaGV0aGVyIG1pcG1hcHMgc2hvdWxkIGJlIGdlbmVyYXRlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtZXRlcnMuYm91bmNlcz10cnVlXSAtIFdoZXRoZXIgcmVmbGVjdG9ycyBjYW4gcmVuZGVyIG90aGVyIHJlZmxlY3RvciBub2RlcyBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtZXRlcnMuZGVwdGg9ZmFsc2VdIC0gV2hldGhlciBkZXB0aCBkYXRhIHNob3VsZCBiZSBnZW5lcmF0ZWQgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHRleHR1cmVOb2RlLCBwYXJhbWV0ZXJzID0ge30gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0Y29uc3Qge1xuXHRcdFx0dGFyZ2V0ID0gbmV3IE9iamVjdDNEKCksXG5cdFx0XHRyZXNvbHV0aW9uID0gMSxcblx0XHRcdGdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlLFxuXHRcdFx0Ym91bmNlcyA9IHRydWUsXG5cdFx0XHRkZXB0aCA9IGZhbHNlXG5cdFx0fSA9IHBhcmFtZXRlcnM7XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIHRoZSByZW5kZXJlZCByZWZsZWN0aW9ucyBhcyBhIHRleHR1cmUgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtUZXh0dXJlTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmVOb2RlID0gdGV4dHVyZU5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgM0Qgb2JqZWN0IHRoZSByZWZsZWN0b3IgaXMgbGlua2VkIHRvLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDNEfVxuXHRcdCAqIEBkZWZhdWx0IHtuZXcgT2JqZWN0M0QoKX1cblx0XHQgKi9cblx0XHR0aGlzLnRhcmdldCA9IHRhcmdldDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZXNvbHV0aW9uIHNjYWxlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCB7MX1cblx0XHQgKi9cblx0XHR0aGlzLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciBtaXBtYXBzIHNob3VsZCBiZSBnZW5lcmF0ZWQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQge2ZhbHNlfVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciByZWZsZWN0b3JzIGNhbiByZW5kZXIgb3RoZXIgcmVmbGVjdG9yIG5vZGVzIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHt0cnVlfVxuXHRcdCAqL1xuXHRcdHRoaXMuYm91bmNlcyA9IGJvdW5jZXM7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIGRlcHRoIGRhdGEgc2hvdWxkIGJlIGdlbmVyYXRlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB7ZmFsc2V9XG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGB1cGRhdGVCZWZvcmVUeXBlYCBpcyBzZXQgdG8gYE5vZGVVcGRhdGVUeXBlLlJFTkRFUmAgd2hlbiB7QGxpbmsgUmVmbGVjdG9yQmFzZU5vZGUjYm91bmNlc31cblx0XHQgKiBpcyBgdHJ1ZWAuIE90aGVyd2lzZSBpdCdzIGBOb2RlVXBkYXRlVHlwZS5GUkFNRWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0ICdyZW5kZXInXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVCZWZvcmVUeXBlID0gYm91bmNlcyA/IE5vZGVVcGRhdGVUeXBlLlJFTkRFUiA6IE5vZGVVcGRhdGVUeXBlLkZSQU1FO1xuXG5cdFx0LyoqXG5cdFx0ICogV2VhayBtYXAgZm9yIG1hbmFnaW5nIHZpcnR1YWwgY2FtZXJhcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWFrTWFwPENhbWVyYSwgQ2FtZXJhPn1cblx0XHQgKi9cblx0XHR0aGlzLnZpcnR1YWxDYW1lcmFzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdlYWsgbWFwIGZvciBtYW5hZ2luZyByZW5kZXIgdGFyZ2V0cy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWFrTWFwPENhbWVyYSwgUmVuZGVyVGFyZ2V0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlclRhcmdldHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogRm9yY2UgcmVuZGVyIGV2ZW4gaWYgcmVmbGVjdG9yIGlzIGZhY2luZyBhd2F5IGZyb20gY2FtZXJhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQge2ZhbHNlfVxuXHRcdCAqL1xuXHRcdHRoaXMuZm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHJlc29sdXRpb24gb2YgdGhlIGludGVybmFsIHJlbmRlciB0YXJnZXQuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7UmVuZGVyVGFyZ2V0fSByZW5kZXJUYXJnZXQgLSBUaGUgcmVuZGVyIHRhcmdldCB0byByZXNpemUuXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyIHRoYXQgaXMgdXNlZCB0byBkZXRlcm1pbmUgdGhlIG5ldyBzaXplLlxuXHQgKi9cblx0X3VwZGF0ZVJlc29sdXRpb24oIHJlbmRlclRhcmdldCwgcmVuZGVyZXIgKSB7XG5cblx0XHRjb25zdCByZXNvbHV0aW9uID0gdGhpcy5yZXNvbHV0aW9uO1xuXG5cdFx0cmVuZGVyZXIuZ2V0RHJhd2luZ0J1ZmZlclNpemUoIF9zaXplICk7XG5cblx0XHRyZW5kZXJUYXJnZXQuc2V0U2l6ZSggTWF0aC5yb3VuZCggX3NpemUud2lkdGggKiByZXNvbHV0aW9uICksIE1hdGgucm91bmQoIF9zaXplLmhlaWdodCAqIHJlc29sdXRpb24gKSApO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdHRoaXMuX3VwZGF0ZVJlc29sdXRpb24oIF9kZWZhdWx0UlQsIGJ1aWxkZXIucmVuZGVyZXIgKTtcblxuXHRcdHJldHVybiBzdXBlci5zZXR1cCggYnVpbGRlciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHZpcnR1YWwgY2FtZXJhIGZvciB0aGUgZ2l2ZW4gY2FtZXJhLiBUaGUgdmlydHVhbCBjYW1lcmEgaXMgdXNlZCB0b1xuXHQgKiByZW5kZXIgdGhlIHNjZW5lIGZyb20gdGhlIHJlZmxlY3RvcidzIHZpZXcgc28gY29ycmVjdCByZWZsZWN0aW9ucyBjYW4gYmUgcHJvZHVjZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgc2NlbmUncyBjYW1lcmEuXG5cdCAqIEByZXR1cm4ge0NhbWVyYX0gVGhlIGNvcnJlc3BvbmRpbmcgdmlydHVhbCBjYW1lcmEuXG5cdCAqL1xuXHRnZXRWaXJ0dWFsQ2FtZXJhKCBjYW1lcmEgKSB7XG5cblx0XHRsZXQgdmlydHVhbENhbWVyYSA9IHRoaXMudmlydHVhbENhbWVyYXMuZ2V0KCBjYW1lcmEgKTtcblxuXHRcdGlmICggdmlydHVhbENhbWVyYSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2aXJ0dWFsQ2FtZXJhID0gY2FtZXJhLmNsb25lKCk7XG5cblx0XHRcdHRoaXMudmlydHVhbENhbWVyYXMuc2V0KCBjYW1lcmEsIHZpcnR1YWxDYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB2aXJ0dWFsQ2FtZXJhO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHJlbmRlciB0YXJnZXQgZm9yIHRoZSBnaXZlbiBjYW1lcmEuIFRoZSByZWZsZWN0aW9ucyBhcmUgcmVuZGVyZWRcblx0ICogaW50byB0aGlzIHJlbmRlciB0YXJnZXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgc2NlbmUncyBjYW1lcmEuXG5cdCAqIEByZXR1cm4ge1JlbmRlclRhcmdldH0gVGhlIHJlbmRlciB0YXJnZXQuXG5cdCAqL1xuXHRnZXRSZW5kZXJUYXJnZXQoIGNhbWVyYSApIHtcblxuXHRcdGxldCByZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldHMuZ2V0KCBjYW1lcmEgKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldCA9IG5ldyBSZW5kZXJUYXJnZXQoIDAsIDAsIHsgdHlwZTogSGFsZkZsb2F0VHlwZSB9ICk7XG5cblx0XHRcdGlmICggdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUubWluRmlsdGVyID0gTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyO1xuXHRcdFx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5kZXB0aCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlID0gbmV3IERlcHRoVGV4dHVyZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmVuZGVyVGFyZ2V0cy5zZXQoIGNhbWVyYSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVuZGVyVGFyZ2V0O1xuXG5cdH1cblxuXHR1cGRhdGVCZWZvcmUoIGZyYW1lICkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5jZXMgPT09IGZhbHNlICYmIF9pblJlZmxlY3RvciApIHJldHVybiBmYWxzZTtcblxuXHRcdF9pblJlZmxlY3RvciA9IHRydWU7XG5cblx0XHRjb25zdCB7IHNjZW5lLCBjYW1lcmEsIHJlbmRlcmVyLCBtYXRlcmlhbCB9ID0gZnJhbWU7XG5cdFx0Y29uc3QgeyB0YXJnZXQgfSA9IHRoaXM7XG5cblx0XHRjb25zdCB2aXJ0dWFsQ2FtZXJhID0gdGhpcy5nZXRWaXJ0dWFsQ2FtZXJhKCBjYW1lcmEgKTtcblx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSB0aGlzLmdldFJlbmRlclRhcmdldCggdmlydHVhbENhbWVyYSApO1xuXG5cdFx0cmVuZGVyZXIuZ2V0RHJhd2luZ0J1ZmZlclNpemUoIF9zaXplICk7XG5cblx0XHR0aGlzLl91cGRhdGVSZXNvbHV0aW9uKCByZW5kZXJUYXJnZXQsIHJlbmRlcmVyICk7XG5cblx0XHQvL1xuXG5cdFx0X3JlZmxlY3RvcldvcmxkUG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRfY2FtZXJhV29ybGRQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0X3JvdGF0aW9uTWF0cml4LmV4dHJhY3RSb3RhdGlvbiggdGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRfbm9ybWFsLnNldCggMCwgMCwgMSApO1xuXHRcdF9ub3JtYWwuYXBwbHlNYXRyaXg0KCBfcm90YXRpb25NYXRyaXggKTtcblxuXHRcdF92aWV3LnN1YlZlY3RvcnMoIF9yZWZsZWN0b3JXb3JsZFBvc2l0aW9uLCBfY2FtZXJhV29ybGRQb3NpdGlvbiApO1xuXG5cdFx0Ly8gQXZvaWQgcmVuZGVyaW5nIHdoZW4gcmVmbGVjdG9yIGlzIGZhY2luZyBhd2F5IHVubGVzcyBmb3JjaW5nIGFuIHVwZGF0ZVxuXHRcdGNvbnN0IGlzRmFjaW5nQXdheSA9IF92aWV3LmRvdCggX25vcm1hbCApID4gMDtcblxuXHRcdGlmICggaXNGYWNpbmdBd2F5ID09PSB0cnVlICYmIHRoaXMuZm9yY2VVcGRhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0X3ZpZXcucmVmbGVjdCggX25vcm1hbCApLm5lZ2F0ZSgpO1xuXHRcdF92aWV3LmFkZCggX3JlZmxlY3RvcldvcmxkUG9zaXRpb24gKTtcblxuXHRcdF9yb3RhdGlvbk1hdHJpeC5leHRyYWN0Um90YXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0X2xvb2tBdFBvc2l0aW9uLnNldCggMCwgMCwgLSAxICk7XG5cdFx0X2xvb2tBdFBvc2l0aW9uLmFwcGx5TWF0cml4NCggX3JvdGF0aW9uTWF0cml4ICk7XG5cdFx0X2xvb2tBdFBvc2l0aW9uLmFkZCggX2NhbWVyYVdvcmxkUG9zaXRpb24gKTtcblxuXHRcdF90YXJnZXQuc3ViVmVjdG9ycyggX3JlZmxlY3RvcldvcmxkUG9zaXRpb24sIF9sb29rQXRQb3NpdGlvbiApO1xuXHRcdF90YXJnZXQucmVmbGVjdCggX25vcm1hbCApLm5lZ2F0ZSgpO1xuXHRcdF90YXJnZXQuYWRkKCBfcmVmbGVjdG9yV29ybGRQb3NpdGlvbiApO1xuXG5cdFx0Ly9cblxuXHRcdHZpcnR1YWxDYW1lcmEuY29vcmRpbmF0ZVN5c3RlbSA9IGNhbWVyYS5jb29yZGluYXRlU3lzdGVtO1xuXHRcdHZpcnR1YWxDYW1lcmEucG9zaXRpb24uY29weSggX3ZpZXcgKTtcblx0XHR2aXJ0dWFsQ2FtZXJhLnVwLnNldCggMCwgMSwgMCApO1xuXHRcdHZpcnR1YWxDYW1lcmEudXAuYXBwbHlNYXRyaXg0KCBfcm90YXRpb25NYXRyaXggKTtcblx0XHR2aXJ0dWFsQ2FtZXJhLnVwLnJlZmxlY3QoIF9ub3JtYWwgKTtcblx0XHR2aXJ0dWFsQ2FtZXJhLmxvb2tBdCggX3RhcmdldCApO1xuXG5cdFx0dmlydHVhbENhbWVyYS5uZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0dmlydHVhbENhbWVyYS5mYXIgPSBjYW1lcmEuZmFyO1xuXG5cdFx0dmlydHVhbENhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXHRcdHZpcnR1YWxDYW1lcmEucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0Ly8gTm93IHVwZGF0ZSBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIG5ldyBjbGlwIHBsYW5lLCBpbXBsZW1lbnRpbmcgY29kZSBmcm9tOiBodHRwOi8vd3d3LnRlcmF0aG9uLmNvbS9jb2RlL29ibGlxdWUuaHRtbFxuXHRcdC8vIFBhcGVyIGV4cGxhaW5pbmcgdGhpcyB0ZWNobmlxdWU6IGh0dHA6Ly93d3cudGVyYXRob24uY29tL2xlbmd5ZWwvTGVuZ3llbC1PYmxpcXVlLnBkZlxuXHRcdF9yZWZsZWN0b3JQbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCggX25vcm1hbCwgX3JlZmxlY3RvcldvcmxkUG9zaXRpb24gKTtcblx0XHRfcmVmbGVjdG9yUGxhbmUuYXBwbHlNYXRyaXg0KCB2aXJ0dWFsQ2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0Y2xpcFBsYW5lLnNldCggX3JlZmxlY3RvclBsYW5lLm5vcm1hbC54LCBfcmVmbGVjdG9yUGxhbmUubm9ybWFsLnksIF9yZWZsZWN0b3JQbGFuZS5ub3JtYWwueiwgX3JlZmxlY3RvclBsYW5lLmNvbnN0YW50ICk7XG5cblx0XHRjb25zdCBwcm9qZWN0aW9uTWF0cml4ID0gdmlydHVhbENhbWVyYS5wcm9qZWN0aW9uTWF0cml4O1xuXG5cdFx0X3EueCA9ICggTWF0aC5zaWduKCBjbGlwUGxhbmUueCApICsgcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOCBdICkgLyBwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF07XG5cdFx0X3EueSA9ICggTWF0aC5zaWduKCBjbGlwUGxhbmUueSApICsgcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOSBdICkgLyBwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA1IF07XG5cdFx0X3EueiA9IC0gMS4wO1xuXHRcdF9xLncgPSAoIDEuMCArIHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDEwIF0gKSAvIHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDE0IF07XG5cblx0XHQvLyBDYWxjdWxhdGUgdGhlIHNjYWxlZCBwbGFuZSB2ZWN0b3Jcblx0XHRjbGlwUGxhbmUubXVsdGlwbHlTY2FsYXIoIDEuMCAvIGNsaXBQbGFuZS5kb3QoIF9xICkgKTtcblxuXHRcdGNvbnN0IGNsaXBCaWFzID0gMDtcblxuXHRcdC8vIFJlcGxhY2luZyB0aGUgdGhpcmQgcm93IG9mIHRoZSBwcm9qZWN0aW9uIG1hdHJpeFxuXHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDIgXSA9IGNsaXBQbGFuZS54O1xuXHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDYgXSA9IGNsaXBQbGFuZS55O1xuXHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDEwIF0gPSAoIHJlbmRlcmVyLmNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gKSA/ICggY2xpcFBsYW5lLnogLSBjbGlwQmlhcyApIDogKCBjbGlwUGxhbmUueiArIDEuMCAtIGNsaXBCaWFzICk7XG5cdFx0cHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgMTQgXSA9IGNsaXBQbGFuZS53O1xuXG5cdFx0Ly9cblxuXHRcdHRoaXMudGV4dHVyZU5vZGUudmFsdWUgPSByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdGlmICggdGhpcy5kZXB0aCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy50ZXh0dXJlTm9kZS5nZXREZXB0aE5vZGUoKS52YWx1ZSA9IHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmU7XG5cblx0XHR9XG5cblx0XHRtYXRlcmlhbC52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0Y29uc3QgY3VycmVudE1SVCA9IHJlbmRlcmVyLmdldE1SVCgpO1xuXHRcdGNvbnN0IGN1cnJlbnRBdXRvQ2xlYXIgPSByZW5kZXJlci5hdXRvQ2xlYXI7XG5cblx0XHRyZW5kZXJlci5zZXRNUlQoIG51bGwgKTtcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IHRydWU7XG5cblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCB2aXJ0dWFsQ2FtZXJhICk7XG5cblx0XHRyZW5kZXJlci5zZXRNUlQoIGN1cnJlbnRNUlQgKTtcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBjdXJyZW50QXV0b0NsZWFyO1xuXG5cdFx0bWF0ZXJpYWwudmlzaWJsZSA9IHRydWU7XG5cblx0XHRfaW5SZWZsZWN0b3IgPSBmYWxzZTtcblxuXHRcdHRoaXMuZm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgcmVmbGVjdG9yIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnM9e31dIC0gQW4gb2JqZWN0IGhvbGRpbmcgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHtPYmplY3QzRH0gW3BhcmFtZXRlcnMudGFyZ2V0PW5ldyBPYmplY3QzRCgpXSAtIFRoZSAzRCBvYmplY3QgdGhlIHJlZmxlY3RvciBpcyBsaW5rZWQgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtZXRlcnMucmVzb2x1dGlvbj0xXSAtIFRoZSByZXNvbHV0aW9uIHNjYWxlLlxuICogQHBhcmFtIHtib29sZWFufSBbcGFyYW1ldGVycy5nZW5lcmF0ZU1pcG1hcHM9ZmFsc2VdIC0gV2hldGhlciBtaXBtYXBzIHNob3VsZCBiZSBnZW5lcmF0ZWQgb3Igbm90LlxuICogQHBhcmFtIHtib29sZWFufSBbcGFyYW1ldGVycy5ib3VuY2VzPXRydWVdIC0gV2hldGhlciByZWZsZWN0b3JzIGNhbiByZW5kZXIgb3RoZXIgcmVmbGVjdG9yIG5vZGVzIG9yIG5vdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtZXRlcnMuZGVwdGg9ZmFsc2VdIC0gV2hldGhlciBkZXB0aCBkYXRhIHNob3VsZCBiZSBnZW5lcmF0ZWQgb3Igbm90LlxuICogQHBhcmFtIHtUZXh0dXJlTm9kZX0gW3BhcmFtZXRlcnMuZGVmYXVsdFRleHR1cmVdIC0gVGhlIGRlZmF1bHQgdGV4dHVyZSBub2RlLlxuICogQHBhcmFtIHtSZWZsZWN0b3JCYXNlTm9kZX0gW3BhcmFtZXRlcnMucmVmbGVjdG9yXSAtIFRoZSByZWZsZWN0b3IgYmFzZSBub2RlLlxuICogQHJldHVybnMge1JlZmxlY3Rvck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCByZWZsZWN0b3IgPSAoIHBhcmFtZXRlcnMgKSA9PiBub2RlT2JqZWN0KCBuZXcgUmVmbGVjdG9yTm9kZSggcGFyYW1ldGVycyApICk7XG5cbmV4cG9ydCBkZWZhdWx0IFJlZmxlY3Rvck5vZGU7XG4iLCJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSB9IGZyb20gJy4uLy4uL2NvcmUvQnVmZmVyR2VvbWV0cnkuanMnO1xuaW1wb3J0IHsgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi8uLi9vYmplY3RzL01lc2guanMnO1xuaW1wb3J0IHsgT3J0aG9ncmFwaGljQ2FtZXJhIH0gZnJvbSAnLi4vLi4vY2FtZXJhcy9PcnRob2dyYXBoaWNDYW1lcmEuanMnO1xuXG5jb25zdCBfY2FtZXJhID0gLypAX19QVVJFX18qLyBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCAtIDEsIDEsIDEsIC0gMSwgMCwgMSApO1xuXG4vKipcbiAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgc3BlY2lhbCBnZW9tZXRyeSBpcyB0byBmaWxsIHRoZSBlbnRpcmUgdmlld3BvcnQgd2l0aCBhIHNpbmdsZSB0cmlhbmdsZS5cbiAqXG4gKiBSZWZlcmVuY2U6IHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMjEzNTh9XG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBCdWZmZXJHZW9tZXRyeVxuICovXG5jbGFzcyBRdWFkR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcXVhZCBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSBbZmxpcFk9ZmFsc2VdIC0gV2hldGhlciB0aGUgdXYgY29vcmRpbmF0ZXMgc2hvdWxkIGJlIGZsaXBwZWQgYWxvbmcgdGhlIHZlcnRpY2FsIGF4aXMgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGZsaXBZID0gZmFsc2UgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0Y29uc3QgdXYgPSBmbGlwWSA9PT0gZmFsc2UgPyBbIDAsIC0gMSwgMCwgMSwgMiwgMSBdIDogWyAwLCAyLCAwLCAwLCAyLCAwIF07XG5cblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgLSAxLCAzLCAwLCAtIDEsIC0gMSwgMCwgMywgLSAxLCAwIF0sIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXYsIDIgKSApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfZ2VvbWV0cnkgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWFkR2VvbWV0cnkoKTtcblxuXG4vKipcbiAqIFRoaXMgbW9kdWxlIGlzIGEgaGVscGVyIGZvciBwYXNzZXMgd2hpY2ggbmVlZCB0byByZW5kZXIgYSBmdWxsXG4gKiBzY3JlZW4gZWZmZWN0IHdoaWNoIGlzIHF1aXRlIGNvbW1vbiBpbiBjb250ZXh0IG9mIHBvc3QgcHJvY2Vzc2luZy5cbiAqXG4gKiBUaGUgaW50ZW5kZWQgdXNhZ2UgaXMgdG8gcmV1c2UgYSBzaW5nbGUgcXVhZCBtZXNoIGZvciByZW5kZXJpbmdcbiAqIHN1YnNlcXVlbnQgcGFzc2VzIGJ5IGp1c3QgcmVhc3NpZ25pbmcgdGhlIGBtYXRlcmlhbGAgcmVmZXJlbmNlLlxuICpcbiAqIE5vdGU6IFRoaXMgbW9kdWxlIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBgV2ViR1BVUmVuZGVyZXJgLlxuICpcbiAqIEBhdWdtZW50cyBNZXNoXG4gKi9cbmNsYXNzIFF1YWRNZXNoIGV4dGVuZHMgTWVzaCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcXVhZCBtZXNoLlxuXHQgKlxuXHQgKiBAcGFyYW0gez9NYXRlcmlhbH0gW21hdGVyaWFsPW51bGxdIC0gVGhlIG1hdGVyaWFsIHRvIHJlbmRlciB0aGUgcXVhZCBtZXNoIHdpdGguXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWF0ZXJpYWwgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIF9nZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjYW1lcmEgdG8gcmVuZGVyIHRoZSBxdWFkIG1lc2ggd2l0aC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPcnRob2dyYXBoaWNDYW1lcmF9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy5jYW1lcmEgPSBfY2FtZXJhO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1F1YWRNZXNoID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFzeW5jIHZlcnNpb24gb2YgYHJlbmRlcigpYC5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSByZW5kZXIgaGFzIGJlZW4gZmluaXNoZWQuXG5cdCAqL1xuXHRhc3luYyByZW5kZXJBc3luYyggcmVuZGVyZXIgKSB7XG5cblx0XHRyZXR1cm4gcmVuZGVyZXIucmVuZGVyQXN5bmMoIHRoaXMsIF9jYW1lcmEgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbmRlcnMgdGhlIHF1YWQgbWVzaFxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cblx0ICovXG5cdHJlbmRlciggcmVuZGVyZXIgKSB7XG5cblx0XHRyZW5kZXJlci5yZW5kZXIoIHRoaXMsIF9jYW1lcmEgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVhZE1lc2g7XG4iLCJpbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuaW1wb3J0IFRleHR1cmVOb2RlIGZyb20gJy4uL2FjY2Vzc29ycy9UZXh0dXJlTm9kZS5qcyc7XG5pbXBvcnQgeyBOb2RlVXBkYXRlVHlwZSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IHV2IH0gZnJvbSAnLi4vYWNjZXNzb3JzL1VWLmpzJztcbmltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vbWF0ZXJpYWxzL25vZGVzL05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgUXVhZE1lc2ggZnJvbSAnLi4vLi4vcmVuZGVyZXJzL2NvbW1vbi9RdWFkTWVzaC5qcyc7XG5cbmltcG9ydCB7IFJlbmRlclRhcmdldCB9IGZyb20gJy4uLy4uL2NvcmUvUmVuZGVyVGFyZ2V0LmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgSGFsZkZsb2F0VHlwZSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IF9zaXplID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG4vKipcbiAqIGBSVFROb2RlYCB0YWtlcyBhbm90aGVyIG5vZGUgYW5kIHVzZXMgaXQgd2l0aCBhIGBRdWFkTWVzaGAgdG8gcmVuZGVyIGludG8gYSB0ZXh0dXJlIChSVFQpLlxuICogVGhpcyBtb2R1bGUgaXMgZXNwZWNpYWxseSByZWxldmFudCBpbiBjb250ZXh0IG9mIHBvc3QgcHJvY2Vzc2luZyB3aGVyZSBjZXJ0YWluIG5vZGVzIHJlcXVpcmVcbiAqIHRleHR1cmUgaW5wdXQgZm9yIHRoZWlyIGVmZmVjdHMuIFdpdGggdGhlIGhlbHBlciBmdW5jdGlvbiBgY29udmVydFRvVGV4dHVyZSgpYCB3aGljaCBpcyBiYXNlZFxuICogb24gdGhpcyBtb2R1bGUsIHRoZSBub2RlIHN5c3RlbSBjYW4gYXV0b21hdGljYWxseSBlbnN1cmUgdGV4dHVyZSBpbnB1dCBpZiByZXF1aXJlZC5cbiAqXG4gKiBAYXVnbWVudHMgVGV4dHVyZU5vZGVcbiAqL1xuY2xhc3MgUlRUTm9kZSBleHRlbmRzIFRleHR1cmVOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1JUVE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBSVFQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdG8gcmVuZGVyIGEgdGV4dHVyZSB3aXRoLlxuXHQgKiBAcGFyYW0gez9udW1iZXJ9IFt3aWR0aD1udWxsXSAtIFRoZSB3aWR0aCBvZiB0aGUgaW50ZXJuYWwgcmVuZGVyIHRhcmdldC4gSWYgbm90IHdpZHRoIGlzIGFwcGxpZWQsIHRoZSByZW5kZXIgdGFyZ2V0IGlzIGF1dG9tYXRpY2FsbHkgcmVzaXplZC5cblx0ICogQHBhcmFtIHs/bnVtYmVyfSBbaGVpZ2h0PW51bGxdIC0gVGhlIGhlaWdodCBvZiB0aGUgaW50ZXJuYWwgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt0eXBlOkhhbGZGbG9hdFR5cGV9XSAtIFRoZSBvcHRpb25zIGZvciB0aGUgaW50ZXJuYWwgcmVuZGVyIHRhcmdldC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlLCB3aWR0aCA9IG51bGwsIGhlaWdodCA9IG51bGwsIG9wdGlvbnMgPSB7IHR5cGU6IEhhbGZGbG9hdFR5cGUgfSApIHtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldCA9IG5ldyBSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTtcblxuXHRcdHN1cGVyKCByZW5kZXJUYXJnZXQudGV4dHVyZSwgdXYoKSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdG8gcmVuZGVyIGEgdGV4dHVyZSB3aXRoLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlID0gbm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB3aWR0aCBvZiB0aGUgaW50ZXJuYWwgcmVuZGVyIHRhcmdldC5cblx0XHQgKiBJZiBub3Qgd2lkdGggaXMgYXBwbGllZCwgdGhlIHJlbmRlciB0YXJnZXQgaXMgYXV0b21hdGljYWxseSByZXNpemVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9udW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBoZWlnaHQgb2YgdGhlIGludGVybmFsIHJlbmRlciB0YXJnZXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcGl4ZWwgcmF0aW9cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMucGl4ZWxSYXRpbyA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVuZGVyIHRhcmdldFxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1JlbmRlclRhcmdldH1cblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHRleHR1cmUgcmVxdWlyZXMgYW4gdXBkYXRlIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmVOZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSB0ZXh0dXJlIHNob3VsZCBhdXRvbWF0aWNhbGx5IGJlIHVwZGF0ZWQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB3aGljaCBpcyB1c2VkIHdpdGggdGhlIHF1YWQgbWVzaCBmb3IgUlRULlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fcnR0Tm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW50ZXJuYWwgcXVhZCBtZXNoIGZvciBSVFQuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtRdWFkTWVzaH1cblx0XHQgKi9cblx0XHR0aGlzLl9xdWFkTWVzaCA9IG5ldyBRdWFkTWVzaCggbmV3IE5vZGVNYXRlcmlhbCgpICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYHVwZGF0ZUJlZm9yZVR5cGVgIGlzIHNldCB0byBgTm9kZVVwZGF0ZVR5cGUuUkVOREVSYCBzaW5jZSB0aGUgbm9kZSB1cGRhdGVzXG5cdFx0ICogdGhlIHRleHR1cmUgb25jZSBwZXIgcmVuZGVyIGluIGl0cyB7QGxpbmsgUlRUTm9kZSN1cGRhdGVCZWZvcmV9IG1ldGhvZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ3JlbmRlcidcblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZUJlZm9yZVR5cGUgPSBOb2RlVXBkYXRlVHlwZS5SRU5ERVI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoZSBpbnRlcm5hbCByZW5kZXIgdGFyZ2V0IHNob3VsZCBhdXRvbWF0aWNhbGx5IGJlIHJlc2l6ZWQgb3Igbm90LlxuXHQgKlxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICogQHJlYWRvbmx5XG5cdCAqIEBkZWZhdWx0IHRydWVcblx0ICovXG5cdGdldCBhdXRvU2l6ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLndpZHRoID09PSBudWxsO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdHRoaXMuX3J0dE5vZGUgPSB0aGlzLm5vZGUuY29udGV4dCggYnVpbGRlci5nZXRTaGFyZWRDb250ZXh0KCkgKTtcblx0XHR0aGlzLl9xdWFkTWVzaC5tYXRlcmlhbC5uYW1lID0gJ1JUVCc7XG5cdFx0dGhpcy5fcXVhZE1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHN1cGVyLnNldHVwKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBzaXplIG9mIHRoZSBpbnRlcm5hbCByZW5kZXIgdGFyZ2V0XG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCB0byBzZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgd2lkdGggdG8gc2V0LlxuXHQgKi9cblx0c2V0U2l6ZSggd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuXHRcdGNvbnN0IGVmZmVjdGl2ZVdpZHRoID0gd2lkdGggKiB0aGlzLnBpeGVsUmF0aW87XG5cdFx0Y29uc3QgZWZmZWN0aXZlSGVpZ2h0ID0gaGVpZ2h0ICogdGhpcy5waXhlbFJhdGlvO1xuXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQuc2V0U2l6ZSggZWZmZWN0aXZlV2lkdGgsIGVmZmVjdGl2ZUhlaWdodCApO1xuXG5cdFx0dGhpcy50ZXh0dXJlTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcGl4ZWwgcmF0aW8uIFRoaXMgd2lsbCBhbHNvIHJlc2l6ZSB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHBpeGVsUmF0aW8gLSBUaGUgcGl4ZWwgcmF0aW8gdG8gc2V0LlxuXHQgKi9cblx0c2V0UGl4ZWxSYXRpbyggcGl4ZWxSYXRpbyApIHtcblxuXHRcdHRoaXMucGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG5cblx0XHR0aGlzLnNldFNpemUoIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICk7XG5cblx0fVxuXG5cdHVwZGF0ZUJlZm9yZSggeyByZW5kZXJlciB9ICkge1xuXG5cdFx0aWYgKCB0aGlzLnRleHR1cmVOZWVkc1VwZGF0ZSA9PT0gZmFsc2UgJiYgdGhpcy5hdXRvVXBkYXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdHRoaXMudGV4dHVyZU5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmF1dG9TaXplID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnBpeGVsUmF0aW8gPSByZW5kZXJlci5nZXRQaXhlbFJhdGlvKCk7XG5cblx0XHRcdGNvbnN0IHNpemUgPSByZW5kZXJlci5nZXRTaXplKCBfc2l6ZSApO1xuXG5cdFx0XHR0aGlzLnNldFNpemUoIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dGhpcy5fcXVhZE1lc2gubWF0ZXJpYWwuZnJhZ21lbnROb2RlID0gdGhpcy5fcnR0Tm9kZTtcblxuXHRcdC8vXG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHRoaXMucmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR0aGlzLl9xdWFkTWVzaC5yZW5kZXIoIHJlbmRlcmVyICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRjb25zdCBuZXdOb2RlID0gbmV3IFRleHR1cmVOb2RlKCB0aGlzLnZhbHVlLCB0aGlzLnV2Tm9kZSwgdGhpcy5sZXZlbE5vZGUgKTtcblx0XHRuZXdOb2RlLnNhbXBsZXIgPSB0aGlzLnNhbXBsZXI7XG5cdFx0bmV3Tm9kZS5yZWZlcmVuY2VOb2RlID0gdGhpcztcblxuXHRcdHJldHVybiBuZXdOb2RlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSVFROb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBSVFQgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRvIHJlbmRlciBhIHRleHR1cmUgd2l0aC5cbiAqIEBwYXJhbSB7P251bWJlcn0gW3dpZHRoPW51bGxdIC0gVGhlIHdpZHRoIG9mIHRoZSBpbnRlcm5hbCByZW5kZXIgdGFyZ2V0LiBJZiBub3Qgd2lkdGggaXMgYXBwbGllZCwgdGhlIHJlbmRlciB0YXJnZXQgaXMgYXV0b21hdGljYWxseSByZXNpemVkLlxuICogQHBhcmFtIHs/bnVtYmVyfSBbaGVpZ2h0PW51bGxdIC0gVGhlIGhlaWdodCBvZiB0aGUgaW50ZXJuYWwgcmVuZGVyIHRhcmdldC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17dHlwZTpIYWxmRmxvYXRUeXBlfV0gLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGludGVybmFsIHJlbmRlciB0YXJnZXQuXG4gKiBAcmV0dXJucyB7UlRUTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHJ0dCA9ICggbm9kZSwgLi4ucGFyYW1zICkgPT4gbm9kZU9iamVjdCggbmV3IFJUVE5vZGUoIG5vZGVPYmplY3QoIG5vZGUgKSwgLi4ucGFyYW1zICkgKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNvbnZlcnRpbmcgbm9kZXMgdG8gdGV4dHVyZXMgbm9kZXMuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSB0byByZW5kZXIgYSB0ZXh0dXJlIHdpdGguXG4gKiBAcGFyYW0gez9udW1iZXJ9IFt3aWR0aD1udWxsXSAtIFRoZSB3aWR0aCBvZiB0aGUgaW50ZXJuYWwgcmVuZGVyIHRhcmdldC4gSWYgbm90IHdpZHRoIGlzIGFwcGxpZWQsIHRoZSByZW5kZXIgdGFyZ2V0IGlzIGF1dG9tYXRpY2FsbHkgcmVzaXplZC5cbiAqIEBwYXJhbSB7P251bWJlcn0gW2hlaWdodD1udWxsXSAtIFRoZSBoZWlnaHQgb2YgdGhlIGludGVybmFsIHJlbmRlciB0YXJnZXQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e3R5cGU6SGFsZkZsb2F0VHlwZX1dIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBpbnRlcm5hbCByZW5kZXIgdGFyZ2V0LlxuICogQHJldHVybnMge1JUVE5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0VG9UZXh0dXJlID0gKCBub2RlLCAuLi5wYXJhbXMgKSA9PiB7XG5cblx0aWYgKCBub2RlLmlzVGV4dHVyZU5vZGUgKSByZXR1cm4gbm9kZTtcblx0aWYgKCBub2RlLmlzUGFzc05vZGUgKSByZXR1cm4gbm9kZS5nZXRUZXh0dXJlTm9kZSgpO1xuXG5cdHJldHVybiBydHQoIG5vZGUsIC4uLnBhcmFtcyApO1xuXG59O1xuIiwiaW1wb3J0IHsgYWJzLCBjcm9zcywgZmxvYXQsIEZuLCBub3JtYWxpemUsIGl2ZWMyLCBzdWIsIHZlYzIsIHZlYzMsIHZlYzQgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyB0ZXh0dXJlU2l6ZSB9IGZyb20gJy4uL2FjY2Vzc29ycy9UZXh0dXJlU2l6ZU5vZGUuanMnO1xuaW1wb3J0IHsgdGV4dHVyZUxvYWQgfSBmcm9tICcuLi9hY2Nlc3NvcnMvVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogQ29tcHV0ZXMgYSBwb3NpdGlvbiBpbiB2aWV3IHNwYWNlIGJhc2VkIG9uIGEgZnJhZ21lbnQncyBzY3JlZW4gcG9zaXRpb24gZXhwcmVzc2VkIGFzIHV2IGNvb3JkaW5hdGVzLCB0aGUgZnJhZ21lbnRzXG4gKiBkZXB0aCB2YWx1ZSBhbmQgdGhlIGNhbWVyYSdzIGludmVyc2UgcHJvamVjdGlvbiBtYXRyaXguXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMj59IHNjcmVlblBvc2l0aW9uIC0gVGhlIGZyYWdtZW50J3Mgc2NyZWVuIHBvc2l0aW9uIGV4cHJlc3NlZCBhcyB1diBjb29yZGluYXRlcy5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGRlcHRoIC0gVGhlIGZyYWdtZW50J3MgZGVwdGggdmFsdWUuXG4gKiBAcGFyYW0ge05vZGU8bWF0ND59IHByb2plY3Rpb25NYXRyaXhJbnZlcnNlIC0gVGhlIGNhbWVyYSdzIGludmVyc2UgcHJvamVjdGlvbiBtYXRyaXguXG4gKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgZnJhZ21lbnRzIHBvc2l0aW9uIGluIHZpZXcgc3BhY2UuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRWaWV3UG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgc2NyZWVuUG9zaXRpb24sIGRlcHRoLCBwcm9qZWN0aW9uTWF0cml4SW52ZXJzZSBdLCBidWlsZGVyICkgPT4ge1xuXG5cdGxldCBjbGlwU3BhY2VQb3NpdGlvbjtcblxuXHRpZiAoIGJ1aWxkZXIucmVuZGVyZXIuY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdHNjcmVlblBvc2l0aW9uID0gdmVjMiggc2NyZWVuUG9zaXRpb24ueCwgc2NyZWVuUG9zaXRpb24ueS5vbmVNaW51cygpICkubXVsKCAyLjAgKS5zdWIoIDEuMCApO1xuXHRcdGNsaXBTcGFjZVBvc2l0aW9uID0gdmVjNCggdmVjMyggc2NyZWVuUG9zaXRpb24sIGRlcHRoICksIDEuMCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRjbGlwU3BhY2VQb3NpdGlvbiA9IHZlYzQoIHZlYzMoIHNjcmVlblBvc2l0aW9uLngsIHNjcmVlblBvc2l0aW9uLnkub25lTWludXMoKSwgZGVwdGggKS5tdWwoIDIuMCApLnN1YiggMS4wICksIDEuMCApO1xuXG5cdH1cblxuXHRjb25zdCB2aWV3U3BhY2VQb3NpdGlvbiA9IHZlYzQoIHByb2plY3Rpb25NYXRyaXhJbnZlcnNlLm11bCggY2xpcFNwYWNlUG9zaXRpb24gKSApO1xuXG5cdHJldHVybiB2aWV3U3BhY2VQb3NpdGlvbi54eXouZGl2KCB2aWV3U3BhY2VQb3NpdGlvbi53ICk7XG5cbn0gKTtcblxuLyoqXG4gKiBDb21wdXRlcyBhIHNjcmVlbiBwb3NpdGlvbiBleHByZXNzZWQgYXMgdXYgY29vcmRpbmF0ZXMgYmFzZWQgb24gYSBmcmFnbWVudCdzIHBvc2l0aW9uIGluIHZpZXcgc3BhY2VcbiAqIGFuZCB0aGUgY2FtZXJhJ3MgcHJvamVjdGlvbiBtYXRyaXhcbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gdmlld1Bvc2l0aW9uIC0gVGhlIGZyYWdtZW50cyBwb3NpdGlvbiBpbiB2aWV3IHNwYWNlLlxuICogQHBhcmFtIHtOb2RlPG1hdDQ+fSBwcm9qZWN0aW9uTWF0cml4IC0gVGhlIGNhbWVyYSdzIHByb2plY3Rpb24gbWF0cml4LlxuICogQHJldHVybiB7Tm9kZTx2ZWMyPn0gVGhlIGZyYWdtZW50J3Mgc2NyZWVuIHBvc2l0aW9uIGV4cHJlc3NlZCBhcyB1diBjb29yZGluYXRlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFNjcmVlblBvc2l0aW9uID0gLypAX19QVVJFX18qLyBGbiggKCBbIHZpZXdQb3NpdGlvbiwgcHJvamVjdGlvbk1hdHJpeCBdICkgPT4ge1xuXG5cdGNvbnN0IHNhbXBsZUNsaXBQb3MgPSBwcm9qZWN0aW9uTWF0cml4Lm11bCggdmVjNCggdmlld1Bvc2l0aW9uLCAxLjAgKSApO1xuXHRjb25zdCBzYW1wbGVVdiA9IHNhbXBsZUNsaXBQb3MueHkuZGl2KCBzYW1wbGVDbGlwUG9zLncgKS5tdWwoIDAuNSApLmFkZCggMC41ICkudG9WYXIoKTtcblx0cmV0dXJuIHZlYzIoIHNhbXBsZVV2LngsIHNhbXBsZVV2Lnkub25lTWludXMoKSApO1xuXG59ICk7XG5cbi8qKlxuICogQ29tcHV0ZXMgYSBub3JtYWwgdmVjdG9yIGJhc2VkIG9uIGRlcHRoIGRhdGEuIENhbiBiZSB1c2VkIGFzIGEgZmFsbGJhY2sgd2hlbiBubyBub3JtYWwgcmVuZGVyXG4gKiB0YXJnZXQgaXMgYXZhaWxhYmxlIG9yIGlmIGZsYXQgc3VyZmFjZSBub3JtYWxzIGFyZSByZXF1aXJlZC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyPn0gdXYgLSBUaGUgdGV4dHVyZSBjb29yZGluYXRlLlxuICogQHBhcmFtIHtEZXB0aFRleHR1cmV9IGRlcHRoVGV4dHVyZSAtIFRoZSBkZXB0aCB0ZXh0dXJlLlxuICogQHBhcmFtIHtOb2RlPG1hdDQ+fSBwcm9qZWN0aW9uTWF0cml4SW52ZXJzZSAtIFRoZSBjYW1lcmEncyBpbnZlcnNlIHByb2plY3Rpb24gbWF0cml4LlxuICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIGNvbXB1dGVkIG5vcm1hbCB2ZWN0b3IuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXROb3JtYWxGcm9tRGVwdGggPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdXYsIGRlcHRoVGV4dHVyZSwgcHJvamVjdGlvbk1hdHJpeEludmVyc2UgXSApID0+IHtcblxuXHRjb25zdCBzaXplID0gdGV4dHVyZVNpemUoIHRleHR1cmVMb2FkKCBkZXB0aFRleHR1cmUgKSApO1xuXHRjb25zdCBwID0gaXZlYzIoIHV2Lm11bCggc2l6ZSApICkudG9WYXIoKTtcblxuXHRjb25zdCBjMCA9IHRleHR1cmVMb2FkKCBkZXB0aFRleHR1cmUsIHAgKS50b1ZhcigpO1xuXG5cdGNvbnN0IGwyID0gdGV4dHVyZUxvYWQoIGRlcHRoVGV4dHVyZSwgcC5zdWIoIGl2ZWMyKCAyLCAwICkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IGwxID0gdGV4dHVyZUxvYWQoIGRlcHRoVGV4dHVyZSwgcC5zdWIoIGl2ZWMyKCAxLCAwICkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IHIxID0gdGV4dHVyZUxvYWQoIGRlcHRoVGV4dHVyZSwgcC5hZGQoIGl2ZWMyKCAxLCAwICkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IHIyID0gdGV4dHVyZUxvYWQoIGRlcHRoVGV4dHVyZSwgcC5hZGQoIGl2ZWMyKCAyLCAwICkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IGIyID0gdGV4dHVyZUxvYWQoIGRlcHRoVGV4dHVyZSwgcC5hZGQoIGl2ZWMyKCAwLCAyICkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IGIxID0gdGV4dHVyZUxvYWQoIGRlcHRoVGV4dHVyZSwgcC5hZGQoIGl2ZWMyKCAwLCAxICkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IHQxID0gdGV4dHVyZUxvYWQoIGRlcHRoVGV4dHVyZSwgcC5zdWIoIGl2ZWMyKCAwLCAxICkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IHQyID0gdGV4dHVyZUxvYWQoIGRlcHRoVGV4dHVyZSwgcC5zdWIoIGl2ZWMyKCAwLCAyICkgKSApLnRvVmFyKCk7XG5cblx0Y29uc3QgZGwgPSBhYnMoIHN1YiggZmxvYXQoIDIgKS5tdWwoIGwxICkuc3ViKCBsMiApLCBjMCApICkudG9WYXIoKTtcblx0Y29uc3QgZHIgPSBhYnMoIHN1YiggZmxvYXQoIDIgKS5tdWwoIHIxICkuc3ViKCByMiApLCBjMCApICkudG9WYXIoKTtcblx0Y29uc3QgZGIgPSBhYnMoIHN1YiggZmxvYXQoIDIgKS5tdWwoIGIxICkuc3ViKCBiMiApLCBjMCApICkudG9WYXIoKTtcblx0Y29uc3QgZHQgPSBhYnMoIHN1YiggZmxvYXQoIDIgKS5tdWwoIHQxICkuc3ViKCB0MiApLCBjMCApICkudG9WYXIoKTtcblxuXHRjb25zdCBjZSA9IGdldFZpZXdQb3NpdGlvbiggdXYsIGMwLCBwcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApLnRvVmFyKCk7XG5cblx0Y29uc3QgZHBkeCA9IGRsLmxlc3NUaGFuKCBkciApLnNlbGVjdCggY2Uuc3ViKCBnZXRWaWV3UG9zaXRpb24oIHV2LnN1YiggdmVjMiggZmxvYXQoIDEgKS5kaXYoIHNpemUueCApLCAwICkgKSwgbDEsIHByb2plY3Rpb25NYXRyaXhJbnZlcnNlICkgKSwgY2UubmVnYXRlKCkuYWRkKCBnZXRWaWV3UG9zaXRpb24oIHV2LmFkZCggdmVjMiggZmxvYXQoIDEgKS5kaXYoIHNpemUueCApLCAwICkgKSwgcjEsIHByb2plY3Rpb25NYXRyaXhJbnZlcnNlICkgKSApO1xuXHRjb25zdCBkcGR5ID0gZGIubGVzc1RoYW4oIGR0ICkuc2VsZWN0KCBjZS5zdWIoIGdldFZpZXdQb3NpdGlvbiggdXYuYWRkKCB2ZWMyKCAwLCBmbG9hdCggMSApLmRpdiggc2l6ZS55ICkgKSApLCBiMSwgcHJvamVjdGlvbk1hdHJpeEludmVyc2UgKSApLCBjZS5uZWdhdGUoKS5hZGQoIGdldFZpZXdQb3NpdGlvbiggdXYuc3ViKCB2ZWMyKCAwLCBmbG9hdCggMSApLmRpdiggc2l6ZS55ICkgKSApLCB0MSwgcHJvamVjdGlvbk1hdHJpeEludmVyc2UgKSApICk7XG5cblx0cmV0dXJuIG5vcm1hbGl6ZSggY3Jvc3MoIGRwZHgsIGRwZHkgKSApO1xuXG59ICk7XG4iLCJpbXBvcnQgeyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgfSBmcm9tICcuLi8uLi9jb3JlL0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZS5qcyc7XG5cbi8qKlxuICogVGhpcyBzcGVjaWFsIHR5cGUgb2YgaW5zdGFuY2VkIGJ1ZmZlciBhdHRyaWJ1dGUgaXMgaW50ZW5kZWQgZm9yIGNvbXB1dGUgc2hhZGVycy5cbiAqIEluIGVhcmxpZXIgdGhyZWUuanMgdmVyc2lvbnMgaXQgd2FzIG9ubHkgcG9zc2libGUgdG8gdXBkYXRlIGF0dHJpYnV0ZSBkYXRhXG4gKiBvbiB0aGUgQ1BVIHZpYSBKYXZhU2NyaXB0IGFuZCB0aGVuIHVwbG9hZCB0aGUgZGF0YSB0byB0aGUgR1BVLiBXaXRoIHRoZVxuICogbmV3IG1hdGVyaWFsIHN5c3RlbSBhbmQgcmVuZGVyZXIgaXQgaXMgbm93IHBvc3NpYmxlIHRvIHVzZSBjb21wdXRlIHNoYWRlcnNcbiAqIHRvIGNvbXB1dGUgdGhlIGRhdGEgZm9yIGFuIGF0dHJpYnV0ZSBtb3JlIGVmZmljaWVudGx5IG9uIHRoZSBHUFUuXG4gKlxuICogVGhlIGlkZWEgaXMgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgYW5kIHByb3ZpZGUgaXQgYXMgYW4gaW5wdXRcbiAqIHRvIHtAbGluayBTdG9yYWdlQnVmZmVyTm9kZX0uXG4gKlxuICogTm90ZTogVGhpcyB0eXBlIG9mIGJ1ZmZlciBhdHRyaWJ1dGUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGBXZWJHUFVSZW5kZXJlcmAuXG4gKlxuICogQGF1Z21lbnRzIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZVxuICovXG5jbGFzcyBTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzdG9yYWdlIGluc3RhbmNlZCBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcnxUeXBlZEFycmF5fSBjb3VudCAtIFRoZSBpdGVtIGNvdW50LiBJdCBpcyBhbHNvIHZhbGlkIHRvIHBhc3MgYSB0eXBlZCBhcnJheSBhcyBhbiBhcmd1bWVudC5cblx0ICogVGhlIHN1YnNlcXVlbnQgcGFyYW1ldGVycyBhcmUgdGhlbiBvYnNvbGV0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGl0ZW1TaXplIC0gVGhlIGl0ZW0gc2l6ZS5cblx0ICogQHBhcmFtIHtUeXBlZEFycmF5LmNvbnN0cnVjdG9yfSBbdHlwZUNsYXNzPUZsb2F0MzJBcnJheV0gLSBBIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNvdW50LCBpdGVtU2l6ZSwgdHlwZUNsYXNzID0gRmxvYXQzMkFycmF5ICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBBcnJheUJ1ZmZlci5pc1ZpZXcoIGNvdW50ICkgPyBjb3VudCA6IG5ldyB0eXBlQ2xhc3MoIGNvdW50ICogaXRlbVNpemUgKTtcblxuXHRcdHN1cGVyKCBhcnJheSwgaXRlbVNpemUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RvcmFnZUluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZTtcbiIsImltcG9ydCB7IEJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcblxuLyoqXG4gKiBUaGlzIHNwZWNpYWwgdHlwZSBvZiBidWZmZXIgYXR0cmlidXRlIGlzIGludGVuZGVkIGZvciBjb21wdXRlIHNoYWRlcnMuXG4gKiBJbiBlYXJsaWVyIHRocmVlLmpzIHZlcnNpb25zIGl0IHdhcyBvbmx5IHBvc3NpYmxlIHRvIHVwZGF0ZSBhdHRyaWJ1dGUgZGF0YVxuICogb24gdGhlIENQVSB2aWEgSmF2YVNjcmlwdCBhbmQgdGhlbiB1cGxvYWQgdGhlIGRhdGEgdG8gdGhlIEdQVS4gV2l0aCB0aGVcbiAqIG5ldyBtYXRlcmlhbCBzeXN0ZW0gYW5kIHJlbmRlcmVyIGl0IGlzIG5vdyBwb3NzaWJsZSB0byB1c2UgY29tcHV0ZSBzaGFkZXJzXG4gKiB0byBjb21wdXRlIHRoZSBkYXRhIGZvciBhbiBhdHRyaWJ1dGUgbW9yZSBlZmZpY2llbnRseSBvbiB0aGUgR1BVLlxuICpcbiAqIFRoZSBpZGVhIGlzIHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGFuZCBwcm92aWRlIGl0IGFzIGFuIGlucHV0XG4gKiB0byB7QGxpbmsgU3RvcmFnZUJ1ZmZlck5vZGV9LlxuICpcbiAqIE5vdGU6IFRoaXMgdHlwZSBvZiBidWZmZXIgYXR0cmlidXRlIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBgV2ViR1BVUmVuZGVyZXJgLlxuICpcbiAqIEBhdWdtZW50cyBCdWZmZXJBdHRyaWJ1dGVcbiAqL1xuY2xhc3MgU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc3RvcmFnZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcnxUeXBlZEFycmF5fSBjb3VudCAtIFRoZSBpdGVtIGNvdW50LiBJdCBpcyBhbHNvIHZhbGlkIHRvIHBhc3MgYSB0eXBlZCBhcnJheSBhcyBhbiBhcmd1bWVudC5cblx0ICogVGhlIHN1YnNlcXVlbnQgcGFyYW1ldGVycyBhcmUgdGhlbiBvYnNvbGV0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGl0ZW1TaXplIC0gVGhlIGl0ZW0gc2l6ZS5cblx0ICogQHBhcmFtIHtUeXBlZEFycmF5LmNvbnN0cnVjdG9yfSBbdHlwZUNsYXNzPUZsb2F0MzJBcnJheV0gLSBBIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNvdW50LCBpdGVtU2l6ZSwgdHlwZUNsYXNzID0gRmxvYXQzMkFycmF5ICkge1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBBcnJheUJ1ZmZlci5pc1ZpZXcoIGNvdW50ICkgPyBjb3VudCA6IG5ldyB0eXBlQ2xhc3MoIGNvdW50ICogaXRlbVNpemUgKTtcblxuXHRcdHN1cGVyKCBhcnJheSwgaXRlbVNpemUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTdG9yYWdlQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZTtcbiIsImltcG9ydCB7IG5vZGVQcm94eSB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCBBcnJheUVsZW1lbnROb2RlIGZyb20gJy4vQXJyYXlFbGVtZW50Tm9kZS5qcyc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBlbmFibGVzIGVsZW1lbnQgYWNjZXNzIG9uIGluc3RhbmNlcyBvZiB7QGxpbmsgU3RvcmFnZUJ1ZmZlck5vZGV9LlxuICogSW4gbW9zdCBjYXNlcywgaXQgaXMgaW5kaXJlY3RseSB1c2VkIHdoZW4gYWNjZXNzaW5nIGVsZW1lbnRzIHdpdGggdGhlXG4gKiB7QGxpbmsgU3RvcmFnZUJ1ZmZlck5vZGUjZWxlbWVudH0gbWV0aG9kLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uU3RvcmFnZS5lbGVtZW50KCBpbnN0YW5jZUluZGV4ICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQXJyYXlFbGVtZW50Tm9kZVxuICovXG5jbGFzcyBTdG9yYWdlQXJyYXlFbGVtZW50Tm9kZSBleHRlbmRzIEFycmF5RWxlbWVudE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU3RvcmFnZUFycmF5RWxlbWVudE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBzdG9yYWdlIGJ1ZmZlciBlbGVtZW50IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RvcmFnZUJ1ZmZlck5vZGV9IHN0b3JhZ2VCdWZmZXJOb2RlIC0gVGhlIHN0b3JhZ2UgYnVmZmVyIG5vZGUuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gaW5kZXhOb2RlIC0gVGhlIGluZGV4IG5vZGUgdGhhdCBkZWZpbmVzIHRoZSBlbGVtZW50IGFjY2Vzcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzdG9yYWdlQnVmZmVyTm9kZSwgaW5kZXhOb2RlICkge1xuXG5cdFx0c3VwZXIoIHN0b3JhZ2VCdWZmZXJOb2RlLCBpbmRleE5vZGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTdG9yYWdlQXJyYXlFbGVtZW50Tm9kZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgc3RvcmFnZSBidWZmZXIgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSB2YWx1ZVxuXHQgKiBAdHlwZSB7U3RvcmFnZUJ1ZmZlck5vZGV9XG5cdCAqL1xuXHRzZXQgc3RvcmFnZUJ1ZmZlck5vZGUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5ub2RlID0gdmFsdWU7XG5cblx0fVxuXG5cdGdldCBzdG9yYWdlQnVmZmVyTm9kZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGU7XG5cblx0fVxuXG5cdGdldE1lbWJlclR5cGUoIGJ1aWxkZXIsIG5hbWUgKSB7XG5cblx0XHRjb25zdCBzdHJ1Y3RUeXBlTm9kZSA9IHRoaXMuc3RvcmFnZUJ1ZmZlck5vZGUuc3RydWN0VHlwZU5vZGU7XG5cblx0XHRpZiAoIHN0cnVjdFR5cGVOb2RlICkge1xuXG5cdFx0XHRyZXR1cm4gc3RydWN0VHlwZU5vZGUuZ2V0TWVtYmVyVHlwZSggYnVpbGRlciwgbmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuICd2b2lkJztcblxuXHR9XG5cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRpZiAoIGJ1aWxkZXIuaXNBdmFpbGFibGUoICdzdG9yYWdlQnVmZmVyJyApID09PSBmYWxzZSApIHtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGUuaXNQQk8gPT09IHRydWUgKSB7XG5cblx0XHRcdFx0YnVpbGRlci5zZXR1cFBCTyggdGhpcy5ub2RlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBzdXBlci5zZXR1cCggYnVpbGRlciApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0bGV0IHNuaXBwZXQ7XG5cblx0XHRjb25zdCBpc0Fzc2lnbkNvbnRleHQgPSBidWlsZGVyLmNvbnRleHQuYXNzaWduO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggYnVpbGRlci5pc0F2YWlsYWJsZSggJ3N0b3JhZ2VCdWZmZXInICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZS5pc1BCTyA9PT0gdHJ1ZSAmJiBpc0Fzc2lnbkNvbnRleHQgIT09IHRydWUgJiYgKCB0aGlzLm5vZGUudmFsdWUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgfHwgYnVpbGRlci5zaGFkZXJTdGFnZSAhPT0gJ2NvbXB1dGUnICkgKSB7XG5cblx0XHRcdFx0c25pcHBldCA9IGJ1aWxkZXIuZ2VuZXJhdGVQQk8oIHRoaXMgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzbmlwcGV0ID0gdGhpcy5ub2RlLmJ1aWxkKCBidWlsZGVyICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHNuaXBwZXQgPSBzdXBlci5nZW5lcmF0ZSggYnVpbGRlciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Fzc2lnbkNvbnRleHQgIT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IHR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRcdHNuaXBwZXQgPSBidWlsZGVyLmZvcm1hdCggc25pcHBldCwgdHlwZSwgb3V0cHV0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldDtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RvcmFnZUFycmF5RWxlbWVudE5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHN0b3JhZ2UgZWxlbWVudCBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTdG9yYWdlQnVmZmVyTm9kZX0gc3RvcmFnZUJ1ZmZlck5vZGUgLSBUaGUgc3RvcmFnZSBidWZmZXIgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gaW5kZXhOb2RlIC0gVGhlIGluZGV4IG5vZGUgdGhhdCBkZWZpbmVzIHRoZSBlbGVtZW50IGFjY2Vzcy5cbiAqIEByZXR1cm5zIHtTdG9yYWdlQXJyYXlFbGVtZW50Tm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHN0b3JhZ2VFbGVtZW50ID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFN0b3JhZ2VBcnJheUVsZW1lbnROb2RlICk7XG4iLCJpbXBvcnQgQnVmZmVyTm9kZSBmcm9tICcuL0J1ZmZlck5vZGUuanMnO1xuaW1wb3J0IHsgYnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi9CdWZmZXJBdHRyaWJ1dGVOb2RlLmpzJztcbmltcG9ydCB7IG5vZGVPYmplY3QsIHZhcnlpbmcgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBzdG9yYWdlRWxlbWVudCB9IGZyb20gJy4uL3V0aWxzL1N0b3JhZ2VBcnJheUVsZW1lbnROb2RlLmpzJztcbmltcG9ydCB7IE5vZGVBY2Nlc3MgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBnZXRUeXBlRnJvbUxlbmd0aCB9IGZyb20gJy4uL2NvcmUvTm9kZVV0aWxzLmpzJztcblxuLyoqXG4gKiBUaGlzIG5vZGUgaXMgdXNlZCBpbiBjb250ZXh0IG9mIGNvbXB1dGUgc2hhZGVycyBhbmQgYWxsb3dzIHRvIGRlZmluZSBhXG4gKiBzdG9yYWdlIGJ1ZmZlciBmb3IgZGF0YS4gQSB0eXBpY2FsIHdvcmtmbG93IGlzIHRvIGNyZWF0ZSBpbnN0YW5jZXMgb2ZcbiAqIHRoaXMgbm9kZSB3aXRoIHRoZSBjb252ZW5pZW5jZSBmdW5jdGlvbnMgYGF0dHJpYnV0ZUFycmF5KClgIG9yIGBpbnN0YW5jZWRBcnJheSgpYCxcbiAqIHNldHVwIHVwIGEgY29tcHV0ZSBzaGFkZXIgdGhhdCB3cml0ZXMgaW50byB0aGUgYnVmZmVycyBhbmQgdGhlbiBjb252ZXJ0XG4gKiB0aGUgc3RvcmFnZSBidWZmZXJzIHRvIGF0dHJpYnV0ZSBub2RlcyBmb3IgcmVuZGVyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwb3NpdGlvbkJ1ZmZlciA9IGluc3RhbmNlZEFycmF5KCBwYXJ0aWNsZUNvdW50LCAndmVjMycgKTsgLy8gdGhlIHN0b3JhZ2UgYnVmZmVyIG5vZGVcbiAqXG4gKiBjb25zdCBjb21wdXRlSW5pdCA9IEZuKCAoKSA9PiB7IC8vIHRoZSBjb21wdXRlIHNoYWRlclxuICpcbiAqIFx0Y29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbkJ1ZmZlci5lbGVtZW50KCBpbnN0YW5jZUluZGV4ICk7XG4gKlxuICogXHQvLyBjb21wdXRlIHBvc2l0aW9uIGRhdGFcbiAqXG4gKiBcdHBvc2l0aW9uLnggPSAxO1xuICogXHRwb3NpdGlvbi55ID0gMTtcbiAqIFx0cG9zaXRpb24ueiA9IDE7XG4gKlxuICogfSApKCkuY29tcHV0ZSggcGFydGljbGVDb3VudCApO1xuICpcbiAqIGNvbnN0IHBhcnRpY2xlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuU3ByaXRlTm9kZU1hdGVyaWFsKCk7XG4gKiBwYXJ0aWNsZU1hdGVyaWFsLnBvc2l0aW9uTm9kZSA9IHBvc2l0aW9uQnVmZmVyLnRvQXR0cmlidXRlKCk7XG4gKlxuICogcmVuZGVyZXIuY29tcHV0ZUFzeW5jKCBjb21wdXRlSW5pdCApO1xuICpcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBCdWZmZXJOb2RlXG4gKi9cbmNsYXNzIFN0b3JhZ2VCdWZmZXJOb2RlIGV4dGVuZHMgQnVmZmVyTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdTdG9yYWdlQnVmZmVyTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHN0b3JhZ2UgYnVmZmVyIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZXxTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlfEJ1ZmZlckF0dHJpYnV0ZX0gdmFsdWUgLSBUaGUgYnVmZmVyIGRhdGEuXG5cdCAqIEBwYXJhbSB7PyhzdHJpbmd8U3RydWN0KX0gW2J1ZmZlclR5cGU9bnVsbF0gLSBUaGUgYnVmZmVyIHR5cGUgKGUuZy4gYCd2ZWMzJ2ApLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2J1ZmZlckNvdW50PTBdIC0gVGhlIGJ1ZmZlciBjb3VudC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSwgYnVmZmVyVHlwZSA9IG51bGwsIGJ1ZmZlckNvdW50ID0gMCApIHtcblxuXHRcdGxldCBub2RlVHlwZSwgc3RydWN0VHlwZU5vZGUgPSBudWxsO1xuXG5cdFx0aWYgKCBidWZmZXJUeXBlICYmIGJ1ZmZlclR5cGUuaXNTdHJ1Y3QgKSB7XG5cblx0XHRcdG5vZGVUeXBlID0gJ3N0cnVjdCc7XG5cdFx0XHRzdHJ1Y3RUeXBlTm9kZSA9IGJ1ZmZlclR5cGUubGF5b3V0O1xuXG5cdFx0fSBlbHNlIGlmICggYnVmZmVyVHlwZSA9PT0gbnVsbCAmJiAoIHZhbHVlLmlzU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZSB8fCB2YWx1ZS5pc1N0b3JhZ2VJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgKSApIHtcblxuXHRcdFx0bm9kZVR5cGUgPSBnZXRUeXBlRnJvbUxlbmd0aCggdmFsdWUuaXRlbVNpemUgKTtcblx0XHRcdGJ1ZmZlckNvdW50ID0gdmFsdWUuY291bnQ7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRub2RlVHlwZSA9IGJ1ZmZlclR5cGU7XG5cblx0XHR9XG5cblx0XHRzdXBlciggdmFsdWUsIG5vZGVUeXBlLCBidWZmZXJDb3VudCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1N0b3JhZ2VCdWZmZXJOb2RlID0gdHJ1ZTtcblxuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJ1ZmZlciBzdHJ1Y3QgdHlwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/U3RydWN0VHlwZU5vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc3RydWN0VHlwZU5vZGUgPSBzdHJ1Y3RUeXBlTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhY2Nlc3MgdHlwZSBvZiB0aGUgdGV4dHVyZSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAncmVhZFdyaXRlJ1xuXHRcdCAqL1xuXHRcdHRoaXMuYWNjZXNzID0gTm9kZUFjY2Vzcy5SRUFEX1dSSVRFO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgbm9kZSBpcyBhdG9taWMgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmlzQXRvbWljID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBub2RlIHJlcHJlc2VudHMgYSBQQk8gb3Igbm90LlxuXHRcdCAqIE9ubHkgcmVsZXZhbnQgZm9yIFdlYkdMLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmlzUEJPID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgaW50ZXJuYWwgYnVmZmVyIGF0dHJpYnV0ZSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9CdWZmZXJBdHRyaWJ1dGVOb2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9hdHRyaWJ1dGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIGludGVybmFsIHZhcnlpbmcgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VmFyeWluZ05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX3ZhcnlpbmcgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogYFN0b3JhZ2VCdWZmZXJOb2RlYCBzZXRzIHRoaXMgcHJvcGVydHkgdG8gYHRydWVgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5nbG9iYWwgPSB0cnVlO1xuXG5cdFx0aWYgKCB2YWx1ZS5pc1N0b3JhZ2VCdWZmZXJBdHRyaWJ1dGUgIT09IHRydWUgJiYgdmFsdWUuaXNTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlICE9PSB0cnVlICkge1xuXG5cdFx0XHQvLyBUT0RPOiBJbXByb3ZlIGl0LCBwb3NzaWJseSBhZGRpbmcgYSBuZXcgcHJvcGVydHkgdG8gdGhlIEJ1ZmZlckF0dHJpYnV0ZSB0byBpZGVudGlmeSBpdCBhcyBhIHN0b3JhZ2UgYnVmZmVyIHJlYWQtb25seSBhdHRyaWJ1dGUgaW4gUmVuZGVyZXJcblxuXHRcdFx0aWYgKCB2YWx1ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHZhbHVlLmlzU3RvcmFnZUluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cdFx0XHRlbHNlIHZhbHVlLmlzU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzaW5jZSB0aGUgYnVmZmVyIGRhdGEgbWlnaHQgYmUgc2hhcmVkXG5cdCAqIGFuZCB0aHVzIHRoZSBoYXNoIHNob3VsZCBiZSBzaGFyZWQgYXMgd2VsbC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGFzaC5cblx0ICovXG5cdGdldEhhc2goIGJ1aWxkZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuYnVmZmVyQ291bnQgPT09IDAgKSB7XG5cblx0XHRcdGxldCBidWZmZXJEYXRhID0gYnVpbGRlci5nbG9iYWxDYWNoZS5nZXREYXRhKCB0aGlzLnZhbHVlICk7XG5cblx0XHRcdGlmICggYnVmZmVyRGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGJ1ZmZlckRhdGEgPSB7XG5cdFx0XHRcdFx0bm9kZTogdGhpc1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGJ1aWxkZXIuZ2xvYmFsQ2FjaGUuc2V0RGF0YSggdGhpcy52YWx1ZSwgYnVmZmVyRGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBidWZmZXJEYXRhLm5vZGUudXVpZDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnV1aWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdGVzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHRvIHJldHVybiBhIGZpeGVkIHZhbHVlIGAnaW5kaXJlY3RTdG9yYWdlQnVmZmVyJ2Agb3IgYCdzdG9yYWdlQnVmZmVyJ2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGlucHV0IHR5cGUuXG5cdCAqL1xuXHRnZXRJbnB1dFR5cGUoIC8qYnVpbGRlciovICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudmFsdWUuaXNJbmRpcmVjdFN0b3JhZ2VCdWZmZXJBdHRyaWJ1dGUgPyAnaW5kaXJlY3RTdG9yYWdlQnVmZmVyJyA6ICdzdG9yYWdlQnVmZmVyJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgZWxlbWVudCBhY2Nlc3Mgd2l0aCB0aGUgZ2l2ZW4gaW5kZXggbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtJbmRleE5vZGV9IGluZGV4Tm9kZSAtIFRoZSBpbmRleCBub2RlLlxuXHQgKiBAcmV0dXJuIHtTdG9yYWdlQXJyYXlFbGVtZW50Tm9kZX0gQSBub2RlIHJlcHJlc2VudGluZyB0aGUgZWxlbWVudCBhY2Nlc3MuXG5cdCAqL1xuXHRlbGVtZW50KCBpbmRleE5vZGUgKSB7XG5cblx0XHRyZXR1cm4gc3RvcmFnZUVsZW1lbnQoIHRoaXMsIGluZGV4Tm9kZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB3aGV0aGVyIHRoaXMgbm9kZSBpcyBhIFBCTyBvciBub3QuIE9ubHkgcmVsZXZhbnQgZm9yIFdlYkdMLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIC0gVGhlIHZhbHVlIHNvIHNldC5cblx0ICogQHJldHVybiB7U3RvcmFnZUJ1ZmZlck5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdHNldFBCTyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmlzUEJPID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGBpc1BCT2AgdmFsdWUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5vZGUgcmVwcmVzZW50cyBhIFBCTyBvciBub3QuXG5cdCAqL1xuXHRnZXRQQk8oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc1BCTztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIG5vZGUgYWNjZXNzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgbm9kZSBhY2Nlc3MuXG5cdCAqIEByZXR1cm4ge1N0b3JhZ2VCdWZmZXJOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRzZXRBY2Nlc3MoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5hY2Nlc3MgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciBjb25maWd1cmluZyBhIHJlYWQtb25seSBub2RlIGFjY2Vzcy5cblx0ICpcblx0ICogQHJldHVybiB7U3RvcmFnZUJ1ZmZlck5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdHRvUmVhZE9ubHkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRBY2Nlc3MoIE5vZGVBY2Nlc3MuUkVBRF9PTkxZICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIG5vZGUgaXMgYXRvbWljIG9yIG5vdC5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFRoZSBhdG9taWMgZmxhZy5cblx0ICogQHJldHVybiB7U3RvcmFnZUJ1ZmZlck5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdHNldEF0b21pYyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmlzQXRvbWljID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgbWFraW5nIHRoaXMgbm9kZSBhdG9taWMuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1N0b3JhZ2VCdWZmZXJOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHR0b0F0b21pYygpIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEF0b21pYyggdHJ1ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhdHRyaWJ1dGUgZGF0YSBmb3IgdGhpcyBzdG9yYWdlIGJ1ZmZlciBub2RlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHt7YXR0cmlidXRlOiBCdWZmZXJBdHRyaWJ1dGVOb2RlLCB2YXJ5aW5nOiBWYXJ5aW5nTm9kZX19IFRoZSBhdHRyaWJ1dGUgZGF0YS5cblx0ICovXG5cdGdldEF0dHJpYnV0ZURhdGEoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2F0dHJpYnV0ZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fYXR0cmlidXRlID0gYnVmZmVyQXR0cmlidXRlKCB0aGlzLnZhbHVlICk7XG5cdFx0XHR0aGlzLl92YXJ5aW5nID0gdmFyeWluZyggdGhpcy5fYXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YXR0cmlidXRlOiB0aGlzLl9hdHRyaWJ1dGUsXG5cdFx0XHR2YXJ5aW5nOiB0aGlzLl92YXJ5aW5nXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgZnJvbSB0aGUgYXZhaWxhYmlsaXR5IG9mIHN0b3JhZ2UgYnVmZmVyc1xuXHQgKiBhbmQgdGhlIGF0dHJpYnV0ZSBkYXRhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdGlmICggdGhpcy5zdHJ1Y3RUeXBlTm9kZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc3RydWN0VHlwZU5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdH1cblxuXHRcdGlmICggYnVpbGRlci5pc0F2YWlsYWJsZSggJ3N0b3JhZ2VCdWZmZXInICkgfHwgYnVpbGRlci5pc0F2YWlsYWJsZSggJ2luZGlyZWN0U3RvcmFnZUJ1ZmZlcicgKSApIHtcblxuXHRcdFx0cmV0dXJuIHN1cGVyLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB7IGF0dHJpYnV0ZSB9ID0gdGhpcy5nZXRBdHRyaWJ1dGVEYXRhKCk7XG5cblx0XHRyZXR1cm4gYXR0cmlidXRlLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIGNvZGUgc25pcHBldCBvZiB0aGUgc3RvcmFnZSBidWZmZXIgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIGNvZGUgc25pcHBldC5cblx0ICovXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0aWYgKCB0aGlzLnN0cnVjdFR5cGVOb2RlICE9PSBudWxsICkgdGhpcy5zdHJ1Y3RUeXBlTm9kZS5idWlsZCggYnVpbGRlciApO1xuXG5cdFx0aWYgKCBidWlsZGVyLmlzQXZhaWxhYmxlKCAnc3RvcmFnZUJ1ZmZlcicgKSB8fCBidWlsZGVyLmlzQXZhaWxhYmxlKCAnaW5kaXJlY3RTdG9yYWdlQnVmZmVyJyApICkge1xuXG5cdFx0XHRyZXR1cm4gc3VwZXIuZ2VuZXJhdGUoIGJ1aWxkZXIgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHsgYXR0cmlidXRlLCB2YXJ5aW5nIH0gPSB0aGlzLmdldEF0dHJpYnV0ZURhdGEoKTtcblxuXHRcdGNvbnN0IG91dHB1dCA9IHZhcnlpbmcuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHRcdGJ1aWxkZXIucmVnaXN0ZXJUcmFuc2Zvcm0oIG91dHB1dCwgYXR0cmlidXRlICk7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTdG9yYWdlQnVmZmVyTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc3RvcmFnZSBidWZmZXIgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZXxTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlfEJ1ZmZlckF0dHJpYnV0ZX0gdmFsdWUgLSBUaGUgYnVmZmVyIGRhdGEuXG4gKiBAcGFyYW0gez8oc3RyaW5nfFN0cnVjdCl9IFt0eXBlPW51bGxdIC0gVGhlIGJ1ZmZlciB0eXBlIChlLmcuIGAndmVjMydgKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbY291bnQ9MF0gLSBUaGUgYnVmZmVyIGNvdW50LlxuICogQHJldHVybnMge1N0b3JhZ2VCdWZmZXJOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgc3RvcmFnZSA9ICggdmFsdWUsIHR5cGUgPSBudWxsLCBjb3VudCA9IDAgKSA9PiBub2RlT2JqZWN0KCBuZXcgU3RvcmFnZUJ1ZmZlck5vZGUoIHZhbHVlLCB0eXBlLCBjb3VudCApICk7XG5cbi8qKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSByMTcxLiBVc2UgYHN0b3JhZ2UoKS5zZXRQQk8oIHRydWUgKWAgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge1N0b3JhZ2VCdWZmZXJBdHRyaWJ1dGV8U3RvcmFnZUluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZXxCdWZmZXJBdHRyaWJ1dGV9IHZhbHVlIC0gVGhlIGJ1ZmZlciBkYXRhLlxuICogQHBhcmFtIHs/c3RyaW5nfSB0eXBlIC0gVGhlIGJ1ZmZlciB0eXBlIChlLmcuIGAndmVjMydgKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIFRoZSBidWZmZXIgY291bnQuXG4gKiBAcmV0dXJucyB7U3RvcmFnZUJ1ZmZlck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBzdG9yYWdlT2JqZWN0ID0gKCB2YWx1ZSwgdHlwZSwgY291bnQgKSA9PiB7IC8vIEBkZXByZWNhdGVkLCByMTcxXG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVFNMOiBcInN0b3JhZ2VPYmplY3QoKVwiIGlzIGRlcHJlY2F0ZWQuIFVzZSBcInN0b3JhZ2UoKS5zZXRQQk8oIHRydWUgKVwiIGluc3RlYWQuJyApO1xuXG5cdHJldHVybiBzdG9yYWdlKCB2YWx1ZSwgdHlwZSwgY291bnQgKS5zZXRQQk8oIHRydWUgKTtcblxufTtcbiIsImltcG9ydCBBdHRyaWJ1dGVOb2RlIGZyb20gJy4uL2NvcmUvQXR0cmlidXRlTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yNC5qcyc7XG5cbi8qKlxuICogQW4gYXR0cmlidXRlIG5vZGUgZm9yIHJlcHJlc2VudGluZyB2ZXJ0ZXggY29sb3JzLlxuICpcbiAqIEBhdWdtZW50cyBBdHRyaWJ1dGVOb2RlXG4gKi9cbmNsYXNzIFZlcnRleENvbG9yTm9kZSBleHRlbmRzIEF0dHJpYnV0ZU5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnVmVydGV4Q29sb3JOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdmVydGV4IGNvbG9yIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaW5kZXg9MF0gLSBUaGUgYXR0cmlidXRlIGluZGV4LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGluZGV4ID0gMCApIHtcblxuXHRcdHN1cGVyKCBudWxsLCAndmVjNCcgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNWZXJ0ZXhDb2xvck5vZGUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGF0dHJpYnV0ZSBpbmRleCB0byBlbmFibGUgbW9yZSB0aGFuIG9uZSBzZXRzIG9mIHZlcnRleCBjb2xvcnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmluZGV4ID0gaW5kZXg7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdGVzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGJ5IGhvbm9yaW5nIHRoZSBhdHRyaWJ1dGUgaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGF0dHJpYnV0ZSBuYW1lLlxuXHQgKi9cblx0Z2V0QXR0cmlidXRlTmFtZSggLypidWlsZGVyKi8gKSB7XG5cblx0XHRjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG5cblx0XHRyZXR1cm4gJ2NvbG9yJyArICggaW5kZXggPiAwID8gaW5kZXggOiAnJyApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IGF0dHJpYnV0ZU5hbWUgPSB0aGlzLmdldEF0dHJpYnV0ZU5hbWUoIGJ1aWxkZXIgKTtcblx0XHRjb25zdCBnZW9tZXRyeUF0dHJpYnV0ZSA9IGJ1aWxkZXIuaGFzR2VvbWV0cnlBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUgKTtcblxuXHRcdGxldCByZXN1bHQ7XG5cblx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRyZXN1bHQgPSBzdXBlci5nZW5lcmF0ZSggYnVpbGRlciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVmVydGV4IGNvbG9yIGZhbGxiYWNrIHNob3VsZCBiZSB3aGl0ZVxuXHRcdFx0cmVzdWx0ID0gYnVpbGRlci5nZW5lcmF0ZUNvbnN0KCB0aGlzLm5vZGVUeXBlLCBuZXcgVmVjdG9yNCggMSwgMSwgMSwgMSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHRzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5zZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdGRhdGEuaW5kZXggPSB0aGlzLmluZGV4O1xuXG5cdH1cblxuXHRkZXNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLmRlc2VyaWFsaXplKCBkYXRhICk7XG5cblx0XHR0aGlzLmluZGV4ID0gZGF0YS5pbmRleDtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmVydGV4Q29sb3JOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSByZWZlcmVuY2Ugbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBhdHRyaWJ1dGUgaW5kZXguXG4gKiBAcmV0dXJucyB7VmVydGV4Q29sb3JOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdmVydGV4Q29sb3IgPSAoIGluZGV4ICkgPT4gbm9kZU9iamVjdCggbmV3IFZlcnRleENvbG9yTm9kZSggaW5kZXggKSApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IG5vZGVJbW11dGFibGUgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogQSBub2RlIGZvciByZXByZXNlbnRpbmcgdGhlIHV2IGNvb3JkaW5hdGVzIG9mIHBvaW50cy5cbiAqXG4gKiBDYW4gb25seSBiZSB1c2VkIHdpdGggYSBXZWJHTCBiYWNrZW5kLiBJbiBXZWJHUFUsIHBvaW50XG4gKiBwcmltaXRpdmVzIGFsd2F5cyBoYXZlIHRoZSBzaXplIG9mIG9uZSBwaXhlbCBhbmQgY2FuIHRodXNcbiAqIGNhbid0IGJlIHVzZWQgYXMgc3ByaXRlLWxpa2Ugb2JqZWN0cyB0aGF0IGRpc3BsYXkgdGV4dHVyZXMuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgUG9pbnRVVk5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1BvaW50VVZOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcG9pbnQgdXYgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoICd2ZWMyJyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1BvaW50VVZOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIC8qYnVpbGRlciovICkge1xuXG5cdFx0cmV0dXJuICd2ZWMyKCBnbF9Qb2ludENvb3JkLngsIDEuMCAtIGdsX1BvaW50Q29vcmQueSApJztcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9pbnRVVk5vZGU7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHV2IGNvb3JkaW5hdGVzIG9mIHBvaW50cy5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7UG9pbnRVVk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBwb2ludFVWID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBQb2ludFVWTm9kZSApO1xuIiwiaW1wb3J0IHsgVVZNYXBwaW5nIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IEV1bGVyIH0gZnJvbSAnLi4vLi4vbWF0aC9FdWxlci5qcyc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyByZW5kZXJHcm91cCB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybUdyb3VwTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlSW1tdXRhYmxlLCB1bmlmb3JtIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgcmVmZXJlbmNlIH0gZnJvbSAnLi9SZWZlcmVuY2VOb2RlLmpzJztcblxuY29uc3QgX2UxID0gLypAX19QVVJFX18qLyBuZXcgRXVsZXIoKTtcbmNvbnN0IF9tMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBhbGxvd3MgYWNjZXNzIHRvIGEgY29sbGVjdGlvbiBvZiBzY2VuZSBwcm9wZXJ0aWVzLiBUaGUgZm9sbG93aW5nIHByZWRlZmluZWQgVFNMIG9iamVjdHNcbiAqIGFyZSBhdmFpbGFibGUgZm9yIGVhc2llciB1c2U6XG4gKlxuICogLSBgYmFja2dyb3VuZEJsdXJyaW5lc3NgOiBBIG5vZGUgdGhhdCByZXByZXNlbnRzIHRoZSBzY2VuZSdzIGJhY2tncm91bmQgYmx1cnJpbmVzcy5cbiAqIC0gYGJhY2tncm91bmRJbnRlbnNpdHlgOiBBIG5vZGUgdGhhdCByZXByZXNlbnRzIHRoZSBzY2VuZSdzIGJhY2tncm91bmQgaW50ZW5zaXR5LlxuICogLSBgYmFja2dyb3VuZFJvdGF0aW9uYDogQSBub2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgc2NlbmUncyBiYWNrZ3JvdW5kIHJvdGF0aW9uLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFNjZW5lTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU2NlbmVOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc2NlbmUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHsoJ2JhY2tncm91bmRCbHVycmluZXNzJ3wnYmFja2dyb3VuZEludGVuc2l0eSd8J2JhY2tncm91bmRSb3RhdGlvbicpfSBzY29wZSAtIFRoZSBzY29wZSBkZWZpbmVzIHRoZSB0eXBlIG9mIHNjZW5lIHByb3BlcnR5IHRoYXQgaXMgYWNjZXNzZWQuXG5cdCAqIEBwYXJhbSB7P1NjZW5lfSBbc2NlbmU9bnVsbF0gLSBBIHJlZmVyZW5jZSB0byB0aGUgc2NlbmUuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggc2NvcGUgPSBTY2VuZU5vZGUuQkFDS0dST1VORF9CTFVSUklORVNTLCBzY2VuZSA9IG51bGwgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNjb3BlIGRlZmluZXMgdGhlIHR5cGUgb2Ygc2NlbmUgcHJvcGVydHkgdGhhdCBpcyBhY2Nlc3NlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoJ2JhY2tncm91bmRCbHVycmluZXNzJ3wnYmFja2dyb3VuZEludGVuc2l0eSd8J2JhY2tncm91bmRSb3RhdGlvbicpfVxuXHRcdCAqL1xuXHRcdHRoaXMuc2NvcGUgPSBzY29wZTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBzY2VuZSB0aGF0IGlzIGdvaW5nIHRvIGJlIGFjY2Vzc2VkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9TY2VuZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zY2VuZSA9IHNjZW5lO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVwZW5kaW5nIG9uIHRoZSBzY29wZSwgdGhlIG1ldGhvZCByZXR1cm5zIGEgZGlmZmVyZW50IHR5cGUgb2Ygbm9kZSB0aGF0IHJlcHJlc2VudHNcblx0ICogdGhlIHJlc3BlY3RpdmUgc2NlbmUgcHJvcGVydHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge05vZGV9IFRoZSBvdXRwdXQgbm9kZS5cblx0ICovXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuXHRcdGNvbnN0IHNjZW5lID0gdGhpcy5zY2VuZSAhPT0gbnVsbCA/IHRoaXMuc2NlbmUgOiBidWlsZGVyLnNjZW5lO1xuXG5cdFx0bGV0IG91dHB1dDtcblxuXHRcdGlmICggc2NvcGUgPT09IFNjZW5lTm9kZS5CQUNLR1JPVU5EX0JMVVJSSU5FU1MgKSB7XG5cblx0XHRcdG91dHB1dCA9IHJlZmVyZW5jZSggJ2JhY2tncm91bmRCbHVycmluZXNzJywgJ2Zsb2F0Jywgc2NlbmUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHNjb3BlID09PSBTY2VuZU5vZGUuQkFDS0dST1VORF9JTlRFTlNJVFkgKSB7XG5cblx0XHRcdG91dHB1dCA9IHJlZmVyZW5jZSggJ2JhY2tncm91bmRJbnRlbnNpdHknLCAnZmxvYXQnLCBzY2VuZSApO1xuXG5cdFx0fSBlbHNlIGlmICggc2NvcGUgPT09IFNjZW5lTm9kZS5CQUNLR1JPVU5EX1JPVEFUSU9OICkge1xuXG5cdFx0XHRvdXRwdXQgPSB1bmlmb3JtKCAnbWF0NCcgKS5sYWJlbCggJ2JhY2tncm91bmRSb3RhdGlvbicgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKS5vblJlbmRlclVwZGF0ZSggKCkgPT4ge1xuXG5cdFx0XHRcdGNvbnN0IGJhY2tncm91bmQgPSBzY2VuZS5iYWNrZ3JvdW5kO1xuXG5cdFx0XHRcdGlmICggYmFja2dyb3VuZCAhPT0gbnVsbCAmJiBiYWNrZ3JvdW5kLmlzVGV4dHVyZSAmJiBiYWNrZ3JvdW5kLm1hcHBpbmcgIT09IFVWTWFwcGluZyApIHtcblxuXHRcdFx0XHRcdF9lMS5jb3B5KCBzY2VuZS5iYWNrZ3JvdW5kUm90YXRpb24gKTtcblxuXHRcdFx0XHRcdC8vIGFjY29tbW9kYXRlIGxlZnQtaGFuZGVkIGZyYW1lXG5cdFx0XHRcdFx0X2UxLnggKj0gLSAxOyBfZTEueSAqPSAtIDE7IF9lMS56ICo9IC0gMTtcblxuXHRcdFx0XHRcdF9tMS5tYWtlUm90YXRpb25Gcm9tRXVsZXIoIF9lMSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRfbTEuaWRlbnRpdHkoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIF9tMTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lTm9kZTogVW5rbm93biBzY29wZTonLCBzY29wZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHR9XG5cbn1cblxuU2NlbmVOb2RlLkJBQ0tHUk9VTkRfQkxVUlJJTkVTUyA9ICdiYWNrZ3JvdW5kQmx1cnJpbmVzcyc7XG5TY2VuZU5vZGUuQkFDS0dST1VORF9JTlRFTlNJVFkgPSAnYmFja2dyb3VuZEludGVuc2l0eSc7XG5TY2VuZU5vZGUuQkFDS0dST1VORF9ST1RBVElPTiA9ICdiYWNrZ3JvdW5kUm90YXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBTY2VuZU5vZGU7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNjZW5lJ3MgYmFja2dyb3VuZCBibHVycmluZXNzLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtTY2VuZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kQmx1cnJpbmVzcyA9IC8qQF9fUFVSRV9fKi8gbm9kZUltbXV0YWJsZSggU2NlbmVOb2RlLCBTY2VuZU5vZGUuQkFDS0dST1VORF9CTFVSUklORVNTICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNjZW5lJ3MgYmFja2dyb3VuZCBpbnRlbnNpdHkuXG4gKlxuICogQHRzbFxuICogQHR5cGUge1NjZW5lTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRJbnRlbnNpdHkgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFNjZW5lTm9kZSwgU2NlbmVOb2RlLkJBQ0tHUk9VTkRfSU5URU5TSVRZICk7XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHNjZW5lJ3MgYmFja2dyb3VuZCByb3RhdGlvbi5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7U2NlbmVOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYmFja2dyb3VuZFJvdGF0aW9uID0gLypAX19QVVJFX18qLyBub2RlSW1tdXRhYmxlKCBTY2VuZU5vZGUsIFNjZW5lTm9kZS5CQUNLR1JPVU5EX1JPVEFUSU9OICk7XG4iLCJpbXBvcnQgVGV4dHVyZU5vZGUgZnJvbSAnLi9UZXh0dXJlTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBOb2RlQWNjZXNzIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIFRoaXMgc3BlY2lhbCB2ZXJzaW9uIG9mIGEgdGV4dHVyZSBub2RlIGNhbiBiZSB1c2VkIHRvXG4gKiB3cml0ZSBkYXRhIGludG8gYSBzdG9yYWdlIHRleHR1cmUgd2l0aCBhIGNvbXB1dGUgc2hhZGVyLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBzdG9yYWdlVGV4dHVyZSA9IG5ldyBUSFJFRS5TdG9yYWdlVGV4dHVyZSggd2lkdGgsIGhlaWdodCApO1xuICpcbiAqIGNvbnN0IGNvbXB1dGVUZXh0dXJlID0gRm4oICggeyBzdG9yYWdlVGV4dHVyZSB9ICkgPT4ge1xuICpcbiAqIFx0Y29uc3QgcG9zWCA9IGluc3RhbmNlSW5kZXgubW9kSW50KCB3aWR0aCApO1xuICogXHRjb25zdCBwb3NZID0gaW5zdGFuY2VJbmRleC5kaXYoIHdpZHRoICk7XG4gKiBcdGNvbnN0IGluZGV4VVYgPSB1dmVjMiggcG9zWCwgcG9zWSApO1xuICpcbiAqIFx0Ly8gZ2VuZXJhdGUgUkdCIHZhbHVlc1xuICpcbiAqIFx0Y29uc3QgciA9IDE7XG4gKiBcdGNvbnN0IGcgPSAxO1xuICogXHRjb25zdCBiID0gMTtcbiAqXG4gKiBcdHRleHR1cmVTdG9yZSggc3RvcmFnZVRleHR1cmUsIGluZGV4VVYsIHZlYzQoIHIsIGcsIGIsIDEgKSApLnRvV3JpdGVPbmx5KCk7XG4gKlxuICogfSApO1xuICpcbiAqIGNvbnN0IGNvbXB1dGVOb2RlID0gY29tcHV0ZVRleHR1cmUoIHsgc3RvcmFnZVRleHR1cmUgfSApLmNvbXB1dGUoIHdpZHRoICogaGVpZ2h0ICk7XG4gKiByZW5kZXJlci5jb21wdXRlQXN5bmMoIGNvbXB1dGVOb2RlICk7XG4gKiBgYGBcbiAqXG4gKiBUaGlzIG5vZGUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGEgV2ViR1BVIGJhY2tlbmQuXG4gKlxuICogQGF1Z21lbnRzIFRleHR1cmVOb2RlXG4gKi9cbmNsYXNzIFN0b3JhZ2VUZXh0dXJlTm9kZSBleHRlbmRzIFRleHR1cmVOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1N0b3JhZ2VUZXh0dXJlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHN0b3JhZ2UgdGV4dHVyZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0b3JhZ2VUZXh0dXJlfSB2YWx1ZSAtIFRoZSBzdG9yYWdlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7Tm9kZTx2ZWMyfHZlYzM+fSB1dk5vZGUgLSBUaGUgdXYgbm9kZS5cblx0ICogQHBhcmFtIHs/Tm9kZX0gW3N0b3JlTm9kZT1udWxsXSAtIFRoZSB2YWx1ZSBub2RlIHRoYXQgc2hvdWxkIGJlIHN0b3JlZCBpbiB0aGUgdGV4dHVyZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSwgdXZOb2RlLCBzdG9yZU5vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIHZhbHVlLCB1dk5vZGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2YWx1ZSBub2RlIHRoYXQgc2hvdWxkIGJlIHN0b3JlZCBpbiB0aGUgdGV4dHVyZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zdG9yZU5vZGUgPSBzdG9yZU5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU3RvcmFnZVRleHR1cmVOb2RlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhY2Nlc3MgdHlwZSBvZiB0aGUgdGV4dHVyZSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnd3JpdGVPbmx5J1xuXHRcdCAqL1xuXHRcdHRoaXMuYWNjZXNzID0gTm9kZUFjY2Vzcy5XUklURV9PTkxZO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byByZXR1cm4gYSBmaXhlZCB2YWx1ZSBgJ3N0b3JhZ2VUZXh0dXJlJ2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGlucHV0IHR5cGUuXG5cdCAqL1xuXHRnZXRJbnB1dFR5cGUoIC8qYnVpbGRlciovICkge1xuXG5cdFx0cmV0dXJuICdzdG9yYWdlVGV4dHVyZSc7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0c3VwZXIuc2V0dXAoIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IHByb3BlcnRpZXMgPSBidWlsZGVyLmdldE5vZGVQcm9wZXJ0aWVzKCB0aGlzICk7XG5cdFx0cHJvcGVydGllcy5zdG9yZU5vZGUgPSB0aGlzLnN0b3JlTm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIG5vZGUgYWNjZXNzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgbm9kZSBhY2Nlc3MuXG5cdCAqIEByZXR1cm4ge1N0b3JhZ2VUZXh0dXJlTm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0c2V0QWNjZXNzKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuYWNjZXNzID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIGNvZGUgc25pcHBldCBvZiB0aGUgc3RvcmFnZSBub2RlLiBJZiBubyBgc3RvcmVOb2RlYFxuXHQgKiBpcyBkZWZpbmVkLCB0aGUgdGV4dHVyZSBub2RlIGlzIGdlbmVyYXRlZCBhcyBub3JtYWwgdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dCAtIFRoZSBjdXJyZW50IG91dHB1dC5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIGNvZGUgc25pcHBldC5cblx0ICovXG5cdGdlbmVyYXRlKCBidWlsZGVyLCBvdXRwdXQgKSB7XG5cblx0XHRsZXQgc25pcHBldDtcblxuXHRcdGlmICggdGhpcy5zdG9yZU5vZGUgIT09IG51bGwgKSB7XG5cblx0XHRcdHNuaXBwZXQgPSB0aGlzLmdlbmVyYXRlU3RvcmUoIGJ1aWxkZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHNuaXBwZXQgPSBzdXBlci5nZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgYSByZWFkL3dyaXRlIG5vZGUgYWNjZXNzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTdG9yYWdlVGV4dHVyZU5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdHRvUmVhZFdyaXRlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0QWNjZXNzKCBOb2RlQWNjZXNzLlJFQURfV1JJVEUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgYSByZWFkLW9ubHkgbm9kZSBhY2Nlc3MuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1N0b3JhZ2VUZXh0dXJlTm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0dG9SZWFkT25seSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEFjY2VzcyggTm9kZUFjY2Vzcy5SRUFEX09OTFkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgYSB3cml0ZS1vbmx5IG5vZGUgYWNjZXNzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTdG9yYWdlVGV4dHVyZU5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdHRvV3JpdGVPbmx5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0QWNjZXNzKCBOb2RlQWNjZXNzLldSSVRFX09OTFkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgY29kZSBzbmlwcGV0IG9mIHRoZSBzdG9yYWdlIHRleHR1cmUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICovXG5cdGdlbmVyYXRlU3RvcmUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBwcm9wZXJ0aWVzID0gYnVpbGRlci5nZXROb2RlUHJvcGVydGllcyggdGhpcyApO1xuXG5cdFx0Y29uc3QgeyB1dk5vZGUsIHN0b3JlTm9kZSB9ID0gcHJvcGVydGllcztcblxuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0eSA9IHN1cGVyLmdlbmVyYXRlKCBidWlsZGVyLCAncHJvcGVydHknICk7XG5cdFx0Y29uc3QgdXZTbmlwcGV0ID0gdXZOb2RlLmJ1aWxkKCBidWlsZGVyLCAndXZlYzInICk7XG5cdFx0Y29uc3Qgc3RvcmVTbmlwcGV0ID0gc3RvcmVOb2RlLmJ1aWxkKCBidWlsZGVyLCAndmVjNCcgKTtcblxuXHRcdGNvbnN0IHNuaXBwZXQgPSBidWlsZGVyLmdlbmVyYXRlVGV4dHVyZVN0b3JlKCBidWlsZGVyLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgc3RvcmVTbmlwcGV0ICk7XG5cblx0XHRidWlsZGVyLmFkZExpbmVGbG93Q29kZSggc25pcHBldCwgdGhpcyApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTdG9yYWdlVGV4dHVyZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHN0b3JhZ2UgdGV4dHVyZSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTdG9yYWdlVGV4dHVyZX0gdmFsdWUgLSBUaGUgc3RvcmFnZSB0ZXh0dXJlLlxuICogQHBhcmFtIHtOb2RlPHZlYzJ8dmVjMz59IHV2Tm9kZSAtIFRoZSB1diBub2RlLlxuICogQHBhcmFtIHs/Tm9kZX0gW3N0b3JlTm9kZT1udWxsXSAtIFRoZSB2YWx1ZSBub2RlIHRoYXQgc2hvdWxkIGJlIHN0b3JlZCBpbiB0aGUgdGV4dHVyZS5cbiAqIEByZXR1cm5zIHtTdG9yYWdlVGV4dHVyZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBzdG9yYWdlVGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBTdG9yYWdlVGV4dHVyZU5vZGUgKTtcblxuXG4vKipcbiAqIFRPRE86IEV4cGxhaW4gZGlmZmVyZW5jZSB0byBgc3RvcmFnZVRleHR1cmUoKWAuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1N0b3JhZ2VUZXh0dXJlfSB2YWx1ZSAtIFRoZSBzdG9yYWdlIHRleHR1cmUuXG4gKiBAcGFyYW0ge05vZGU8dmVjMnx2ZWMzPn0gdXZOb2RlIC0gVGhlIHV2IG5vZGUuXG4gKiBAcGFyYW0gez9Ob2RlfSBbc3RvcmVOb2RlPW51bGxdIC0gVGhlIHZhbHVlIG5vZGUgdGhhdCBzaG91bGQgYmUgc3RvcmVkIGluIHRoZSB0ZXh0dXJlLlxuICogQHJldHVybnMge1N0b3JhZ2VUZXh0dXJlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRleHR1cmVTdG9yZSA9ICggdmFsdWUsIHV2Tm9kZSwgc3RvcmVOb2RlICkgPT4ge1xuXG5cdGNvbnN0IG5vZGUgPSBzdG9yYWdlVGV4dHVyZSggdmFsdWUsIHV2Tm9kZSwgc3RvcmVOb2RlICk7XG5cblx0aWYgKCBzdG9yZU5vZGUgIT09IG51bGwgKSBub2RlLmFwcGVuZCgpO1xuXG5cdHJldHVybiBub2RlO1xuXG59O1xuIiwiaW1wb3J0IFRleHR1cmVOb2RlIGZyb20gJy4vVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZVByb3h5LCB2ZWMzLCBGbiwgSWYsIGludCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHRleHR1cmVTaXplIH0gZnJvbSAnLi9UZXh0dXJlU2l6ZU5vZGUuanMnO1xuXG5jb25zdCBub3JtYWwgPSBGbiggKCB7IHRleHR1cmUsIHV2IH0gKSA9PiB7XG5cblx0Y29uc3QgZXBzaWxvbiA9IDAuMDAwMTtcblxuXHRjb25zdCByZXQgPSB2ZWMzKCkudG9WYXIoKTtcblxuXHRJZiggdXYueC5sZXNzVGhhbiggZXBzaWxvbiApLCAoKSA9PiB7XG5cblx0XHRyZXQuYXNzaWduKCB2ZWMzKCAxLCAwLCAwICkgKTtcblxuXHR9ICkuRWxzZUlmKCB1di55Lmxlc3NUaGFuKCBlcHNpbG9uICksICgpID0+IHtcblxuXHRcdHJldC5hc3NpZ24oIHZlYzMoIDAsIDEsIDAgKSApO1xuXG5cdH0gKS5FbHNlSWYoIHV2LnoubGVzc1RoYW4oIGVwc2lsb24gKSwgKCkgPT4ge1xuXG5cdFx0cmV0LmFzc2lnbiggdmVjMyggMCwgMCwgMSApICk7XG5cblx0fSApLkVsc2VJZiggdXYueC5ncmVhdGVyVGhhbiggMSAtIGVwc2lsb24gKSwgKCkgPT4ge1xuXG5cdFx0cmV0LmFzc2lnbiggdmVjMyggLSAxLCAwLCAwICkgKTtcblxuXHR9ICkuRWxzZUlmKCB1di55LmdyZWF0ZXJUaGFuKCAxIC0gZXBzaWxvbiApLCAoKSA9PiB7XG5cblx0XHRyZXQuYXNzaWduKCB2ZWMzKCAwLCAtIDEsIDAgKSApO1xuXG5cdH0gKS5FbHNlSWYoIHV2LnouZ3JlYXRlclRoYW4oIDEgLSBlcHNpbG9uICksICgpID0+IHtcblxuXHRcdHJldC5hc3NpZ24oIHZlYzMoIDAsIDAsIC0gMSApICk7XG5cblx0fSApLkVsc2UoICgpID0+IHtcblxuXHRcdGNvbnN0IHN0ZXAgPSAwLjAxO1xuXG5cdFx0Y29uc3QgeCA9IHRleHR1cmUuc2FtcGxlKCB1di5hZGQoIHZlYzMoIC0gc3RlcCwgMC4wLCAwLjAgKSApICkuci5zdWIoIHRleHR1cmUuc2FtcGxlKCB1di5hZGQoIHZlYzMoIHN0ZXAsIDAuMCwgMC4wICkgKSApLnIgKTtcblx0XHRjb25zdCB5ID0gdGV4dHVyZS5zYW1wbGUoIHV2LmFkZCggdmVjMyggMC4wLCAtIHN0ZXAsIDAuMCApICkgKS5yLnN1YiggdGV4dHVyZS5zYW1wbGUoIHV2LmFkZCggdmVjMyggMC4wLCBzdGVwLCAwLjAgKSApICkuciApO1xuXHRcdGNvbnN0IHogPSB0ZXh0dXJlLnNhbXBsZSggdXYuYWRkKCB2ZWMzKCAwLjAsIDAuMCwgLSBzdGVwICkgKSApLnIuc3ViKCB0ZXh0dXJlLnNhbXBsZSggdXYuYWRkKCB2ZWMzKCAwLjAsIDAuMCwgc3RlcCApICkgKS5yICk7XG5cblx0XHRyZXQuYXNzaWduKCB2ZWMzKCB4LCB5LCB6ICkgKTtcblxuXHR9ICk7XG5cblx0cmV0dXJuIHJldC5ub3JtYWxpemUoKTtcblxufSApO1xuXG4vKipcbiAqIFRoaXMgdHlwZSBvZiB1bmlmb3JtIG5vZGUgcmVwcmVzZW50cyBhIDNEIHRleHR1cmUuXG4gKlxuICogQGF1Z21lbnRzIFRleHR1cmVOb2RlXG4gKi9cbmNsYXNzIFRleHR1cmUzRE5vZGUgZXh0ZW5kcyBUZXh0dXJlTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdUZXh0dXJlM0ROb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgM0QgdGV4dHVyZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0RhdGEzRFRleHR1cmV9IHZhbHVlIC0gVGhlIDNEIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7P05vZGU8dmVjMnx2ZWMzPn0gW3V2Tm9kZT1udWxsXSAtIFRoZSB1diBub2RlLlxuXHQgKiBAcGFyYW0gez9Ob2RlPGludD59IFtsZXZlbE5vZGU9bnVsbF0gLSBUaGUgbGV2ZWwgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSwgdXZOb2RlID0gbnVsbCwgbGV2ZWxOb2RlID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCB2YWx1ZSwgdXZOb2RlLCBsZXZlbE5vZGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNUZXh0dXJlM0ROb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0ZXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gdG8gcmV0dXJuIGEgZml4ZWQgdmFsdWUgYCd0ZXh0dXJlM0QnYC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgaW5wdXQgdHlwZS5cblx0ICovXG5cdGdldElucHV0VHlwZSggLypidWlsZGVyKi8gKSB7XG5cblx0XHRyZXR1cm4gJ3RleHR1cmUzRCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZGVmYXVsdCB1diBub2RlIHdoaWNoIGlzIGluIGNvbnRleHQgb2YgM0QgdGV4dHVyZXMgYSB0aHJlZS1kaW1lbnNpb25hbFxuXHQgKiB1diBub2RlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgZGVmYXVsdCB1diBub2RlLlxuXHQgKi9cblx0Z2V0RGVmYXVsdFVWKCkge1xuXG5cdFx0cmV0dXJuIHZlYzMoIDAuNSwgMC41LCAwLjUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHdpdGggYW4gZW1wdHkgaW1wbGVtZW50YXRpb24gc2luY2UgdGhlIGB1cGRhdGVNYXRyaXhgIGZsYWcgaXMgaWdub3JlZFxuXHQgKiBmb3IgM0QgdGV4dHVyZXMuIFRoZSB1diB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggaXMgbm90IGFwcGxpZWQgdG8gM0QgdGV4dHVyZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBUaGUgdXBkYXRlIHRvZ2dsZS5cblx0ICovXG5cdHNldFVwZGF0ZU1hdHJpeCggLyp2YWx1ZSovICkgeyB9IC8vIElnbm9yZSAudXBkYXRlTWF0cml4IGZvciAzZCBUZXh0dXJlTm9kZVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdGVzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHRvIHJldHVybiB0aGUgdW5tb2RpZmllZCB1diBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcGFyYW0ge05vZGV9IHV2Tm9kZSAtIFRoZSB1diBub2RlIHRvIHNldHVwLlxuXHQgKiBAcmV0dXJuIHtOb2RlfSBUaGUgdW5tb2RpZmllZCB1diBub2RlLlxuXHQgKi9cblx0c2V0dXBVViggYnVpbGRlciwgdXZOb2RlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IHRoaXMudmFsdWU7XG5cblx0XHRpZiAoIGJ1aWxkZXIuaXNGbGlwWSgpICYmICggdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IHRydWUgfHwgdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSA9PT0gdHJ1ZSApICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuc2FtcGxlciApIHtcblxuXHRcdFx0XHR1dk5vZGUgPSB1dk5vZGUuZmxpcFkoKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR1dk5vZGUgPSB1dk5vZGUuc2V0WSggaW50KCB0ZXh0dXJlU2l6ZSggdGhpcywgdGhpcy5sZXZlbE5vZGUgKS55ICkuc3ViKCB1dk5vZGUueSApLnN1YiggMSApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB1dk5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIHV2IGNvZGUgc25pcHBldC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHBhcmFtIHtOb2RlfSB1dk5vZGUgLSBUaGUgdXYgbm9kZSB0byBnZW5lcmF0ZSBjb2RlIGZvci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIGNvZGUgc25pcHBldC5cblx0ICovXG5cdGdlbmVyYXRlVVYoIGJ1aWxkZXIsIHV2Tm9kZSApIHtcblxuXHRcdHJldHVybiB1dk5vZGUuYnVpbGQoIGJ1aWxkZXIsICd2ZWMzJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVE9ETy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlPHZlYzM+fSB1dk5vZGUgLSBUaGUgdXYgbm9kZSAuXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRPRE8uXG5cdCAqL1xuXHRub3JtYWwoIHV2Tm9kZSApIHtcblxuXHRcdHJldHVybiBub3JtYWwoIHsgdGV4dHVyZTogdGhpcywgdXY6IHV2Tm9kZSB9ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHR1cmUzRE5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIDNEIHRleHR1cmUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7RGF0YTNEVGV4dHVyZX0gdmFsdWUgLSBUaGUgM0QgdGV4dHVyZS5cbiAqIEBwYXJhbSB7P05vZGU8dmVjMnx2ZWMzPn0gW3V2Tm9kZT1udWxsXSAtIFRoZSB1diBub2RlLlxuICogQHBhcmFtIHs/Tm9kZTxpbnQ+fSBbbGV2ZWxOb2RlPW51bGxdIC0gVGhlIGxldmVsIG5vZGUuXG4gKiBAcmV0dXJucyB7VGV4dHVyZTNETm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRleHR1cmUzRCA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBUZXh0dXJlM0ROb2RlICk7XG4iLCJpbXBvcnQgUmVmZXJlbmNlTm9kZSBmcm9tICcuL1JlZmVyZW5jZU5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZU9iamVjdCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWwgdHlwZSBvZiByZWZlcmVuY2Ugbm9kZSB0aGF0IGFsbG93cyB0byBsaW5rIHZhbHVlcyBpblxuICogYHVzZXJEYXRhYCBmaWVsZHMgdG8gbm9kZSBvYmplY3RzLlxuICogYGBganNcbiAqIHNwcml0ZS51c2VyRGF0YS5yb3RhdGlvbiA9IDE7IC8vIHN0b3JlcyBpbmRpdmlkdWFsIHJvdGF0aW9uIHBlciBzcHJpdGVcbiAqXG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TcHJpdGVOb2RlTWF0ZXJpYWwoKTtcbiAqIG1hdGVyaWFsLnJvdGF0aW9uTm9kZSA9IHVzZXJEYXRhKCAncm90YXRpb24nLCAnZmxvYXQnICk7XG4gKiBgYGBcbiAqIFNpbmNlIGBVc2VyRGF0YU5vZGVgIGlzIGV4dGVuZGVkIGZyb20ge0BsaW5rIFJlZmVyZW5jZU5vZGV9LCB0aGUgbm9kZSB2YWx1ZVxuICogd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHVwZGF0ZWQgd2hlbiB0aGUgYHJvdGF0aW9uYCB1c2VyIGRhdGEgZmllbGQgY2hhbmdlcy5cbiAqXG4gKiBAYXVnbWVudHMgUmVmZXJlbmNlTm9kZVxuICovXG5jbGFzcyBVc2VyRGF0YU5vZGUgZXh0ZW5kcyBSZWZlcmVuY2VOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1VzZXJEYXRhTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHVzZXIgZGF0YSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgLSBUaGUgcHJvcGVydHkgbmFtZSB0aGF0IHNob3VsZCBiZSByZWZlcmVuY2VkIGJ5IHRoZSBub2RlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRUeXBlIC0gVGhlIG5vZGUgZGF0YSB0eXBlIG9mIHRoZSByZWZlcmVuY2UuXG5cdCAqIEBwYXJhbSB7P09iamVjdH0gW3VzZXJEYXRhPW51bGxdIC0gQSByZWZlcmVuY2UgdG8gdGhlIGB1c2VyRGF0YWAgb2JqZWN0LiBJZiBub3QgcHJvdmlkZWQsIHRoZSBgdXNlckRhdGFgIHByb3BlcnR5IG9mIHRoZSAzRCBvYmplY3QgdGhhdCB1c2VzIHRoZSBub2RlIG1hdGVyaWFsIGlzIGV2YWx1YXRlZC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwcm9wZXJ0eSwgaW5wdXRUeXBlLCB1c2VyRGF0YSA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggcHJvcGVydHksIGlucHV0VHlwZSwgdXNlckRhdGEgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgdXNlckRhdGFgIG9iamVjdC4gSWYgbm90IHByb3ZpZGVkLCB0aGUgYHVzZXJEYXRhYFxuXHRcdCAqIHByb3BlcnR5IG9mIHRoZSAzRCBvYmplY3QgdGhhdCB1c2VzIHRoZSBub2RlIG1hdGVyaWFsIGlzIGV2YWx1YXRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnVzZXJEYXRhID0gdXNlckRhdGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiB0byBtYWtlIHN1cmUge0BsaW5rIFJlZmVyZW5jZU5vZGUjcmVmZXJlbmNlfSBwb2ludHMgdG8gdGhlIGNvcnJlY3Rcblx0ICogYHVzZXJEYXRhYCBmaWVsZC5cblx0ICpcblx0ICogQHBhcmFtIHsoTm9kZUZyYW1lfE5vZGVCdWlsZGVyKX0gc3RhdGUgLSBUaGUgY3VycmVudCBzdGF0ZSB0byBldmFsdWF0ZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBBIHJlZmVyZW5jZSB0byB0aGUgYHVzZXJEYXRhYCBmaWVsZC5cblx0ICovXG5cdHVwZGF0ZVJlZmVyZW5jZSggc3RhdGUgKSB7XG5cblx0XHR0aGlzLnJlZmVyZW5jZSA9IHRoaXMudXNlckRhdGEgIT09IG51bGwgPyB0aGlzLnVzZXJEYXRhIDogc3RhdGUub2JqZWN0LnVzZXJEYXRhO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVmZXJlbmNlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBVc2VyRGF0YU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHVzZXIgZGF0YSBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgcHJvcGVydHkgbmFtZSB0aGF0IHNob3VsZCBiZSByZWZlcmVuY2VkIGJ5IHRoZSBub2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0VHlwZSAtIFRoZSBub2RlIGRhdGEgdHlwZSBvZiB0aGUgcmVmZXJlbmNlLlxuICogQHBhcmFtIHs/T2JqZWN0fSB1c2VyRGF0YSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBgdXNlckRhdGFgIG9iamVjdC4gSWYgbm90IHByb3ZpZGVkLCB0aGUgYHVzZXJEYXRhYCBwcm9wZXJ0eSBvZiB0aGUgM0Qgb2JqZWN0IHRoYXQgdXNlcyB0aGUgbm9kZSBtYXRlcmlhbCBpcyBldmFsdWF0ZWQuXG4gKiBAcmV0dXJucyB7VXNlckRhdGFOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdXNlckRhdGEgPSAoIG5hbWUsIGlucHV0VHlwZSwgdXNlckRhdGEgKSA9PiBub2RlT2JqZWN0KCBuZXcgVXNlckRhdGFOb2RlKCBuYW1lLCBpbnB1dFR5cGUsIHVzZXJEYXRhICkgKTtcbiIsImltcG9ydCBUZW1wTm9kZSBmcm9tICcuLi9jb3JlL1RlbXBOb2RlLmpzJztcbmltcG9ydCB7IG1vZGVsVmlld01hdHJpeCB9IGZyb20gJy4vTW9kZWxOb2RlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uTG9jYWwsIHBvc2l0aW9uUHJldmlvdXMgfSBmcm9tICcuL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IG5vZGVJbW11dGFibGUgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBOb2RlVXBkYXRlVHlwZSB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi8uLi9tYXRoL01hdHJpeDQuanMnO1xuaW1wb3J0IHsgdW5pZm9ybSB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybU5vZGUuanMnO1xuaW1wb3J0IHsgc3ViIH0gZnJvbSAnLi4vbWF0aC9PcGVyYXRvck5vZGUuanMnO1xuaW1wb3J0IHsgY2FtZXJhUHJvamVjdGlvbk1hdHJpeCB9IGZyb20gJy4vQ2FtZXJhLmpzJztcbmltcG9ydCB7IHJlbmRlckdyb3VwIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtR3JvdXBOb2RlLmpzJztcblxuY29uc3QgX29iamVjdERhdGEgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEEgbm9kZSBmb3IgcmVwcmVzZW50aW5nIG1vdGlvbiBvciB2ZWxvY2l0eSB2ZWN0b3JzLiBGb3VuZGF0aW9uXG4gKiBmb3IgYWR2YW5jZWQgcG9zdCBwcm9jZXNzaW5nIGVmZmVjdHMgbGlrZSBtb3Rpb24gYmx1ciBvciBUUkFBLlxuICpcbiAqIFRoZSBub2RlIGtlZXBzIHRyYWNrIG9mIHRoZSBtb2RlbCwgdmlldyBhbmQgcHJvamVjdGlvbiBtYXRyaWNlc1xuICogb2YgdGhlIHByZXZpb3VzIGZyYW1lIGFuZCB1c2VzIHRoZW0gdG8gY29tcHV0ZSBvZmZzZXRzIGluIE5EQyBzcGFjZS5cbiAqIFRoZXNlIG9mZnNldHMgcmVwcmVzZW50IHRoZSBmaW5hbCB2ZWxvY2l0eS5cbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgVmVsb2NpdHlOb2RlIGV4dGVuZHMgVGVtcE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnVmVsb2NpdHlOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdmVydGV4IGNvbG9yIG5vZGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCAndmVjMicgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjdXJyZW50IHByb2plY3Rpb24gbWF0cml4LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9NYXRyaXg0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXggPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogT3ZlcndyaXR0ZW4gc2luY2UgdmVsb2NpdHkgbm9kZXMgYXJlIHVwZGF0ZWQgcGVyIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ29iamVjdCdcblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZVR5cGUgPSBOb2RlVXBkYXRlVHlwZS5PQkpFQ1Q7XG5cblx0XHQvKipcblx0XHQgKiBPdmVyd3JpdHRlbiBzaW5jZSB2ZWxvY2l0eSBub2RlcyBzYXZlIGRhdGEgYWZ0ZXIgdGhlIHVwZGF0ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ29iamVjdCdcblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZUFmdGVyVHlwZSA9IE5vZGVVcGRhdGVUeXBlLk9CSkVDVDtcblxuXHRcdC8qKlxuXHRcdCAqIFVuaWZvcm0gbm9kZSByZXByZXNlbnRpbmcgdGhlIHByZXZpb3VzIG1vZGVsIG1hdHJpeCBpbiB3b3JsZCBzcGFjZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtVbmlmb3JtTm9kZTxtYXQ0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5wcmV2aW91c01vZGVsV29ybGRNYXRyaXggPSB1bmlmb3JtKCBuZXcgTWF0cml4NCgpICk7XG5cblx0XHQvKipcblx0XHQgKiBVbmlmb3JtIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBwcmV2aW91cyBwcm9qZWN0aW9uIG1hdHJpeC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtVbmlmb3JtTm9kZTxtYXQ0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5wcmV2aW91c1Byb2plY3Rpb25NYXRyaXggPSB1bmlmb3JtKCBuZXcgTWF0cml4NCgpICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cblx0XHQvKipcblx0XHQgKiBVbmlmb3JtIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBwcmV2aW91cyB2aWV3IG1hdHJpeC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtVbmlmb3JtTm9kZTxtYXQ0Pn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5wcmV2aW91c0NhbWVyYVZpZXdNYXRyaXggPSB1bmlmb3JtKCBuZXcgTWF0cml4NCgpICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBwcm9qZWN0aW9uIG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBwcm9qZWN0aW9uTWF0cml4IC0gVGhlIHByb2plY3Rpb24gbWF0cml4IHRvIHNldC5cblx0ICovXG5cdHNldFByb2plY3Rpb25NYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKSB7XG5cblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXggPSBwcm9qZWN0aW9uTWF0cml4O1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB2ZWxvY2l0eSBzcGVjaWZpYyB1bmlmb3Jtcy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlRnJhbWV9IGZyYW1lIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBmcmFtZS5cblx0ICovXG5cdHVwZGF0ZSggeyBmcmFtZUlkLCBjYW1lcmEsIG9iamVjdCB9ICkge1xuXG5cdFx0Y29uc3QgcHJldmlvdXNNb2RlbE1hdHJpeCA9IGdldFByZXZpb3VzTWF0cml4KCBvYmplY3QgKTtcblxuXHRcdHRoaXMucHJldmlvdXNNb2RlbFdvcmxkTWF0cml4LnZhbHVlLmNvcHkoIHByZXZpb3VzTW9kZWxNYXRyaXggKTtcblxuXHRcdC8vXG5cblx0XHRjb25zdCBjYW1lcmFEYXRhID0gZ2V0RGF0YSggY2FtZXJhICk7XG5cblx0XHRpZiAoIGNhbWVyYURhdGEuZnJhbWVJZCAhPT0gZnJhbWVJZCApIHtcblxuXHRcdFx0Y2FtZXJhRGF0YS5mcmFtZUlkID0gZnJhbWVJZDtcblxuXHRcdFx0aWYgKCBjYW1lcmFEYXRhLnByZXZpb3VzUHJvamVjdGlvbk1hdHJpeCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNhbWVyYURhdGEucHJldmlvdXNQcm9qZWN0aW9uTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0XHRcdFx0Y2FtZXJhRGF0YS5wcmV2aW91c0NhbWVyYVZpZXdNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0XHRcdGNhbWVyYURhdGEuY3VycmVudFByb2plY3Rpb25NYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdFx0XHRjYW1lcmFEYXRhLmN1cnJlbnRDYW1lcmFWaWV3TWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdFx0XHRjYW1lcmFEYXRhLnByZXZpb3VzUHJvamVjdGlvbk1hdHJpeC5jb3B5KCB0aGlzLnByb2plY3Rpb25NYXRyaXggfHwgY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblx0XHRcdFx0Y2FtZXJhRGF0YS5wcmV2aW91c0NhbWVyYVZpZXdNYXRyaXguY29weSggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNhbWVyYURhdGEucHJldmlvdXNQcm9qZWN0aW9uTWF0cml4LmNvcHkoIGNhbWVyYURhdGEuY3VycmVudFByb2plY3Rpb25NYXRyaXggKTtcblx0XHRcdFx0Y2FtZXJhRGF0YS5wcmV2aW91c0NhbWVyYVZpZXdNYXRyaXguY29weSggY2FtZXJhRGF0YS5jdXJyZW50Q2FtZXJhVmlld01hdHJpeCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNhbWVyYURhdGEuY3VycmVudFByb2plY3Rpb25NYXRyaXguY29weSggdGhpcy5wcm9qZWN0aW9uTWF0cml4IHx8IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0XHRjYW1lcmFEYXRhLmN1cnJlbnRDYW1lcmFWaWV3TWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblxuXHRcdFx0dGhpcy5wcmV2aW91c1Byb2plY3Rpb25NYXRyaXgudmFsdWUuY29weSggY2FtZXJhRGF0YS5wcmV2aW91c1Byb2plY3Rpb25NYXRyaXggKTtcblx0XHRcdHRoaXMucHJldmlvdXNDYW1lcmFWaWV3TWF0cml4LnZhbHVlLmNvcHkoIGNhbWVyYURhdGEucHJldmlvdXNDYW1lcmFWaWV3TWF0cml4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiB0byB1cGRhdGVkIHZlbG9jaXR5IHNwZWNpZmljIHVuaWZvcm1zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlQWZ0ZXIoIHsgb2JqZWN0IH0gKSB7XG5cblx0XHRnZXRQcmV2aW91c01hdHJpeCggb2JqZWN0ICkuY29weSggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbXBsZW1lbnRzIHRoZSB2ZWxvY2l0eSBjb21wdXRhdGlvbiBiYXNlZCBvbiB0aGUgcHJldmlvdXMgYW5kIGN1cnJlbnQgdmVydGV4IGRhdGEuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge05vZGU8dmVjMj59IFRoZSBtb3Rpb24gdmVjdG9yLlxuXHQgKi9cblx0c2V0dXAoIC8qYnVpbGRlciovICkge1xuXG5cdFx0Y29uc3QgcHJvamVjdGlvbk1hdHJpeCA9ICggdGhpcy5wcm9qZWN0aW9uTWF0cml4ID09PSBudWxsICkgPyBjYW1lcmFQcm9qZWN0aW9uTWF0cml4IDogdW5pZm9ybSggdGhpcy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRjb25zdCBwcmV2aW91c01vZGVsVmlld01hdHJpeCA9IHRoaXMucHJldmlvdXNDYW1lcmFWaWV3TWF0cml4Lm11bCggdGhpcy5wcmV2aW91c01vZGVsV29ybGRNYXRyaXggKTtcblxuXHRcdGNvbnN0IGNsaXBQb3NpdGlvbkN1cnJlbnQgPSBwcm9qZWN0aW9uTWF0cml4Lm11bCggbW9kZWxWaWV3TWF0cml4ICkubXVsKCBwb3NpdGlvbkxvY2FsICk7XG5cdFx0Y29uc3QgY2xpcFBvc2l0aW9uUHJldmlvdXMgPSB0aGlzLnByZXZpb3VzUHJvamVjdGlvbk1hdHJpeC5tdWwoIHByZXZpb3VzTW9kZWxWaWV3TWF0cml4ICkubXVsKCBwb3NpdGlvblByZXZpb3VzICk7XG5cblx0XHRjb25zdCBuZGNQb3NpdGlvbkN1cnJlbnQgPSBjbGlwUG9zaXRpb25DdXJyZW50Lnh5LmRpdiggY2xpcFBvc2l0aW9uQ3VycmVudC53ICk7XG5cdFx0Y29uc3QgbmRjUG9zaXRpb25QcmV2aW91cyA9IGNsaXBQb3NpdGlvblByZXZpb3VzLnh5LmRpdiggY2xpcFBvc2l0aW9uUHJldmlvdXMudyApO1xuXG5cdFx0Y29uc3QgdmVsb2NpdHkgPSBzdWIoIG5kY1Bvc2l0aW9uQ3VycmVudCwgbmRjUG9zaXRpb25QcmV2aW91cyApO1xuXG5cdFx0cmV0dXJuIHZlbG9jaXR5O1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBnZXREYXRhKCBvYmplY3QgKSB7XG5cblx0bGV0IG9iamVjdERhdGEgPSBfb2JqZWN0RGF0YS5nZXQoIG9iamVjdCApO1xuXG5cdGlmICggb2JqZWN0RGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0b2JqZWN0RGF0YSA9IHt9O1xuXHRcdF9vYmplY3REYXRhLnNldCggb2JqZWN0LCBvYmplY3REYXRhICk7XG5cblx0fVxuXG5cdHJldHVybiBvYmplY3REYXRhO1xuXG59XG5cbmZ1bmN0aW9uIGdldFByZXZpb3VzTWF0cml4KCBvYmplY3QsIGluZGV4ID0gMCApIHtcblxuXHRjb25zdCBvYmplY3REYXRhID0gZ2V0RGF0YSggb2JqZWN0ICk7XG5cblx0bGV0IG1hdHJpeCA9IG9iamVjdERhdGFbIGluZGV4IF07XG5cblx0aWYgKCBtYXRyaXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdG9iamVjdERhdGFbIGluZGV4IF0gPSBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdH1cblxuXHRyZXR1cm4gbWF0cml4O1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFZlbG9jaXR5Tm9kZTtcblxuLyoqXG4gKiBUU0wgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgdmVsb2NpdHkgb2YgYSByZW5kZXIgcGFzcy5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7VmVsb2NpdHlOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdmVsb2NpdHkgPSAvKkBfX1BVUkVfXyovIG5vZGVJbW11dGFibGUoIFZlbG9jaXR5Tm9kZSApO1xuIiwiaW1wb3J0IHsgRm4sIHZlYzQgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBtaXgsIG1pbiwgc3RlcCB9IGZyb20gJy4uL21hdGgvTWF0aE5vZGUuanMnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBcIkNvbG9yIEJ1cm5cIiBibGVuZCBtb2RlLlxuICpcbiAqIEl0J3MgZGVzaWduZWQgdG8gZGFya2VuIHRoZSBiYXNlIGxheWVyJ3MgY29sb3JzIGJhc2VkIG9uIHRoZSBjb2xvciBvZiB0aGUgYmxlbmQgbGF5ZXIuXG4gKiBJdCBzaWduaWZpY2FudGx5IGluY3JlYXNlcyB0aGUgY29udHJhc3Qgb2YgdGhlIGJhc2UgbGF5ZXIsIG1ha2luZyB0aGUgY29sb3JzIG1vcmUgdmlicmFudCBhbmQgc2F0dXJhdGVkLlxuICogVGhlIGRhcmtlciB0aGUgY29sb3IgaW4gdGhlIGJsZW5kIGxheWVyLCB0aGUgc3Ryb25nZXIgdGhlIGRhcmtlbmluZyBhbmQgY29udHJhc3QgZWZmZWN0IG9uIHRoZSBiYXNlIGxheWVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBiYXNlIC0gVGhlIGJhc2UgY29sb3IuXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IGJsZW5kIC0gVGhlIGJsZW5kIGNvbG9yLiBBIHdoaXRlICgjZmZmZmZmKSBibGVuZCBjb2xvciBkb2VzIG5vdCBhbHRlciB0aGUgYmFzZSBjb2xvci5cbiAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBjb25zdCBibGVuZEJ1cm4gPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgYmFzZSwgYmxlbmQgXSApID0+IHtcblxuXHRyZXR1cm4gbWluKCAxLjAsIGJhc2Uub25lTWludXMoKS5kaXYoIGJsZW5kICkgKS5vbmVNaW51cygpO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdibGVuZEJ1cm4nLFxuXHR0eXBlOiAndmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ2Jhc2UnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdibGVuZCcsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgXCJDb2xvciBEb2RnZVwiIGJsZW5kIG1vZGUuXG4gKlxuICogSXQncyBkZXNpZ25lZCB0byBsaWdodGVuIHRoZSBiYXNlIGxheWVyJ3MgY29sb3JzIGJhc2VkIG9uIHRoZSBjb2xvciBvZiB0aGUgYmxlbmQgbGF5ZXIuXG4gKiBJdCBzaWduaWZpY2FudGx5IGluY3JlYXNlcyB0aGUgYnJpZ2h0bmVzcyBvZiB0aGUgYmFzZSBsYXllciwgbWFraW5nIHRoZSBjb2xvcnMgbGlnaHRlciBhbmQgbW9yZSB2aWJyYW50LlxuICogVGhlIGJyaWdodGVyIHRoZSBjb2xvciBpbiB0aGUgYmxlbmQgbGF5ZXIsIHRoZSBzdHJvbmdlciB0aGUgbGlnaHRlbmluZyBhbmQgY29udHJhc3QgZWZmZWN0IG9uIHRoZSBiYXNlIGxheWVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBiYXNlIC0gVGhlIGJhc2UgY29sb3IuXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IGJsZW5kIC0gVGhlIGJsZW5kIGNvbG9yLiBBIGJsYWNrICgjMDAwMDAwKSBibGVuZCBjb2xvciBkb2VzIG5vdCBhbHRlciB0aGUgYmFzZSBjb2xvci5cbiAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSByZXN1bHQuXG4gKi9cbmV4cG9ydCBjb25zdCBibGVuZERvZGdlID0gLypAX19QVVJFX18qLyBGbiggKCBbIGJhc2UsIGJsZW5kIF0gKSA9PiB7XG5cblx0cmV0dXJuIG1pbiggYmFzZS5kaXYoIGJsZW5kLm9uZU1pbnVzKCkgKSwgMS4wICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ2JsZW5kRG9kZ2UnLFxuXHR0eXBlOiAndmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ2Jhc2UnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdibGVuZCcsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgXCJTY3JlZW5cIiBibGVuZCBtb2RlLlxuICpcbiAqIFNpbWlsYXIgdG8gYGJsZW5kRG9kZ2UoKWAsIHRoaXMgbW9kZSBhbHNvIGxpZ2h0ZW5zIHRoZSBiYXNlIGxheWVyJ3MgY29sb3JzIGJhc2VkIG9uIHRoZSBjb2xvciBvZiB0aGUgYmxlbmQgbGF5ZXIuXG4gKiBUaGUgXCJTY3JlZW5cIiBibGVuZCBtb2RlIGlzIGJldHRlciBmb3IgZ2VuZXJhbCBicmlnaHRlbmluZyB3aGVyZWFzIHRoZSBcIkRvZGdlXCIgcmVzdWx0cyBpbiBtb3JlIHN1YnRsZSBhbmQgbnVhbmNlZFxuICogZWZmZWN0cy5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gYmFzZSAtIFRoZSBiYXNlIGNvbG9yLlxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBibGVuZCAtIFRoZSBibGVuZCBjb2xvci4gQSBibGFjayAoIzAwMDAwMCkgYmxlbmQgY29sb3IgZG9lcyBub3QgYWx0ZXIgdGhlIGJhc2UgY29sb3IuXG4gKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgcmVzdWx0LlxuICovXG5leHBvcnQgY29uc3QgYmxlbmRTY3JlZW4gPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgYmFzZSwgYmxlbmQgXSApID0+IHtcblxuXHRyZXR1cm4gYmFzZS5vbmVNaW51cygpLm11bCggYmxlbmQub25lTWludXMoKSApLm9uZU1pbnVzKCk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ2JsZW5kU2NyZWVuJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdiYXNlJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAnYmxlbmQnLCB0eXBlOiAndmVjMycgfVxuXHRdXG59ICk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIFwiT3ZlcmxheVwiIGJsZW5kIG1vZGUuXG4gKlxuICogSXQncyBkZXNpZ25lZCB0byBpbmNyZWFzZSB0aGUgY29udHJhc3Qgb2YgdGhlIGJhc2UgbGF5ZXIgYmFzZWQgb24gdGhlIGNvbG9yIG9mIHRoZSBibGVuZCBsYXllci5cbiAqIEl0IGFtcGxpZmllcyB0aGUgZXhpc3RpbmcgY29sb3JzIGFuZCBjb250cmFzdCBpbiB0aGUgYmFzZSBsYXllciwgbWFraW5nIGxpZ2h0ZXIgYXJlYXMgbGlnaHRlciBhbmQgZGFya2VyIGFyZWFzIGRhcmtlci5cbiAqIFRoZSBjb2xvciBvZiB0aGUgYmxlbmQgbGF5ZXIgc2lnbmlmaWNhbnRseSBpbmZsdWVuY2VzIHRoZSByZXN1bHRpbmcgY29udHJhc3QgYW5kIGNvbG9yIHNoaWZ0IGluIHRoZSBiYXNlIGxheWVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBiYXNlIC0gVGhlIGJhc2UgY29sb3IuXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IGJsZW5kIC0gVGhlIGJsZW5kIGNvbG9yXG4gKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgcmVzdWx0LlxuICovXG5leHBvcnQgY29uc3QgYmxlbmRPdmVybGF5ID0gLypAX19QVVJFX18qLyBGbiggKCBbIGJhc2UsIGJsZW5kIF0gKSA9PiB7XG5cblx0cmV0dXJuIG1peCggYmFzZS5tdWwoIDIuMCApLm11bCggYmxlbmQgKSwgYmFzZS5vbmVNaW51cygpLm11bCggMi4wICkubXVsKCBibGVuZC5vbmVNaW51cygpICkub25lTWludXMoKSwgc3RlcCggMC41LCBiYXNlICkgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnYmxlbmRPdmVybGF5Jyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdiYXNlJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAnYmxlbmQnLCB0eXBlOiAndmVjMycgfVxuXHRdXG59ICk7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBibGVuZHMgdHdvIGNvbG9yIGJhc2VkIG9uIHRoZWlyIGFscGhhIHZhbHVlcyBieSByZXBsaWNhdGluZyB0aGUgYmVoYXZpb3Igb2YgYFRIUkVFLk5vcm1hbEJsZW5kaW5nYC5cbiAqIEl0IGFzc3VtZXMgYm90aCBpbnB1dCBjb2xvcnMgaGF2ZSBub24tcHJlbXVsdGlwbGllZCBhbHBoYS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWM0Pn0gYmFzZSAtIFRoZSBiYXNlIGNvbG9yLlxuICogQHBhcmFtIHtOb2RlPHZlYzQ+fSBibGVuZCAtIFRoZSBibGVuZCBjb2xvclxuICogQHJldHVybiB7Tm9kZTx2ZWM0Pn0gVGhlIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGJsZW5kQ29sb3IgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgYmFzZSwgYmxlbmQgXSApID0+IHtcblxuXHRjb25zdCBvdXRBbHBoYSA9IGJsZW5kLmEuYWRkKCBiYXNlLmEubXVsKCBibGVuZC5hLm9uZU1pbnVzKCkgKSApO1xuXG5cdHJldHVybiB2ZWM0KCBibGVuZC5yZ2IubXVsKCBibGVuZC5hICkuYWRkKCBiYXNlLnJnYi5tdWwoIGJhc2UuYSApLm11bCggYmxlbmQuYS5vbmVNaW51cygpICkgKS5kaXYoIG91dEFscGhhICksIG91dEFscGhhICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ2JsZW5kQ29sb3InLFxuXHR0eXBlOiAndmVjNCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ2Jhc2UnLCB0eXBlOiAndmVjNCcgfSxcblx0XHR7IG5hbWU6ICdibGVuZCcsIHR5cGU6ICd2ZWM0JyB9XG5cdF1cbn0gKTtcblxuLy8gRGVwcmVjYXRlZFxuXG4vKipcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQGRlcHJlY2F0ZWQgc2luY2UgcjE3MS4gVXNlIHtAbGluayBibGVuZEJ1cm59IGluc3RlYWQuXG4gKlxuICogQHBhcmFtICB7Li4uYW55fSBwYXJhbXNcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGJ1cm4gPSAoIC4uLnBhcmFtcyApID0+IHsgLy8gQGRlcHJlY2F0ZWQsIHIxNzFcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5UU0w6IFwiYnVyblwiIGhhcyBiZWVuIHJlbmFtZWQuIFVzZSBcImJsZW5kQnVyblwiIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gYmxlbmRCdXJuKCBwYXJhbXMgKTtcblxufTtcblxuLyoqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBkZXByZWNhdGVkIHNpbmNlIHIxNzEuIFVzZSB7QGxpbmsgYmxlbmREb2RnZX0gaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gIHsuLi5hbnl9IHBhcmFtc1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgY29uc3QgZG9kZ2UgPSAoIC4uLnBhcmFtcyApID0+IHsgLy8gQGRlcHJlY2F0ZWQsIHIxNzFcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5UU0w6IFwiZG9kZ2VcIiBoYXMgYmVlbiByZW5hbWVkLiBVc2UgXCJibGVuZERvZGdlXCIgaW5zdGVhZC4nICk7XG5cdHJldHVybiBibGVuZERvZGdlKCBwYXJhbXMgKTtcblxufTtcblxuLyoqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBkZXByZWNhdGVkIHNpbmNlIHIxNzEuIFVzZSB7QGxpbmsgYmxlbmRTY3JlZW59IGluc3RlYWQuXG4gKlxuICogQHBhcmFtICB7Li4uYW55fSBwYXJhbXNcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGNvbnN0IHNjcmVlbiA9ICggLi4ucGFyYW1zICkgPT4geyAvLyBAZGVwcmVjYXRlZCwgcjE3MVxuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRTTDogXCJzY3JlZW5cIiBoYXMgYmVlbiByZW5hbWVkLiBVc2UgXCJibGVuZFNjcmVlblwiIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gYmxlbmRTY3JlZW4oIHBhcmFtcyApO1xuXG59O1xuXG4vKipcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQGRlcHJlY2F0ZWQgc2luY2UgcjE3MS4gVXNlIHtAbGluayBibGVuZE92ZXJsYXl9IGluc3RlYWQuXG4gKlxuICogQHBhcmFtICB7Li4uYW55fSBwYXJhbXNcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGNvbnN0IG92ZXJsYXkgPSAoIC4uLnBhcmFtcyApID0+IHsgLy8gQGRlcHJlY2F0ZWQsIHIxNzFcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5UU0w6IFwib3ZlcmxheVwiIGhhcyBiZWVuIHJlbmFtZWQuIFVzZSBcImJsZW5kT3ZlcmxheVwiIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gYmxlbmRPdmVybGF5KCBwYXJhbXMgKTtcblxufTtcbiIsImltcG9ydCB7IGRvdCwgbWF4LCBtaXggfSBmcm9tICcuLi9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IGFkZCB9IGZyb20gJy4uL21hdGgvT3BlcmF0b3JOb2RlLmpzJztcbmltcG9ydCB7IEZuLCBJZiwgZmxvYXQsIHZlYzMsIHZlYzQgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBDb2xvck1hbmFnZW1lbnQgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yTWFuYWdlbWVudC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IExpbmVhclNSR0JDb2xvclNwYWNlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBDb21wdXRlcyBhIGdyYXlzY2FsZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIFJHQiBjb2xvciB2YWx1ZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gY29sb3IgLSBUaGUgY29sb3IgdmFsdWUgdG8gY29tcHV0ZSB0aGUgZ3JheXNjYWxlIGZvci5cbiAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSBncmF5c2NhbGUgY29sb3IuXG4gKi9cbmV4cG9ydCBjb25zdCBncmF5c2NhbGUgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgY29sb3IgXSApID0+IHtcblxuXHRyZXR1cm4gbHVtaW5hbmNlKCBjb2xvci5yZ2IgKTtcblxufSApO1xuXG4vKipcbiAqIFN1cGVyLXNhdHVyYXRlcyBvciBkZXNhdHVyYXRlcyB0aGUgZ2l2ZW4gUkdCIGNvbG9yLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBjb2xvciAtIFRoZSBpbnB1dCBjb2xvci5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IFthZGp1c3RtZW50PTFdIC0gU3BlY2lmaWVzIHRoZSBhbW91bnQgb2YgdGhlIGNvbnZlcnNpb24uIEEgdmFsdWUgdW5kZXIgYDFgIGRlc2F0dXJhdGVzIHRoZSBjb2xvciwgYSB2YWx1ZSBvdmVyIGAxYCBzdXBlci1zYXR1cmF0ZXMgaXQuXG4gKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgc2F0dXJhdGVkIGNvbG9yLlxuICovXG5leHBvcnQgY29uc3Qgc2F0dXJhdGlvbiA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBjb2xvciwgYWRqdXN0bWVudCA9IGZsb2F0KCAxICkgXSApID0+IHtcblxuXHRyZXR1cm4gYWRqdXN0bWVudC5taXgoIGx1bWluYW5jZSggY29sb3IucmdiICksIGNvbG9yLnJnYiApO1xuXG59ICk7XG5cbi8qKlxuICogU2VsZWN0aXZlbHkgZW5oYW5jZSB0aGUgaW50ZW5zaXR5IG9mIGxlc3Mgc2F0dXJhdGVkIFJHQiBjb2xvcnMuIENhbiByZXN1bHRcbiAqIGluIGEgbW9yZSBuYXR1cmFsIGFuZCB2aXN1YWxseSBhcHBlYWxpbmcgaW1hZ2Ugd2l0aCBlbmhhbmNlZCBjb2xvciBkZXB0aFxuICogY29tcGFyZWQgdG8ge0BsaW5rIENvbG9yQWRqdXN0bWVudCNzYXR1cmF0aW9ufS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gY29sb3IgLSBUaGUgaW5wdXQgY29sb3IuXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBbYWRqdXN0bWVudD0xXSAtIENvbnRyb2xzIHRoZSBpbnRlbnNpdHkgb2YgdGhlIHZpYnJhbmNlIGVmZmVjdC5cbiAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSB1cGRhdGVkIGNvbG9yLlxuICovXG5leHBvcnQgY29uc3QgdmlicmFuY2UgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgY29sb3IsIGFkanVzdG1lbnQgPSBmbG9hdCggMSApIF0gKSA9PiB7XG5cblx0Y29uc3QgYXZlcmFnZSA9IGFkZCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApLmRpdiggMy4wICk7XG5cblx0Y29uc3QgbXggPSBjb2xvci5yLm1heCggY29sb3IuZy5tYXgoIGNvbG9yLmIgKSApO1xuXHRjb25zdCBhbXQgPSBteC5zdWIoIGF2ZXJhZ2UgKS5tdWwoIGFkanVzdG1lbnQgKS5tdWwoIC0gMy4wICk7XG5cblx0cmV0dXJuIG1peCggY29sb3IucmdiLCBteCwgYW10ICk7XG5cbn0gKTtcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBodWUgY29tcG9uZW50IG9mIHRoZSBnaXZlbiBSR0IgY29sb3Igd2hpbGUgcHJlc2VydmluZyBpdHMgbHVtaW5hbmNlIGFuZCBzYXR1cmF0aW9uLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBjb2xvciAtIFRoZSBpbnB1dCBjb2xvci5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IFthZGp1c3RtZW50PTFdIC0gRGVmaW5lcyB0aGUgZGVncmVlIG9mIGh1ZSByb3RhdGlvbiBpbiByYWRpYW5zLiBBIHBvc2l0aXZlIHZhbHVlIHJvdGF0ZXMgdGhlIGh1ZSBjbG9ja3dpc2UsIHdoaWxlIGEgbmVnYXRpdmUgdmFsdWUgcm90YXRlcyBpdCBjb3VudGVyY2xvY2t3aXNlLlxuICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHVwZGF0ZWQgY29sb3IuXG4gKi9cbmV4cG9ydCBjb25zdCBodWUgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgY29sb3IsIGFkanVzdG1lbnQgPSBmbG9hdCggMSApIF0gKSA9PiB7XG5cblx0Y29uc3QgayA9IHZlYzMoIDAuNTc3MzUsIDAuNTc3MzUsIDAuNTc3MzUgKTtcblxuXHRjb25zdCBjb3NBbmdsZSA9IGFkanVzdG1lbnQuY29zKCk7XG5cblx0cmV0dXJuIHZlYzMoIGNvbG9yLnJnYi5tdWwoIGNvc0FuZ2xlICkuYWRkKCBrLmNyb3NzKCBjb2xvci5yZ2IgKS5tdWwoIGFkanVzdG1lbnQuc2luKCkgKS5hZGQoIGsubXVsKCBkb3QoIGssIGNvbG9yLnJnYiApLm11bCggY29zQW5nbGUub25lTWludXMoKSApICkgKSApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbHVtaW5hbmNlIGZvciB0aGUgZ2l2ZW4gUkdCIGNvbG9yIHZhbHVlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBjb2xvciAtIFRoZSBjb2xvciB2YWx1ZSB0byBjb21wdXRlIHRoZSBsdW1pbmFuY2UgZm9yLlxuICogQHBhcmFtIHs/Tm9kZTx2ZWMzPn0gbHVtaW5hbmNlQ29lZmZpY2llbnRzIC0gVGhlIGx1bWluYW5jZSBjb2VmZmljaWVudHMuIEJ5IGRlZmF1bHQgcHJlZGVmaW5lZCB2YWx1ZXMgb2YgdGhlIGN1cnJlbnQgd29ya2luZyBjb2xvciBzcGFjZSBhcmUgdXNlZC5cbiAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSBsdW1pbmFuY2UuXG4gKi9cbmV4cG9ydCBjb25zdCBsdW1pbmFuY2UgPSAoXG5cdGNvbG9yLFxuXHRsdW1pbmFuY2VDb2VmZmljaWVudHMgPSB2ZWMzKCBDb2xvck1hbmFnZW1lbnQuZ2V0THVtaW5hbmNlQ29lZmZpY2llbnRzKCBuZXcgVmVjdG9yMygpICkgKVxuKSA9PiBkb3QoIGNvbG9yLCBsdW1pbmFuY2VDb2VmZmljaWVudHMgKTtcblxuLyoqXG4gKiBDb2xvciBEZWNpc2lvbiBMaXN0IChDREwpIHYxLjJcbiAqXG4gKiBDb21wYWN0IHJlcHJlc2VudGF0aW9uIG9mIGNvbG9yIGdyYWRpbmcgaW5mb3JtYXRpb24sIGRlZmluZWQgYnkgc2xvcGUsIG9mZnNldCwgcG93ZXIsIGFuZFxuICogc2F0dXJhdGlvbi4gVGhlIENETCBzaG91bGQgYmUgdHlwaWNhbGx5IGJlIGdpdmVuIGlucHV0IGluIGEgbG9nIHNwYWNlIChzdWNoIGFzIExvZ0MsIEFDRVNjYyxcbiAqIG9yIEFnWCBMb2cpLCBhbmQgd2lsbCByZXR1cm4gb3V0cHV0IGluIHRoZSBzYW1lIHNwYWNlLiBPdXRwdXQgbWF5IHJlcXVpcmUgY2xhbXBpbmcgPj0wLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzQ+fSBjb2xvciBJbnB1dCAoLUluZmluaXR5IDwgaW5wdXQgPCArSW5maW5pdHkpXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IHNsb3BlIFNsb3BlICgwIOKJpCBzbG9wZSA8ICtJbmZpbml0eSlcbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gb2Zmc2V0IE9mZnNldCAoLUluZmluaXR5IDwgb2Zmc2V0IDwgK0luZmluaXR5OyB0eXBpY2FsbHkgLTEgPCBvZmZzZXQgPCAxKVxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBwb3dlciBQb3dlciAoMCA8IHBvd2VyIDwgK0luZmluaXR5KVxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gc2F0dXJhdGlvbiBTYXR1cmF0aW9uICgwIOKJpCBzYXR1cmF0aW9uIDwgK0luZmluaXR5OyB0eXBpY2FsbHkgMCDiiaQgc2F0dXJhdGlvbiA8IDQpXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IGx1bWluYW5jZUNvZWZmaWNpZW50cyBMdW1pbmFuY2UgY29lZmZpY2llbnRzIGZvciBzYXR1cmF0aW9uIHRlcm0sIHR5cGljYWxseSBSZWMuIDcwOVxuICogQHJldHVybiB7Tm9kZTx2ZWM0Pn0gT3V0cHV0LCAtSW5maW5pdHkgPCBvdXRwdXQgPCArSW5maW5pdHlcbiAqXG4gKiBSZWZlcmVuY2VzOlxuICogLSBBU0MgQ0RMIHYxLjJcbiAqIC0ge0BsaW5rIGh0dHBzOi8vYmxlbmRlci5zdGFja2V4Y2hhbmdlLmNvbS9hLzU1MjM5LzQzOTMwfVxuICogLSB7QGxpbmsgaHR0cHM6Ly9kb2NzLmFjZXNjZW50cmFsLmNvbS9zcGVjaWZpY2F0aW9ucy9hY2VzY2MvfVxuICovXG5leHBvcnQgY29uc3QgY2RsID0gLypAX19QVVJFX18qLyBGbiggKCBbXG5cdGNvbG9yLFxuXHRzbG9wZSA9IHZlYzMoIDEgKSxcblx0b2Zmc2V0ID0gdmVjMyggMCApLFxuXHRwb3dlciA9IHZlYzMoIDEgKSxcblx0c2F0dXJhdGlvbiA9IGZsb2F0KCAxICksXG5cdC8vIEFTQyBDREwgdjEuMiBleHBsaWNpdGx5IHJlcXVpcmVzIFJlYy4gNzA5IGx1bWluYW5jZSBjb2VmZmljaWVudHMuXG5cdGx1bWluYW5jZUNvZWZmaWNpZW50cyA9IHZlYzMoIENvbG9yTWFuYWdlbWVudC5nZXRMdW1pbmFuY2VDb2VmZmljaWVudHMoIG5ldyBWZWN0b3IzKCksIExpbmVhclNSR0JDb2xvclNwYWNlICkgKVxuXSApID0+IHtcblxuXHQvLyBOT1RFOiBUaGUgQVNDIENETCB2MS4yIGRlZmluZXMgYSBbMCwgMV0gY2xhbXAgb24gdGhlIHNsb3BlK29mZnNldCB0ZXJtLCBhbmQgYW5vdGhlciBvbiB0aGVcblx0Ly8gc2F0dXJhdGlvbiB0ZXJtLiBQZXIgdGhlIEFDRVNjYyBzcGVjaWZpY2F0aW9uIGFuZCBGaWxhbWVudCwgbGltaXRzIG1heSBiZSBvbWl0dGVkIHRvIHN1cHBvcnRcblx0Ly8gdmFsdWVzIG91dHNpZGUgWzAsIDFdLCByZXF1aXJpbmcgYSB3b3JrYXJvdW5kIGZvciBuZWdhdGl2ZSB2YWx1ZXMgaW4gdGhlIHBvd2VyIGV4cHJlc3Npb24uXG5cblx0Y29uc3QgbHVtYSA9IGNvbG9yLnJnYi5kb3QoIHZlYzMoIGx1bWluYW5jZUNvZWZmaWNpZW50cyApICk7XG5cblx0Y29uc3QgdiA9IG1heCggY29sb3IucmdiLm11bCggc2xvcGUgKS5hZGQoIG9mZnNldCApLCAwLjAgKS50b1ZhcigpO1xuXHRjb25zdCBwdiA9IHYucG93KCBwb3dlciApLnRvVmFyKCk7XG5cblx0SWYoIHYuci5ncmVhdGVyVGhhbiggMC4wICksICgpID0+IHsgdi5yLmFzc2lnbiggcHYuciApOyB9ICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0SWYoIHYuZy5ncmVhdGVyVGhhbiggMC4wICksICgpID0+IHsgdi5nLmFzc2lnbiggcHYuZyApOyB9ICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0SWYoIHYuYi5ncmVhdGVyVGhhbiggMC4wICksICgpID0+IHsgdi5iLmFzc2lnbiggcHYuYiApOyB9ICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuXHR2LmFzc2lnbiggbHVtYS5hZGQoIHYuc3ViKCBsdW1hICkubXVsKCBzYXR1cmF0aW9uICkgKSApO1xuXG5cdHJldHVybiB2ZWM0KCB2LnJnYiwgY29sb3IuYSApO1xuXG59ICk7XG4iLCJpbXBvcnQgVGVtcE5vZGUgZnJvbSAnLi4vY29yZS9UZW1wTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHBvc3Rlcml6ZSBlZmZlY3Qgd2hpY2ggcmVkdWNlcyB0aGUgbnVtYmVyIG9mIGNvbG9yc1xuICogaW4gYW4gaW1hZ2UsIHJlc3VsdGluZyBpbiBhIG1vcmUgYmxvY2t5IGFuZCBzdHlsaXplZCBhcHBlYXJhbmNlLlxuICpcbiAqIEBhdWdtZW50cyBUZW1wTm9kZVxuICovXG5jbGFzcyBQb3N0ZXJpemVOb2RlIGV4dGVuZHMgVGVtcE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnUG9zdGVyaXplTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBvc3Rlcml6ZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IHNvdXJjZU5vZGUgLSBUaGUgaW5wdXQgY29sb3IuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gc3RlcHNOb2RlIC0gQ29udHJvbHMgdGhlIGludGVuc2l0eSBvZiB0aGUgcG9zdGVyaXphdGlvbiBlZmZlY3QuIEEgbG93ZXIgbnVtYmVyIHJlc3VsdHMgaW4gYSBtb3JlIGJsb2NreSBhcHBlYXJhbmNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHNvdXJjZU5vZGUsIHN0ZXBzTm9kZSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW5wdXQgY29sb3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnNvdXJjZU5vZGUgPSBzb3VyY2VOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29udHJvbHMgdGhlIGludGVuc2l0eSBvZiB0aGUgcG9zdGVyaXphdGlvbiBlZmZlY3QuIEEgbG93ZXIgbnVtYmVyIHJlc3VsdHMgaW4gYSBtb3JlIGJsb2NreSBhcHBlYXJhbmNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5zdGVwc05vZGUgPSBzdGVwc05vZGU7XG5cblx0fVxuXG5cdHNldHVwKCkge1xuXG5cdFx0Y29uc3QgeyBzb3VyY2VOb2RlLCBzdGVwc05vZGUgfSA9IHRoaXM7XG5cblx0XHRyZXR1cm4gc291cmNlTm9kZS5tdWwoIHN0ZXBzTm9kZSApLmZsb29yKCkuZGl2KCBzdGVwc05vZGUgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9zdGVyaXplTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgcG9zdGVyaXplIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IHNvdXJjZU5vZGUgLSBUaGUgaW5wdXQgY29sb3IuXG4gKiBAcGFyYW0ge05vZGV9IHN0ZXBzTm9kZSAtIENvbnRyb2xzIHRoZSBpbnRlbnNpdHkgb2YgdGhlIHBvc3Rlcml6YXRpb24gZWZmZWN0LiBBIGxvd2VyIG51bWJlciByZXN1bHRzIGluIGEgbW9yZSBibG9ja3kgYXBwZWFyYW5jZS5cbiAqIEByZXR1cm5zIHtQb3N0ZXJpemVOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcG9zdGVyaXplID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFBvc3Rlcml6ZU5vZGUgKTtcbiIsImltcG9ydCBUZW1wTm9kZSBmcm9tICcuLi9jb3JlL1RlbXBOb2RlLmpzJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGV4dHVyZU5vZGUvKiwgdGV4dHVyZSovIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1RleHR1cmVOb2RlLmpzJztcbmltcG9ydCB7IE5vZGVVcGRhdGVUeXBlIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgbm9kZU9iamVjdCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHVuaWZvcm0gfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Ob2RlLmpzJztcbmltcG9ydCB7IHZpZXdaVG9PcnRob2dyYXBoaWNEZXB0aCwgcGVyc3BlY3RpdmVEZXB0aFRvVmlld1ogfSBmcm9tICcuL1ZpZXdwb3J0RGVwdGhOb2RlLmpzJztcblxuaW1wb3J0IHsgSGFsZkZsb2F0VHlwZS8qLCBGbG9hdFR5cGUqLyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IERlcHRoVGV4dHVyZSB9IGZyb20gJy4uLy4uL3RleHR1cmVzL0RlcHRoVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBSZW5kZXJUYXJnZXQgfSBmcm9tICcuLi8uLi9jb3JlL1JlbmRlclRhcmdldC5qcyc7XG5cbmNvbnN0IF9zaXplID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHRleHR1cmUgb2YgYSBwYXNzIG5vZGUuXG4gKlxuICogQGF1Z21lbnRzIFRleHR1cmVOb2RlXG4gKi9cbmNsYXNzIFBhc3NUZXh0dXJlTm9kZSBleHRlbmRzIFRleHR1cmVOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1Bhc3NUZXh0dXJlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBhc3MgdGV4dHVyZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1Bhc3NOb2RlfSBwYXNzTm9kZSAtIFRoZSBwYXNzIG5vZGUuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSBvdXRwdXQgdGV4dHVyZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXNzTm9kZSwgdGV4dHVyZSApIHtcblxuXHRcdHN1cGVyKCB0ZXh0dXJlICk7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgcGFzcyBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1Bhc3NOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMucGFzc05vZGUgPSBwYXNzTm9kZTtcblxuXHRcdHRoaXMuc2V0VXBkYXRlTWF0cml4KCBmYWxzZSApO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGlmICggYnVpbGRlci5vYmplY3QuaXNRdWFkTWVzaCApIHRoaXMucGFzc05vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHRcdHJldHVybiBzdXBlci5zZXR1cCggYnVpbGRlciApO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5wYXNzTm9kZSwgdGhpcy52YWx1ZSApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEFuIGV4dGVuc2lvbiBvZiBgUGFzc1RleHR1cmVOb2RlYCB3aGljaCBhbGxvd3MgdG8gbWFuYWdlIG1vcmUgdGhhbiBvbmVcbiAqIGludGVybmFsIHRleHR1cmUuIFJlbGV2YW50IGZvciB0aGUgYGdldFByZXZpb3VzVGV4dHVyZSgpYCByZWxhdGVkIEFQSS5cbiAqXG4gKiBAYXVnbWVudHMgUGFzc1RleHR1cmVOb2RlXG4gKi9cbmNsYXNzIFBhc3NNdWx0aXBsZVRleHR1cmVOb2RlIGV4dGVuZHMgUGFzc1RleHR1cmVOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1Bhc3NNdWx0aXBsZVRleHR1cmVOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcGFzcyB0ZXh0dXJlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGFzc05vZGV9IHBhc3NOb2RlIC0gVGhlIHBhc3Mgbm9kZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVOYW1lIC0gVGhlIG91dHB1dCB0ZXh0dXJlIG5hbWUuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZXZpb3VzVGV4dHVyZT1mYWxzZV0gLSBXaGV0aGVyIHByZXZpb3VzIGZyYW1lIGRhdGEgc2hvdWxkIGJlIHVzZWQgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhc3NOb2RlLCB0ZXh0dXJlTmFtZSwgcHJldmlvdXNUZXh0dXJlID0gZmFsc2UgKSB7XG5cblx0XHQvLyBudWxsIGlzIHBhc3NlZCB0byB0aGUgc3VwZXIgY2FsbCBzaW5jZSB0aGlzIGNsYXNzIGRvZXMgbm90XG5cdFx0Ly8gdXNlIGFuIGV4dGVybmFsIHRleHR1cmUgZm9yIHJlbmRlcmluZyBwYXNzIGRhdGEgaW50by4gSW5zdGVhZFxuXHRcdC8vIHRoZSB0ZXh0dXJlIGlzIG1hbmFnZWQgYnkgdGhlIHBhc3Mgbm9kZSBpdHNlbGZcblxuXHRcdHN1cGVyKCBwYXNzTm9kZSwgbnVsbCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG91dHB1dCB0ZXh0dXJlIG5hbWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMudGV4dHVyZU5hbWUgPSB0ZXh0dXJlTmFtZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgcHJldmlvdXMgZnJhbWUgZGF0YSBzaG91bGQgYmUgdXNlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLnByZXZpb3VzVGV4dHVyZSA9IHByZXZpb3VzVGV4dHVyZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHRleHR1cmUgcmVmZXJlbmNlIG9mIHRoaXMgbm9kZS5cblx0ICovXG5cdHVwZGF0ZVRleHR1cmUoKSB7XG5cblx0XHR0aGlzLnZhbHVlID0gdGhpcy5wcmV2aW91c1RleHR1cmUgPyB0aGlzLnBhc3NOb2RlLmdldFByZXZpb3VzVGV4dHVyZSggdGhpcy50ZXh0dXJlTmFtZSApIDogdGhpcy5wYXNzTm9kZS5nZXRUZXh0dXJlKCB0aGlzLnRleHR1cmVOYW1lICk7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0dGhpcy51cGRhdGVUZXh0dXJlKCk7XG5cblx0XHRyZXR1cm4gc3VwZXIuc2V0dXAoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMucGFzc05vZGUsIHRoaXMudGV4dHVyZU5hbWUsIHRoaXMucHJldmlvdXNUZXh0dXJlICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHJlbmRlciBwYXNzIChzb21ldGltZXMgY2FsbGVkIGJlYXV0eSBwYXNzKSBpbiBjb250ZXh0IG9mIHBvc3QgcHJvY2Vzc2luZy5cbiAqIFRoaXMgcGFzcyBwcm9kdWNlcyBhIHJlbmRlciBmb3IgdGhlIGdpdmVuIHNjZW5lIGFuZCBjYW1lcmEgYW5kIGNhbiBwcm92aWRlIG11bHRpcGxlIG91dHB1dHNcbiAqIHZpYSBNUlQgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcG9zdFByb2Nlc3NpbmcgPSBuZXcgUG9zdFByb2Nlc3NpbmcoIHJlbmRlcmVyICk7XG4gKlxuICogY29uc3Qgc2NlbmVQYXNzID0gcGFzcyggc2NlbmUsIGNhbWVyYSApO1xuICpcbiAqIHBvc3RQcm9jZXNzaW5nLm91dHB1dE5vZGUgPSBzY2VuZVBhc3M7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgUGFzc05vZGUgZXh0ZW5kcyBUZW1wTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdQYXNzTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBhc3Mgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHsoJ2NvbG9yJ3wnZGVwdGgnKX0gc2NvcGUgLSBUaGUgc2NvcGUgb2YgdGhlIHBhc3MuIFRoZSBzY29wZSBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG5vZGUgb3V0cHV0cyBjb2xvciBvciBkZXB0aC5cblx0ICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBBIHJlZmVyZW5jZSB0byB0aGUgc2NlbmUuXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBBIHJlZmVyZW5jZSB0byB0aGUgY2FtZXJhLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBpbnRlcm5hbCByZW5kZXIgdGFyZ2V0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHNjb3BlLCBzY2VuZSwgY2FtZXJhLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlciggJ3ZlYzQnICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2NvcGUgb2YgdGhlIHBhc3MuIFRoZSBzY29wZSBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG5vZGUgb3V0cHV0cyBjb2xvciBvciBkZXB0aC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoJ2NvbG9yJ3wnZGVwdGgnKX1cblx0XHQgKi9cblx0XHR0aGlzLnNjb3BlID0gc2NvcGU7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgc2NlbmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7U2NlbmV9XG5cdFx0ICovXG5cdFx0dGhpcy5zY2VuZSA9IHNjZW5lO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIGNhbWVyYS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDYW1lcmF9XG5cdFx0ICovXG5cdFx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cblx0XHQvKipcblx0XHQgKiBPcHRpb25zIGZvciB0aGUgaW50ZXJuYWwgcmVuZGVyIHRhcmdldC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwYXNzJ3MgcGl4ZWwgcmF0aW8uIFdpbGwgYmUga2VwdCBhdXRvbWF0aWNhbGx5IGtlcHQgaW4gc3luYyB3aXRoIHRoZSByZW5kZXJlcidzIHBpeGVsIHJhdGlvLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLl9waXhlbFJhdGlvID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwYXNzJ3MgcGl4ZWwgd2lkdGguIFdpbGwgYmUga2VwdCBhdXRvbWF0aWNhbGx5IGtlcHQgaW4gc3luYyB3aXRoIHRoZSByZW5kZXJlcidzIHdpZHRoLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5fd2lkdGggPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBhc3MncyBwaXhlbCBoZWlnaHQuIFdpbGwgYmUga2VwdCBhdXRvbWF0aWNhbGx5IGtlcHQgaW4gc3luYyB3aXRoIHRoZSByZW5kZXJlcidzIGhlaWdodC5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hlaWdodCA9IDE7XG5cblx0XHRjb25zdCBkZXB0aFRleHR1cmUgPSBuZXcgRGVwdGhUZXh0dXJlKCk7XG5cdFx0ZGVwdGhUZXh0dXJlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7XG5cdFx0Ly9kZXB0aFRleHR1cmUudHlwZSA9IEZsb2F0VHlwZTtcblx0XHRkZXB0aFRleHR1cmUubmFtZSA9ICdkZXB0aCc7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSBuZXcgUmVuZGVyVGFyZ2V0KCB0aGlzLl93aWR0aCAqIHRoaXMuX3BpeGVsUmF0aW8sIHRoaXMuX2hlaWdodCAqIHRoaXMuX3BpeGVsUmF0aW8sIHsgdHlwZTogSGFsZkZsb2F0VHlwZSwgLi4ub3B0aW9ucywgfSApO1xuXHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSAnb3V0cHV0Jztcblx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlID0gZGVwdGhUZXh0dXJlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBhc3MncyByZW5kZXIgdGFyZ2V0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1JlbmRlclRhcmdldH1cblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSBob2xkaW5nIHRoZSBpbnRlcm5hbCByZXN1bHQgdGV4dHVyZXMuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBUZXh0dXJlPn1cblx0XHQgKi9cblx0XHR0aGlzLl90ZXh0dXJlcyA9IHtcblx0XHRcdG91dHB1dDogcmVuZGVyVGFyZ2V0LnRleHR1cmUsXG5cdFx0XHRkZXB0aDogZGVwdGhUZXh0dXJlXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSBob2xkaW5nIHRoZSBpbnRlcm5hbCB0ZXh0dXJlIG5vZGVzLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgVGV4dHVyZU5vZGU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX3RleHR1cmVOb2RlcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQSBkaWN0aW9uYXJ5IGhvbGRpbmcgdGhlIGludGVybmFsIGRlcHRoIG5vZGVzLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2xpbmVhckRlcHRoTm9kZXMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSBob2xkaW5nIHRoZSBpbnRlcm5hbCB2aWV3WiBub2Rlcy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl92aWV3Wk5vZGVzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBBIGRpY3Rpb25hcnkgaG9sZGluZyB0aGUgdGV4dHVyZSBkYXRhIG9mIHRoZSBwcmV2aW91cyBmcmFtZS5cblx0XHQgKiBVc2VkIGZvciBjb21wdXRpbmcgdmVsb2NpdHkvbW90aW9uIHZlY3RvcnMuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBUZXh0dXJlPn1cblx0XHQgKi9cblx0XHR0aGlzLl9wcmV2aW91c1RleHR1cmVzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBBIGRpY3Rpb25hcnkgaG9sZGluZyB0aGUgdGV4dHVyZSBub2RlcyBvZiB0aGUgcHJldmlvdXMgZnJhbWUuXG5cdFx0ICogVXNlZCBmb3IgY29tcHV0aW5nIHZlbG9jaXR5L21vdGlvbiB2ZWN0b3JzLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgVGV4dHVyZU5vZGU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX3ByZXZpb3VzVGV4dHVyZU5vZGVzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYG5lYXJgIHByb3BlcnR5IG9mIHRoZSBjYW1lcmEgYXMgYSB1bmlmb3JtLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5fY2FtZXJhTmVhciA9IHVuaWZvcm0oIDAgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBgZmFyYCBwcm9wZXJ0eSBvZiB0aGUgY2FtZXJhIGFzIGEgdW5pZm9ybS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge1VuaWZvcm1Ob2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NhbWVyYUZhciA9IHVuaWZvcm0oIDAgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgTVJUIG5vZGUgY29uZmlndXJpbmcgdGhlIE1SVCBzZXR0aW5ncy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9NUlROb2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9tcnQgPSBudWxsO1xuXG5cdFx0dGhpcy5fbGF5ZXJzID0gbnVsbDtcblxuXHRcdHRoaXMuX3Jlc29sdXRpb24gPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1Bhc3NOb2RlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBgdXBkYXRlQmVmb3JlVHlwZWAgaXMgc2V0IHRvIGBOb2RlVXBkYXRlVHlwZS5GUkFNRWAgc2luY2UgdGhlIG5vZGUgcmVuZGVycyB0aGVcblx0XHQgKiBzY2VuZSBvbmNlIHBlciBmcmFtZSBpbiBpdHMge0BsaW5rIFBhc3NOb2RlI3VwZGF0ZUJlZm9yZX0gbWV0aG9kLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnZnJhbWUnXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVCZWZvcmVUeXBlID0gTm9kZVVwZGF0ZVR5cGUuRlJBTUU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSByZXNvbHV0aW9uIGZvciB0aGUgcGFzcy5cblx0ICogVGhlIHJlc29sdXRpb24gaXMgYSBmYWN0b3IgdGhhdCBpcyBtdWx0aXBsaWVkIHdpdGggdGhlIHJlbmRlcmVyJ3Mgd2lkdGggYW5kIGhlaWdodC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHJlc29sdXRpb24gLSBUaGUgcmVzb2x1dGlvbiB0byBzZXQuIEEgdmFsdWUgb2YgYDFgIG1lYW5zIGZ1bGwgcmVzb2x1dGlvbi5cblx0ICogQHJldHVybiB7UGFzc05vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGFzcy5cblx0ICovXG5cdHNldFJlc29sdXRpb24oIHJlc29sdXRpb24gKSB7XG5cblx0XHR0aGlzLl9yZXNvbHV0aW9uID0gcmVzb2x1dGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgY3VycmVudCByZXNvbHV0aW9uIG9mIHRoZSBwYXNzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjdXJyZW50IHJlc29sdXRpb24uIEEgdmFsdWUgb2YgYDFgIG1lYW5zIGZ1bGwgcmVzb2x1dGlvbi5cblx0ICogQGRlZmF1bHQgMVxuXHQgKi9cblx0Z2V0UmVzb2x1dGlvbigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9yZXNvbHV0aW9uO1xuXG5cdH1cblxuXHRzZXRMYXllcnMoIGxheWVycyApIHtcblxuXHRcdHRoaXMuX2xheWVycyA9IGxheWVycztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRMYXllcnMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fbGF5ZXJzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gTVJUIG5vZGUgdG8gc2V0dXAgTVJUIGZvciB0aGlzIHBhc3MuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TVJUTm9kZX0gbXJ0IC0gVGhlIE1SVCBvYmplY3QuXG5cdCAqIEByZXR1cm4ge1Bhc3NOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHBhc3MuXG5cdCAqL1xuXHRzZXRNUlQoIG1ydCApIHtcblxuXHRcdHRoaXMuX21ydCA9IG1ydDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY3VycmVudCBNUlQgbm9kZS5cblx0ICpcblx0ICogQHJldHVybiB7TVJUTm9kZX0gVGhlIGN1cnJlbnQgTVJUIG5vZGUuXG5cdCAqL1xuXHRnZXRNUlQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fbXJ0O1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzbyBpdCBhbHdheXMgcmV0dXJucyBgdHJ1ZWAuXG5cdCAqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBub2RlIGlzIGdsb2JhbCBvciBub3QuXG5cdCAqL1xuXHRpc0dsb2JhbCgpIHtcblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdGV4dHVyZSBmb3IgdGhlIGdpdmVuIG91dHB1dCBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBvdXRwdXQgbmFtZSB0byBnZXQgdGhlIHRleHR1cmUgZm9yLlxuXHQgKiBAcmV0dXJuIHtUZXh0dXJlfSBUaGUgdGV4dHVyZS5cblx0ICovXG5cdGdldFRleHR1cmUoIG5hbWUgKSB7XG5cblx0XHRsZXQgdGV4dHVyZSA9IHRoaXMuX3RleHR1cmVzWyBuYW1lIF07XG5cblx0XHRpZiAoIHRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgcmVmVGV4dHVyZSA9IHRoaXMucmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdHRleHR1cmUgPSByZWZUZXh0dXJlLmNsb25lKCk7XG5cdFx0XHR0ZXh0dXJlLm5hbWUgPSBuYW1lO1xuXG5cdFx0XHR0aGlzLl90ZXh0dXJlc1sgbmFtZSBdID0gdGV4dHVyZTtcblxuXHRcdFx0dGhpcy5yZW5kZXJUYXJnZXQudGV4dHVyZXMucHVzaCggdGV4dHVyZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0ZXh0dXJlIGhvbGRpbmcgdGhlIGRhdGEgb2YgdGhlIHByZXZpb3VzIGZyYW1lIGZvciB0aGUgZ2l2ZW4gb3V0cHV0IG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG91dHB1dCBuYW1lIHRvIGdldCB0aGUgdGV4dHVyZSBmb3IuXG5cdCAqIEByZXR1cm4ge1RleHR1cmV9IFRoZSB0ZXh0dXJlIGhvbGRpbmcgdGhlIGRhdGEgb2YgdGhlIHByZXZpb3VzIGZyYW1lLlxuXHQgKi9cblx0Z2V0UHJldmlvdXNUZXh0dXJlKCBuYW1lICkge1xuXG5cdFx0bGV0IHRleHR1cmUgPSB0aGlzLl9wcmV2aW91c1RleHR1cmVzWyBuYW1lIF07XG5cblx0XHRpZiAoIHRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZSA9IHRoaXMuZ2V0VGV4dHVyZSggbmFtZSApLmNsb25lKCk7XG5cblx0XHRcdHRoaXMuX3ByZXZpb3VzVGV4dHVyZXNbIG5hbWUgXSA9IHRleHR1cmU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN3aXRjaGVzIGN1cnJlbnQgYW5kIHByZXZpb3VzIHRleHR1cmVzIGZvciB0aGUgZ2l2ZW4gb3V0cHV0IG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG91dHB1dCBuYW1lLlxuXHQgKi9cblx0dG9nZ2xlVGV4dHVyZSggbmFtZSApIHtcblxuXHRcdGNvbnN0IHByZXZUZXh0dXJlID0gdGhpcy5fcHJldmlvdXNUZXh0dXJlc1sgbmFtZSBdO1xuXG5cdFx0aWYgKCBwcmV2VGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlID0gdGhpcy5fdGV4dHVyZXNbIG5hbWUgXTtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSB0aGlzLnJlbmRlclRhcmdldC50ZXh0dXJlcy5pbmRleE9mKCB0ZXh0dXJlICk7XG5cdFx0XHR0aGlzLnJlbmRlclRhcmdldC50ZXh0dXJlc1sgaW5kZXggXSA9IHByZXZUZXh0dXJlO1xuXG5cdFx0XHR0aGlzLl90ZXh0dXJlc1sgbmFtZSBdID0gcHJldlRleHR1cmU7XG5cdFx0XHR0aGlzLl9wcmV2aW91c1RleHR1cmVzWyBuYW1lIF0gPSB0ZXh0dXJlO1xuXG5cdFx0XHR0aGlzLl90ZXh0dXJlTm9kZXNbIG5hbWUgXS51cGRhdGVUZXh0dXJlKCk7XG5cdFx0XHR0aGlzLl9wcmV2aW91c1RleHR1cmVOb2Rlc1sgbmFtZSBdLnVwZGF0ZVRleHR1cmUoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHRleHR1cmUgbm9kZSBmb3IgdGhlIGdpdmVuIG91dHB1dCBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW25hbWU9J291dHB1dCddIC0gVGhlIG91dHB1dCBuYW1lIHRvIGdldCB0aGUgdGV4dHVyZSBub2RlIGZvci5cblx0ICogQHJldHVybiB7VGV4dHVyZU5vZGV9IFRoZSB0ZXh0dXJlIG5vZGUuXG5cdCAqL1xuXHRnZXRUZXh0dXJlTm9kZSggbmFtZSA9ICdvdXRwdXQnICkge1xuXG5cdFx0bGV0IHRleHR1cmVOb2RlID0gdGhpcy5fdGV4dHVyZU5vZGVzWyBuYW1lIF07XG5cblx0XHRpZiAoIHRleHR1cmVOb2RlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRleHR1cmVOb2RlID0gbm9kZU9iamVjdCggbmV3IFBhc3NNdWx0aXBsZVRleHR1cmVOb2RlKCB0aGlzLCBuYW1lICkgKTtcblx0XHRcdHRleHR1cmVOb2RlLnVwZGF0ZVRleHR1cmUoKTtcblx0XHRcdHRoaXMuX3RleHR1cmVOb2Rlc1sgbmFtZSBdID0gdGV4dHVyZU5vZGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZU5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBwcmV2aW91cyB0ZXh0dXJlIG5vZGUgZm9yIHRoZSBnaXZlbiBvdXRwdXQgbmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lPSdvdXRwdXQnXSAtIFRoZSBvdXRwdXQgbmFtZSB0byBnZXQgdGhlIHByZXZpb3VzIHRleHR1cmUgbm9kZSBmb3IuXG5cdCAqIEByZXR1cm4ge1RleHR1cmVOb2RlfSBUaGUgcHJldmlvdXMgdGV4dHVyZSBub2RlLlxuXHQgKi9cblx0Z2V0UHJldmlvdXNUZXh0dXJlTm9kZSggbmFtZSA9ICdvdXRwdXQnICkge1xuXG5cdFx0bGV0IHRleHR1cmVOb2RlID0gdGhpcy5fcHJldmlvdXNUZXh0dXJlTm9kZXNbIG5hbWUgXTtcblxuXHRcdGlmICggdGV4dHVyZU5vZGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB0aGlzLl90ZXh0dXJlTm9kZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkgdGhpcy5nZXRUZXh0dXJlTm9kZSggbmFtZSApO1xuXG5cdFx0XHR0ZXh0dXJlTm9kZSA9IG5vZGVPYmplY3QoIG5ldyBQYXNzTXVsdGlwbGVUZXh0dXJlTm9kZSggdGhpcywgbmFtZSwgdHJ1ZSApICk7XG5cdFx0XHR0ZXh0dXJlTm9kZS51cGRhdGVUZXh0dXJlKCk7XG5cdFx0XHR0aGlzLl9wcmV2aW91c1RleHR1cmVOb2Rlc1sgbmFtZSBdID0gdGV4dHVyZU5vZGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZU5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgdmlld1ogbm9kZSBvZiB0aGlzIHBhc3MuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nZGVwdGgnXSAtIFRoZSBvdXRwdXQgbmFtZSB0byBnZXQgdGhlIHZpZXdaIG5vZGUgZm9yLiBJbiBtb3N0IGNhc2VzIHRoZSBkZWZhdWx0IGAnZGVwdGgnYCBjYW4gYmUgdXNlZCBob3dldmVyIHRoZSBwYXJhbWV0ZXIgZXhpc3RzIGZvciBjdXN0b20gZGVwdGggb3V0cHV0cy5cblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIHZpZXdaIG5vZGUuXG5cdCAqL1xuXHRnZXRWaWV3Wk5vZGUoIG5hbWUgPSAnZGVwdGgnICkge1xuXG5cdFx0bGV0IHZpZXdaTm9kZSA9IHRoaXMuX3ZpZXdaTm9kZXNbIG5hbWUgXTtcblxuXHRcdGlmICggdmlld1pOb2RlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGNhbWVyYU5lYXIgPSB0aGlzLl9jYW1lcmFOZWFyO1xuXHRcdFx0Y29uc3QgY2FtZXJhRmFyID0gdGhpcy5fY2FtZXJhRmFyO1xuXG5cdFx0XHR0aGlzLl92aWV3Wk5vZGVzWyBuYW1lIF0gPSB2aWV3Wk5vZGUgPSBwZXJzcGVjdGl2ZURlcHRoVG9WaWV3WiggdGhpcy5nZXRUZXh0dXJlTm9kZSggbmFtZSApLCBjYW1lcmFOZWFyLCBjYW1lcmFGYXIgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3Wk5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbGluZWFyIGRlcHRoIG5vZGUgb2YgdGhpcyBwYXNzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW25hbWU9J2RlcHRoJ10gLSBUaGUgb3V0cHV0IG5hbWUgdG8gZ2V0IHRoZSBsaW5lYXIgZGVwdGggbm9kZSBmb3IuIEluIG1vc3QgY2FzZXMgdGhlIGRlZmF1bHQgYCdkZXB0aCdgIGNhbiBiZSB1c2VkIGhvd2V2ZXIgdGhlIHBhcmFtZXRlciBleGlzdHMgZm9yIGN1c3RvbSBkZXB0aCBvdXRwdXRzLlxuXHQgKiBAcmV0dXJuIHtOb2RlfSBUaGUgbGluZWFyIGRlcHRoIG5vZGUuXG5cdCAqL1xuXHRnZXRMaW5lYXJEZXB0aE5vZGUoIG5hbWUgPSAnZGVwdGgnICkge1xuXG5cdFx0bGV0IGxpbmVhckRlcHRoTm9kZSA9IHRoaXMuX2xpbmVhckRlcHRoTm9kZXNbIG5hbWUgXTtcblxuXHRcdGlmICggbGluZWFyRGVwdGhOb2RlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGNhbWVyYU5lYXIgPSB0aGlzLl9jYW1lcmFOZWFyO1xuXHRcdFx0Y29uc3QgY2FtZXJhRmFyID0gdGhpcy5fY2FtZXJhRmFyO1xuXHRcdFx0Y29uc3Qgdmlld1pOb2RlID0gdGhpcy5nZXRWaWV3Wk5vZGUoIG5hbWUgKTtcblxuXHRcdFx0Ly8gVE9ETzoganVzdCBpZiAoIGJ1aWxkZXIuY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKVxuXG5cdFx0XHR0aGlzLl9saW5lYXJEZXB0aE5vZGVzWyBuYW1lIF0gPSBsaW5lYXJEZXB0aE5vZGUgPSB2aWV3WlRvT3J0aG9ncmFwaGljRGVwdGgoIHZpZXdaTm9kZSwgY2FtZXJhTmVhciwgY2FtZXJhRmFyICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbGluZWFyRGVwdGhOb2RlO1xuXG5cdH1cblxuXHRzZXR1cCggeyByZW5kZXJlciB9ICkge1xuXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQuc2FtcGxlcyA9IHRoaXMub3B0aW9ucy5zYW1wbGVzID09PSB1bmRlZmluZWQgPyByZW5kZXJlci5zYW1wbGVzIDogdGhpcy5vcHRpb25zLnNhbXBsZXM7XG5cblx0XHQvLyBUT0RPOiBEaXNhYmxlIE1TQUEgZm9yIFdlYkdMIGJhY2tlbmQgZm9yIG5vd1xuXHRcdGlmICggcmVuZGVyZXIuYmFja2VuZC5pc1dlYkdMQmFja2VuZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5yZW5kZXJUYXJnZXQuc2FtcGxlcyA9IDA7XG5cblx0XHR9XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGUgPSByZW5kZXJlci5nZXRDb2xvckJ1ZmZlclR5cGUoKTtcblxuXHRcdHJldHVybiB0aGlzLnNjb3BlID09PSBQYXNzTm9kZS5DT0xPUiA/IHRoaXMuZ2V0VGV4dHVyZU5vZGUoKSA6IHRoaXMuZ2V0TGluZWFyRGVwdGhOb2RlKCk7XG5cblx0fVxuXG5cdHVwZGF0ZUJlZm9yZSggZnJhbWUgKSB7XG5cblx0XHRjb25zdCB7IHJlbmRlcmVyIH0gPSBmcmFtZTtcblx0XHRjb25zdCB7IHNjZW5lIH0gPSB0aGlzO1xuXG5cdFx0bGV0IGNhbWVyYTtcblx0XHRsZXQgcGl4ZWxSYXRpbztcblxuXHRcdGNvbnN0IG91dHB1dFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldE91dHB1dFJlbmRlclRhcmdldCgpO1xuXG5cdFx0aWYgKCBvdXRwdXRSZW5kZXJUYXJnZXQgJiYgb3V0cHV0UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPT09IHRydWUgKSB7XG5cblx0XHRcdHBpeGVsUmF0aW8gPSAxO1xuXHRcdFx0Y2FtZXJhID0gcmVuZGVyZXIueHIuZ2V0Q2FtZXJhKCk7XG5cblx0XHRcdHJlbmRlcmVyLnhyLnVwZGF0ZUNhbWVyYSggY2FtZXJhICk7XG5cblx0XHRcdF9zaXplLnNldCggb3V0cHV0UmVuZGVyVGFyZ2V0LndpZHRoLCBvdXRwdXRSZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjYW1lcmEgPSB0aGlzLmNhbWVyYTtcblx0XHRcdHBpeGVsUmF0aW8gPSByZW5kZXJlci5nZXRQaXhlbFJhdGlvKCk7XG5cblx0XHRcdHJlbmRlcmVyLmdldFNpemUoIF9zaXplICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9waXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcblxuXHRcdHRoaXMuc2V0U2l6ZSggX3NpemUud2lkdGgsIF9zaXplLmhlaWdodCApO1xuXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXHRcdGNvbnN0IGN1cnJlbnRNUlQgPSByZW5kZXJlci5nZXRNUlQoKTtcblx0XHRjb25zdCBjdXJyZW50TWFzayA9IGNhbWVyYS5sYXllcnMubWFzaztcblxuXHRcdHRoaXMuX2NhbWVyYU5lYXIudmFsdWUgPSBjYW1lcmEubmVhcjtcblx0XHR0aGlzLl9jYW1lcmFGYXIudmFsdWUgPSBjYW1lcmEuZmFyO1xuXG5cdFx0aWYgKCB0aGlzLl9sYXllcnMgIT09IG51bGwgKSB7XG5cblx0XHRcdGNhbWVyYS5sYXllcnMubWFzayA9IHRoaXMuX2xheWVycy5tYXNrO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiB0aGlzLl9wcmV2aW91c1RleHR1cmVzICkge1xuXG5cdFx0XHR0aGlzLnRvZ2dsZVRleHR1cmUoIG5hbWUgKTtcblxuXHRcdH1cblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggdGhpcy5yZW5kZXJUYXJnZXQgKTtcblx0XHRyZW5kZXJlci5zZXRNUlQoIHRoaXMuX21ydCApO1xuXG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblx0XHRyZW5kZXJlci5zZXRNUlQoIGN1cnJlbnRNUlQgKTtcblxuXHRcdGNhbWVyYS5sYXllcnMubWFzayA9IGN1cnJlbnRNYXNrO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc2l6ZSBvZiB0aGUgcGFzcydzIHJlbmRlciB0YXJnZXQuIEhvbm9ycyB0aGUgcGl4ZWwgcmF0aW8uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCB0byBzZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IHRvIHNldC5cblx0ICovXG5cdHNldFNpemUoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHR0aGlzLl93aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuX2hlaWdodCA9IGhlaWdodDtcblxuXHRcdGNvbnN0IGVmZmVjdGl2ZVdpZHRoID0gdGhpcy5fd2lkdGggKiB0aGlzLl9waXhlbFJhdGlvICogdGhpcy5fcmVzb2x1dGlvbjtcblx0XHRjb25zdCBlZmZlY3RpdmVIZWlnaHQgPSB0aGlzLl9oZWlnaHQgKiB0aGlzLl9waXhlbFJhdGlvICogdGhpcy5fcmVzb2x1dGlvbjtcblxuXHRcdHRoaXMucmVuZGVyVGFyZ2V0LnNldFNpemUoIGVmZmVjdGl2ZVdpZHRoLCBlZmZlY3RpdmVIZWlnaHQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBpeGVsIHJhdGlvIHRoZSBwYXNzJ3MgcmVuZGVyIHRhcmdldCBhbmQgdXBkYXRlcyB0aGUgc2l6ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHBpeGVsUmF0aW8gLSBUaGUgcGl4ZWwgcmF0aW8gdG8gc2V0LlxuXHQgKi9cblx0c2V0UGl4ZWxSYXRpbyggcGl4ZWxSYXRpbyApIHtcblxuXHRcdHRoaXMuX3BpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuXG5cdFx0dGhpcy5zZXRTaXplKCB0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyBpbnRlcm5hbCByZXNvdXJjZXMuIFNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgbm9kZSBpcyBubyBsb25nZXIgaW4gdXNlLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMucmVuZGVyVGFyZ2V0LmRpc3Bvc2UoKTtcblxuXHR9XG5cblxufVxuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHsnY29sb3InfVxuICogQGRlZmF1bHQgJ2NvbG9yJ1xuICovXG5QYXNzTm9kZS5DT0xPUiA9ICdjb2xvcic7XG5cbi8qKlxuICogQHN0YXRpY1xuICogQHR5cGUgeydkZXB0aCd9XG4gKiBAZGVmYXVsdCAnZGVwdGgnXG4gKi9cblBhc3NOb2RlLkRFUFRIID0gJ2RlcHRoJztcblxuZXhwb3J0IGRlZmF1bHQgUGFzc05vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHBhc3Mgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gQSByZWZlcmVuY2UgdG8gdGhlIHNjZW5lLlxuICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjYW1lcmEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBpbnRlcm5hbCByZW5kZXIgdGFyZ2V0LlxuICogQHJldHVybnMge1Bhc3NOb2RlfVxuICovXG5leHBvcnQgY29uc3QgcGFzcyA9ICggc2NlbmUsIGNhbWVyYSwgb3B0aW9ucyApID0+IG5vZGVPYmplY3QoIG5ldyBQYXNzTm9kZSggUGFzc05vZGUuQ09MT1IsIHNjZW5lLCBjYW1lcmEsIG9wdGlvbnMgKSApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBwYXNzIHRleHR1cmUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7UGFzc05vZGV9IHBhc3MgLSBUaGUgcGFzcyBub2RlLlxuICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIG91dHB1dCB0ZXh0dXJlLlxuICogQHJldHVybnMge1Bhc3NUZXh0dXJlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHBhc3NUZXh0dXJlID0gKCBwYXNzLCB0ZXh0dXJlICkgPT4gbm9kZU9iamVjdCggbmV3IFBhc3NUZXh0dXJlTm9kZSggcGFzcywgdGV4dHVyZSApICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGRlcHRoIHBhc3Mgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gQSByZWZlcmVuY2UgdG8gdGhlIHNjZW5lLlxuICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjYW1lcmEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBpbnRlcm5hbCByZW5kZXIgdGFyZ2V0LlxuICogQHJldHVybnMge1Bhc3NOb2RlfVxuICovXG5leHBvcnQgY29uc3QgZGVwdGhQYXNzID0gKCBzY2VuZSwgY2FtZXJhLCBvcHRpb25zICkgPT4gbm9kZU9iamVjdCggbmV3IFBhc3NOb2RlKCBQYXNzTm9kZS5ERVBUSCwgc2NlbmUsIGNhbWVyYSwgb3B0aW9ucyApICk7XG4iLCJpbXBvcnQgeyBmbG9hdCwgbm9kZU9iamVjdCwgbm9ybWFsaXplLCB2ZWM0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yLmpzJztcbmltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vbWF0ZXJpYWxzL25vZGVzL05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBjYW1lcmFQcm9qZWN0aW9uTWF0cml4IH0gZnJvbSAnLi4vLi4vbm9kZXMvYWNjZXNzb3JzL0NhbWVyYS5qcyc7XG5pbXBvcnQgeyBtb2RlbFZpZXdNYXRyaXggfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTW9kZWxOb2RlLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uTG9jYWwgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgbm9ybWFsTG9jYWwgfSBmcm9tICcuLi8uLi9ub2Rlcy9hY2Nlc3NvcnMvTm9ybWFsLmpzJztcbmltcG9ydCB7IEJhY2tTaWRlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCBQYXNzTm9kZSBmcm9tICcuL1Bhc3NOb2RlLmpzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmVuZGVyIHBhc3MgZm9yIHByb2R1Y2luZyBhIHRvb24gb3V0bGluZSBlZmZlY3Qgb24gY29tcGF0aWJsZSBvYmplY3RzLlxuICogT25seSAzRCBvYmplY3RzIHdpdGggbWF0ZXJpYWxzIG9mIHR5cGUgYE1lc2hUb29uTWF0ZXJpYWxgIGFuZCBgTWVzaFRvb25Ob2RlTWF0ZXJpYWxgXG4gKiB3aWxsIHJlY2VpdmUgdGhlIG91dGxpbmUuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBvc3RQcm9jZXNzaW5nID0gbmV3IFBvc3RQcm9jZXNzaW5nKCByZW5kZXJlciApO1xuICpcbiAqIGNvbnN0IHNjZW5lUGFzcyA9IHRvb25PdXRsaW5lUGFzcyggc2NlbmUsIGNhbWVyYSApO1xuICpcbiAqIHBvc3RQcm9jZXNzaW5nLm91dHB1dE5vZGUgPSBzY2VuZVBhc3M7XG4gKiBgYGBcbiAqIEBhdWdtZW50cyBQYXNzTm9kZVxuICovXG5jbGFzcyBUb29uT3V0bGluZVBhc3NOb2RlIGV4dGVuZHMgUGFzc05vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnVG9vbk91dGxpbmVQYXNzTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG91dGxpbmUgcGFzcyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBzY2VuZS5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjYW1lcmEuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gY29sb3JOb2RlIC0gRGVmaW5lcyB0aGUgb3V0bGluZSdzIGNvbG9yLlxuXHQgKiBAcGFyYW0ge05vZGV9IHRoaWNrbmVzc05vZGUgLSBEZWZpbmVzIHRoZSBvdXRsaW5lJ3MgdGhpY2tuZXNzLlxuXHQgKiBAcGFyYW0ge05vZGV9IGFscGhhTm9kZSAtIERlZmluZXMgdGhlIG91dGxpbmUncyBhbHBoYS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzY2VuZSwgY2FtZXJhLCBjb2xvck5vZGUsIHRoaWNrbmVzc05vZGUsIGFscGhhTm9kZSApIHtcblxuXHRcdHN1cGVyKCBQYXNzTm9kZS5DT0xPUiwgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB0aGUgb3V0bGluZSdzIGNvbG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5jb2xvck5vZGUgPSBjb2xvck5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBvdXRsaW5lJ3MgdGhpY2tuZXNzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy50aGlja25lc3NOb2RlID0gdGhpY2tuZXNzTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIG91dGxpbmUncyBhbHBoYS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMuYWxwaGFOb2RlID0gYWxwaGFOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gaW50ZXJuYWwgbWF0ZXJpYWwgY2FjaGUuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtXZWFrTWFwPE1hdGVyaWFsLCBOb2RlTWF0ZXJpYWw+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX21hdGVyaWFsQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHR1cGRhdGVCZWZvcmUoIGZyYW1lICkge1xuXG5cdFx0Y29uc3QgeyByZW5kZXJlciB9ID0gZnJhbWU7XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyT2JqZWN0RnVuY3Rpb24gPSByZW5kZXJlci5nZXRSZW5kZXJPYmplY3RGdW5jdGlvbigpO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyT2JqZWN0RnVuY3Rpb24oICggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwLCBsaWdodHNOb2RlLCBjbGlwcGluZ0NvbnRleHQgKSA9PiB7XG5cblx0XHRcdC8vIG9ubHkgcmVuZGVyIG91dGxpbmUgZm9yIHN1cHBvcnRlZCBtYXRlcmlhbHNcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNNZXNoVG9vbk5vZGVNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBvdXRsaW5lTWF0ZXJpYWwgPSB0aGlzLl9nZXRPdXRsaW5lTWF0ZXJpYWwoIG1hdGVyaWFsICk7XG5cdFx0XHRcdFx0cmVuZGVyZXIucmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBvdXRsaW5lTWF0ZXJpYWwsIGdyb3VwLCBsaWdodHNOb2RlLCBjbGlwcGluZ0NvbnRleHQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZGVmYXVsdFxuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCwgbGlnaHRzTm9kZSwgY2xpcHBpbmdDb250ZXh0ICk7XG5cblx0XHR9ICk7XG5cblx0XHRzdXBlci51cGRhdGVCZWZvcmUoIGZyYW1lICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJPYmplY3RGdW5jdGlvbiggY3VycmVudFJlbmRlck9iamVjdEZ1bmN0aW9uICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBtYXRlcmlhbCB1c2VkIGZvciBvdXRsaW5lIHJlbmRlcmluZy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHJldHVybiB7Tm9kZU1hdGVyaWFsfSBUaGUgb3V0bGluZSBtYXRlcmlhbC5cblx0ICovXG5cdF9jcmVhdGVNYXRlcmlhbCgpIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IE5vZGVNYXRlcmlhbCgpO1xuXHRcdG1hdGVyaWFsLmlzTWVzaFRvb25PdXRsaW5lTWF0ZXJpYWwgPSB0cnVlO1xuXHRcdG1hdGVyaWFsLm5hbWUgPSAnVG9vbl9PdXRsaW5lJztcblx0XHRtYXRlcmlhbC5zaWRlID0gQmFja1NpZGU7XG5cblx0XHQvLyB2ZXJ0ZXggbm9kZVxuXG5cdFx0Y29uc3Qgb3V0bGluZU5vcm1hbCA9IG5vcm1hbExvY2FsLm5lZ2F0ZSgpO1xuXHRcdGNvbnN0IG12cCA9IGNhbWVyYVByb2plY3Rpb25NYXRyaXgubXVsKCBtb2RlbFZpZXdNYXRyaXggKTtcblxuXHRcdGNvbnN0IHJhdGlvID0gZmxvYXQoIDEuMCApOyAvLyBUT0RPOiBzdXBwb3J0IG91dGxpbmUgdGhpY2tuZXNzIHJhdGlvIGZvciBlYWNoIHZlcnRleFxuXHRcdGNvbnN0IHBvcyA9IG12cC5tdWwoIHZlYzQoIHBvc2l0aW9uTG9jYWwsIDEuMCApICk7XG5cdFx0Y29uc3QgcG9zMiA9IG12cC5tdWwoIHZlYzQoIHBvc2l0aW9uTG9jYWwuYWRkKCBvdXRsaW5lTm9ybWFsICksIDEuMCApICk7XG5cdFx0Y29uc3Qgbm9ybSA9IG5vcm1hbGl6ZSggcG9zLnN1YiggcG9zMiApICk7IC8vIE5PVEU6IHN1YnRyYWN0IHBvczIgZnJvbSBwb3MgYmVjYXVzZSBCYWNrU2lkZSBvYmplY3ROb3JtYWwgaXMgbmVnYXRpdmVcblxuXHRcdG1hdGVyaWFsLnZlcnRleE5vZGUgPSBwb3MuYWRkKCBub3JtLm11bCggdGhpcy50aGlja25lc3NOb2RlICkubXVsKCBwb3MudyApLm11bCggcmF0aW8gKSApO1xuXG5cdFx0Ly8gY29sb3Igbm9kZVxuXG5cdFx0bWF0ZXJpYWwuY29sb3JOb2RlID0gdmVjNCggdGhpcy5jb2xvck5vZGUsIHRoaXMuYWxwaGFOb2RlICk7XG5cblx0XHRyZXR1cm4gbWF0ZXJpYWw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGb3IgdGhlIGdpdmVuIHRvb24gbWF0ZXJpYWwsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBjb3JyZXNwb25kaW5nXG5cdCAqIG91dGxpbmUgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7KE1lc2hUb29uTWF0ZXJpYWx8TWVzaFRvb25Ob2RlTWF0ZXJpYWwpfSBvcmlnaW5hbE1hdGVyaWFsIC0gVGhlIHRvb24gbWF0ZXJpYWwuXG5cdCAqIEByZXR1cm4ge05vZGVNYXRlcmlhbH0gVGhlIG91dGxpbmUgbWF0ZXJpYWwuXG5cdCAqL1xuXHRfZ2V0T3V0bGluZU1hdGVyaWFsKCBvcmlnaW5hbE1hdGVyaWFsICkge1xuXG5cdFx0bGV0IG91dGxpbmVNYXRlcmlhbCA9IHRoaXMuX21hdGVyaWFsQ2FjaGUuZ2V0KCBvcmlnaW5hbE1hdGVyaWFsICk7XG5cblx0XHRpZiAoIG91dGxpbmVNYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRvdXRsaW5lTWF0ZXJpYWwgPSB0aGlzLl9jcmVhdGVNYXRlcmlhbCgpO1xuXG5cdFx0XHR0aGlzLl9tYXRlcmlhbENhY2hlLnNldCggb3JpZ2luYWxNYXRlcmlhbCwgb3V0bGluZU1hdGVyaWFsICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0bGluZU1hdGVyaWFsO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUb29uT3V0bGluZVBhc3NOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSB0b29uIG91dGxpbmUgcGFzcyBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBBIHJlZmVyZW5jZSB0byB0aGUgc2NlbmUuXG4gKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gQSByZWZlcmVuY2UgdG8gdGhlIGNhbWVyYS5cbiAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yIC0gRGVmaW5lcyB0aGUgb3V0bGluZSdzIGNvbG9yLlxuICogQHBhcmFtIHtudW1iZXJ9IFt0aGlja25lc3M9MC4wMDNdIC0gRGVmaW5lcyB0aGUgb3V0bGluZSdzIHRoaWNrbmVzcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYWxwaGE9MV0gLSBEZWZpbmVzIHRoZSBvdXRsaW5lJ3MgYWxwaGEuXG4gKiBAcmV0dXJucyB7VG9vbk91dGxpbmVQYXNzTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRvb25PdXRsaW5lUGFzcyA9ICggc2NlbmUsIGNhbWVyYSwgY29sb3IgPSBuZXcgQ29sb3IoIDAsIDAsIDAgKSwgdGhpY2tuZXNzID0gMC4wMDMsIGFscGhhID0gMSApID0+IG5vZGVPYmplY3QoIG5ldyBUb29uT3V0bGluZVBhc3NOb2RlKCBzY2VuZSwgY2FtZXJhLCBub2RlT2JqZWN0KCBjb2xvciApLCBub2RlT2JqZWN0KCB0aGlja25lc3MgKSwgbm9kZU9iamVjdCggYWxwaGEgKSApICk7XG4iLCJpbXBvcnQgeyBGbiwgZmxvYXQsIG1hdDMsIHZlYzMsIElmIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgc2VsZWN0IH0gZnJvbSAnLi4vbWF0aC9Db25kaXRpb25hbE5vZGUuanMnO1xuaW1wb3J0IHsgY2xhbXAsIGxvZzIsIG1heCwgbWluLCBwb3csIG1peCB9IGZyb20gJy4uL21hdGgvTWF0aE5vZGUuanMnO1xuaW1wb3J0IHsgbXVsLCBzdWIsIGRpdiB9IGZyb20gJy4uL21hdGgvT3BlcmF0b3JOb2RlLmpzJztcblxuLyoqXG4gKiBMaW5lYXIgdG9uZSBtYXBwaW5nLCBleHBvc3VyZSBvbmx5LlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBjb2xvciAtIFRoZSBjb2xvciB0aGF0IHNob3VsZCBiZSB0b25lIG1hcHBlZC5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGV4cG9zdXJlIC0gVGhlIGV4cG9zdXJlLlxuICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHRvbmUgbWFwcGVkIGNvbG9yLlxuICovXG5leHBvcnQgY29uc3QgbGluZWFyVG9uZU1hcHBpbmcgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgY29sb3IsIGV4cG9zdXJlIF0gKSA9PiB7XG5cblx0cmV0dXJuIGNvbG9yLm11bCggZXhwb3N1cmUgKS5jbGFtcCgpO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdsaW5lYXJUb25lTWFwcGluZycsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnY29sb3InLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdleHBvc3VyZScsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbi8qKlxuICogUmVpbmhhcmQgdG9uZSBtYXBwaW5nLlxuICpcbiAqIFJlZmVyZW5jZToge0BsaW5rIGh0dHBzOi8vd3d3LmNzLnV0YWguZWR1L2RvY3MvdGVjaHJlcG9ydHMvMjAwMi9wZGYvVVVDUy0wMi0wMDEucGRmfVxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBjb2xvciAtIFRoZSBjb2xvciB0aGF0IHNob3VsZCBiZSB0b25lIG1hcHBlZC5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGV4cG9zdXJlIC0gVGhlIGV4cG9zdXJlLlxuICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHRvbmUgbWFwcGVkIGNvbG9yLlxuICovXG5leHBvcnQgY29uc3QgcmVpbmhhcmRUb25lTWFwcGluZyA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBjb2xvciwgZXhwb3N1cmUgXSApID0+IHtcblxuXHRjb2xvciA9IGNvbG9yLm11bCggZXhwb3N1cmUgKTtcblxuXHRyZXR1cm4gY29sb3IuZGl2KCBjb2xvci5hZGQoIDEuMCApICkuY2xhbXAoKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAncmVpbmhhcmRUb25lTWFwcGluZycsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnY29sb3InLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdleHBvc3VyZScsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbi8qKlxuICogQ2luZW9uIHRvbmUgbWFwcGluZy5cbiAqXG4gKiBSZWZlcmVuY2U6IHtAbGluayBodHRwOi8vZmlsbWljd29ybGRzLmNvbS9ibG9nL2ZpbG1pYy10b25lbWFwcGluZy1vcGVyYXRvcnMvfVxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBjb2xvciAtIFRoZSBjb2xvciB0aGF0IHNob3VsZCBiZSB0b25lIG1hcHBlZC5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGV4cG9zdXJlIC0gVGhlIGV4cG9zdXJlLlxuICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHRvbmUgbWFwcGVkIGNvbG9yLlxuICovXG5leHBvcnQgY29uc3QgY2luZW9uVG9uZU1hcHBpbmcgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgY29sb3IsIGV4cG9zdXJlIF0gKSA9PiB7XG5cblx0Ly8gZmlsbWljIG9wZXJhdG9yIGJ5IEppbSBIZWpsIGFuZCBSaWNoYXJkIEJ1cmdlc3MtRGF3c29uXG5cdGNvbG9yID0gY29sb3IubXVsKCBleHBvc3VyZSApO1xuXHRjb2xvciA9IGNvbG9yLnN1YiggMC4wMDQgKS5tYXgoIDAuMCApO1xuXG5cdGNvbnN0IGEgPSBjb2xvci5tdWwoIGNvbG9yLm11bCggNi4yICkuYWRkKCAwLjUgKSApO1xuXHRjb25zdCBiID0gY29sb3IubXVsKCBjb2xvci5tdWwoIDYuMiApLmFkZCggMS43ICkgKS5hZGQoIDAuMDYgKTtcblxuXHRyZXR1cm4gYS5kaXYoIGIgKS5wb3coIDIuMiApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdjaW5lb25Ub25lTWFwcGluZycsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnY29sb3InLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdleHBvc3VyZScsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbi8vIHNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL3NlbGZzaGFkb3cvbHRjX2NvZGUvYmxvYi9tYXN0ZXIvd2ViZ2wvc2hhZGVycy9sdGMvbHRjX2JsaXQuZnNcblxuY29uc3QgUlJUQW5kT0RURml0ID0gLypAX19QVVJFX18qLyBGbiggKCBbIGNvbG9yIF0gKSA9PiB7XG5cblx0Y29uc3QgYSA9IGNvbG9yLm11bCggY29sb3IuYWRkKCAwLjAyNDU3ODYgKSApLnN1YiggMC4wMDAwOTA1MzcgKTtcblx0Y29uc3QgYiA9IGNvbG9yLm11bCggY29sb3IuYWRkKCAwLjQzMjk1MTAgKS5tdWwoIDAuOTgzNzI5ICkgKS5hZGQoIDAuMjM4MDgxICk7XG5cblx0cmV0dXJuIGEuZGl2KCBiICk7XG5cbn0gKTtcblxuLyoqXG4gKiBBQ0VTRmlsbWljIHRvbmUgbWFwcGluZy5cbiAqXG4gKiBSZWZlcmVuY2U6IHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2VsZnNoYWRvdy9sdGNfY29kZS9ibG9iL21hc3Rlci93ZWJnbC9zaGFkZXJzL2x0Yy9sdGNfYmxpdC5mc31cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gY29sb3IgLSBUaGUgY29sb3IgdGhhdCBzaG91bGQgYmUgdG9uZSBtYXBwZWQuXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBleHBvc3VyZSAtIFRoZSBleHBvc3VyZS5cbiAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSB0b25lIG1hcHBlZCBjb2xvci5cbiAqL1xuZXhwb3J0IGNvbnN0IGFjZXNGaWxtaWNUb25lTWFwcGluZyA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBjb2xvciwgZXhwb3N1cmUgXSApID0+IHtcblxuXHQvLyBzUkdCID0+IFhZWiA9PiBENjVfMl9ENjAgPT4gQVAxID0+IFJSVF9TQVRcblx0Y29uc3QgQUNFU0lucHV0TWF0ID0gbWF0Myhcblx0XHQwLjU5NzE5LCAwLjM1NDU4LCAwLjA0ODIzLFxuXHRcdDAuMDc2MDAsIDAuOTA4MzQsIDAuMDE1NjYsXG5cdFx0MC4wMjg0MCwgMC4xMzM4MywgMC44Mzc3N1xuXHQpO1xuXG5cdC8vIE9EVF9TQVQgPT4gWFlaID0+IEQ2MF8yX0Q2NSA9PiBzUkdCXG5cdGNvbnN0IEFDRVNPdXRwdXRNYXQgPSBtYXQzKFxuXHRcdDEuNjA0NzUsIC0gMC41MzEwOCwgLSAwLjA3MzY3LFxuXHRcdC0gMC4xMDIwOCwgMS4xMDgxMywgLSAwLjAwNjA1LFxuXHRcdC0gMC4wMDMyNywgLSAwLjA3Mjc2LCAxLjA3NjAyXG5cdCk7XG5cblx0Y29sb3IgPSBjb2xvci5tdWwoIGV4cG9zdXJlICkuZGl2KCAwLjYgKTtcblxuXHRjb2xvciA9IEFDRVNJbnB1dE1hdC5tdWwoIGNvbG9yICk7XG5cblx0Ly8gQXBwbHkgUlJUIGFuZCBPRFRcblx0Y29sb3IgPSBSUlRBbmRPRFRGaXQoIGNvbG9yICk7XG5cblx0Y29sb3IgPSBBQ0VTT3V0cHV0TWF0Lm11bCggY29sb3IgKTtcblxuXHQvLyBDbGFtcCB0byBbMCwgMV1cblx0cmV0dXJuIGNvbG9yLmNsYW1wKCk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ2FjZXNGaWxtaWNUb25lTWFwcGluZycsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnY29sb3InLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdleHBvc3VyZScsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbmNvbnN0IExJTkVBUl9SRUMyMDIwX1RPX0xJTkVBUl9TUkdCID0gLypAX19QVVJFX18qLyBtYXQzKCB2ZWMzKCAxLjY2MDUsIC0gMC4xMjQ2LCAtIDAuMDE4MiApLCB2ZWMzKCAtIDAuNTg3NiwgMS4xMzI5LCAtIDAuMTAwNiApLCB2ZWMzKCAtIDAuMDcyOCwgLSAwLjAwODMsIDEuMTE4NyApICk7XG5jb25zdCBMSU5FQVJfU1JHQl9UT19MSU5FQVJfUkVDMjAyMCA9IC8qQF9fUFVSRV9fKi8gbWF0MyggdmVjMyggMC42Mjc0LCAwLjA2OTEsIDAuMDE2NCApLCB2ZWMzKCAwLjMyOTMsIDAuOTE5NSwgMC4wODgwICksIHZlYzMoIDAuMDQzMywgMC4wMTEzLCAwLjg5NTYgKSApO1xuXG5jb25zdCBhZ3hEZWZhdWx0Q29udHJhc3RBcHByb3ggPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgeF9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCB4ID0gdmVjMyggeF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB4MiA9IHZlYzMoIHgubXVsKCB4ICkgKS50b1ZhcigpO1xuXHRjb25zdCB4NCA9IHZlYzMoIHgyLm11bCggeDIgKSApLnRvVmFyKCk7XG5cblx0cmV0dXJuIGZsb2F0KCAxNS41ICkubXVsKCB4NC5tdWwoIHgyICkgKS5zdWIoIG11bCggNDAuMTQsIHg0Lm11bCggeCApICkgKS5hZGQoIG11bCggMzEuOTYsIHg0ICkuc3ViKCBtdWwoIDYuODY4LCB4Mi5tdWwoIHggKSApICkuYWRkKCBtdWwoIDAuNDI5OCwgeDIgKS5hZGQoIG11bCggMC4xMTkxLCB4ICkuc3ViKCAwLjAwMjMyICkgKSApICk7XG5cbn0gKTtcblxuLyoqXG4gKiBBZ1ggdG9uZSBtYXBwaW5nLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBjb2xvciAtIFRoZSBjb2xvciB0aGF0IHNob3VsZCBiZSB0b25lIG1hcHBlZC5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGV4cG9zdXJlIC0gVGhlIGV4cG9zdXJlLlxuICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHRvbmUgbWFwcGVkIGNvbG9yLlxuICovXG5leHBvcnQgY29uc3QgYWd4VG9uZU1hcHBpbmcgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgY29sb3IsIGV4cG9zdXJlIF0gKSA9PiB7XG5cblx0Y29uc3QgY29sb3J0b25lID0gdmVjMyggY29sb3IgKS50b1ZhcigpO1xuXHRjb25zdCBBZ1hJbnNldE1hdHJpeCA9IG1hdDMoIHZlYzMoIDAuODU2NjI3MTUzMzE1OTgzLCAwLjEzNzMxODk3MjkyOTg0NywgMC4xMTE4OTgyMTI5OTk5NSApLCB2ZWMzKCAwLjA5NTEyMTI0MDUzODE1ODgsIDAuNzYxMjQxOTkwNjAyNTkxLCAwLjA3Njc5OTQxODYwMzE5MDMgKSwgdmVjMyggMC4wNDgyNTE2MDYxNDU4NTgzLCAwLjEwMTQzOTAzNjQ2NzU2MiwgMC44MTEzMDIzNjgzOTY4NTkgKSApO1xuXHRjb25zdCBBZ1hPdXRzZXRNYXRyaXggPSBtYXQzKCB2ZWMzKCAxLjEyNzEwMDU4MTgxNDQzNjgsIC0gMC4xNDEzMjk3NjM0OTg0MzgzLCAtIDAuMTQxMzI5NzYzNDk4NDM4MjYgKSwgdmVjMyggLSAwLjExMDYwNjY0MzA5NjYwMzIzLCAxLjE1NzgyMzcwMjIxNjI3MiwgLSAwLjExMDYwNjY0MzA5NjYwMjk0ICksIHZlYzMoIC0gMC4wMTY0OTM5Mzg3MTc4MzQ1NzMsIC0gMC4wMTY0OTM5Mzg3MTc4MzQyNTcsIDEuMjUxOTM2NDA2NTk1MDQwNSApICk7XG5cdGNvbnN0IEFneE1pbkV2ID0gZmxvYXQoIC0gMTIuNDczOTMgKTtcblx0Y29uc3QgQWd4TWF4RXYgPSBmbG9hdCggNC4wMjYwNjkgKTtcblx0Y29sb3J0b25lLm11bEFzc2lnbiggZXhwb3N1cmUgKTtcblx0Y29sb3J0b25lLmFzc2lnbiggTElORUFSX1NSR0JfVE9fTElORUFSX1JFQzIwMjAubXVsKCBjb2xvcnRvbmUgKSApO1xuXHRjb2xvcnRvbmUuYXNzaWduKCBBZ1hJbnNldE1hdHJpeC5tdWwoIGNvbG9ydG9uZSApICk7XG5cdGNvbG9ydG9uZS5hc3NpZ24oIG1heCggY29sb3J0b25lLCAxZS0xMCApICk7XG5cdGNvbG9ydG9uZS5hc3NpZ24oIGxvZzIoIGNvbG9ydG9uZSApICk7XG5cdGNvbG9ydG9uZS5hc3NpZ24oIGNvbG9ydG9uZS5zdWIoIEFneE1pbkV2ICkuZGl2KCBBZ3hNYXhFdi5zdWIoIEFneE1pbkV2ICkgKSApO1xuXHRjb2xvcnRvbmUuYXNzaWduKCBjbGFtcCggY29sb3J0b25lLCAwLjAsIDEuMCApICk7XG5cdGNvbG9ydG9uZS5hc3NpZ24oIGFneERlZmF1bHRDb250cmFzdEFwcHJveCggY29sb3J0b25lICkgKTtcblx0Y29sb3J0b25lLmFzc2lnbiggQWdYT3V0c2V0TWF0cml4Lm11bCggY29sb3J0b25lICkgKTtcblx0Y29sb3J0b25lLmFzc2lnbiggcG93KCBtYXgoIHZlYzMoIDAuMCApLCBjb2xvcnRvbmUgKSwgdmVjMyggMi4yICkgKSApO1xuXHRjb2xvcnRvbmUuYXNzaWduKCBMSU5FQVJfUkVDMjAyMF9UT19MSU5FQVJfU1JHQi5tdWwoIGNvbG9ydG9uZSApICk7XG5cdGNvbG9ydG9uZS5hc3NpZ24oIGNsYW1wKCBjb2xvcnRvbmUsIDAuMCwgMS4wICkgKTtcblxuXHRyZXR1cm4gY29sb3J0b25lO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdhZ3hUb25lTWFwcGluZycsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnY29sb3InLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdleHBvc3VyZScsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbi8qKlxuICogTmV1dHJhbCB0b25lIG1hcHBpbmcuXG4gKlxuICogUmVmZXJlbmNlOiB7QGxpbmsgaHR0cHM6Ly9tb2RlbHZpZXdlci5kZXYvZXhhbXBsZXMvdG9uZS1tYXBwaW5nfVxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBjb2xvciAtIFRoZSBjb2xvciB0aGF0IHNob3VsZCBiZSB0b25lIG1hcHBlZC5cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGV4cG9zdXJlIC0gVGhlIGV4cG9zdXJlLlxuICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHRvbmUgbWFwcGVkIGNvbG9yLlxuICovXG5leHBvcnQgY29uc3QgbmV1dHJhbFRvbmVNYXBwaW5nID0gLypAX19QVVJFX18qLyBGbiggKCBbIGNvbG9yLCBleHBvc3VyZSBdICkgPT4ge1xuXG5cdGNvbnN0IFN0YXJ0Q29tcHJlc3Npb24gPSBmbG9hdCggMC44IC0gMC4wNCApO1xuXHRjb25zdCBEZXNhdHVyYXRpb24gPSBmbG9hdCggMC4xNSApO1xuXG5cdGNvbG9yID0gY29sb3IubXVsKCBleHBvc3VyZSApO1xuXG5cdGNvbnN0IHggPSBtaW4oIGNvbG9yLnIsIG1pbiggY29sb3IuZywgY29sb3IuYiApICk7XG5cdGNvbnN0IG9mZnNldCA9IHNlbGVjdCggeC5sZXNzVGhhbiggMC4wOCApLCB4LnN1YiggbXVsKCA2LjI1LCB4Lm11bCggeCApICkgKSwgMC4wNCApO1xuXG5cdGNvbG9yLnN1YkFzc2lnbiggb2Zmc2V0ICk7XG5cblx0Y29uc3QgcGVhayA9IG1heCggY29sb3IuciwgbWF4KCBjb2xvci5nLCBjb2xvci5iICkgKTtcblxuXHRJZiggcGVhay5sZXNzVGhhbiggU3RhcnRDb21wcmVzc2lvbiApLCAoKSA9PiB7XG5cblx0XHRyZXR1cm4gY29sb3I7XG5cblx0fSApO1xuXG5cdGNvbnN0IGQgPSBzdWIoIDEsIFN0YXJ0Q29tcHJlc3Npb24gKTtcblx0Y29uc3QgbmV3UGVhayA9IHN1YiggMSwgZC5tdWwoIGQgKS5kaXYoIHBlYWsuYWRkKCBkLnN1YiggU3RhcnRDb21wcmVzc2lvbiApICkgKSApO1xuXHRjb2xvci5tdWxBc3NpZ24oIG5ld1BlYWsuZGl2KCBwZWFrICkgKTtcblx0Y29uc3QgZyA9IHN1YiggMSwgZGl2KCAxLCBEZXNhdHVyYXRpb24ubXVsKCBwZWFrLnN1YiggbmV3UGVhayApICkuYWRkKCAxICkgKSApO1xuXG5cdHJldHVybiBtaXgoIGNvbG9yLCB2ZWMzKCBuZXdQZWFrICksIGcgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbmV1dHJhbFRvbmVNYXBwaW5nJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdjb2xvcicsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ2V4cG9zdXJlJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIG5hdGl2ZSBjb2RlIHNlY3Rpb25zLiBJdCBpcyB0aGUgYmFzZVxuICogY2xhc3MgZm9yIG1vZHVsZXMgbGlrZSB7QGxpbmsgRnVuY3Rpb25Ob2RlfSB3aGljaCBhbGxvd3MgdG8gaW1wbGVtZW50XG4gKiBmdW5jdGlvbnMgd2l0aCBuYXRpdmUgc2hhZGVyIGxhbmd1YWdlcy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBDb2RlTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnQ29kZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBjb2RlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZT0nJ10gLSBUaGUgbmF0aXZlIGNvZGUuXG5cdCAqIEBwYXJhbSB7QXJyYXk8Tm9kZT59IFtpbmNsdWRlcz1bXV0gLSBBbiBhcnJheSBvZiBpbmNsdWRlcy5cblx0ICogQHBhcmFtIHsoJ2pzJ3wnd2dzbCd8J2dsc2wnKX0gW2xhbmd1YWdlPScnXSAtIFRoZSB1c2VkIGxhbmd1YWdlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNvZGUgPSAnJywgaW5jbHVkZXMgPSBbXSwgbGFuZ3VhZ2UgPSAnJyApIHtcblxuXHRcdHN1cGVyKCAnY29kZScgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNDb2RlTm9kZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbmF0aXZlIGNvZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0ICcnXG5cdFx0ICovXG5cdFx0dGhpcy5jb2RlID0gY29kZTtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IG9mIGluY2x1ZGVzXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Tm9kZT59XG5cdFx0ICogQGRlZmF1bHQgW11cblx0XHQgKi9cblx0XHR0aGlzLmluY2x1ZGVzID0gaW5jbHVkZXM7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdXNlZCBsYW5ndWFnZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoJ2pzJ3wnd2dzbCd8J2dsc2wnKX1cblx0XHQgKiBAZGVmYXVsdCAnJ1xuXHRcdCAqL1xuXHRcdHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBtZXRob2QgaXMgb3ZlcndyaXR0ZW4gc28gaXQgYWx3YXlzIHJldHVybnMgYHRydWVgLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgbm9kZSBpcyBnbG9iYWwgb3Igbm90LlxuXHQgKi9cblx0aXNHbG9iYWwoKSB7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGluY2x1ZGVzIG9mIHRoaXMgY29kZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PE5vZGU+fSBpbmNsdWRlcyAtIFRoZSBpbmNsdWRlcyB0byBzZXQuXG5cdCAqIEByZXR1cm4ge0NvZGVOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRzZXRJbmNsdWRlcyggaW5jbHVkZXMgKSB7XG5cblx0XHR0aGlzLmluY2x1ZGVzID0gaW5jbHVkZXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGluY2x1ZGVzIG9mIHRoaXMgY29kZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtBcnJheTxOb2RlPn0gVGhlIGluY2x1ZGVzLlxuXHQgKi9cblx0Z2V0SW5jbHVkZXMoIC8qYnVpbGRlciovICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaW5jbHVkZXM7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgaW5jbHVkZXMgPSB0aGlzLmdldEluY2x1ZGVzKCBidWlsZGVyICk7XG5cblx0XHRmb3IgKCBjb25zdCBpbmNsdWRlIG9mIGluY2x1ZGVzICkge1xuXG5cdFx0XHRpbmNsdWRlLmJ1aWxkKCBidWlsZGVyICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBub2RlQ29kZSA9IGJ1aWxkZXIuZ2V0Q29kZUZyb21Ob2RlKCB0aGlzLCB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICkgKTtcblx0XHRub2RlQ29kZS5jb2RlID0gdGhpcy5jb2RlO1xuXG5cdFx0cmV0dXJuIG5vZGVDb2RlLmNvZGU7XG5cblx0fVxuXG5cdHNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLnNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0ZGF0YS5jb2RlID0gdGhpcy5jb2RlO1xuXHRcdGRhdGEubGFuZ3VhZ2UgPSB0aGlzLmxhbmd1YWdlO1xuXG5cdH1cblxuXHRkZXNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLmRlc2VyaWFsaXplKCBkYXRhICk7XG5cblx0XHR0aGlzLmNvZGUgPSBkYXRhLmNvZGU7XG5cdFx0dGhpcy5sYW5ndWFnZSA9IGRhdGEubGFuZ3VhZ2U7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvZGVOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBjb2RlIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGU9JyddIC0gVGhlIG5hdGl2ZSBjb2RlLlxuICogQHBhcmFtIHtBcnJheTxOb2RlPn0gW2luY2x1ZGVzPVtdXSAtIEFuIGFycmF5IG9mIGluY2x1ZGVzLlxuICogQHBhcmFtIHsoJ2pzJ3wnd2dzbCd8J2dsc2wnKX0gW2xhbmd1YWdlPScnXSAtIFRoZSB1c2VkIGxhbmd1YWdlLlxuICogQHJldHVybnMge0NvZGVOb2RlfVxuICovXG5leHBvcnQgY29uc3QgY29kZSA9IC8qQF9fUFVSRV9fKi8gbm9kZVByb3h5KCBDb2RlTm9kZSApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBKUyBjb2RlIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjIC0gVGhlIG5hdGl2ZSBjb2RlLlxuICogQHBhcmFtIHtBcnJheTxOb2RlPn0gaW5jbHVkZXMgLSBBbiBhcnJheSBvZiBpbmNsdWRlcy5cbiAqIEByZXR1cm5zIHtDb2RlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGpzID0gKCBzcmMsIGluY2x1ZGVzICkgPT4gY29kZSggc3JjLCBpbmNsdWRlcywgJ2pzJyApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBXR1NMIGNvZGUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgLSBUaGUgbmF0aXZlIGNvZGUuXG4gKiBAcGFyYW0ge0FycmF5PE5vZGU+fSBpbmNsdWRlcyAtIEFuIGFycmF5IG9mIGluY2x1ZGVzLlxuICogQHJldHVybnMge0NvZGVOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgd2dzbCA9ICggc3JjLCBpbmNsdWRlcyApID0+IGNvZGUoIHNyYywgaW5jbHVkZXMsICd3Z3NsJyApO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBHTFNMIGNvZGUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgLSBUaGUgbmF0aXZlIGNvZGUuXG4gKiBAcGFyYW0ge0FycmF5PE5vZGU+fSBpbmNsdWRlcyAtIEFuIGFycmF5IG9mIGluY2x1ZGVzLlxuICogQHJldHVybnMge0NvZGVOb2RlfVxuICovXG5leHBvcnQgY29uc3QgZ2xzbCA9ICggc3JjLCBpbmNsdWRlcyApID0+IGNvZGUoIHNyYywgaW5jbHVkZXMsICdnbHNsJyApO1xuIiwiaW1wb3J0IENvZGVOb2RlIGZyb20gJy4vQ29kZU5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZU9iamVjdCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBuYXRpdmUgc2hhZGVyIGZ1bmN0aW9uLiBJdCBjYW4gYmUgdXNlZCB0byBpbXBsZW1lbnRcbiAqIGNlcnRhaW4gYXNwZWN0cyBvZiBhIG5vZGUgbWF0ZXJpYWwgd2l0aCBuYXRpdmUgc2hhZGVyIGNvZGUuIFRoZXJlIGFyZSB0d28gcHJlZGVmaW5lZFxuICogVFNMIGZ1bmN0aW9ucyBmb3IgZWFzaWVyIHVzYWdlLlxuICpcbiAqIC0gYHdnc2xGbmA6IENyZWF0ZXMgYSBXR1NMIGZ1bmN0aW9uIG5vZGUuXG4gKiAtIGBnbHNsRm5gOiBDcmVhdGVzIGEgR0xTTCBmdW5jdGlvbiBub2RlLlxuICpcbiAqIEEgYmFzaWMgZXhhbXBsZSB3aXRoIG9uZSBpbmNsdWRlIGxvb2tzIGxpa2Ugc286XG4gKlxuICogYGBganNcbiAqIGNvbnN0IGRlc2F0dXJhdGVXR1NMRm4gPSB3Z3NsRm4oIGBcbiAqXHRmbiBkZXNhdHVyYXRlKCBjb2xvcjp2ZWMzPGYzMj4gKSAtPiB2ZWMzPGYzMj4ge1xuICpcdFx0bGV0IGx1bSA9IHZlYzM8ZjMyPiggMC4yOTksIDAuNTg3LCAwLjExNCApO1xuICpcdFx0cmV0dXJuIHZlYzM8ZjMyPiggZG90KCBsdW0sIGNvbG9yICkgKTtcbiAqXHR9YFxuICopO1xuICogY29uc3Qgc29tZVdHU0xGbiA9IHdnc2xGbiggYFxuICpcdGZuIHNvbWVGbiggY29sb3I6dmVjMzxmMzI+ICkgLT4gdmVjMzxmMzI+IHtcbiAqIFx0XHRyZXR1cm4gZGVzYXR1cmF0ZSggY29sb3IgKTtcbiAqIFx0fVxuICogYCwgWyBkZXNhdHVyYXRlV0dTTEZuIF0gKTtcbiAqIG1hdGVyaWFsLmNvbG9yTm9kZSA9IHNvbWVXR1NMRm4oIHsgY29sb3I6IHRleHR1cmUoIG1hcCApIH0gKTtcbiAqYGBgXG4gKiBAYXVnbWVudHMgQ29kZU5vZGVcbiAqL1xuY2xhc3MgRnVuY3Rpb25Ob2RlIGV4dGVuZHMgQ29kZU5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnRnVuY3Rpb25Ob2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZnVuY3Rpb24gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlPScnXSAtIFRoZSBuYXRpdmUgY29kZS5cblx0ICogQHBhcmFtIHtBcnJheTxOb2RlPn0gW2luY2x1ZGVzPVtdXSAtIEFuIGFycmF5IG9mIGluY2x1ZGVzLlxuXHQgKiBAcGFyYW0geygnanMnfCd3Z3NsJ3wnZ2xzbCcpfSBbbGFuZ3VhZ2U9JyddIC0gVGhlIHVzZWQgbGFuZ3VhZ2UuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggY29kZSA9ICcnLCBpbmNsdWRlcyA9IFtdLCBsYW5ndWFnZSA9ICcnICkge1xuXG5cdFx0c3VwZXIoIGNvZGUsIGluY2x1ZGVzLCBsYW5ndWFnZSApO1xuXG5cdH1cblxuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE5vZGVGdW5jdGlvbiggYnVpbGRlciApLnR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnB1dHMgb2YgdGhpcyBmdW5jdGlvbiBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtBcnJheTxOb2RlRnVuY3Rpb25JbnB1dD59IFRoZSBpbnB1dHMuXG5cdCAqL1xuXHRnZXRJbnB1dHMoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXROb2RlRnVuY3Rpb24oIGJ1aWxkZXIgKS5pbnB1dHM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBub2RlIGZ1bmN0aW9uIGZvciB0aGlzIGZ1bmN0aW9uIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge05vZGVGdW5jdGlvbn0gVGhlIG5vZGUgZnVuY3Rpb24uXG5cdCAqL1xuXHRnZXROb2RlRnVuY3Rpb24oIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBub2RlRGF0YSA9IGJ1aWxkZXIuZ2V0RGF0YUZyb21Ob2RlKCB0aGlzICk7XG5cblx0XHRsZXQgbm9kZUZ1bmN0aW9uID0gbm9kZURhdGEubm9kZUZ1bmN0aW9uO1xuXG5cdFx0aWYgKCBub2RlRnVuY3Rpb24gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bm9kZUZ1bmN0aW9uID0gYnVpbGRlci5wYXJzZXIucGFyc2VGdW5jdGlvbiggdGhpcy5jb2RlICk7XG5cblx0XHRcdG5vZGVEYXRhLm5vZGVGdW5jdGlvbiA9IG5vZGVGdW5jdGlvbjtcblxuXHRcdH1cblxuXHRcdHJldHVybiBub2RlRnVuY3Rpb247XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyLCBvdXRwdXQgKSB7XG5cblx0XHRzdXBlci5nZW5lcmF0ZSggYnVpbGRlciApO1xuXG5cdFx0Y29uc3Qgbm9kZUZ1bmN0aW9uID0gdGhpcy5nZXROb2RlRnVuY3Rpb24oIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IG5hbWUgPSBub2RlRnVuY3Rpb24ubmFtZTtcblx0XHRjb25zdCB0eXBlID0gbm9kZUZ1bmN0aW9uLnR5cGU7XG5cblx0XHRjb25zdCBub2RlQ29kZSA9IGJ1aWxkZXIuZ2V0Q29kZUZyb21Ob2RlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRpZiAoIG5hbWUgIT09ICcnICkge1xuXG5cdFx0XHQvLyB1c2UgYSBjdXN0b20gcHJvcGVydHkgbmFtZVxuXG5cdFx0XHRub2RlQ29kZS5uYW1lID0gbmFtZTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHByb3BlcnR5TmFtZSA9IGJ1aWxkZXIuZ2V0UHJvcGVydHlOYW1lKCBub2RlQ29kZSApO1xuXG5cdFx0Y29uc3QgY29kZSA9IHRoaXMuZ2V0Tm9kZUZ1bmN0aW9uKCBidWlsZGVyICkuZ2V0Q29kZSggcHJvcGVydHlOYW1lICk7XG5cblx0XHRub2RlQ29kZS5jb2RlID0gY29kZSArICdcXG4nO1xuXG5cdFx0aWYgKCBvdXRwdXQgPT09ICdwcm9wZXJ0eScgKSB7XG5cblx0XHRcdHJldHVybiBwcm9wZXJ0eU5hbWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gYnVpbGRlci5mb3JtYXQoIGAkeyBwcm9wZXJ0eU5hbWUgfSgpYCwgdHlwZSwgb3V0cHV0ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZ1bmN0aW9uTm9kZTtcblxuY29uc3QgbmF0aXZlRm4gPSAoIGNvZGUsIGluY2x1ZGVzID0gW10sIGxhbmd1YWdlID0gJycgKSA9PiB7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgaW5jbHVkZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0Y29uc3QgaW5jbHVkZSA9IGluY2x1ZGVzWyBpIF07XG5cblx0XHQvLyBUU0wgRnVuY3Rpb246IGdsc2xGbiwgd2dzbEZuXG5cblx0XHRpZiAoIHR5cGVvZiBpbmNsdWRlID09PSAnZnVuY3Rpb24nICkge1xuXG5cdFx0XHRpbmNsdWRlc1sgaSBdID0gaW5jbHVkZS5mdW5jdGlvbk5vZGU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvbnN0IGZ1bmN0aW9uTm9kZSA9IG5vZGVPYmplY3QoIG5ldyBGdW5jdGlvbk5vZGUoIGNvZGUsIGluY2x1ZGVzLCBsYW5ndWFnZSApICk7XG5cblx0Y29uc3QgZm4gPSAoIC4uLnBhcmFtcyApID0+IGZ1bmN0aW9uTm9kZS5jYWxsKCAuLi5wYXJhbXMgKTtcblx0Zm4uZnVuY3Rpb25Ob2RlID0gZnVuY3Rpb25Ob2RlO1xuXG5cdHJldHVybiBmbjtcblxufTtcblxuZXhwb3J0IGNvbnN0IGdsc2xGbiA9ICggY29kZSwgaW5jbHVkZXMgKSA9PiBuYXRpdmVGbiggY29kZSwgaW5jbHVkZXMsICdnbHNsJyApO1xuZXhwb3J0IGNvbnN0IHdnc2xGbiA9ICggY29kZSwgaW5jbHVkZXMgKSA9PiBuYXRpdmVGbiggY29kZSwgaW5jbHVkZXMsICd3Z3NsJyApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IGFycmF5QnVmZmVyVG9CYXNlNjQsIGJhc2U2NFRvQXJyYXlCdWZmZXIgfSBmcm9tICcuLi9jb3JlL05vZGVVdGlscy5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHksIGZsb2F0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuLi8uLi9jb3JlL0V2ZW50RGlzcGF0Y2hlci5qcyc7XG5cbi8qKlxuICogYFNjcmlwdGFibGVOb2RlYCB1c2VzIHRoaXMgY2xhc3MgdG8gbWFuYWdlIHNjcmlwdCBpbnB1dHMgYW5kIG91dHB1dHMuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgU2NyaXB0YWJsZVZhbHVlTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU2NyaXB0YWJsZVZhbHVlTm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHNjcmlwdGFibGUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IFt2YWx1ZT1udWxsXSAtIFRoZSB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2YWx1ZSA9IG51bGwgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fdmFsdWUgPSB2YWx1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIERlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBgX3ZhbHVlYCwgdGhpcyBwcm9wZXJ0eSBtaWdodCBjYWNoZSBwYXJzZWQgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2NhY2hlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIElmIHRoaXMgbm9kZSByZXByZXNlbnRzIGFuIGlucHV0LCB0aGlzIHByb3BlcnR5IHJlcHJlc2VudHMgdGhlIGlucHV0IHR5cGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5pbnB1dFR5cGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSWYgdGhpcyBub2RlIHJlcHJlc2VudHMgYW4gb3V0cHV0LCB0aGlzIHByb3BlcnR5IHJlcHJlc2VudHMgdGhlIG91dHB1dCB0eXBlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMub3V0cHV0VHlwZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbiBldmVudCBkaXNwYXRjaGVyIGZvciBtYW5hZ2luZyBldmVudHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RXZlbnREaXNwYXRjaGVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50RGlzcGF0Y2hlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1NjcmlwdGFibGVWYWx1ZU5vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGlzIG5vZGUgcmVwcmVzZW50cyBhbiBvdXRwdXQgb3Igbm90LlxuXHQgKlxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICogQHJlYWRvbmx5XG5cdCAqIEBkZWZhdWx0IHRydWVcblx0ICovXG5cdGdldCBpc1NjcmlwdGFibGVPdXRwdXROb2RlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMub3V0cHV0VHlwZSAhPT0gbnVsbDtcblxuXHR9XG5cblx0c2V0IHZhbHVlKCB2YWwgKSB7XG5cblx0XHRpZiAoIHRoaXMuX3ZhbHVlID09PSB2YWwgKSByZXR1cm47XG5cblx0XHRpZiAoIHRoaXMuX2NhY2hlICYmIHRoaXMuaW5wdXRUeXBlID09PSAnVVJMJyAmJiB0aGlzLnZhbHVlLnZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgKSB7XG5cblx0XHRcdFVSTC5yZXZva2VPYmplY3RVUkwoIHRoaXMuX2NhY2hlICk7XG5cblx0XHRcdHRoaXMuX2NhY2hlID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3ZhbHVlID0gdmFsO1xuXG5cdFx0dGhpcy5ldmVudHMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnY2hhbmdlJyB9ICk7XG5cblx0XHR0aGlzLnJlZnJlc2goKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBub2RlJ3MgdmFsdWUuXG5cdCAqXG5cdCAqIEB0eXBlIHthbnl9XG5cdCAqL1xuXHRnZXQgdmFsdWUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fdmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNwYXRjaGVzIHRoZSBgcmVmcmVzaGAgZXZlbnQuXG5cdCAqL1xuXHRyZWZyZXNoKCkge1xuXG5cdFx0dGhpcy5ldmVudHMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAncmVmcmVzaCcgfSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGB2YWx1ZWAgcHJvcGVydHkgdXN1YWxseSByZXByZXNlbnRzIGEgbm9kZSBvciBldmVuIGJpbmFyeSBkYXRhIGluIGZvcm0gb2YgYXJyYXkgYnVmZmVycy5cblx0ICogSW4gdGhpcyBjYXNlLCB0aGlzIG1ldGhvZCB0cmllcyB0byByZXR1cm4gdGhlIGFjdHVhbCB2YWx1ZSBiZWhpbmQgdGhlIGNvbXBsZXggdHlwZS5cblx0ICpcblx0ICogQHJldHVybiB7YW55fSBUaGUgdmFsdWUuXG5cdCAqL1xuXHRnZXRWYWx1ZSgpIHtcblxuXHRcdGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZTtcblxuXHRcdGlmICggdmFsdWUgJiYgdGhpcy5fY2FjaGUgPT09IG51bGwgJiYgdGhpcy5pbnB1dFR5cGUgPT09ICdVUkwnICYmIHZhbHVlLnZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgKSB7XG5cblx0XHRcdHRoaXMuX2NhY2hlID0gVVJMLmNyZWF0ZU9iamVjdFVSTCggbmV3IEJsb2IoIFsgdmFsdWUudmFsdWUgXSApICk7XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS52YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZS52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIChcblx0XHRcdCggKCB0aGlzLmlucHV0VHlwZSA9PT0gJ1VSTCcgfHwgdGhpcy5pbnB1dFR5cGUgPT09ICdTdHJpbmcnICkgJiYgdHlwZW9mIHZhbHVlLnZhbHVlID09PSAnc3RyaW5nJyApIHx8XG5cdFx0XHQoIHRoaXMuaW5wdXRUeXBlID09PSAnTnVtYmVyJyAmJiB0eXBlb2YgdmFsdWUudmFsdWUgPT09ICdudW1iZXInICkgfHxcblx0XHRcdCggdGhpcy5pbnB1dFR5cGUgPT09ICdWZWN0b3IyJyAmJiB2YWx1ZS52YWx1ZS5pc1ZlY3RvcjIgKSB8fFxuXHRcdFx0KCB0aGlzLmlucHV0VHlwZSA9PT0gJ1ZlY3RvcjMnICYmIHZhbHVlLnZhbHVlLmlzVmVjdG9yMyApIHx8XG5cdFx0XHQoIHRoaXMuaW5wdXRUeXBlID09PSAnVmVjdG9yNCcgJiYgdmFsdWUudmFsdWUuaXNWZWN0b3I0ICkgfHxcblx0XHRcdCggdGhpcy5pbnB1dFR5cGUgPT09ICdDb2xvcicgJiYgdmFsdWUudmFsdWUuaXNDb2xvciApIHx8XG5cdFx0XHQoIHRoaXMuaW5wdXRUeXBlID09PSAnTWF0cml4MycgJiYgdmFsdWUudmFsdWUuaXNNYXRyaXgzICkgfHxcblx0XHRcdCggdGhpcy5pbnB1dFR5cGUgPT09ICdNYXRyaXg0JyAmJiB2YWx1ZS52YWx1ZS5pc01hdHJpeDQgKVxuXHRcdCkgKSB7XG5cblx0XHRcdHJldHVybiB2YWx1ZS52YWx1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9jYWNoZSB8fCB2YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgaXMgaW5mZXJyZWQgZnJvbSB0aGUgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudmFsdWUgJiYgdGhpcy52YWx1ZS5pc05vZGUgPyB0aGlzLnZhbHVlLmdldE5vZGVUeXBlKCBidWlsZGVyICkgOiAnZmxvYXQnO1xuXG5cdH1cblxuXHRzZXR1cCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnZhbHVlICYmIHRoaXMudmFsdWUuaXNOb2RlID8gdGhpcy52YWx1ZSA6IGZsb2F0KCk7XG5cblx0fVxuXG5cdHNlcmlhbGl6ZSggZGF0YSApIHtcblxuXHRcdHN1cGVyLnNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0aWYgKCB0aGlzLnZhbHVlICE9PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuaW5wdXRUeXBlID09PSAnQXJyYXlCdWZmZXInICkge1xuXG5cdFx0XHRcdGRhdGEudmFsdWUgPSBhcnJheUJ1ZmZlclRvQmFzZTY0KCB0aGlzLnZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGF0YS52YWx1ZSA9IHRoaXMudmFsdWUgPyB0aGlzLnZhbHVlLnRvSlNPTiggZGF0YS5tZXRhICkudXVpZCA6IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRhdGEudmFsdWUgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0ZGF0YS5pbnB1dFR5cGUgPSB0aGlzLmlucHV0VHlwZTtcblx0XHRkYXRhLm91dHB1dFR5cGUgPSB0aGlzLm91dHB1dFR5cGU7XG5cblx0fVxuXG5cdGRlc2VyaWFsaXplKCBkYXRhICkge1xuXG5cdFx0c3VwZXIuZGVzZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdGxldCB2YWx1ZSA9IG51bGw7XG5cblx0XHRpZiAoIGRhdGEudmFsdWUgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggZGF0YS5pbnB1dFR5cGUgPT09ICdBcnJheUJ1ZmZlcicgKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBiYXNlNjRUb0FycmF5QnVmZmVyKCBkYXRhLnZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGRhdGEuaW5wdXRUeXBlID09PSAnVGV4dHVyZScgKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBkYXRhLm1ldGEudGV4dHVyZXNbIGRhdGEudmFsdWUgXTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGRhdGEubWV0YS5ub2Rlc1sgZGF0YS52YWx1ZSBdIHx8IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblxuXHRcdHRoaXMuaW5wdXRUeXBlID0gZGF0YS5pbnB1dFR5cGU7XG5cdFx0dGhpcy5vdXRwdXRUeXBlID0gZGF0YS5vdXRwdXRUeXBlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTY3JpcHRhYmxlVmFsdWVOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYSBzY3JpcHRhYmxlIHZhbHVlIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2FueX0gW3ZhbHVlPW51bGxdIC0gVGhlIHZhbHVlLlxuICogQHJldHVybnMge1NjcmlwdGFibGVWYWx1ZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBzY3JpcHRhYmxlVmFsdWUgPSAvKkBfX1BVUkVfXyovIG5vZGVQcm94eSggU2NyaXB0YWJsZVZhbHVlTm9kZSApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IHNjcmlwdGFibGVWYWx1ZSB9IGZyb20gJy4vU2NyaXB0YWJsZVZhbHVlTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHksIGZsb2F0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgaGFzaEFycmF5LCBoYXNoU3RyaW5nIH0gZnJvbSAnLi4vY29yZS9Ob2RlVXRpbHMuanMnO1xuXG4vKipcbiAqIEEgTWFwLWxpa2UgZGF0YSBzdHJ1Y3R1cmUgZm9yIG1hbmFnaW5nIHJlc291cmNlcyBvZiBzY3JpcHRhYmxlIG5vZGVzLlxuICpcbiAqIEBhdWdtZW50cyBNYXBcbiAqL1xuY2xhc3MgUmVzb3VyY2VzIGV4dGVuZHMgTWFwIHtcblxuXHRnZXQoIGtleSwgY2FsbGJhY2sgPSBudWxsLCAuLi5wYXJhbXMgKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzKCBrZXkgKSApIHJldHVybiBzdXBlci5nZXQoIGtleSApO1xuXG5cdFx0aWYgKCBjYWxsYmFjayAhPT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgdmFsdWUgPSBjYWxsYmFjayggLi4ucGFyYW1zICk7XG5cdFx0XHR0aGlzLnNldCgga2V5LCB2YWx1ZSApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jbGFzcyBQYXJhbWV0ZXJzIHtcblxuXHRjb25zdHJ1Y3Rvciggc2NyaXB0YWJsZU5vZGUgKSB7XG5cblx0XHR0aGlzLnNjcmlwdGFibGVOb2RlID0gc2NyaXB0YWJsZU5vZGU7XG5cblx0fVxuXG5cdGdldCBwYXJhbWV0ZXJzKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2NyaXB0YWJsZU5vZGUucGFyYW1ldGVycztcblxuXHR9XG5cblx0Z2V0IGxheW91dCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnNjcmlwdGFibGVOb2RlLmdldExheW91dCgpO1xuXG5cdH1cblxuXHRnZXRJbnB1dExheW91dCggaWQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zY3JpcHRhYmxlTm9kZS5nZXRJbnB1dExheW91dCggaWQgKTtcblxuXHR9XG5cblx0Z2V0KCBuYW1lICkge1xuXG5cdFx0Y29uc3QgcGFyYW0gPSB0aGlzLnBhcmFtZXRlcnNbIG5hbWUgXTtcblx0XHRjb25zdCB2YWx1ZSA9IHBhcmFtID8gcGFyYW0uZ2V0VmFsdWUoKSA6IG51bGw7XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgcmVzb3VyY2VzIChlLmcuIG5hbWVzcGFjZXMpIG9mIHNjcmlwdGFibGUgbm9kZXMuXG4gKlxuICogQHR5cGUge1Jlc291cmNlc31cbiAqL1xuZXhwb3J0IGNvbnN0IFNjcmlwdGFibGVOb2RlUmVzb3VyY2VzID0gbmV3IFJlc291cmNlcygpO1xuXG4vKipcbiAqIFRoaXMgdHlwZSBvZiBub2RlIGFsbG93cyB0byBpbXBsZW1lbnQgbm9kZXMgd2l0aCBjdXN0b20gc2NyaXB0cy4gVGhlIHNjcmlwdFxuICogc2VjdGlvbiBpcyByZXByZXNlbnRlZCBhcyBhbiBpbnN0YW5jZSBvZiBgQ29kZU5vZGVgIHdyaXR0ZW4gd2l0aCBKYXZhU2NyaXB0LlxuICogVGhlIHNjcmlwdCBpdHNlbGYgbXVzdCBhZGhlcmUgdG8gYSBzcGVjaWZpYyBzdHJ1Y3R1cmUuXG4gKlxuICogLSBtYWluKCk6IEV4ZWN1dGVkIG9uY2UgYnkgZGVmYXVsdCBhbmQgZXZlcnkgdGltZSBgbm9kZS5uZWVkc1VwZGF0ZWAgaXMgc2V0LlxuICogLSBsYXlvdXQ6IFRoZSBsYXlvdXQgb2JqZWN0IGRlZmluZXMgdGhlIHNjcmlwdCdzIGludGVyZmFjZSAoaW5wdXRzIGFuZCBvdXRwdXRzKS5cbiAqXG4gKiBgYGBqc1xuICogU2NyaXB0YWJsZU5vZGVSZXNvdXJjZXMuc2V0KCAnVFNMJywgVFNMICk7XG4gKlxuICogY29uc3Qgc2NyaXB0YWJsZU5vZGUgPSBzY3JpcHRhYmxlKCBqcyggYFxuICogXHRsYXlvdXQgPSB7XG4gKiBcdFx0b3V0cHV0VHlwZTogJ25vZGUnLFxuICogXHRcdGVsZW1lbnRzOiBbXG4gKiBcdFx0XHR7IG5hbWU6ICdzb3VyY2UnLCBpbnB1dFR5cGU6ICdub2RlJyB9LFxuICogXHRcdF1cbiAqIFx0fTtcbiAqXG4gKiBcdGNvbnN0IHsgbXVsLCBvc2NTaW5lIH0gPSBUU0w7XG4gKlxuICogXHRmdW5jdGlvbiBtYWluKCkge1xuICogXHRcdGNvbnN0IHNvdXJjZSA9IHBhcmFtZXRlcnMuZ2V0KCAnc291cmNlJyApIHx8IGZsb2F0KCk7XG4gKiBcdFx0cmV0dXJuIG11bCggc291cmNlLCBvc2NTaW5lKCkgKSApO1xuICogXHR9XG4gKlxuICogYCApICk7XG4gKlxuICogc2NyaXB0YWJsZU5vZGUuc2V0UGFyYW1ldGVyKCAnc291cmNlJywgY29sb3IoIDEsIDAsIDAgKSApO1xuICpcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY05vZGVNYXRlcmlhbCgpO1xuICogbWF0ZXJpYWwuY29sb3JOb2RlID0gc2NyaXB0YWJsZU5vZGU7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBTY3JpcHRhYmxlTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU2NyaXB0YWJsZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzY3JpcHRhYmxlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P0NvZGVOb2RlfSBbY29kZU5vZGU9bnVsbF0gLSBUaGUgY29kZSBub2RlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnM9e31dIC0gVGhlIHBhcmFtZXRlcnMgZGVmaW5pdGlvbi5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjb2RlTm9kZSA9IG51bGwsIHBhcmFtZXRlcnMgPSB7fSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29kZSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Db2RlTm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jb2RlTm9kZSA9IGNvZGVOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBhcmFtZXRlcnMgZGVmaW5pdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogQGRlZmF1bHQge31cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuXG5cdFx0dGhpcy5fbG9jYWwgPSBuZXcgUmVzb3VyY2VzKCk7XG5cdFx0dGhpcy5fb3V0cHV0ID0gc2NyaXB0YWJsZVZhbHVlKCk7XG5cdFx0dGhpcy5fb3V0cHV0cyA9IHt9O1xuXHRcdHRoaXMuX3NvdXJjZSA9IHRoaXMuc291cmNlO1xuXHRcdHRoaXMuX21ldGhvZCA9IG51bGw7XG5cdFx0dGhpcy5fb2JqZWN0ID0gbnVsbDtcblx0XHR0aGlzLl92YWx1ZSA9IG51bGw7XG5cdFx0dGhpcy5fbmVlZHNPdXRwdXRVcGRhdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5vblJlZnJlc2ggPSB0aGlzLm9uUmVmcmVzaC5iaW5kKCB0aGlzICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU2NyaXB0YWJsZU5vZGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIHNvdXJjZSBjb2RlIG9mIHRoZSBzY3JpcHRhYmxlIG5vZGUuXG5cdCAqXG5cdCAqIEB0eXBlIHtzdHJpbmd9XG5cdCAqL1xuXHRnZXQgc291cmNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29kZU5vZGUgPyB0aGlzLmNvZGVOb2RlLmNvZGUgOiAnJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHJlZmVyZW5jZSBvZiBhIGxvY2FsIHNjcmlwdCB2YXJpYWJsZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgdmFyaWFibGUgbmFtZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIC0gVGhlIHJlZmVyZW5jZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1Jlc291cmNlc30gVGhlIHJlc291cmNlIG1hcFxuXHQgKi9cblx0c2V0TG9jYWwoIG5hbWUsIHZhbHVlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsLnNldCggbmFtZSwgdmFsdWUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIHZhbHVlIG9mIGEgbG9jYWwgc2NyaXB0IHZhcmlhYmxlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSB2YXJpYWJsZSBuYW1lLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB2YWx1ZS5cblx0ICovXG5cdGdldExvY2FsKCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsLmdldCggbmFtZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBgcmVmcmVzaGAgZXZlbnQuXG5cdCAqL1xuXHRvblJlZnJlc2goKSB7XG5cblx0XHR0aGlzLl9yZWZyZXNoKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGlucHV0IGZyb20gdGhlIGxheW91dCB3aXRoIHRoZSBnaXZlbiBpZC9uYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgaWQvbmFtZSBvZiB0aGUgaW5wdXQuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIGVsZW1lbnQgZW50cnkuXG5cdCAqL1xuXHRnZXRJbnB1dExheW91dCggaWQgKSB7XG5cblx0XHRmb3IgKCBjb25zdCBlbGVtZW50IG9mIHRoaXMuZ2V0TGF5b3V0KCkgKSB7XG5cblx0XHRcdGlmICggZWxlbWVudC5pbnB1dFR5cGUgJiYgKCBlbGVtZW50LmlkID09PSBpZCB8fCBlbGVtZW50Lm5hbWUgPT09IGlkICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gb3V0cHV0IGZyb20gdGhlIGxheW91dCB3aXRoIHRoZSBnaXZlbiBpZC9uYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgaWQvbmFtZSBvZiB0aGUgb3V0cHV0LlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBlbGVtZW50IGVudHJ5LlxuXHQgKi9cblx0Z2V0T3V0cHV0TGF5b3V0KCBpZCApIHtcblxuXHRcdGZvciAoIGNvbnN0IGVsZW1lbnQgb2YgdGhpcy5nZXRMYXlvdXQoKSApIHtcblxuXHRcdFx0aWYgKCBlbGVtZW50Lm91dHB1dFR5cGUgJiYgKCBlbGVtZW50LmlkID09PSBpZCB8fCBlbGVtZW50Lm5hbWUgPT09IGlkICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgYSBzY3JpcHQgb3V0cHV0IGZvciB0aGUgZ2l2ZW4gbmFtZSBhbmQgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIG91dHB1dC5cblx0ICogQHBhcmFtIHtOb2RlfSB2YWx1ZSAtIFRoZSBub2RlIHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtTY3JpcHRhYmxlTm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0c2V0T3V0cHV0KCBuYW1lLCB2YWx1ZSApIHtcblxuXHRcdGNvbnN0IG91dHB1dHMgPSB0aGlzLl9vdXRwdXRzO1xuXG5cdFx0aWYgKCBvdXRwdXRzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b3V0cHV0c1sgbmFtZSBdID0gc2NyaXB0YWJsZVZhbHVlKCB2YWx1ZSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0b3V0cHV0c1sgbmFtZSBdLnZhbHVlID0gdmFsdWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBzY3JpcHQgb3V0cHV0IGZvciB0aGUgZ2l2ZW4gbmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgb3V0cHV0LlxuXHQgKiBAcmV0dXJuIHtTY3JpcHRhYmxlVmFsdWVOb2RlfSBUaGUgbm9kZSB2YWx1ZS5cblx0ICovXG5cdGdldE91dHB1dCggbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLl9vdXRwdXRzWyBuYW1lIF07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcGFyYW1ldGVyIGZvciB0aGUgZ2l2ZW4gbmFtZVxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIuXG5cdCAqIEByZXR1cm4ge1NjcmlwdGFibGVWYWx1ZU5vZGV9IFRoZSBub2RlIHZhbHVlLlxuXHQgKi9cblx0Z2V0UGFyYW1ldGVyKCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFyYW1ldGVyc1sgbmFtZSBdO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyBhIHZhbHVlIGZvciB0aGUgZ2l2ZW4gcGFyYW1ldGVyIG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHBhcmFtZXRlciBuYW1lLlxuXHQgKiBAcGFyYW0ge2FueX0gdmFsdWUgLSBUaGUgcGFyYW1ldGVyIHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtTY3JpcHRhYmxlTm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0c2V0UGFyYW1ldGVyKCBuYW1lLCB2YWx1ZSApIHtcblxuXHRcdGNvbnN0IHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHRpZiAoIHZhbHVlICYmIHZhbHVlLmlzU2NyaXB0YWJsZU5vZGUgKSB7XG5cblx0XHRcdHRoaXMuZGVsZXRlUGFyYW1ldGVyKCBuYW1lICk7XG5cblx0XHRcdHBhcmFtZXRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0cGFyYW1ldGVyc1sgbmFtZSBdLmdldERlZmF1bHRPdXRwdXQoKS5ldmVudHMuYWRkRXZlbnRMaXN0ZW5lciggJ3JlZnJlc2gnLCB0aGlzLm9uUmVmcmVzaCApO1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNTY3JpcHRhYmxlVmFsdWVOb2RlICkge1xuXG5cdFx0XHR0aGlzLmRlbGV0ZVBhcmFtZXRlciggbmFtZSApO1xuXG5cdFx0XHRwYXJhbWV0ZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdHBhcmFtZXRlcnNbIG5hbWUgXS5ldmVudHMuYWRkRXZlbnRMaXN0ZW5lciggJ3JlZnJlc2gnLCB0aGlzLm9uUmVmcmVzaCApO1xuXG5cdFx0fSBlbHNlIGlmICggcGFyYW1ldGVyc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBhcmFtZXRlcnNbIG5hbWUgXSA9IHNjcmlwdGFibGVWYWx1ZSggdmFsdWUgKTtcblx0XHRcdHBhcmFtZXRlcnNbIG5hbWUgXS5ldmVudHMuYWRkRXZlbnRMaXN0ZW5lciggJ3JlZnJlc2gnLCB0aGlzLm9uUmVmcmVzaCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cGFyYW1ldGVyc1sgbmFtZSBdLnZhbHVlID0gdmFsdWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoaXMgbm9kZSB3aGljaCBpcyB0aGUgdmFsdWUgb2Zcblx0ICogdGhlIGRlZmF1bHQgb3V0cHV0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtOb2RlfSBUaGUgdmFsdWUuXG5cdCAqL1xuXHRnZXRWYWx1ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdldERlZmF1bHRPdXRwdXQoKS5nZXRWYWx1ZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVsZXRlcyBhIHBhcmFtZXRlciBmcm9tIHRoZSBzY3JpcHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHBhcmFtZXRlciB0byByZW1vdmUuXG5cdCAqIEByZXR1cm4ge1NjcmlwdGFibGVOb2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRkZWxldGVQYXJhbWV0ZXIoIG5hbWUgKSB7XG5cblx0XHRsZXQgdmFsdWVOb2RlID0gdGhpcy5wYXJhbWV0ZXJzWyBuYW1lIF07XG5cblx0XHRpZiAoIHZhbHVlTm9kZSApIHtcblxuXHRcdFx0aWYgKCB2YWx1ZU5vZGUuaXNTY3JpcHRhYmxlTm9kZSApIHZhbHVlTm9kZSA9IHZhbHVlTm9kZS5nZXREZWZhdWx0T3V0cHV0KCk7XG5cblx0XHRcdHZhbHVlTm9kZS5ldmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3JlZnJlc2gnLCB0aGlzLm9uUmVmcmVzaCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWxldGVzIGFsbCBwYXJhbWV0ZXJzIGZyb20gdGhlIHNjcmlwdC5cblx0ICpcblx0ICogQHJldHVybiB7U2NyaXB0YWJsZU5vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdGNsZWFyUGFyYW1ldGVycygpIHtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoIHRoaXMucGFyYW1ldGVycyApICkge1xuXG5cdFx0XHR0aGlzLmRlbGV0ZVBhcmFtZXRlciggbmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGxzIGEgZnVuY3Rpb24gZnJvbSB0aGUgc2NyaXB0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBmdW5jdGlvbiBuYW1lLlxuXHQgKiBAcGFyYW0gey4uLmFueX0gcGFyYW1zIC0gQSBsaXN0IG9mIHBhcmFtZXRlcnMuXG5cdCAqIEByZXR1cm4ge2FueX0gVGhlIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24gY2FsbC5cblx0ICovXG5cdGNhbGwoIG5hbWUsIC4uLnBhcmFtcyApIHtcblxuXHRcdGNvbnN0IG9iamVjdCA9IHRoaXMuZ2V0T2JqZWN0KCk7XG5cdFx0Y29uc3QgbWV0aG9kID0gb2JqZWN0WyBuYW1lIF07XG5cblx0XHRpZiAoIHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicgKSB7XG5cblx0XHRcdHJldHVybiBtZXRob2QoIC4uLnBhcmFtcyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQXN5bmNocm9ub3VzbHkgY2FsbHMgYSBmdW5jdGlvbiBmcm9tIHRoZSBzY3JpcHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGZ1bmN0aW9uIG5hbWUuXG5cdCAqIEBwYXJhbSB7Li4uYW55fSBwYXJhbXMgLSBBIGxpc3Qgb2YgcGFyYW1ldGVycy5cblx0ICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBUaGUgcmVzdWx0IG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuXHQgKi9cblx0YXN5bmMgY2FsbEFzeW5jKCBuYW1lLCAuLi5wYXJhbXMgKSB7XG5cblx0XHRjb25zdCBvYmplY3QgPSB0aGlzLmdldE9iamVjdCgpO1xuXHRcdGNvbnN0IG1ldGhvZCA9IG9iamVjdFsgbmFtZSBdO1xuXG5cdFx0aWYgKCB0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nICkge1xuXG5cdFx0XHRyZXR1cm4gbWV0aG9kLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdBc3luY0Z1bmN0aW9uJyA/IGF3YWl0IG1ldGhvZCggLi4ucGFyYW1zICkgOiBtZXRob2QoIC4uLnBhcmFtcyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXR0ZW4gc2luY2UgdGhlIG5vZGUgdHlwZXMgaXMgaW5mZXJyZWQgZnJvbSB0aGUgc2NyaXB0J3Mgb3V0cHV0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0RGVmYXVsdE91dHB1dE5vZGUoKS5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVmcmVzaGVzIHRoZSBzY3JpcHQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbb3V0cHV0PW51bGxdIC0gQW4gb3B0aW9uYWwgb3V0cHV0LlxuXHQgKi9cblx0cmVmcmVzaCggb3V0cHV0ID0gbnVsbCApIHtcblxuXHRcdGlmICggb3V0cHV0ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmdldE91dHB1dCggb3V0cHV0ICkucmVmcmVzaCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5fcmVmcmVzaCgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhlIHNjcmlwdC5cblx0ICpcblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0IG9iamVjdC5cblx0ICovXG5cdGdldE9iamVjdCgpIHtcblxuXHRcdGlmICggdGhpcy5uZWVkc1VwZGF0ZSApIHRoaXMuZGlzcG9zZSgpO1xuXHRcdGlmICggdGhpcy5fb2JqZWN0ICE9PSBudWxsICkgcmV0dXJuIHRoaXMuX29iamVjdDtcblxuXHRcdC8vXG5cblx0XHRjb25zdCByZWZyZXNoID0gKCkgPT4gdGhpcy5yZWZyZXNoKCk7XG5cdFx0Y29uc3Qgc2V0T3V0cHV0ID0gKCBpZCwgdmFsdWUgKSA9PiB0aGlzLnNldE91dHB1dCggaWQsIHZhbHVlICk7XG5cblx0XHRjb25zdCBwYXJhbWV0ZXJzID0gbmV3IFBhcmFtZXRlcnMoIHRoaXMgKTtcblxuXHRcdGNvbnN0IFRIUkVFID0gU2NyaXB0YWJsZU5vZGVSZXNvdXJjZXMuZ2V0KCAnVEhSRUUnICk7XG5cdFx0Y29uc3QgVFNMID0gU2NyaXB0YWJsZU5vZGVSZXNvdXJjZXMuZ2V0KCAnVFNMJyApO1xuXG5cdFx0Y29uc3QgbWV0aG9kID0gdGhpcy5nZXRNZXRob2QoKTtcblx0XHRjb25zdCBwYXJhbXMgPSBbIHBhcmFtZXRlcnMsIHRoaXMuX2xvY2FsLCBTY3JpcHRhYmxlTm9kZVJlc291cmNlcywgcmVmcmVzaCwgc2V0T3V0cHV0LCBUSFJFRSwgVFNMIF07XG5cblx0XHR0aGlzLl9vYmplY3QgPSBtZXRob2QoIC4uLnBhcmFtcyApO1xuXG5cdFx0Y29uc3QgbGF5b3V0ID0gdGhpcy5fb2JqZWN0LmxheW91dDtcblxuXHRcdGlmICggbGF5b3V0ICkge1xuXG5cdFx0XHRpZiAoIGxheW91dC5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0dGhpcy5fbG9jYWwuY2xlYXIoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBkZWZhdWx0IG91dHB1dFxuXHRcdFx0dGhpcy5fb3V0cHV0Lm91dHB1dFR5cGUgPSBsYXlvdXQub3V0cHV0VHlwZSB8fCBudWxsO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGxheW91dC5lbGVtZW50cyApICkge1xuXG5cdFx0XHRcdGZvciAoIGNvbnN0IGVsZW1lbnQgb2YgbGF5b3V0LmVsZW1lbnRzICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgaWQgPSBlbGVtZW50LmlkIHx8IGVsZW1lbnQubmFtZTtcblxuXHRcdFx0XHRcdGlmICggZWxlbWVudC5pbnB1dFR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGhpcy5nZXRQYXJhbWV0ZXIoIGlkICkgPT09IHVuZGVmaW5lZCApIHRoaXMuc2V0UGFyYW1ldGVyKCBpZCwgbnVsbCApO1xuXG5cdFx0XHRcdFx0XHR0aGlzLmdldFBhcmFtZXRlciggaWQgKS5pbnB1dFR5cGUgPSBlbGVtZW50LmlucHV0VHlwZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggZWxlbWVudC5vdXRwdXRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMuZ2V0T3V0cHV0KCBpZCApID09PSB1bmRlZmluZWQgKSB0aGlzLnNldE91dHB1dCggaWQsIG51bGwgKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5nZXRPdXRwdXQoIGlkICkub3V0cHV0VHlwZSA9IGVsZW1lbnQub3V0cHV0VHlwZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9vYmplY3Q7XG5cblx0fVxuXG5cdGRlc2VyaWFsaXplKCBkYXRhICkge1xuXG5cdFx0c3VwZXIuZGVzZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gdGhpcy5wYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRsZXQgdmFsdWVOb2RlID0gdGhpcy5wYXJhbWV0ZXJzWyBuYW1lIF07XG5cblx0XHRcdGlmICggdmFsdWVOb2RlLmlzU2NyaXB0YWJsZU5vZGUgKSB2YWx1ZU5vZGUgPSB2YWx1ZU5vZGUuZ2V0RGVmYXVsdE91dHB1dCgpO1xuXG5cdFx0XHR2YWx1ZU5vZGUuZXZlbnRzLmFkZEV2ZW50TGlzdGVuZXIoICdyZWZyZXNoJywgdGhpcy5vblJlZnJlc2ggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGxheW91dCBvZiB0aGUgc2NyaXB0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBzY3JpcHQncyBsYXlvdXQuXG5cdCAqL1xuXHRnZXRMYXlvdXQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3QoKS5sYXlvdXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGRlZmF1bHQgbm9kZSBvdXRwdXQgb2YgdGhlIHNjcmlwdC5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIGRlZmF1bHQgbm9kZSBvdXRwdXQuXG5cdCAqL1xuXHRnZXREZWZhdWx0T3V0cHV0Tm9kZSgpIHtcblxuXHRcdGNvbnN0IG91dHB1dCA9IHRoaXMuZ2V0RGVmYXVsdE91dHB1dCgpLnZhbHVlO1xuXG5cdFx0aWYgKCBvdXRwdXQgJiYgb3V0cHV0LmlzTm9kZSApIHtcblxuXHRcdFx0cmV0dXJuIG91dHB1dDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmbG9hdCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBkZWZhdWx0IG91dHB1dCBvZiB0aGUgc2NyaXB0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTY3JpcHRhYmxlVmFsdWVOb2RlfSBUaGUgZGVmYXVsdCBvdXRwdXQuXG5cdCAqL1xuXHRnZXREZWZhdWx0T3V0cHV0KClcdHtcblxuXHRcdHJldHVybiB0aGlzLl9leGVjKCkuX291dHB1dDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBmdW5jdGlvbiBjcmVhdGVkIGZyb20gdGhlIG5vZGUncyBzY3JpcHQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgZnVuY3Rpb24gcmVwcmVzZW50aW5nIHRoZSBub2RlJ3MgY29kZS5cblx0ICovXG5cdGdldE1ldGhvZCgpIHtcblxuXHRcdGlmICggdGhpcy5uZWVkc1VwZGF0ZSApIHRoaXMuZGlzcG9zZSgpO1xuXHRcdGlmICggdGhpcy5fbWV0aG9kICE9PSBudWxsICkgcmV0dXJuIHRoaXMuX21ldGhvZDtcblxuXHRcdC8vXG5cblx0XHRjb25zdCBwYXJhbWV0ZXJzUHJvcHMgPSBbICdwYXJhbWV0ZXJzJywgJ2xvY2FsJywgJ2dsb2JhbCcsICdyZWZyZXNoJywgJ3NldE91dHB1dCcsICdUSFJFRScsICdUU0wnIF07XG5cdFx0Y29uc3QgaW50ZXJmYWNlUHJvcHMgPSBbICdsYXlvdXQnLCAnaW5pdCcsICdtYWluJywgJ2Rpc3Bvc2UnIF07XG5cblx0XHRjb25zdCBwcm9wZXJ0aWVzID0gaW50ZXJmYWNlUHJvcHMuam9pbiggJywgJyApO1xuXHRcdGNvbnN0IGRlY2xhcmF0aW9ucyA9ICd2YXIgJyArIHByb3BlcnRpZXMgKyAnOyB2YXIgb3V0cHV0ID0ge307XFxuJztcblx0XHRjb25zdCByZXR1cm5zID0gJ1xcbnJldHVybiB7IC4uLm91dHB1dCwgJyArIHByb3BlcnRpZXMgKyAnIH07JztcblxuXHRcdGNvbnN0IGNvZGUgPSBkZWNsYXJhdGlvbnMgKyB0aGlzLmNvZGVOb2RlLmNvZGUgKyByZXR1cm5zO1xuXG5cdFx0Ly9cblxuXHRcdHRoaXMuX21ldGhvZCA9IG5ldyBGdW5jdGlvbiggLi4ucGFyYW1ldGVyc1Byb3BzLCBjb2RlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5fbWV0aG9kO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgYWxsIGludGVybmFsIHJlc291cmNlcy5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuX21ldGhvZCA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdGlmICggdGhpcy5fb2JqZWN0ICYmIHR5cGVvZiB0aGlzLl9vYmplY3QuZGlzcG9zZSA9PT0gJ2Z1bmN0aW9uJyApIHtcblxuXHRcdFx0dGhpcy5fb2JqZWN0LmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX21ldGhvZCA9IG51bGw7XG5cdFx0dGhpcy5fb2JqZWN0ID0gbnVsbDtcblx0XHR0aGlzLl9zb3VyY2UgPSBudWxsO1xuXHRcdHRoaXMuX3ZhbHVlID0gbnVsbDtcblx0XHR0aGlzLl9uZWVkc091dHB1dFVwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5fb3V0cHV0LnZhbHVlID0gbnVsbDtcblx0XHR0aGlzLl9vdXRwdXRzID0ge307XG5cblx0fVxuXG5cdHNldHVwKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0RGVmYXVsdE91dHB1dE5vZGUoKTtcblxuXHR9XG5cblx0Z2V0Q2FjaGVLZXkoIGZvcmNlICkge1xuXG5cdFx0Y29uc3QgdmFsdWVzID0gWyBoYXNoU3RyaW5nKCB0aGlzLnNvdXJjZSApLCB0aGlzLmdldERlZmF1bHRPdXRwdXROb2RlKCkuZ2V0Q2FjaGVLZXkoIGZvcmNlICkgXTtcblxuXHRcdGZvciAoIGNvbnN0IHBhcmFtIGluIHRoaXMucGFyYW1ldGVycyApIHtcblxuXHRcdFx0dmFsdWVzLnB1c2goIHRoaXMucGFyYW1ldGVyc1sgcGFyYW0gXS5nZXRDYWNoZUtleSggZm9yY2UgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhc2hBcnJheSggdmFsdWVzICk7XG5cblx0fVxuXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdGdldCBuZWVkc1VwZGF0ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnNvdXJjZSAhPT0gdGhpcy5fc291cmNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZXMgdGhlIGBtYWluYCBmdW5jdGlvbiBvZiB0aGUgc2NyaXB0LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcmV0dXJuIHtTY3JpcHRhYmxlTm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0X2V4ZWMoKVx0e1xuXG5cdFx0aWYgKCB0aGlzLmNvZGVOb2RlID09PSBudWxsICkgcmV0dXJuIHRoaXM7XG5cblx0XHRpZiAoIHRoaXMuX25lZWRzT3V0cHV0VXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLl92YWx1ZSA9IHRoaXMuY2FsbCggJ21haW4nICk7XG5cblx0XHRcdHRoaXMuX25lZWRzT3V0cHV0VXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vdXRwdXQudmFsdWUgPSB0aGlzLl92YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZXMgdGhlIHJlZnJlc2guXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVmcmVzaCgpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5fZXhlYygpO1xuXG5cdFx0dGhpcy5fb3V0cHV0LnJlZnJlc2goKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NyaXB0YWJsZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHNjcmlwdGFibGUgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7P0NvZGVOb2RlfSBbY29kZU5vZGU9bnVsbF0gLSBUaGUgY29kZSBub2RlLlxuICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbWV0ZXJzPXt9XSAtIFRoZSBwYXJhbWV0ZXJzIGRlZmluaXRpb24uXG4gKiBAcmV0dXJucyB7U2NyaXB0YWJsZU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBzY3JpcHRhYmxlID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFNjcmlwdGFibGVOb2RlICk7XG4iLCJpbXBvcnQgeyBwb3NpdGlvblZpZXcgfSBmcm9tICcuLi9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgc21vb3Roc3RlcCB9IGZyb20gJy4uL21hdGgvTWF0aE5vZGUuanMnO1xuaW1wb3J0IHsgRm4sIG91dHB1dCwgdmVjNCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgbm9kZSB0aGF0IHJlcHJlc2VudHMgdGhlIGB6YCBjb29yZGluYXRlIGluIHZpZXcgc3BhY2VcbiAqIGZvciB0aGUgY3VycmVudCBmcmFnbWVudC4gSXQncyBhIGRpZmZlcmVudCByZXByZXNlbnRhdGlvbiBvZiB0aGVcbiAqIGRlZmF1bHQgZGVwdGggdmFsdWUuXG4gKlxuICogVGhpcyB2YWx1ZSBjYW4gYmUgcGFydCBvZiBhIGNvbXB1dGF0aW9uIHRoYXQgZGVmaW5lcyBob3cgdGhlIGZvZ1xuICogZGVuc2l0eSBpbmNyZWFzZXMgd2hlbiBtb3ZpbmcgYXdheSBmcm9tIHRoZSBjYW1lcmEuXG4gKlxuICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cbiAqIEByZXR1cm4ge05vZGV9IFRoZSB2aWV3WiBub2RlLlxuICovXG5mdW5jdGlvbiBnZXRWaWV3Wk5vZGUoIGJ1aWxkZXIgKSB7XG5cblx0bGV0IHZpZXdaO1xuXG5cdGNvbnN0IGdldFZpZXdaID0gYnVpbGRlci5jb250ZXh0LmdldFZpZXdaO1xuXG5cdGlmICggZ2V0Vmlld1ogIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHZpZXdaID0gZ2V0Vmlld1ooIHRoaXMgKTtcblxuXHR9XG5cblx0cmV0dXJuICggdmlld1ogfHwgcG9zaXRpb25WaWV3LnogKS5uZWdhdGUoKTtcblxufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcmFuZ2UgZmFjdG9yIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IG5lYXIgLSBEZWZpbmVzIHRoZSBuZWFyIHZhbHVlLlxuICogQHBhcmFtIHtOb2RlfSBmYXIgLSBEZWZpbmVzIHRoZSBmYXIgdmFsdWUuXG4gKi9cbmV4cG9ydCBjb25zdCByYW5nZUZvZ0ZhY3RvciA9IEZuKCAoIFsgbmVhciwgZmFyIF0sIGJ1aWxkZXIgKSA9PiB7XG5cblx0Y29uc3Qgdmlld1ogPSBnZXRWaWV3Wk5vZGUoIGJ1aWxkZXIgKTtcblxuXHRyZXR1cm4gc21vb3Roc3RlcCggbmVhciwgZmFyLCB2aWV3WiApO1xuXG59ICk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBleHBvbmVudGlhbCBzcXVhcmVkIGZvZy4gVGhpcyB0eXBlIG9mIGZvZyBnaXZlc1xuICogYSBjbGVhciB2aWV3IG5lYXIgdGhlIGNhbWVyYSBhbmQgYSBmYXN0ZXIgdGhhbiBleHBvbmVudGlhbGx5XG4gKiBkZW5zZW5pbmcgZm9nIGZhcnRoZXIgZnJvbSB0aGUgY2FtZXJhLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBkZW5zaXR5IC0gRGVmaW5lcyB0aGUgZm9nIGRlbnNpdHkuXG4gKi9cbmV4cG9ydCBjb25zdCBkZW5zaXR5Rm9nRmFjdG9yID0gRm4oICggWyBkZW5zaXR5IF0sIGJ1aWxkZXIgKSA9PiB7XG5cblx0Y29uc3Qgdmlld1ogPSBnZXRWaWV3Wk5vZGUoIGJ1aWxkZXIgKTtcblxuXHRyZXR1cm4gZGVuc2l0eS5tdWwoIGRlbnNpdHksIHZpZXdaLCB2aWV3WiApLm5lZ2F0ZSgpLmV4cCgpLm9uZU1pbnVzKCk7XG5cbn0gKTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIHRvIGNvbmZpZ3VyZSBhIGZvZyBmb3IgdGhlIHNjZW5lLlxuICogTm9kZXMgb2YgdGhpcyB0eXBlIGFyZSBhc3NpZ25lZCB0byBgU2NlbmUuZm9nTm9kZWAuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IGNvbG9yIC0gRGVmaW5lcyB0aGUgY29sb3Igb2YgdGhlIGZvZy5cbiAqIEBwYXJhbSB7Tm9kZX0gZmFjdG9yIC0gRGVmaW5lcyBob3cgdGhlIGZvZyBpcyBmYWN0b3JlZCBpbiB0aGUgc2NlbmUuXG4gKi9cbmV4cG9ydCBjb25zdCBmb2cgPSBGbiggKCBbIGNvbG9yLCBmYWN0b3IgXSApID0+IHtcblxuXHRyZXR1cm4gdmVjNCggZmFjdG9yLnRvRmxvYXQoKS5taXgoIG91dHB1dC5yZ2IsIGNvbG9yLnRvVmVjMygpICksIG91dHB1dC5hICk7XG5cbn0gKTtcblxuLy8gRGVwcmVjYXRlZFxuXG4vKipcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQGRlcHJlY2F0ZWQgc2luY2UgcjE3MS4gVXNlIGBmb2coIGNvbG9yLCByYW5nZUZvZ0ZhY3RvciggbmVhciwgZmFyICkgKWAgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IGNvbG9yXG4gKiBAcGFyYW0ge05vZGV9IG5lYXJcbiAqIEBwYXJhbSB7Tm9kZX0gZmFyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZUZvZyggY29sb3IsIG5lYXIsIGZhciApIHsgLy8gQGRlcHJlY2F0ZWQsIHIxNzFcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5UU0w6IFwicmFuZ2VGb2coIGNvbG9yLCBuZWFyLCBmYXIgKVwiIGlzIGRlcHJlY2F0ZWQuIFVzZSBcImZvZyggY29sb3IsIHJhbmdlRm9nRmFjdG9yKCBuZWFyLCBmYXIgKSApXCIgaW5zdGVhZC4nICk7XG5cdHJldHVybiBmb2coIGNvbG9yLCByYW5nZUZvZ0ZhY3RvciggbmVhciwgZmFyICkgKTtcblxufVxuXG4vKipcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQGRlcHJlY2F0ZWQgc2luY2UgcjE3MS4gVXNlIGBmb2coIGNvbG9yLCBkZW5zaXR5Rm9nRmFjdG9yKCBkZW5zaXR5ICkgKWAgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IGNvbG9yXG4gKiBAcGFyYW0ge05vZGV9IGRlbnNpdHlcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbnNpdHlGb2coIGNvbG9yLCBkZW5zaXR5ICkgeyAvLyBAZGVwcmVjYXRlZCwgcjE3MVxuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlRTTDogXCJkZW5zaXR5Rm9nKCBjb2xvciwgZGVuc2l0eSApXCIgaXMgZGVwcmVjYXRlZC4gVXNlIFwiZm9nKCBjb2xvciwgZGVuc2l0eUZvZ0ZhY3RvciggZGVuc2l0eSApIClcIiBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIGZvZyggY29sb3IsIGRlbnNpdHlGb2dGYWN0b3IoIGRlbnNpdHkgKSApO1xuXG59XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuaW1wb3J0IHsgZ2V0VmFsdWVUeXBlIH0gZnJvbSAnLi4vY29yZS9Ob2RlVXRpbHMuanMnO1xuaW1wb3J0IHsgYnVmZmVyIH0gZnJvbSAnLi4vYWNjZXNzb3JzL0J1ZmZlck5vZGUuanMnO1xuaW1wb3J0IHsgaW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vYWNjZXNzb3JzL0J1ZmZlckF0dHJpYnV0ZU5vZGUuanMnO1xuaW1wb3J0IHsgaW5zdGFuY2VJbmRleCB9IGZyb20gJy4uL2NvcmUvSW5kZXhOb2RlLmpzJztcbmltcG9ydCB7IG5vZGVQcm94eSwgZmxvYXQgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjQuanMnO1xuaW1wb3J0IHsgTWF0aFV0aWxzIH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIH0gZnJvbSAnLi4vLi4vY29yZS9JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUuanMnO1xuXG5sZXQgbWluID0gbnVsbDtcbmxldCBtYXggPSBudWxsO1xuXG4vKipcbiAqIGBSYW5nZU5vZGVgIGdlbmVyYXRlcyByYW5kb20gaW5zdGFuY2VkIGF0dHJpYnV0ZSBkYXRhIGluIGEgZGVmaW5lZCByYW5nZS5cbiAqIEFuIGV4ZW1wbGFyeSB1c2UgY2FzZSBmb3IgdGhpcyB1dGlsaXR5IG5vZGUgaXMgdG8gZ2VuZXJhdGUgcmFuZG9tIHBlci1pbnN0YW5jZVxuICogY29sb3JzOlxuICogYGBganNcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY05vZGVNYXRlcmlhbCgpO1xuICogbWF0ZXJpYWwuY29sb3JOb2RlID0gcmFuZ2UoIG5ldyBDb2xvciggMHgwMDAwMDAgKSwgbmV3IENvbG9yKCAweEZGRkZGRiApICk7XG4gKiBjb25zdCBtZXNoID0gbmV3IEluc3RhbmNlZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCwgY291bnQgKTtcbiAqIGBgYFxuICogQGF1Z21lbnRzIE5vZGVcbiAqL1xuY2xhc3MgUmFuZ2VOb2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdSYW5nZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyByYW5nZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGU8YW55Pn0gW21pbk5vZGU9ZmxvYXQoKV0gLSBBIG5vZGUgZGVmaW5pbmcgdGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZS5cblx0ICogQHBhcmFtIHtOb2RlPGFueT59IFttYXhOb2RlPWZsb2F0KCldIC0gQSBub2RlIGRlZmluaW5nIHRoZSB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWluTm9kZSA9IGZsb2F0KCksIG1heE5vZGUgPSBmbG9hdCgpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqICBBIG5vZGUgZGVmaW5pbmcgdGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlPGFueT59XG5cdFx0ICogQGRlZmF1bHQgZmxvYXQoKVxuXHRcdCAqL1xuXHRcdHRoaXMubWluTm9kZSA9IG1pbk5vZGU7XG5cblx0XHQvKipcblx0XHQgKiAgQSBub2RlIGRlZmluaW5nIHRoZSB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZTxhbnk+fVxuXHRcdCAqIEBkZWZhdWx0IGZsb2F0KClcblx0XHQgKi9cblx0XHR0aGlzLm1heE5vZGUgPSBtYXhOb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmVjdG9yIGxlbmd0aCB3aGljaCBpcyBjb21wdXRlZCBiYXNlZCBvbiB0aGUgcmFuZ2UgZGVmaW5pdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgdmVjdG9yIGxlbmd0aC5cblx0ICovXG5cdGdldFZlY3Rvckxlbmd0aCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IG1pbkxlbmd0aCA9IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggZ2V0VmFsdWVUeXBlKCB0aGlzLm1pbk5vZGUudmFsdWUgKSApO1xuXHRcdGNvbnN0IG1heExlbmd0aCA9IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggZ2V0VmFsdWVUeXBlKCB0aGlzLm1heE5vZGUudmFsdWUgKSApO1xuXG5cdFx0cmV0dXJuIG1pbkxlbmd0aCA+IG1heExlbmd0aCA/IG1pbkxlbmd0aCA6IG1heExlbmd0aDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgaXMgaW5mZXJyZWQgZnJvbSByYW5nZSBkZWZpbml0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBub2RlIHR5cGUuXG5cdCAqL1xuXHRnZXROb2RlVHlwZSggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiBidWlsZGVyLm9iamVjdC5jb3VudCA+IDEgPyBidWlsZGVyLmdldFR5cGVGcm9tTGVuZ3RoKCB0aGlzLmdldFZlY3Rvckxlbmd0aCggYnVpbGRlciApICkgOiAnZmxvYXQnO1xuXG5cdH1cblxuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdGNvbnN0IG9iamVjdCA9IGJ1aWxkZXIub2JqZWN0O1xuXG5cdFx0bGV0IG91dHB1dCA9IG51bGw7XG5cblx0XHRpZiAoIG9iamVjdC5jb3VudCA+IDEgKSB7XG5cblx0XHRcdGNvbnN0IG1pblZhbHVlID0gdGhpcy5taW5Ob2RlLnZhbHVlO1xuXHRcdFx0Y29uc3QgbWF4VmFsdWUgPSB0aGlzLm1heE5vZGUudmFsdWU7XG5cblx0XHRcdGNvbnN0IG1pbkxlbmd0aCA9IGJ1aWxkZXIuZ2V0VHlwZUxlbmd0aCggZ2V0VmFsdWVUeXBlKCBtaW5WYWx1ZSApICk7XG5cdFx0XHRjb25zdCBtYXhMZW5ndGggPSBidWlsZGVyLmdldFR5cGVMZW5ndGgoIGdldFZhbHVlVHlwZSggbWF4VmFsdWUgKSApO1xuXG5cdFx0XHRtaW4gPSBtaW4gfHwgbmV3IFZlY3RvcjQoKTtcblx0XHRcdG1heCA9IG1heCB8fCBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0XHRtaW4uc2V0U2NhbGFyKCAwICk7XG5cdFx0XHRtYXguc2V0U2NhbGFyKCAwICk7XG5cblx0XHRcdGlmICggbWluTGVuZ3RoID09PSAxICkgbWluLnNldFNjYWxhciggbWluVmFsdWUgKTtcblx0XHRcdGVsc2UgaWYgKCBtaW5WYWx1ZS5pc0NvbG9yICkgbWluLnNldCggbWluVmFsdWUuciwgbWluVmFsdWUuZywgbWluVmFsdWUuYiwgMSApO1xuXHRcdFx0ZWxzZSBtaW4uc2V0KCBtaW5WYWx1ZS54LCBtaW5WYWx1ZS55LCBtaW5WYWx1ZS56IHx8IDAsIG1pblZhbHVlLncgfHwgMCApO1xuXG5cdFx0XHRpZiAoIG1heExlbmd0aCA9PT0gMSApIG1heC5zZXRTY2FsYXIoIG1heFZhbHVlICk7XG5cdFx0XHRlbHNlIGlmICggbWF4VmFsdWUuaXNDb2xvciApIG1heC5zZXQoIG1heFZhbHVlLnIsIG1heFZhbHVlLmcsIG1heFZhbHVlLmIsIDEgKTtcblx0XHRcdGVsc2UgbWF4LnNldCggbWF4VmFsdWUueCwgbWF4VmFsdWUueSwgbWF4VmFsdWUueiB8fCAwLCBtYXhWYWx1ZS53IHx8IDAgKTtcblxuXHRcdFx0Y29uc3Qgc3RyaWRlID0gNDtcblxuXHRcdFx0Y29uc3QgbGVuZ3RoID0gc3RyaWRlICogb2JqZWN0LmNvdW50O1xuXHRcdFx0Y29uc3QgYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBsZW5ndGggKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZGV4ID0gaSAlIHN0cmlkZTtcblxuXHRcdFx0XHRjb25zdCBtaW5FbGVtZW50VmFsdWUgPSBtaW4uZ2V0Q29tcG9uZW50KCBpbmRleCApO1xuXHRcdFx0XHRjb25zdCBtYXhFbGVtZW50VmFsdWUgPSBtYXguZ2V0Q29tcG9uZW50KCBpbmRleCApO1xuXG5cdFx0XHRcdGFycmF5WyBpIF0gPSBNYXRoVXRpbHMubGVycCggbWluRWxlbWVudFZhbHVlLCBtYXhFbGVtZW50VmFsdWUsIE1hdGgucmFuZG9tKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBub2RlVHlwZSA9IHRoaXMuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdFx0aWYgKCBvYmplY3QuY291bnQgPD0gNDA5NiApIHtcblxuXHRcdFx0XHRvdXRwdXQgPSBidWZmZXIoIGFycmF5LCAndmVjNCcsIG9iamVjdC5jb3VudCApLmVsZW1lbnQoIGluc3RhbmNlSW5kZXggKS5jb252ZXJ0KCBub2RlVHlwZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFRPRE86IEltcHJvdmUgYW5vbnltb3VzIGJ1ZmZlciBhdHRyaWJ1dGUgY3JlYXRpb24gcmVtb3ZpbmcgdGhpcyBwYXJ0XG5cdFx0XHRcdGNvbnN0IGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCA0ICk7XG5cdFx0XHRcdGJ1aWxkZXIuZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnX19yYW5nZScgKyB0aGlzLmlkLCBidWZmZXJBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRvdXRwdXQgPSBpbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIGJ1ZmZlckF0dHJpYnV0ZSApLmNvbnZlcnQoIG5vZGVUeXBlICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG91dHB1dCA9IGZsb2F0KCAwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSYW5nZU5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHJhbmdlIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8YW55Pn0gW21pbk5vZGU9ZmxvYXQoKV0gLSBBIG5vZGUgZGVmaW5pbmcgdGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7Tm9kZTxhbnk+fSBbbWF4Tm9kZT1mbG9hdCgpXSAtIEEgbm9kZSBkZWZpbmluZyB0aGUgdXBwZXIgYm91bmQgb2YgdGhlIHJhbmdlLlxuICogQHJldHVybnMge1JhbmdlTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmdlID0gLypAX19QVVJFX18qLyBub2RlUHJveHkoIFJhbmdlTm9kZSApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IG5vZGVPYmplY3QgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogYENvbXB1dGVCdWlsdGluTm9kZWAgcmVwcmVzZW50cyBhIGNvbXB1dGUtc2NvcGUgYnVpbHRpbiB2YWx1ZSB0aGF0IGV4cG9zZSBpbmZvcm1hdGlvblxuICogYWJvdXQgdGhlIGN1cnJlbnRseSBydW5uaW5nIGRpc3BhdGNoIGFuZC9vciB0aGUgZGV2aWNlIGl0IGlzIHJ1bm5pbmcgb24uXG4gKlxuICogVGhpcyBub2RlIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBhIFdlYkdQVSBiYWNrZW5kLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIENvbXB1dGVCdWlsdGluTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnQ29tcHV0ZUJ1aWx0aW5Ob2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY29tcHV0ZSBidWlsdGluIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBidWlsdGluTmFtZSAtIFRoZSBidWlsdC1pbiBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbm9kZVR5cGUgLSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGJ1aWx0aW5OYW1lLCBub2RlVHlwZSApIHtcblxuXHRcdHN1cGVyKCBub2RlVHlwZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJ1aWx0LWluIG5hbWUuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5fYnVpbHRpbk5hbWUgPSBidWlsdGluTmFtZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIG92ZXJ3cml0dGVuIHNpbmNlIGhhc2ggaXMgZGVyaXZlZCBmcm9tIHRoZSBidWlsdC1pbiBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoYXNoLlxuXHQgKi9cblx0Z2V0SGFzaCggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldEJ1aWx0aW5OYW1lKCBidWlsZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBzaW5jZSB0aGUgbm9kZSB0eXBlIGlzIHNpbXBseSBkZXJpdmVkIGZyb20gYG5vZGVUeXBlYC4uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgdHlwZS5cblx0ICovXG5cdGdldE5vZGVUeXBlKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgYnVpbHRpbiBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYnVpbHRpbk5hbWUgLSBUaGUgYnVpbHQtaW4gbmFtZS5cblx0ICogQHJldHVybiB7Q29tcHV0ZUJ1aWx0aW5Ob2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRzZXRCdWlsdGluTmFtZSggYnVpbHRpbk5hbWUgKSB7XG5cblx0XHR0aGlzLl9idWlsdGluTmFtZSA9IGJ1aWx0aW5OYW1lO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBidWlsdGluIG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGJ1aWx0aW4gbmFtZS5cblx0ICovXG5cdGdldEJ1aWx0aW5OYW1lKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiB0aGlzLl9idWlsdGluTmFtZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyIGhhcyB0aGUgYnVpbHRpbiBvciBub3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGJ1aWxkZXIgaGFzIHRoZSBidWlsdGluIG9yIG5vdC5cblx0ICovXG5cdGhhc0J1aWx0aW4oIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gYnVpbGRlci5oYXNCdWlsdGluKCB0aGlzLl9idWlsdGluTmFtZSApO1xuXG5cdH1cblxuXHRnZW5lcmF0ZSggYnVpbGRlciwgb3V0cHV0ICkge1xuXG5cdFx0Y29uc3QgYnVpbHRpbk5hbWUgPSB0aGlzLmdldEJ1aWx0aW5OYW1lKCBidWlsZGVyICk7XG5cdFx0Y29uc3Qgbm9kZVR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cblx0XHRpZiAoIGJ1aWxkZXIuc2hhZGVyU3RhZ2UgPT09ICdjb21wdXRlJyApIHtcblxuXHRcdFx0cmV0dXJuIGJ1aWxkZXIuZm9ybWF0KCBidWlsdGluTmFtZSwgbm9kZVR5cGUsIG91dHB1dCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCBgQ29tcHV0ZUJ1aWx0aW5Ob2RlOiBDb21wdXRlIGJ1aWx0LWluIHZhbHVlICR7YnVpbHRpbk5hbWV9IGNhbiBub3QgYmUgYWNjZXNzZWQgaW4gdGhlICR7YnVpbGRlci5zaGFkZXJTdGFnZX0gc3RhZ2VgICk7XG5cdFx0XHRyZXR1cm4gYnVpbGRlci5nZW5lcmF0ZUNvbnN0KCBub2RlVHlwZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5zZXJpYWxpemUoIGRhdGEgKTtcblxuXHRcdGRhdGEuZ2xvYmFsID0gdGhpcy5nbG9iYWw7XG5cdFx0ZGF0YS5fYnVpbHRpbk5hbWUgPSB0aGlzLl9idWlsdGluTmFtZTtcblxuXHR9XG5cblx0ZGVzZXJpYWxpemUoIGRhdGEgKSB7XG5cblx0XHRzdXBlci5kZXNlcmlhbGl6ZSggZGF0YSApO1xuXG5cdFx0dGhpcy5nbG9iYWwgPSBkYXRhLmdsb2JhbDtcblx0XHR0aGlzLl9idWlsdGluTmFtZSA9IGRhdGEuX2J1aWx0aW5OYW1lO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21wdXRlQnVpbHRpbk5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGNvbXB1dGUgYnVpbHRpbiBub2RlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgYnVpbHQtaW4gbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlVHlwZSAtIFRoZSBub2RlIHR5cGUuXG4gKiBAcmV0dXJucyB7Q29tcHV0ZUJ1aWx0aW5Ob2RlfVxuICovXG5jb25zdCBjb21wdXRlQnVpbHRpbiA9ICggbmFtZSwgbm9kZVR5cGUgKSA9PiBub2RlT2JqZWN0KCBuZXcgQ29tcHV0ZUJ1aWx0aW5Ob2RlKCBuYW1lLCBub2RlVHlwZSApICk7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgbnVtYmVyIG9mIHdvcmtncm91cHMgZGlzcGF0Y2hlZCBieSB0aGUgY29tcHV0ZSBzaGFkZXIuXG4gKiBgYGBqc1xuICogLy8gUnVuIDUxMiBpbnZvY2F0aW9ucy90aHJlYWRzIHdpdGggYSB3b3JrZ3JvdXAgc2l6ZSBvZiAxMjguXG4gKiBjb25zdCBjb21wdXRlRm4gPSBGbigoKSA9PiB7XG4gKlxuICogICAgIC8vIG51bVdvcmtncm91cHMueCA9IDRcbiAqICAgICBzdG9yYWdlQnVmZmVyLmVsZW1lbnQoMCkuYXNzaWduKG51bVdvcmtncm91cHMueClcbiAqXG4gKiB9KSgpLmNvbXB1dGUoNTEyLCBbMTI4XSk7XG4gKlxuICogLy8gUnVuIDUxMiBpbnZvY2F0aW9ucy90aHJlYWRzIHdpdGggdGhlIGRlZmF1bHQgd29ya2dyb3VwIHNpemUgb2YgNjQuXG4gKiBjb25zdCBjb21wdXRlRm4gPSBGbigoKSA9PiB7XG4gKlxuICogICAgIC8vIG51bVdvcmtncm91cHMueCA9IDhcbiAqICAgICBzdG9yYWdlQnVmZmVyLmVsZW1lbnQoMCkuYXNzaWduKG51bVdvcmtncm91cHMueClcbiAqXG4gKiB9KSgpLmNvbXB1dGUoNTEyKTtcbiAqIGBgYFxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtDb21wdXRlQnVpbHRpbk5vZGU8dXZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgbnVtV29ya2dyb3VwcyA9IC8qQF9fUFVSRV9fKi8gY29tcHV0ZUJ1aWx0aW4oICdudW1Xb3JrZ3JvdXBzJywgJ3V2ZWMzJyApO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIDMtZGltZW5zaW9uYWwgaW5kZXggb2YgdGhlIHdvcmtncm91cCB0aGUgY3VycmVudCBjb21wdXRlIGludm9jYXRpb24gYmVsb25ncyB0by5cbiAqIGBgYGpzXG4gKiAvLyBFeGVjdXRlIDEyIGNvbXB1dGUgdGhyZWFkcyB3aXRoIGEgd29ya2dyb3VwIHNpemUgb2YgMy5cbiAqIGNvbnN0IGNvbXB1dGVGbiA9IEZuKCAoKSA9PiB7XG4gKlxuICogXHRJZiggd29ya2dyb3VwSWQueC5tb2RJbnQoIDIgKS5lcXVhbCggMCApLCAoKSA9PiB7XG4gKlxuICogXHRcdHN0b3JhZ2VCdWZmZXIuZWxlbWVudCggaW5zdGFuY2VJbmRleCApLmFzc2lnbiggaW5zdGFuY2VJbmRleCApO1xuICpcbiAqIFx0fSApLkVsc2UoICgpID0+IHtcbiAqXG4gKiBcdFx0c3RvcmFnZUJ1ZmZlci5lbGVtZW50KCBpbnN0YW5jZUluZGV4ICkuYXNzaWduKCAwICk7XG4gKlxuICogXHR9ICk7XG4gKlxuICogfSApKCkuY29tcHV0ZSggMTIsIFsgMyBdICk7XG4gKlxuICogLy8gd29ya2dyb3VwSWQueCA9ICBbMCwgMCwgMCwgMSwgMSwgMSwgMiwgMiwgMiwgMywgMywgM107XG4gKiAvLyBCdWZmZXIgT3V0cHV0ID0gIFswLCAxLCAyLCAwLCAwLCAwLCA2LCA3LCA4LCAwLCAwLCAwXTtcbiAqIGBgYFxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtDb21wdXRlQnVpbHRpbk5vZGU8dXZlYzM+fVxuICovXG5leHBvcnQgY29uc3Qgd29ya2dyb3VwSWQgPSAvKkBfX1BVUkVfXyovIGNvbXB1dGVCdWlsdGluKCAnd29ya2dyb3VwSWQnLCAndXZlYzMnICk7XG5cbi8qKlxuICogQSBub24tbGluZWFyaXplZCAzLWRpbWVuc2lvbmFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IGludm9jYXRpb24ncyBwb3NpdGlvbiB3aXRoaW4gYSAzRCBnbG9iYWwgZ3JpZC5cbiAqXG4gKiBAdHNsXG4gKiBAdHlwZSB7Q29tcHV0ZUJ1aWx0aW5Ob2RlPHV2ZWMzPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdsb2JhbElkID0gLypAX19QVVJFX18qLyBjb21wdXRlQnVpbHRpbiggJ2dsb2JhbElkJywgJ3V2ZWMzJyApO1xuLyoqXG4gKiBBIG5vbi1saW5lYXJpemVkIDMtZGltZW5zaW9uYWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgaW52b2NhdGlvbidzIHBvc2l0aW9uIHdpdGhpbiBhIDNEIHdvcmtncm91cCBncmlkLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtDb21wdXRlQnVpbHRpbk5vZGU8dXZlYzM+fVxuICovXG5leHBvcnQgY29uc3QgbG9jYWxJZCA9IC8qQF9fUFVSRV9fKi8gY29tcHV0ZUJ1aWx0aW4oICdsb2NhbElkJywgJ3V2ZWMzJyApO1xuXG4vKipcbiAqIEEgZGV2aWNlIGRlcGVuZGVudCB2YXJpYWJsZSB0aGF0IGV4cG9zZXMgdGhlIHNpemUgb2YgdGhlIGN1cnJlbnQgaW52b2NhdGlvbidzIHN1Ymdyb3VwLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtDb21wdXRlQnVpbHRpbk5vZGU8dWludD59XG4gKi9cbmV4cG9ydCBjb25zdCBzdWJncm91cFNpemUgPSAvKkBfX1BVUkVfXyovIGNvbXB1dGVCdWlsdGluKCAnc3ViZ3JvdXBTaXplJywgJ3VpbnQnICk7XG5cbiIsImltcG9ydCBOb2RlIGZyb20gJy4uL2NvcmUvTm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlUHJveHkgfSBmcm9tICcuLi90c2wvVFNMQ29yZS5qcyc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIEdQVSBjb250cm9sIGJhcnJpZXIgdGhhdCBzeW5jaHJvbml6ZXMgY29tcHV0ZSBvcGVyYXRpb25zIHdpdGhpbiBhIGdpdmVuIHNjb3BlLlxuICpcbiAqIFRoaXMgbm9kZSBjYW4gb25seSBiZSB1c2VkIHdpdGggYSBXZWJHUFUgYmFja2VuZC5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBCYXJyaWVyTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJhcnJpZXIgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlIC0gVGhlIHNjb3BlIGRlZmluZXMgdGhlIGJlaGF2aW9yIG9mIHRoZSBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHNjb3BlICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuc2NvcGUgPSBzY29wZTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCB7IHNjb3BlIH0gPSB0aGlzO1xuXHRcdGNvbnN0IHsgcmVuZGVyZXIgfSA9IGJ1aWxkZXI7XG5cblx0XHRpZiAoIHJlbmRlcmVyLmJhY2tlbmQuaXNXZWJHTEJhY2tlbmQgPT09IHRydWUgKSB7XG5cblx0XHRcdGJ1aWxkZXIuYWRkRmxvd0NvZGUoIGBcXHQvLyAke3Njb3BlfUJhcnJpZXIgXFxuYCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YnVpbGRlci5hZGRMaW5lRmxvd0NvZGUoIGAke3Njb3BlfUJhcnJpZXIoKWAsIHRoaXMgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFycmllck5vZGU7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIGJhcnJpZXIgbm9kZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZSAtIFRoZSBzY29wZSBkZWZpbmVzIHRoZSBiZWhhdmlvciBvZiB0aGUgbm9kZS4uXG4gKiBAcmV0dXJucyB7QmFycmllck5vZGV9XG4gKi9cbmNvbnN0IGJhcnJpZXIgPSBub2RlUHJveHkoIEJhcnJpZXJOb2RlICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIHdvcmtncm91cCBiYXJyaWVyLiBBbGwgY29tcHV0ZSBzaGFkZXJcbiAqIGludm9jYXRpb25zIG11c3Qgd2FpdCBmb3IgZWFjaCBpbnZvY2F0aW9uIHdpdGhpbiBhIHdvcmtncm91cCB0b1xuICogY29tcGxldGUgYmVmb3JlIHRoZSBiYXJyaWVyIGNhbiBiZSBzdXJwYXNzZWQuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7QmFycmllck5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCB3b3JrZ3JvdXBCYXJyaWVyID0gKCkgPT4gYmFycmllciggJ3dvcmtncm91cCcgKS5hcHBlbmQoKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc3RvcmFnZSBiYXJyaWVyLiBBbGwgaW52b2NhdGlvbnMgbXVzdFxuICogd2FpdCBmb3IgZWFjaCBhY2Nlc3MgdG8gdmFyaWFibGVzIHdpdGhpbiB0aGUgJ3N0b3JhZ2UnIGFkZHJlc3Mgc3BhY2VcbiAqIHRvIGNvbXBsZXRlIGJlZm9yZSB0aGUgYmFycmllciBjYW4gYmUgcGFzc2VkLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0JhcnJpZXJOb2RlfVxuICovXG5leHBvcnQgY29uc3Qgc3RvcmFnZUJhcnJpZXIgPSAoKSA9PiBiYXJyaWVyKCAnc3RvcmFnZScgKS5hcHBlbmQoKTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgdGV4dHVyZSBiYXJyaWVyLiBBbGwgaW52b2NhdGlvbnMgbXVzdFxuICogd2FpdCBmb3IgZWFjaCBhY2Nlc3MgdG8gdmFyaWFibGVzIHdpdGhpbiB0aGUgJ3RleHR1cmUnIGFkZHJlc3Mgc3BhY2VcbiAqIHRvIGNvbXBsZXRlIGJlZm9yZSB0aGUgYmFycmllciBjYW4gYmUgcGFzc2VkLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0JhcnJpZXJOb2RlfVxuICovXG5leHBvcnQgY29uc3QgdGV4dHVyZUJhcnJpZXIgPSAoKSA9PiBiYXJyaWVyKCAndGV4dHVyZScgKS5hcHBlbmQoKTtcblxuIiwiaW1wb3J0IEFycmF5RWxlbWVudE5vZGUgZnJvbSAnLi4vdXRpbHMvQXJyYXlFbGVtZW50Tm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGVsZW1lbnQgb2YgYSAnd29ya2dyb3VwJyBzY29wZWQgYnVmZmVyLlxuICpcbiAqIEBhdWdtZW50cyBBcnJheUVsZW1lbnROb2RlXG4gKi9cbmNsYXNzIFdvcmtncm91cEluZm9FbGVtZW50Tm9kZSBleHRlbmRzIEFycmF5RWxlbWVudE5vZGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHdvcmtncm91cCBpbmZvIGVsZW1lbnQgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSB3b3JrZ3JvdXBJbmZvTm9kZSAtIFRoZSB3b3JrZ3JvdXAgaW5mbyBub2RlLlxuXHQgKiBAcGFyYW0ge05vZGV9IGluZGV4Tm9kZSAtIFRoZSBpbmRleCBub2RlIHRoYXQgZGVmaW5lcyB0aGUgZWxlbWVudCBhY2Nlc3MuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggd29ya2dyb3VwSW5mb05vZGUsIGluZGV4Tm9kZSApIHtcblxuXHRcdHN1cGVyKCB3b3JrZ3JvdXBJbmZvTm9kZSwgaW5kZXhOb2RlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzV29ya2dyb3VwSW5mb0VsZW1lbnROb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIsIG91dHB1dCApIHtcblxuXHRcdGxldCBzbmlwcGV0O1xuXG5cdFx0Y29uc3QgaXNBc3NpZ25Db250ZXh0ID0gYnVpbGRlci5jb250ZXh0LmFzc2lnbjtcblx0XHRzbmlwcGV0ID0gc3VwZXIuZ2VuZXJhdGUoIGJ1aWxkZXIgKTtcblxuXHRcdGlmICggaXNBc3NpZ25Db250ZXh0ICE9PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCB0eXBlID0gdGhpcy5nZXROb2RlVHlwZSggYnVpbGRlciApO1xuXG5cdFx0XHRzbmlwcGV0ID0gYnVpbGRlci5mb3JtYXQoIHNuaXBwZXQsIHR5cGUsIG91dHB1dCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gVE9ETzogUG9zc2libHkgYWN0aXZhdGUgY2xpcCBkaXN0YW5jZSBpbmRleCBvbiBpbmRleCBhY2Nlc3MgcmF0aGVyIHRoYW4gZnJvbSBjbGlwcGluZyBjb250ZXh0XG5cblx0XHRyZXR1cm4gc25pcHBldDtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIG5vZGUgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY3JlYXRlIGEgJ3dvcmtncm91cCcgc2NvcGVkIGJ1ZmZlciB3aXRoaW4gdGhlXG4gKiBjb250ZXh0IG9mIGEgY29tcHV0ZSBzaGFkZXIuIFR5cGljYWxseSwgd29ya2dyb3VwIHNjb3BlZCBidWZmZXJzIGFyZVxuICogY3JlYXRlZCB0byBob2xkIGRhdGEgdGhhdCBpcyB0cmFuc2ZlcnJlZCBmcm9tIGEgZ2xvYmFsIHN0b3JhZ2Ugc2NvcGUgaW50b1xuICogYSBsb2NhbCB3b3JrZ3JvdXAgc2NvcGUuIEZvciBpbnZvY2F0aW9ucyB3aXRoaW4gYSB3b3JrZ3JvdXAsIGRhdGFcbiAqIGFjY2VzcyBzcGVlZHMgb24gJ3dvcmtncm91cCcgc2NvcGVkIGJ1ZmZlcnMgY2FuIGJlIHNpZ25pZmljYW50bHkgZmFzdGVyXG4gKiB0aGFuIHNpbWlsYXIgYWNjZXNzIG9wZXJhdGlvbnMgb24gZ2xvYmFsbHkgYWNjZXNzaWJsZSBzdG9yYWdlIGJ1ZmZlcnMuXG4gKlxuICogVGhpcyBub2RlIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBhIFdlYkdQVSBiYWNrZW5kLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIFdvcmtncm91cEluZm9Ob2RlIGV4dGVuZHMgTm9kZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHNjb3BlZCB0byB0eXBlIHNjb3BlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGUgLSBUT0RPLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYnVmZmVyVHlwZSAtIFRoZSBkYXRhIHR5cGUgb2YgYSAnd29ya2dyb3VwJyBzY29wZWQgYnVmZmVyIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYnVmZmVyQ291bnQ9MF0gLSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBidWZmZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggc2NvcGUsIGJ1ZmZlclR5cGUsIGJ1ZmZlckNvdW50ID0gMCApIHtcblxuXHRcdHN1cGVyKCBidWZmZXJUeXBlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYnVmZmVyIHR5cGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuYnVmZmVyVHlwZSA9IGJ1ZmZlclR5cGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYnVmZmVyIGNvdW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5idWZmZXJDb3VudCA9IGJ1ZmZlckNvdW50O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1dvcmtncm91cEluZm9Ob2RlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkYXRhIHR5cGUgb2YgdGhlIGFycmF5IGJ1ZmZlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5lbGVtZW50VHlwZSA9IGJ1ZmZlclR5cGU7XG5cblx0XHQvKipcblx0XHQgKiBUT0RPLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnNjb3BlID0gc2NvcGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBuYW1lL2xhYmVsIG9mIHRoaXMgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1dvcmtncm91cEluZm9Ob2RlfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUuXG5cdCAqL1xuXHRsYWJlbCggbmFtZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHNjb3BlIG9mIHRoaXMgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlIC0gVGhlIHNjb3BlIHRvIHNldC5cblx0ICogQHJldHVybiB7V29ya2dyb3VwSW5mb05vZGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZS5cblx0ICovXG5cdHNldFNjb3BlKCBzY29wZSApIHtcblxuXHRcdHRoaXMuc2NvcGUgPSBzY29wZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXG5cdC8qKlxuXHQgKiBUaGUgZGF0YSB0eXBlIG9mIHRoZSBhcnJheSBidWZmZXIuXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGVsZW1lbnQgdHlwZS5cblx0ICovXG5cdGdldEVsZW1lbnRUeXBlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudFR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdGVzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbmNlIHRoZSBpbnB1dCB0eXBlXG5cdCAqIGlzIGluZmVycmVkIGZyb20gdGhlIHNjb3BlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBpbnB1dCB0eXBlLlxuXHQgKi9cblx0Z2V0SW5wdXRUeXBlKCAvKmJ1aWxkZXIqLyApIHtcblxuXHRcdHJldHVybiBgJHt0aGlzLnNjb3BlfUFycmF5YDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIHRvIGFjY2VzcyBlbGVtZW50cyB2aWEgYW4gaW5kZXggbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtJbmRleE5vZGV9IGluZGV4Tm9kZSAtIGluZGV4Tm9kZS5cblx0ICogQHJldHVybiB7V29ya2dyb3VwSW5mb0VsZW1lbnROb2RlfSBBIHJlZmVyZW5jZSB0byBhbiBlbGVtZW50LlxuXHQgKi9cblx0ZWxlbWVudCggaW5kZXhOb2RlICkge1xuXG5cdFx0cmV0dXJuIG5vZGVPYmplY3QoIG5ldyBXb3JrZ3JvdXBJbmZvRWxlbWVudE5vZGUoIHRoaXMsIGluZGV4Tm9kZSApICk7XG5cblx0fVxuXG5cdGdlbmVyYXRlKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIGJ1aWxkZXIuZ2V0U2NvcGVkQXJyYXkoIHRoaXMubmFtZSB8fCBgJHt0aGlzLnNjb3BlfUFycmF5XyR7dGhpcy5pZH1gLCB0aGlzLnNjb3BlLnRvTG93ZXJDYXNlKCksIHRoaXMuYnVmZmVyVHlwZSwgdGhpcy5idWZmZXJDb3VudCApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBXb3JrZ3JvdXBJbmZvTm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgd29ya2dyb3VwIGluZm8gbm9kZS5cbiAqIENyZWF0ZXMgYSBuZXcgJ3dvcmtncm91cCcgc2NvcGVkIGFycmF5IGJ1ZmZlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIGRhdGEgdHlwZSBvZiBhICd3b3JrZ3JvdXAnIHNjb3BlZCBidWZmZXIgZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbY291bnQ9MF0gLSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBidWZmZXIuXG4gKiBAcmV0dXJucyB7V29ya2dyb3VwSW5mb05vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCB3b3JrZ3JvdXBBcnJheSA9ICggdHlwZSwgY291bnQgKSA9PiBub2RlT2JqZWN0KCBuZXcgV29ya2dyb3VwSW5mb05vZGUoICdXb3JrZ3JvdXAnLCB0eXBlLCBjb3VudCApICk7XG5cblxuIiwiaW1wb3J0IFRlbXBOb2RlIGZyb20gJy4uL2NvcmUvVGVtcE5vZGUuanMnO1xuaW1wb3J0IHsgbm9kZVByb3h5IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuXG4vKipcbiAqIGBBdG9taWNGdW5jdGlvbk5vZGVgIHJlcHJlc2VudHMgYW55IGZ1bmN0aW9uIHRoYXQgY2FuIG9wZXJhdGUgb24gYXRvbWljIHZhcmlhYmxlIHR5cGVzXG4gKiB3aXRoaW4gYSBzaGFkZXIuIEluIGFuIGF0b21pYyBmdW5jdGlvbiwgYW55IG1vZGlmaWNhdGlvbiB0byBhbiBhdG9taWMgdmFyaWFibGUgd2lsbFxuICogb2NjdXIgYXMgYW4gaW5kaXZpc2libGUgc3RlcCB3aXRoIGEgZGVmaW5lZCBvcmRlciByZWxhdGl2ZSB0byBvdGhlciBtb2RpZmljYXRpb25zLlxuICogQWNjb3JkaW5nbHksIGV2ZW4gaWYgbXVsdGlwbGUgYXRvbWljIGZ1bmN0aW9ucyBhcmUgbW9kaWZ5aW5nIGFuIGF0b21pYyB2YXJpYWJsZSBhdCBvbmNlXG4gKiBhdG9taWMgb3BlcmF0aW9ucyB3aWxsIG5vdCBpbnRlcmZlcmUgd2l0aCBlYWNoIG90aGVyLlxuICpcbiAqIFRoaXMgbm9kZSBjYW4gb25seSBiZSB1c2VkIHdpdGggYSBXZWJHUFUgYmFja2VuZC5cbiAqXG4gKiBAYXVnbWVudHMgVGVtcE5vZGVcbiAqL1xuY2xhc3MgQXRvbWljRnVuY3Rpb25Ob2RlIGV4dGVuZHMgVGVtcE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnQXRvbWljRnVuY3Rpb25Ob2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXRvbWljIGZ1bmN0aW9uIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgLSBUaGUgc2lnbmF0dXJlIG9mIHRoZSBhdG9taWMgZnVuY3Rpb24gdG8gY29uc3RydWN0LlxuXHQgKiBAcGFyYW0ge05vZGV9IHBvaW50ZXJOb2RlIC0gQW4gYXRvbWljIHZhcmlhYmxlIG9yIGVsZW1lbnQgb2YgYW4gYXRvbWljIGJ1ZmZlci5cblx0ICogQHBhcmFtIHtOb2RlfSB2YWx1ZU5vZGUgLSBUaGUgdmFsdWUgdGhhdCBtdXRhdGVzIHRoZSBhdG9taWMgdmFyaWFibGUuXG5cdCAqIEBwYXJhbSB7P05vZGV9IFtzdG9yZU5vZGU9bnVsbF0gLSBBIHZhcmlhYmxlIHN0b3JpbmcgdGhlIHJldHVybiB2YWx1ZSBvZiBhbiBhdG9taWMgb3BlcmF0aW9uLCB0eXBpY2FsbHkgdGhlIHZhbHVlIG9mIHRoZSBhdG9taWMgdmFyaWFibGUgYmVmb3JlIHRoZSBvcGVyYXRpb24uXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWV0aG9kLCBwb2ludGVyTm9kZSwgdmFsdWVOb2RlLCBzdG9yZU5vZGUgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoICd1aW50JyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNpZ25hdHVyZSBvZiB0aGUgYXRvbWljIGZ1bmN0aW9uIHRvIGNvbnN0cnVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5tZXRob2QgPSBtZXRob2Q7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhdG9taWMgdmFyaWFibGUgb3IgZWxlbWVudCBvZiBhbiBhdG9taWMgYnVmZmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5wb2ludGVyTm9kZSA9IHBvaW50ZXJOb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSB2YWx1ZSB0aGF0IG1vZGlmaWVzIHRoZSBhdG9taWMgdmFyaWFibGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnZhbHVlTm9kZSA9IHZhbHVlTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgdmFyaWFibGUgc3RvcmluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIGFuIGF0b21pYyBvcGVyYXRpb24sIHR5cGljYWxseSB0aGUgdmFsdWUgb2YgdGhlIGF0b21pYyB2YXJpYWJsZSBiZWZvcmUgdGhlIG9wZXJhdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zdG9yZU5vZGUgPSBzdG9yZU5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdGVzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHRvIHJldHVybiB0aGUgdHlwZSBvZlxuXHQgKiB0aGUgcG9pbnRlciBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBpbnB1dCB0eXBlLlxuXHQgKi9cblx0Z2V0SW5wdXRUeXBlKCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMucG9pbnRlck5vZGUuZ2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHNpbmNlIHRoZSBub2RlIHR5cGUgaXMgaW5mZXJyZWQgZnJvbSB0aGUgaW5wdXQgdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbm9kZSB0eXBlLlxuXHQgKi9cblx0Z2V0Tm9kZVR5cGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRJbnB1dFR5cGUoIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0Z2VuZXJhdGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBtZXRob2QgPSB0aGlzLm1ldGhvZDtcblxuXHRcdGNvbnN0IHR5cGUgPSB0aGlzLmdldE5vZGVUeXBlKCBidWlsZGVyICk7XG5cdFx0Y29uc3QgaW5wdXRUeXBlID0gdGhpcy5nZXRJbnB1dFR5cGUoIGJ1aWxkZXIgKTtcblxuXHRcdGNvbnN0IGEgPSB0aGlzLnBvaW50ZXJOb2RlO1xuXHRcdGNvbnN0IGIgPSB0aGlzLnZhbHVlTm9kZTtcblxuXHRcdGNvbnN0IHBhcmFtcyA9IFtdO1xuXG5cdFx0cGFyYW1zLnB1c2goIGAmJHsgYS5idWlsZCggYnVpbGRlciwgaW5wdXRUeXBlICkgfWAgKTtcblxuXHRcdGlmICggYiAhPT0gbnVsbCApIHtcblxuXHRcdFx0cGFyYW1zLnB1c2goIGIuYnVpbGQoIGJ1aWxkZXIsIGlucHV0VHlwZSApICk7XG5cblxuXHRcdH1cblxuXHRcdGNvbnN0IG1ldGhvZFNuaXBwZXQgPSBgJHsgYnVpbGRlci5nZXRNZXRob2QoIG1ldGhvZCwgdHlwZSApIH0oICR7cGFyYW1zLmpvaW4oICcsICcgKX0gKWA7XG5cblx0XHRpZiAoIHRoaXMuc3RvcmVOb2RlICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCB2YXJTbmlwcGV0ID0gdGhpcy5zdG9yZU5vZGUuYnVpbGQoIGJ1aWxkZXIsIGlucHV0VHlwZSApO1xuXG5cdFx0XHRidWlsZGVyLmFkZExpbmVGbG93Q29kZSggYCR7dmFyU25pcHBldH0gPSAke21ldGhvZFNuaXBwZXR9YCwgdGhpcyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0YnVpbGRlci5hZGRMaW5lRmxvd0NvZGUoIG1ldGhvZFNuaXBwZXQsIHRoaXMgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuQXRvbWljRnVuY3Rpb25Ob2RlLkFUT01JQ19MT0FEID0gJ2F0b21pY0xvYWQnO1xuQXRvbWljRnVuY3Rpb25Ob2RlLkFUT01JQ19TVE9SRSA9ICdhdG9taWNTdG9yZSc7XG5BdG9taWNGdW5jdGlvbk5vZGUuQVRPTUlDX0FERCA9ICdhdG9taWNBZGQnO1xuQXRvbWljRnVuY3Rpb25Ob2RlLkFUT01JQ19TVUIgPSAnYXRvbWljU3ViJztcbkF0b21pY0Z1bmN0aW9uTm9kZS5BVE9NSUNfTUFYID0gJ2F0b21pY01heCc7XG5BdG9taWNGdW5jdGlvbk5vZGUuQVRPTUlDX01JTiA9ICdhdG9taWNNaW4nO1xuQXRvbWljRnVuY3Rpb25Ob2RlLkFUT01JQ19BTkQgPSAnYXRvbWljQW5kJztcbkF0b21pY0Z1bmN0aW9uTm9kZS5BVE9NSUNfT1IgPSAnYXRvbWljT3InO1xuQXRvbWljRnVuY3Rpb25Ob2RlLkFUT01JQ19YT1IgPSAnYXRvbWljWG9yJztcblxuZXhwb3J0IGRlZmF1bHQgQXRvbWljRnVuY3Rpb25Ob2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gYXRvbWljIGZ1bmN0aW9uIG5vZGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIC0gVGhlIHNpZ25hdHVyZSBvZiB0aGUgYXRvbWljIGZ1bmN0aW9uIHRvIGNvbnN0cnVjdC5cbiAqIEBwYXJhbSB7Tm9kZX0gcG9pbnRlck5vZGUgLSBBbiBhdG9taWMgdmFyaWFibGUgb3IgZWxlbWVudCBvZiBhbiBhdG9taWMgYnVmZmVyLlxuICogQHBhcmFtIHtOb2RlfSB2YWx1ZU5vZGUgLSBUaGUgdmFsdWUgdGhhdCBtdXRhdGVzIHRoZSBhdG9taWMgdmFyaWFibGUuXG4gKiBAcGFyYW0gez9Ob2RlfSBbc3RvcmVOb2RlPW51bGxdIC0gQSB2YXJpYWJsZSBzdG9yaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgYW4gYXRvbWljIG9wZXJhdGlvbiwgdHlwaWNhbGx5IHRoZSB2YWx1ZSBvZiB0aGUgYXRvbWljIHZhcmlhYmxlIGJlZm9yZSB0aGUgb3BlcmF0aW9uLlxuICogQHJldHVybnMge0F0b21pY0Z1bmN0aW9uTm9kZX1cbiAqL1xuY29uc3QgYXRvbWljTm9kZSA9IG5vZGVQcm94eSggQXRvbWljRnVuY3Rpb25Ob2RlICk7XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBhcHBlbmRpbmcgYW4gYXRvbWljIGZ1bmN0aW9uIGNhbGwgaW50byB0aGUgcHJvZ3JhbW1hdGljIGZsb3cgb2YgYSBjb21wdXRlIHNoYWRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgLSBUaGUgc2lnbmF0dXJlIG9mIHRoZSBhdG9taWMgZnVuY3Rpb24gdG8gY29uc3RydWN0LlxuICogQHBhcmFtIHtOb2RlfSBwb2ludGVyTm9kZSAtIEFuIGF0b21pYyB2YXJpYWJsZSBvciBlbGVtZW50IG9mIGFuIGF0b21pYyBidWZmZXIuXG4gKiBAcGFyYW0ge05vZGV9IHZhbHVlTm9kZSAtIFRoZSB2YWx1ZSB0aGF0IG11dGF0ZXMgdGhlIGF0b21pYyB2YXJpYWJsZS5cbiAqIEBwYXJhbSB7P05vZGV9IFtzdG9yZU5vZGU9bnVsbF0gLSBBIHZhcmlhYmxlIHN0b3JpbmcgdGhlIHJldHVybiB2YWx1ZSBvZiBhbiBhdG9taWMgb3BlcmF0aW9uLCB0eXBpY2FsbHkgdGhlIHZhbHVlIG9mIHRoZSBhdG9taWMgdmFyaWFibGUgYmVmb3JlIHRoZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXRvbWljRnVuY3Rpb25Ob2RlfVxuICovXG5leHBvcnQgY29uc3QgYXRvbWljRnVuYyA9ICggbWV0aG9kLCBwb2ludGVyTm9kZSwgdmFsdWVOb2RlLCBzdG9yZU5vZGUgPSBudWxsICkgPT4ge1xuXG5cdGNvbnN0IG5vZGUgPSBhdG9taWNOb2RlKCBtZXRob2QsIHBvaW50ZXJOb2RlLCB2YWx1ZU5vZGUsIHN0b3JlTm9kZSApO1xuXHRub2RlLmFwcGVuZCgpO1xuXG5cdHJldHVybiBub2RlO1xuXG59O1xuXG4vKipcbiAqIExvYWRzIHRoZSB2YWx1ZSBzdG9yZWQgaW4gdGhlIGF0b21pYyB2YXJpYWJsZS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gcG9pbnRlck5vZGUgLSBBbiBhdG9taWMgdmFyaWFibGUgb3IgZWxlbWVudCBvZiBhbiBhdG9taWMgYnVmZmVyLlxuICogQHBhcmFtIHs/Tm9kZX0gW3N0b3JlTm9kZT1udWxsXSAtIEEgdmFyaWFibGUgc3RvcmluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIGFuIGF0b21pYyBvcGVyYXRpb24sIHR5cGljYWxseSB0aGUgdmFsdWUgb2YgdGhlIGF0b21pYyB2YXJpYWJsZSBiZWZvcmUgdGhlIG9wZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBdG9taWNGdW5jdGlvbk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBhdG9taWNMb2FkID0gKCBwb2ludGVyTm9kZSwgc3RvcmVOb2RlID0gbnVsbCApID0+IGF0b21pY0Z1bmMoIEF0b21pY0Z1bmN0aW9uTm9kZS5BVE9NSUNfTE9BRCwgcG9pbnRlck5vZGUsIG51bGwsIHN0b3JlTm9kZSApO1xuXG4vKipcbiAqIFN0b3JlcyBhIHZhbHVlIGluIHRoZSBhdG9taWMgdmFyaWFibGUuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IHBvaW50ZXJOb2RlIC0gQW4gYXRvbWljIHZhcmlhYmxlIG9yIGVsZW1lbnQgb2YgYW4gYXRvbWljIGJ1ZmZlci5cbiAqIEBwYXJhbSB7Tm9kZX0gdmFsdWVOb2RlIC0gVGhlIHZhbHVlIHRoYXQgbXV0YXRlcyB0aGUgYXRvbWljIHZhcmlhYmxlLlxuICogQHBhcmFtIHs/Tm9kZX0gW3N0b3JlTm9kZT1udWxsXSAtIEEgdmFyaWFibGUgc3RvcmluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIGFuIGF0b21pYyBvcGVyYXRpb24sIHR5cGljYWxseSB0aGUgdmFsdWUgb2YgdGhlIGF0b21pYyB2YXJpYWJsZSBiZWZvcmUgdGhlIG9wZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBdG9taWNGdW5jdGlvbk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBhdG9taWNTdG9yZSA9ICggcG9pbnRlck5vZGUsIHZhbHVlTm9kZSwgc3RvcmVOb2RlID0gbnVsbCApID0+IGF0b21pY0Z1bmMoIEF0b21pY0Z1bmN0aW9uTm9kZS5BVE9NSUNfU1RPUkUsIHBvaW50ZXJOb2RlLCB2YWx1ZU5vZGUsIHN0b3JlTm9kZSApO1xuXG4vKipcbiAqIEluY3JlbWVudHMgdGhlIHZhbHVlIHN0b3JlZCBpbiB0aGUgYXRvbWljIHZhcmlhYmxlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBwb2ludGVyTm9kZSAtIEFuIGF0b21pYyB2YXJpYWJsZSBvciBlbGVtZW50IG9mIGFuIGF0b21pYyBidWZmZXIuXG4gKiBAcGFyYW0ge05vZGV9IHZhbHVlTm9kZSAtIFRoZSB2YWx1ZSB0aGF0IG11dGF0ZXMgdGhlIGF0b21pYyB2YXJpYWJsZS5cbiAqIEBwYXJhbSB7P05vZGV9IFtzdG9yZU5vZGU9bnVsbF0gLSBBIHZhcmlhYmxlIHN0b3JpbmcgdGhlIHJldHVybiB2YWx1ZSBvZiBhbiBhdG9taWMgb3BlcmF0aW9uLCB0eXBpY2FsbHkgdGhlIHZhbHVlIG9mIHRoZSBhdG9taWMgdmFyaWFibGUgYmVmb3JlIHRoZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXRvbWljRnVuY3Rpb25Ob2RlfVxuICovXG5leHBvcnQgY29uc3QgYXRvbWljQWRkID0gKCBwb2ludGVyTm9kZSwgdmFsdWVOb2RlLCBzdG9yZU5vZGUgPSBudWxsICkgPT4gYXRvbWljRnVuYyggQXRvbWljRnVuY3Rpb25Ob2RlLkFUT01JQ19BREQsIHBvaW50ZXJOb2RlLCB2YWx1ZU5vZGUsIHN0b3JlTm9kZSApO1xuXG4vKipcbiAqIERlY3JlbWVudHMgdGhlIHZhbHVlIHN0b3JlZCBpbiB0aGUgYXRvbWljIHZhcmlhYmxlLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBwb2ludGVyTm9kZSAtIEFuIGF0b21pYyB2YXJpYWJsZSBvciBlbGVtZW50IG9mIGFuIGF0b21pYyBidWZmZXIuXG4gKiBAcGFyYW0ge05vZGV9IHZhbHVlTm9kZSAtIFRoZSB2YWx1ZSB0aGF0IG11dGF0ZXMgdGhlIGF0b21pYyB2YXJpYWJsZS5cbiAqIEBwYXJhbSB7P05vZGV9IFtzdG9yZU5vZGU9bnVsbF0gLSBBIHZhcmlhYmxlIHN0b3JpbmcgdGhlIHJldHVybiB2YWx1ZSBvZiBhbiBhdG9taWMgb3BlcmF0aW9uLCB0eXBpY2FsbHkgdGhlIHZhbHVlIG9mIHRoZSBhdG9taWMgdmFyaWFibGUgYmVmb3JlIHRoZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXRvbWljRnVuY3Rpb25Ob2RlfVxuICovXG5leHBvcnQgY29uc3QgYXRvbWljU3ViID0gKCBwb2ludGVyTm9kZSwgdmFsdWVOb2RlLCBzdG9yZU5vZGUgPSBudWxsICkgPT4gYXRvbWljRnVuYyggQXRvbWljRnVuY3Rpb25Ob2RlLkFUT01JQ19TVUIsIHBvaW50ZXJOb2RlLCB2YWx1ZU5vZGUsIHN0b3JlTm9kZSApO1xuXG4vKipcbiAqIFN0b3JlcyBpbiBhbiBhdG9taWMgdmFyaWFibGUgdGhlIG1heGltdW0gYmV0d2VlbiBpdHMgY3VycmVudCB2YWx1ZSBhbmQgYSBwYXJhbWV0ZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGV9IHBvaW50ZXJOb2RlIC0gQW4gYXRvbWljIHZhcmlhYmxlIG9yIGVsZW1lbnQgb2YgYW4gYXRvbWljIGJ1ZmZlci5cbiAqIEBwYXJhbSB7Tm9kZX0gdmFsdWVOb2RlIC0gVGhlIHZhbHVlIHRoYXQgbXV0YXRlcyB0aGUgYXRvbWljIHZhcmlhYmxlLlxuICogQHBhcmFtIHs/Tm9kZX0gW3N0b3JlTm9kZT1udWxsXSAtIEEgdmFyaWFibGUgc3RvcmluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIGFuIGF0b21pYyBvcGVyYXRpb24sIHR5cGljYWxseSB0aGUgdmFsdWUgb2YgdGhlIGF0b21pYyB2YXJpYWJsZSBiZWZvcmUgdGhlIG9wZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBdG9taWNGdW5jdGlvbk5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBhdG9taWNNYXggPSAoIHBvaW50ZXJOb2RlLCB2YWx1ZU5vZGUsIHN0b3JlTm9kZSA9IG51bGwgKSA9PiBhdG9taWNGdW5jKCBBdG9taWNGdW5jdGlvbk5vZGUuQVRPTUlDX01BWCwgcG9pbnRlck5vZGUsIHZhbHVlTm9kZSwgc3RvcmVOb2RlICk7XG5cbi8qKlxuICogU3RvcmVzIGluIGFuIGF0b21pYyB2YXJpYWJsZSB0aGUgbWluaW11bSBiZXR3ZWVuIGl0cyBjdXJyZW50IHZhbHVlIGFuZCBhIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gcG9pbnRlck5vZGUgLSBBbiBhdG9taWMgdmFyaWFibGUgb3IgZWxlbWVudCBvZiBhbiBhdG9taWMgYnVmZmVyLlxuICogQHBhcmFtIHtOb2RlfSB2YWx1ZU5vZGUgLSBUaGUgdmFsdWUgdGhhdCBtdXRhdGVzIHRoZSBhdG9taWMgdmFyaWFibGUuXG4gKiBAcGFyYW0gez9Ob2RlfSBbc3RvcmVOb2RlPW51bGxdIC0gQSB2YXJpYWJsZSBzdG9yaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgYW4gYXRvbWljIG9wZXJhdGlvbiwgdHlwaWNhbGx5IHRoZSB2YWx1ZSBvZiB0aGUgYXRvbWljIHZhcmlhYmxlIGJlZm9yZSB0aGUgb3BlcmF0aW9uLlxuICogQHJldHVybnMge0F0b21pY0Z1bmN0aW9uTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGF0b21pY01pbiA9ICggcG9pbnRlck5vZGUsIHZhbHVlTm9kZSwgc3RvcmVOb2RlID0gbnVsbCApID0+IGF0b21pY0Z1bmMoIEF0b21pY0Z1bmN0aW9uTm9kZS5BVE9NSUNfTUlOLCBwb2ludGVyTm9kZSwgdmFsdWVOb2RlLCBzdG9yZU5vZGUgKTtcblxuLyoqXG4gKiBTdG9yZXMgaW4gYW4gYXRvbWljIHZhcmlhYmxlIHRoZSBiaXR3aXNlIEFORCBvZiBpdHMgdmFsdWUgd2l0aCBhIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gcG9pbnRlck5vZGUgLSBBbiBhdG9taWMgdmFyaWFibGUgb3IgZWxlbWVudCBvZiBhbiBhdG9taWMgYnVmZmVyLlxuICogQHBhcmFtIHtOb2RlfSB2YWx1ZU5vZGUgLSBUaGUgdmFsdWUgdGhhdCBtdXRhdGVzIHRoZSBhdG9taWMgdmFyaWFibGUuXG4gKiBAcGFyYW0gez9Ob2RlfSBbc3RvcmVOb2RlPW51bGxdIC0gQSB2YXJpYWJsZSBzdG9yaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgYW4gYXRvbWljIG9wZXJhdGlvbiwgdHlwaWNhbGx5IHRoZSB2YWx1ZSBvZiB0aGUgYXRvbWljIHZhcmlhYmxlIGJlZm9yZSB0aGUgb3BlcmF0aW9uLlxuICogQHJldHVybnMge0F0b21pY0Z1bmN0aW9uTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGF0b21pY0FuZCA9ICggcG9pbnRlck5vZGUsIHZhbHVlTm9kZSwgc3RvcmVOb2RlID0gbnVsbCApID0+IGF0b21pY0Z1bmMoIEF0b21pY0Z1bmN0aW9uTm9kZS5BVE9NSUNfQU5ELCBwb2ludGVyTm9kZSwgdmFsdWVOb2RlLCBzdG9yZU5vZGUgKTtcblxuLyoqXG4gKiBTdG9yZXMgaW4gYW4gYXRvbWljIHZhcmlhYmxlIHRoZSBiaXR3aXNlIE9SIG9mIGl0cyB2YWx1ZSB3aXRoIGEgcGFyYW1ldGVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlfSBwb2ludGVyTm9kZSAtIEFuIGF0b21pYyB2YXJpYWJsZSBvciBlbGVtZW50IG9mIGFuIGF0b21pYyBidWZmZXIuXG4gKiBAcGFyYW0ge05vZGV9IHZhbHVlTm9kZSAtIFRoZSB2YWx1ZSB0aGF0IG11dGF0ZXMgdGhlIGF0b21pYyB2YXJpYWJsZS5cbiAqIEBwYXJhbSB7P05vZGV9IFtzdG9yZU5vZGU9bnVsbF0gLSBBIHZhcmlhYmxlIHN0b3JpbmcgdGhlIHJldHVybiB2YWx1ZSBvZiBhbiBhdG9taWMgb3BlcmF0aW9uLCB0eXBpY2FsbHkgdGhlIHZhbHVlIG9mIHRoZSBhdG9taWMgdmFyaWFibGUgYmVmb3JlIHRoZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXRvbWljRnVuY3Rpb25Ob2RlfVxuICovXG5leHBvcnQgY29uc3QgYXRvbWljT3IgPSAoIHBvaW50ZXJOb2RlLCB2YWx1ZU5vZGUsIHN0b3JlTm9kZSA9IG51bGwgKSA9PiBhdG9taWNGdW5jKCBBdG9taWNGdW5jdGlvbk5vZGUuQVRPTUlDX09SLCBwb2ludGVyTm9kZSwgdmFsdWVOb2RlLCBzdG9yZU5vZGUgKTtcblxuLyoqXG4gKiBTdG9yZXMgaW4gYW4gYXRvbWljIHZhcmlhYmxlIHRoZSBiaXR3aXNlIFhPUiBvZiBpdHMgdmFsdWUgd2l0aCBhIHBhcmFtZXRlci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZX0gcG9pbnRlck5vZGUgLSBBbiBhdG9taWMgdmFyaWFibGUgb3IgZWxlbWVudCBvZiBhbiBhdG9taWMgYnVmZmVyLlxuICogQHBhcmFtIHtOb2RlfSB2YWx1ZU5vZGUgLSBUaGUgdmFsdWUgdGhhdCBtdXRhdGVzIHRoZSBhdG9taWMgdmFyaWFibGUuXG4gKiBAcGFyYW0gez9Ob2RlfSBbc3RvcmVOb2RlPW51bGxdIC0gQSB2YXJpYWJsZSBzdG9yaW5nIHRoZSByZXR1cm4gdmFsdWUgb2YgYW4gYXRvbWljIG9wZXJhdGlvbiwgdHlwaWNhbGx5IHRoZSB2YWx1ZSBvZiB0aGUgYXRvbWljIHZhcmlhYmxlIGJlZm9yZSB0aGUgb3BlcmF0aW9uLlxuICogQHJldHVybnMge0F0b21pY0Z1bmN0aW9uTm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGF0b21pY1hvciA9ICggcG9pbnRlck5vZGUsIHZhbHVlTm9kZSwgc3RvcmVOb2RlID0gbnVsbCApID0+IGF0b21pY0Z1bmMoIEF0b21pY0Z1bmN0aW9uTm9kZS5BVE9NSUNfWE9SLCBwb2ludGVyTm9kZSwgdmFsdWVOb2RlLCBzdG9yZU5vZGUgKTtcbiIsImltcG9ydCB7IHVuaWZvcm0gfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Ob2RlLmpzJztcbmltcG9ydCB7IHJlbmRlckdyb3VwIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtR3JvdXBOb2RlLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgY2FtZXJhVmlld01hdHJpeCB9IGZyb20gJy4vQ2FtZXJhLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uV29ybGQgfSBmcm9tICcuL1Bvc2l0aW9uLmpzJztcblxubGV0IHVuaWZvcm1zTGliO1xuXG5mdW5jdGlvbiBnZXRMaWdodERhdGEoIGxpZ2h0ICkge1xuXG5cdHVuaWZvcm1zTGliID0gdW5pZm9ybXNMaWIgfHwgbmV3IFdlYWtNYXAoKTtcblxuXHRsZXQgdW5pZm9ybXMgPSB1bmlmb3Jtc0xpYi5nZXQoIGxpZ2h0ICk7XG5cblx0aWYgKCB1bmlmb3JtcyA9PT0gdW5kZWZpbmVkICkgdW5pZm9ybXNMaWIuc2V0KCBsaWdodCwgdW5pZm9ybXMgPSB7fSApO1xuXG5cdHJldHVybiB1bmlmb3JtcztcblxufVxuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgZ2V0dGluZyBhIHNoYWRvdyBtYXRyaXggdW5pZm9ybSBub2RlIGZvciB0aGUgZ2l2ZW4gbGlnaHQuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0xpZ2h0fSBsaWdodCAtVGhlIGxpZ2h0IHNvdXJjZS5cbiAqIEByZXR1cm5zIHtVbmlmb3JtTm9kZTxtYXQ0Pn0gVGhlIHNoYWRvdyBtYXRyaXggdW5pZm9ybSBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRTaGFkb3dNYXRyaXgoIGxpZ2h0ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBnZXRMaWdodERhdGEoIGxpZ2h0ICk7XG5cblx0cmV0dXJuIGRhdGEuc2hhZG93TWF0cml4IHx8ICggZGF0YS5zaGFkb3dNYXRyaXggPSB1bmlmb3JtKCAnbWF0NCcgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKS5vblJlbmRlclVwZGF0ZSggKCkgPT4ge1xuXG5cdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICE9PSB0cnVlICkge1xuXG5cdFx0XHRsaWdodC5zaGFkb3cudXBkYXRlTWF0cmljZXMoIGxpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblxuXHR9ICkgKTtcblxufVxuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgZ2V0dGluZyBwcm9qZWN0ZWQgdXYgY29vcmRpbmF0ZXMgZm9yIHRoZSBnaXZlbiBsaWdodC5cbiAqIFJlbGV2YW50IHdoZW4gdXNpbmcgbWFwcyB3aXRoIHNwb3QgbGlnaHRzLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMaWdodH0gbGlnaHQgLVRoZSBsaWdodCBzb3VyY2UuXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IFtwb3NpdGlvbj1wb3NpdGlvbldvcmxkXSAtVGhlIHBvc2l0aW9uIHRvIHByb2plY3QuXG4gKiBAcmV0dXJucyB7Tm9kZTx2ZWMzPn0gVGhlIHByb2plY3RlZCB1dnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaWdodFByb2plY3Rpb25VViggbGlnaHQsIHBvc2l0aW9uID0gcG9zaXRpb25Xb3JsZCApIHtcblxuXHRjb25zdCBzcG90TGlnaHRDb29yZCA9IGxpZ2h0U2hhZG93TWF0cml4KCBsaWdodCApLm11bCggcG9zaXRpb24gKTtcblx0Y29uc3QgcHJvamVjdGlvblVWID0gc3BvdExpZ2h0Q29vcmQueHl6LmRpdiggc3BvdExpZ2h0Q29vcmQudyApO1xuXG5cdHJldHVybiBwcm9qZWN0aW9uVVY7XG5cbn1cblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIHBvc2l0aW9uIGluIHdvcmxkIHNwYWNlIGZvciB0aGUgZ2l2ZW4gbGlnaHQuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0xpZ2h0fSBsaWdodCAtVGhlIGxpZ2h0IHNvdXJjZS5cbiAqIEByZXR1cm5zIHtVbmlmb3JtTm9kZTx2ZWMzPn0gVGhlIGxpZ2h0J3MgcG9zaXRpb24gaW4gd29ybGQgc3BhY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaWdodFBvc2l0aW9uKCBsaWdodCApIHtcblxuXHRjb25zdCBkYXRhID0gZ2V0TGlnaHREYXRhKCBsaWdodCApO1xuXG5cdHJldHVybiBkYXRhLnBvc2l0aW9uIHx8ICggZGF0YS5wb3NpdGlvbiA9IHVuaWZvcm0oIG5ldyBWZWN0b3IzKCkgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKS5vblJlbmRlclVwZGF0ZSggKCBfLCBzZWxmICkgPT4gc2VsZi52YWx1ZS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICkgKSApO1xuXG59XG5cbi8qKlxuICogVFNMIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHRoZSBsaWdodCB0YXJnZXQgcG9zaXRpb24gaW4gd29ybGQgc3BhY2UgZm9yIHRoZSBnaXZlbiBsaWdodC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7TGlnaHR9IGxpZ2h0IC1UaGUgbGlnaHQgc291cmNlLlxuICogQHJldHVybnMge1VuaWZvcm1Ob2RlPHZlYzM+fSBUaGUgbGlnaHQgdGFyZ2V0IHBvc2l0aW9uIGluIHdvcmxkIHNwYWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRUYXJnZXRQb3NpdGlvbiggbGlnaHQgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGdldExpZ2h0RGF0YSggbGlnaHQgKTtcblxuXHRyZXR1cm4gZGF0YS50YXJnZXRQb3NpdGlvbiB8fCAoIGRhdGEudGFyZ2V0UG9zaXRpb24gPSB1bmlmb3JtKCBuZXcgVmVjdG9yMygpICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICkub25SZW5kZXJVcGRhdGUoICggXywgc2VsZiApID0+IHNlbGYudmFsdWUuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKSApICk7XG5cbn1cblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIHBvc2l0aW9uIGluIHZpZXcgc3BhY2UgZm9yIHRoZSBnaXZlbiBsaWdodC5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7TGlnaHR9IGxpZ2h0IC0gVGhlIGxpZ2h0IHNvdXJjZS5cbiAqIEByZXR1cm5zIHtVbmlmb3JtTm9kZTx2ZWMzPn0gVGhlIGxpZ2h0J3MgcG9zaXRpb24gaW4gdmlldyBzcGFjZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0Vmlld1Bvc2l0aW9uKCBsaWdodCApIHtcblxuXHRjb25zdCBkYXRhID0gZ2V0TGlnaHREYXRhKCBsaWdodCApO1xuXG5cdHJldHVybiBkYXRhLnZpZXdQb3NpdGlvbiB8fCAoIGRhdGEudmlld1Bvc2l0aW9uID0gdW5pZm9ybSggbmV3IFZlY3RvcjMoKSApLnNldEdyb3VwKCByZW5kZXJHcm91cCApLm9uUmVuZGVyVXBkYXRlKCAoIHsgY2FtZXJhIH0sIHNlbGYgKSA9PiB7XG5cblx0XHRzZWxmLnZhbHVlID0gc2VsZi52YWx1ZSB8fCBuZXcgVmVjdG9yMygpO1xuXHRcdHNlbGYudmFsdWUuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0c2VsZi52YWx1ZS5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblxuXHR9ICkgKTtcblxufVxuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgZ2V0dGluZyB0aGUgbGlnaHQgdGFyZ2V0IGRpcmVjdGlvbiBmb3IgdGhlIGdpdmVuIGxpZ2h0LlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMaWdodH0gbGlnaHQgLVRoZSBsaWdodCBzb3VyY2UuXG4gKiBAcmV0dXJucyB7Tm9kZTx2ZWMzPn0gVGhlIGxpZ2h0J3MgdGFyZ2V0IGRpcmVjdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGxpZ2h0VGFyZ2V0RGlyZWN0aW9uID0gKCBsaWdodCApID0+IGNhbWVyYVZpZXdNYXRyaXgudHJhbnNmb3JtRGlyZWN0aW9uKCBsaWdodFBvc2l0aW9uKCBsaWdodCApLnN1YiggbGlnaHRUYXJnZXRQb3NpdGlvbiggbGlnaHQgKSApICk7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuLi9jb3JlL05vZGUuanMnO1xuaW1wb3J0IHsgbm9kZU9iamVjdCwgdmVjMyB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IGhhc2hBcnJheSB9IGZyb20gJy4uL2NvcmUvTm9kZVV0aWxzLmpzJztcblxuY29uc3Qgc29ydExpZ2h0cyA9ICggbGlnaHRzICkgPT4ge1xuXG5cdHJldHVybiBsaWdodHMuc29ydCggKCBhLCBiICkgPT4gYS5pZCAtIGIuaWQgKTtcblxufTtcblxuY29uc3QgZ2V0TGlnaHROb2RlQnlJZCA9ICggaWQsIGxpZ2h0Tm9kZXMgKSA9PiB7XG5cblx0Zm9yICggY29uc3QgbGlnaHROb2RlIG9mIGxpZ2h0Tm9kZXMgKSB7XG5cblx0XHRpZiAoIGxpZ2h0Tm9kZS5pc0FuYWx5dGljTGlnaHROb2RlICYmIGxpZ2h0Tm9kZS5saWdodC5pZCA9PT0gaWQgKSB7XG5cblx0XHRcdHJldHVybiBsaWdodE5vZGU7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBudWxsO1xuXG59O1xuXG5jb25zdCBfbGlnaHRzTm9kZVJlZiA9IC8qQF9fUFVSRV9fKi8gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBUaGlzIG5vZGUgcmVwcmVzZW50cyB0aGUgc2NlbmUncyBsaWdodGluZyBhbmQgbWFuYWdlcyB0aGUgbGlnaHRpbmcgbW9kZWwncyBsaWZlIGN5Y2xlXG4gKiBmb3IgdGhlIGN1cnJlbnQgYnVpbGQgM0Qgb2JqZWN0LiBJdCBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0aW5nIHRoZSB0b3RhbCBvdXRnb2luZ1xuICogbGlnaHQgaW4gYSBnaXZlbiBsaWdodGluZyBjb250ZXh0LlxuICpcbiAqIEBhdWdtZW50cyBOb2RlXG4gKi9cbmNsYXNzIExpZ2h0c05vZGUgZXh0ZW5kcyBOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0xpZ2h0c05vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsaWdodHMgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoICd2ZWMzJyApO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBub2RlIHJlcHJlc2VudGluZyB0aGUgdG90YWwgZGlmZnVzZSBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuXHRcdCAqL1xuXHRcdHRoaXMudG90YWxEaWZmdXNlTm9kZSA9IHZlYzMoKS50b1ZhciggJ3RvdGFsRGlmZnVzZScgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgbm9kZSByZXByZXNlbnRpbmcgdGhlIHRvdGFsIHNwZWN1bGFyIGxpZ2h0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGU8dmVjMz59XG5cdFx0ICovXG5cdFx0dGhpcy50b3RhbFNwZWN1bGFyTm9kZSA9IHZlYzMoKS50b1ZhciggJ3RvdGFsU3BlY3VsYXInICk7XG5cblx0XHQvKipcblx0XHQgKiBBIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBvdXRnb2luZyBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuXHRcdCAqL1xuXHRcdHRoaXMub3V0Z29pbmdMaWdodE5vZGUgPSB2ZWMzKCkudG9WYXIoICdvdXRnb2luZ0xpZ2h0JyApO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgcmVwcmVzZW50aW5nIHRoZSBsaWdodHMgaW4gdGhlIHNjZW5lLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7QXJyYXk8TGlnaHQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2xpZ2h0cyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogRm9yIGVhY2ggbGlnaHQgaW4gdGhlIHNjZW5lLCB0aGlzIG5vZGUgd2lsbCBjcmVhdGUgYVxuXHRcdCAqIGNvcnJlc3BvbmRpbmcgbGlnaHQgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9BcnJheTxMaWdodGluZ05vZGU+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9saWdodE5vZGVzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgaGFzaCBmb3IgaWRlbnRpZnlpbmcgdGhlIGN1cnJlbnQgbGlnaHQgbm9kZXMgc2V0dXAuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9saWdodE5vZGVzSGFzaCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBgTGlnaHRzTm9kZWAgc2V0cyB0aGlzIHByb3BlcnR5IHRvIGB0cnVlYCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2xvYmFsID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0ZXMgdGhlIGRlZmF1bHQge0BsaW5rIE5vZGUjY3VzdG9tQ2FjaGVLZXl9IGltcGxlbWVudGF0aW9uIGJ5IGluY2x1ZGluZyB0aGVcblx0ICogbGlnaHQgSURzIGludG8gdGhlIGNhY2hlIGtleS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VzdG9tIGNhY2hlIGtleS5cblx0ICovXG5cdGN1c3RvbUNhY2hlS2V5KCkge1xuXG5cdFx0Y29uc3QgbGlnaHRJRHMgPSBbXTtcblx0XHRjb25zdCBsaWdodHMgPSB0aGlzLl9saWdodHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsaWdodHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRsaWdodElEcy5wdXNoKCBsaWdodHNbIGkgXS5pZCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhc2hBcnJheSggbGlnaHRJRHMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIGEgaGFzaCB2YWx1ZSBmb3IgaWRlbnRpZnlpbmcgdGhlIGN1cnJlbnQgbGlnaHQgbm9kZXMgc2V0dXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXB1dGVkIGhhc2guXG5cdCAqL1xuXHRnZXRIYXNoKCBidWlsZGVyICkge1xuXG5cdFx0aWYgKCB0aGlzLl9saWdodE5vZGVzSGFzaCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCB0aGlzLl9saWdodE5vZGVzID09PSBudWxsICkgdGhpcy5zZXR1cExpZ2h0c05vZGUoIGJ1aWxkZXIgKTtcblxuXHRcdFx0Y29uc3QgaGFzaCA9IFtdO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBsaWdodE5vZGUgb2YgdGhpcy5fbGlnaHROb2RlcyApIHtcblxuXHRcdFx0XHRoYXNoLnB1c2goIGxpZ2h0Tm9kZS5nZXRTZWxmKCkuZ2V0SGFzaCgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fbGlnaHROb2Rlc0hhc2ggPSAnbGlnaHRzLScgKyBoYXNoLmpvaW4oICcsJyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2xpZ2h0Tm9kZXNIYXNoO1xuXG5cdH1cblxuXHRhbmFseXplKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgcHJvcGVydGllcyA9IGJ1aWxkZXIuZ2V0RGF0YUZyb21Ob2RlKCB0aGlzICk7XG5cblx0XHRmb3IgKCBjb25zdCBub2RlIG9mIHByb3BlcnRpZXMubm9kZXMgKSB7XG5cblx0XHRcdG5vZGUuYnVpbGQoIGJ1aWxkZXIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgbGlnaHRpbmcgbm9kZXMgZm9yIGVhY2ggc2NlbmUgbGlnaHQuIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gZnVydGhlclxuXHQgKiBwcm9jZXNzIGxpZ2h0cyBpbiB0aGUgbm9kZSBzeXN0ZW0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cExpZ2h0c05vZGUoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBsaWdodE5vZGVzID0gW107XG5cblx0XHRjb25zdCBwcmV2aW91c0xpZ2h0Tm9kZXMgPSB0aGlzLl9saWdodE5vZGVzO1xuXG5cdFx0Y29uc3QgbGlnaHRzID0gc29ydExpZ2h0cyggdGhpcy5fbGlnaHRzICk7XG5cdFx0Y29uc3Qgbm9kZUxpYnJhcnkgPSBidWlsZGVyLnJlbmRlcmVyLmxpYnJhcnk7XG5cblx0XHRmb3IgKCBjb25zdCBsaWdodCBvZiBsaWdodHMgKSB7XG5cblx0XHRcdGlmICggbGlnaHQuaXNOb2RlICkge1xuXG5cdFx0XHRcdGxpZ2h0Tm9kZXMucHVzaCggbm9kZU9iamVjdCggbGlnaHQgKSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGxldCBsaWdodE5vZGUgPSBudWxsO1xuXG5cdFx0XHRcdGlmICggcHJldmlvdXNMaWdodE5vZGVzICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bGlnaHROb2RlID0gZ2V0TGlnaHROb2RlQnlJZCggbGlnaHQuaWQsIHByZXZpb3VzTGlnaHROb2RlcyApOyAvLyByZXVzZSBleGlzdGluZyBsaWdodCBub2RlXG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbGlnaHROb2RlID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0Ly8gZmluZCB0aGUgY29ycmVzcG9uZGluZyBub2RlIHR5cGUgZm9yIGEgZ2l2ZW4gbGlnaHRcblxuXHRcdFx0XHRcdGNvbnN0IGxpZ2h0Tm9kZUNsYXNzID0gbm9kZUxpYnJhcnkuZ2V0TGlnaHROb2RlQ2xhc3MoIGxpZ2h0LmNvbnN0cnVjdG9yICk7XG5cblx0XHRcdFx0XHRpZiAoIGxpZ2h0Tm9kZUNsYXNzID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oIGBMaWdodHNOb2RlLnNldHVwTm9kZUxpZ2h0czogTGlnaHQgbm9kZSBub3QgZm91bmQgZm9yICR7IGxpZ2h0LmNvbnN0cnVjdG9yLm5hbWUgfWAgKTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bGV0IGxpZ2h0Tm9kZSA9IG51bGw7XG5cblx0XHRcdFx0XHRpZiAoICEgX2xpZ2h0c05vZGVSZWYuaGFzKCBsaWdodCApICkge1xuXG5cdFx0XHRcdFx0XHRsaWdodE5vZGUgPSBub2RlT2JqZWN0KCBuZXcgbGlnaHROb2RlQ2xhc3MoIGxpZ2h0ICkgKTtcblx0XHRcdFx0XHRcdF9saWdodHNOb2RlUmVmLnNldCggbGlnaHQsIGxpZ2h0Tm9kZSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0bGlnaHROb2RlID0gX2xpZ2h0c05vZGVSZWYuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bGlnaHROb2Rlcy5wdXNoKCBsaWdodE5vZGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2xpZ2h0Tm9kZXMgPSBsaWdodE5vZGVzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB1cCBhIGRpcmVjdCBsaWdodCBpbiB0aGUgbGlnaHRpbmcgbW9kZWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBidWlsZGVyIC0gVGhlIGJ1aWxkZXIgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNvbnRleHQgYW5kIHN0YWNrLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gbGlnaHROb2RlIC0gVGhlIGxpZ2h0IG5vZGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBsaWdodERhdGEgLSBUaGUgbGlnaHQgb2JqZWN0IGNvbnRhaW5pbmcgY29sb3IgYW5kIGRpcmVjdGlvbiBwcm9wZXJ0aWVzLlxuXHQgKi9cblx0c2V0dXBEaXJlY3RMaWdodCggYnVpbGRlciwgbGlnaHROb2RlLCBsaWdodERhdGEgKSB7XG5cblx0XHRjb25zdCB7IGxpZ2h0aW5nTW9kZWwsIHJlZmxlY3RlZExpZ2h0IH0gPSBidWlsZGVyLmNvbnRleHQ7XG5cblx0XHRsaWdodGluZ01vZGVsLmRpcmVjdCgge1xuXHRcdFx0Li4ubGlnaHREYXRhLFxuXHRcdFx0bGlnaHROb2RlLFxuXHRcdFx0cmVmbGVjdGVkTGlnaHRcblx0XHR9LCBidWlsZGVyICk7XG5cblx0fVxuXG5cdHNldHVwRGlyZWN0UmVjdEFyZWFMaWdodCggYnVpbGRlciwgbGlnaHROb2RlLCBsaWdodERhdGEgKSB7XG5cblx0XHRjb25zdCB7IGxpZ2h0aW5nTW9kZWwsIHJlZmxlY3RlZExpZ2h0IH0gPSBidWlsZGVyLmNvbnRleHQ7XG5cblx0XHRsaWdodGluZ01vZGVsLmRpcmVjdFJlY3RBcmVhKCB7XG5cdFx0XHQuLi5saWdodERhdGEsXG5cdFx0XHRsaWdodE5vZGUsXG5cdFx0XHRyZWZsZWN0ZWRMaWdodFxuXHRcdH0sIGJ1aWxkZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgaW50ZXJuYWwgbGlnaHRzIGJ5IGJ1aWxkaW5nIGFsbCByZXNwZWN0aXZlXG5cdCAqIGxpZ2h0IG5vZGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcGFyYW0ge0FycmF5PExpZ2h0aW5nTm9kZT59IGxpZ2h0Tm9kZXMgLSBBbiBhcnJheSBvZiBsaWdodGluZyBub2Rlcy5cblx0ICovXG5cdHNldHVwTGlnaHRzKCBidWlsZGVyLCBsaWdodE5vZGVzICkge1xuXG5cdFx0Zm9yICggY29uc3QgbGlnaHROb2RlIG9mIGxpZ2h0Tm9kZXMgKSB7XG5cblx0XHRcdGxpZ2h0Tm9kZS5idWlsZCggYnVpbGRlciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRnZXRMaWdodE5vZGVzKCBidWlsZGVyICkge1xuXG5cdFx0aWYgKCB0aGlzLl9saWdodE5vZGVzID09PSBudWxsICkgdGhpcy5zZXR1cExpZ2h0c05vZGUoIGJ1aWxkZXIgKTtcblxuXHRcdHJldHVybiB0aGlzLl9saWdodE5vZGVzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGltcGxlbWVudGF0aW9uIG1ha2VzIHN1cmUgdGhhdCBmb3IgZWFjaCBsaWdodCBpbiB0aGUgc2NlbmVcblx0ICogdGhlcmUgaXMgYSBjb3JyZXNwb25kaW5nIGxpZ2h0IG5vZGUuIEJ5IGJ1aWxkaW5nIHRoZSBsaWdodCBub2Rlc1xuXHQgKiBhbmQgZXZhbHVhdGluZyB0aGUgbGlnaHRpbmcgbW9kZWwgdGhlIG91dGdvaW5nIGxpZ2h0IGlzIGNvbXB1dGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBBIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBvdXRnb2luZyBsaWdodC5cblx0ICovXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgY3VycmVudExpZ2h0c05vZGUgPSBidWlsZGVyLmxpZ2h0c05vZGU7XG5cblx0XHRidWlsZGVyLmxpZ2h0c05vZGUgPSB0aGlzO1xuXG5cdFx0Ly9cblxuXHRcdGxldCBvdXRnb2luZ0xpZ2h0Tm9kZSA9IHRoaXMub3V0Z29pbmdMaWdodE5vZGU7XG5cblx0XHRjb25zdCBjb250ZXh0ID0gYnVpbGRlci5jb250ZXh0O1xuXHRcdGNvbnN0IGxpZ2h0aW5nTW9kZWwgPSBjb250ZXh0LmxpZ2h0aW5nTW9kZWw7XG5cblx0XHRjb25zdCBwcm9wZXJ0aWVzID0gYnVpbGRlci5nZXREYXRhRnJvbU5vZGUoIHRoaXMgKTtcblxuXHRcdGlmICggbGlnaHRpbmdNb2RlbCApIHtcblxuXHRcdFx0Y29uc3QgeyB0b3RhbERpZmZ1c2VOb2RlLCB0b3RhbFNwZWN1bGFyTm9kZSB9ID0gdGhpcztcblxuXHRcdFx0Y29udGV4dC5vdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodE5vZGU7XG5cblx0XHRcdGNvbnN0IHN0YWNrID0gYnVpbGRlci5hZGRTdGFjaygpO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRwcm9wZXJ0aWVzLm5vZGVzID0gc3RhY2subm9kZXM7XG5cblx0XHRcdC8vXG5cblx0XHRcdGxpZ2h0aW5nTW9kZWwuc3RhcnQoIGJ1aWxkZXIgKTtcblxuXHRcdFx0Ly9cblxuXHRcdFx0Y29uc3QgeyBiYWNrZHJvcCwgYmFja2Ryb3BBbHBoYSB9ID0gY29udGV4dDtcblx0XHRcdGNvbnN0IHsgZGlyZWN0RGlmZnVzZSwgZGlyZWN0U3BlY3VsYXIsIGluZGlyZWN0RGlmZnVzZSwgaW5kaXJlY3RTcGVjdWxhciB9ID0gY29udGV4dC5yZWZsZWN0ZWRMaWdodDtcblxuXHRcdFx0bGV0IHRvdGFsRGlmZnVzZSA9IGRpcmVjdERpZmZ1c2UuYWRkKCBpbmRpcmVjdERpZmZ1c2UgKTtcblxuXHRcdFx0aWYgKCBiYWNrZHJvcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIGJhY2tkcm9wQWxwaGEgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR0b3RhbERpZmZ1c2UgPSB2ZWMzKCBiYWNrZHJvcEFscGhhLm1peCggdG90YWxEaWZmdXNlLCBiYWNrZHJvcCApICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRvdGFsRGlmZnVzZSA9IHZlYzMoIGJhY2tkcm9wICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnRleHQubWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRvdGFsRGlmZnVzZU5vZGUuYXNzaWduKCB0b3RhbERpZmZ1c2UgKTtcblx0XHRcdHRvdGFsU3BlY3VsYXJOb2RlLmFzc2lnbiggZGlyZWN0U3BlY3VsYXIuYWRkKCBpbmRpcmVjdFNwZWN1bGFyICkgKTtcblxuXHRcdFx0b3V0Z29pbmdMaWdodE5vZGUuYXNzaWduKCB0b3RhbERpZmZ1c2VOb2RlLmFkZCggdG90YWxTcGVjdWxhck5vZGUgKSApO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRsaWdodGluZ01vZGVsLmZpbmlzaCggYnVpbGRlciApO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRvdXRnb2luZ0xpZ2h0Tm9kZSA9IG91dGdvaW5nTGlnaHROb2RlLmJ5cGFzcyggYnVpbGRlci5yZW1vdmVTdGFjaygpICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwcm9wZXJ0aWVzLm5vZGVzID0gW107XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0YnVpbGRlci5saWdodHNOb2RlID0gY3VycmVudExpZ2h0c05vZGU7XG5cblx0XHRyZXR1cm4gb3V0Z29pbmdMaWdodE5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25maWd1cmVzIHRoaXMgbm9kZSB3aXRoIGFuIGFycmF5IG9mIGxpZ2h0cy5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxMaWdodD59IGxpZ2h0cyAtIEFuIGFycmF5IG9mIGxpZ2h0cy5cblx0ICogQHJldHVybiB7TGlnaHRzTm9kZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBub2RlLlxuXHQgKi9cblx0c2V0TGlnaHRzKCBsaWdodHMgKSB7XG5cblx0XHR0aGlzLl9saWdodHMgPSBsaWdodHM7XG5cblx0XHR0aGlzLl9saWdodE5vZGVzID0gbnVsbDtcblx0XHR0aGlzLl9saWdodE5vZGVzSGFzaCA9IG51bGw7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHNjZW5lJ3MgbGlnaHRzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBcnJheTxMaWdodD59IFRoZSBzY2VuZSdzIGxpZ2h0cy5cblx0ICovXG5cdGdldExpZ2h0cygpIHtcblxuXHRcdHJldHVybiB0aGlzLl9saWdodHM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoZSBzY2VuZSBoYXMgbGlnaHRzIG9yIG5vdC5cblx0ICpcblx0ICogQHR5cGUge2Jvb2xlYW59XG5cdCAqL1xuXHRnZXQgaGFzTGlnaHRzKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2xpZ2h0cy5sZW5ndGggPiAwO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBMaWdodHNOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgYExpZ2h0c05vZGVgIGFuZCBjb25maWd1cmluZ1xuICogaXQgd2l0aCB0aGUgZ2l2ZW4gYXJyYXkgb2YgbGlnaHRzLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtBcnJheTxMaWdodD59IGxpZ2h0cyAtIEFuIGFycmF5IG9mIGxpZ2h0cy5cbiAqIEByZXR1cm4ge0xpZ2h0c05vZGV9IFRoZSBjcmVhdGVkIGxpZ2h0cyBub2RlLlxuICovXG5leHBvcnQgY29uc3QgbGlnaHRzID0gKCBsaWdodHMgPSBbXSApID0+IG5vZGVPYmplY3QoIG5ldyBMaWdodHNOb2RlKCkgKS5zZXRMaWdodHMoIGxpZ2h0cyApO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi4vY29yZS9Ob2RlLmpzJztcbmltcG9ydCB7IE5vZGVVcGRhdGVUeXBlIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBwb3NpdGlvbldvcmxkIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1Bvc2l0aW9uLmpzJztcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgc2hhZG93IG5vZGVzLlxuICpcbiAqIFNoYWRvdyBub2RlcyBlbmNhcHN1bGF0ZSBzaGFkb3cgcmVsYXRlZCBsb2dpYyBhbmQgYXJlIGFsd2F5cyBjb3VwbGVkIHRvIGxpZ2h0aW5nIG5vZGVzLlxuICogTGlnaHRpbmcgbm9kZXMgbWlnaHQgc2hhcmUgdGhlIHNhbWUgc2hhZG93IG5vZGUgdHlwZSBvciB1c2Ugc3BlY2lmaWMgb25lcyBkZXBlbmRpbmcgb25cbiAqIHRoZWlyIHJlcXVpcmVtZW50cy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZVxuICovXG5jbGFzcyBTaGFkb3dCYXNlTm9kZSBleHRlbmRzIE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnU2hhZG93QmFzZU5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzaGFkb3cgYmFzZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xpZ2h0fSBsaWdodCAtIFRoZSBzaGFkb3cgY2FzdGluZyBsaWdodC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBsaWdodCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2hhZG93IGNhc3RpbmcgbGlnaHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7TGlnaHR9XG5cdFx0ICovXG5cdFx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXG5cdFx0LyoqXG5cdFx0ICogT3ZlcndyaXR0ZW4gc2luY2Ugc2hhZG93cyBhcmUgdXBkYXRlZCBieSBkZWZhdWx0IHBlciByZW5kZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0ICdyZW5kZXInXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVCZWZvcmVUeXBlID0gTm9kZVVwZGF0ZVR5cGUuUkVOREVSO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1NoYWRvd0Jhc2VOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgc2hhZG93IHBvc2l0aW9uIG5vZGUgd2hpY2ggaXMgYnkgZGVmYXVsdCB0aGUgcHJlZGVmaW5lZCBUU0wgbm9kZSBvYmplY3QgYHNoYWRvd1Bvc2l0aW9uV29ybGRgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBvYmplY3QgLSBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgbXVzdCBhdCBsZWFzdCBob2xkIGEgbWF0ZXJpYWwgcmVmZXJlbmNlLlxuXHQgKi9cblx0c2V0dXBTaGFkb3dQb3NpdGlvbiggeyBjb250ZXh0LCBtYXRlcmlhbCB9ICkge1xuXG5cdFx0Ly8gVXNlIGFzc2lnbiBpbnNpZGUgYW4gRm4oKVxuXG5cdFx0c2hhZG93UG9zaXRpb25Xb3JsZC5hc3NpZ24oIG1hdGVyaWFsLnNoYWRvd1Bvc2l0aW9uTm9kZSB8fCBjb250ZXh0LnNoYWRvd1Bvc2l0aW9uV29ybGQgfHwgcG9zaXRpb25Xb3JsZCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2FuIGJlIGNhbGxlZCB3aGVuIHRoZSBzaGFkb3cgaXNuJ3QgcmVxdWlyZWQgYW55bW9yZS4gVGhhdCBjYW4gaGFwcGVuIHdoZW5cblx0ICogYSBsaWdodGluZyBub2RlIHN0b3BzIGNhc3Rpbmcgc2hhZG93cyBieSBzZXR0aW5nIHtAbGluayBPYmplY3QzRCNjYXN0U2hhZG93fVxuXHQgKiB0byBgZmFsc2VgLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMudXBkYXRlQmVmb3JlVHlwZSA9IE5vZGVVcGRhdGVUeXBlLk5PTkU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVFNMIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHZlcnRleCBwb3NpdGlvbiBpbiB3b3JsZCBzcGFjZSBkdXJpbmcgdGhlIHNoYWRvdyBwYXNzLlxuICpcbiAqIEB0c2xcbiAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuICovXG5leHBvcnQgY29uc3Qgc2hhZG93UG9zaXRpb25Xb3JsZCA9IC8qQF9fUFVSRV9fKi8gcHJvcGVydHkoICd2ZWMzJywgJ3NoYWRvd1Bvc2l0aW9uV29ybGQnICk7XG5cbmV4cG9ydCBkZWZhdWx0IFNoYWRvd0Jhc2VOb2RlO1xuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoL0NvbG9yLmpzJztcblxuLyoqXG4gKiBTYXZlcyB0aGUgc3RhdGUgb2YgdGhlIGdpdmVuIHJlbmRlcmVyIGFuZCBzdG9yZXMgaXQgaW50byB0aGUgZ2l2ZW4gc3RhdGUgb2JqZWN0LlxuICpcbiAqIElmIG5vdCBzdGF0ZSBvYmplY3QgaXMgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiBjcmVhdGVzIG9uZS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGF0ZT17fV0gLSBUaGUgc3RhdGUuXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBzdGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhdmVSZW5kZXJlclN0YXRlKCByZW5kZXJlciwgc3RhdGUgPSB7fSApIHtcblxuXHRzdGF0ZS50b25lTWFwcGluZyA9IHJlbmRlcmVyLnRvbmVNYXBwaW5nO1xuXHRzdGF0ZS50b25lTWFwcGluZ0V4cG9zdXJlID0gcmVuZGVyZXIudG9uZU1hcHBpbmdFeHBvc3VyZTtcblx0c3RhdGUub3V0cHV0Q29sb3JTcGFjZSA9IHJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2U7XG5cdHN0YXRlLnJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXHRzdGF0ZS5hY3RpdmVDdWJlRmFjZSA9IHJlbmRlcmVyLmdldEFjdGl2ZUN1YmVGYWNlKCk7XG5cdHN0YXRlLmFjdGl2ZU1pcG1hcExldmVsID0gcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTtcblx0c3RhdGUucmVuZGVyT2JqZWN0RnVuY3Rpb24gPSByZW5kZXJlci5nZXRSZW5kZXJPYmplY3RGdW5jdGlvbigpO1xuXHRzdGF0ZS5waXhlbFJhdGlvID0gcmVuZGVyZXIuZ2V0UGl4ZWxSYXRpbygpO1xuXHRzdGF0ZS5tcnQgPSByZW5kZXJlci5nZXRNUlQoKTtcblx0c3RhdGUuY2xlYXJDb2xvciA9IHJlbmRlcmVyLmdldENsZWFyQ29sb3IoIHN0YXRlLmNsZWFyQ29sb3IgfHwgbmV3IENvbG9yKCkgKTtcblx0c3RhdGUuY2xlYXJBbHBoYSA9IHJlbmRlcmVyLmdldENsZWFyQWxwaGEoKTtcblx0c3RhdGUuYXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRzdGF0ZS5zY2lzc29yVGVzdCA9IHJlbmRlcmVyLmdldFNjaXNzb3JUZXN0KCk7XG5cblx0cmV0dXJuIHN0YXRlO1xuXG59XG5cbi8qKlxuICogU2F2ZXMgdGhlIHN0YXRlIG9mIHRoZSBnaXZlbiByZW5kZXJlciBhbmQgc3RvcmVzIGl0IGludG8gdGhlIGdpdmVuIHN0YXRlIG9iamVjdC5cbiAqIEJlc2lkZXMsIHRoZSBmdW5jdGlvbiBhbHNvIHJlc2V0cyB0aGUgc3RhdGUgb2YgdGhlIHJlbmRlcmVyIHRvIGl0cyBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBJZiBub3Qgc3RhdGUgb2JqZWN0IGlzIHByb3ZpZGVkLCB0aGUgZnVuY3Rpb24gY3JlYXRlcyBvbmUuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhdGU9e31dIC0gVGhlIHN0YXRlLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgc3RhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldFJlbmRlcmVyU3RhdGUoIHJlbmRlcmVyLCBzdGF0ZSApIHtcblxuXHRzdGF0ZSA9IHNhdmVSZW5kZXJlclN0YXRlKCByZW5kZXJlciwgc3RhdGUgKTtcblxuXHRyZW5kZXJlci5zZXRNUlQoIG51bGwgKTtcblx0cmVuZGVyZXIuc2V0UmVuZGVyT2JqZWN0RnVuY3Rpb24oIG51bGwgKTtcblx0cmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggMHgwMDAwMDAsIDEgKTtcblx0cmVuZGVyZXIuYXV0b0NsZWFyID0gdHJ1ZTtcblxuXHRyZXR1cm4gc3RhdGU7XG5cbn1cblxuLyoqXG4gKiBSZXN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGdpdmVuIHJlbmRlcmVyIGZyb20gdGhlIGdpdmVuIHN0YXRlIG9iamVjdC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIC0gVGhlIHN0YXRlIHRvIHJlc3RvcmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlUmVuZGVyZXJTdGF0ZSggcmVuZGVyZXIsIHN0YXRlICkge1xuXG5cdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gc3RhdGUudG9uZU1hcHBpbmc7XG5cdHJlbmRlcmVyLnRvbmVNYXBwaW5nRXhwb3N1cmUgPSBzdGF0ZS50b25lTWFwcGluZ0V4cG9zdXJlO1xuXHRyZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlID0gc3RhdGUub3V0cHV0Q29sb3JTcGFjZTtcblx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBzdGF0ZS5yZW5kZXJUYXJnZXQsIHN0YXRlLmFjdGl2ZUN1YmVGYWNlLCBzdGF0ZS5hY3RpdmVNaXBtYXBMZXZlbCApO1xuXHRyZW5kZXJlci5zZXRSZW5kZXJPYmplY3RGdW5jdGlvbiggc3RhdGUucmVuZGVyT2JqZWN0RnVuY3Rpb24gKTtcblx0cmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyggc3RhdGUucGl4ZWxSYXRpbyApO1xuXHRyZW5kZXJlci5zZXRNUlQoIHN0YXRlLm1ydCApO1xuXHRyZW5kZXJlci5zZXRDbGVhckNvbG9yKCBzdGF0ZS5jbGVhckNvbG9yLCBzdGF0ZS5jbGVhckFscGhhICk7XG5cdHJlbmRlcmVyLmF1dG9DbGVhciA9IHN0YXRlLmF1dG9DbGVhcjtcblx0cmVuZGVyZXIuc2V0U2Npc3NvclRlc3QoIHN0YXRlLnNjaXNzb3JUZXN0ICk7XG5cbn1cblxuLyoqXG4gKiBTYXZlcyB0aGUgc3RhdGUgb2YgdGhlIGdpdmVuIHNjZW5lIGFuZCBzdG9yZXMgaXQgaW50byB0aGUgZ2l2ZW4gc3RhdGUgb2JqZWN0LlxuICpcbiAqIElmIG5vdCBzdGF0ZSBvYmplY3QgaXMgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiBjcmVhdGVzIG9uZS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGF0ZT17fV0gLSBUaGUgc3RhdGUuXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBzdGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhdmVTY2VuZVN0YXRlKCBzY2VuZSwgc3RhdGUgPSB7fSApIHtcblxuXHRzdGF0ZS5iYWNrZ3JvdW5kID0gc2NlbmUuYmFja2dyb3VuZDtcblx0c3RhdGUuYmFja2dyb3VuZE5vZGUgPSBzY2VuZS5iYWNrZ3JvdW5kTm9kZTtcblx0c3RhdGUub3ZlcnJpZGVNYXRlcmlhbCA9IHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWw7XG5cblx0cmV0dXJuIHN0YXRlO1xuXG59XG5cbi8qKlxuICogU2F2ZXMgdGhlIHN0YXRlIG9mIHRoZSBnaXZlbiBzY2VuZSBhbmQgc3RvcmVzIGl0IGludG8gdGhlIGdpdmVuIHN0YXRlIG9iamVjdC5cbiAqIEJlc2lkZXMsIHRoZSBmdW5jdGlvbiBhbHNvIHJlc2V0cyB0aGUgc3RhdGUgb2YgdGhlIHNjZW5lIHRvIGl0cyBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBJZiBub3Qgc3RhdGUgb2JqZWN0IGlzIHByb3ZpZGVkLCB0aGUgZnVuY3Rpb24gY3JlYXRlcyBvbmUuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhdGU9e31dIC0gVGhlIHN0YXRlLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgc3RhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldFNjZW5lU3RhdGUoIHNjZW5lLCBzdGF0ZSApIHtcblxuXHRzdGF0ZSA9IHNhdmVTY2VuZVN0YXRlKCBzY2VuZSwgc3RhdGUgKTtcblxuXHRzY2VuZS5iYWNrZ3JvdW5kID0gbnVsbDtcblx0c2NlbmUuYmFja2dyb3VuZE5vZGUgPSBudWxsO1xuXHRzY2VuZS5vdmVycmlkZU1hdGVyaWFsID0gbnVsbDtcblxuXHRyZXR1cm4gc3RhdGU7XG5cbn1cblxuLyoqXG4gKiBSZXN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGdpdmVuIHNjZW5lIGZyb20gdGhlIGdpdmVuIHN0YXRlIG9iamVjdC5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIC0gVGhlIHN0YXRlIHRvIHJlc3RvcmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlU2NlbmVTdGF0ZSggc2NlbmUsIHN0YXRlICkge1xuXG5cdHNjZW5lLmJhY2tncm91bmQgPSBzdGF0ZS5iYWNrZ3JvdW5kO1xuXHRzY2VuZS5iYWNrZ3JvdW5kTm9kZSA9IHN0YXRlLmJhY2tncm91bmROb2RlO1xuXHRzY2VuZS5vdmVycmlkZU1hdGVyaWFsID0gc3RhdGUub3ZlcnJpZGVNYXRlcmlhbDtcblxufVxuXG4vKipcbiAqIFNhdmVzIHRoZSBzdGF0ZSBvZiB0aGUgZ2l2ZW4gcmVuZGVyZXIgYW5kIHNjZW5lIGFuZCBzdG9yZXMgaXQgaW50byB0aGUgZ2l2ZW4gc3RhdGUgb2JqZWN0LlxuICpcbiAqIElmIG5vdCBzdGF0ZSBvYmplY3QgaXMgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiBjcmVhdGVzIG9uZS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBUaGUgc2NlbmUuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YXRlPXt9XSAtIFRoZSBzdGF0ZS5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHN0YXRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVJlbmRlcmVyQW5kU2NlbmVTdGF0ZSggcmVuZGVyZXIsIHNjZW5lLCBzdGF0ZSA9IHt9ICkge1xuXG5cdHN0YXRlID0gc2F2ZVJlbmRlcmVyU3RhdGUoIHJlbmRlcmVyLCBzdGF0ZSApO1xuXHRzdGF0ZSA9IHNhdmVTY2VuZVN0YXRlKCBzY2VuZSwgc3RhdGUgKTtcblxuXHRyZXR1cm4gc3RhdGU7XG5cbn1cblxuLyoqXG4gKiBTYXZlcyB0aGUgc3RhdGUgb2YgdGhlIGdpdmVuIHJlbmRlcmVyIGFuZCBzY2VuZSBhbmQgc3RvcmVzIGl0IGludG8gdGhlIGdpdmVuIHN0YXRlIG9iamVjdC5cbiAqIEJlc2lkZXMsIHRoZSBmdW5jdGlvbiBhbHNvIHJlc2V0cyB0aGUgc3RhdGUgb2YgdGhlIHJlbmRlcmVyIGFuZCBzY2VuZSB0byBpdHMgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogSWYgbm90IHN0YXRlIG9iamVjdCBpcyBwcm92aWRlZCwgdGhlIGZ1bmN0aW9uIGNyZWF0ZXMgb25lLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG4gKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhdGU9e31dIC0gVGhlIHN0YXRlLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgc3RhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldFJlbmRlcmVyQW5kU2NlbmVTdGF0ZSggcmVuZGVyZXIsIHNjZW5lLCBzdGF0ZSApIHtcblxuXHRzdGF0ZSA9IHJlc2V0UmVuZGVyZXJTdGF0ZSggcmVuZGVyZXIsIHN0YXRlICk7XG5cdHN0YXRlID0gcmVzZXRTY2VuZVN0YXRlKCBzY2VuZSwgc3RhdGUgKTtcblxuXHRyZXR1cm4gc3RhdGU7XG5cbn1cblxuLyoqXG4gKiBSZXN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGdpdmVuIHJlbmRlcmVyIGFuZCBzY2VuZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZSBvYmplY3QuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cbiAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIC0gVGhlIHN0YXRlIHRvIHJlc3RvcmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlUmVuZGVyZXJBbmRTY2VuZVN0YXRlKCByZW5kZXJlciwgc2NlbmUsIHN0YXRlICkge1xuXG5cdHJlc3RvcmVSZW5kZXJlclN0YXRlKCByZW5kZXJlciwgc3RhdGUgKTtcblx0cmVzdG9yZVNjZW5lU3RhdGUoIHNjZW5lLCBzdGF0ZSApO1xuXG59XG4iLCJpbXBvcnQgU2hhZG93QmFzZU5vZGUsIHsgc2hhZG93UG9zaXRpb25Xb3JsZCB9IGZyb20gJy4vU2hhZG93QmFzZU5vZGUuanMnO1xuaW1wb3J0IHsgZmxvYXQsIHZlYzIsIHZlYzMsIHZlYzQsIElmLCBpbnQsIEZuLCBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgcmVmZXJlbmNlIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1JlZmVyZW5jZU5vZGUuanMnO1xuaW1wb3J0IHsgdGV4dHVyZSB9IGZyb20gJy4uL2FjY2Vzc29ycy9UZXh0dXJlTm9kZS5qcyc7XG5pbXBvcnQgeyBwb3NpdGlvbldvcmxkIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1Bvc2l0aW9uLmpzJztcbmltcG9ydCB7IHRyYW5zZm9ybWVkTm9ybWFsV29ybGQgfSBmcm9tICcuLi9hY2Nlc3NvcnMvTm9ybWFsLmpzJztcbmltcG9ydCB7IG1peCwgZnJhY3QsIHN0ZXAsIG1heCwgY2xhbXAsIHNxcnQgfSBmcm9tICcuLi9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IGFkZCwgc3ViIH0gZnJvbSAnLi4vbWF0aC9PcGVyYXRvck5vZGUuanMnO1xuaW1wb3J0IHsgRGVwdGhUZXh0dXJlIH0gZnJvbSAnLi4vLi4vdGV4dHVyZXMvRGVwdGhUZXh0dXJlLmpzJztcbmltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vbWF0ZXJpYWxzL25vZGVzL05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgUXVhZE1lc2ggZnJvbSAnLi4vLi4vcmVuZGVyZXJzL2NvbW1vbi9RdWFkTWVzaC5qcyc7XG5pbXBvcnQgeyBMb29wIH0gZnJvbSAnLi4vdXRpbHMvTG9vcE5vZGUuanMnO1xuaW1wb3J0IHsgc2NyZWVuQ29vcmRpbmF0ZSB9IGZyb20gJy4uL2Rpc3BsYXkvU2NyZWVuTm9kZS5qcyc7XG5pbXBvcnQgeyBIYWxmRmxvYXRUeXBlLCBMZXNzQ29tcGFyZSwgUkdGb3JtYXQsIFZTTVNoYWRvd01hcCwgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyByZW5kZXJHcm91cCB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybUdyb3VwTm9kZS5qcyc7XG5pbXBvcnQgeyB2aWV3WlRvTG9nYXJpdGhtaWNEZXB0aCB9IGZyb20gJy4uL2Rpc3BsYXkvVmlld3BvcnREZXB0aE5vZGUuanMnO1xuaW1wb3J0IHsgb2JqZWN0UG9zaXRpb24gfSBmcm9tICcuLi9hY2Nlc3NvcnMvT2JqZWN0M0ROb2RlLmpzJztcbmltcG9ydCB7IGxpZ2h0U2hhZG93TWF0cml4IH0gZnJvbSAnLi4vYWNjZXNzb3JzL0xpZ2h0cy5qcyc7XG5pbXBvcnQgeyByZXNldFJlbmRlcmVyQW5kU2NlbmVTdGF0ZSwgcmVzdG9yZVJlbmRlcmVyQW5kU2NlbmVTdGF0ZSB9IGZyb20gJy4uLy4uL3JlbmRlcmVycy9jb21tb24vUmVuZGVyZXJVdGlscy5qcyc7XG5pbXBvcnQgeyBnZXREYXRhRnJvbU9iamVjdCB9IGZyb20gJy4uL2NvcmUvTm9kZVV0aWxzLmpzJztcblxuY29uc3Qgc2hhZG93TWF0ZXJpYWxMaWIgPSAvKkBfX1BVUkVfXyovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCBsaW5lYXJEaXN0YW5jZSA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBwb3NpdGlvbiwgY2FtZXJhTmVhciwgY2FtZXJhRmFyIF0gKSA9PiB7XG5cblx0bGV0IGRpc3QgPSBwb3NpdGlvbldvcmxkLnN1YiggcG9zaXRpb24gKS5sZW5ndGgoKTtcblx0ZGlzdCA9IGRpc3Quc3ViKCBjYW1lcmFOZWFyICkuZGl2KCBjYW1lcmFGYXIuc3ViKCBjYW1lcmFOZWFyICkgKTtcblx0ZGlzdCA9IGRpc3Quc2F0dXJhdGUoKTsgLy8gY2xhbXAgdG8gWyAwLCAxIF1cblxuXHRyZXR1cm4gZGlzdDtcblxufSApO1xuXG5jb25zdCBsaW5lYXJTaGFkb3dEaXN0YW5jZSA9ICggbGlnaHQgKSA9PiB7XG5cblx0Y29uc3QgY2FtZXJhID0gbGlnaHQuc2hhZG93LmNhbWVyYTtcblxuXHRjb25zdCBuZWFyRGlzdGFuY2UgPSByZWZlcmVuY2UoICduZWFyJywgJ2Zsb2F0JywgY2FtZXJhICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cdGNvbnN0IGZhckRpc3RhbmNlID0gcmVmZXJlbmNlKCAnZmFyJywgJ2Zsb2F0JywgY2FtZXJhICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cblx0Y29uc3QgcmVmZXJlbmNlUG9zaXRpb24gPSBvYmplY3RQb3NpdGlvbiggbGlnaHQgKTtcblxuXHRyZXR1cm4gbGluZWFyRGlzdGFuY2UoIHJlZmVyZW5jZVBvc2l0aW9uLCBuZWFyRGlzdGFuY2UsIGZhckRpc3RhbmNlICk7XG5cbn07XG5cbmNvbnN0IGdldFNoYWRvd01hdGVyaWFsID0gKCBsaWdodCApID0+IHtcblxuXHRsZXQgbWF0ZXJpYWwgPSBzaGFkb3dNYXRlcmlhbExpYi5nZXQoIGxpZ2h0ICk7XG5cblx0aWYgKCBtYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0Y29uc3QgZGVwdGhOb2RlID0gbGlnaHQuaXNQb2ludExpZ2h0ID8gbGluZWFyU2hhZG93RGlzdGFuY2UoIGxpZ2h0ICkgOiBudWxsO1xuXG5cdFx0bWF0ZXJpYWwgPSBuZXcgTm9kZU1hdGVyaWFsKCk7XG5cdFx0bWF0ZXJpYWwuY29sb3JOb2RlID0gdmVjNCggMCwgMCwgMCwgMSApO1xuXHRcdG1hdGVyaWFsLmRlcHRoTm9kZSA9IGRlcHRoTm9kZTtcblx0XHRtYXRlcmlhbC5pc1NoYWRvd1Bhc3NNYXRlcmlhbCA9IHRydWU7IC8vIFVzZSB0byBhdm9pZCBvdGhlciBvdmVycmlkZU1hdGVyaWFsIG92ZXJyaWRlIG1hdGVyaWFsLmNvbG9yTm9kZSB1bmludGVudGlvbmFsbHkgd2hlbiB1c2luZyBtYXRlcmlhbC5zaGFkb3dOb2RlXG5cdFx0bWF0ZXJpYWwubmFtZSA9ICdTaGFkb3dNYXRlcmlhbCc7XG5cdFx0bWF0ZXJpYWwuZm9nID0gZmFsc2U7XG5cblx0XHRzaGFkb3dNYXRlcmlhbExpYi5zZXQoIGxpZ2h0LCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXHRyZXR1cm4gbWF0ZXJpYWw7XG5cbn07XG5cbi8qKlxuICogQSBzaGFkb3cgZmlsdGVyaW5nIGZ1bmN0aW9uIHBlcmZvcm1pbmcgYmFzaWMgZmlsdGVyaW5nLiBUaGlzIGlzIGluIGZhY3QgYW4gdW5maWx0ZXJlZCB2ZXJzaW9uIG9mIHRoZSBzaGFkb3cgbWFwXG4gKiB3aXRoIGEgYmluYXJ5IGBbMCwxXWAgcmVzdWx0LlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dHMgLSBUaGUgaW5wdXQgcGFyYW1ldGVyIG9iamVjdC5cbiAqIEBwYXJhbSB7RGVwdGhUZXh0dXJlfSBpbnB1dHMuZGVwdGhUZXh0dXJlIC0gQSByZWZlcmVuY2UgdG8gdGhlIHNoYWRvdyBtYXAncyB0ZXh0dXJlIGRhdGEuXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IGlucHV0cy5zaGFkb3dDb29yZCAtIFRoZSBzaGFkb3cgY29vcmRpbmF0ZXMuXG4gKiBAcmV0dXJuIHtOb2RlPGZsb2F0Pn0gVGhlIGZpbHRlcmluZyByZXN1bHQuXG4gKi9cbmV4cG9ydCBjb25zdCBCYXNpY1NoYWRvd0ZpbHRlciA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBkZXB0aFRleHR1cmUsIHNoYWRvd0Nvb3JkIH0gKSA9PiB7XG5cblx0cmV0dXJuIHRleHR1cmUoIGRlcHRoVGV4dHVyZSwgc2hhZG93Q29vcmQueHkgKS5jb21wYXJlKCBzaGFkb3dDb29yZC56ICk7XG5cbn0gKTtcblxuLyoqXG4gKiBBIHNoYWRvdyBmaWx0ZXJpbmcgZnVuY3Rpb24gcGVyZm9ybWluZyBQQ0YgZmlsdGVyaW5nLlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dHMgLSBUaGUgaW5wdXQgcGFyYW1ldGVyIG9iamVjdC5cbiAqIEBwYXJhbSB7RGVwdGhUZXh0dXJlfSBpbnB1dHMuZGVwdGhUZXh0dXJlIC0gQSByZWZlcmVuY2UgdG8gdGhlIHNoYWRvdyBtYXAncyB0ZXh0dXJlIGRhdGEuXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IGlucHV0cy5zaGFkb3dDb29yZCAtIFRoZSBzaGFkb3cgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge0xpZ2h0U2hhZG93fSBpbnB1dHMuc2hhZG93IC0gVGhlIGxpZ2h0IHNoYWRvdy5cbiAqIEByZXR1cm4ge05vZGU8ZmxvYXQ+fSBUaGUgZmlsdGVyaW5nIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGNvbnN0IFBDRlNoYWRvd0ZpbHRlciA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBkZXB0aFRleHR1cmUsIHNoYWRvd0Nvb3JkLCBzaGFkb3cgfSApID0+IHtcblxuXHRjb25zdCBkZXB0aENvbXBhcmUgPSAoIHV2LCBjb21wYXJlICkgPT4gdGV4dHVyZSggZGVwdGhUZXh0dXJlLCB1diApLmNvbXBhcmUoIGNvbXBhcmUgKTtcblxuXHRjb25zdCBtYXBTaXplID0gcmVmZXJlbmNlKCAnbWFwU2l6ZScsICd2ZWMyJywgc2hhZG93ICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cdGNvbnN0IHJhZGl1cyA9IHJlZmVyZW5jZSggJ3JhZGl1cycsICdmbG9hdCcsIHNoYWRvdyApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXG5cdGNvbnN0IHRleGVsU2l6ZSA9IHZlYzIoIDEgKS5kaXYoIG1hcFNpemUgKTtcblx0Y29uc3QgZHgwID0gdGV4ZWxTaXplLngubmVnYXRlKCkubXVsKCByYWRpdXMgKTtcblx0Y29uc3QgZHkwID0gdGV4ZWxTaXplLnkubmVnYXRlKCkubXVsKCByYWRpdXMgKTtcblx0Y29uc3QgZHgxID0gdGV4ZWxTaXplLngubXVsKCByYWRpdXMgKTtcblx0Y29uc3QgZHkxID0gdGV4ZWxTaXplLnkubXVsKCByYWRpdXMgKTtcblx0Y29uc3QgZHgyID0gZHgwLmRpdiggMiApO1xuXHRjb25zdCBkeTIgPSBkeTAuZGl2KCAyICk7XG5cdGNvbnN0IGR4MyA9IGR4MS5kaXYoIDIgKTtcblx0Y29uc3QgZHkzID0gZHkxLmRpdiggMiApO1xuXG5cdHJldHVybiBhZGQoXG5cdFx0ZGVwdGhDb21wYXJlKCBzaGFkb3dDb29yZC54eS5hZGQoIHZlYzIoIGR4MCwgZHkwICkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdGRlcHRoQ29tcGFyZSggc2hhZG93Q29vcmQueHkuYWRkKCB2ZWMyKCAwLCBkeTAgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0ZGVwdGhDb21wYXJlKCBzaGFkb3dDb29yZC54eS5hZGQoIHZlYzIoIGR4MSwgZHkwICkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdGRlcHRoQ29tcGFyZSggc2hhZG93Q29vcmQueHkuYWRkKCB2ZWMyKCBkeDIsIGR5MiApICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRkZXB0aENvbXBhcmUoIHNoYWRvd0Nvb3JkLnh5LmFkZCggdmVjMiggMCwgZHkyICkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdGRlcHRoQ29tcGFyZSggc2hhZG93Q29vcmQueHkuYWRkKCB2ZWMyKCBkeDMsIGR5MiApICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRkZXB0aENvbXBhcmUoIHNoYWRvd0Nvb3JkLnh5LmFkZCggdmVjMiggZHgwLCAwICkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdGRlcHRoQ29tcGFyZSggc2hhZG93Q29vcmQueHkuYWRkKCB2ZWMyKCBkeDIsIDAgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0ZGVwdGhDb21wYXJlKCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApLFxuXHRcdGRlcHRoQ29tcGFyZSggc2hhZG93Q29vcmQueHkuYWRkKCB2ZWMyKCBkeDMsIDAgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0ZGVwdGhDb21wYXJlKCBzaGFkb3dDb29yZC54eS5hZGQoIHZlYzIoIGR4MSwgMCApICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRkZXB0aENvbXBhcmUoIHNoYWRvd0Nvb3JkLnh5LmFkZCggdmVjMiggZHgyLCBkeTMgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0ZGVwdGhDb21wYXJlKCBzaGFkb3dDb29yZC54eS5hZGQoIHZlYzIoIDAsIGR5MyApICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRkZXB0aENvbXBhcmUoIHNoYWRvd0Nvb3JkLnh5LmFkZCggdmVjMiggZHgzLCBkeTMgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0ZGVwdGhDb21wYXJlKCBzaGFkb3dDb29yZC54eS5hZGQoIHZlYzIoIGR4MCwgZHkxICkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdGRlcHRoQ29tcGFyZSggc2hhZG93Q29vcmQueHkuYWRkKCB2ZWMyKCAwLCBkeTEgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0ZGVwdGhDb21wYXJlKCBzaGFkb3dDb29yZC54eS5hZGQoIHZlYzIoIGR4MSwgZHkxICkgKSwgc2hhZG93Q29vcmQueiApXG5cdCkubXVsKCAxIC8gMTcgKTtcblxufSApO1xuXG4vKipcbiAqIEEgc2hhZG93IGZpbHRlcmluZyBmdW5jdGlvbiBwZXJmb3JtaW5nIFBDRiBzb2Z0IGZpbHRlcmluZy5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRzIC0gVGhlIGlucHV0IHBhcmFtZXRlciBvYmplY3QuXG4gKiBAcGFyYW0ge0RlcHRoVGV4dHVyZX0gaW5wdXRzLmRlcHRoVGV4dHVyZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBzaGFkb3cgbWFwJ3MgdGV4dHVyZSBkYXRhLlxuICogQHBhcmFtIHtOb2RlPHZlYzM+fSBpbnB1dHMuc2hhZG93Q29vcmQgLSBUaGUgc2hhZG93IGNvb3JkaW5hdGVzLlxuICogQHBhcmFtIHtMaWdodFNoYWRvd30gaW5wdXRzLnNoYWRvdyAtIFRoZSBsaWdodCBzaGFkb3cuXG4gKiBAcmV0dXJuIHtOb2RlPGZsb2F0Pn0gVGhlIGZpbHRlcmluZyByZXN1bHQuXG4gKi9cbmV4cG9ydCBjb25zdCBQQ0ZTb2Z0U2hhZG93RmlsdGVyID0gLypAX19QVVJFX18qLyBGbiggKCB7IGRlcHRoVGV4dHVyZSwgc2hhZG93Q29vcmQsIHNoYWRvdyB9ICkgPT4ge1xuXG5cdGNvbnN0IGRlcHRoQ29tcGFyZSA9ICggdXYsIGNvbXBhcmUgKSA9PiB0ZXh0dXJlKCBkZXB0aFRleHR1cmUsIHV2ICkuY29tcGFyZSggY29tcGFyZSApO1xuXG5cdGNvbnN0IG1hcFNpemUgPSByZWZlcmVuY2UoICdtYXBTaXplJywgJ3ZlYzInLCBzaGFkb3cgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblxuXHRjb25zdCB0ZXhlbFNpemUgPSB2ZWMyKCAxICkuZGl2KCBtYXBTaXplICk7XG5cdGNvbnN0IGR4ID0gdGV4ZWxTaXplLng7XG5cdGNvbnN0IGR5ID0gdGV4ZWxTaXplLnk7XG5cblx0Y29uc3QgdXYgPSBzaGFkb3dDb29yZC54eTtcblx0Y29uc3QgZiA9IGZyYWN0KCB1di5tdWwoIG1hcFNpemUgKS5hZGQoIDAuNSApICk7XG5cdHV2LnN1YkFzc2lnbiggZi5tdWwoIHRleGVsU2l6ZSApICk7XG5cblx0cmV0dXJuIGFkZChcblx0XHRkZXB0aENvbXBhcmUoIHV2LCBzaGFkb3dDb29yZC56ICksXG5cdFx0ZGVwdGhDb21wYXJlKCB1di5hZGQoIHZlYzIoIGR4LCAwICkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdGRlcHRoQ29tcGFyZSggdXYuYWRkKCB2ZWMyKCAwLCBkeSApICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRkZXB0aENvbXBhcmUoIHV2LmFkZCggdGV4ZWxTaXplICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRtaXgoXG5cdFx0XHRkZXB0aENvbXBhcmUoIHV2LmFkZCggdmVjMiggZHgubmVnYXRlKCksIDAgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRkZXB0aENvbXBhcmUoIHV2LmFkZCggdmVjMiggZHgubXVsKCAyICksIDAgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRmLnhcblx0XHQpLFxuXHRcdG1peChcblx0XHRcdGRlcHRoQ29tcGFyZSggdXYuYWRkKCB2ZWMyKCBkeC5uZWdhdGUoKSwgZHkgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRkZXB0aENvbXBhcmUoIHV2LmFkZCggdmVjMiggZHgubXVsKCAyICksIGR5ICkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0Zi54XG5cdFx0KSxcblx0XHRtaXgoXG5cdFx0XHRkZXB0aENvbXBhcmUoIHV2LmFkZCggdmVjMiggMCwgZHkubmVnYXRlKCkgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRkZXB0aENvbXBhcmUoIHV2LmFkZCggdmVjMiggMCwgZHkubXVsKCAyICkgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRmLnlcblx0XHQpLFxuXHRcdG1peChcblx0XHRcdGRlcHRoQ29tcGFyZSggdXYuYWRkKCB2ZWMyKCBkeCwgZHkubmVnYXRlKCkgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRkZXB0aENvbXBhcmUoIHV2LmFkZCggdmVjMiggZHgsIGR5Lm11bCggMiApICkgKSwgc2hhZG93Q29vcmQueiApLFxuXHRcdFx0Zi55XG5cdFx0KSxcblx0XHRtaXgoXG5cdFx0XHRtaXgoXG5cdFx0XHRcdGRlcHRoQ29tcGFyZSggdXYuYWRkKCB2ZWMyKCBkeC5uZWdhdGUoKSwgZHkubmVnYXRlKCkgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRcdGRlcHRoQ29tcGFyZSggdXYuYWRkKCB2ZWMyKCBkeC5tdWwoIDIgKSwgZHkubmVnYXRlKCkgKSApLCBzaGFkb3dDb29yZC56ICksXG5cdFx0XHRcdGYueFxuXHRcdFx0KSxcblx0XHRcdG1peChcblx0XHRcdFx0ZGVwdGhDb21wYXJlKCB1di5hZGQoIHZlYzIoIGR4Lm5lZ2F0ZSgpLCBkeS5tdWwoIDIgKSApICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0ZGVwdGhDb21wYXJlKCB1di5hZGQoIHZlYzIoIGR4Lm11bCggMiApLCBkeS5tdWwoIDIgKSApICksIHNoYWRvd0Nvb3JkLnogKSxcblx0XHRcdFx0Zi54XG5cdFx0XHQpLFxuXHRcdFx0Zi55XG5cdFx0KVxuXHQpLm11bCggMSAvIDkgKTtcblxufSApO1xuXG4vKipcbiAqIEEgc2hhZG93IGZpbHRlcmluZyBmdW5jdGlvbiBwZXJmb3JtaW5nIFZTTSBmaWx0ZXJpbmcuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0cyAtIFRoZSBpbnB1dCBwYXJhbWV0ZXIgb2JqZWN0LlxuICogQHBhcmFtIHtEZXB0aFRleHR1cmV9IGlucHV0cy5kZXB0aFRleHR1cmUgLSBBIHJlZmVyZW5jZSB0byB0aGUgc2hhZG93IG1hcCdzIHRleHR1cmUgZGF0YS5cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gaW5wdXRzLnNoYWRvd0Nvb3JkIC0gVGhlIHNoYWRvdyBjb29yZGluYXRlcy5cbiAqIEByZXR1cm4ge05vZGU8ZmxvYXQ+fSBUaGUgZmlsdGVyaW5nIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGNvbnN0IFZTTVNoYWRvd0ZpbHRlciA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBkZXB0aFRleHR1cmUsIHNoYWRvd0Nvb3JkIH0gKSA9PiB7XG5cblx0Y29uc3Qgb2NjbHVzaW9uID0gZmxvYXQoIDEgKS50b1ZhcigpO1xuXG5cdGNvbnN0IGRpc3RyaWJ1dGlvbiA9IHRleHR1cmUoIGRlcHRoVGV4dHVyZSApLnNhbXBsZSggc2hhZG93Q29vcmQueHkgKS5yZztcblxuXHRjb25zdCBoYXJkU2hhZG93ID0gc3RlcCggc2hhZG93Q29vcmQueiwgZGlzdHJpYnV0aW9uLnggKTtcblxuXHRJZiggaGFyZFNoYWRvdy5ub3RFcXVhbCggZmxvYXQoIDEuMCApICksICgpID0+IHtcblxuXHRcdGNvbnN0IGRpc3RhbmNlID0gc2hhZG93Q29vcmQuei5zdWIoIGRpc3RyaWJ1dGlvbi54ICk7XG5cdFx0Y29uc3QgdmFyaWFuY2UgPSBtYXgoIDAsIGRpc3RyaWJ1dGlvbi55Lm11bCggZGlzdHJpYnV0aW9uLnkgKSApO1xuXHRcdGxldCBzb2Z0bmVzc1Byb2JhYmlsaXR5ID0gdmFyaWFuY2UuZGl2KCB2YXJpYW5jZS5hZGQoIGRpc3RhbmNlLm11bCggZGlzdGFuY2UgKSApICk7IC8vIENoZWJleXNoZXZzIGluZXF1YWxpdHlcblx0XHRzb2Z0bmVzc1Byb2JhYmlsaXR5ID0gY2xhbXAoIHN1Yiggc29mdG5lc3NQcm9iYWJpbGl0eSwgMC4zICkuZGl2KCAwLjk1IC0gMC4zICkgKTtcblx0XHRvY2NsdXNpb24uYXNzaWduKCBjbGFtcCggbWF4KCBoYXJkU2hhZG93LCBzb2Z0bmVzc1Byb2JhYmlsaXR5ICkgKSApO1xuXG5cdH0gKTtcblxuXHRyZXR1cm4gb2NjbHVzaW9uO1xuXG59ICk7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgc2hhZGVyIGNvZGUgZm9yIHRoZSBmaXJzdCBWU00gcmVuZGVyIHBhc3MuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0cyAtIFRoZSBpbnB1dCBwYXJhbWV0ZXIgb2JqZWN0LlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gaW5wdXRzLnNhbXBsZXMgLSBUaGUgbnVtYmVyIG9mIHNhbXBsZXNcbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGlucHV0cy5yYWRpdXMgLSBUaGUgcmFkaXVzLlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gaW5wdXRzLnNpemUgLSBUaGUgc2l6ZS5cbiAqIEBwYXJhbSB7VGV4dHVyZU5vZGV9IGlucHV0cy5zaGFkb3dQYXNzIC0gQSByZWZlcmVuY2UgdG8gdGhlIHJlbmRlciB0YXJnZXQncyBkZXB0aCBkYXRhLlxuICogQHJldHVybiB7Tm9kZTx2ZWMyPn0gVGhlIFZTTSBvdXRwdXQuXG4gKi9cbmNvbnN0IFZTTVBhc3NWZXJ0aWNhbCA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBzYW1wbGVzLCByYWRpdXMsIHNpemUsIHNoYWRvd1Bhc3MgfSApID0+IHtcblxuXHRjb25zdCBtZWFuID0gZmxvYXQoIDAgKS50b1ZhcigpO1xuXHRjb25zdCBzcXVhcmVkTWVhbiA9IGZsb2F0KCAwICkudG9WYXIoKTtcblxuXHRjb25zdCB1dlN0cmlkZSA9IHNhbXBsZXMubGVzc1RoYW5FcXVhbCggZmxvYXQoIDEgKSApLnNlbGVjdCggZmxvYXQoIDAgKSwgZmxvYXQoIDIgKS5kaXYoIHNhbXBsZXMuc3ViKCAxICkgKSApO1xuXHRjb25zdCB1dlN0YXJ0ID0gc2FtcGxlcy5sZXNzVGhhbkVxdWFsKCBmbG9hdCggMSApICkuc2VsZWN0KCBmbG9hdCggMCApLCBmbG9hdCggLSAxICkgKTtcblxuXHRMb29wKCB7IHN0YXJ0OiBpbnQoIDAgKSwgZW5kOiBpbnQoIHNhbXBsZXMgKSwgdHlwZTogJ2ludCcsIGNvbmRpdGlvbjogJzwnIH0sICggeyBpIH0gKSA9PiB7XG5cblx0XHRjb25zdCB1dk9mZnNldCA9IHV2U3RhcnQuYWRkKCBmbG9hdCggaSApLm11bCggdXZTdHJpZGUgKSApO1xuXG5cdFx0Y29uc3QgZGVwdGggPSBzaGFkb3dQYXNzLnNhbXBsZSggYWRkKCBzY3JlZW5Db29yZGluYXRlLnh5LCB2ZWMyKCAwLCB1dk9mZnNldCApLm11bCggcmFkaXVzICkgKS5kaXYoIHNpemUgKSApLng7XG5cdFx0bWVhbi5hZGRBc3NpZ24oIGRlcHRoICk7XG5cdFx0c3F1YXJlZE1lYW4uYWRkQXNzaWduKCBkZXB0aC5tdWwoIGRlcHRoICkgKTtcblxuXHR9ICk7XG5cblx0bWVhbi5kaXZBc3NpZ24oIHNhbXBsZXMgKTtcblx0c3F1YXJlZE1lYW4uZGl2QXNzaWduKCBzYW1wbGVzICk7XG5cblx0Y29uc3Qgc3RkX2RldiA9IHNxcnQoIHNxdWFyZWRNZWFuLnN1YiggbWVhbi5tdWwoIG1lYW4gKSApICk7XG5cdHJldHVybiB2ZWMyKCBtZWFuLCBzdGRfZGV2ICk7XG5cbn0gKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBzaGFkZXIgY29kZSBmb3IgdGhlIHNlY29uZCBWU00gcmVuZGVyIHBhc3MuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0cyAtIFRoZSBpbnB1dCBwYXJhbWV0ZXIgb2JqZWN0LlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gaW5wdXRzLnNhbXBsZXMgLSBUaGUgbnVtYmVyIG9mIHNhbXBsZXNcbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGlucHV0cy5yYWRpdXMgLSBUaGUgcmFkaXVzLlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gaW5wdXRzLnNpemUgLSBUaGUgc2l6ZS5cbiAqIEBwYXJhbSB7VGV4dHVyZU5vZGV9IGlucHV0cy5zaGFkb3dQYXNzIC0gVGhlIHJlc3VsdCBvZiB0aGUgZmlyc3QgVlNNIHJlbmRlciBwYXNzLlxuICogQHJldHVybiB7Tm9kZTx2ZWMyPn0gVGhlIFZTTSBvdXRwdXQuXG4gKi9cbmNvbnN0IFZTTVBhc3NIb3Jpem9udGFsID0gLypAX19QVVJFX18qLyBGbiggKCB7IHNhbXBsZXMsIHJhZGl1cywgc2l6ZSwgc2hhZG93UGFzcyB9ICkgPT4ge1xuXG5cdGNvbnN0IG1lYW4gPSBmbG9hdCggMCApLnRvVmFyKCk7XG5cdGNvbnN0IHNxdWFyZWRNZWFuID0gZmxvYXQoIDAgKS50b1ZhcigpO1xuXG5cdGNvbnN0IHV2U3RyaWRlID0gc2FtcGxlcy5sZXNzVGhhbkVxdWFsKCBmbG9hdCggMSApICkuc2VsZWN0KCBmbG9hdCggMCApLCBmbG9hdCggMiApLmRpdiggc2FtcGxlcy5zdWIoIDEgKSApICk7XG5cdGNvbnN0IHV2U3RhcnQgPSBzYW1wbGVzLmxlc3NUaGFuRXF1YWwoIGZsb2F0KCAxICkgKS5zZWxlY3QoIGZsb2F0KCAwICksIGZsb2F0KCAtIDEgKSApO1xuXG5cdExvb3AoIHsgc3RhcnQ6IGludCggMCApLCBlbmQ6IGludCggc2FtcGxlcyApLCB0eXBlOiAnaW50JywgY29uZGl0aW9uOiAnPCcgfSwgKCB7IGkgfSApID0+IHtcblxuXHRcdGNvbnN0IHV2T2Zmc2V0ID0gdXZTdGFydC5hZGQoIGZsb2F0KCBpICkubXVsKCB1dlN0cmlkZSApICk7XG5cblx0XHRjb25zdCBkaXN0cmlidXRpb24gPSBzaGFkb3dQYXNzLnNhbXBsZSggYWRkKCBzY3JlZW5Db29yZGluYXRlLnh5LCB2ZWMyKCB1dk9mZnNldCwgMCApLm11bCggcmFkaXVzICkgKS5kaXYoIHNpemUgKSApO1xuXHRcdG1lYW4uYWRkQXNzaWduKCBkaXN0cmlidXRpb24ueCApO1xuXHRcdHNxdWFyZWRNZWFuLmFkZEFzc2lnbiggYWRkKCBkaXN0cmlidXRpb24ueS5tdWwoIGRpc3RyaWJ1dGlvbi55ICksIGRpc3RyaWJ1dGlvbi54Lm11bCggZGlzdHJpYnV0aW9uLnggKSApICk7XG5cblx0fSApO1xuXG5cdG1lYW4uZGl2QXNzaWduKCBzYW1wbGVzICk7XG5cdHNxdWFyZWRNZWFuLmRpdkFzc2lnbiggc2FtcGxlcyApO1xuXG5cdGNvbnN0IHN0ZF9kZXYgPSBzcXJ0KCBzcXVhcmVkTWVhbi5zdWIoIG1lYW4ubXVsKCBtZWFuICkgKSApO1xuXHRyZXR1cm4gdmVjMiggbWVhbiwgc3RkX2RldiApO1xuXG59ICk7XG5cbmNvbnN0IF9zaGFkb3dGaWx0ZXJMaWIgPSBbIEJhc2ljU2hhZG93RmlsdGVyLCBQQ0ZTaGFkb3dGaWx0ZXIsIFBDRlNvZnRTaGFkb3dGaWx0ZXIsIFZTTVNoYWRvd0ZpbHRlciBdO1xuXG4vL1xuXG5sZXQgX3JlbmRlcmVyU3RhdGU7XG5jb25zdCBfcXVhZE1lc2ggPSAvKkBfX1BVUkVfXyovIG5ldyBRdWFkTWVzaCgpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGRlZmF1bHQgc2hhZG93IGltcGxlbWVudGF0aW9uIGZvciBsaWdodGluZyBub2Rlcy5cbiAqXG4gKiBAYXVnbWVudHMgU2hhZG93QmFzZU5vZGVcbiAqL1xuY2xhc3MgU2hhZG93Tm9kZSBleHRlbmRzIFNoYWRvd0Jhc2VOb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1NoYWRvd05vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzaGFkb3cgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtMaWdodH0gbGlnaHQgLSBUaGUgc2hhZG93IGNhc3RpbmcgbGlnaHQuXG5cdCAqIEBwYXJhbSB7P0xpZ2h0U2hhZG93fSBbc2hhZG93PW51bGxdIC0gQW4gb3B0aW9uYWwgbGlnaHQgc2hhZG93LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpZ2h0LCBzaGFkb3cgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIGxpZ2h0ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlnaHQgc2hhZG93IHdoaWNoIGRlZmluZXMgdGhlIHByb3BlcnRpZXMgbGlnaHQnc1xuXHRcdCAqIHNoYWRvdy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/TGlnaHRTaGFkb3d9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2hhZG93ID0gc2hhZG93IHx8IGxpZ2h0LnNoYWRvdztcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBzaGFkb3cgbWFwIHdoaWNoIGlzIGEgcmVuZGVyIHRhcmdldC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/UmVuZGVyVGFyZ2V0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnNoYWRvd01hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBPbmx5IHJlbGV2YW50IGZvciBWU00gc2hhZG93cy4gUmVuZGVyIHRhcmdldCBmb3IgdGhlXG5cdFx0ICogZmlyc3QgVlNNIHJlbmRlciBwYXNzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9SZW5kZXJUYXJnZXR9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudnNtU2hhZG93TWFwVmVydGljYWwgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogT25seSByZWxldmFudCBmb3IgVlNNIHNoYWRvd3MuIFJlbmRlciB0YXJnZXQgZm9yIHRoZVxuXHRcdCAqIHNlY29uZCBWU00gcmVuZGVyIHBhc3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1JlbmRlclRhcmdldH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy52c21TaGFkb3dNYXBIb3Jpem9udGFsID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIE9ubHkgcmVsZXZhbnQgZm9yIFZTTSBzaGFkb3dzLiBOb2RlIG1hdGVyaWFsIHdoaWNoXG5cdFx0ICogaXMgdXNlZCB0byByZW5kZXIgdGhlIGZpcnN0IFZTTSBwYXNzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlTWF0ZXJpYWx9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudnNtTWF0ZXJpYWxWZXJ0aWNhbCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBPbmx5IHJlbGV2YW50IGZvciBWU00gc2hhZG93cy4gTm9kZSBtYXRlcmlhbCB3aGljaFxuXHRcdCAqIGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBzZWNvbmQgVlNNIHBhc3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGVNYXRlcmlhbH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy52c21NYXRlcmlhbEhvcml6b250YWwgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIG91dHB1dCBub2RlIHdoaWNoIGRlZmluZXMgdGhlXG5cdFx0ICogZmluYWwgcmVzdWx0IG9mIHRoaXMgc2hhZG93IG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGV9XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fbm9kZSA9IG51bGw7XG5cblx0XHR0aGlzLl9jYW1lcmFGcmFtZUlkID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTaGFkb3dOb2RlID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgc2hhZG93IGZpbHRlcmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHBhcmFtIHtPYmplY3R9IGlucHV0cyAtIEEgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBkZWZpbmVzIHRoZSBzaGFkb3cgZmlsdGVyaW5nLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnB1dHMuZmlsdGVyRm4gLSBUaGlzIGZ1bmN0aW9uIGRlZmluZXMgdGhlIGZpbHRlcmluZyB0eXBlIG9mIHRoZSBzaGFkb3cgbWFwIGUuZy4gUENGLlxuXHQgKiBAcGFyYW0ge0RlcHRoVGV4dHVyZX0gaW5wdXRzLmRlcHRoVGV4dHVyZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBzaGFkb3cgbWFwJ3MgdGV4dHVyZSBkYXRhLlxuXHQgKiBAcGFyYW0ge05vZGU8dmVjMz59IGlucHV0cy5zaGFkb3dDb29yZCAtIFNoYWRvdyBjb29yZGluYXRlcyB3aGljaCBhcmUgdXNlZCB0byBzYW1wbGUgZnJvbSB0aGUgc2hhZG93IG1hcC5cblx0ICogQHBhcmFtIHtMaWdodFNoYWRvd30gaW5wdXRzLnNoYWRvdyAtIFRoZSBsaWdodCBzaGFkb3cuXG5cdCAqIEByZXR1cm4ge05vZGU8ZmxvYXQ+fSBUaGUgcmVzdWx0IG5vZGUgb2YgdGhlIHNoYWRvdyBmaWx0ZXJpbmcuXG5cdCAqL1xuXHRzZXR1cFNoYWRvd0ZpbHRlciggYnVpbGRlciwgeyBmaWx0ZXJGbiwgZGVwdGhUZXh0dXJlLCBzaGFkb3dDb29yZCwgc2hhZG93IH0gKSB7XG5cblx0XHRjb25zdCBmcnVzdHVtVGVzdCA9IHNoYWRvd0Nvb3JkLnguZ3JlYXRlclRoYW5FcXVhbCggMCApXG5cdFx0XHQuYW5kKCBzaGFkb3dDb29yZC54Lmxlc3NUaGFuRXF1YWwoIDEgKSApXG5cdFx0XHQuYW5kKCBzaGFkb3dDb29yZC55LmdyZWF0ZXJUaGFuRXF1YWwoIDAgKSApXG5cdFx0XHQuYW5kKCBzaGFkb3dDb29yZC55Lmxlc3NUaGFuRXF1YWwoIDEgKSApXG5cdFx0XHQuYW5kKCBzaGFkb3dDb29yZC56Lmxlc3NUaGFuRXF1YWwoIDEgKSApO1xuXG5cdFx0Y29uc3Qgc2hhZG93Tm9kZSA9IGZpbHRlckZuKCB7IGRlcHRoVGV4dHVyZSwgc2hhZG93Q29vcmQsIHNoYWRvdyB9ICk7XG5cblx0XHRyZXR1cm4gZnJ1c3R1bVRlc3Quc2VsZWN0KCBzaGFkb3dOb2RlLCBmbG9hdCggMSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIHNoYWRvdyBjb29yZGluYXRlcy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHBhcmFtIHtOb2RlPHZlYzM+fSBzaGFkb3dQb3NpdGlvbiAtIEEgbm9kZSByZXByZXNlbnRpbmcgdGhlIHNoYWRvdyBwb3NpdGlvbi5cblx0ICogQHJldHVybiB7Tm9kZTx2ZWMzPn0gVGhlIHNoYWRvdyBjb29yZGluYXRlcy5cblx0ICovXG5cdHNldHVwU2hhZG93Q29vcmQoIGJ1aWxkZXIsIHNoYWRvd1Bvc2l0aW9uICkge1xuXG5cdFx0Y29uc3QgeyBzaGFkb3cgfSA9IHRoaXM7XG5cdFx0Y29uc3QgeyByZW5kZXJlciB9ID0gYnVpbGRlcjtcblxuXHRcdGNvbnN0IGJpYXMgPSByZWZlcmVuY2UoICdiaWFzJywgJ2Zsb2F0Jywgc2hhZG93ICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cblx0XHRsZXQgc2hhZG93Q29vcmQgPSBzaGFkb3dQb3NpdGlvbjtcblx0XHRsZXQgY29vcmRaO1xuXG5cdFx0aWYgKCBzaGFkb3cuY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhIHx8IHJlbmRlcmVyLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgIT09IHRydWUgKSB7XG5cblx0XHRcdHNoYWRvd0Nvb3JkID0gc2hhZG93Q29vcmQueHl6LmRpdiggc2hhZG93Q29vcmQudyApO1xuXG5cdFx0XHRjb29yZFogPSBzaGFkb3dDb29yZC56O1xuXG5cdFx0XHRpZiAoIHJlbmRlcmVyLmNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRcdFx0Y29vcmRaID0gY29vcmRaLm11bCggMiApLnN1YiggMSApOyAvLyBXZWJHUFU6IENvbnZlcnNpb24gWyAwLCAxIF0gdG8gWyAtIDEsIDEgXVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCB3ID0gc2hhZG93Q29vcmQudztcblx0XHRcdHNoYWRvd0Nvb3JkID0gc2hhZG93Q29vcmQueHkuZGl2KCB3ICk7IC8vIDwtLSBPbmx5IGRpdmlkZSBYL1kgY29vcmRzIHNpbmNlIHdlIGRvbid0IG5lZWQgWlxuXG5cdFx0XHQvLyBUaGUgbm9ybWFsbHkgYXZhaWxhYmxlIFwiY2FtZXJhTmVhclwiIGFuZCBcImNhbWVyYUZhclwiIG5vZGVzIGNhbm5vdCBiZSB1c2VkIGhlcmUgYmVjYXVzZSB0aGV5IGRvIG5vdCBnZXRcblx0XHRcdC8vIHVwZGF0ZWQgdG8gdXNlIHRoZSBzaGFkb3cgY2FtZXJhLiBTbywgd2UgaGF2ZSB0byBkZWNsYXJlIG91ciBvd24gXCJsb2NhbFwiIG9uZXMgaGVyZS5cblx0XHRcdC8vIFRPRE86IEhvdyBkbyB3ZSBnZXQgdGhlIGNhbWVyYU5lYXIvY2FtZXJhRmFyIG5vZGVzIHRvIHVzZSB0aGUgc2hhZG93IGNhbWVyYSBzbyB3ZSBkb24ndCBoYXZlIHRvIGRlY2xhcmUgbG9jYWwgb25lcyBoZXJlP1xuXHRcdFx0Y29uc3QgY2FtZXJhTmVhckxvY2FsID0gcmVmZXJlbmNlKCAnbmVhcicsICdmbG9hdCcsIHNoYWRvdy5jYW1lcmEgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblx0XHRcdGNvbnN0IGNhbWVyYUZhckxvY2FsID0gcmVmZXJlbmNlKCAnZmFyJywgJ2Zsb2F0Jywgc2hhZG93LmNhbWVyYSApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXG5cdFx0XHRjb29yZFogPSB2aWV3WlRvTG9nYXJpdGhtaWNEZXB0aCggdy5uZWdhdGUoKSwgY2FtZXJhTmVhckxvY2FsLCBjYW1lcmFGYXJMb2NhbCApO1xuXG5cdFx0fVxuXG5cdFx0c2hhZG93Q29vcmQgPSB2ZWMzKFxuXHRcdFx0c2hhZG93Q29vcmQueCxcblx0XHRcdHNoYWRvd0Nvb3JkLnkub25lTWludXMoKSwgLy8gZm9sbG93IHdlYmdwdSBzdGFuZGFyZHNcblx0XHRcdGNvb3JkWi5hZGQoIGJpYXMgKVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gc2hhZG93Q29vcmQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzaGFkb3cgZmlsdGVyaW5nIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gc2hhZG93IHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlIC0gVGhlIHNoYWRvdyB0eXBlLlxuXHQgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGZpbHRlcmluZyBmdW5jdGlvbi5cblx0ICovXG5cdGdldFNoYWRvd0ZpbHRlckZuKCB0eXBlICkge1xuXG5cdFx0cmV0dXJuIF9zaGFkb3dGaWx0ZXJMaWJbIHR5cGUgXTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgc2hhZG93IG91dHB1dCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgc2hhZG93IG91dHB1dCBub2RlLlxuXHQgKi9cblx0c2V0dXBTaGFkb3coIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCB7IHJlbmRlcmVyIH0gPSBidWlsZGVyO1xuXG5cdFx0Y29uc3QgeyBsaWdodCwgc2hhZG93IH0gPSB0aGlzO1xuXG5cdFx0Y29uc3Qgc2hhZG93TWFwVHlwZSA9IHJlbmRlcmVyLnNoYWRvd01hcC50eXBlO1xuXG5cdFx0Y29uc3QgZGVwdGhUZXh0dXJlID0gbmV3IERlcHRoVGV4dHVyZSggc2hhZG93Lm1hcFNpemUud2lkdGgsIHNoYWRvdy5tYXBTaXplLmhlaWdodCApO1xuXHRcdGRlcHRoVGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gPSBMZXNzQ29tcGFyZTtcblxuXHRcdGNvbnN0IHNoYWRvd01hcCA9IGJ1aWxkZXIuY3JlYXRlUmVuZGVyVGFyZ2V0KCBzaGFkb3cubWFwU2l6ZS53aWR0aCwgc2hhZG93Lm1hcFNpemUuaGVpZ2h0ICk7XG5cdFx0c2hhZG93TWFwLmRlcHRoVGV4dHVyZSA9IGRlcHRoVGV4dHVyZTtcblxuXHRcdHNoYWRvdy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0Ly8gVlNNXG5cblx0XHRpZiAoIHNoYWRvd01hcFR5cGUgPT09IFZTTVNoYWRvd01hcCApIHtcblxuXHRcdFx0ZGVwdGhUZXh0dXJlLmNvbXBhcmVGdW5jdGlvbiA9IG51bGw7IC8vIFZTTSBkb2VzIG5vdCB1c2UgdGV4dHVyZVNhbXBsZUNvbXBhcmUoKS90ZXh0dXJlMkRDb21wYXJlKClcblxuXHRcdFx0dGhpcy52c21TaGFkb3dNYXBWZXJ0aWNhbCA9IGJ1aWxkZXIuY3JlYXRlUmVuZGVyVGFyZ2V0KCBzaGFkb3cubWFwU2l6ZS53aWR0aCwgc2hhZG93Lm1hcFNpemUuaGVpZ2h0LCB7IGZvcm1hdDogUkdGb3JtYXQsIHR5cGU6IEhhbGZGbG9hdFR5cGUgfSApO1xuXHRcdFx0dGhpcy52c21TaGFkb3dNYXBIb3Jpem9udGFsID0gYnVpbGRlci5jcmVhdGVSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXBTaXplLndpZHRoLCBzaGFkb3cubWFwU2l6ZS5oZWlnaHQsIHsgZm9ybWF0OiBSR0Zvcm1hdCwgdHlwZTogSGFsZkZsb2F0VHlwZSB9ICk7XG5cblx0XHRcdGNvbnN0IHNoYWRvd1Bhc3NWZXJ0aWNhbCA9IHRleHR1cmUoIGRlcHRoVGV4dHVyZSApO1xuXHRcdFx0Y29uc3Qgc2hhZG93UGFzc0hvcml6b250YWwgPSB0ZXh0dXJlKCB0aGlzLnZzbVNoYWRvd01hcFZlcnRpY2FsLnRleHR1cmUgKTtcblxuXHRcdFx0Y29uc3Qgc2FtcGxlcyA9IHJlZmVyZW5jZSggJ2JsdXJTYW1wbGVzJywgJ2Zsb2F0Jywgc2hhZG93ICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cdFx0XHRjb25zdCByYWRpdXMgPSByZWZlcmVuY2UoICdyYWRpdXMnLCAnZmxvYXQnLCBzaGFkb3cgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblx0XHRcdGNvbnN0IHNpemUgPSByZWZlcmVuY2UoICdtYXBTaXplJywgJ3ZlYzInLCBzaGFkb3cgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblxuXHRcdFx0bGV0IG1hdGVyaWFsID0gdGhpcy52c21NYXRlcmlhbFZlcnRpY2FsIHx8ICggdGhpcy52c21NYXRlcmlhbFZlcnRpY2FsID0gbmV3IE5vZGVNYXRlcmlhbCgpICk7XG5cdFx0XHRtYXRlcmlhbC5mcmFnbWVudE5vZGUgPSBWU01QYXNzVmVydGljYWwoIHsgc2FtcGxlcywgcmFkaXVzLCBzaXplLCBzaGFkb3dQYXNzOiBzaGFkb3dQYXNzVmVydGljYWwgfSApLmNvbnRleHQoIGJ1aWxkZXIuZ2V0U2hhcmVkQ29udGV4dCgpICk7XG5cdFx0XHRtYXRlcmlhbC5uYW1lID0gJ1ZTTVZlcnRpY2FsJztcblxuXHRcdFx0bWF0ZXJpYWwgPSB0aGlzLnZzbU1hdGVyaWFsSG9yaXpvbnRhbCB8fCAoIHRoaXMudnNtTWF0ZXJpYWxIb3Jpem9udGFsID0gbmV3IE5vZGVNYXRlcmlhbCgpICk7XG5cdFx0XHRtYXRlcmlhbC5mcmFnbWVudE5vZGUgPSBWU01QYXNzSG9yaXpvbnRhbCggeyBzYW1wbGVzLCByYWRpdXMsIHNpemUsIHNoYWRvd1Bhc3M6IHNoYWRvd1Bhc3NIb3Jpem9udGFsIH0gKS5jb250ZXh0KCBidWlsZGVyLmdldFNoYXJlZENvbnRleHQoKSApO1xuXHRcdFx0bWF0ZXJpYWwubmFtZSA9ICdWU01Ib3Jpem9udGFsJztcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjb25zdCBzaGFkb3dJbnRlbnNpdHkgPSByZWZlcmVuY2UoICdpbnRlbnNpdHknLCAnZmxvYXQnLCBzaGFkb3cgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblx0XHRjb25zdCBub3JtYWxCaWFzID0gcmVmZXJlbmNlKCAnbm9ybWFsQmlhcycsICdmbG9hdCcsIHNoYWRvdyApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXG5cdFx0Y29uc3Qgc2hhZG93UG9zaXRpb24gPSBsaWdodFNoYWRvd01hdHJpeCggbGlnaHQgKS5tdWwoIHNoYWRvd1Bvc2l0aW9uV29ybGQuYWRkKCB0cmFuc2Zvcm1lZE5vcm1hbFdvcmxkLm11bCggbm9ybWFsQmlhcyApICkgKTtcblx0XHRjb25zdCBzaGFkb3dDb29yZCA9IHRoaXMuc2V0dXBTaGFkb3dDb29yZCggYnVpbGRlciwgc2hhZG93UG9zaXRpb24gKTtcblxuXHRcdC8vXG5cblx0XHRjb25zdCBmaWx0ZXJGbiA9IHNoYWRvdy5maWx0ZXJOb2RlIHx8IHRoaXMuZ2V0U2hhZG93RmlsdGVyRm4oIHJlbmRlcmVyLnNoYWRvd01hcC50eXBlICkgfHwgbnVsbDtcblxuXHRcdGlmICggZmlsdGVyRm4gPT09IG51bGwgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdQVVJlbmRlcmVyOiBTaGFkb3cgbWFwIHR5cGUgbm90IHN1cHBvcnRlZCB5ZXQuJyApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2hhZG93RGVwdGhUZXh0dXJlID0gKCBzaGFkb3dNYXBUeXBlID09PSBWU01TaGFkb3dNYXAgKSA/IHRoaXMudnNtU2hhZG93TWFwSG9yaXpvbnRhbC50ZXh0dXJlIDogZGVwdGhUZXh0dXJlO1xuXG5cdFx0Y29uc3Qgc2hhZG93Tm9kZSA9IHRoaXMuc2V0dXBTaGFkb3dGaWx0ZXIoIGJ1aWxkZXIsIHsgZmlsdGVyRm4sIHNoYWRvd1RleHR1cmU6IHNoYWRvd01hcC50ZXh0dXJlLCBkZXB0aFRleHR1cmU6IHNoYWRvd0RlcHRoVGV4dHVyZSwgc2hhZG93Q29vcmQsIHNoYWRvdyB9ICk7XG5cblx0XHRjb25zdCBzaGFkb3dDb2xvciA9IHRleHR1cmUoIHNoYWRvd01hcC50ZXh0dXJlLCBzaGFkb3dDb29yZCApO1xuXHRcdGNvbnN0IHNoYWRvd091dHB1dCA9IG1peCggMSwgc2hhZG93Tm9kZS5yZ2IubWl4KCBzaGFkb3dDb2xvciwgMSApLCBzaGFkb3dJbnRlbnNpdHkubXVsKCBzaGFkb3dDb2xvci5hICkgKS50b1ZhcigpO1xuXG5cdFx0dGhpcy5zaGFkb3dNYXAgPSBzaGFkb3dNYXA7XG5cdFx0dGhpcy5zaGFkb3cubWFwID0gc2hhZG93TWFwO1xuXG5cdFx0cmV0dXJuIHNoYWRvd091dHB1dDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBpbXBsZW1lbnRhdGlvbiBwZXJmb3JtcyB0aGUgc2V0dXAgb2YgdGhlIG91dHB1dCBub2RlLiBBbiBvdXRwdXQgaXMgb25seVxuXHQgKiBwcm9kdWNlcyBpZiBzaGFkb3cgbWFwcGluZyBpcyBnbG9iYWxseSBlbmFibGVkIGluIHRoZSByZW5kZXJlci5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IG5vZGUgYnVpbGRlci5cblx0ICogQHJldHVybiB7U2hhZGVyQ2FsbE5vZGVJbnRlcm5hbH0gVGhlIG91dHB1dCBub2RlLlxuXHQgKi9cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRpZiAoIGJ1aWxkZXIucmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0cmV0dXJuIEZuKCAoKSA9PiB7XG5cblx0XHRcdGxldCBub2RlID0gdGhpcy5fbm9kZTtcblxuXHRcdFx0dGhpcy5zZXR1cFNoYWRvd1Bvc2l0aW9uKCBidWlsZGVyICk7XG5cblx0XHRcdGlmICggbm9kZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLl9ub2RlID0gbm9kZSA9IHRoaXMuc2V0dXBTaGFkb3coIGJ1aWxkZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1aWxkZXIubWF0ZXJpYWwuc2hhZG93Tm9kZSApIHsgLy8gQGRlcHJlY2F0ZWQsIHIxNzFcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ob2RlTWF0ZXJpYWw6IFwiLnNoYWRvd05vZGVcIiBpcyBkZXByZWNhdGVkLiBVc2UgXCIuY2FzdFNoYWRvd05vZGVcIiBpbnN0ZWFkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1aWxkZXIubWF0ZXJpYWwucmVjZWl2ZWRTaGFkb3dOb2RlICkge1xuXG5cdFx0XHRcdG5vZGUgPSBidWlsZGVyLm1hdGVyaWFsLnJlY2VpdmVkU2hhZG93Tm9kZSggbm9kZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBub2RlO1xuXG5cdFx0fSApKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXJzIHRoZSBzaGFkb3cuIFRoZSBsb2dpYyBvZiB0aGlzIGZ1bmN0aW9uIGNvdWxkIGJlIGluY2x1ZGVkXG5cdCAqIGludG8ge0BsaW5rIFNoYWRvd05vZGUjdXBkYXRlU2hhZG93fSBob3dldmVyIG1vcmUgc3BlY2lhbGl6ZWQgc2hhZG93XG5cdCAqIG5vZGVzIG1pZ2h0IHJlcXVpcmUgYSBjdXN0b20gc2hhZG93IG1hcCByZW5kZXJpbmcuIEJ5IGhhdmluZyBhXG5cdCAqIGRlZGljYXRlZCBtZXRob2QsIGl0J3MgZWFzaWVyIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCBiZWhhdmlvci5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlRnJhbWV9IGZyYW1lIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBmcmFtZS5cblx0ICovXG5cdHJlbmRlclNoYWRvdyggZnJhbWUgKSB7XG5cblx0XHRjb25zdCB7IHNoYWRvdywgc2hhZG93TWFwLCBsaWdodCB9ID0gdGhpcztcblx0XHRjb25zdCB7IHJlbmRlcmVyLCBzY2VuZSB9ID0gZnJhbWU7XG5cblx0XHRzaGFkb3cudXBkYXRlTWF0cmljZXMoIGxpZ2h0ICk7XG5cblx0XHRzaGFkb3dNYXAuc2V0U2l6ZSggc2hhZG93Lm1hcFNpemUud2lkdGgsIHNoYWRvdy5tYXBTaXplLmhlaWdodCApO1xuXG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgc2hhZG93LmNhbWVyYSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgc2hhZG93LlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlU2hhZG93KCBmcmFtZSApIHtcblxuXHRcdGNvbnN0IHsgc2hhZG93TWFwLCBsaWdodCwgc2hhZG93IH0gPSB0aGlzO1xuXHRcdGNvbnN0IHsgcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEgfSA9IGZyYW1lO1xuXG5cdFx0Y29uc3Qgc2hhZG93VHlwZSA9IHJlbmRlcmVyLnNoYWRvd01hcC50eXBlO1xuXG5cdFx0Y29uc3QgZGVwdGhWZXJzaW9uID0gc2hhZG93TWFwLmRlcHRoVGV4dHVyZS52ZXJzaW9uO1xuXHRcdHRoaXMuX2RlcHRoVmVyc2lvbkNhY2hlZCA9IGRlcHRoVmVyc2lvbjtcblxuXHRcdHNoYWRvdy5jYW1lcmEubGF5ZXJzLm1hc2sgPSBjYW1lcmEubGF5ZXJzLm1hc2s7XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyT2JqZWN0RnVuY3Rpb24gPSByZW5kZXJlci5nZXRSZW5kZXJPYmplY3RGdW5jdGlvbigpO1xuXG5cdFx0Y29uc3QgY3VycmVudE1SVCA9IHJlbmRlcmVyLmdldE1SVCgpO1xuXHRcdGNvbnN0IHVzZVZlbG9jaXR5ID0gY3VycmVudE1SVCA/IGN1cnJlbnRNUlQuaGFzKCAndmVsb2NpdHknICkgOiBmYWxzZTtcblxuXHRcdF9yZW5kZXJlclN0YXRlID0gcmVzZXRSZW5kZXJlckFuZFNjZW5lU3RhdGUoIHJlbmRlcmVyLCBzY2VuZSwgX3JlbmRlcmVyU3RhdGUgKTtcblxuXHRcdHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWwgPSBnZXRTaGFkb3dNYXRlcmlhbCggbGlnaHQgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlck9iamVjdEZ1bmN0aW9uKCAoIG9iamVjdCwgc2NlbmUsIF9jYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAsIC4uLnBhcmFtcyApID0+IHtcblxuXHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyA9PT0gdHJ1ZSB8fCAoIG9iamVjdC5yZWNlaXZlU2hhZG93ICYmIHNoYWRvd1R5cGUgPT09IFZTTVNoYWRvd01hcCApICkge1xuXG5cdFx0XHRcdGlmICggdXNlVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRnZXREYXRhRnJvbU9iamVjdCggb2JqZWN0ICkudXNlVmVsb2NpdHkgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvYmplY3Qub25CZWZvcmVTaGFkb3coIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93LmNhbWVyYSwgZ2VvbWV0cnksIHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdFx0cmVuZGVyZXIucmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBfY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwLCAuLi5wYXJhbXMgKTtcblxuXHRcdFx0XHRvYmplY3Qub25BZnRlclNoYWRvdyggcmVuZGVyZXIsIG9iamVjdCwgY2FtZXJhLCBzaGFkb3cuY2FtZXJhLCBnZW9tZXRyeSwgc2NlbmUub3ZlcnJpZGVNYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSApO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBzaGFkb3dNYXAgKTtcblxuXHRcdHRoaXMucmVuZGVyU2hhZG93KCBmcmFtZSApO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyT2JqZWN0RnVuY3Rpb24oIGN1cnJlbnRSZW5kZXJPYmplY3RGdW5jdGlvbiApO1xuXG5cdFx0Ly8gdnNtIGJsdXIgcGFzc1xuXG5cdFx0aWYgKCBsaWdodC5pc1BvaW50TGlnaHQgIT09IHRydWUgJiYgc2hhZG93VHlwZSA9PT0gVlNNU2hhZG93TWFwICkge1xuXG5cdFx0XHR0aGlzLnZzbVBhc3MoIHJlbmRlcmVyICk7XG5cblx0XHR9XG5cblx0XHRyZXN0b3JlUmVuZGVyZXJBbmRTY2VuZVN0YXRlKCByZW5kZXJlciwgc2NlbmUsIF9yZW5kZXJlclN0YXRlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGb3IgVlNNIGFkZGl0aW9uYWwgcmVuZGVyIHBhc3NlcyBhcmUgcmVxdWlyZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgcmVuZGVyZXIuXG5cdCAqL1xuXHR2c21QYXNzKCByZW5kZXJlciApIHtcblxuXHRcdGNvbnN0IHsgc2hhZG93IH0gPSB0aGlzO1xuXG5cdFx0dGhpcy52c21TaGFkb3dNYXBWZXJ0aWNhbC5zZXRTaXplKCBzaGFkb3cubWFwU2l6ZS53aWR0aCwgc2hhZG93Lm1hcFNpemUuaGVpZ2h0ICk7XG5cdFx0dGhpcy52c21TaGFkb3dNYXBIb3Jpem9udGFsLnNldFNpemUoIHNoYWRvdy5tYXBTaXplLndpZHRoLCBzaGFkb3cubWFwU2l6ZS5oZWlnaHQgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggdGhpcy52c21TaGFkb3dNYXBWZXJ0aWNhbCApO1xuXHRcdF9xdWFkTWVzaC5tYXRlcmlhbCA9IHRoaXMudnNtTWF0ZXJpYWxWZXJ0aWNhbDtcblx0XHRfcXVhZE1lc2gucmVuZGVyKCByZW5kZXJlciApO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLnZzbVNoYWRvd01hcEhvcml6b250YWwgKTtcblx0XHRfcXVhZE1lc2gubWF0ZXJpYWwgPSB0aGlzLnZzbU1hdGVyaWFsSG9yaXpvbnRhbDtcblx0XHRfcXVhZE1lc2gucmVuZGVyKCByZW5kZXJlciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgdGhlIGludGVybmFsIHJlc291cmNlcyBvZiB0aGlzIHNoYWRvdyBub2RlLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuc2hhZG93TWFwLmRpc3Bvc2UoKTtcblx0XHR0aGlzLnNoYWRvd01hcCA9IG51bGw7XG5cblx0XHRpZiAoIHRoaXMudnNtU2hhZG93TWFwVmVydGljYWwgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudnNtU2hhZG93TWFwVmVydGljYWwuZGlzcG9zZSgpO1xuXHRcdFx0dGhpcy52c21TaGFkb3dNYXBWZXJ0aWNhbCA9IG51bGw7XG5cblx0XHRcdHRoaXMudnNtTWF0ZXJpYWxWZXJ0aWNhbC5kaXNwb3NlKCk7XG5cdFx0XHR0aGlzLnZzbU1hdGVyaWFsVmVydGljYWwgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnZzbVNoYWRvd01hcEhvcml6b250YWwgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudnNtU2hhZG93TWFwSG9yaXpvbnRhbC5kaXNwb3NlKCk7XG5cdFx0XHR0aGlzLnZzbVNoYWRvd01hcEhvcml6b250YWwgPSBudWxsO1xuXG5cdFx0XHR0aGlzLnZzbU1hdGVyaWFsSG9yaXpvbnRhbC5kaXNwb3NlKCk7XG5cdFx0XHR0aGlzLnZzbU1hdGVyaWFsSG9yaXpvbnRhbCA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRzdXBlci5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgaW1wbGVtZW50YXRpb24gcGVyZm9ybXMgdGhlIHVwZGF0ZSBvZiB0aGUgc2hhZG93IG1hcCBpZiBuZWNlc3NhcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUZyYW1lfSBmcmFtZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IG5vZGUgZnJhbWUuXG5cdCAqL1xuXHR1cGRhdGVCZWZvcmUoIGZyYW1lICkge1xuXG5cdFx0Y29uc3QgeyBzaGFkb3cgfSA9IHRoaXM7XG5cblx0XHRsZXQgbmVlZHNVcGRhdGUgPSBzaGFkb3cubmVlZHNVcGRhdGUgfHwgc2hhZG93LmF1dG9VcGRhdGU7XG5cblx0XHRpZiAoIG5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX2NhbWVyYUZyYW1lSWRbIGZyYW1lLmNhbWVyYSBdID09PSBmcmFtZS5mcmFtZUlkICkge1xuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY2FtZXJhRnJhbWVJZFsgZnJhbWUuY2FtZXJhIF0gPSBmcmFtZS5mcmFtZUlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBuZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0dGhpcy51cGRhdGVTaGFkb3coIGZyYW1lICk7XG5cblx0XHRcdGlmICggdGhpcy5zaGFkb3dNYXAuZGVwdGhUZXh0dXJlLnZlcnNpb24gPT09IHRoaXMuX2RlcHRoVmVyc2lvbkNhY2hlZCApIHtcblxuXHRcdFx0XHRzaGFkb3cubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTaGFkb3dOb2RlO1xuXG4vKipcbiAqIFRTTCBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgYFNoYWRvd05vZGVgLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMaWdodH0gbGlnaHQgLSBUaGUgc2hhZG93IGNhc3RpbmcgbGlnaHQuXG4gKiBAcGFyYW0gez9MaWdodFNoYWRvd30gW3NoYWRvd10gLSBUaGUgbGlnaHQgc2hhZG93LlxuICogQHJldHVybiB7U2hhZG93Tm9kZX0gVGhlIGNyZWF0ZWQgc2hhZG93IG5vZGUuXG4gKi9cbmV4cG9ydCBjb25zdCBzaGFkb3cgPSAoIGxpZ2h0LCBzaGFkb3cgKSA9PiBub2RlT2JqZWN0KCBuZXcgU2hhZG93Tm9kZSggbGlnaHQsIHNoYWRvdyApICk7XG4iLCJpbXBvcnQgU2hhZG93Tm9kZSBmcm9tICcuL1NoYWRvd05vZGUuanMnO1xuaW1wb3J0IHsgdW5pZm9ybSB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybU5vZGUuanMnO1xuaW1wb3J0IHsgZmxvYXQsIHZlYzIsIElmLCBGbiwgbm9kZU9iamVjdCB9IGZyb20gJy4uL3RzbC9UU0xCYXNlLmpzJztcbmltcG9ydCB7IHJlZmVyZW5jZSB9IGZyb20gJy4uL2FjY2Vzc29ycy9SZWZlcmVuY2VOb2RlLmpzJztcbmltcG9ydCB7IHRleHR1cmUgfSBmcm9tICcuLi9hY2Nlc3NvcnMvVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgbWF4LCBhYnMsIHNpZ24gfSBmcm9tICcuLi9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IHN1YiwgZGl2IH0gZnJvbSAnLi4vbWF0aC9PcGVyYXRvck5vZGUuanMnO1xuaW1wb3J0IHsgcmVuZGVyR3JvdXAgfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Hcm91cE5vZGUuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3I0LmpzJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vbWF0aC9Db2xvci5qcyc7XG5pbXBvcnQgeyBCYXNpY1NoYWRvd01hcCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IF9jbGVhckNvbG9yID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTtcblxuLy8gY3ViZVRvVVYoKSBtYXBzIGEgM0QgZGlyZWN0aW9uIHZlY3RvciBzdWl0YWJsZSBmb3IgY3ViZSB0ZXh0dXJlIG1hcHBpbmcgdG8gYSAyRFxuLy8gdmVjdG9yIHN1aXRhYmxlIGZvciAyRCB0ZXh0dXJlIG1hcHBpbmcuIFRoaXMgY29kZSB1c2VzIHRoZSBmb2xsb3dpbmcgbGF5b3V0IGZvciB0aGVcbi8vIDJEIHRleHR1cmU6XG4vL1xuLy8geHpYWlxuLy8gIHkgWVxuLy9cbi8vIFkgLSBQb3NpdGl2ZSB5IGRpcmVjdGlvblxuLy8geSAtIE5lZ2F0aXZlIHkgZGlyZWN0aW9uXG4vLyBYIC0gUG9zaXRpdmUgeCBkaXJlY3Rpb25cbi8vIHggLSBOZWdhdGl2ZSB4IGRpcmVjdGlvblxuLy8gWiAtIFBvc2l0aXZlIHogZGlyZWN0aW9uXG4vLyB6IC0gTmVnYXRpdmUgeiBkaXJlY3Rpb25cbi8vXG4vLyBTb3VyY2UgYW5kIHRlc3QgYmVkOlxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vdHNjaHcvZGExMGM0M2M0NjdjZThhZmQwYzRcblxuZXhwb3J0IGNvbnN0IGN1YmVUb1VWID0gLypAX19QVVJFX18qLyBGbiggKCBbIHBvcywgdGV4ZWxTaXplWSBdICkgPT4ge1xuXG5cdGNvbnN0IHYgPSBwb3MudG9WYXIoKTtcblxuXHQvLyBOdW1iZXIgb2YgdGV4ZWxzIHRvIGF2b2lkIGF0IHRoZSBlZGdlIG9mIGVhY2ggc3F1YXJlXG5cblx0Y29uc3QgYWJzViA9IGFicyggdiApO1xuXG5cdC8vIEludGVyc2VjdCB1bml0IGN1YmVcblxuXHRjb25zdCBzY2FsZVRvQ3ViZSA9IGRpdiggMS4wLCBtYXgoIGFic1YueCwgbWF4KCBhYnNWLnksIGFic1YueiApICkgKTtcblx0YWJzVi5tdWxBc3NpZ24oIHNjYWxlVG9DdWJlICk7XG5cblx0Ly8gQXBwbHkgc2NhbGUgdG8gYXZvaWQgc2VhbXNcblxuXHQvLyB0d28gdGV4ZWxzIGxlc3MgcGVyIHNxdWFyZSAob25lIHRleGVsIHdpbGwgZG8gZm9yIE5FQVJFU1QpXG5cdHYubXVsQXNzaWduKCBzY2FsZVRvQ3ViZS5tdWwoIHRleGVsU2l6ZVkubXVsKCAyICkub25lTWludXMoKSApICk7XG5cblx0Ly8gVW53cmFwXG5cblx0Ly8gc3BhY2U6IC0xIC4uLiAxIHJhbmdlIGZvciBlYWNoIHNxdWFyZVxuXHQvL1xuXHQvLyAjWCMjXHRcdGRpbSAgICA6PSAoIDQgLCAyIClcblx0Ly8gICMgI1x0XHRjZW50ZXIgOj0gKCAxICwgMSApXG5cblx0Y29uc3QgcGxhbmFyID0gdmVjMiggdi54eSApLnRvVmFyKCk7XG5cblx0Y29uc3QgYWxtb3N0QVRleGVsID0gdGV4ZWxTaXplWS5tdWwoIDEuNSApO1xuXHRjb25zdCBhbG1vc3RPbmUgPSBhbG1vc3RBVGV4ZWwub25lTWludXMoKTtcblxuXHRJZiggYWJzVi56LmdyZWF0ZXJUaGFuRXF1YWwoIGFsbW9zdE9uZSApLCAoKSA9PiB7XG5cblx0XHRJZiggdi56LmdyZWF0ZXJUaGFuKCAwLjAgKSwgKCkgPT4ge1xuXG5cdFx0XHRwbGFuYXIueC5hc3NpZ24oIHN1YiggNC4wLCB2LnggKSApO1xuXG5cdFx0fSApO1xuXG5cdH0gKS5FbHNlSWYoIGFic1YueC5ncmVhdGVyVGhhbkVxdWFsKCBhbG1vc3RPbmUgKSwgKCkgPT4ge1xuXG5cdFx0Y29uc3Qgc2lnblggPSBzaWduKCB2LnggKTtcblx0XHRwbGFuYXIueC5hc3NpZ24oIHYuei5tdWwoIHNpZ25YICkuYWRkKCBzaWduWC5tdWwoIDIuMCApICkgKTtcblxuXHR9ICkuRWxzZUlmKCBhYnNWLnkuZ3JlYXRlclRoYW5FcXVhbCggYWxtb3N0T25lICksICgpID0+IHtcblxuXHRcdGNvbnN0IHNpZ25ZID0gc2lnbiggdi55ICk7XG5cdFx0cGxhbmFyLnguYXNzaWduKCB2LnguYWRkKCBzaWduWS5tdWwoIDIuMCApICkuYWRkKCAyLjAgKSApO1xuXHRcdHBsYW5hci55LmFzc2lnbiggdi56Lm11bCggc2lnblkgKS5zdWIoIDIuMCApICk7XG5cblx0fSApO1xuXG5cdC8vIFRyYW5zZm9ybSB0byBVViBzcGFjZVxuXG5cdC8vIHNjYWxlIDo9IDAuNSAvIGRpbVxuXHQvLyB0cmFuc2xhdGUgOj0gKCBjZW50ZXIgKyAwLjUgKSAvIGRpbVxuXHRyZXR1cm4gdmVjMiggMC4xMjUsIDAuMjUgKS5tdWwoIHBsYW5hciApLmFkZCggdmVjMiggMC4zNzUsIDAuNzUgKSApLmZsaXBZKCk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ2N1YmVUb1VWJyxcblx0dHlwZTogJ3ZlYzInLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwb3MnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICd0ZXhlbFNpemVZJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IEJhc2ljUG9pbnRTaGFkb3dGaWx0ZXIgPSAvKkBfX1BVUkVfXyovIEZuKCAoIHsgZGVwdGhUZXh0dXJlLCBiZDNELCBkcCwgdGV4ZWxTaXplIH0gKSA9PiB7XG5cblx0cmV0dXJuIHRleHR1cmUoIGRlcHRoVGV4dHVyZSwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICkgKS5jb21wYXJlKCBkcCApO1xuXG59ICk7XG5cbmV4cG9ydCBjb25zdCBQb2ludFNoYWRvd0ZpbHRlciA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBkZXB0aFRleHR1cmUsIGJkM0QsIGRwLCB0ZXhlbFNpemUsIHNoYWRvdyB9ICkgPT4ge1xuXG5cdGNvbnN0IHJhZGl1cyA9IHJlZmVyZW5jZSggJ3JhZGl1cycsICdmbG9hdCcsIHNoYWRvdyApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXHRjb25zdCBvZmZzZXQgPSB2ZWMyKCAtIDEuMCwgMS4wICkubXVsKCByYWRpdXMgKS5tdWwoIHRleGVsU2l6ZS55ICk7XG5cblx0cmV0dXJuIHRleHR1cmUoIGRlcHRoVGV4dHVyZSwgY3ViZVRvVVYoIGJkM0QuYWRkKCBvZmZzZXQueHl5ICksIHRleGVsU2l6ZS55ICkgKS5jb21wYXJlKCBkcCApXG5cdFx0LmFkZCggdGV4dHVyZSggZGVwdGhUZXh0dXJlLCBjdWJlVG9VViggYmQzRC5hZGQoIG9mZnNldC55eXkgKSwgdGV4ZWxTaXplLnkgKSApLmNvbXBhcmUoIGRwICkgKVxuXHRcdC5hZGQoIHRleHR1cmUoIGRlcHRoVGV4dHVyZSwgY3ViZVRvVVYoIGJkM0QuYWRkKCBvZmZzZXQueHl4ICksIHRleGVsU2l6ZS55ICkgKS5jb21wYXJlKCBkcCApIClcblx0XHQuYWRkKCB0ZXh0dXJlKCBkZXB0aFRleHR1cmUsIGN1YmVUb1VWKCBiZDNELmFkZCggb2Zmc2V0Lnl5eCApLCB0ZXhlbFNpemUueSApICkuY29tcGFyZSggZHAgKSApXG5cdFx0LmFkZCggdGV4dHVyZSggZGVwdGhUZXh0dXJlLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSApLmNvbXBhcmUoIGRwICkgKVxuXHRcdC5hZGQoIHRleHR1cmUoIGRlcHRoVGV4dHVyZSwgY3ViZVRvVVYoIGJkM0QuYWRkKCBvZmZzZXQueHh5ICksIHRleGVsU2l6ZS55ICkgKS5jb21wYXJlKCBkcCApIClcblx0XHQuYWRkKCB0ZXh0dXJlKCBkZXB0aFRleHR1cmUsIGN1YmVUb1VWKCBiZDNELmFkZCggb2Zmc2V0Lnl4eSApLCB0ZXhlbFNpemUueSApICkuY29tcGFyZSggZHAgKSApXG5cdFx0LmFkZCggdGV4dHVyZSggZGVwdGhUZXh0dXJlLCBjdWJlVG9VViggYmQzRC5hZGQoIG9mZnNldC54eHggKSwgdGV4ZWxTaXplLnkgKSApLmNvbXBhcmUoIGRwICkgKVxuXHRcdC5hZGQoIHRleHR1cmUoIGRlcHRoVGV4dHVyZSwgY3ViZVRvVVYoIGJkM0QuYWRkKCBvZmZzZXQueXh4ICksIHRleGVsU2l6ZS55ICkgKS5jb21wYXJlKCBkcCApIClcblx0XHQubXVsKCAxLjAgLyA5LjAgKTtcblxufSApO1xuXG5jb25zdCBwb2ludFNoYWRvd0ZpbHRlciA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBmaWx0ZXJGbiwgZGVwdGhUZXh0dXJlLCBzaGFkb3dDb29yZCwgc2hhZG93IH0gKSA9PiB7XG5cblx0Ly8gZm9yIHBvaW50IGxpZ2h0cywgdGhlIHVuaWZvcm0gQHZTaGFkb3dDb29yZCBpcyByZS1wdXJwb3NlZCB0byBob2xkXG5cdC8vIHRoZSB2ZWN0b3IgZnJvbSB0aGUgbGlnaHQgdG8gdGhlIHdvcmxkLXNwYWNlIHBvc2l0aW9uIG9mIHRoZSBmcmFnbWVudC5cblx0Y29uc3QgbGlnaHRUb1Bvc2l0aW9uID0gc2hhZG93Q29vcmQueHl6LnRvVmFyKCk7XG5cdGNvbnN0IGxpZ2h0VG9Qb3NpdGlvbkxlbmd0aCA9IGxpZ2h0VG9Qb3NpdGlvbi5sZW5ndGgoKTtcblxuXHRjb25zdCBjYW1lcmFOZWFyTG9jYWwgPSB1bmlmb3JtKCAnZmxvYXQnICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICkub25SZW5kZXJVcGRhdGUoICgpID0+IHNoYWRvdy5jYW1lcmEubmVhciApO1xuXHRjb25zdCBjYW1lcmFGYXJMb2NhbCA9IHVuaWZvcm0oICdmbG9hdCcgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKS5vblJlbmRlclVwZGF0ZSggKCkgPT4gc2hhZG93LmNhbWVyYS5mYXIgKTtcblx0Y29uc3QgYmlhcyA9IHJlZmVyZW5jZSggJ2JpYXMnLCAnZmxvYXQnLCBzaGFkb3cgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblx0Y29uc3QgbWFwU2l6ZSA9IHVuaWZvcm0oIHNoYWRvdy5tYXBTaXplICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cblx0Y29uc3QgcmVzdWx0ID0gZmxvYXQoIDEuMCApLnRvVmFyKCk7XG5cblx0SWYoIGxpZ2h0VG9Qb3NpdGlvbkxlbmd0aC5zdWIoIGNhbWVyYUZhckxvY2FsICkubGVzc1RoYW5FcXVhbCggMC4wICkuYW5kKCBsaWdodFRvUG9zaXRpb25MZW5ndGguc3ViKCBjYW1lcmFOZWFyTG9jYWwgKS5ncmVhdGVyVGhhbkVxdWFsKCAwLjAgKSApLCAoKSA9PiB7XG5cblx0XHQvLyBkcCA9IG5vcm1hbGl6ZWQgZGlzdGFuY2UgZnJvbSBsaWdodCB0byBmcmFnbWVudCBwb3NpdGlvblxuXHRcdGNvbnN0IGRwID0gbGlnaHRUb1Bvc2l0aW9uTGVuZ3RoLnN1YiggY2FtZXJhTmVhckxvY2FsICkuZGl2KCBjYW1lcmFGYXJMb2NhbC5zdWIoIGNhbWVyYU5lYXJMb2NhbCApICkudG9WYXIoKTsgLy8gbmVlZCB0byBjbGFtcD9cblx0XHRkcC5hZGRBc3NpZ24oIGJpYXMgKTtcblxuXHRcdC8vIGJkM0QgPSBiYXNlIGRpcmVjdGlvbiAzRFxuXHRcdGNvbnN0IGJkM0QgPSBsaWdodFRvUG9zaXRpb24ubm9ybWFsaXplKCk7XG5cdFx0Y29uc3QgdGV4ZWxTaXplID0gdmVjMiggMS4wICkuZGl2KCBtYXBTaXplLm11bCggdmVjMiggNC4wLCAyLjAgKSApICk7XG5cblx0XHQvLyBwZXJjZW50YWdlLWNsb3NlciBmaWx0ZXJpbmdcblx0XHRyZXN1bHQuYXNzaWduKCBmaWx0ZXJGbiggeyBkZXB0aFRleHR1cmUsIGJkM0QsIGRwLCB0ZXhlbFNpemUsIHNoYWRvdyB9ICkgKTtcblxuXHR9ICk7XG5cblx0cmV0dXJuIHJlc3VsdDtcblxufSApO1xuXG5jb25zdCBfdmlld3BvcnQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3I0KCk7XG5jb25zdCBfdmlld3BvcnRTaXplID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuY29uc3QgX3NoYWRvd01hcFNpemUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBzaGFkb3cgaW1wbGVtZW50YXRpb24gZm9yIHBvaW50IGxpZ2h0IG5vZGVzLlxuICpcbiAqIEBhdWdtZW50cyBTaGFkb3dOb2RlXG4gKi9cbmNsYXNzIFBvaW50U2hhZG93Tm9kZSBleHRlbmRzIFNoYWRvd05vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnUG9pbnRTaGFkb3dOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcG9pbnQgc2hhZG93IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UG9pbnRMaWdodH0gbGlnaHQgLSBUaGUgc2hhZG93IGNhc3RpbmcgcG9pbnQgbGlnaHQuXG5cdCAqIEBwYXJhbSB7P1BvaW50TGlnaHRTaGFkb3d9IFtzaGFkb3c9bnVsbF0gLSBBbiBvcHRpb25hbCBwb2ludCBsaWdodCBzaGFkb3cuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbGlnaHQsIHNoYWRvdyA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggbGlnaHQsIHNoYWRvdyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byByZXR1cm4gcG9pbnQgbGlnaHQgc2hhZG93IHNwZWNpZmljXG5cdCAqIGZpbHRlcmluZyBmdW5jdGlvbnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlIC0gVGhlIHNoYWRvdyB0eXBlLlxuXHQgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGZpbHRlcmluZyBmdW5jdGlvbi5cblx0ICovXG5cdGdldFNoYWRvd0ZpbHRlckZuKCB0eXBlICkge1xuXG5cdFx0cmV0dXJuIHR5cGUgPT09IEJhc2ljU2hhZG93TWFwID8gQmFzaWNQb2ludFNoYWRvd0ZpbHRlciA6IFBvaW50U2hhZG93RmlsdGVyO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzbyB0aGUgdW5hbHRlcmVkIHNoYWRvdyBwb3NpdGlvbiBpcyB1c2VkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcGFyYW0ge05vZGU8dmVjMz59IHNoYWRvd1Bvc2l0aW9uIC0gQSBub2RlIHJlcHJlc2VudGluZyB0aGUgc2hhZG93IHBvc2l0aW9uLlxuXHQgKiBAcmV0dXJuIHtOb2RlPHZlYzM+fSBUaGUgc2hhZG93IGNvb3JkaW5hdGVzLlxuXHQgKi9cblx0c2V0dXBTaGFkb3dDb29yZCggYnVpbGRlciwgc2hhZG93UG9zaXRpb24gKSB7XG5cblx0XHRyZXR1cm4gc2hhZG93UG9zaXRpb247XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdGVzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHRvIG9ubHkgdXNlIHBvaW50IGxpZ2h0IHNwZWNpZmljXG5cdCAqIHNoYWRvdyBmaWx0ZXIgZnVuY3Rpb25zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRzIC0gQSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIHNoYWRvdyBmaWx0ZXJpbmcuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGlucHV0cy5maWx0ZXJGbiAtIFRoaXMgZnVuY3Rpb24gZGVmaW5lcyB0aGUgZmlsdGVyaW5nIHR5cGUgb2YgdGhlIHNoYWRvdyBtYXAgZS5nLiBQQ0YuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gaW5wdXRzLnNoYWRvd1RleHR1cmUgLSBBIHJlZmVyZW5jZSB0byB0aGUgc2hhZG93IG1hcCdzIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7RGVwdGhUZXh0dXJlfSBpbnB1dHMuZGVwdGhUZXh0dXJlIC0gQSByZWZlcmVuY2UgdG8gdGhlIHNoYWRvdyBtYXAncyB0ZXh0dXJlIGRhdGEuXG5cdCAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gaW5wdXRzLnNoYWRvd0Nvb3JkIC0gU2hhZG93IGNvb3JkaW5hdGVzIHdoaWNoIGFyZSB1c2VkIHRvIHNhbXBsZSBmcm9tIHRoZSBzaGFkb3cgbWFwLlxuXHQgKiBAcGFyYW0ge0xpZ2h0U2hhZG93fSBpbnB1dHMuc2hhZG93IC0gVGhlIGxpZ2h0IHNoYWRvdy5cblx0ICogQHJldHVybiB7Tm9kZTxmbG9hdD59IFRoZSByZXN1bHQgbm9kZSBvZiB0aGUgc2hhZG93IGZpbHRlcmluZy5cblx0ICovXG5cdHNldHVwU2hhZG93RmlsdGVyKCBidWlsZGVyLCB7IGZpbHRlckZuLCBzaGFkb3dUZXh0dXJlLCBkZXB0aFRleHR1cmUsIHNoYWRvd0Nvb3JkLCBzaGFkb3cgfSApIHtcblxuXHRcdHJldHVybiBwb2ludFNoYWRvd0ZpbHRlciggeyBmaWx0ZXJGbiwgc2hhZG93VGV4dHVyZSwgZGVwdGhUZXh0dXJlLCBzaGFkb3dDb29yZCwgc2hhZG93IH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0ZXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBwb2ludCBsaWdodCBzcGVjaWZpY1xuXHQgKiByZW5kZXJpbmcgY29kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlRnJhbWV9IGZyYW1lIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBmcmFtZS5cblx0ICovXG5cdHJlbmRlclNoYWRvdyggZnJhbWUgKSB7XG5cblx0XHRjb25zdCB7IHNoYWRvdywgc2hhZG93TWFwLCBsaWdodCB9ID0gdGhpcztcblx0XHRjb25zdCB7IHJlbmRlcmVyLCBzY2VuZSB9ID0gZnJhbWU7XG5cblx0XHRjb25zdCBzaGFkb3dGcmFtZUV4dGVudHMgPSBzaGFkb3cuZ2V0RnJhbWVFeHRlbnRzKCk7XG5cblx0XHRfc2hhZG93TWFwU2l6ZS5jb3B5KCBzaGFkb3cubWFwU2l6ZSApO1xuXHRcdF9zaGFkb3dNYXBTaXplLm11bHRpcGx5KCBzaGFkb3dGcmFtZUV4dGVudHMgKTtcblxuXHRcdHNoYWRvd01hcC5zZXRTaXplKCBfc2hhZG93TWFwU2l6ZS53aWR0aCwgX3NoYWRvd01hcFNpemUuaGVpZ2h0ICk7XG5cblx0XHRfdmlld3BvcnRTaXplLmNvcHkoIHNoYWRvdy5tYXBTaXplICk7XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgcHJldmlvdXNBdXRvQ2xlYXIgPSByZW5kZXJlci5hdXRvQ2xlYXI7XG5cblx0XHRjb25zdCBwcmV2aW91c0NsZWFyQ29sb3IgPSByZW5kZXJlci5nZXRDbGVhckNvbG9yKCBfY2xlYXJDb2xvciApO1xuXHRcdGNvbnN0IHByZXZpb3VzQ2xlYXJBbHBoYSA9IHJlbmRlcmVyLmdldENsZWFyQWxwaGEoKTtcblxuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IGZhbHNlO1xuXHRcdHJlbmRlcmVyLnNldENsZWFyQ29sb3IoIHNoYWRvdy5jbGVhckNvbG9yLCBzaGFkb3cuY2xlYXJBbHBoYSApO1xuXHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cblx0XHRjb25zdCB2aWV3cG9ydENvdW50ID0gc2hhZG93LmdldFZpZXdwb3J0Q291bnQoKTtcblxuXHRcdGZvciAoIGxldCB2cCA9IDA7IHZwIDwgdmlld3BvcnRDb3VudDsgdnAgKysgKSB7XG5cblx0XHRcdGNvbnN0IHZpZXdwb3J0ID0gc2hhZG93LmdldFZpZXdwb3J0KCB2cCApO1xuXG5cdFx0XHRjb25zdCB4ID0gX3ZpZXdwb3J0U2l6ZS54ICogdmlld3BvcnQueDtcblx0XHRcdGNvbnN0IHkgPSBfc2hhZG93TWFwU2l6ZS55IC0gX3ZpZXdwb3J0U2l6ZS55IC0gKCBfdmlld3BvcnRTaXplLnkgKiB2aWV3cG9ydC55ICk7XG5cblx0XHRcdF92aWV3cG9ydC5zZXQoXG5cdFx0XHRcdHgsXG5cdFx0XHRcdHksXG5cdFx0XHRcdF92aWV3cG9ydFNpemUueCAqIHZpZXdwb3J0LnosXG5cdFx0XHRcdF92aWV3cG9ydFNpemUueSAqIHZpZXdwb3J0Lndcblx0XHRcdCk7XG5cblx0XHRcdHNoYWRvd01hcC52aWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKTtcblxuXHRcdFx0c2hhZG93LnVwZGF0ZU1hdHJpY2VzKCBsaWdodCwgdnAgKTtcblxuXHRcdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgc2hhZG93LmNhbWVyYSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IHByZXZpb3VzQXV0b0NsZWFyO1xuXHRcdHJlbmRlcmVyLnNldENsZWFyQ29sb3IoIHByZXZpb3VzQ2xlYXJDb2xvciwgcHJldmlvdXNDbGVhckFscGhhICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvaW50U2hhZG93Tm9kZTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIGBQb2ludFNoYWRvd05vZGVgLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtQb2ludExpZ2h0fSBsaWdodCAtIFRoZSBzaGFkb3cgY2FzdGluZyBwb2ludCBsaWdodC5cbiAqIEBwYXJhbSB7P1BvaW50TGlnaHRTaGFkb3d9IFtzaGFkb3c9bnVsbF0gLSBBbiBvcHRpb25hbCBwb2ludCBsaWdodCBzaGFkb3cuXG4gKiBAcmV0dXJuIHtQb2ludFNoYWRvd05vZGV9IFRoZSBjcmVhdGVkIHBvaW50IHNoYWRvdyBub2RlLlxuICovXG5leHBvcnQgY29uc3QgcG9pbnRTaGFkb3cgPSAoIGxpZ2h0LCBzaGFkb3cgKSA9PiBub2RlT2JqZWN0KCBuZXcgUG9pbnRTaGFkb3dOb2RlKCBsaWdodCwgc2hhZG93ICkgKTtcbiIsImltcG9ydCBMaWdodGluZ05vZGUgZnJvbSAnLi9MaWdodGluZ05vZGUuanMnO1xuaW1wb3J0IHsgTm9kZVVwZGF0ZVR5cGUgfSBmcm9tICcuLi9jb3JlL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyB1bmlmb3JtIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtTm9kZS5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgcmVuZGVyR3JvdXAgfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Hcm91cE5vZGUuanMnO1xuaW1wb3J0IHsgaGFzaCB9IGZyb20gJy4uL2NvcmUvTm9kZVV0aWxzLmpzJztcbmltcG9ydCB7IHNoYWRvdyB9IGZyb20gJy4vU2hhZG93Tm9kZS5qcyc7XG5pbXBvcnQgeyBub2RlT2JqZWN0IH0gZnJvbSAnLi4vdHNsL1RTTENvcmUuanMnO1xuaW1wb3J0IHsgbGlnaHRWaWV3UG9zaXRpb24gfSBmcm9tICcuLi9hY2Nlc3NvcnMvTGlnaHRzLmpzJztcbmltcG9ydCB7IHBvc2l0aW9uVmlldyB9IGZyb20gJy4uL2FjY2Vzc29ycy9Qb3NpdGlvbi5qcyc7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYW5hbHl0aWMgbGlnaHQgbm9kZXMuXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0aW5nTm9kZVxuICovXG5jbGFzcyBBbmFseXRpY0xpZ2h0Tm9kZSBleHRlbmRzIExpZ2h0aW5nTm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdBbmFseXRpY0xpZ2h0Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGFuYWx5dGljIGxpZ2h0IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P0xpZ2h0fSBbbGlnaHQ9bnVsbF0gLSBUaGUgbGlnaHQgc291cmNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpZ2h0ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlnaHQgc291cmNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9MaWdodH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpZ2h0J3MgY29sb3IgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICovXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpZ2h0J3MgY29sb3Igbm9kZS4gUG9pbnRzIHRvIGBjb2xvck5vZGVgIG9mIHRoZSBsaWdodCBzb3VyY2UsIGlmIHNldC4gT3RoZXJ3aXNlXG5cdFx0ICogaXQgY3JlYXRlcyBhIHVuaWZvcm0gbm9kZSBiYXNlZCBvbiB7QGxpbmsgQW5hbHl0aWNMaWdodE5vZGUjY29sb3J9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5jb2xvck5vZGUgPSAoIGxpZ2h0ICYmIGxpZ2h0LmNvbG9yTm9kZSApIHx8IHVuaWZvcm0oIHRoaXMuY29sb3IgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgcHJvcGVydHkgaXMgdXNlZCB0byByZXRhaW4gYSByZWZlcmVuY2UgdG8gdGhlIG9yaWdpbmFsIHZhbHVlIG9mIHtAbGluayBBbmFseXRpY0xpZ2h0Tm9kZSNjb2xvck5vZGV9LlxuXHRcdCAqIFRoZSBmaW5hbCBjb2xvciBub2RlIGlzIHJlcHJlc2VudGVkIGJ5IGEgZGlmZmVyZW50IG5vZGUgd2hlbiB1c2luZyBzaGFkb3dzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJhc2VDb2xvck5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgbGlnaHQncyBzaGFkb3cuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1NoYWRvd05vZGV9XG4gICBcdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2hhZG93Tm9kZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIHRoZSBsaWdodCdzIHNoYWRvdyBjb2xvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Tm9kZX1cbiAgIFx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zaGFkb3dDb2xvck5vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0FuYWx5dGljTGlnaHROb2RlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJ3cml0dGVuIHNpbmNlIGFuYWx5dGljIGxpZ2h0IG5vZGVzIGFyZSB1cGRhdGVkXG5cdFx0ICogb25jZSBwZXIgZnJhbWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0ICdmcmFtZSdcblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZVR5cGUgPSBOb2RlVXBkYXRlVHlwZS5GUkFNRTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0ZXMgdGhlIGRlZmF1bHQge0BsaW5rIE5vZGUjY3VzdG9tQ2FjaGVLZXl9IGltcGxlbWVudGF0aW9uIGJ5IGluY2x1ZGluZyB0aGVcblx0ICogYGxpZ2h0LmlkYCBhbmQgYGxpZ2h0LmNhc3RTaGFkb3dgIGludG8gdGhlIGNhY2hlIGtleS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VzdG9tIGNhY2hlIGtleS5cblx0ICovXG5cdGN1c3RvbUNhY2hlS2V5KCkge1xuXG5cdFx0cmV0dXJuIGhhc2goIHRoaXMubGlnaHQuaWQsIHRoaXMubGlnaHQuY2FzdFNoYWRvdyA/IDEgOiAwICk7XG5cblx0fVxuXG5cdGdldEhhc2goKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5saWdodC51dWlkO1xuXG5cdH1cblxuXHRnZXRMaWdodFZlY3RvciggYnVpbGRlciApIHtcblxuXHRcdHJldHVybiBsaWdodFZpZXdQb3NpdGlvbiggdGhpcy5saWdodCApLnN1YiggYnVpbGRlci5jb250ZXh0LnBvc2l0aW9uVmlldyB8fCBwb3NpdGlvblZpZXcgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdXAgdGhlIGRpcmVjdCBsaWdodGluZyBmb3IgdGhlIGFuYWx5dGljIGxpZ2h0IG5vZGUuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGJ1aWxkZXIgb2JqZWN0IHVzZWQgZm9yIHNldHRpbmcgdXAgdGhlIGxpZ2h0LlxuXHQgKiBAcmV0dXJuIHtPYmplY3R8dW5kZWZpbmVkfSBUaGUgZGlyZWN0IGxpZ2h0IGRhdGEgKGNvbG9yIGFuZCBkaXJlY3Rpb24pLlxuXHQgKi9cblx0c2V0dXBEaXJlY3QoIC8qYnVpbGRlciovICkgeyB9XG5cblx0LyoqXG5cdCAqIFNldHMgdXAgdGhlIGRpcmVjdCByZWN0IGFyZWEgbGlnaHRpbmcgZm9yIHRoZSBhbmFseXRpYyBsaWdodCBub2RlLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gYnVpbGRlciAtIFRoZSBidWlsZGVyIG9iamVjdCB1c2VkIGZvciBzZXR0aW5nIHVwIHRoZSBsaWdodC5cblx0ICogQHJldHVybiB7T2JqZWN0fHVuZGVmaW5lZH0gVGhlIGRpcmVjdCByZWN0IGFyZWEgbGlnaHQgZGF0YS5cblx0ICovXG5cdHNldHVwRGlyZWN0UmVjdEFyZWEoIC8qYnVpbGRlciovICkgeyB9XG5cblx0LyoqXG5cdCAqIFNldHVwcyB0aGUgc2hhZG93IG5vZGUgZm9yIHRoaXMgbGlnaHQuIFRoZSBtZXRob2QgZXhpc3RzIHNvIGNvbmNyZXRlIGxpZ2h0IGNsYXNzZXNcblx0ICogY2FuIHNldHVwIGRpZmZlcmVudCB0eXBlcyBvZiBzaGFkb3cgbm9kZXMuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1NoYWRvd05vZGV9IFRoZSBjcmVhdGVkIHNoYWRvdyBub2RlLlxuXHQgKi9cblx0c2V0dXBTaGFkb3dOb2RlKCkge1xuXG5cdFx0cmV0dXJuIHNoYWRvdyggdGhpcy5saWdodCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBzaGFkb3cgZm9yIHRoaXMgbGlnaHQuIFRoaXMgbWV0aG9kIGlzIG9ubHkgZXhlY3V0ZWQgaWYgdGhlIGxpZ2h0XG5cdCAqIGNhc3Qgc2hhZG93cyBhbmQgdGhlIGN1cnJlbnQgYnVpbGQgb2JqZWN0IHJlY2VpdmVzIHNoYWRvd3MuIEl0IGluY29ycG9yYXRlc1xuXHQgKiBzaGFkb3dzIGludG8gdGhlIGxpZ2h0aW5nIGNvbXB1dGF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVCdWlsZGVyfSBidWlsZGVyIC0gVGhlIGN1cnJlbnQgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0c2V0dXBTaGFkb3coIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCB7IHJlbmRlcmVyIH0gPSBidWlsZGVyO1xuXG5cdFx0aWYgKCByZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRsZXQgc2hhZG93Q29sb3JOb2RlID0gdGhpcy5zaGFkb3dDb2xvck5vZGU7XG5cblx0XHRpZiAoIHNoYWRvd0NvbG9yTm9kZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgY3VzdG9tU2hhZG93Tm9kZSA9IHRoaXMubGlnaHQuc2hhZG93LnNoYWRvd05vZGU7XG5cblx0XHRcdGxldCBzaGFkb3dOb2RlO1xuXG5cdFx0XHRpZiAoIGN1c3RvbVNoYWRvd05vZGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzaGFkb3dOb2RlID0gbm9kZU9iamVjdCggY3VzdG9tU2hhZG93Tm9kZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHNoYWRvd05vZGUgPSB0aGlzLnNldHVwU2hhZG93Tm9kZSggYnVpbGRlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2hhZG93Tm9kZSA9IHNoYWRvd05vZGU7XG5cblx0XHRcdHRoaXMuc2hhZG93Q29sb3JOb2RlID0gc2hhZG93Q29sb3JOb2RlID0gdGhpcy5jb2xvck5vZGUubXVsKCBzaGFkb3dOb2RlICk7XG5cblx0XHRcdHRoaXMuYmFzZUNvbG9yTm9kZSA9IHRoaXMuY29sb3JOb2RlO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHRoaXMuY29sb3JOb2RlID0gc2hhZG93Q29sb3JOb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVW5saWtlIG1vc3Qgb3RoZXIgbm9kZXMsIGxpZ2h0aW5nIG5vZGVzIGRvIG5vdCByZXR1cm4gYSBvdXRwdXQgbm9kZSBpbiB7QGxpbmsgTm9kZSNzZXR1cH0uXG5cdCAqIFRoZSBtYWluIHB1cnBvc2Ugb2YgbGlnaHRpbmcgbm9kZXMgaXMgdG8gY29uZmlndXJlIHRoZSBjdXJyZW50IHtAbGluayBMaWdodGluZ01vZGVsfSBhbmQvb3Jcblx0ICogaW52b2NhdGUgdGhlIHJlc3BlY3RpdmUgaW50ZXJmYWNlIG1ldGhvZHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUJ1aWxkZXJ9IGJ1aWxkZXIgLSBUaGUgY3VycmVudCBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRzZXR1cCggYnVpbGRlciApIHtcblxuXHRcdHRoaXMuY29sb3JOb2RlID0gdGhpcy5iYXNlQ29sb3JOb2RlIHx8IHRoaXMuY29sb3JOb2RlO1xuXG5cdFx0aWYgKCB0aGlzLmxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdGlmICggYnVpbGRlci5vYmplY3QucmVjZWl2ZVNoYWRvdyApIHtcblxuXHRcdFx0XHR0aGlzLnNldHVwU2hhZG93KCBidWlsZGVyICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuc2hhZG93Tm9kZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5zaGFkb3dOb2RlLmRpc3Bvc2UoKTtcblx0XHRcdHRoaXMuc2hhZG93Tm9kZSA9IG51bGw7XG5cdFx0XHR0aGlzLnNoYWRvd0NvbG9yTm9kZSA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCBkaXJlY3RMaWdodERhdGEgPSB0aGlzLnNldHVwRGlyZWN0KCBidWlsZGVyICk7XG5cdFx0Y29uc3QgZGlyZWN0UmVjdEFyZWFMaWdodERhdGEgPSB0aGlzLnNldHVwRGlyZWN0UmVjdEFyZWEoIGJ1aWxkZXIgKTtcblxuXHRcdGlmICggZGlyZWN0TGlnaHREYXRhICkge1xuXG5cdFx0XHRidWlsZGVyLmxpZ2h0c05vZGUuc2V0dXBEaXJlY3RMaWdodCggYnVpbGRlciwgdGhpcywgZGlyZWN0TGlnaHREYXRhICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRpcmVjdFJlY3RBcmVhTGlnaHREYXRhICkge1xuXG5cdFx0XHRidWlsZGVyLmxpZ2h0c05vZGUuc2V0dXBEaXJlY3RSZWN0QXJlYUxpZ2h0KCBidWlsZGVyLCB0aGlzLCBkaXJlY3RSZWN0QXJlYUxpZ2h0RGF0YSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIHVwZGF0ZSBtZXRob2QgaXMgdXNlZCB0byB1cGRhdGUgbGlnaHQgdW5pZm9ybXMgcGVyIGZyYW1lLlxuXHQgKiBQb3RlbnRpYWxseSBvdmVyd3JpdHRlbiBpbiBjb25jcmV0ZSBsaWdodCBub2RlcyB0byB1cGRhdGUgbGlnaHRcblx0ICogc3BlY2lmaWMgdW5pZm9ybXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUZyYW1lfSBmcmFtZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IG5vZGUgZnJhbWUuXG5cdCAqL1xuXHR1cGRhdGUoIC8qZnJhbWUqLyApIHtcblxuXHRcdGNvbnN0IHsgbGlnaHQgfSA9IHRoaXM7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBbmFseXRpY0xpZ2h0Tm9kZTtcbiIsImltcG9ydCB7IEZuIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBgZGlzY2FyZGAgc2hhZGVyIG9wZXJhdGlvbiBpbiBUU0wuXG4gKlxuICogQG1ldGhvZFxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0cyAtIFRoZSBpbnB1dCBwYXJhbWV0ZXIgb2JqZWN0LlxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gaW5wdXRzLmxpZ2h0RGlzdGFuY2UgLSBUaGUgZGlzdGFuY2Ugb2YgdGhlIGxpZ2h0J3MgcG9zaXRpb24gdG8gdGhlIGN1cnJlbnQgZnJhZ21lbnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBpbnB1dHMuY3V0b2ZmRGlzdGFuY2UgLSBUaGUgbGlnaHQncyBjdXRvZmYgZGlzdGFuY2UuXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSBpbnB1dHMuZGVjYXlFeHBvbmVudCAtIFRoZSBsaWdodCdzIGRlY2F5IGV4cG9uZW50LlxuICogQHJldHVybiB7Tm9kZTxmbG9hdD59IFRoZSBkaXN0YW5jZSBmYWxsb2ZmLlxuICovXG5leHBvcnQgY29uc3QgZ2V0RGlzdGFuY2VBdHRlbnVhdGlvbiA9IC8qQF9fUFVSRV9fKi8gRm4oICggeyBsaWdodERpc3RhbmNlLCBjdXRvZmZEaXN0YW5jZSwgZGVjYXlFeHBvbmVudCB9ICkgPT4ge1xuXG5cdC8vIGJhc2VkIHVwb24gRnJvc3RiaXRlIDMgTW92aW5nIHRvIFBoeXNpY2FsbHktYmFzZWQgUmVuZGVyaW5nXG5cdC8vIHBhZ2UgMzIsIGVxdWF0aW9uIDI2OiBFW3dpbmRvdzFdXG5cdC8vIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcblx0Y29uc3QgZGlzdGFuY2VGYWxsb2ZmID0gbGlnaHREaXN0YW5jZS5wb3coIGRlY2F5RXhwb25lbnQgKS5tYXgoIDAuMDEgKS5yZWNpcHJvY2FsKCk7XG5cblx0cmV0dXJuIGN1dG9mZkRpc3RhbmNlLmdyZWF0ZXJUaGFuKCAwICkuc2VsZWN0KFxuXHRcdGRpc3RhbmNlRmFsbG9mZi5tdWwoIGxpZ2h0RGlzdGFuY2UuZGl2KCBjdXRvZmZEaXN0YW5jZSApLnBvdzQoKS5vbmVNaW51cygpLmNsYW1wKCkucG93MigpICksXG5cdFx0ZGlzdGFuY2VGYWxsb2ZmXG5cdCk7XG5cbn0gKTsgLy8gdmFsaWRhdGVkXG4iLCJpbXBvcnQgQW5hbHl0aWNMaWdodE5vZGUgZnJvbSAnLi9BbmFseXRpY0xpZ2h0Tm9kZS5qcyc7XG5pbXBvcnQgeyBnZXREaXN0YW5jZUF0dGVudWF0aW9uIH0gZnJvbSAnLi9MaWdodFV0aWxzLmpzJztcbmltcG9ydCB7IHVuaWZvcm0gfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Ob2RlLmpzJztcbmltcG9ydCB7IHJlbmRlckdyb3VwIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtR3JvdXBOb2RlLmpzJztcbmltcG9ydCB7IHBvaW50U2hhZG93IH0gZnJvbSAnLi9Qb2ludFNoYWRvd05vZGUuanMnO1xuXG5leHBvcnQgY29uc3QgZGlyZWN0UG9pbnRMaWdodCA9ICggeyBjb2xvciwgbGlnaHRWZWN0b3IsIGN1dG9mZkRpc3RhbmNlLCBkZWNheUV4cG9uZW50IH0gKSA9PiB7XG5cblx0Y29uc3QgbGlnaHREaXJlY3Rpb24gPSBsaWdodFZlY3Rvci5ub3JtYWxpemUoKTtcblx0Y29uc3QgbGlnaHREaXN0YW5jZSA9IGxpZ2h0VmVjdG9yLmxlbmd0aCgpO1xuXG5cdGNvbnN0IGF0dGVudWF0aW9uID0gZ2V0RGlzdGFuY2VBdHRlbnVhdGlvbigge1xuXHRcdGxpZ2h0RGlzdGFuY2UsXG5cdFx0Y3V0b2ZmRGlzdGFuY2UsXG5cdFx0ZGVjYXlFeHBvbmVudFxuXHR9ICk7XG5cblx0Y29uc3QgbGlnaHRDb2xvciA9IGNvbG9yLm11bCggYXR0ZW51YXRpb24gKTtcblxuXHRyZXR1cm4geyBsaWdodERpcmVjdGlvbiwgbGlnaHRDb2xvciB9O1xuXG59O1xuXG4vKipcbiAqIE1vZHVsZSBmb3IgcmVwcmVzZW50aW5nIHBvaW50IGxpZ2h0cyBhcyBub2Rlcy5cbiAqXG4gKiBAYXVnbWVudHMgQW5hbHl0aWNMaWdodE5vZGVcbiAqL1xuY2xhc3MgUG9pbnRMaWdodE5vZGUgZXh0ZW5kcyBBbmFseXRpY0xpZ2h0Tm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdQb2ludExpZ2h0Tm9kZSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBvaW50IGxpZ2h0IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P1BvaW50TGlnaHR9IFtsaWdodD1udWxsXSAtIFRoZSBwb2ludCBsaWdodCBzb3VyY2UuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbGlnaHQgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIGxpZ2h0ICk7XG5cblx0XHQvKipcblx0XHQgKiBVbmlmb3JtIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBjdXRvZmYgZGlzdGFuY2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGU8ZmxvYXQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY3V0b2ZmRGlzdGFuY2VOb2RlID0gdW5pZm9ybSggMCApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVW5pZm9ybSBub2RlIHJlcHJlc2VudGluZyB0aGUgZGVjYXkgZXhwb25lbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGU8ZmxvYXQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZGVjYXlFeHBvbmVudE5vZGUgPSB1bmlmb3JtKCAyICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiB0byB1cGRhdGVkIHBvaW50IGxpZ2h0IHNwZWNpZmljIHVuaWZvcm1zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlKCBmcmFtZSApIHtcblxuXHRcdGNvbnN0IHsgbGlnaHQgfSA9IHRoaXM7XG5cblx0XHRzdXBlci51cGRhdGUoIGZyYW1lICk7XG5cblx0XHR0aGlzLmN1dG9mZkRpc3RhbmNlTm9kZS52YWx1ZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXHRcdHRoaXMuZGVjYXlFeHBvbmVudE5vZGUudmFsdWUgPSBsaWdodC5kZWNheTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHRvIHNldHVwIHBvaW50IGxpZ2h0IHNwZWNpZmljIHNoYWRvdy5cblx0ICpcblx0ICogQHJldHVybiB7UG9pbnRTaGFkb3dOb2RlfVxuXHQgKi9cblx0c2V0dXBTaGFkb3dOb2RlKCkge1xuXG5cdFx0cmV0dXJuIHBvaW50U2hhZG93KCB0aGlzLmxpZ2h0ICk7XG5cblx0fVxuXG5cdHNldHVwRGlyZWN0KCBidWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIGRpcmVjdFBvaW50TGlnaHQoIHtcblx0XHRcdGNvbG9yOiB0aGlzLmNvbG9yTm9kZSxcblx0XHRcdGxpZ2h0VmVjdG9yOiB0aGlzLmdldExpZ2h0VmVjdG9yKCBidWlsZGVyICksXG5cdFx0XHRjdXRvZmZEaXN0YW5jZTogdGhpcy5jdXRvZmZEaXN0YW5jZU5vZGUsXG5cdFx0XHRkZWNheUV4cG9uZW50OiB0aGlzLmRlY2F5RXhwb25lbnROb2RlXG5cdFx0fSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQb2ludExpZ2h0Tm9kZTtcbiIsImltcG9ydCB7IHV2IH0gZnJvbSAnLi4vYWNjZXNzb3JzL1VWLmpzJztcbmltcG9ydCB7IEZuIH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSAyeDIgY2hlY2tlcmJvYXJkIHBhdHRlcm4gdGhhdCBjYW4gYmUgdXNlZCBhcyBwcm9jZWR1cmFsIHRleHR1cmUgZGF0YS5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMyPn0gY29vcmQgLSBUaGUgdXYgY29vcmRpbmF0ZXMuXG4gKiBAcmV0dXJuIHtOb2RlPGZsb2F0Pn0gVGhlIHJlc3VsdCBkYXRhLlxuICovXG5leHBvcnQgY29uc3QgY2hlY2tlciA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBjb29yZCA9IHV2KCkgXSApID0+IHtcblxuXHRjb25zdCB1diA9IGNvb3JkLm11bCggMi4wICk7XG5cblx0Y29uc3QgY3ggPSB1di54LmZsb29yKCk7XG5cdGNvbnN0IGN5ID0gdXYueS5mbG9vcigpO1xuXHRjb25zdCByZXN1bHQgPSBjeC5hZGQoIGN5ICkubW9kKCAyLjAgKTtcblxuXHRyZXR1cm4gcmVzdWx0LnNpZ24oKTtcblxufSApO1xuIiwiaW1wb3J0IHsgRm4sIGZsb2F0IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgbGVuZ3RoU3EsIHNtb290aHN0ZXAgfSBmcm9tICcuLi9tYXRoL01hdGhOb2RlLmpzJztcbmltcG9ydCB7IHV2IH0gZnJvbSAnLi4vYWNjZXNzb3JzL1VWLmpzJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBjaXJjbGUgYmFzZWQgb24gdGhlIHV2IGNvb3JkaW5hdGVzLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPHZlYzI+fSBjb29yZCAtIFRoZSB1diB0byBnZW5lcmF0ZSB0aGUgY2lyY2xlLlxuICogQHJldHVybiB7Tm9kZTxmbG9hdD59IFRoZSBjaXJjbGUgc2hhcGUuXG4gKi9cbmV4cG9ydCBjb25zdCBzaGFwZUNpcmNsZSA9IEZuKCAoIFsgY29vcmQgPSB1digpIF0sIHsgcmVuZGVyZXIsIG1hdGVyaWFsIH0gKSA9PiB7XG5cblx0Y29uc3QgYWxwaGEgPSBmbG9hdCggMSApLnRvVmFyKCk7XG5cdGNvbnN0IGxlbjIgPSBsZW5ndGhTcSggY29vcmQubXVsKCAyICkuc3ViKCAxICkgKTtcblxuXHRpZiAoIG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSAmJiByZW5kZXJlci5zYW1wbGVzID4gMSApIHtcblxuXHRcdGNvbnN0IGRsZW4gPSBmbG9hdCggbGVuMi5md2lkdGgoKSApLnRvVmFyKCk7XG5cblx0XHRhbHBoYS5hc3NpZ24oIHNtb290aHN0ZXAoIGRsZW4ub25lTWludXMoKSwgZGxlbi5hZGQoIDEgKSwgbGVuMiApLm9uZU1pbnVzKCkgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0bGVuMi5ncmVhdGVyVGhhbiggMS4wICkuZGlzY2FyZCgpO1xuXG5cdH1cblxuXHRyZXR1cm4gYWxwaGE7XG5cbn0gKTtcbiIsIi8vIFRocmVlLmpzIFRyYW5zcGlsZXJcbi8vIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9BY2FkZW15U29mdHdhcmVGb3VuZGF0aW9uL01hdGVyaWFsWC9tYWluL2xpYnJhcmllcy9zdGRsaWIvZ2VuZ2xzbC9saWIvbXhfbm9pc2UuZ2xzbFxuXG5pbXBvcnQgeyBpbnQsIHVpbnQsIGZsb2F0LCB2ZWMzLCBib29sLCB1dmVjMywgdmVjMiwgdmVjNCwgSWYsIEZuIH0gZnJvbSAnLi4vLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgc2VsZWN0IH0gZnJvbSAnLi4vLi4vbWF0aC9Db25kaXRpb25hbE5vZGUuanMnO1xuaW1wb3J0IHsgc3ViLCBtdWwgfSBmcm9tICcuLi8uLi9tYXRoL09wZXJhdG9yTm9kZS5qcyc7XG5pbXBvcnQgeyBmbG9vciwgYWJzLCBtYXgsIGRvdCwgbWluLCBzcXJ0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRoTm9kZS5qcyc7XG5pbXBvcnQgeyBvdmVybG9hZGluZ0ZuIH0gZnJvbSAnLi4vLi4vdXRpbHMvRnVuY3Rpb25PdmVybG9hZGluZ05vZGUuanMnO1xuaW1wb3J0IHsgTG9vcCB9IGZyb20gJy4uLy4uL3V0aWxzL0xvb3BOb2RlLmpzJztcblxuXG5leHBvcnQgY29uc3QgbXhfc2VsZWN0ID0gLypAX19QVVJFX18qLyBGbiggKCBbIGJfaW1tdXRhYmxlLCB0X2ltbXV0YWJsZSwgZl9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBmID0gZmxvYXQoIGZfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdCA9IGZsb2F0KCB0X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGIgPSBib29sKCBiX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cblx0cmV0dXJuIHNlbGVjdCggYiwgdCwgZiApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9zZWxlY3QnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdiJywgdHlwZTogJ2Jvb2wnIH0sXG5cdFx0eyBuYW1lOiAndCcsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdmJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X25lZ2F0ZV9pZiA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyB2YWxfaW1tdXRhYmxlLCBiX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IGIgPSBib29sKCBiX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHZhbCA9IGZsb2F0KCB2YWxfaW1tdXRhYmxlICkudG9WYXIoKTtcblxuXHRyZXR1cm4gc2VsZWN0KCBiLCB2YWwubmVnYXRlKCksIHZhbCApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9uZWdhdGVfaWYnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICd2YWwnLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAnYicsIHR5cGU6ICdib29sJyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2Zsb29yID0gLypAX19QVVJFX18qLyBGbiggKCBbIHhfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgeCA9IGZsb2F0KCB4X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cblx0cmV0dXJuIGludCggZmxvb3IoIHggKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9mbG9vcicsXG5cdHR5cGU6ICdpbnQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICd4JywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2Zsb29yZnJhYyA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyB4X2ltbXV0YWJsZSwgaSBdICkgPT4ge1xuXG5cdGNvbnN0IHggPSBmbG9hdCggeF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRpLmFzc2lnbiggbXhfZmxvb3IoIHggKSApO1xuXG5cdHJldHVybiB4LnN1YiggZmxvYXQoIGkgKSApO1xuXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9iaWxlcnBfMCA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyB2MF9pbW11dGFibGUsIHYxX2ltbXV0YWJsZSwgdjJfaW1tdXRhYmxlLCB2M19pbW11dGFibGUsIHNfaW1tdXRhYmxlLCB0X2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IHQgPSBmbG9hdCggdF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBzID0gZmxvYXQoIHNfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdjMgPSBmbG9hdCggdjNfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdjIgPSBmbG9hdCggdjJfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdjEgPSBmbG9hdCggdjFfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdjAgPSBmbG9hdCggdjBfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgczEgPSBmbG9hdCggc3ViKCAxLjAsIHMgKSApLnRvVmFyKCk7XG5cblx0cmV0dXJuIHN1YiggMS4wLCB0ICkubXVsKCB2MC5tdWwoIHMxICkuYWRkKCB2MS5tdWwoIHMgKSApICkuYWRkKCB0Lm11bCggdjIubXVsKCBzMSApLmFkZCggdjMubXVsKCBzICkgKSApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2JpbGVycF8wJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAndjAnLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAndjEnLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAndjInLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAndjMnLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAncycsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd0JywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2JpbGVycF8xID0gLypAX19QVVJFX18qLyBGbiggKCBbIHYwX2ltbXV0YWJsZSwgdjFfaW1tdXRhYmxlLCB2Ml9pbW11dGFibGUsIHYzX2ltbXV0YWJsZSwgc19pbW11dGFibGUsIHRfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgdCA9IGZsb2F0KCB0X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHMgPSBmbG9hdCggc19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2MyA9IHZlYzMoIHYzX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHYyID0gdmVjMyggdjJfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdjEgPSB2ZWMzKCB2MV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2MCA9IHZlYzMoIHYwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHMxID0gZmxvYXQoIHN1YiggMS4wLCBzICkgKS50b1ZhcigpO1xuXG5cdHJldHVybiBzdWIoIDEuMCwgdCApLm11bCggdjAubXVsKCBzMSApLmFkZCggdjEubXVsKCBzICkgKSApLmFkZCggdC5tdWwoIHYyLm11bCggczEgKS5hZGQoIHYzLm11bCggcyApICkgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9iaWxlcnBfMScsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAndjAnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICd2MScsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ3YyJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAndjMnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdzJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ3QnLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfYmlsZXJwID0gLypAX19QVVJFX18qLyBvdmVybG9hZGluZ0ZuKCBbIG14X2JpbGVycF8wLCBteF9iaWxlcnBfMSBdICk7XG5cbmV4cG9ydCBjb25zdCBteF90cmlsZXJwXzAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdjBfaW1tdXRhYmxlLCB2MV9pbW11dGFibGUsIHYyX2ltbXV0YWJsZSwgdjNfaW1tdXRhYmxlLCB2NF9pbW11dGFibGUsIHY1X2ltbXV0YWJsZSwgdjZfaW1tdXRhYmxlLCB2N19pbW11dGFibGUsIHNfaW1tdXRhYmxlLCB0X2ltbXV0YWJsZSwgcl9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCByID0gZmxvYXQoIHJfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdCA9IGZsb2F0KCB0X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHMgPSBmbG9hdCggc19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2NyA9IGZsb2F0KCB2N19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2NiA9IGZsb2F0KCB2Nl9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2NSA9IGZsb2F0KCB2NV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2NCA9IGZsb2F0KCB2NF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2MyA9IGZsb2F0KCB2M19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2MiA9IGZsb2F0KCB2Ml9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2MSA9IGZsb2F0KCB2MV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2MCA9IGZsb2F0KCB2MF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBzMSA9IGZsb2F0KCBzdWIoIDEuMCwgcyApICkudG9WYXIoKTtcblx0Y29uc3QgdDEgPSBmbG9hdCggc3ViKCAxLjAsIHQgKSApLnRvVmFyKCk7XG5cdGNvbnN0IHIxID0gZmxvYXQoIHN1YiggMS4wLCByICkgKS50b1ZhcigpO1xuXG5cdHJldHVybiByMS5tdWwoIHQxLm11bCggdjAubXVsKCBzMSApLmFkZCggdjEubXVsKCBzICkgKSApLmFkZCggdC5tdWwoIHYyLm11bCggczEgKS5hZGQoIHYzLm11bCggcyApICkgKSApICkuYWRkKCByLm11bCggdDEubXVsKCB2NC5tdWwoIHMxICkuYWRkKCB2NS5tdWwoIHMgKSApICkuYWRkKCB0Lm11bCggdjYubXVsKCBzMSApLmFkZCggdjcubXVsKCBzICkgKSApICkgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF90cmlsZXJwXzAnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICd2MCcsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd2MScsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd2MicsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd2MycsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd2NCcsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd2NScsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd2NicsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd2NycsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdzJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ3QnLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAncicsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF90cmlsZXJwXzEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdjBfaW1tdXRhYmxlLCB2MV9pbW11dGFibGUsIHYyX2ltbXV0YWJsZSwgdjNfaW1tdXRhYmxlLCB2NF9pbW11dGFibGUsIHY1X2ltbXV0YWJsZSwgdjZfaW1tdXRhYmxlLCB2N19pbW11dGFibGUsIHNfaW1tdXRhYmxlLCB0X2ltbXV0YWJsZSwgcl9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCByID0gZmxvYXQoIHJfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdCA9IGZsb2F0KCB0X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHMgPSBmbG9hdCggc19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2NyA9IHZlYzMoIHY3X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHY2ID0gdmVjMyggdjZfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdjUgPSB2ZWMzKCB2NV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2NCA9IHZlYzMoIHY0X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHYzID0gdmVjMyggdjNfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgdjIgPSB2ZWMzKCB2Ml9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB2MSA9IHZlYzMoIHYxX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHYwID0gdmVjMyggdjBfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgczEgPSBmbG9hdCggc3ViKCAxLjAsIHMgKSApLnRvVmFyKCk7XG5cdGNvbnN0IHQxID0gZmxvYXQoIHN1YiggMS4wLCB0ICkgKS50b1ZhcigpO1xuXHRjb25zdCByMSA9IGZsb2F0KCBzdWIoIDEuMCwgciApICkudG9WYXIoKTtcblxuXHRyZXR1cm4gcjEubXVsKCB0MS5tdWwoIHYwLm11bCggczEgKS5hZGQoIHYxLm11bCggcyApICkgKS5hZGQoIHQubXVsKCB2Mi5tdWwoIHMxICkuYWRkKCB2My5tdWwoIHMgKSApICkgKSApLmFkZCggci5tdWwoIHQxLm11bCggdjQubXVsKCBzMSApLmFkZCggdjUubXVsKCBzICkgKSApLmFkZCggdC5tdWwoIHY2Lm11bCggczEgKS5hZGQoIHY3Lm11bCggcyApICkgKSApICkgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfdHJpbGVycF8xJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICd2MCcsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ3YxJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAndjInLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICd2MycsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ3Y0JywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAndjUnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICd2NicsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ3Y3JywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAncycsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd0JywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ3InLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfdHJpbGVycCA9IC8qQF9fUFVSRV9fKi8gb3ZlcmxvYWRpbmdGbiggWyBteF90cmlsZXJwXzAsIG14X3RyaWxlcnBfMSBdICk7XG5cbmV4cG9ydCBjb25zdCBteF9ncmFkaWVudF9mbG9hdF8wID0gLypAX19QVVJFX18qLyBGbiggKCBbIGhhc2hfaW1tdXRhYmxlLCB4X2ltbXV0YWJsZSwgeV9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCB5ID0gZmxvYXQoIHlfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeCA9IGZsb2F0KCB4X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGhhc2ggPSB1aW50KCBoYXNoX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGggPSB1aW50KCBoYXNoLmJpdEFuZCggdWludCggNyApICkgKS50b1ZhcigpO1xuXHRjb25zdCB1ID0gZmxvYXQoIG14X3NlbGVjdCggaC5sZXNzVGhhbiggdWludCggNCApICksIHgsIHkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IHYgPSBmbG9hdCggbXVsKCAyLjAsIG14X3NlbGVjdCggaC5sZXNzVGhhbiggdWludCggNCApICksIHksIHggKSApICkudG9WYXIoKTtcblxuXHRyZXR1cm4gbXhfbmVnYXRlX2lmKCB1LCBib29sKCBoLmJpdEFuZCggdWludCggMSApICkgKSApLmFkZCggbXhfbmVnYXRlX2lmKCB2LCBib29sKCBoLmJpdEFuZCggdWludCggMiApICkgKSApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2dyYWRpZW50X2Zsb2F0XzAnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdoYXNoJywgdHlwZTogJ3VpbnQnIH0sXG5cdFx0eyBuYW1lOiAneCcsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd5JywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2dyYWRpZW50X2Zsb2F0XzEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgaGFzaF9pbW11dGFibGUsIHhfaW1tdXRhYmxlLCB5X2ltbXV0YWJsZSwgel9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCB6ID0gZmxvYXQoIHpfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeSA9IGZsb2F0KCB5X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHggPSBmbG9hdCggeF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBoYXNoID0gdWludCggaGFzaF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBoID0gdWludCggaGFzaC5iaXRBbmQoIHVpbnQoIDE1ICkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IHUgPSBmbG9hdCggbXhfc2VsZWN0KCBoLmxlc3NUaGFuKCB1aW50KCA4ICkgKSwgeCwgeSApICkudG9WYXIoKTtcblx0Y29uc3QgdiA9IGZsb2F0KCBteF9zZWxlY3QoIGgubGVzc1RoYW4oIHVpbnQoIDQgKSApLCB5LCBteF9zZWxlY3QoIGguZXF1YWwoIHVpbnQoIDEyICkgKS5vciggaC5lcXVhbCggdWludCggMTQgKSApICksIHgsIHogKSApICkudG9WYXIoKTtcblxuXHRyZXR1cm4gbXhfbmVnYXRlX2lmKCB1LCBib29sKCBoLmJpdEFuZCggdWludCggMSApICkgKSApLmFkZCggbXhfbmVnYXRlX2lmKCB2LCBib29sKCBoLmJpdEFuZCggdWludCggMiApICkgKSApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2dyYWRpZW50X2Zsb2F0XzEnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdoYXNoJywgdHlwZTogJ3VpbnQnIH0sXG5cdFx0eyBuYW1lOiAneCcsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd5JywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ3onLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfZ3JhZGllbnRfZmxvYXQgPSAvKkBfX1BVUkVfXyovIG92ZXJsb2FkaW5nRm4oIFsgbXhfZ3JhZGllbnRfZmxvYXRfMCwgbXhfZ3JhZGllbnRfZmxvYXRfMSBdICk7XG5cbmV4cG9ydCBjb25zdCBteF9ncmFkaWVudF92ZWMzXzAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgaGFzaF9pbW11dGFibGUsIHhfaW1tdXRhYmxlLCB5X2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IHkgPSBmbG9hdCggeV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB4ID0gZmxvYXQoIHhfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgaGFzaCA9IHV2ZWMzKCBoYXNoX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cblx0cmV0dXJuIHZlYzMoIG14X2dyYWRpZW50X2Zsb2F0KCBoYXNoLngsIHgsIHkgKSwgbXhfZ3JhZGllbnRfZmxvYXQoIGhhc2gueSwgeCwgeSApLCBteF9ncmFkaWVudF9mbG9hdCggaGFzaC56LCB4LCB5ICkgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfZ3JhZGllbnRfdmVjM18wJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdoYXNoJywgdHlwZTogJ3V2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ3gnLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAneScsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9ncmFkaWVudF92ZWMzXzEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgaGFzaF9pbW11dGFibGUsIHhfaW1tdXRhYmxlLCB5X2ltbXV0YWJsZSwgel9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCB6ID0gZmxvYXQoIHpfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeSA9IGZsb2F0KCB5X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHggPSBmbG9hdCggeF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBoYXNoID0gdXZlYzMoIGhhc2hfaW1tdXRhYmxlICkudG9WYXIoKTtcblxuXHRyZXR1cm4gdmVjMyggbXhfZ3JhZGllbnRfZmxvYXQoIGhhc2gueCwgeCwgeSwgeiApLCBteF9ncmFkaWVudF9mbG9hdCggaGFzaC55LCB4LCB5LCB6ICksIG14X2dyYWRpZW50X2Zsb2F0KCBoYXNoLnosIHgsIHksIHogKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9ncmFkaWVudF92ZWMzXzEnLFxuXHR0eXBlOiAndmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ2hhc2gnLCB0eXBlOiAndXZlYzMnIH0sXG5cdFx0eyBuYW1lOiAneCcsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICd5JywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ3onLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfZ3JhZGllbnRfdmVjMyA9IC8qQF9fUFVSRV9fKi8gb3ZlcmxvYWRpbmdGbiggWyBteF9ncmFkaWVudF92ZWMzXzAsIG14X2dyYWRpZW50X3ZlYzNfMSBdICk7XG5cbmV4cG9ydCBjb25zdCBteF9ncmFkaWVudF9zY2FsZTJkXzAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdl9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCB2ID0gZmxvYXQoIHZfaW1tdXRhYmxlICkudG9WYXIoKTtcblxuXHRyZXR1cm4gbXVsKCAwLjY2MTYsIHYgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfZ3JhZGllbnRfc2NhbGUyZF8wJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAndicsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9ncmFkaWVudF9zY2FsZTNkXzAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdl9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCB2ID0gZmxvYXQoIHZfaW1tdXRhYmxlICkudG9WYXIoKTtcblxuXHRyZXR1cm4gbXVsKCAwLjk4MjAsIHYgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfZ3JhZGllbnRfc2NhbGUzZF8wJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAndicsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9ncmFkaWVudF9zY2FsZTJkXzEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdl9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCB2ID0gdmVjMyggdl9pbW11dGFibGUgKS50b1ZhcigpO1xuXG5cdHJldHVybiBtdWwoIDAuNjYxNiwgdiApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9ncmFkaWVudF9zY2FsZTJkXzEnLFxuXHR0eXBlOiAndmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3YnLCB0eXBlOiAndmVjMycgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9ncmFkaWVudF9zY2FsZTJkID0gLypAX19QVVJFX18qLyBvdmVybG9hZGluZ0ZuKCBbIG14X2dyYWRpZW50X3NjYWxlMmRfMCwgbXhfZ3JhZGllbnRfc2NhbGUyZF8xIF0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2dyYWRpZW50X3NjYWxlM2RfMSA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyB2X2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IHYgPSB2ZWMzKCB2X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cblx0cmV0dXJuIG11bCggMC45ODIwLCB2ICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2dyYWRpZW50X3NjYWxlM2RfMScsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAndicsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2dyYWRpZW50X3NjYWxlM2QgPSAvKkBfX1BVUkVfXyovIG92ZXJsb2FkaW5nRm4oIFsgbXhfZ3JhZGllbnRfc2NhbGUzZF8wLCBteF9ncmFkaWVudF9zY2FsZTNkXzEgXSApO1xuXG5leHBvcnQgY29uc3QgbXhfcm90bDMyID0gLypAX19QVVJFX18qLyBGbiggKCBbIHhfaW1tdXRhYmxlLCBrX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IGsgPSBpbnQoIGtfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeCA9IHVpbnQoIHhfaW1tdXRhYmxlICkudG9WYXIoKTtcblxuXHRyZXR1cm4geC5zaGlmdExlZnQoIGsgKS5iaXRPciggeC5zaGlmdFJpZ2h0KCBpbnQoIDMyICkuc3ViKCBrICkgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9yb3RsMzInLFxuXHR0eXBlOiAndWludCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3gnLCB0eXBlOiAndWludCcgfSxcblx0XHR7IG5hbWU6ICdrJywgdHlwZTogJ2ludCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9iam1peCA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBhLCBiLCBjIF0gKSA9PiB7XG5cblx0YS5zdWJBc3NpZ24oIGMgKTtcblx0YS5iaXRYb3JBc3NpZ24oIG14X3JvdGwzMiggYywgaW50KCA0ICkgKSApO1xuXHRjLmFkZEFzc2lnbiggYiApO1xuXHRiLnN1YkFzc2lnbiggYSApO1xuXHRiLmJpdFhvckFzc2lnbiggbXhfcm90bDMyKCBhLCBpbnQoIDYgKSApICk7XG5cdGEuYWRkQXNzaWduKCBjICk7XG5cdGMuc3ViQXNzaWduKCBiICk7XG5cdGMuYml0WG9yQXNzaWduKCBteF9yb3RsMzIoIGIsIGludCggOCApICkgKTtcblx0Yi5hZGRBc3NpZ24oIGEgKTtcblx0YS5zdWJBc3NpZ24oIGMgKTtcblx0YS5iaXRYb3JBc3NpZ24oIG14X3JvdGwzMiggYywgaW50KCAxNiApICkgKTtcblx0Yy5hZGRBc3NpZ24oIGIgKTtcblx0Yi5zdWJBc3NpZ24oIGEgKTtcblx0Yi5iaXRYb3JBc3NpZ24oIG14X3JvdGwzMiggYSwgaW50KCAxOSApICkgKTtcblx0YS5hZGRBc3NpZ24oIGMgKTtcblx0Yy5zdWJBc3NpZ24oIGIgKTtcblx0Yy5iaXRYb3JBc3NpZ24oIG14X3JvdGwzMiggYiwgaW50KCA0ICkgKSApO1xuXHRiLmFkZEFzc2lnbiggYSApO1xuXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9iamZpbmFsID0gLypAX19QVVJFX18qLyBGbiggKCBbIGFfaW1tdXRhYmxlLCBiX2ltbXV0YWJsZSwgY19pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBjID0gdWludCggY19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBiID0gdWludCggYl9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBhID0gdWludCggYV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjLmJpdFhvckFzc2lnbiggYiApO1xuXHRjLnN1YkFzc2lnbiggbXhfcm90bDMyKCBiLCBpbnQoIDE0ICkgKSApO1xuXHRhLmJpdFhvckFzc2lnbiggYyApO1xuXHRhLnN1YkFzc2lnbiggbXhfcm90bDMyKCBjLCBpbnQoIDExICkgKSApO1xuXHRiLmJpdFhvckFzc2lnbiggYSApO1xuXHRiLnN1YkFzc2lnbiggbXhfcm90bDMyKCBhLCBpbnQoIDI1ICkgKSApO1xuXHRjLmJpdFhvckFzc2lnbiggYiApO1xuXHRjLnN1YkFzc2lnbiggbXhfcm90bDMyKCBiLCBpbnQoIDE2ICkgKSApO1xuXHRhLmJpdFhvckFzc2lnbiggYyApO1xuXHRhLnN1YkFzc2lnbiggbXhfcm90bDMyKCBjLCBpbnQoIDQgKSApICk7XG5cdGIuYml0WG9yQXNzaWduKCBhICk7XG5cdGIuc3ViQXNzaWduKCBteF9yb3RsMzIoIGEsIGludCggMTQgKSApICk7XG5cdGMuYml0WG9yQXNzaWduKCBiICk7XG5cdGMuc3ViQXNzaWduKCBteF9yb3RsMzIoIGIsIGludCggMjQgKSApICk7XG5cblx0cmV0dXJuIGM7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2JqZmluYWwnLFxuXHR0eXBlOiAndWludCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ2EnLCB0eXBlOiAndWludCcgfSxcblx0XHR7IG5hbWU6ICdiJywgdHlwZTogJ3VpbnQnIH0sXG5cdFx0eyBuYW1lOiAnYycsIHR5cGU6ICd1aW50JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2JpdHNfdG9fMDEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgYml0c19pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBiaXRzID0gdWludCggYml0c19pbW11dGFibGUgKS50b1ZhcigpO1xuXG5cdHJldHVybiBmbG9hdCggYml0cyApLmRpdiggZmxvYXQoIHVpbnQoIGludCggMHhmZmZmZmZmZiApICkgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9iaXRzX3RvXzAxJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnYml0cycsIHR5cGU6ICd1aW50JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2ZhZGUgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgdF9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCB0ID0gZmxvYXQoIHRfaW1tdXRhYmxlICkudG9WYXIoKTtcblxuXHRyZXR1cm4gdC5tdWwoIHQgKS5tdWwoIHQgKS5tdWwoIHQubXVsKCB0Lm11bCggNi4wICkuc3ViKCAxNS4wICkgKS5hZGQoIDEwLjAgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9mYWRlJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAndCcsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9oYXNoX2ludF8wID0gLypAX19QVVJFX18qLyBGbiggKCBbIHhfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgeCA9IGludCggeF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBsZW4gPSB1aW50KCB1aW50KCAxICkgKS50b1ZhcigpO1xuXHRjb25zdCBzZWVkID0gdWludCggdWludCggaW50KCAweGRlYWRiZWVmICkgKS5hZGQoIGxlbi5zaGlmdExlZnQoIHVpbnQoIDIgKSApICkuYWRkKCB1aW50KCAxMyApICkgKS50b1ZhcigpO1xuXG5cdHJldHVybiBteF9iamZpbmFsKCBzZWVkLmFkZCggdWludCggeCApICksIHNlZWQsIHNlZWQgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfaGFzaF9pbnRfMCcsXG5cdHR5cGU6ICd1aW50Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAneCcsIHR5cGU6ICdpbnQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfaGFzaF9pbnRfMSA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyB4X2ltbXV0YWJsZSwgeV9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCB5ID0gaW50KCB5X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHggPSBpbnQoIHhfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgbGVuID0gdWludCggdWludCggMiApICkudG9WYXIoKTtcblx0Y29uc3QgYSA9IHVpbnQoKS50b1ZhcigpLCBiID0gdWludCgpLnRvVmFyKCksIGMgPSB1aW50KCkudG9WYXIoKTtcblx0YS5hc3NpZ24oIGIuYXNzaWduKCBjLmFzc2lnbiggdWludCggaW50KCAweGRlYWRiZWVmICkgKS5hZGQoIGxlbi5zaGlmdExlZnQoIHVpbnQoIDIgKSApICkuYWRkKCB1aW50KCAxMyApICkgKSApICk7XG5cdGEuYWRkQXNzaWduKCB1aW50KCB4ICkgKTtcblx0Yi5hZGRBc3NpZ24oIHVpbnQoIHkgKSApO1xuXG5cdHJldHVybiBteF9iamZpbmFsKCBhLCBiLCBjICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2hhc2hfaW50XzEnLFxuXHR0eXBlOiAndWludCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3gnLCB0eXBlOiAnaW50JyB9LFxuXHRcdHsgbmFtZTogJ3knLCB0eXBlOiAnaW50JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2hhc2hfaW50XzIgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgeF9pbW11dGFibGUsIHlfaW1tdXRhYmxlLCB6X2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IHogPSBpbnQoIHpfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeSA9IGludCggeV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB4ID0gaW50KCB4X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGxlbiA9IHVpbnQoIHVpbnQoIDMgKSApLnRvVmFyKCk7XG5cdGNvbnN0IGEgPSB1aW50KCkudG9WYXIoKSwgYiA9IHVpbnQoKS50b1ZhcigpLCBjID0gdWludCgpLnRvVmFyKCk7XG5cdGEuYXNzaWduKCBiLmFzc2lnbiggYy5hc3NpZ24oIHVpbnQoIGludCggMHhkZWFkYmVlZiApICkuYWRkKCBsZW4uc2hpZnRMZWZ0KCB1aW50KCAyICkgKSApLmFkZCggdWludCggMTMgKSApICkgKSApO1xuXHRhLmFkZEFzc2lnbiggdWludCggeCApICk7XG5cdGIuYWRkQXNzaWduKCB1aW50KCB5ICkgKTtcblx0Yy5hZGRBc3NpZ24oIHVpbnQoIHogKSApO1xuXG5cdHJldHVybiBteF9iamZpbmFsKCBhLCBiLCBjICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2hhc2hfaW50XzInLFxuXHR0eXBlOiAndWludCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3gnLCB0eXBlOiAnaW50JyB9LFxuXHRcdHsgbmFtZTogJ3knLCB0eXBlOiAnaW50JyB9LFxuXHRcdHsgbmFtZTogJ3onLCB0eXBlOiAnaW50JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2hhc2hfaW50XzMgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgeF9pbW11dGFibGUsIHlfaW1tdXRhYmxlLCB6X2ltbXV0YWJsZSwgeHhfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgeHggPSBpbnQoIHh4X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHogPSBpbnQoIHpfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeSA9IGludCggeV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB4ID0gaW50KCB4X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGxlbiA9IHVpbnQoIHVpbnQoIDQgKSApLnRvVmFyKCk7XG5cdGNvbnN0IGEgPSB1aW50KCkudG9WYXIoKSwgYiA9IHVpbnQoKS50b1ZhcigpLCBjID0gdWludCgpLnRvVmFyKCk7XG5cdGEuYXNzaWduKCBiLmFzc2lnbiggYy5hc3NpZ24oIHVpbnQoIGludCggMHhkZWFkYmVlZiApICkuYWRkKCBsZW4uc2hpZnRMZWZ0KCB1aW50KCAyICkgKSApLmFkZCggdWludCggMTMgKSApICkgKSApO1xuXHRhLmFkZEFzc2lnbiggdWludCggeCApICk7XG5cdGIuYWRkQXNzaWduKCB1aW50KCB5ICkgKTtcblx0Yy5hZGRBc3NpZ24oIHVpbnQoIHogKSApO1xuXHRteF9iam1peCggYSwgYiwgYyApO1xuXHRhLmFkZEFzc2lnbiggdWludCggeHggKSApO1xuXG5cdHJldHVybiBteF9iamZpbmFsKCBhLCBiLCBjICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2hhc2hfaW50XzMnLFxuXHR0eXBlOiAndWludCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3gnLCB0eXBlOiAnaW50JyB9LFxuXHRcdHsgbmFtZTogJ3knLCB0eXBlOiAnaW50JyB9LFxuXHRcdHsgbmFtZTogJ3onLCB0eXBlOiAnaW50JyB9LFxuXHRcdHsgbmFtZTogJ3h4JywgdHlwZTogJ2ludCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9oYXNoX2ludF80ID0gLypAX19QVVJFX18qLyBGbiggKCBbIHhfaW1tdXRhYmxlLCB5X2ltbXV0YWJsZSwgel9pbW11dGFibGUsIHh4X2ltbXV0YWJsZSwgeXlfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgeXkgPSBpbnQoIHl5X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHh4ID0gaW50KCB4eF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB6ID0gaW50KCB6X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHkgPSBpbnQoIHlfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeCA9IGludCggeF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBsZW4gPSB1aW50KCB1aW50KCA1ICkgKS50b1ZhcigpO1xuXHRjb25zdCBhID0gdWludCgpLnRvVmFyKCksIGIgPSB1aW50KCkudG9WYXIoKSwgYyA9IHVpbnQoKS50b1ZhcigpO1xuXHRhLmFzc2lnbiggYi5hc3NpZ24oIGMuYXNzaWduKCB1aW50KCBpbnQoIDB4ZGVhZGJlZWYgKSApLmFkZCggbGVuLnNoaWZ0TGVmdCggdWludCggMiApICkgKS5hZGQoIHVpbnQoIDEzICkgKSApICkgKTtcblx0YS5hZGRBc3NpZ24oIHVpbnQoIHggKSApO1xuXHRiLmFkZEFzc2lnbiggdWludCggeSApICk7XG5cdGMuYWRkQXNzaWduKCB1aW50KCB6ICkgKTtcblx0bXhfYmptaXgoIGEsIGIsIGMgKTtcblx0YS5hZGRBc3NpZ24oIHVpbnQoIHh4ICkgKTtcblx0Yi5hZGRBc3NpZ24oIHVpbnQoIHl5ICkgKTtcblxuXHRyZXR1cm4gbXhfYmpmaW5hbCggYSwgYiwgYyApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9oYXNoX2ludF80Jyxcblx0dHlwZTogJ3VpbnQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICd4JywgdHlwZTogJ2ludCcgfSxcblx0XHR7IG5hbWU6ICd5JywgdHlwZTogJ2ludCcgfSxcblx0XHR7IG5hbWU6ICd6JywgdHlwZTogJ2ludCcgfSxcblx0XHR7IG5hbWU6ICd4eCcsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAneXknLCB0eXBlOiAnaW50JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2hhc2hfaW50ID0gLypAX19QVVJFX18qLyBvdmVybG9hZGluZ0ZuKCBbIG14X2hhc2hfaW50XzAsIG14X2hhc2hfaW50XzEsIG14X2hhc2hfaW50XzIsIG14X2hhc2hfaW50XzMsIG14X2hhc2hfaW50XzQgXSApO1xuXG5leHBvcnQgY29uc3QgbXhfaGFzaF92ZWMzXzAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgeF9pbW11dGFibGUsIHlfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgeSA9IGludCggeV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB4ID0gaW50KCB4X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGggPSB1aW50KCBteF9oYXNoX2ludCggeCwgeSApICkudG9WYXIoKTtcblx0Y29uc3QgcmVzdWx0ID0gdXZlYzMoKS50b1ZhcigpO1xuXHRyZXN1bHQueC5hc3NpZ24oIGguYml0QW5kKCBpbnQoIDB4RkYgKSApICk7XG5cdHJlc3VsdC55LmFzc2lnbiggaC5zaGlmdFJpZ2h0KCBpbnQoIDggKSApLmJpdEFuZCggaW50KCAweEZGICkgKSApO1xuXHRyZXN1bHQuei5hc3NpZ24oIGguc2hpZnRSaWdodCggaW50KCAxNiApICkuYml0QW5kKCBpbnQoIDB4RkYgKSApICk7XG5cblx0cmV0dXJuIHJlc3VsdDtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfaGFzaF92ZWMzXzAnLFxuXHR0eXBlOiAndXZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICd4JywgdHlwZTogJ2ludCcgfSxcblx0XHR7IG5hbWU6ICd5JywgdHlwZTogJ2ludCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9oYXNoX3ZlYzNfMSA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyB4X2ltbXV0YWJsZSwgeV9pbW11dGFibGUsIHpfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgeiA9IGludCggel9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB5ID0gaW50KCB5X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHggPSBpbnQoIHhfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgaCA9IHVpbnQoIG14X2hhc2hfaW50KCB4LCB5LCB6ICkgKS50b1ZhcigpO1xuXHRjb25zdCByZXN1bHQgPSB1dmVjMygpLnRvVmFyKCk7XG5cdHJlc3VsdC54LmFzc2lnbiggaC5iaXRBbmQoIGludCggMHhGRiApICkgKTtcblx0cmVzdWx0LnkuYXNzaWduKCBoLnNoaWZ0UmlnaHQoIGludCggOCApICkuYml0QW5kKCBpbnQoIDB4RkYgKSApICk7XG5cdHJlc3VsdC56LmFzc2lnbiggaC5zaGlmdFJpZ2h0KCBpbnQoIDE2ICkgKS5iaXRBbmQoIGludCggMHhGRiApICkgKTtcblxuXHRyZXR1cm4gcmVzdWx0O1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9oYXNoX3ZlYzNfMScsXG5cdHR5cGU6ICd1dmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3gnLCB0eXBlOiAnaW50JyB9LFxuXHRcdHsgbmFtZTogJ3knLCB0eXBlOiAnaW50JyB9LFxuXHRcdHsgbmFtZTogJ3onLCB0eXBlOiAnaW50JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2hhc2hfdmVjMyA9IC8qQF9fUFVSRV9fKi8gb3ZlcmxvYWRpbmdGbiggWyBteF9oYXNoX3ZlYzNfMCwgbXhfaGFzaF92ZWMzXzEgXSApO1xuXG5leHBvcnQgY29uc3QgbXhfcGVybGluX25vaXNlX2Zsb2F0XzAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBwID0gdmVjMiggcF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBYID0gaW50KCkudG9WYXIoKSwgWSA9IGludCgpLnRvVmFyKCk7XG5cdGNvbnN0IGZ4ID0gZmxvYXQoIG14X2Zsb29yZnJhYyggcC54LCBYICkgKS50b1ZhcigpO1xuXHRjb25zdCBmeSA9IGZsb2F0KCBteF9mbG9vcmZyYWMoIHAueSwgWSApICkudG9WYXIoKTtcblx0Y29uc3QgdSA9IGZsb2F0KCBteF9mYWRlKCBmeCApICkudG9WYXIoKTtcblx0Y29uc3QgdiA9IGZsb2F0KCBteF9mYWRlKCBmeSApICkudG9WYXIoKTtcblx0Y29uc3QgcmVzdWx0ID0gZmxvYXQoIG14X2JpbGVycCggbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLCBZICksIGZ4LCBmeSApLCBteF9ncmFkaWVudF9mbG9hdCggbXhfaGFzaF9pbnQoIFguYWRkKCBpbnQoIDEgKSApLCBZICksIGZ4LnN1YiggMS4wICksIGZ5ICksIG14X2dyYWRpZW50X2Zsb2F0KCBteF9oYXNoX2ludCggWCwgWS5hZGQoIGludCggMSApICkgKSwgZngsIGZ5LnN1YiggMS4wICkgKSwgbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLmFkZCggaW50KCAxICkgKSwgWS5hZGQoIGludCggMSApICkgKSwgZnguc3ViKCAxLjAgKSwgZnkuc3ViKCAxLjAgKSApLCB1LCB2ICkgKS50b1ZhcigpO1xuXG5cdHJldHVybiBteF9ncmFkaWVudF9zY2FsZTJkKCByZXN1bHQgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfcGVybGluX25vaXNlX2Zsb2F0XzAnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ3ZlYzInIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfcGVybGluX25vaXNlX2Zsb2F0XzEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBwID0gdmVjMyggcF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBYID0gaW50KCkudG9WYXIoKSwgWSA9IGludCgpLnRvVmFyKCksIFogPSBpbnQoKS50b1ZhcigpO1xuXHRjb25zdCBmeCA9IGZsb2F0KCBteF9mbG9vcmZyYWMoIHAueCwgWCApICkudG9WYXIoKTtcblx0Y29uc3QgZnkgPSBmbG9hdCggbXhfZmxvb3JmcmFjKCBwLnksIFkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IGZ6ID0gZmxvYXQoIG14X2Zsb29yZnJhYyggcC56LCBaICkgKS50b1ZhcigpO1xuXHRjb25zdCB1ID0gZmxvYXQoIG14X2ZhZGUoIGZ4ICkgKS50b1ZhcigpO1xuXHRjb25zdCB2ID0gZmxvYXQoIG14X2ZhZGUoIGZ5ICkgKS50b1ZhcigpO1xuXHRjb25zdCB3ID0gZmxvYXQoIG14X2ZhZGUoIGZ6ICkgKS50b1ZhcigpO1xuXHRjb25zdCByZXN1bHQgPSBmbG9hdCggbXhfdHJpbGVycCggbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLCBZLCBaICksIGZ4LCBmeSwgZnogKSwgbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLmFkZCggaW50KCAxICkgKSwgWSwgWiApLCBmeC5zdWIoIDEuMCApLCBmeSwgZnogKSwgbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLCBZLmFkZCggaW50KCAxICkgKSwgWiApLCBmeCwgZnkuc3ViKCAxLjAgKSwgZnogKSwgbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLmFkZCggaW50KCAxICkgKSwgWS5hZGQoIGludCggMSApICksIFogKSwgZnguc3ViKCAxLjAgKSwgZnkuc3ViKCAxLjAgKSwgZnogKSwgbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLCBZLCBaLmFkZCggaW50KCAxICkgKSApLCBmeCwgZnksIGZ6LnN1YiggMS4wICkgKSwgbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLmFkZCggaW50KCAxICkgKSwgWSwgWi5hZGQoIGludCggMSApICkgKSwgZnguc3ViKCAxLjAgKSwgZnksIGZ6LnN1YiggMS4wICkgKSwgbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLCBZLmFkZCggaW50KCAxICkgKSwgWi5hZGQoIGludCggMSApICkgKSwgZngsIGZ5LnN1YiggMS4wICksIGZ6LnN1YiggMS4wICkgKSwgbXhfZ3JhZGllbnRfZmxvYXQoIG14X2hhc2hfaW50KCBYLmFkZCggaW50KCAxICkgKSwgWS5hZGQoIGludCggMSApICksIFouYWRkKCBpbnQoIDEgKSApICksIGZ4LnN1YiggMS4wICksIGZ5LnN1YiggMS4wICksIGZ6LnN1YiggMS4wICkgKSwgdSwgdiwgdyApICkudG9WYXIoKTtcblxuXHRyZXR1cm4gbXhfZ3JhZGllbnRfc2NhbGUzZCggcmVzdWx0ICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X3Blcmxpbl9ub2lzZV9mbG9hdF8xJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncCcsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X3Blcmxpbl9ub2lzZV9mbG9hdCA9IC8qQF9fUFVSRV9fKi8gb3ZlcmxvYWRpbmdGbiggWyBteF9wZXJsaW5fbm9pc2VfZmxvYXRfMCwgbXhfcGVybGluX25vaXNlX2Zsb2F0XzEgXSApO1xuXG5leHBvcnQgY29uc3QgbXhfcGVybGluX25vaXNlX3ZlYzNfMCA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBwX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IHAgPSB2ZWMyKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IFggPSBpbnQoKS50b1ZhcigpLCBZID0gaW50KCkudG9WYXIoKTtcblx0Y29uc3QgZnggPSBmbG9hdCggbXhfZmxvb3JmcmFjKCBwLngsIFggKSApLnRvVmFyKCk7XG5cdGNvbnN0IGZ5ID0gZmxvYXQoIG14X2Zsb29yZnJhYyggcC55LCBZICkgKS50b1ZhcigpO1xuXHRjb25zdCB1ID0gZmxvYXQoIG14X2ZhZGUoIGZ4ICkgKS50b1ZhcigpO1xuXHRjb25zdCB2ID0gZmxvYXQoIG14X2ZhZGUoIGZ5ICkgKS50b1ZhcigpO1xuXHRjb25zdCByZXN1bHQgPSB2ZWMzKCBteF9iaWxlcnAoIG14X2dyYWRpZW50X3ZlYzMoIG14X2hhc2hfdmVjMyggWCwgWSApLCBmeCwgZnkgKSwgbXhfZ3JhZGllbnRfdmVjMyggbXhfaGFzaF92ZWMzKCBYLmFkZCggaW50KCAxICkgKSwgWSApLCBmeC5zdWIoIDEuMCApLCBmeSApLCBteF9ncmFkaWVudF92ZWMzKCBteF9oYXNoX3ZlYzMoIFgsIFkuYWRkKCBpbnQoIDEgKSApICksIGZ4LCBmeS5zdWIoIDEuMCApICksIG14X2dyYWRpZW50X3ZlYzMoIG14X2hhc2hfdmVjMyggWC5hZGQoIGludCggMSApICksIFkuYWRkKCBpbnQoIDEgKSApICksIGZ4LnN1YiggMS4wICksIGZ5LnN1YiggMS4wICkgKSwgdSwgdiApICkudG9WYXIoKTtcblxuXHRyZXR1cm4gbXhfZ3JhZGllbnRfc2NhbGUyZCggcmVzdWx0ICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X3Blcmxpbl9ub2lzZV92ZWMzXzAnLFxuXHR0eXBlOiAndmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3AnLCB0eXBlOiAndmVjMicgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9wZXJsaW5fbm9pc2VfdmVjM18xID0gLypAX19QVVJFX18qLyBGbiggKCBbIHBfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgcCA9IHZlYzMoIHBfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgWCA9IGludCgpLnRvVmFyKCksIFkgPSBpbnQoKS50b1ZhcigpLCBaID0gaW50KCkudG9WYXIoKTtcblx0Y29uc3QgZnggPSBmbG9hdCggbXhfZmxvb3JmcmFjKCBwLngsIFggKSApLnRvVmFyKCk7XG5cdGNvbnN0IGZ5ID0gZmxvYXQoIG14X2Zsb29yZnJhYyggcC55LCBZICkgKS50b1ZhcigpO1xuXHRjb25zdCBmeiA9IGZsb2F0KCBteF9mbG9vcmZyYWMoIHAueiwgWiApICkudG9WYXIoKTtcblx0Y29uc3QgdSA9IGZsb2F0KCBteF9mYWRlKCBmeCApICkudG9WYXIoKTtcblx0Y29uc3QgdiA9IGZsb2F0KCBteF9mYWRlKCBmeSApICkudG9WYXIoKTtcblx0Y29uc3QgdyA9IGZsb2F0KCBteF9mYWRlKCBmeiApICkudG9WYXIoKTtcblx0Y29uc3QgcmVzdWx0ID0gdmVjMyggbXhfdHJpbGVycCggbXhfZ3JhZGllbnRfdmVjMyggbXhfaGFzaF92ZWMzKCBYLCBZLCBaICksIGZ4LCBmeSwgZnogKSwgbXhfZ3JhZGllbnRfdmVjMyggbXhfaGFzaF92ZWMzKCBYLmFkZCggaW50KCAxICkgKSwgWSwgWiApLCBmeC5zdWIoIDEuMCApLCBmeSwgZnogKSwgbXhfZ3JhZGllbnRfdmVjMyggbXhfaGFzaF92ZWMzKCBYLCBZLmFkZCggaW50KCAxICkgKSwgWiApLCBmeCwgZnkuc3ViKCAxLjAgKSwgZnogKSwgbXhfZ3JhZGllbnRfdmVjMyggbXhfaGFzaF92ZWMzKCBYLmFkZCggaW50KCAxICkgKSwgWS5hZGQoIGludCggMSApICksIFogKSwgZnguc3ViKCAxLjAgKSwgZnkuc3ViKCAxLjAgKSwgZnogKSwgbXhfZ3JhZGllbnRfdmVjMyggbXhfaGFzaF92ZWMzKCBYLCBZLCBaLmFkZCggaW50KCAxICkgKSApLCBmeCwgZnksIGZ6LnN1YiggMS4wICkgKSwgbXhfZ3JhZGllbnRfdmVjMyggbXhfaGFzaF92ZWMzKCBYLmFkZCggaW50KCAxICkgKSwgWSwgWi5hZGQoIGludCggMSApICkgKSwgZnguc3ViKCAxLjAgKSwgZnksIGZ6LnN1YiggMS4wICkgKSwgbXhfZ3JhZGllbnRfdmVjMyggbXhfaGFzaF92ZWMzKCBYLCBZLmFkZCggaW50KCAxICkgKSwgWi5hZGQoIGludCggMSApICkgKSwgZngsIGZ5LnN1YiggMS4wICksIGZ6LnN1YiggMS4wICkgKSwgbXhfZ3JhZGllbnRfdmVjMyggbXhfaGFzaF92ZWMzKCBYLmFkZCggaW50KCAxICkgKSwgWS5hZGQoIGludCggMSApICksIFouYWRkKCBpbnQoIDEgKSApICksIGZ4LnN1YiggMS4wICksIGZ5LnN1YiggMS4wICksIGZ6LnN1YiggMS4wICkgKSwgdSwgdiwgdyApICkudG9WYXIoKTtcblxuXHRyZXR1cm4gbXhfZ3JhZGllbnRfc2NhbGUzZCggcmVzdWx0ICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X3Blcmxpbl9ub2lzZV92ZWMzXzEnLFxuXHR0eXBlOiAndmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3AnLCB0eXBlOiAndmVjMycgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9wZXJsaW5fbm9pc2VfdmVjMyA9IC8qQF9fUFVSRV9fKi8gb3ZlcmxvYWRpbmdGbiggWyBteF9wZXJsaW5fbm9pc2VfdmVjM18wLCBteF9wZXJsaW5fbm9pc2VfdmVjM18xIF0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2NlbGxfbm9pc2VfZmxvYXRfMCA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBwX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IHAgPSBmbG9hdCggcF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBpeCA9IGludCggbXhfZmxvb3IoIHAgKSApLnRvVmFyKCk7XG5cblx0cmV0dXJuIG14X2JpdHNfdG9fMDEoIG14X2hhc2hfaW50KCBpeCApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2NlbGxfbm9pc2VfZmxvYXRfMCcsXG5cdHR5cGU6ICdmbG9hdCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3AnLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfY2VsbF9ub2lzZV9mbG9hdF8xID0gLypAX19QVVJFX18qLyBGbiggKCBbIHBfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgcCA9IHZlYzIoIHBfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgaXggPSBpbnQoIG14X2Zsb29yKCBwLnggKSApLnRvVmFyKCk7XG5cdGNvbnN0IGl5ID0gaW50KCBteF9mbG9vciggcC55ICkgKS50b1ZhcigpO1xuXG5cdHJldHVybiBteF9iaXRzX3RvXzAxKCBteF9oYXNoX2ludCggaXgsIGl5ICkgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfY2VsbF9ub2lzZV9mbG9hdF8xJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncCcsIHR5cGU6ICd2ZWMyJyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2NlbGxfbm9pc2VfZmxvYXRfMiA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBwX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IHAgPSB2ZWMzKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGl4ID0gaW50KCBteF9mbG9vciggcC54ICkgKS50b1ZhcigpO1xuXHRjb25zdCBpeSA9IGludCggbXhfZmxvb3IoIHAueSApICkudG9WYXIoKTtcblx0Y29uc3QgaXogPSBpbnQoIG14X2Zsb29yKCBwLnogKSApLnRvVmFyKCk7XG5cblx0cmV0dXJuIG14X2JpdHNfdG9fMDEoIG14X2hhc2hfaW50KCBpeCwgaXksIGl6ICkgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfY2VsbF9ub2lzZV9mbG9hdF8yJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncCcsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2NlbGxfbm9pc2VfZmxvYXRfMyA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBwX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IHAgPSB2ZWM0KCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGl4ID0gaW50KCBteF9mbG9vciggcC54ICkgKS50b1ZhcigpO1xuXHRjb25zdCBpeSA9IGludCggbXhfZmxvb3IoIHAueSApICkudG9WYXIoKTtcblx0Y29uc3QgaXogPSBpbnQoIG14X2Zsb29yKCBwLnogKSApLnRvVmFyKCk7XG5cdGNvbnN0IGl3ID0gaW50KCBteF9mbG9vciggcC53ICkgKS50b1ZhcigpO1xuXG5cdHJldHVybiBteF9iaXRzX3RvXzAxKCBteF9oYXNoX2ludCggaXgsIGl5LCBpeiwgaXcgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9jZWxsX25vaXNlX2Zsb2F0XzMnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ3ZlYzQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfY2VsbF9ub2lzZV9mbG9hdCA9IC8qQF9fUFVSRV9fKi8gb3ZlcmxvYWRpbmdGbiggWyBteF9jZWxsX25vaXNlX2Zsb2F0XzAsIG14X2NlbGxfbm9pc2VfZmxvYXRfMSwgbXhfY2VsbF9ub2lzZV9mbG9hdF8yLCBteF9jZWxsX25vaXNlX2Zsb2F0XzMgXSApO1xuXG5leHBvcnQgY29uc3QgbXhfY2VsbF9ub2lzZV92ZWMzXzAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBwID0gZmxvYXQoIHBfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgaXggPSBpbnQoIG14X2Zsb29yKCBwICkgKS50b1ZhcigpO1xuXG5cdHJldHVybiB2ZWMzKCBteF9iaXRzX3RvXzAxKCBteF9oYXNoX2ludCggaXgsIGludCggMCApICkgKSwgbXhfYml0c190b18wMSggbXhfaGFzaF9pbnQoIGl4LCBpbnQoIDEgKSApICksIG14X2JpdHNfdG9fMDEoIG14X2hhc2hfaW50KCBpeCwgaW50KCAyICkgKSApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2NlbGxfbm9pc2VfdmVjM18wJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2NlbGxfbm9pc2VfdmVjM18xID0gLypAX19QVVJFX18qLyBGbiggKCBbIHBfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgcCA9IHZlYzIoIHBfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgaXggPSBpbnQoIG14X2Zsb29yKCBwLnggKSApLnRvVmFyKCk7XG5cdGNvbnN0IGl5ID0gaW50KCBteF9mbG9vciggcC55ICkgKS50b1ZhcigpO1xuXG5cdHJldHVybiB2ZWMzKCBteF9iaXRzX3RvXzAxKCBteF9oYXNoX2ludCggaXgsIGl5LCBpbnQoIDAgKSApICksIG14X2JpdHNfdG9fMDEoIG14X2hhc2hfaW50KCBpeCwgaXksIGludCggMSApICkgKSwgbXhfYml0c190b18wMSggbXhfaGFzaF9pbnQoIGl4LCBpeSwgaW50KCAyICkgKSApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2NlbGxfbm9pc2VfdmVjM18xJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ3ZlYzInIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfY2VsbF9ub2lzZV92ZWMzXzIgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBwID0gdmVjMyggcF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBpeCA9IGludCggbXhfZmxvb3IoIHAueCApICkudG9WYXIoKTtcblx0Y29uc3QgaXkgPSBpbnQoIG14X2Zsb29yKCBwLnkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IGl6ID0gaW50KCBteF9mbG9vciggcC56ICkgKS50b1ZhcigpO1xuXG5cdHJldHVybiB2ZWMzKCBteF9iaXRzX3RvXzAxKCBteF9oYXNoX2ludCggaXgsIGl5LCBpeiwgaW50KCAwICkgKSApLCBteF9iaXRzX3RvXzAxKCBteF9oYXNoX2ludCggaXgsIGl5LCBpeiwgaW50KCAxICkgKSApLCBteF9iaXRzX3RvXzAxKCBteF9oYXNoX2ludCggaXgsIGl5LCBpeiwgaW50KCAyICkgKSApICk7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2NlbGxfbm9pc2VfdmVjM18yJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ3ZlYzMnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfY2VsbF9ub2lzZV92ZWMzXzMgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBwID0gdmVjNCggcF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBpeCA9IGludCggbXhfZmxvb3IoIHAueCApICkudG9WYXIoKTtcblx0Y29uc3QgaXkgPSBpbnQoIG14X2Zsb29yKCBwLnkgKSApLnRvVmFyKCk7XG5cdGNvbnN0IGl6ID0gaW50KCBteF9mbG9vciggcC56ICkgKS50b1ZhcigpO1xuXHRjb25zdCBpdyA9IGludCggbXhfZmxvb3IoIHAudyApICkudG9WYXIoKTtcblxuXHRyZXR1cm4gdmVjMyggbXhfYml0c190b18wMSggbXhfaGFzaF9pbnQoIGl4LCBpeSwgaXosIGl3LCBpbnQoIDAgKSApICksIG14X2JpdHNfdG9fMDEoIG14X2hhc2hfaW50KCBpeCwgaXksIGl6LCBpdywgaW50KCAxICkgKSApLCBteF9iaXRzX3RvXzAxKCBteF9oYXNoX2ludCggaXgsIGl5LCBpeiwgaXcsIGludCggMiApICkgKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9jZWxsX25vaXNlX3ZlYzNfMycsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncCcsIHR5cGU6ICd2ZWM0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2NlbGxfbm9pc2VfdmVjMyA9IC8qQF9fUFVSRV9fKi8gb3ZlcmxvYWRpbmdGbiggWyBteF9jZWxsX25vaXNlX3ZlYzNfMCwgbXhfY2VsbF9ub2lzZV92ZWMzXzEsIG14X2NlbGxfbm9pc2VfdmVjM18yLCBteF9jZWxsX25vaXNlX3ZlYzNfMyBdICk7XG5cbmV4cG9ydCBjb25zdCBteF9mcmFjdGFsX25vaXNlX2Zsb2F0ID0gLypAX19QVVJFX18qLyBGbiggKCBbIHBfaW1tdXRhYmxlLCBvY3RhdmVzX2ltbXV0YWJsZSwgbGFjdW5hcml0eV9pbW11dGFibGUsIGRpbWluaXNoX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IGRpbWluaXNoID0gZmxvYXQoIGRpbWluaXNoX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGxhY3VuYXJpdHkgPSBmbG9hdCggbGFjdW5hcml0eV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBvY3RhdmVzID0gaW50KCBvY3RhdmVzX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHAgPSB2ZWMzKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHJlc3VsdCA9IGZsb2F0KCAwLjAgKS50b1ZhcigpO1xuXHRjb25zdCBhbXBsaXR1ZGUgPSBmbG9hdCggMS4wICkudG9WYXIoKTtcblxuXHRMb29wKCBvY3RhdmVzLCAoKSA9PiB7XG5cblx0XHRyZXN1bHQuYWRkQXNzaWduKCBhbXBsaXR1ZGUubXVsKCBteF9wZXJsaW5fbm9pc2VfZmxvYXQoIHAgKSApICk7XG5cdFx0YW1wbGl0dWRlLm11bEFzc2lnbiggZGltaW5pc2ggKTtcblx0XHRwLm11bEFzc2lnbiggbGFjdW5hcml0eSApO1xuXG5cdH0gKTtcblxuXHRyZXR1cm4gcmVzdWx0O1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9mcmFjdGFsX25vaXNlX2Zsb2F0Jyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncCcsIHR5cGU6ICd2ZWMzJyB9LFxuXHRcdHsgbmFtZTogJ29jdGF2ZXMnLCB0eXBlOiAnaW50JyB9LFxuXHRcdHsgbmFtZTogJ2xhY3VuYXJpdHknLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAnZGltaW5pc2gnLCB0eXBlOiAnZmxvYXQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfZnJhY3RhbF9ub2lzZV92ZWMzID0gLypAX19QVVJFX18qLyBGbiggKCBbIHBfaW1tdXRhYmxlLCBvY3RhdmVzX2ltbXV0YWJsZSwgbGFjdW5hcml0eV9pbW11dGFibGUsIGRpbWluaXNoX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IGRpbWluaXNoID0gZmxvYXQoIGRpbWluaXNoX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGxhY3VuYXJpdHkgPSBmbG9hdCggbGFjdW5hcml0eV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBvY3RhdmVzID0gaW50KCBvY3RhdmVzX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHAgPSB2ZWMzKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHJlc3VsdCA9IHZlYzMoIDAuMCApLnRvVmFyKCk7XG5cdGNvbnN0IGFtcGxpdHVkZSA9IGZsb2F0KCAxLjAgKS50b1ZhcigpO1xuXG5cdExvb3AoIG9jdGF2ZXMsICgpID0+IHtcblxuXHRcdHJlc3VsdC5hZGRBc3NpZ24oIGFtcGxpdHVkZS5tdWwoIG14X3Blcmxpbl9ub2lzZV92ZWMzKCBwICkgKSApO1xuXHRcdGFtcGxpdHVkZS5tdWxBc3NpZ24oIGRpbWluaXNoICk7XG5cdFx0cC5tdWxBc3NpZ24oIGxhY3VuYXJpdHkgKTtcblxuXHR9ICk7XG5cblx0cmV0dXJuIHJlc3VsdDtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfZnJhY3RhbF9ub2lzZV92ZWMzJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAnb2N0YXZlcycsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAnbGFjdW5hcml0eScsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdkaW1pbmlzaCcsIHR5cGU6ICdmbG9hdCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9mcmFjdGFsX25vaXNlX3ZlYzIgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUsIG9jdGF2ZXNfaW1tdXRhYmxlLCBsYWN1bmFyaXR5X2ltbXV0YWJsZSwgZGltaW5pc2hfaW1tdXRhYmxlIF0gKSA9PiB7XG5cblx0Y29uc3QgZGltaW5pc2ggPSBmbG9hdCggZGltaW5pc2hfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgbGFjdW5hcml0eSA9IGZsb2F0KCBsYWN1bmFyaXR5X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IG9jdGF2ZXMgPSBpbnQoIG9jdGF2ZXNfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgcCA9IHZlYzMoIHBfaW1tdXRhYmxlICkudG9WYXIoKTtcblxuXHRyZXR1cm4gdmVjMiggbXhfZnJhY3RhbF9ub2lzZV9mbG9hdCggcCwgb2N0YXZlcywgbGFjdW5hcml0eSwgZGltaW5pc2ggKSwgbXhfZnJhY3RhbF9ub2lzZV9mbG9hdCggcC5hZGQoIHZlYzMoIGludCggMTkgKSwgaW50KCAxOTMgKSwgaW50KCAxNyApICkgKSwgb2N0YXZlcywgbGFjdW5hcml0eSwgZGltaW5pc2ggKSApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9mcmFjdGFsX25vaXNlX3ZlYzInLFxuXHR0eXBlOiAndmVjMicsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3AnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdvY3RhdmVzJywgdHlwZTogJ2ludCcgfSxcblx0XHR7IG5hbWU6ICdsYWN1bmFyaXR5JywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ2RpbWluaXNoJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X2ZyYWN0YWxfbm9pc2VfdmVjNCA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBwX2ltbXV0YWJsZSwgb2N0YXZlc19pbW11dGFibGUsIGxhY3VuYXJpdHlfaW1tdXRhYmxlLCBkaW1pbmlzaF9pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBkaW1pbmlzaCA9IGZsb2F0KCBkaW1pbmlzaF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBsYWN1bmFyaXR5ID0gZmxvYXQoIGxhY3VuYXJpdHlfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3Qgb2N0YXZlcyA9IGludCggb2N0YXZlc19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBwID0gdmVjMyggcF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBjID0gdmVjMyggbXhfZnJhY3RhbF9ub2lzZV92ZWMzKCBwLCBvY3RhdmVzLCBsYWN1bmFyaXR5LCBkaW1pbmlzaCApICkudG9WYXIoKTtcblx0Y29uc3QgZiA9IGZsb2F0KCBteF9mcmFjdGFsX25vaXNlX2Zsb2F0KCBwLmFkZCggdmVjMyggaW50KCAxOSApLCBpbnQoIDE5MyApLCBpbnQoIDE3ICkgKSApLCBvY3RhdmVzLCBsYWN1bmFyaXR5LCBkaW1pbmlzaCApICkudG9WYXIoKTtcblxuXHRyZXR1cm4gdmVjNCggYywgZiApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9mcmFjdGFsX25vaXNlX3ZlYzQnLFxuXHR0eXBlOiAndmVjNCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3AnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdvY3RhdmVzJywgdHlwZTogJ2ludCcgfSxcblx0XHR7IG5hbWU6ICdsYWN1bmFyaXR5JywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ2RpbWluaXNoJywgdHlwZTogJ2Zsb2F0JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X3dvcmxleV9kaXN0YW5jZV8wID0gLypAX19QVVJFX18qLyBGbiggKCBbIHBfaW1tdXRhYmxlLCB4X2ltbXV0YWJsZSwgeV9pbW11dGFibGUsIHhvZmZfaW1tdXRhYmxlLCB5b2ZmX2ltbXV0YWJsZSwgaml0dGVyX2ltbXV0YWJsZSwgbWV0cmljX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IG1ldHJpYyA9IGludCggbWV0cmljX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGppdHRlciA9IGZsb2F0KCBqaXR0ZXJfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeW9mZiA9IGludCggeW9mZl9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB4b2ZmID0gaW50KCB4b2ZmX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHkgPSBpbnQoIHlfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeCA9IGludCggeF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBwID0gdmVjMiggcF9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB0bXAgPSB2ZWMzKCBteF9jZWxsX25vaXNlX3ZlYzMoIHZlYzIoIHguYWRkKCB4b2ZmICksIHkuYWRkKCB5b2ZmICkgKSApICkudG9WYXIoKTtcblx0Y29uc3Qgb2ZmID0gdmVjMiggdG1wLngsIHRtcC55ICkudG9WYXIoKTtcblx0b2ZmLnN1YkFzc2lnbiggMC41ICk7XG5cdG9mZi5tdWxBc3NpZ24oIGppdHRlciApO1xuXHRvZmYuYWRkQXNzaWduKCAwLjUgKTtcblx0Y29uc3QgY2VsbHBvcyA9IHZlYzIoIHZlYzIoIGZsb2F0KCB4ICksIGZsb2F0KCB5ICkgKS5hZGQoIG9mZiApICkudG9WYXIoKTtcblx0Y29uc3QgZGlmZiA9IHZlYzIoIGNlbGxwb3Muc3ViKCBwICkgKS50b1ZhcigpO1xuXG5cdElmKCBtZXRyaWMuZXF1YWwoIGludCggMiApICksICgpID0+IHtcblxuXHRcdHJldHVybiBhYnMoIGRpZmYueCApLmFkZCggYWJzKCBkaWZmLnkgKSApO1xuXG5cdH0gKTtcblxuXHRJZiggbWV0cmljLmVxdWFsKCBpbnQoIDMgKSApLCAoKSA9PiB7XG5cblx0XHRyZXR1cm4gbWF4KCBhYnMoIGRpZmYueCApLCBhYnMoIGRpZmYueSApICk7XG5cblx0fSApO1xuXG5cdHJldHVybiBkb3QoIGRpZmYsIGRpZmYgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfd29ybGV5X2Rpc3RhbmNlXzAnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ3ZlYzInIH0sXG5cdFx0eyBuYW1lOiAneCcsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAneScsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAneG9mZicsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAneW9mZicsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAnaml0dGVyJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ21ldHJpYycsIHR5cGU6ICdpbnQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfd29ybGV5X2Rpc3RhbmNlXzEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUsIHhfaW1tdXRhYmxlLCB5X2ltbXV0YWJsZSwgel9pbW11dGFibGUsIHhvZmZfaW1tdXRhYmxlLCB5b2ZmX2ltbXV0YWJsZSwgem9mZl9pbW11dGFibGUsIGppdHRlcl9pbW11dGFibGUsIG1ldHJpY19pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBtZXRyaWMgPSBpbnQoIG1ldHJpY19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBqaXR0ZXIgPSBmbG9hdCggaml0dGVyX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHpvZmYgPSBpbnQoIHpvZmZfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeW9mZiA9IGludCggeW9mZl9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB4b2ZmID0gaW50KCB4b2ZmX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHogPSBpbnQoIHpfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgeSA9IGludCggeV9pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCB4ID0gaW50KCB4X2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHAgPSB2ZWMzKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IG9mZiA9IHZlYzMoIG14X2NlbGxfbm9pc2VfdmVjMyggdmVjMyggeC5hZGQoIHhvZmYgKSwgeS5hZGQoIHlvZmYgKSwgei5hZGQoIHpvZmYgKSApICkgKS50b1ZhcigpO1xuXHRvZmYuc3ViQXNzaWduKCAwLjUgKTtcblx0b2ZmLm11bEFzc2lnbiggaml0dGVyICk7XG5cdG9mZi5hZGRBc3NpZ24oIDAuNSApO1xuXHRjb25zdCBjZWxscG9zID0gdmVjMyggdmVjMyggZmxvYXQoIHggKSwgZmxvYXQoIHkgKSwgZmxvYXQoIHogKSApLmFkZCggb2ZmICkgKS50b1ZhcigpO1xuXHRjb25zdCBkaWZmID0gdmVjMyggY2VsbHBvcy5zdWIoIHAgKSApLnRvVmFyKCk7XG5cblx0SWYoIG1ldHJpYy5lcXVhbCggaW50KCAyICkgKSwgKCkgPT4ge1xuXG5cdFx0cmV0dXJuIGFicyggZGlmZi54ICkuYWRkKCBhYnMoIGRpZmYueSApICkuYWRkKCBhYnMoIGRpZmYueiApICk7XG5cblx0fSApO1xuXG5cdElmKCBtZXRyaWMuZXF1YWwoIGludCggMyApICksICgpID0+IHtcblxuXHRcdHJldHVybiBtYXgoIG1heCggYWJzKCBkaWZmLnggKSwgYWJzKCBkaWZmLnkgKSApLCBhYnMoIGRpZmYueiApICk7XG5cblx0fSApO1xuXG5cdHJldHVybiBkb3QoIGRpZmYsIGRpZmYgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfd29ybGV5X2Rpc3RhbmNlXzEnLFxuXHR0eXBlOiAnZmxvYXQnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAneCcsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAneScsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAneicsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAneG9mZicsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAneW9mZicsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAnem9mZicsIHR5cGU6ICdpbnQnIH0sXG5cdFx0eyBuYW1lOiAnaml0dGVyJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ21ldHJpYycsIHR5cGU6ICdpbnQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfd29ybGV5X2Rpc3RhbmNlID0gLypAX19QVVJFX18qLyBvdmVybG9hZGluZ0ZuKCBbIG14X3dvcmxleV9kaXN0YW5jZV8wLCBteF93b3JsZXlfZGlzdGFuY2VfMSBdICk7XG5cbmV4cG9ydCBjb25zdCBteF93b3JsZXlfbm9pc2VfZmxvYXRfMCA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBwX2ltbXV0YWJsZSwgaml0dGVyX2ltbXV0YWJsZSwgbWV0cmljX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IG1ldHJpYyA9IGludCggbWV0cmljX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IGppdHRlciA9IGZsb2F0KCBqaXR0ZXJfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgcCA9IHZlYzIoIHBfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgWCA9IGludCgpLnRvVmFyKCksIFkgPSBpbnQoKS50b1ZhcigpO1xuXHRjb25zdCBsb2NhbHBvcyA9IHZlYzIoIG14X2Zsb29yZnJhYyggcC54LCBYICksIG14X2Zsb29yZnJhYyggcC55LCBZICkgKS50b1ZhcigpO1xuXHRjb25zdCBzcWRpc3QgPSBmbG9hdCggMWU2ICkudG9WYXIoKTtcblxuXHRMb29wKCB7IHN0YXJ0OiAtIDEsIGVuZDogaW50KCAxICksIG5hbWU6ICd4JywgY29uZGl0aW9uOiAnPD0nIH0sICggeyB4IH0gKSA9PiB7XG5cblx0XHRMb29wKCB7IHN0YXJ0OiAtIDEsIGVuZDogaW50KCAxICksIG5hbWU6ICd5JywgY29uZGl0aW9uOiAnPD0nIH0sICggeyB5IH0gKSA9PiB7XG5cblx0XHRcdGNvbnN0IGRpc3QgPSBmbG9hdCggbXhfd29ybGV5X2Rpc3RhbmNlKCBsb2NhbHBvcywgeCwgeSwgWCwgWSwgaml0dGVyLCBtZXRyaWMgKSApLnRvVmFyKCk7XG5cdFx0XHRzcWRpc3QuYXNzaWduKCBtaW4oIHNxZGlzdCwgZGlzdCApICk7XG5cblx0XHR9ICk7XG5cblx0fSApO1xuXG5cdElmKCBtZXRyaWMuZXF1YWwoIGludCggMCApICksICgpID0+IHtcblxuXHRcdHNxZGlzdC5hc3NpZ24oIHNxcnQoIHNxZGlzdCApICk7XG5cblx0fSApO1xuXG5cdHJldHVybiBzcWRpc3Q7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X3dvcmxleV9ub2lzZV9mbG9hdF8wJyxcblx0dHlwZTogJ2Zsb2F0Jyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncCcsIHR5cGU6ICd2ZWMyJyB9LFxuXHRcdHsgbmFtZTogJ2ppdHRlcicsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdtZXRyaWMnLCB0eXBlOiAnaW50JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X3dvcmxleV9ub2lzZV92ZWMyXzAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUsIGppdHRlcl9pbW11dGFibGUsIG1ldHJpY19pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBtZXRyaWMgPSBpbnQoIG1ldHJpY19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBqaXR0ZXIgPSBmbG9hdCggaml0dGVyX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHAgPSB2ZWMyKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IFggPSBpbnQoKS50b1ZhcigpLCBZID0gaW50KCkudG9WYXIoKTtcblx0Y29uc3QgbG9jYWxwb3MgPSB2ZWMyKCBteF9mbG9vcmZyYWMoIHAueCwgWCApLCBteF9mbG9vcmZyYWMoIHAueSwgWSApICkudG9WYXIoKTtcblx0Y29uc3Qgc3FkaXN0ID0gdmVjMiggMWU2LCAxZTYgKS50b1ZhcigpO1xuXG5cdExvb3AoIHsgc3RhcnQ6IC0gMSwgZW5kOiBpbnQoIDEgKSwgbmFtZTogJ3gnLCBjb25kaXRpb246ICc8PScgfSwgKCB7IHggfSApID0+IHtcblxuXHRcdExvb3AoIHsgc3RhcnQ6IC0gMSwgZW5kOiBpbnQoIDEgKSwgbmFtZTogJ3knLCBjb25kaXRpb246ICc8PScgfSwgKCB7IHkgfSApID0+IHtcblxuXHRcdFx0Y29uc3QgZGlzdCA9IGZsb2F0KCBteF93b3JsZXlfZGlzdGFuY2UoIGxvY2FscG9zLCB4LCB5LCBYLCBZLCBqaXR0ZXIsIG1ldHJpYyApICkudG9WYXIoKTtcblxuXHRcdFx0SWYoIGRpc3QubGVzc1RoYW4oIHNxZGlzdC54ICksICgpID0+IHtcblxuXHRcdFx0XHRzcWRpc3QueS5hc3NpZ24oIHNxZGlzdC54ICk7XG5cdFx0XHRcdHNxZGlzdC54LmFzc2lnbiggZGlzdCApO1xuXG5cdFx0XHR9ICkuRWxzZUlmKCBkaXN0Lmxlc3NUaGFuKCBzcWRpc3QueSApLCAoKSA9PiB7XG5cblx0XHRcdFx0c3FkaXN0LnkuYXNzaWduKCBkaXN0ICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH0gKTtcblxuXHR9ICk7XG5cblx0SWYoIG1ldHJpYy5lcXVhbCggaW50KCAwICkgKSwgKCkgPT4ge1xuXG5cdFx0c3FkaXN0LmFzc2lnbiggc3FydCggc3FkaXN0ICkgKTtcblxuXHR9ICk7XG5cblx0cmV0dXJuIHNxZGlzdDtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfd29ybGV5X25vaXNlX3ZlYzJfMCcsXG5cdHR5cGU6ICd2ZWMyJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAncCcsIHR5cGU6ICd2ZWMyJyB9LFxuXHRcdHsgbmFtZTogJ2ppdHRlcicsIHR5cGU6ICdmbG9hdCcgfSxcblx0XHR7IG5hbWU6ICdtZXRyaWMnLCB0eXBlOiAnaW50JyB9XG5cdF1cbn0gKTtcblxuZXhwb3J0IGNvbnN0IG14X3dvcmxleV9ub2lzZV92ZWMzXzAgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUsIGppdHRlcl9pbW11dGFibGUsIG1ldHJpY19pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBtZXRyaWMgPSBpbnQoIG1ldHJpY19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBqaXR0ZXIgPSBmbG9hdCggaml0dGVyX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHAgPSB2ZWMyKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IFggPSBpbnQoKS50b1ZhcigpLCBZID0gaW50KCkudG9WYXIoKTtcblx0Y29uc3QgbG9jYWxwb3MgPSB2ZWMyKCBteF9mbG9vcmZyYWMoIHAueCwgWCApLCBteF9mbG9vcmZyYWMoIHAueSwgWSApICkudG9WYXIoKTtcblx0Y29uc3Qgc3FkaXN0ID0gdmVjMyggMWU2LCAxZTYsIDFlNiApLnRvVmFyKCk7XG5cblx0TG9vcCggeyBzdGFydDogLSAxLCBlbmQ6IGludCggMSApLCBuYW1lOiAneCcsIGNvbmRpdGlvbjogJzw9JyB9LCAoIHsgeCB9ICkgPT4ge1xuXG5cdFx0TG9vcCggeyBzdGFydDogLSAxLCBlbmQ6IGludCggMSApLCBuYW1lOiAneScsIGNvbmRpdGlvbjogJzw9JyB9LCAoIHsgeSB9ICkgPT4ge1xuXG5cdFx0XHRjb25zdCBkaXN0ID0gZmxvYXQoIG14X3dvcmxleV9kaXN0YW5jZSggbG9jYWxwb3MsIHgsIHksIFgsIFksIGppdHRlciwgbWV0cmljICkgKS50b1ZhcigpO1xuXG5cdFx0XHRJZiggZGlzdC5sZXNzVGhhbiggc3FkaXN0LnggKSwgKCkgPT4ge1xuXG5cdFx0XHRcdHNxZGlzdC56LmFzc2lnbiggc3FkaXN0LnkgKTtcblx0XHRcdFx0c3FkaXN0LnkuYXNzaWduKCBzcWRpc3QueCApO1xuXHRcdFx0XHRzcWRpc3QueC5hc3NpZ24oIGRpc3QgKTtcblxuXHRcdFx0fSApLkVsc2VJZiggZGlzdC5sZXNzVGhhbiggc3FkaXN0LnkgKSwgKCkgPT4ge1xuXG5cdFx0XHRcdHNxZGlzdC56LmFzc2lnbiggc3FkaXN0LnkgKTtcblx0XHRcdFx0c3FkaXN0LnkuYXNzaWduKCBkaXN0ICk7XG5cblx0XHRcdH0gKS5FbHNlSWYoIGRpc3QubGVzc1RoYW4oIHNxZGlzdC56ICksICgpID0+IHtcblxuXHRcdFx0XHRzcWRpc3Quei5hc3NpZ24oIGRpc3QgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSApO1xuXG5cdH0gKTtcblxuXHRJZiggbWV0cmljLmVxdWFsKCBpbnQoIDAgKSApLCAoKSA9PiB7XG5cblx0XHRzcWRpc3QuYXNzaWduKCBzcXJ0KCBzcWRpc3QgKSApO1xuXG5cdH0gKTtcblxuXHRyZXR1cm4gc3FkaXN0O1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF93b3JsZXlfbm9pc2VfdmVjM18wJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ3ZlYzInIH0sXG5cdFx0eyBuYW1lOiAnaml0dGVyJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ21ldHJpYycsIHR5cGU6ICdpbnQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfd29ybGV5X25vaXNlX2Zsb2F0XzEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUsIGppdHRlcl9pbW11dGFibGUsIG1ldHJpY19pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBtZXRyaWMgPSBpbnQoIG1ldHJpY19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBqaXR0ZXIgPSBmbG9hdCggaml0dGVyX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHAgPSB2ZWMzKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IFggPSBpbnQoKS50b1ZhcigpLCBZID0gaW50KCkudG9WYXIoKSwgWiA9IGludCgpLnRvVmFyKCk7XG5cdGNvbnN0IGxvY2FscG9zID0gdmVjMyggbXhfZmxvb3JmcmFjKCBwLngsIFggKSwgbXhfZmxvb3JmcmFjKCBwLnksIFkgKSwgbXhfZmxvb3JmcmFjKCBwLnosIFogKSApLnRvVmFyKCk7XG5cdGNvbnN0IHNxZGlzdCA9IGZsb2F0KCAxZTYgKS50b1ZhcigpO1xuXG5cdExvb3AoIHsgc3RhcnQ6IC0gMSwgZW5kOiBpbnQoIDEgKSwgbmFtZTogJ3gnLCBjb25kaXRpb246ICc8PScgfSwgKCB7IHggfSApID0+IHtcblxuXHRcdExvb3AoIHsgc3RhcnQ6IC0gMSwgZW5kOiBpbnQoIDEgKSwgbmFtZTogJ3knLCBjb25kaXRpb246ICc8PScgfSwgKCB7IHkgfSApID0+IHtcblxuXHRcdFx0TG9vcCggeyBzdGFydDogLSAxLCBlbmQ6IGludCggMSApLCBuYW1lOiAneicsIGNvbmRpdGlvbjogJzw9JyB9LCAoIHsgeiB9ICkgPT4ge1xuXG5cdFx0XHRcdGNvbnN0IGRpc3QgPSBmbG9hdCggbXhfd29ybGV5X2Rpc3RhbmNlKCBsb2NhbHBvcywgeCwgeSwgeiwgWCwgWSwgWiwgaml0dGVyLCBtZXRyaWMgKSApLnRvVmFyKCk7XG5cdFx0XHRcdHNxZGlzdC5hc3NpZ24oIG1pbiggc3FkaXN0LCBkaXN0ICkgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSApO1xuXG5cdH0gKTtcblxuXHRJZiggbWV0cmljLmVxdWFsKCBpbnQoIDAgKSApLCAoKSA9PiB7XG5cblx0XHRzcWRpc3QuYXNzaWduKCBzcXJ0KCBzcWRpc3QgKSApO1xuXG5cdH0gKTtcblxuXHRyZXR1cm4gc3FkaXN0O1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF93b3JsZXlfbm9pc2VfZmxvYXRfMScsXG5cdHR5cGU6ICdmbG9hdCcsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3AnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdqaXR0ZXInLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAnbWV0cmljJywgdHlwZTogJ2ludCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF93b3JsZXlfbm9pc2VfZmxvYXQgPSAvKkBfX1BVUkVfXyovIG92ZXJsb2FkaW5nRm4oIFsgbXhfd29ybGV5X25vaXNlX2Zsb2F0XzAsIG14X3dvcmxleV9ub2lzZV9mbG9hdF8xIF0gKTtcblxuZXhwb3J0IGNvbnN0IG14X3dvcmxleV9ub2lzZV92ZWMyXzEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUsIGppdHRlcl9pbW11dGFibGUsIG1ldHJpY19pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBtZXRyaWMgPSBpbnQoIG1ldHJpY19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBqaXR0ZXIgPSBmbG9hdCggaml0dGVyX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHAgPSB2ZWMzKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IFggPSBpbnQoKS50b1ZhcigpLCBZID0gaW50KCkudG9WYXIoKSwgWiA9IGludCgpLnRvVmFyKCk7XG5cdGNvbnN0IGxvY2FscG9zID0gdmVjMyggbXhfZmxvb3JmcmFjKCBwLngsIFggKSwgbXhfZmxvb3JmcmFjKCBwLnksIFkgKSwgbXhfZmxvb3JmcmFjKCBwLnosIFogKSApLnRvVmFyKCk7XG5cdGNvbnN0IHNxZGlzdCA9IHZlYzIoIDFlNiwgMWU2ICkudG9WYXIoKTtcblxuXHRMb29wKCB7IHN0YXJ0OiAtIDEsIGVuZDogaW50KCAxICksIG5hbWU6ICd4JywgY29uZGl0aW9uOiAnPD0nIH0sICggeyB4IH0gKSA9PiB7XG5cblx0XHRMb29wKCB7IHN0YXJ0OiAtIDEsIGVuZDogaW50KCAxICksIG5hbWU6ICd5JywgY29uZGl0aW9uOiAnPD0nIH0sICggeyB5IH0gKSA9PiB7XG5cblx0XHRcdExvb3AoIHsgc3RhcnQ6IC0gMSwgZW5kOiBpbnQoIDEgKSwgbmFtZTogJ3onLCBjb25kaXRpb246ICc8PScgfSwgKCB7IHogfSApID0+IHtcblxuXHRcdFx0XHRjb25zdCBkaXN0ID0gZmxvYXQoIG14X3dvcmxleV9kaXN0YW5jZSggbG9jYWxwb3MsIHgsIHksIHosIFgsIFksIFosIGppdHRlciwgbWV0cmljICkgKS50b1ZhcigpO1xuXG5cdFx0XHRcdElmKCBkaXN0Lmxlc3NUaGFuKCBzcWRpc3QueCApLCAoKSA9PiB7XG5cblx0XHRcdFx0XHRzcWRpc3QueS5hc3NpZ24oIHNxZGlzdC54ICk7XG5cdFx0XHRcdFx0c3FkaXN0LnguYXNzaWduKCBkaXN0ICk7XG5cblx0XHRcdFx0fSApLkVsc2VJZiggZGlzdC5sZXNzVGhhbiggc3FkaXN0LnkgKSwgKCkgPT4ge1xuXG5cdFx0XHRcdFx0c3FkaXN0LnkuYXNzaWduKCBkaXN0ICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9ICk7XG5cblx0fSApO1xuXG5cdElmKCBtZXRyaWMuZXF1YWwoIGludCggMCApICksICgpID0+IHtcblxuXHRcdHNxZGlzdC5hc3NpZ24oIHNxcnQoIHNxZGlzdCApICk7XG5cblx0fSApO1xuXG5cdHJldHVybiBzcWRpc3Q7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X3dvcmxleV9ub2lzZV92ZWMyXzEnLFxuXHR0eXBlOiAndmVjMicsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ3AnLCB0eXBlOiAndmVjMycgfSxcblx0XHR7IG5hbWU6ICdqaXR0ZXInLCB0eXBlOiAnZmxvYXQnIH0sXG5cdFx0eyBuYW1lOiAnbWV0cmljJywgdHlwZTogJ2ludCcgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF93b3JsZXlfbm9pc2VfdmVjMiA9IC8qQF9fUFVSRV9fKi8gb3ZlcmxvYWRpbmdGbiggWyBteF93b3JsZXlfbm9pc2VfdmVjMl8wLCBteF93b3JsZXlfbm9pc2VfdmVjMl8xIF0gKTtcblxuZXhwb3J0IGNvbnN0IG14X3dvcmxleV9ub2lzZV92ZWMzXzEgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgcF9pbW11dGFibGUsIGppdHRlcl9pbW11dGFibGUsIG1ldHJpY19pbW11dGFibGUgXSApID0+IHtcblxuXHRjb25zdCBtZXRyaWMgPSBpbnQoIG1ldHJpY19pbW11dGFibGUgKS50b1ZhcigpO1xuXHRjb25zdCBqaXR0ZXIgPSBmbG9hdCggaml0dGVyX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHAgPSB2ZWMzKCBwX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IFggPSBpbnQoKS50b1ZhcigpLCBZID0gaW50KCkudG9WYXIoKSwgWiA9IGludCgpLnRvVmFyKCk7XG5cdGNvbnN0IGxvY2FscG9zID0gdmVjMyggbXhfZmxvb3JmcmFjKCBwLngsIFggKSwgbXhfZmxvb3JmcmFjKCBwLnksIFkgKSwgbXhfZmxvb3JmcmFjKCBwLnosIFogKSApLnRvVmFyKCk7XG5cdGNvbnN0IHNxZGlzdCA9IHZlYzMoIDFlNiwgMWU2LCAxZTYgKS50b1ZhcigpO1xuXG5cdExvb3AoIHsgc3RhcnQ6IC0gMSwgZW5kOiBpbnQoIDEgKSwgbmFtZTogJ3gnLCBjb25kaXRpb246ICc8PScgfSwgKCB7IHggfSApID0+IHtcblxuXHRcdExvb3AoIHsgc3RhcnQ6IC0gMSwgZW5kOiBpbnQoIDEgKSwgbmFtZTogJ3knLCBjb25kaXRpb246ICc8PScgfSwgKCB7IHkgfSApID0+IHtcblxuXHRcdFx0TG9vcCggeyBzdGFydDogLSAxLCBlbmQ6IGludCggMSApLCBuYW1lOiAneicsIGNvbmRpdGlvbjogJzw9JyB9LCAoIHsgeiB9ICkgPT4ge1xuXG5cdFx0XHRcdGNvbnN0IGRpc3QgPSBmbG9hdCggbXhfd29ybGV5X2Rpc3RhbmNlKCBsb2NhbHBvcywgeCwgeSwgeiwgWCwgWSwgWiwgaml0dGVyLCBtZXRyaWMgKSApLnRvVmFyKCk7XG5cblx0XHRcdFx0SWYoIGRpc3QubGVzc1RoYW4oIHNxZGlzdC54ICksICgpID0+IHtcblxuXHRcdFx0XHRcdHNxZGlzdC56LmFzc2lnbiggc3FkaXN0LnkgKTtcblx0XHRcdFx0XHRzcWRpc3QueS5hc3NpZ24oIHNxZGlzdC54ICk7XG5cdFx0XHRcdFx0c3FkaXN0LnguYXNzaWduKCBkaXN0ICk7XG5cblx0XHRcdFx0fSApLkVsc2VJZiggZGlzdC5sZXNzVGhhbiggc3FkaXN0LnkgKSwgKCkgPT4ge1xuXG5cdFx0XHRcdFx0c3FkaXN0LnouYXNzaWduKCBzcWRpc3QueSApO1xuXHRcdFx0XHRcdHNxZGlzdC55LmFzc2lnbiggZGlzdCApO1xuXG5cdFx0XHRcdH0gKS5FbHNlSWYoIGRpc3QubGVzc1RoYW4oIHNxZGlzdC56ICksICgpID0+IHtcblxuXHRcdFx0XHRcdHNxZGlzdC56LmFzc2lnbiggZGlzdCApO1xuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSApO1xuXG5cdH0gKTtcblxuXHRJZiggbWV0cmljLmVxdWFsKCBpbnQoIDAgKSApLCAoKSA9PiB7XG5cblx0XHRzcWRpc3QuYXNzaWduKCBzcXJ0KCBzcWRpc3QgKSApO1xuXG5cdH0gKTtcblxuXHRyZXR1cm4gc3FkaXN0O1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF93b3JsZXlfbm9pc2VfdmVjM18xJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdwJywgdHlwZTogJ3ZlYzMnIH0sXG5cdFx0eyBuYW1lOiAnaml0dGVyJywgdHlwZTogJ2Zsb2F0JyB9LFxuXHRcdHsgbmFtZTogJ21ldHJpYycsIHR5cGU6ICdpbnQnIH1cblx0XVxufSApO1xuXG5leHBvcnQgY29uc3QgbXhfd29ybGV5X25vaXNlX3ZlYzMgPSAvKkBfX1BVUkVfXyovIG92ZXJsb2FkaW5nRm4oIFsgbXhfd29ybGV5X25vaXNlX3ZlYzNfMCwgbXhfd29ybGV5X25vaXNlX3ZlYzNfMSBdICk7XG4iLCIvLyBUaHJlZS5qcyBUcmFuc3BpbGVyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vQWNhZGVteVNvZnR3YXJlRm91bmRhdGlvbi9NYXRlcmlhbFgvYmxvYi9tYWluL2xpYnJhcmllcy9zdGRsaWIvZ2VuZ2xzbC9saWIvbXhfaHN2Lmdsc2xcblxuaW1wb3J0IHsgaW50LCBmbG9hdCwgdmVjMywgSWYsIEZuIH0gZnJvbSAnLi4vLi4vdHNsL1RTTEJhc2UuanMnO1xuaW1wb3J0IHsgYWRkIH0gZnJvbSAnLi4vLi4vbWF0aC9PcGVyYXRvck5vZGUuanMnO1xuaW1wb3J0IHsgZmxvb3IsIHRydW5jLCBtYXgsIG1pbiB9IGZyb20gJy4uLy4uL21hdGgvTWF0aE5vZGUuanMnO1xuXG5leHBvcnQgY29uc3QgbXhfaHN2dG9yZ2IgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgaHN2IF0gKSA9PiB7XG5cblx0Y29uc3QgcyA9IGhzdi55O1xuXHRjb25zdCB2ID0gaHN2Lno7XG5cblx0Y29uc3QgcmVzdWx0ID0gdmVjMygpLnRvVmFyKCk7XG5cblx0SWYoIHMubGVzc1RoYW4oIDAuMDAwMSApLCAoKSA9PiB7XG5cblx0XHRyZXN1bHQuYXNzaWduKCB2ZWMzKCB2LCB2LCB2ICkgKTtcblxuXHR9ICkuRWxzZSggKCkgPT4ge1xuXG5cdFx0bGV0IGggPSBoc3YueDtcblx0XHRoID0gaC5zdWIoIGZsb29yKCBoICkgKS5tdWwoIDYuMCApLnRvVmFyKCk7IC8vIFRPRE86IGNoZWNrIHdoYXQgLnRvVmFyKCkgaXMgbmVlZGVkIGluIG5vZGUgc3lzdGVtIGNhY2hlXG5cdFx0Y29uc3QgaGkgPSBpbnQoIHRydW5jKCBoICkgKTtcblx0XHRjb25zdCBmID0gaC5zdWIoIGZsb2F0KCBoaSApICk7XG5cdFx0Y29uc3QgcCA9IHYubXVsKCBzLm9uZU1pbnVzKCkgKTtcblx0XHRjb25zdCBxID0gdi5tdWwoIHMubXVsKCBmICkub25lTWludXMoKSApO1xuXHRcdGNvbnN0IHQgPSB2Lm11bCggcy5tdWwoIGYub25lTWludXMoKSApLm9uZU1pbnVzKCkgKTtcblxuXHRcdElmKCBoaS5lcXVhbCggaW50KCAwICkgKSwgKCkgPT4ge1xuXG5cdFx0XHRyZXN1bHQuYXNzaWduKCB2ZWMzKCB2LCB0LCBwICkgKTtcblxuXHRcdH0gKS5FbHNlSWYoIGhpLmVxdWFsKCBpbnQoIDEgKSApLCAoKSA9PiB7XG5cblx0XHRcdHJlc3VsdC5hc3NpZ24oIHZlYzMoIHEsIHYsIHAgKSApO1xuXG5cdFx0fSApLkVsc2VJZiggaGkuZXF1YWwoIGludCggMiApICksICgpID0+IHtcblxuXHRcdFx0cmVzdWx0LmFzc2lnbiggdmVjMyggcCwgdiwgdCApICk7XG5cblx0XHR9ICkuRWxzZUlmKCBoaS5lcXVhbCggaW50KCAzICkgKSwgKCkgPT4ge1xuXG5cdFx0XHRyZXN1bHQuYXNzaWduKCB2ZWMzKCBwLCBxLCB2ICkgKTtcblxuXHRcdH0gKS5FbHNlSWYoIGhpLmVxdWFsKCBpbnQoIDQgKSApLCAoKSA9PiB7XG5cblx0XHRcdHJlc3VsdC5hc3NpZ24oIHZlYzMoIHQsIHAsIHYgKSApO1xuXG5cdFx0fSApLkVsc2UoICgpID0+IHtcblxuXHRcdFx0cmVzdWx0LmFzc2lnbiggdmVjMyggdiwgcCwgcSApICk7XG5cblx0XHR9ICk7XG5cblx0fSApO1xuXG5cdHJldHVybiByZXN1bHQ7XG5cbn0gKS5zZXRMYXlvdXQoIHtcblx0bmFtZTogJ214X2hzdnRvcmdiJyxcblx0dHlwZTogJ3ZlYzMnLFxuXHRpbnB1dHM6IFtcblx0XHR7IG5hbWU6ICdoc3YnLCB0eXBlOiAndmVjMycgfVxuXHRdXG59ICk7XG5cbmV4cG9ydCBjb25zdCBteF9yZ2J0b2hzdiA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBjX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IGMgPSB2ZWMzKCBjX2ltbXV0YWJsZSApLnRvVmFyKCk7XG5cdGNvbnN0IHIgPSBmbG9hdCggYy54ICkudG9WYXIoKTtcblx0Y29uc3QgZyA9IGZsb2F0KCBjLnkgKS50b1ZhcigpO1xuXHRjb25zdCBiID0gZmxvYXQoIGMueiApLnRvVmFyKCk7XG5cdGNvbnN0IG1pbmNvbXAgPSBmbG9hdCggbWluKCByLCBtaW4oIGcsIGIgKSApICkudG9WYXIoKTtcblx0Y29uc3QgbWF4Y29tcCA9IGZsb2F0KCBtYXgoIHIsIG1heCggZywgYiApICkgKS50b1ZhcigpO1xuXHRjb25zdCBkZWx0YSA9IGZsb2F0KCBtYXhjb21wLnN1YiggbWluY29tcCApICkudG9WYXIoKTtcblx0Y29uc3QgaCA9IGZsb2F0KCkudG9WYXIoKSwgcyA9IGZsb2F0KCkudG9WYXIoKSwgdiA9IGZsb2F0KCkudG9WYXIoKTtcblx0di5hc3NpZ24oIG1heGNvbXAgKTtcblxuXHRJZiggbWF4Y29tcC5ncmVhdGVyVGhhbiggMC4wICksICgpID0+IHtcblxuXHRcdHMuYXNzaWduKCBkZWx0YS5kaXYoIG1heGNvbXAgKSApO1xuXG5cdH0gKS5FbHNlKCAoKSA9PiB7XG5cblx0XHRzLmFzc2lnbiggMC4wICk7XG5cblx0fSApO1xuXG5cdElmKCBzLmxlc3NUaGFuRXF1YWwoIDAuMCApLCAoKSA9PiB7XG5cblx0XHRoLmFzc2lnbiggMC4wICk7XG5cblx0fSApLkVsc2UoICgpID0+IHtcblxuXHRcdElmKCByLmdyZWF0ZXJUaGFuRXF1YWwoIG1heGNvbXAgKSwgKCkgPT4ge1xuXG5cdFx0XHRoLmFzc2lnbiggZy5zdWIoIGIgKS5kaXYoIGRlbHRhICkgKTtcblxuXHRcdH0gKS5FbHNlSWYoIGcuZ3JlYXRlclRoYW5FcXVhbCggbWF4Y29tcCApLCAoKSA9PiB7XG5cblx0XHRcdGguYXNzaWduKCBhZGQoIDIuMCwgYi5zdWIoIHIgKS5kaXYoIGRlbHRhICkgKSApO1xuXG5cdFx0fSApLkVsc2UoICgpID0+IHtcblxuXHRcdFx0aC5hc3NpZ24oIGFkZCggNC4wLCByLnN1YiggZyApLmRpdiggZGVsdGEgKSApICk7XG5cblx0XHR9ICk7XG5cblx0XHRoLm11bEFzc2lnbiggMS4wIC8gNi4wICk7XG5cblx0XHRJZiggaC5sZXNzVGhhbiggMC4wICksICgpID0+IHtcblxuXHRcdFx0aC5hZGRBc3NpZ24oIDEuMCApO1xuXG5cdFx0fSApO1xuXG5cdH0gKTtcblxuXHRyZXR1cm4gdmVjMyggaCwgcywgdiApO1xuXG59ICkuc2V0TGF5b3V0KCB7XG5cdG5hbWU6ICdteF9yZ2J0b2hzdicsXG5cdHR5cGU6ICd2ZWMzJyxcblx0aW5wdXRzOiBbXG5cdFx0eyBuYW1lOiAnYycsIHR5cGU6ICd2ZWMzJyB9XG5cdF1cbn0gKTtcbiIsIi8vIFRocmVlLmpzIFRyYW5zcGlsZXJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BY2FkZW15U29mdHdhcmVGb3VuZGF0aW9uL01hdGVyaWFsWC9ibG9iL21haW4vbGlicmFyaWVzL3N0ZGxpYi9nZW5nbHNsL2xpYi9teF90cmFuc2Zvcm1fY29sb3IuZ2xzbFxuXG5pbXBvcnQgeyBidmVjMywgdmVjMywgRm4gfSBmcm9tICcuLi8uLi90c2wvVFNMQmFzZS5qcyc7XG5pbXBvcnQgeyBncmVhdGVyVGhhbiB9IGZyb20gJy4uLy4uL21hdGgvT3BlcmF0b3JOb2RlLmpzJztcbmltcG9ydCB7IG1heCwgcG93LCBtaXggfSBmcm9tICcuLi8uLi9tYXRoL01hdGhOb2RlLmpzJztcblxuZXhwb3J0IGNvbnN0IG14X3NyZ2JfdGV4dHVyZV90b19saW5fcmVjNzA5ID0gLypAX19QVVJFX18qLyBGbiggKCBbIGNvbG9yX2ltbXV0YWJsZSBdICkgPT4ge1xuXG5cdGNvbnN0IGNvbG9yID0gdmVjMyggY29sb3JfaW1tdXRhYmxlICkudG9WYXIoKTtcblx0Y29uc3QgaXNBYm92ZSA9IGJ2ZWMzKCBncmVhdGVyVGhhbiggY29sb3IsIHZlYzMoIDAuMDQwNDUgKSApICkudG9WYXIoKTtcblx0Y29uc3QgbGluU2VnID0gdmVjMyggY29sb3IuZGl2KCAxMi45MiApICkudG9WYXIoKTtcblx0Y29uc3QgcG93U2VnID0gdmVjMyggcG93KCBtYXgoIGNvbG9yLmFkZCggdmVjMyggMC4wNTUgKSApLCB2ZWMzKCAwLjAgKSApLmRpdiggMS4wNTUgKSwgdmVjMyggMi40ICkgKSApLnRvVmFyKCk7XG5cblx0cmV0dXJuIG1peCggbGluU2VnLCBwb3dTZWcsIGlzQWJvdmUgKTtcblxufSApLnNldExheW91dCgge1xuXHRuYW1lOiAnbXhfc3JnYl90ZXh0dXJlX3RvX2xpbl9yZWM3MDknLFxuXHR0eXBlOiAndmVjMycsXG5cdGlucHV0czogW1xuXHRcdHsgbmFtZTogJ2NvbG9yJywgdHlwZTogJ3ZlYzMnIH1cblx0XVxufSApO1xuIiwiaW1wb3J0IHtcblx0bXhfcGVybGluX25vaXNlX2Zsb2F0LCBteF9wZXJsaW5fbm9pc2VfdmVjMyxcblx0bXhfd29ybGV5X25vaXNlX2Zsb2F0IGFzIHdvcmxleV9ub2lzZV9mbG9hdCwgbXhfd29ybGV5X25vaXNlX3ZlYzIgYXMgd29ybGV5X25vaXNlX3ZlYzIsIG14X3dvcmxleV9ub2lzZV92ZWMzIGFzIHdvcmxleV9ub2lzZV92ZWMzLFxuXHRteF9jZWxsX25vaXNlX2Zsb2F0IGFzIGNlbGxfbm9pc2VfZmxvYXQsXG5cdG14X2ZyYWN0YWxfbm9pc2VfZmxvYXQgYXMgZnJhY3RhbF9ub2lzZV9mbG9hdCwgbXhfZnJhY3RhbF9ub2lzZV92ZWMyIGFzIGZyYWN0YWxfbm9pc2VfdmVjMiwgbXhfZnJhY3RhbF9ub2lzZV92ZWMzIGFzIGZyYWN0YWxfbm9pc2VfdmVjMywgbXhfZnJhY3RhbF9ub2lzZV92ZWM0IGFzIGZyYWN0YWxfbm9pc2VfdmVjNFxufSBmcm9tICcuL2xpYi9teF9ub2lzZS5qcyc7XG5pbXBvcnQgeyBteF9oc3Z0b3JnYiwgbXhfcmdidG9oc3YgfSBmcm9tICcuL2xpYi9teF9oc3YuanMnO1xuaW1wb3J0IHsgbXhfc3JnYl90ZXh0dXJlX3RvX2xpbl9yZWM3MDkgfSBmcm9tICcuL2xpYi9teF90cmFuc2Zvcm1fY29sb3IuanMnO1xuaW1wb3J0IHsgbWl4LCBzbW9vdGhzdGVwIH0gZnJvbSAnLi4vbWF0aC9NYXRoTm9kZS5qcyc7XG5pbXBvcnQgeyB1diB9IGZyb20gJy4uL2FjY2Vzc29ycy9VVi5qcyc7XG5pbXBvcnQgeyBmbG9hdCwgdmVjMiwgdmVjNCwgaW50IH0gZnJvbSAnLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5leHBvcnQgY29uc3QgbXhfYWFzdGVwID0gKCB0aHJlc2hvbGQsIHZhbHVlICkgPT4ge1xuXG5cdHRocmVzaG9sZCA9IGZsb2F0KCB0aHJlc2hvbGQgKTtcblx0dmFsdWUgPSBmbG9hdCggdmFsdWUgKTtcblxuXHRjb25zdCBhZndpZHRoID0gdmVjMiggdmFsdWUuZEZkeCgpLCB2YWx1ZS5kRmR5KCkgKS5sZW5ndGgoKS5tdWwoIDAuNzA3MTA2NzgxMTg2NTQ3NTcgKTtcblxuXHRyZXR1cm4gc21vb3Roc3RlcCggdGhyZXNob2xkLnN1YiggYWZ3aWR0aCApLCB0aHJlc2hvbGQuYWRkKCBhZndpZHRoICksIHZhbHVlICk7XG5cbn07XG5cbmNvbnN0IF9yYW1wID0gKCBhLCBiLCB1diwgcCApID0+IG1peCggYSwgYiwgdXZbIHAgXS5jbGFtcCgpICk7XG5leHBvcnQgY29uc3QgbXhfcmFtcGxyID0gKCB2YWx1ZWwsIHZhbHVlciwgdGV4Y29vcmQgPSB1digpICkgPT4gX3JhbXAoIHZhbHVlbCwgdmFsdWVyLCB0ZXhjb29yZCwgJ3gnICk7XG5leHBvcnQgY29uc3QgbXhfcmFtcHRiID0gKCB2YWx1ZXQsIHZhbHVlYiwgdGV4Y29vcmQgPSB1digpICkgPT4gX3JhbXAoIHZhbHVldCwgdmFsdWViLCB0ZXhjb29yZCwgJ3knICk7XG5cbmNvbnN0IF9zcGxpdCA9ICggYSwgYiwgY2VudGVyLCB1diwgcCApID0+IG1peCggYSwgYiwgbXhfYWFzdGVwKCBjZW50ZXIsIHV2WyBwIF0gKSApO1xuZXhwb3J0IGNvbnN0IG14X3NwbGl0bHIgPSAoIHZhbHVlbCwgdmFsdWVyLCBjZW50ZXIsIHRleGNvb3JkID0gdXYoKSApID0+IF9zcGxpdCggdmFsdWVsLCB2YWx1ZXIsIGNlbnRlciwgdGV4Y29vcmQsICd4JyApO1xuZXhwb3J0IGNvbnN0IG14X3NwbGl0dGIgPSAoIHZhbHVldCwgdmFsdWViLCBjZW50ZXIsIHRleGNvb3JkID0gdXYoKSApID0+IF9zcGxpdCggdmFsdWV0LCB2YWx1ZWIsIGNlbnRlciwgdGV4Y29vcmQsICd5JyApO1xuXG5leHBvcnQgY29uc3QgbXhfdHJhbnNmb3JtX3V2ID0gKCB1dl9zY2FsZSA9IDEsIHV2X29mZnNldCA9IDAsIHV2X2dlbyA9IHV2KCkgKSA9PiB1dl9nZW8ubXVsKCB1dl9zY2FsZSApLmFkZCggdXZfb2Zmc2V0ICk7XG5cbmV4cG9ydCBjb25zdCBteF9zYWZlcG93ZXIgPSAoIGluMSwgaW4yID0gMSApID0+IHtcblxuXHRpbjEgPSBmbG9hdCggaW4xICk7XG5cblx0cmV0dXJuIGluMS5hYnMoKS5wb3coIGluMiApLm11bCggaW4xLnNpZ24oKSApO1xuXG59O1xuXG5leHBvcnQgY29uc3QgbXhfY29udHJhc3QgPSAoIGlucHV0LCBhbW91bnQgPSAxLCBwaXZvdCA9IC41ICkgPT4gZmxvYXQoIGlucHV0ICkuc3ViKCBwaXZvdCApLm11bCggYW1vdW50ICkuYWRkKCBwaXZvdCApO1xuXG5leHBvcnQgY29uc3QgbXhfbm9pc2VfZmxvYXQgPSAoIHRleGNvb3JkID0gdXYoKSwgYW1wbGl0dWRlID0gMSwgcGl2b3QgPSAwICkgPT4gbXhfcGVybGluX25vaXNlX2Zsb2F0KCB0ZXhjb29yZC5jb252ZXJ0KCAndmVjMnx2ZWMzJyApICkubXVsKCBhbXBsaXR1ZGUgKS5hZGQoIHBpdm90ICk7XG4vL2V4cG9ydCBjb25zdCBteF9ub2lzZV92ZWMyID0gKCB0ZXhjb29yZCA9IHV2KCksIGFtcGxpdHVkZSA9IDEsIHBpdm90ID0gMCApID0+IG14X3Blcmxpbl9ub2lzZV92ZWMzKCB0ZXhjb29yZC5jb252ZXJ0KCAndmVjMnx2ZWMzJyApICkubXVsKCBhbXBsaXR1ZGUgKS5hZGQoIHBpdm90ICk7XG5leHBvcnQgY29uc3QgbXhfbm9pc2VfdmVjMyA9ICggdGV4Y29vcmQgPSB1digpLCBhbXBsaXR1ZGUgPSAxLCBwaXZvdCA9IDAgKSA9PiBteF9wZXJsaW5fbm9pc2VfdmVjMyggdGV4Y29vcmQuY29udmVydCggJ3ZlYzJ8dmVjMycgKSApLm11bCggYW1wbGl0dWRlICkuYWRkKCBwaXZvdCApO1xuZXhwb3J0IGNvbnN0IG14X25vaXNlX3ZlYzQgPSAoIHRleGNvb3JkID0gdXYoKSwgYW1wbGl0dWRlID0gMSwgcGl2b3QgPSAwICkgPT4ge1xuXG5cdHRleGNvb3JkID0gdGV4Y29vcmQuY29udmVydCggJ3ZlYzJ8dmVjMycgKTsgLy8gb3ZlcmxvYWRpbmcgdHlwZVxuXG5cdGNvbnN0IG5vaXNlX3ZlYzQgPSB2ZWM0KCBteF9wZXJsaW5fbm9pc2VfdmVjMyggdGV4Y29vcmQgKSwgbXhfcGVybGluX25vaXNlX2Zsb2F0KCB0ZXhjb29yZC5hZGQoIHZlYzIoIDE5LCA3MyApICkgKSApO1xuXG5cdHJldHVybiBub2lzZV92ZWM0Lm11bCggYW1wbGl0dWRlICkuYWRkKCBwaXZvdCApO1xuXG59O1xuXG5leHBvcnQgY29uc3QgbXhfd29ybGV5X25vaXNlX2Zsb2F0ID0gKCB0ZXhjb29yZCA9IHV2KCksIGppdHRlciA9IDEgKSA9PiB3b3JsZXlfbm9pc2VfZmxvYXQoIHRleGNvb3JkLmNvbnZlcnQoICd2ZWMyfHZlYzMnICksIGppdHRlciwgaW50KCAxICkgKTtcbmV4cG9ydCBjb25zdCBteF93b3JsZXlfbm9pc2VfdmVjMiA9ICggdGV4Y29vcmQgPSB1digpLCBqaXR0ZXIgPSAxICkgPT4gd29ybGV5X25vaXNlX3ZlYzIoIHRleGNvb3JkLmNvbnZlcnQoICd2ZWMyfHZlYzMnICksIGppdHRlciwgaW50KCAxICkgKTtcbmV4cG9ydCBjb25zdCBteF93b3JsZXlfbm9pc2VfdmVjMyA9ICggdGV4Y29vcmQgPSB1digpLCBqaXR0ZXIgPSAxICkgPT4gd29ybGV5X25vaXNlX3ZlYzMoIHRleGNvb3JkLmNvbnZlcnQoICd2ZWMyfHZlYzMnICksIGppdHRlciwgaW50KCAxICkgKTtcblxuZXhwb3J0IGNvbnN0IG14X2NlbGxfbm9pc2VfZmxvYXQgPSAoIHRleGNvb3JkID0gdXYoKSApID0+IGNlbGxfbm9pc2VfZmxvYXQoIHRleGNvb3JkLmNvbnZlcnQoICd2ZWMyfHZlYzMnICkgKTtcblxuZXhwb3J0IGNvbnN0IG14X2ZyYWN0YWxfbm9pc2VfZmxvYXQgPSAoIHBvc2l0aW9uID0gdXYoKSwgb2N0YXZlcyA9IDMsIGxhY3VuYXJpdHkgPSAyLCBkaW1pbmlzaCA9IC41LCBhbXBsaXR1ZGUgPSAxICkgPT4gZnJhY3RhbF9ub2lzZV9mbG9hdCggcG9zaXRpb24sIGludCggb2N0YXZlcyApLCBsYWN1bmFyaXR5LCBkaW1pbmlzaCApLm11bCggYW1wbGl0dWRlICk7XG5leHBvcnQgY29uc3QgbXhfZnJhY3RhbF9ub2lzZV92ZWMyID0gKCBwb3NpdGlvbiA9IHV2KCksIG9jdGF2ZXMgPSAzLCBsYWN1bmFyaXR5ID0gMiwgZGltaW5pc2ggPSAuNSwgYW1wbGl0dWRlID0gMSApID0+IGZyYWN0YWxfbm9pc2VfdmVjMiggcG9zaXRpb24sIGludCggb2N0YXZlcyApLCBsYWN1bmFyaXR5LCBkaW1pbmlzaCApLm11bCggYW1wbGl0dWRlICk7XG5leHBvcnQgY29uc3QgbXhfZnJhY3RhbF9ub2lzZV92ZWMzID0gKCBwb3NpdGlvbiA9IHV2KCksIG9jdGF2ZXMgPSAzLCBsYWN1bmFyaXR5ID0gMiwgZGltaW5pc2ggPSAuNSwgYW1wbGl0dWRlID0gMSApID0+IGZyYWN0YWxfbm9pc2VfdmVjMyggcG9zaXRpb24sIGludCggb2N0YXZlcyApLCBsYWN1bmFyaXR5LCBkaW1pbmlzaCApLm11bCggYW1wbGl0dWRlICk7XG5leHBvcnQgY29uc3QgbXhfZnJhY3RhbF9ub2lzZV92ZWM0ID0gKCBwb3NpdGlvbiA9IHV2KCksIG9jdGF2ZXMgPSAzLCBsYWN1bmFyaXR5ID0gMiwgZGltaW5pc2ggPSAuNSwgYW1wbGl0dWRlID0gMSApID0+IGZyYWN0YWxfbm9pc2VfdmVjNCggcG9zaXRpb24sIGludCggb2N0YXZlcyApLCBsYWN1bmFyaXR5LCBkaW1pbmlzaCApLm11bCggYW1wbGl0dWRlICk7XG5cbmV4cG9ydCB7IG14X2hzdnRvcmdiLCBteF9yZ2J0b2hzdiwgbXhfc3JnYl90ZXh0dXJlX3RvX2xpbl9yZWM3MDkgfTtcbiIsImltcG9ydCB7IHBvc2l0aW9uV29ybGQgfSBmcm9tICcuLi8uLi9hY2Nlc3NvcnMvUG9zaXRpb24uanMnO1xuaW1wb3J0IHsgZmxvYXQsIEZuLCBtaW4sIG5vcm1hbGl6ZSwgc3ViLCB2ZWMzIH0gZnJvbSAnLi4vLi4vdHNsL1RTTEJhc2UuanMnO1xuXG4vKipcbiAqIFRoaXMgY29tcHV0ZXMgYSBwYXJhbGxheCBjb3JyZWN0ZWQgbm9ybWFsIHdoaWNoIGlzIHVzZWQgZm9yIGJveC1wcm9qZWN0ZWQgY3ViZSBtYXBwaW5nIChCUENFTSkuXG4gKlxuICogUmVmZXJlbmNlOiB7QGxpbmsgaHR0cHM6Ly9kZXZsb2ctbWFydGluc2guYmxvZ3Nwb3QuY29tLzIwMTEvMDkvYm94LXByb2plY3RlZC1jdWJlLWVudmlyb25tZW50LW1hcHBpbmcuaHRtbH1cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgdXZOb2RlID0gZ2V0UGFyYWxsYXhDb3JyZWN0Tm9ybWFsKCByZWZsZWN0VmVjdG9yLCB2ZWMzKCAyMDAsIDEwMCwgMTAwICksIHZlYzMoIDAsIC0gNTAsIDAgKSApO1xuICogbWF0ZXJpYWwuZW52Tm9kZSA9IHBtcmVtVGV4dHVyZSggcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHV2Tm9kZSApO1xuICogYGBgXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IG5vcm1hbCAtIFRoZSBub3JtYWwgdG8gY29ycmVjdC5cbiAqIEBwYXJhbSB7Tm9kZTx2ZWMzPn0gY3ViZVNpemUgLSBUaGUgY3ViZSBzaXplIHNob3VsZCByZWZsZWN0IHRoZSBzaXplIG9mIHRoZSBlbnZpcm9ubWVudCAoQlBDRU0gaXMgdXN1YWxseSBhcHBsaWVkIGluIGNsb3NlZCBlbnZpcm9ubWVudHMgbGlrZSByb29tcykuXG4gKiBAcGFyYW0ge05vZGU8dmVjMz59IGN1YmVQb3MgLSBUaGUgY3ViZSBwb3NpdGlvbi5cbiAqIEByZXR1cm4ge05vZGU8dmVjMz59IFRoZSBwYXJhbGxheCBjb3JyZWN0ZWQgbm9ybWFsLlxuICovXG5jb25zdCBnZXRQYXJhbGxheENvcnJlY3ROb3JtYWwgPSAvKkBfX1BVUkVfXyovIEZuKCAoIFsgbm9ybWFsLCBjdWJlU2l6ZSwgY3ViZVBvcyBdICkgPT4ge1xuXG5cdGNvbnN0IG5EaXIgPSBub3JtYWxpemUoIG5vcm1hbCApLnRvVmFyKCAnbkRpcicgKTtcblx0Y29uc3QgcmJtYXggPSBzdWIoIGZsb2F0KCAwLjUgKS5tdWwoIGN1YmVTaXplLnN1YiggY3ViZVBvcyApICksIHBvc2l0aW9uV29ybGQgKS5kaXYoIG5EaXIgKS50b1ZhciggJ3JibWF4JyApO1xuXHRjb25zdCByYm1pbiA9IHN1YiggZmxvYXQoIC0gMC41ICkubXVsKCBjdWJlU2l6ZS5zdWIoIGN1YmVQb3MgKSApLCBwb3NpdGlvbldvcmxkICkuZGl2KCBuRGlyICkudG9WYXIoICdyYm1pbicgKTtcblx0Y29uc3QgcmJtaW5tYXggPSB2ZWMzKCkudG9WYXIoICdyYm1pbm1heCcgKTtcblx0cmJtaW5tYXgueCA9IG5EaXIueC5ncmVhdGVyVGhhbiggZmxvYXQoIDAgKSApLnNlbGVjdCggcmJtYXgueCwgcmJtaW4ueCApO1xuXHRyYm1pbm1heC55ID0gbkRpci55LmdyZWF0ZXJUaGFuKCBmbG9hdCggMCApICkuc2VsZWN0KCByYm1heC55LCByYm1pbi55ICk7XG5cdHJibWlubWF4LnogPSBuRGlyLnouZ3JlYXRlclRoYW4oIGZsb2F0KCAwICkgKS5zZWxlY3QoIHJibWF4LnosIHJibWluLnogKTtcblxuXHRjb25zdCBjb3JyZWN0aW9uID0gbWluKCBtaW4oIHJibWlubWF4LngsIHJibWlubWF4LnkgKSwgcmJtaW5tYXgueiApLnRvVmFyKCAnY29ycmVjdGlvbicgKTtcblx0Y29uc3QgYm94SW50ZXJzZWN0aW9uID0gcG9zaXRpb25Xb3JsZC5hZGQoIG5EaXIubXVsKCBjb3JyZWN0aW9uICkgKS50b1ZhciggJ2JveEludGVyc2VjdGlvbicgKTtcblx0cmV0dXJuIGJveEludGVyc2VjdGlvbi5zdWIoIGN1YmVQb3MgKTtcblxufSApO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRQYXJhbGxheENvcnJlY3ROb3JtYWw7XG4iLCJpbXBvcnQgeyBGbiwgbXVsIH0gZnJvbSAnLi4vLi4vdHNsL1RTTEJhc2UuanMnO1xuXG5jb25zdCBnZXRTaElycmFkaWFuY2VBdCA9IC8qQF9fUFVSRV9fKi8gRm4oICggWyBub3JtYWwsIHNoQ29lZmZpY2llbnRzIF0gKSA9PiB7XG5cblx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdGNvbnN0IHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XG5cblx0Ly8gYmFuZCAwXG5cdGxldCByZXN1bHQgPSBzaENvZWZmaWNpZW50cy5lbGVtZW50KCAwICkubXVsKCAwLjg4NjIyNyApO1xuXG5cdC8vIGJhbmQgMVxuXHRyZXN1bHQgPSByZXN1bHQuYWRkKCBzaENvZWZmaWNpZW50cy5lbGVtZW50KCAxICkubXVsKCAyLjAgKiAwLjUxMTY2NCApLm11bCggeSApICk7XG5cdHJlc3VsdCA9IHJlc3VsdC5hZGQoIHNoQ29lZmZpY2llbnRzLmVsZW1lbnQoIDIgKS5tdWwoIDIuMCAqIDAuNTExNjY0ICkubXVsKCB6ICkgKTtcblx0cmVzdWx0ID0gcmVzdWx0LmFkZCggc2hDb2VmZmljaWVudHMuZWxlbWVudCggMyApLm11bCggMi4wICogMC41MTE2NjQgKS5tdWwoIHggKSApO1xuXG5cdC8vIGJhbmQgMlxuXHRyZXN1bHQgPSByZXN1bHQuYWRkKCBzaENvZWZmaWNpZW50cy5lbGVtZW50KCA0ICkubXVsKCAyLjAgKiAwLjQyOTA0MyApLm11bCggeCApLm11bCggeSApICk7XG5cdHJlc3VsdCA9IHJlc3VsdC5hZGQoIHNoQ29lZmZpY2llbnRzLmVsZW1lbnQoIDUgKS5tdWwoIDIuMCAqIDAuNDI5MDQzICkubXVsKCB5ICkubXVsKCB6ICkgKTtcblx0cmVzdWx0ID0gcmVzdWx0LmFkZCggc2hDb2VmZmljaWVudHMuZWxlbWVudCggNiApLm11bCggei5tdWwoIHogKS5tdWwoIDAuNzQzMTI1ICkuc3ViKCAwLjI0NzcwOCApICkgKTtcblx0cmVzdWx0ID0gcmVzdWx0LmFkZCggc2hDb2VmZmljaWVudHMuZWxlbWVudCggNyApLm11bCggMi4wICogMC40MjkwNDMgKS5tdWwoIHggKS5tdWwoIHogKSApO1xuXHRyZXN1bHQgPSByZXN1bHQuYWRkKCBzaENvZWZmaWNpZW50cy5lbGVtZW50KCA4ICkubXVsKCAwLjQyOTA0MyApLm11bCggbXVsKCB4LCB4ICkuc3ViKCBtdWwoIHksIHkgKSApICkgKTtcblxuXHRyZXR1cm4gcmVzdWx0O1xuXG59ICk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFNoSXJyYWRpYW5jZUF0O1xuIiwiLy8gTm9uLVBVUkUgZXhwb3J0cyBsaXN0LCBzaWRlLWVmZmVjdHMgYXJlIHJlcXVpcmVkIGhlcmUuXG4vLyBUU0wgQmFzZSBTeW50YXhcblxuZXhwb3J0ICogZnJvbSAnLi9UU0xDb3JlLmpzJzsgLy8gZmxvYXQoKSwgdmVjMigpLCB2ZWMzKCksIHZlYzQoKSwgbWF0MygpLCBtYXQ0KCksIEZuKCksIElmKCksIGVsZW1lbnQoKSwgbm9kZU9iamVjdCgpLCBub2RlUHJveHkoKSwgLi4uXG5leHBvcnQgKiBmcm9tICcuLi9jb3JlL0FycmF5Tm9kZS5qcyc7IC8vIGFycmF5KCksIC50b0FycmF5KClcbmV4cG9ydCAqIGZyb20gJy4uL2NvcmUvVW5pZm9ybU5vZGUuanMnOyAvLyB1bmlmb3JtKClcbmV4cG9ydCAqIGZyb20gJy4uL2NvcmUvUHJvcGVydHlOb2RlLmpzJzsgLy8gcHJvcGVydHkoKSAgPC0+IFRPRE86IFNlcGFyYXRlIE1hdGVyaWFsIFByb3BlcnRpZXMgaW4gb3RoZXIgZmlsZVxuZXhwb3J0ICogZnJvbSAnLi4vY29yZS9Bc3NpZ25Ob2RlLmpzJzsgLy8gLmFzc2lnbigpXG5leHBvcnQgKiBmcm9tICcuLi9jb2RlL0Z1bmN0aW9uQ2FsbE5vZGUuanMnOyAvLyAuY2FsbCgpXG5leHBvcnQgKiBmcm9tICcuLi9tYXRoL09wZXJhdG9yTm9kZS5qcyc7IC8vIC5hZGQoKSwgLnN1YigpLCAuLi5cbmV4cG9ydCAqIGZyb20gJy4uL21hdGgvTWF0aE5vZGUuanMnOyAvLyBhYnMoKSwgZmxvb3IoKSwgLi4uXG5leHBvcnQgKiBmcm9tICcuLi9tYXRoL0NvbmRpdGlvbmFsTm9kZS5qcyc7IC8vIHNlbGVjdCgpLCAuLi5cbmV4cG9ydCAqIGZyb20gJy4uL2NvcmUvQ29udGV4dE5vZGUuanMnOyAvLyAuY29udGV4dCgpXG5leHBvcnQgKiBmcm9tICcuLi9jb3JlL1Zhck5vZGUuanMnOyAvLyAudmFyKCkgLT4gVE9ETzogTWF5YmUgcmVuYW1lIC50b1ZhcigpIC0+IC52YXIoKVxuZXhwb3J0ICogZnJvbSAnLi4vY29yZS9WYXJ5aW5nTm9kZS5qcyc7IC8vIHZhcnlpbmcoKSwgdmVydGV4U3RhZ2UoKVxuZXhwb3J0ICogZnJvbSAnLi4vZGlzcGxheS9Db2xvclNwYWNlTm9kZS5qcyc7IC8vIC50b0NvbG9yU3BhY2UoKVxuZXhwb3J0ICogZnJvbSAnLi4vZGlzcGxheS9Ub25lTWFwcGluZ05vZGUuanMnOyAvLyAudG9Ub25lTWFwcGluZygpXG5leHBvcnQgKiBmcm9tICcuLi9hY2Nlc3NvcnMvQnVmZmVyQXR0cmlidXRlTm9kZS5qcyc7IC8vIC50b0F0dHJpYnV0ZSgpXG5leHBvcnQgKiBmcm9tICcuLi9ncGdwdS9Db21wdXRlTm9kZS5qcyc7IC8vIC5jb21wdXRlKClcbmV4cG9ydCAqIGZyb20gJy4uL2NvcmUvQ2FjaGVOb2RlLmpzJzsgLy8gLmNhY2hlKClcbmV4cG9ydCAqIGZyb20gJy4uL2NvcmUvQnlwYXNzTm9kZS5qcyc7IC8vIC5ieXBhc3MoKVxuZXhwb3J0ICogZnJvbSAnLi4vdXRpbHMvUmVtYXBOb2RlLmpzJzsgLy8gLnJlbWFwKCksIC5yZW1hcENsYW1wKClcbmV4cG9ydCAqIGZyb20gJy4uL2NvZGUvRXhwcmVzc2lvbk5vZGUuanMnOyAvLyBleHByZXNzaW9uKClcbmV4cG9ydCAqIGZyb20gJy4uL3V0aWxzL0Rpc2NhcmQuanMnOyAvLyBEaXNjYXJkKCksIFJldHVybigpXG5leHBvcnQgKiBmcm9tICcuLi9kaXNwbGF5L1JlbmRlck91dHB1dE5vZGUuanMnOyAvLyAucmVuZGVyT3V0cHV0KClcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZE5vZGVFbGVtZW50KCBuYW1lLyosIG5vZGVFbGVtZW50Ki8gKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVFNMQmFzZTogQWRkTm9kZUVsZW1lbnQgaGFzIGJlZW4gcmVtb3ZlZCBpbiBmYXZvciBvZiB0cmVlLXNoYWtpbmcuIFRyeWluZyBhZGQnLCBuYW1lICk7XG5cbn1cbiIsImltcG9ydCBTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIGZyb20gJy4uLy4uL3JlbmRlcmVycy9jb21tb24vU3RvcmFnZUluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZS5qcyc7XG5pbXBvcnQgU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZSBmcm9tICcuLi8uLi9yZW5kZXJlcnMvY29tbW9uL1N0b3JhZ2VCdWZmZXJBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IHsgc3RvcmFnZSB9IGZyb20gJy4vU3RvcmFnZUJ1ZmZlck5vZGUuanMnO1xuaW1wb3J0IHsgZ2V0TGVuZ3RoRnJvbVR5cGUsIGdldFR5cGVkQXJyYXlGcm9tVHlwZSB9IGZyb20gJy4uL2NvcmUvTm9kZVV0aWxzLmpzJztcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc3RvcmFnZSBidWZmZXIgbm9kZSB3aXRoIGEgY29uZmlndXJlZCBgU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZWAuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcnxUeXBlZEFycmF5fSBjb3VudCAtIFRoZSBkYXRhIGNvdW50LiBJdCBpcyBhbHNvIHZhbGlkIHRvIHBhc3MgYSB0eXBlZCBhcnJheSBhcyBhbiBhcmd1bWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfFN0cnVjdH0gW3R5cGU9J2Zsb2F0J10gLSBUaGUgZGF0YSB0eXBlLlxuICogQHJldHVybnMge1N0b3JhZ2VCdWZmZXJOb2RlfVxuICovXG5leHBvcnQgY29uc3QgYXR0cmlidXRlQXJyYXkgPSAoIGNvdW50LCB0eXBlID0gJ2Zsb2F0JyApID0+IHtcblxuXHRsZXQgaXRlbVNpemUsIHR5cGVkQXJyYXk7XG5cblx0aWYgKCB0eXBlLmlzU3RydWN0ID09PSB0cnVlICkge1xuXG5cdFx0aXRlbVNpemUgPSB0eXBlLmxheW91dC5nZXRMZW5ndGgoKTtcblx0XHR0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheUZyb21UeXBlKCAnZmxvYXQnICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGl0ZW1TaXplID0gZ2V0TGVuZ3RoRnJvbVR5cGUoIHR5cGUgKTtcblx0XHR0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheUZyb21UeXBlKCB0eXBlICk7XG5cblx0fVxuXG5cdGNvbnN0IGJ1ZmZlciA9IG5ldyBTdG9yYWdlQnVmZmVyQXR0cmlidXRlKCBjb3VudCwgaXRlbVNpemUsIHR5cGVkQXJyYXkgKTtcblx0Y29uc3Qgbm9kZSA9IHN0b3JhZ2UoIGJ1ZmZlciwgdHlwZSwgY291bnQgKTtcblxuXHRyZXR1cm4gbm9kZTtcblxufTtcblxuLyoqXG4gKiBUU0wgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc3RvcmFnZSBidWZmZXIgbm9kZSB3aXRoIGEgY29uZmlndXJlZCBgU3RvcmFnZUluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZWAuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcnxUeXBlZEFycmF5fSBjb3VudCAtIFRoZSBkYXRhIGNvdW50LiBJdCBpcyBhbHNvIHZhbGlkIHRvIHBhc3MgYSB0eXBlZCBhcnJheSBhcyBhbiBhcmd1bWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfFN0cnVjdH0gW3R5cGU9J2Zsb2F0J10gLSBUaGUgZGF0YSB0eXBlLlxuICogQHJldHVybnMge1N0b3JhZ2VCdWZmZXJOb2RlfVxuICovXG5leHBvcnQgY29uc3QgaW5zdGFuY2VkQXJyYXkgPSAoIGNvdW50LCB0eXBlID0gJ2Zsb2F0JyApID0+IHtcblxuXHRsZXQgaXRlbVNpemUsIHR5cGVkQXJyYXk7XG5cblx0aWYgKCB0eXBlLmlzU3RydWN0ID09PSB0cnVlICkge1xuXG5cdFx0aXRlbVNpemUgPSB0eXBlLmxheW91dC5nZXRMZW5ndGgoKTtcblx0XHR0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheUZyb21UeXBlKCAnZmxvYXQnICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGl0ZW1TaXplID0gZ2V0TGVuZ3RoRnJvbVR5cGUoIHR5cGUgKTtcblx0XHR0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheUZyb21UeXBlKCB0eXBlICk7XG5cblx0fVxuXG5cdGNvbnN0IGJ1ZmZlciA9IG5ldyBTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBjb3VudCwgaXRlbVNpemUsIHR5cGVkQXJyYXkgKTtcblx0Y29uc3Qgbm9kZSA9IHN0b3JhZ2UoIGJ1ZmZlciwgdHlwZSwgY291bnQgKTtcblxuXHRyZXR1cm4gbm9kZTtcblxufTtcbiIsImltcG9ydCB7IHRpbWUgfSBmcm9tICcuL1RpbWVyLmpzJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzaW5lIHdhdmUgb3NjaWxsYXRpb24gYmFzZWQgb24gYSB0aW1lci5cbiAqXG4gKiBAdHNsXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IHQgLSBUaGUgdGltZXIgdG8gZ2VuZXJhdGUgdGhlIG9zY2lsbGF0aW9uIHdpdGguXG4gKiBAcmV0dXJuIHtOb2RlPGZsb2F0Pn0gVGhlIG9zY2lsbGF0aW9uIG5vZGUuXG4gKi9cbmV4cG9ydCBjb25zdCBvc2NTaW5lID0gKCB0ID0gdGltZSApID0+IHQuYWRkKCAwLjc1ICkubXVsKCBNYXRoLlBJICogMiApLnNpbigpLm11bCggMC41ICkuYWRkKCAwLjUgKTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzcXVhcmUgd2F2ZSBvc2NpbGxhdGlvbiBiYXNlZCBvbiBhIHRpbWVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gdCAtIFRoZSB0aW1lciB0byBnZW5lcmF0ZSB0aGUgb3NjaWxsYXRpb24gd2l0aC5cbiAqIEByZXR1cm4ge05vZGU8ZmxvYXQ+fSBUaGUgb3NjaWxsYXRpb24gbm9kZS5cbiAqL1xuZXhwb3J0IGNvbnN0IG9zY1NxdWFyZSA9ICggdCA9IHRpbWUgKSA9PiB0LmZyYWN0KCkucm91bmQoKTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSB0cmlhbmdsZSB3YXZlIG9zY2lsbGF0aW9uIGJhc2VkIG9uIGEgdGltZXIuXG4gKlxuICogQHRzbFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge05vZGU8ZmxvYXQ+fSB0IC0gVGhlIHRpbWVyIHRvIGdlbmVyYXRlIHRoZSBvc2NpbGxhdGlvbiB3aXRoLlxuICogQHJldHVybiB7Tm9kZTxmbG9hdD59IFRoZSBvc2NpbGxhdGlvbiBub2RlLlxuICovXG5leHBvcnQgY29uc3Qgb3NjVHJpYW5nbGUgPSAoIHQgPSB0aW1lICkgPT4gdC5hZGQoIDAuNSApLmZyYWN0KCkubXVsKCAyICkuc3ViKCAxICkuYWJzKCk7XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgc2F3dG9vdGggd2F2ZSBvc2NpbGxhdGlvbiBiYXNlZCBvbiBhIHRpbWVyLlxuICpcbiAqIEB0c2xcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtOb2RlPGZsb2F0Pn0gdCAtIFRoZSB0aW1lciB0byBnZW5lcmF0ZSB0aGUgb3NjaWxsYXRpb24gd2l0aC5cbiAqIEByZXR1cm4ge05vZGU8ZmxvYXQ+fSBUaGUgb3NjaWxsYXRpb24gbm9kZS5cbiAqL1xuZXhwb3J0IGNvbnN0IG9zY1Nhd3Rvb3RoID0gKCB0ID0gdGltZSApID0+IHQuZnJhY3QoKTtcbiIsImltcG9ydCBEYXRhTWFwIGZyb20gJy4vRGF0YU1hcC5qcyc7XG5pbXBvcnQgQ29sb3I0IGZyb20gJy4vQ29sb3I0LmpzJztcbmltcG9ydCB7IHZlYzQsIGNvbnRleHQsIG5vcm1hbFdvcmxkLCBiYWNrZ3JvdW5kQmx1cnJpbmVzcywgYmFja2dyb3VuZEludGVuc2l0eSwgYmFja2dyb3VuZFJvdGF0aW9uLCBtb2RlbFZpZXdQcm9qZWN0aW9uIH0gZnJvbSAnLi4vLi4vbm9kZXMvVFNMLmpzJztcbmltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vbWF0ZXJpYWxzL25vZGVzL05vZGVNYXRlcmlhbC5qcyc7XG5cbmltcG9ydCB7IE1lc2ggfSBmcm9tICcuLi8uLi9vYmplY3RzL01lc2guanMnO1xuaW1wb3J0IHsgU3BoZXJlR2VvbWV0cnkgfSBmcm9tICcuLi8uLi9nZW9tZXRyaWVzL1NwaGVyZUdlb21ldHJ5LmpzJztcbmltcG9ydCB7IEJhY2tTaWRlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuY29uc3QgX2NsZWFyQ29sb3IgPSAvKkBfX1BVUkVfXyovIG5ldyBDb2xvcjQoKTtcblxuLyoqXG4gKiBUaGlzIHJlbmRlcmVyIG1vZHVsZSBtYW5hZ2VzIHRoZSBiYWNrZ3JvdW5kLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgRGF0YU1hcFxuICovXG5jbGFzcyBCYWNrZ3JvdW5kIGV4dGVuZHMgRGF0YU1hcCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYmFja2dyb3VuZCBtYW5hZ2VtZW50IGNvbXBvbmVudC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7Tm9kZXN9IG5vZGVzIC0gUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBub2RlcyByZWxhdGVkIGxvZ2ljLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJlbmRlcmVyLCBub2RlcyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVuZGVyZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7UmVuZGVyZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVuZGVyZXIgY29tcG9uZW50IGZvciBtYW5hZ2luZyBub2RlcyByZWxhdGVkIGxvZ2ljLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGVzfVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZXMgPSBub2RlcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGJhY2tncm91bmQgZm9yIHRoZSBnaXZlbiBzY2VuZS4gRGVwZW5kaW5nIG9uIGhvdyBgU2NlbmUuYmFja2dyb3VuZGBcblx0ICogb3IgYFNjZW5lLmJhY2tncm91bmROb2RlYCBhcmUgY29uZmlndXJlZCwgdGhpcyBtZXRob2QgbWlnaHQgY29uZmlndXJlIGEgc2ltcGxlIGNsZWFyXG5cdCAqIG9yIGFkZCBhIG1lc2ggdG8gdGhlIHJlbmRlciBsaXN0IGZvciByZW5kZXJpbmcgdGhlIGJhY2tncm91bmQgYXMgYSB0ZXh0dXJlZCBwbGFuZVxuXHQgKiBvciBza3lib3guXG5cdCAqXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lLlxuXHQgKiBAcGFyYW0ge1JlbmRlckxpc3R9IHJlbmRlckxpc3QgLSBUaGUgY3VycmVudCByZW5kZXIgbGlzdC5cblx0ICogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIGN1cnJlbnQgcmVuZGVyIGNvbnRleHQuXG5cdCAqL1xuXHR1cGRhdGUoIHNjZW5lLCByZW5kZXJMaXN0LCByZW5kZXJDb250ZXh0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXHRcdGNvbnN0IGJhY2tncm91bmQgPSB0aGlzLm5vZGVzLmdldEJhY2tncm91bmROb2RlKCBzY2VuZSApIHx8IHNjZW5lLmJhY2tncm91bmQ7XG5cblx0XHRsZXQgZm9yY2VDbGVhciA9IGZhbHNlO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kID09PSBudWxsICkge1xuXG5cdFx0XHQvLyBubyBiYWNrZ3JvdW5kIHNldHRpbmdzLCB1c2UgY2xlYXIgY29sb3IgY29uZmlndXJhdGlvbiBmcm9tIHRoZSByZW5kZXJlclxuXG5cdFx0XHRyZW5kZXJlci5fY2xlYXJDb2xvci5nZXRSR0IoIF9jbGVhckNvbG9yICk7XG5cdFx0XHRfY2xlYXJDb2xvci5hID0gcmVuZGVyZXIuX2NsZWFyQ29sb3IuYTtcblxuXHRcdH0gZWxzZSBpZiAoIGJhY2tncm91bmQuaXNDb2xvciA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Ly8gYmFja2dyb3VuZCBpcyBhbiBvcGFxdWUgY29sb3JcblxuXHRcdFx0YmFja2dyb3VuZC5nZXRSR0IoIF9jbGVhckNvbG9yICk7XG5cdFx0XHRfY2xlYXJDb2xvci5hID0gMTtcblxuXHRcdFx0Zm9yY2VDbGVhciA9IHRydWU7XG5cblx0XHR9IGVsc2UgaWYgKCBiYWNrZ3JvdW5kLmlzTm9kZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc3Qgc2NlbmVEYXRhID0gdGhpcy5nZXQoIHNjZW5lICk7XG5cdFx0XHRjb25zdCBiYWNrZ3JvdW5kTm9kZSA9IGJhY2tncm91bmQ7XG5cblx0XHRcdF9jbGVhckNvbG9yLmNvcHkoIHJlbmRlcmVyLl9jbGVhckNvbG9yICk7XG5cblx0XHRcdGxldCBiYWNrZ3JvdW5kTWVzaCA9IHNjZW5lRGF0YS5iYWNrZ3JvdW5kTWVzaDtcblxuXHRcdFx0aWYgKCBiYWNrZ3JvdW5kTWVzaCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnN0IGJhY2tncm91bmRNZXNoTm9kZSA9IGNvbnRleHQoIHZlYzQoIGJhY2tncm91bmROb2RlICkubXVsKCBiYWNrZ3JvdW5kSW50ZW5zaXR5ICksIHtcblx0XHRcdFx0XHQvLyBAVE9ETzogQWRkIFRleHR1cmUyRCBzdXBwb3J0IHVzaW5nIG5vZGUgY29udGV4dFxuXHRcdFx0XHRcdGdldFVWOiAoKSA9PiBiYWNrZ3JvdW5kUm90YXRpb24ubXVsKCBub3JtYWxXb3JsZCApLFxuXHRcdFx0XHRcdGdldFRleHR1cmVMZXZlbDogKCkgPT4gYmFja2dyb3VuZEJsdXJyaW5lc3Ncblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdGxldCB2aWV3UHJvaiA9IG1vZGVsVmlld1Byb2plY3Rpb247XG5cdFx0XHRcdHZpZXdQcm9qID0gdmlld1Byb2ouc2V0Wiggdmlld1Byb2oudyApO1xuXG5cdFx0XHRcdGNvbnN0IG5vZGVNYXRlcmlhbCA9IG5ldyBOb2RlTWF0ZXJpYWwoKTtcblx0XHRcdFx0bm9kZU1hdGVyaWFsLm5hbWUgPSAnQmFja2dyb3VuZC5tYXRlcmlhbCc7XG5cdFx0XHRcdG5vZGVNYXRlcmlhbC5zaWRlID0gQmFja1NpZGU7XG5cdFx0XHRcdG5vZGVNYXRlcmlhbC5kZXB0aFRlc3QgPSBmYWxzZTtcblx0XHRcdFx0bm9kZU1hdGVyaWFsLmRlcHRoV3JpdGUgPSBmYWxzZTtcblx0XHRcdFx0bm9kZU1hdGVyaWFsLmZvZyA9IGZhbHNlO1xuXHRcdFx0XHRub2RlTWF0ZXJpYWwubGlnaHRzID0gZmFsc2U7XG5cdFx0XHRcdG5vZGVNYXRlcmlhbC52ZXJ0ZXhOb2RlID0gdmlld1Byb2o7XG5cdFx0XHRcdG5vZGVNYXRlcmlhbC5jb2xvck5vZGUgPSBiYWNrZ3JvdW5kTWVzaE5vZGU7XG5cblx0XHRcdFx0c2NlbmVEYXRhLmJhY2tncm91bmRNZXNoTm9kZSA9IGJhY2tncm91bmRNZXNoTm9kZTtcblx0XHRcdFx0c2NlbmVEYXRhLmJhY2tncm91bmRNZXNoID0gYmFja2dyb3VuZE1lc2ggPSBuZXcgTWVzaCggbmV3IFNwaGVyZUdlb21ldHJ5KCAxLCAzMiwgMzIgKSwgbm9kZU1hdGVyaWFsICk7XG5cdFx0XHRcdGJhY2tncm91bmRNZXNoLmZydXN0dW1DdWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0YmFja2dyb3VuZE1lc2gubmFtZSA9ICdCYWNrZ3JvdW5kLm1lc2gnO1xuXG5cdFx0XHRcdGJhY2tncm91bmRNZXNoLm9uQmVmb3JlUmVuZGVyID0gZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weVBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJhY2tncm91bmRDYWNoZUtleSA9IGJhY2tncm91bmROb2RlLmdldENhY2hlS2V5KCk7XG5cblx0XHRcdGlmICggc2NlbmVEYXRhLmJhY2tncm91bmRDYWNoZUtleSAhPT0gYmFja2dyb3VuZENhY2hlS2V5ICkge1xuXG5cdFx0XHRcdHNjZW5lRGF0YS5iYWNrZ3JvdW5kTWVzaE5vZGUubm9kZSA9IHZlYzQoIGJhY2tncm91bmROb2RlICkubXVsKCBiYWNrZ3JvdW5kSW50ZW5zaXR5ICk7XG5cdFx0XHRcdHNjZW5lRGF0YS5iYWNrZ3JvdW5kTWVzaE5vZGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdGJhY2tncm91bmRNZXNoLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRzY2VuZURhdGEuYmFja2dyb3VuZENhY2hlS2V5ID0gYmFja2dyb3VuZENhY2hlS2V5O1xuXG5cdFx0XHR9XG5cblx0XHRcdHJlbmRlckxpc3QudW5zaGlmdCggYmFja2dyb3VuZE1lc2gsIGJhY2tncm91bmRNZXNoLmdlb21ldHJ5LCBiYWNrZ3JvdW5kTWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCwgbnVsbCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlJlbmRlcmVyOiBVbnN1cHBvcnRlZCBiYWNrZ3JvdW5kIGNvbmZpZ3VyYXRpb24uJywgYmFja2dyb3VuZCApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGVudmlyb25tZW50QmxlbmRNb2RlID0gcmVuZGVyZXIueHIuZ2V0RW52aXJvbm1lbnRCbGVuZE1vZGUoKTtcblxuXHRcdGlmICggZW52aXJvbm1lbnRCbGVuZE1vZGUgPT09ICdhZGRpdGl2ZScgKSB7XG5cblx0XHRcdF9jbGVhckNvbG9yLnNldCggMCwgMCwgMCwgMSApO1xuXG5cdFx0fSBlbHNlIGlmICggZW52aXJvbm1lbnRCbGVuZE1vZGUgPT09ICdhbHBoYS1ibGVuZCcgKSB7XG5cblx0XHRcdF9jbGVhckNvbG9yLnNldCggMCwgMCwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggcmVuZGVyZXIuYXV0b0NsZWFyID09PSB0cnVlIHx8IGZvcmNlQ2xlYXIgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGNsZWFyQ29sb3JWYWx1ZSA9IHJlbmRlckNvbnRleHQuY2xlYXJDb2xvclZhbHVlO1xuXG5cdFx0XHRjbGVhckNvbG9yVmFsdWUuciA9IF9jbGVhckNvbG9yLnI7XG5cdFx0XHRjbGVhckNvbG9yVmFsdWUuZyA9IF9jbGVhckNvbG9yLmc7XG5cdFx0XHRjbGVhckNvbG9yVmFsdWUuYiA9IF9jbGVhckNvbG9yLmI7XG5cdFx0XHRjbGVhckNvbG9yVmFsdWUuYSA9IF9jbGVhckNvbG9yLmE7XG5cblx0XHRcdC8vIHByZW11bHRpcGx5IGFscGhhXG5cblx0XHRcdGlmICggcmVuZGVyZXIuYmFja2VuZC5pc1dlYkdMQmFja2VuZCA9PT0gdHJ1ZSB8fCByZW5kZXJlci5hbHBoYSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjbGVhckNvbG9yVmFsdWUuciAqPSBjbGVhckNvbG9yVmFsdWUuYTtcblx0XHRcdFx0Y2xlYXJDb2xvclZhbHVlLmcgKj0gY2xlYXJDb2xvclZhbHVlLmE7XG5cdFx0XHRcdGNsZWFyQ29sb3JWYWx1ZS5iICo9IGNsZWFyQ29sb3JWYWx1ZS5hO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdHJlbmRlckNvbnRleHQuZGVwdGhDbGVhclZhbHVlID0gcmVuZGVyZXIuX2NsZWFyRGVwdGg7XG5cdFx0XHRyZW5kZXJDb250ZXh0LnN0ZW5jaWxDbGVhclZhbHVlID0gcmVuZGVyZXIuX2NsZWFyU3RlbmNpbDtcblxuXHRcdFx0cmVuZGVyQ29udGV4dC5jbGVhckNvbG9yID0gcmVuZGVyZXIuYXV0b0NsZWFyQ29sb3IgPT09IHRydWU7XG5cdFx0XHRyZW5kZXJDb250ZXh0LmNsZWFyRGVwdGggPSByZW5kZXJlci5hdXRvQ2xlYXJEZXB0aCA9PT0gdHJ1ZTtcblx0XHRcdHJlbmRlckNvbnRleHQuY2xlYXJTdGVuY2lsID0gcmVuZGVyZXIuYXV0b0NsZWFyU3RlbmNpbCA9PT0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlckNvbnRleHQuY2xlYXJDb2xvciA9IGZhbHNlO1xuXHRcdFx0cmVuZGVyQ29udGV4dC5jbGVhckRlcHRoID0gZmFsc2U7XG5cdFx0XHRyZW5kZXJDb250ZXh0LmNsZWFyU3RlbmNpbCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBCYWNrZ3JvdW5kO1xuIiwibGV0IF9pZCA9IDA7XG5cbi8qKlxuICogQSBiaW5kIGdyb3VwIHJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIGJpbmRpbmdzIGFuZCB0aHVzIGEgY29sbGVjdGlvblxuICogb3IgcmVzb3VyY2VzLiBCaW5kIGdyb3VwcyBhcmUgYXNzaWduZWQgdG8gcGlwZWxpbmVzIHRvIHByb3ZpZGUgdGhlbVxuICogd2l0aCB0aGUgcmVxdWlyZWQgcmVzb3VyY2VzIChsaWtlIHVuaWZvcm0gYnVmZmVycyBvciB0ZXh0dXJlcykuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQmluZEdyb3VwIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBiaW5kIGdyb3VwLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBiaW5kIGdyb3VwJ3MgbmFtZS5cblx0ICogQHBhcmFtIHtBcnJheTxCaW5kaW5nPn0gYmluZGluZ3MgLSBBbiBhcnJheSBvZiBiaW5kaW5ncy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGdyb3VwIGluZGV4LlxuXHQgKiBAcGFyYW0ge0FycmF5PEJpbmRpbmc+fSBiaW5kaW5nc1JlZmVyZW5jZSAtIEFuIGFycmF5IG9mIHJlZmVyZW5jZSBiaW5kaW5ncy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lID0gJycsIGJpbmRpbmdzID0gW10sIGluZGV4ID0gMCwgYmluZGluZ3NSZWZlcmVuY2UgPSBbXSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBiaW5kIGdyb3VwJ3MgbmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IG9mIGJpbmRpbmdzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PEJpbmRpbmc+fVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZGluZ3MgPSBiaW5kaW5ncztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBncm91cCBpbmRleC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5pbmRleCA9IGluZGV4O1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgb2YgcmVmZXJlbmNlIGJpbmRpbmdzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PEJpbmRpbmc+fVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZGluZ3NSZWZlcmVuY2UgPSBiaW5kaW5nc1JlZmVyZW5jZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBncm91cCdzIElELlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLmlkID0gX2lkICsrO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBCaW5kR3JvdXA7XG4iLCJpbXBvcnQgQmluZEdyb3VwIGZyb20gJy4uL0JpbmRHcm91cC5qcyc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgcmVwcmVzZW50cyB0aGUgc3RhdGUgb2YgYSBub2RlIGJ1aWxkZXIgYWZ0ZXIgaXQgd2FzXG4gKiB1c2VkIHRvIGJ1aWxkIHRoZSBub2RlcyBmb3IgYSByZW5kZXIgb2JqZWN0LiBUaGUgc3RhdGUgaG9sZHMgdGhlXG4gKiByZXN1bHRzIG9mIHRoZSBidWlsZCBmb3IgZnVydGhlciBwcm9jZXNzaW5nIGluIHRoZSByZW5kZXJlci5cbiAqXG4gKiBSZW5kZXIgb2JqZWN0cyB3aXRoIGlkZW50aWNhbCBjYWNoZSBrZXlzIHNoYXJlIHRoZSBzYW1lIG5vZGUgYnVpbGRlciBzdGF0ZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBOb2RlQnVpbGRlclN0YXRlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlIGJ1aWxkZXIgc3RhdGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0ZXhTaGFkZXIgLSBUaGUgbmF0aXZlIHZlcnRleCBzaGFkZXIgY29kZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGZyYWdtZW50U2hhZGVyIC0gVGhlIG5hdGl2ZSBmcmFnbWVudCBzaGFkZXIgY29kZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGNvbXB1dGVTaGFkZXIgLSBUaGUgbmF0aXZlIGNvbXB1dGUgc2hhZGVyIGNvZGUuXG5cdCAqIEBwYXJhbSB7QXJyYXk8Tm9kZUF0dHJpYnV0ZT59IG5vZGVBdHRyaWJ1dGVzIC0gQW4gYXJyYXkgb2Ygbm9kZSBhdHRyaWJ1dGVzLlxuXHQgKiBAcGFyYW0ge0FycmF5PEJpbmRHcm91cD59IGJpbmRpbmdzIC0gQW4gYXJyYXkgb2YgYmluZCBncm91cHMuXG5cdCAqIEBwYXJhbSB7QXJyYXk8Tm9kZT59IHVwZGF0ZU5vZGVzIC0gQW4gYXJyYXkgb2Ygbm9kZXMgdGhhdCBpbXBsZW1lbnQgdGhlaXIgYHVwZGF0ZSgpYCBtZXRob2QuXG5cdCAqIEBwYXJhbSB7QXJyYXk8Tm9kZT59IHVwZGF0ZUJlZm9yZU5vZGVzIC0gQW4gYXJyYXkgb2Ygbm9kZXMgdGhhdCBpbXBsZW1lbnQgdGhlaXIgYHVwZGF0ZUJlZm9yZSgpYCBtZXRob2QuXG5cdCAqIEBwYXJhbSB7QXJyYXk8Tm9kZT59IHVwZGF0ZUFmdGVyTm9kZXMgLSBBbiBhcnJheSBvZiBub2RlcyB0aGF0IGltcGxlbWVudCB0aGVpciBgdXBkYXRlQWZ0ZXIoKWAgbWV0aG9kLlxuXHQgKiBAcGFyYW0ge05vZGVNYXRlcmlhbE9ic2VydmVyfSBvYnNlcnZlciAtIEEgbm9kZSBtYXRlcmlhbCBvYnNlcnZlci5cblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSB0cmFuc2Zvcm1zIC0gQW4gYXJyYXkgd2l0aCB0cmFuc2Zvcm0gYXR0cmlidXRlIG9iamVjdHMuIE9ubHkgcmVsZXZhbnQgd2hlbiB1c2luZyBjb21wdXRlIHNoYWRlcnMgd2l0aCBXZWJHTCAyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIsIGNvbXB1dGVTaGFkZXIsIG5vZGVBdHRyaWJ1dGVzLCBiaW5kaW5ncywgdXBkYXRlTm9kZXMsIHVwZGF0ZUJlZm9yZU5vZGVzLCB1cGRhdGVBZnRlck5vZGVzLCBvYnNlcnZlciwgdHJhbnNmb3JtcyA9IFtdICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hdGl2ZSB2ZXJ0ZXggc2hhZGVyIGNvZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMudmVydGV4U2hhZGVyID0gdmVydGV4U2hhZGVyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hdGl2ZSBmcmFnbWVudCBzaGFkZXIgY29kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5mcmFnbWVudFNoYWRlciA9IGZyYWdtZW50U2hhZGVyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hdGl2ZSBjb21wdXRlIHNoYWRlciBjb2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLmNvbXB1dGVTaGFkZXIgPSBjb21wdXRlU2hhZGVyO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgd2l0aCB0cmFuc2Zvcm0gYXR0cmlidXRlIG9iamVjdHMuXG5cdFx0ICogT25seSByZWxldmFudCB3aGVuIHVzaW5nIGNvbXB1dGUgc2hhZGVycyB3aXRoIFdlYkdMIDIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnRyYW5zZm9ybXMgPSB0cmFuc2Zvcm1zO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgb2Ygbm9kZSBhdHRyaWJ1dGVzIHJlcHJlc2VudGluZ1xuXHRcdCAqIHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBzaGFkZXJzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE5vZGVBdHRyaWJ1dGU+fVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZUF0dHJpYnV0ZXMgPSBub2RlQXR0cmlidXRlcztcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IG9mIGJpbmQgZ3JvdXBzIHJlcHJlc2VudGluZyB0aGUgdW5pZm9ybSBvciBzdG9yYWdlXG5cdFx0ICogYnVmZmVycywgdGV4dHVyZSBvciBzYW1wbGVycyBvZiB0aGUgc2hhZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PEJpbmRHcm91cD59XG5cdFx0ICovXG5cdFx0dGhpcy5iaW5kaW5ncyA9IGJpbmRpbmdzO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgb2Ygbm9kZXMgdGhhdCBpbXBsZW1lbnQgdGhlaXIgYHVwZGF0ZSgpYCBtZXRob2QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Tm9kZT59XG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVOb2RlcyA9IHVwZGF0ZU5vZGVzO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgb2Ygbm9kZXMgdGhhdCBpbXBsZW1lbnQgdGhlaXIgYHVwZGF0ZUJlZm9yZSgpYCBtZXRob2QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Tm9kZT59XG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVCZWZvcmVOb2RlcyA9IHVwZGF0ZUJlZm9yZU5vZGVzO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgb2Ygbm9kZXMgdGhhdCBpbXBsZW1lbnQgdGhlaXIgYHVwZGF0ZUFmdGVyKClgIG1ldGhvZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxOb2RlPn1cblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZUFmdGVyTm9kZXMgPSB1cGRhdGVBZnRlck5vZGVzO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBub2RlIG1hdGVyaWFsIG9ic2VydmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGVNYXRlcmlhbE9ic2VydmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBvZnRlbiB0aGlzIHN0YXRlIGlzIHVzZWQgYnkgcmVuZGVyIG9iamVjdHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMudXNlZFRpbWVzID0gMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gY3JlYXRlIGEgYXJyYXkgb2YgYmluZCBncm91cHMgYmFzZWRcblx0ICogb24gdGhlIGV4aXN0aW5nIGJpbmQgZ3JvdXBzIG9mIHRoaXMgc3RhdGUuIFNoYXJlZCBncm91cHMgYXJlXG5cdCAqIG5vdCBjbG9uZWQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0FycmF5PEJpbmRHcm91cD59IEEgYXJyYXkgb2YgYmluZCBncm91cHMuXG5cdCAqL1xuXHRjcmVhdGVCaW5kaW5ncygpIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gW107XG5cblx0XHRmb3IgKCBjb25zdCBpbnN0YW5jZUdyb3VwIG9mIHRoaXMuYmluZGluZ3MgKSB7XG5cblx0XHRcdGNvbnN0IHNoYXJlZCA9IGluc3RhbmNlR3JvdXAuYmluZGluZ3NbIDAgXS5ncm91cE5vZGUuc2hhcmVkOyAvLyBBbGwgYmluZGluZ3MgaW4gdGhlIGdyb3VwIG11c3QgaGF2ZSB0aGUgc2FtZSBncm91cE5vZGUuXG5cblx0XHRcdGlmICggc2hhcmVkICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnN0IGJpbmRpbmdzR3JvdXAgPSBuZXcgQmluZEdyb3VwKCBpbnN0YW5jZUdyb3VwLm5hbWUsIFtdLCBpbnN0YW5jZUdyb3VwLmluZGV4LCBpbnN0YW5jZUdyb3VwICk7XG5cdFx0XHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmdzR3JvdXAgKTtcblxuXHRcdFx0XHRmb3IgKCBjb25zdCBpbnN0YW5jZUJpbmRpbmcgb2YgaW5zdGFuY2VHcm91cC5iaW5kaW5ncyApIHtcblxuXHRcdFx0XHRcdGJpbmRpbmdzR3JvdXAuYmluZGluZ3MucHVzaCggaW5zdGFuY2VCaW5kaW5nLmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0YmluZGluZ3MucHVzaCggaW5zdGFuY2VHcm91cCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYmluZGluZ3M7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVCdWlsZGVyU3RhdGU7XG4iLCIvKipcbiAqIHtAbGluayBOb2RlQnVpbGRlcn0gaXMgZ29pbmcgdG8gY3JlYXRlIGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGR1cmluZyB0aGUgYnVpbGQgcHJvY2Vzc1xuICogb2Ygbm9kZXMuIFRoZXkgcmVwcmVzZW50IHRoZSBmaW5hbCBzaGFkZXIgYXR0cmlidXRlcyB0aGF0IGFyZSBnb2luZyB0byBiZSBnZW5lcmF0ZWRcbiAqIGJ5IHRoZSBidWlsZGVyLiBBcnJheXMgb2Ygbm9kZSBhdHRyaWJ1dGVzIGlzIG1haW50YWluZWQgaW4ge0BsaW5rIE5vZGVCdWlsZGVyI2F0dHJpYnV0ZXN9XG4gKiBhbmQge0BsaW5rIE5vZGVCdWlsZGVyI2J1ZmZlckF0dHJpYnV0ZXN9IGZvciB0aGlzIHB1cnBvc2UuXG4gKi9cbmNsYXNzIE5vZGVBdHRyaWJ1dGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgdGhlIGF0dHJpYnV0ZS5cblx0ICogQHBhcmFtIHs/Tm9kZX0gbm9kZSAtIEFuIG9wdGlvbmFsIHJlZmVyZW5jZSB0byB0aGUgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB0eXBlLCBub2RlID0gbnVsbCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNOb2RlQXR0cmlidXRlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdHlwZSBvZiB0aGUgYXR0cmlidXRlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gb3B0aW9uYWwgcmVmZXJlbmNlIHRvIHRoZSBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm5vZGUgPSBub2RlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBOb2RlQXR0cmlidXRlO1xuIiwiLyoqXG4gKiB7QGxpbmsgTm9kZUJ1aWxkZXJ9IGlzIGdvaW5nIHRvIGNyZWF0ZSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzcyBkdXJpbmcgdGhlIGJ1aWxkIHByb2Nlc3NcbiAqIG9mIG5vZGVzLiBUaGV5IHJlcHJlc2VudCB0aGUgZmluYWwgc2hhZGVyIHVuaWZvcm1zIHRoYXQgYXJlIGdvaW5nIHRvIGJlIGdlbmVyYXRlZFxuICogYnkgdGhlIGJ1aWxkZXIuIEEgZGljdGlvbmFyeSBvZiBub2RlIHVuaWZvcm1zIGlzIG1haW50YWluZWQgaW4ge0BsaW5rIE5vZGVCdWlsZGVyI3VuaWZvcm1zfVxuICogZm9yIHRoaXMgcHVycG9zZS5cbiAqL1xuY2xhc3MgTm9kZVVuaWZvcm0ge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUgdW5pZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdW5pZm9ybS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiB0aGUgdW5pZm9ybS5cblx0ICogQHBhcmFtIHtVbmlmb3JtTm9kZX0gbm9kZSAtIEFuIHJlZmVyZW5jZSB0byB0aGUgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB0eXBlLCBub2RlICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc05vZGVVbmlmb3JtID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSB1bmlmb3JtLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgb2YgdGhlIHVuaWZvcm0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cblx0XHQvKipcblx0XHQgKiBBbiByZWZlcmVuY2UgdG8gdGhlIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlID0gbm9kZS5nZXRTZWxmKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgdmFsdWUgb2YgdGhlIHVuaWZvcm0gbm9kZS5cblx0ICpcblx0ICogQHR5cGUge2FueX1cblx0ICovXG5cdGdldCB2YWx1ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGUudmFsdWU7XG5cblx0fVxuXG5cdHNldCB2YWx1ZSggdmFsICkge1xuXG5cdFx0dGhpcy5ub2RlLnZhbHVlID0gdmFsO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGlkIG9mIHRoZSB1bmlmb3JtIG5vZGUuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqL1xuXHRnZXQgaWQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub2RlLmlkO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIHVuaWZvcm0gbm9kZSdzIGdyb3VwLlxuXHQgKlxuXHQgKiBAdHlwZSB7VW5pZm9ybUdyb3VwTm9kZX1cblx0ICovXG5cdGdldCBncm91cE5vZGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub2RlLmdyb3VwTm9kZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZVVuaWZvcm07XG4iLCIvKipcbiAqIHtAbGluayBOb2RlQnVpbGRlcn0gaXMgZ29pbmcgdG8gY3JlYXRlIGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGR1cmluZyB0aGUgYnVpbGQgcHJvY2Vzc1xuICogb2Ygbm9kZXMuIFRoZXkgcmVwcmVzZW50IHRoZSBmaW5hbCBzaGFkZXIgdmFyaWFibGVzIHRoYXQgYXJlIGdvaW5nIHRvIGJlIGdlbmVyYXRlZFxuICogYnkgdGhlIGJ1aWxkZXIuIEEgZGljdGlvbmFyeSBvZiBub2RlIHZhcmlhYmxlcyBpcyBtYWludGFpbmVkIGluIHtAbGluayBOb2RlQnVpbGRlciN2YXJzfSBmb3JcbiAqIHRoaXMgcHVycG9zZS5cbiAqL1xuY2xhc3MgTm9kZVZhciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbm9kZSB2YXJpYWJsZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdmFyaWFibGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgdGhlIHZhcmlhYmxlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZWFkT25seT1mYWxzZV0gLSBUaGUgcmVhZC1vbmx5IGZsYWcuXG5cdCAqIEBwYXJhbSB7P251bWJlcn0gW2NvdW50PW51bGxdIC0gVGhlIHNpemUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmFtZSwgdHlwZSwgcmVhZE9ubHkgPSBmYWxzZSwgY291bnQgPSBudWxsICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc05vZGVWYXIgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgb2YgdGhlIHZhcmlhYmxlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogIFRoZSByZWFkLW9ubHkgZmxhZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMucmVhZE9ubHkgPSByZWFkT25seTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzaXplLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9udW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBOb2RlVmFyO1xuIiwiaW1wb3J0IE5vZGVWYXIgZnJvbSAnLi9Ob2RlVmFyLmpzJztcblxuLyoqXG4gKiB7QGxpbmsgTm9kZUJ1aWxkZXJ9IGlzIGdvaW5nIHRvIGNyZWF0ZSBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzcyBkdXJpbmcgdGhlIGJ1aWxkIHByb2Nlc3NcbiAqIG9mIG5vZGVzLiBUaGV5IHJlcHJlc2VudCB0aGUgZmluYWwgc2hhZGVyIHZhcnlpbmdzIHRoYXQgYXJlIGdvaW5nIHRvIGJlIGdlbmVyYXRlZFxuICogYnkgdGhlIGJ1aWxkZXIuIEFuIGFycmF5IG9mIG5vZGUgdmFyeWluZ3MgaXMgbWFpbnRhaW5lZCBpbiB7QGxpbmsgTm9kZUJ1aWxkZXIjdmFyeWluZ3N9IGZvclxuICogdGhpcyBwdXJwb3NlLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlVmFyXG4gKi9cbmNsYXNzIE5vZGVWYXJ5aW5nIGV4dGVuZHMgTm9kZVZhciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbm9kZSB2YXJ5aW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB2YXJ5aW5nLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIG9mIHRoZSB2YXJ5aW5nLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHR5cGUgKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdHlwZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGlzIHZhcnlpbmcgcmVxdWlyZXMgaW50ZXJwb2xhdGlvbiBvciBub3QuIFRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWRcblx0XHQgKiB0byBjaGVjayBpZiB0aGUgdmFyeWluZyBjYW4gYmUgb3B0aW1pemVkIGZvciBhIHZhcmlhYmxlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLm5lZWRzSW50ZXJwb2xhdGlvbiA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc05vZGVWYXJ5aW5nID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZVZhcnlpbmc7XG4iLCIvKipcbiAqIHtAbGluayBOb2RlQnVpbGRlcn0gaXMgZ29pbmcgdG8gY3JlYXRlIGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGR1cmluZyB0aGUgYnVpbGQgcHJvY2Vzc1xuICogb2Ygbm9kZXMuIFRoZXkgcmVwcmVzZW50IHVzZXItZGVmaW5lZCwgbmF0aXZlIHNoYWRlciBjb2RlIHBvcnRpb25zIHRoYXQgYXJlIGdvaW5nIHRvIGJlXG4gKiBpbmplY3RlZCBieSB0aGUgYnVpbGRlci4gQSBkaWN0aW9uYXJ5IG9mIG5vZGUgY29kZXMgaXMgbWFpbnRhaW5lZCBpbiB7QGxpbmsgTm9kZUJ1aWxkZXIjY29kZXN9XG4gKiBmb3IgdGhpcyBwdXJwb3NlLlxuICovXG5jbGFzcyBOb2RlQ29kZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY29kZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb2RlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBub2RlIHR5cGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZT0nJ10gLSBUaGUgbmF0aXZlIHNoYWRlciBjb2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHR5cGUsIGNvZGUgPSAnJyApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSBjb2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdHlwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYXRpdmUgc2hhZGVyIGNvZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0ICcnXG5cdFx0ICovXG5cdFx0dGhpcy5jb2RlID0gY29kZTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lzTm9kZUNvZGUnLCB7IHZhbHVlOiB0cnVlIH0gKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZUNvZGU7XG4iLCJsZXQgX2lkID0gMDtcblxuLyoqXG4gKiBUaGlzIHV0aWxpdHkgY2xhc3MgaXMgdXNlZCBpbiB7QGxpbmsgTm9kZUJ1aWxkZXJ9IGFzIGFuIGludGVybmFsXG4gKiBjYWNoZSBkYXRhIHN0cnVjdHVyZSBmb3Igbm9kZSBkYXRhLlxuICovXG5jbGFzcyBOb2RlQ2FjaGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUgY2FjaGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P05vZGVDYWNoZX0gcGFyZW50IC0gQSByZWZlcmVuY2UgdG8gYSBwYXJlbnQgY2FjaGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyZW50ID0gbnVsbCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpZCBvZiB0aGUgY2FjaGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMuaWQgPSBfaWQgKys7XG5cblx0XHQvKipcblx0XHQgKiBBIHdlYWsgbWFwIGZvciBtYW5hZ2luZyBub2RlIGRhdGEuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2Vha01hcDxOb2RlLCBPYmplY3Q+fVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZXNEYXRhID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byBhIHBhcmVudCBub2RlIGNhY2hlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlQ2FjaGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucGFyZW50ID0gcGFyZW50O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGF0YSBmb3IgdGhlIGdpdmVuIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlLlxuXHQgKiBAcmV0dXJuIHs/T2JqZWN0fSBUaGUgZGF0YSBmb3IgdGhlIG5vZGUuXG5cdCAqL1xuXHRnZXREYXRhKCBub2RlICkge1xuXG5cdFx0bGV0IGRhdGEgPSB0aGlzLm5vZGVzRGF0YS5nZXQoIG5vZGUgKTtcblxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIHRoaXMucGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRkYXRhID0gdGhpcy5wYXJlbnQuZ2V0RGF0YSggbm9kZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBkYXRhIGZvciBhIGdpdmVuIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIHRoYXQgc2hvdWxkIGJlIGNhY2hlZC5cblx0ICovXG5cdHNldERhdGEoIG5vZGUsIGRhdGEgKSB7XG5cblx0XHR0aGlzLm5vZGVzRGF0YS5zZXQoIG5vZGUsIGRhdGEgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZUNhY2hlO1xuIiwiY2xhc3MgU3RydWN0VHlwZSB7XG5cblx0Y29uc3RydWN0b3IoIG5hbWUsIG1lbWJlcnMgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMubWVtYmVycyA9IG1lbWJlcnM7XG5cdFx0dGhpcy5vdXRwdXQgPSBmYWxzZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RydWN0VHlwZTtcbiIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vbWF0aC9Db2xvci5qcyc7XG5pbXBvcnQgeyBNYXRyaXgyIH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXgyLmpzJztcbmltcG9ydCB7IE1hdHJpeDMgfSBmcm9tICcuLi8uLi9tYXRoL01hdHJpeDMuanMnO1xuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uLy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IyLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yNC5qcyc7XG5cbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdW5pZm9ybXMuXG4gKlxuICogQGFic3RyYWN0XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBVbmlmb3JtIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB1bmlmb3JtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSB1bmlmb3JtJ3MgbmFtZS5cblx0ICogQHBhcmFtIHthbnl9IHZhbHVlIC0gVGhlIHVuaWZvcm0ncyB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB2YWx1ZSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1bmlmb3JtJ3MgbmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1bmlmb3JtJ3MgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7YW55fVxuXHRcdCAqL1xuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gYnVpbGQgdGhlIHVuaWZvcm0gYnVmZmVyIGFjY29yZGluZyB0byB0aGUgU1REMTQwIGxheW91dC5cblx0XHQgKiBEZXJpdmVkIHVuaWZvcm1zIHdpbGwgc2V0IHRoaXMgcHJvcGVydHkgdG8gYSBkYXRhIHR5cGUgc3BlY2lmaWNcblx0XHQgKiB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5ib3VuZGFyeSA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaXRlbSBzaXplLiBEZXJpdmVkIHVuaWZvcm1zIHdpbGwgc2V0IHRoaXMgcHJvcGVydHkgdG8gYSBkYXRhXG5cdFx0ICogdHlwZSBzcGVjaWZpYyB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5pdGVtU2l6ZSA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIHByb3BlcnR5IGlzIHNldCBieSB7QGxpbmsgVW5pZm9ybXNHcm91cH0gYW5kIG1hcmtzXG5cdFx0ICogdGhlIHN0YXJ0IHBvc2l0aW9uIGluIHRoZSB1bmlmb3JtIGJ1ZmZlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5vZmZzZXQgPSAwO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdW5pZm9ybSdzIHZhbHVlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2FueX0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0LlxuXHQgKi9cblx0c2V0VmFsdWUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdW5pZm9ybSdzIHZhbHVlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHthbnl9IFRoZSB2YWx1ZS5cblx0ICovXG5cdGdldFZhbHVlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudmFsdWU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIE51bWJlciB1bmlmb3JtLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgVW5pZm9ybVxuICovXG5jbGFzcyBOdW1iZXJVbmlmb3JtIGV4dGVuZHMgVW5pZm9ybSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgTnVtYmVyIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHVuaWZvcm0ncyBuYW1lLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdW5pZm9ybSdzIHZhbHVlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHZhbHVlID0gMCApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB2YWx1ZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc051bWJlclVuaWZvcm0gPSB0cnVlO1xuXG5cdFx0dGhpcy5ib3VuZGFyeSA9IDQ7XG5cdFx0dGhpcy5pdGVtU2l6ZSA9IDE7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIFZlY3RvcjIgdW5pZm9ybS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFVuaWZvcm1cbiAqL1xuY2xhc3MgVmVjdG9yMlVuaWZvcm0gZXh0ZW5kcyBVbmlmb3JtIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBOdW1iZXIgdW5pZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgdW5pZm9ybSdzIG5hbWUuXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gdmFsdWUgLSBUaGUgdW5pZm9ybSdzIHZhbHVlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHZhbHVlID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB2YWx1ZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1ZlY3RvcjJVbmlmb3JtID0gdHJ1ZTtcblxuXHRcdHRoaXMuYm91bmRhcnkgPSA4O1xuXHRcdHRoaXMuaXRlbVNpemUgPSAyO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBWZWN0b3IzIHVuaWZvcm0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBVbmlmb3JtXG4gKi9cbmNsYXNzIFZlY3RvcjNVbmlmb3JtIGV4dGVuZHMgVW5pZm9ybSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgTnVtYmVyIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHVuaWZvcm0ncyBuYW1lLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHZhbHVlIC0gVGhlIHVuaWZvcm0ncyB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB2YWx1ZSA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdmFsdWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNWZWN0b3IzVW5pZm9ybSA9IHRydWU7XG5cblx0XHR0aGlzLmJvdW5kYXJ5ID0gMTY7XG5cdFx0dGhpcy5pdGVtU2l6ZSA9IDM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIFZlY3RvcjQgdW5pZm9ybS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFVuaWZvcm1cbiAqL1xuY2xhc3MgVmVjdG9yNFVuaWZvcm0gZXh0ZW5kcyBVbmlmb3JtIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBOdW1iZXIgdW5pZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgdW5pZm9ybSdzIG5hbWUuXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gdmFsdWUgLSBUaGUgdW5pZm9ybSdzIHZhbHVlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHZhbHVlID0gbmV3IFZlY3RvcjQoKSApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB2YWx1ZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1ZlY3RvcjRVbmlmb3JtID0gdHJ1ZTtcblxuXHRcdHRoaXMuYm91bmRhcnkgPSAxNjtcblx0XHR0aGlzLml0ZW1TaXplID0gNDtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgQ29sb3IgdW5pZm9ybS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFVuaWZvcm1cbiAqL1xuY2xhc3MgQ29sb3JVbmlmb3JtIGV4dGVuZHMgVW5pZm9ybSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgTnVtYmVyIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHVuaWZvcm0ncyBuYW1lLlxuXHQgKiBAcGFyYW0ge0NvbG9yfSB2YWx1ZSAtIFRoZSB1bmlmb3JtJ3MgdmFsdWUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmFtZSwgdmFsdWUgPSBuZXcgQ29sb3IoKSApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB2YWx1ZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0NvbG9yVW5pZm9ybSA9IHRydWU7XG5cblx0XHR0aGlzLmJvdW5kYXJ5ID0gMTY7XG5cdFx0dGhpcy5pdGVtU2l6ZSA9IDM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIE1hdHJpeDIgdW5pZm9ybS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFVuaWZvcm1cbiAqL1xuY2xhc3MgTWF0cml4MlVuaWZvcm0gZXh0ZW5kcyBVbmlmb3JtIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBOdW1iZXIgdW5pZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgdW5pZm9ybSdzIG5hbWUuXG5cdCAqIEBwYXJhbSB7TWF0cml4Mn0gdmFsdWUgLSBUaGUgdW5pZm9ybSdzIHZhbHVlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHZhbHVlID0gbmV3IE1hdHJpeDIoKSApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB2YWx1ZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01hdHJpeDJVbmlmb3JtID0gdHJ1ZTtcblxuXHRcdHRoaXMuYm91bmRhcnkgPSAxNjtcblx0XHR0aGlzLml0ZW1TaXplID0gNDtcblxuXHR9XG5cbn1cblxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBNYXRyaXgzIHVuaWZvcm0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBVbmlmb3JtXG4gKi9cbmNsYXNzIE1hdHJpeDNVbmlmb3JtIGV4dGVuZHMgVW5pZm9ybSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgTnVtYmVyIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHVuaWZvcm0ncyBuYW1lLlxuXHQgKiBAcGFyYW0ge01hdHJpeDN9IHZhbHVlIC0gVGhlIHVuaWZvcm0ncyB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB2YWx1ZSA9IG5ldyBNYXRyaXgzKCkgKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdmFsdWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNNYXRyaXgzVW5pZm9ybSA9IHRydWU7XG5cblx0XHR0aGlzLmJvdW5kYXJ5ID0gNDg7XG5cdFx0dGhpcy5pdGVtU2l6ZSA9IDEyO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBNYXRyaXg0IHVuaWZvcm0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBVbmlmb3JtXG4gKi9cbmNsYXNzIE1hdHJpeDRVbmlmb3JtIGV4dGVuZHMgVW5pZm9ybSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgTnVtYmVyIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHVuaWZvcm0ncyBuYW1lLlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IHZhbHVlIC0gVGhlIHVuaWZvcm0ncyB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB2YWx1ZSA9IG5ldyBNYXRyaXg0KCkgKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdmFsdWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNNYXRyaXg0VW5pZm9ybSA9IHRydWU7XG5cblx0XHR0aGlzLmJvdW5kYXJ5ID0gNjQ7XG5cdFx0dGhpcy5pdGVtU2l6ZSA9IDE2O1xuXG5cdH1cblxufVxuXG5leHBvcnQge1xuXHROdW1iZXJVbmlmb3JtLFxuXHRWZWN0b3IyVW5pZm9ybSwgVmVjdG9yM1VuaWZvcm0sIFZlY3RvcjRVbmlmb3JtLCBDb2xvclVuaWZvcm0sXG5cdE1hdHJpeDJVbmlmb3JtLCBNYXRyaXgzVW5pZm9ybSwgTWF0cml4NFVuaWZvcm1cbn07XG4iLCJpbXBvcnQge1xuXHROdW1iZXJVbmlmb3JtLCBWZWN0b3IyVW5pZm9ybSwgVmVjdG9yM1VuaWZvcm0sIFZlY3RvcjRVbmlmb3JtLFxuXHRDb2xvclVuaWZvcm0sIE1hdHJpeDJVbmlmb3JtLCBNYXRyaXgzVW5pZm9ybSwgTWF0cml4NFVuaWZvcm1cbn0gZnJvbSAnLi4vVW5pZm9ybS5qcyc7XG5cbi8qKlxuICogQSBzcGVjaWFsIGZvcm0gb2YgTnVtYmVyIHVuaWZvcm0gYmluZGluZyB0eXBlLlxuICogSXQncyB2YWx1ZSBpcyBtYW5hZ2VkIGJ5IGEgbm9kZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBOdW1iZXJVbmlmb3JtXG4gKi9cbmNsYXNzIE51bWJlck5vZGVVbmlmb3JtIGV4dGVuZHMgTnVtYmVyVW5pZm9ybSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbm9kZS1iYXNlZCBOdW1iZXIgdW5pZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlVW5pZm9ybX0gbm9kZVVuaWZvcm0gLSBUaGUgbm9kZSB1bmlmb3JtLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5vZGVVbmlmb3JtICkge1xuXG5cdFx0c3VwZXIoIG5vZGVVbmlmb3JtLm5hbWUsIG5vZGVVbmlmb3JtLnZhbHVlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB1bmlmb3JtLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGVVbmlmb3JtfVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZVVuaWZvcm0gPSBub2RlVW5pZm9ybTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHRvIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIG5vZGUgdW5pZm9ybS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgdmFsdWUuXG5cdCAqL1xuXHRnZXRWYWx1ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbm9kZSB1bmlmb3JtIGRhdGEgdHlwZS5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZGF0YSB0eXBlLlxuXHQgKi9cblx0Z2V0VHlwZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnR5cGU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBzcGVjaWFsIGZvcm0gb2YgVmVjdG9yMiB1bmlmb3JtIGJpbmRpbmcgdHlwZS5cbiAqIEl0J3MgdmFsdWUgaXMgbWFuYWdlZCBieSBhIG5vZGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgVmVjdG9yMlVuaWZvcm1cbiAqL1xuY2xhc3MgVmVjdG9yMk5vZGVVbmlmb3JtIGV4dGVuZHMgVmVjdG9yMlVuaWZvcm0ge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUtYmFzZWQgVmVjdG9yMiB1bmlmb3JtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVVbmlmb3JtfSBub2RlVW5pZm9ybSAtIFRoZSBub2RlIHVuaWZvcm0uXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZVVuaWZvcm0gKSB7XG5cblx0XHRzdXBlciggbm9kZVVuaWZvcm0ubmFtZSwgbm9kZVVuaWZvcm0udmFsdWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHVuaWZvcm0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZVVuaWZvcm19XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlVW5pZm9ybSA9IG5vZGVVbmlmb3JtO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXR0ZW4gdG8gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgbm9kZSB1bmlmb3JtLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgdmFsdWUuXG5cdCAqL1xuXHRnZXRWYWx1ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbm9kZSB1bmlmb3JtIGRhdGEgdHlwZS5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZGF0YSB0eXBlLlxuXHQgKi9cblx0Z2V0VHlwZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnR5cGU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBzcGVjaWFsIGZvcm0gb2YgVmVjdG9yMyB1bmlmb3JtIGJpbmRpbmcgdHlwZS5cbiAqIEl0J3MgdmFsdWUgaXMgbWFuYWdlZCBieSBhIG5vZGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgVmVjdG9yM1VuaWZvcm1cbiAqL1xuY2xhc3MgVmVjdG9yM05vZGVVbmlmb3JtIGV4dGVuZHMgVmVjdG9yM1VuaWZvcm0ge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUtYmFzZWQgVmVjdG9yMyB1bmlmb3JtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVVbmlmb3JtfSBub2RlVW5pZm9ybSAtIFRoZSBub2RlIHVuaWZvcm0uXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZVVuaWZvcm0gKSB7XG5cblx0XHRzdXBlciggbm9kZVVuaWZvcm0ubmFtZSwgbm9kZVVuaWZvcm0udmFsdWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHVuaWZvcm0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZVVuaWZvcm19XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlVW5pZm9ybSA9IG5vZGVVbmlmb3JtO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXR0ZW4gdG8gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgbm9kZSB1bmlmb3JtLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgdmFsdWUuXG5cdCAqL1xuXHRnZXRWYWx1ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbm9kZSB1bmlmb3JtIGRhdGEgdHlwZS5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZGF0YSB0eXBlLlxuXHQgKi9cblx0Z2V0VHlwZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnR5cGU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBzcGVjaWFsIGZvcm0gb2YgVmVjdG9yNCB1bmlmb3JtIGJpbmRpbmcgdHlwZS5cbiAqIEl0J3MgdmFsdWUgaXMgbWFuYWdlZCBieSBhIG5vZGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgVmVjdG9yNFVuaWZvcm1cbiAqL1xuY2xhc3MgVmVjdG9yNE5vZGVVbmlmb3JtIGV4dGVuZHMgVmVjdG9yNFVuaWZvcm0ge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUtYmFzZWQgVmVjdG9yNCB1bmlmb3JtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVVbmlmb3JtfSBub2RlVW5pZm9ybSAtIFRoZSBub2RlIHVuaWZvcm0uXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZVVuaWZvcm0gKSB7XG5cblx0XHRzdXBlciggbm9kZVVuaWZvcm0ubmFtZSwgbm9kZVVuaWZvcm0udmFsdWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBub2RlIHVuaWZvcm0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Tm9kZVVuaWZvcm19XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlVW5pZm9ybSA9IG5vZGVVbmlmb3JtO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXR0ZW4gdG8gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgbm9kZSB1bmlmb3JtLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBUaGUgdmFsdWUuXG5cdCAqL1xuXHRnZXRWYWx1ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbm9kZSB1bmlmb3JtIGRhdGEgdHlwZS5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZGF0YSB0eXBlLlxuXHQgKi9cblx0Z2V0VHlwZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnR5cGU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBzcGVjaWFsIGZvcm0gb2YgQ29sb3IgdW5pZm9ybSBiaW5kaW5nIHR5cGUuXG4gKiBJdCdzIHZhbHVlIGlzIG1hbmFnZWQgYnkgYSBub2RlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIENvbG9yVW5pZm9ybVxuICovXG5jbGFzcyBDb2xvck5vZGVVbmlmb3JtIGV4dGVuZHMgQ29sb3JVbmlmb3JtIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlLWJhc2VkIENvbG9yIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZVVuaWZvcm19IG5vZGVVbmlmb3JtIC0gVGhlIG5vZGUgdW5pZm9ybS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlVW5pZm9ybSApIHtcblxuXHRcdHN1cGVyKCBub2RlVW5pZm9ybS5uYW1lLCBub2RlVW5pZm9ybS52YWx1ZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdW5pZm9ybS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlVW5pZm9ybX1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGVVbmlmb3JtID0gbm9kZVVuaWZvcm07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiB0byByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBub2RlIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBUaGUgdmFsdWUuXG5cdCAqL1xuXHRnZXRWYWx1ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbm9kZSB1bmlmb3JtIGRhdGEgdHlwZS5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZGF0YSB0eXBlLlxuXHQgKi9cblx0Z2V0VHlwZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnR5cGU7XG5cblx0fVxuXG59XG5cblxuLyoqXG4gKiBBIHNwZWNpYWwgZm9ybSBvZiBNYXRyaXgyIHVuaWZvcm0gYmluZGluZyB0eXBlLlxuICogSXQncyB2YWx1ZSBpcyBtYW5hZ2VkIGJ5IGEgbm9kZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBNYXRyaXgyVW5pZm9ybVxuICovXG5jbGFzcyBNYXRyaXgyTm9kZVVuaWZvcm0gZXh0ZW5kcyBNYXRyaXgyVW5pZm9ybSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbm9kZS1iYXNlZCBNYXRyaXgyIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZVVuaWZvcm19IG5vZGVVbmlmb3JtIC0gVGhlIG5vZGUgdW5pZm9ybS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlVW5pZm9ybSApIHtcblxuXHRcdHN1cGVyKCBub2RlVW5pZm9ybS5uYW1lLCBub2RlVW5pZm9ybS52YWx1ZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdW5pZm9ybS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlVW5pZm9ybX1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGVVbmlmb3JtID0gbm9kZVVuaWZvcm07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiB0byByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBub2RlIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEByZXR1cm4ge01hdHJpeDJ9IFRoZSB2YWx1ZS5cblx0ICovXG5cdGdldFZhbHVlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9kZVVuaWZvcm0udmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBub2RlIHVuaWZvcm0gZGF0YSB0eXBlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBkYXRhIHR5cGUuXG5cdCAqL1xuXHRnZXRUeXBlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9kZVVuaWZvcm0udHlwZTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIHNwZWNpYWwgZm9ybSBvZiBNYXRyaXgzIHVuaWZvcm0gYmluZGluZyB0eXBlLlxuICogSXQncyB2YWx1ZSBpcyBtYW5hZ2VkIGJ5IGEgbm9kZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBNYXRyaXgzVW5pZm9ybVxuICovXG5jbGFzcyBNYXRyaXgzTm9kZVVuaWZvcm0gZXh0ZW5kcyBNYXRyaXgzVW5pZm9ybSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbm9kZS1iYXNlZCBNYXRyaXgzIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZVVuaWZvcm19IG5vZGVVbmlmb3JtIC0gVGhlIG5vZGUgdW5pZm9ybS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlVW5pZm9ybSApIHtcblxuXHRcdHN1cGVyKCBub2RlVW5pZm9ybS5uYW1lLCBub2RlVW5pZm9ybS52YWx1ZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdW5pZm9ybS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlVW5pZm9ybX1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGVVbmlmb3JtID0gbm9kZVVuaWZvcm07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiB0byByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBub2RlIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEByZXR1cm4ge01hdHJpeDN9IFRoZSB2YWx1ZS5cblx0ICovXG5cdGdldFZhbHVlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9kZVVuaWZvcm0udmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBub2RlIHVuaWZvcm0gZGF0YSB0eXBlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBkYXRhIHR5cGUuXG5cdCAqL1xuXHRnZXRUeXBlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9kZVVuaWZvcm0udHlwZTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIHNwZWNpYWwgZm9ybSBvZiBNYXRyaXg0IHVuaWZvcm0gYmluZGluZyB0eXBlLlxuICogSXQncyB2YWx1ZSBpcyBtYW5hZ2VkIGJ5IGEgbm9kZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBNYXRyaXg0VW5pZm9ybVxuICovXG5jbGFzcyBNYXRyaXg0Tm9kZVVuaWZvcm0gZXh0ZW5kcyBNYXRyaXg0VW5pZm9ybSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbm9kZS1iYXNlZCBNYXRyaXg0IHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZVVuaWZvcm19IG5vZGVVbmlmb3JtIC0gVGhlIG5vZGUgdW5pZm9ybS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub2RlVW5pZm9ybSApIHtcblxuXHRcdHN1cGVyKCBub2RlVW5pZm9ybS5uYW1lLCBub2RlVW5pZm9ybS52YWx1ZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdW5pZm9ybS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlVW5pZm9ybX1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGVVbmlmb3JtID0gbm9kZVVuaWZvcm07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiB0byByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBub2RlIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IFRoZSB2YWx1ZS5cblx0ICovXG5cdGdldFZhbHVlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9kZVVuaWZvcm0udmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBub2RlIHVuaWZvcm0gZGF0YSB0eXBlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBkYXRhIHR5cGUuXG5cdCAqL1xuXHRnZXRUeXBlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9kZVVuaWZvcm0udHlwZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHtcblx0TnVtYmVyTm9kZVVuaWZvcm0sIFZlY3RvcjJOb2RlVW5pZm9ybSwgVmVjdG9yM05vZGVVbmlmb3JtLCBWZWN0b3I0Tm9kZVVuaWZvcm0sXG5cdENvbG9yTm9kZVVuaWZvcm0sIE1hdHJpeDJOb2RlVW5pZm9ybSwgTWF0cml4M05vZGVVbmlmb3JtLCBNYXRyaXg0Tm9kZVVuaWZvcm1cbn07XG4iLCJpbXBvcnQgTm9kZVVuaWZvcm0gZnJvbSAnLi9Ob2RlVW5pZm9ybS5qcyc7XG5pbXBvcnQgTm9kZUF0dHJpYnV0ZSBmcm9tICcuL05vZGVBdHRyaWJ1dGUuanMnO1xuaW1wb3J0IE5vZGVWYXJ5aW5nIGZyb20gJy4vTm9kZVZhcnlpbmcuanMnO1xuaW1wb3J0IE5vZGVWYXIgZnJvbSAnLi9Ob2RlVmFyLmpzJztcbmltcG9ydCBOb2RlQ29kZSBmcm9tICcuL05vZGVDb2RlLmpzJztcbmltcG9ydCBOb2RlQ2FjaGUgZnJvbSAnLi9Ob2RlQ2FjaGUuanMnO1xuaW1wb3J0IFBhcmFtZXRlck5vZGUgZnJvbSAnLi9QYXJhbWV0ZXJOb2RlLmpzJztcbmltcG9ydCBTdHJ1Y3RUeXBlIGZyb20gJy4vU3RydWN0VHlwZS5qcyc7XG5pbXBvcnQgRnVuY3Rpb25Ob2RlIGZyb20gJy4uL2NvZGUvRnVuY3Rpb25Ob2RlLmpzJztcbmltcG9ydCBOb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vbWF0ZXJpYWxzL25vZGVzL05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgeyBnZXRUeXBlRnJvbUxlbmd0aCB9IGZyb20gJy4vTm9kZVV0aWxzLmpzJztcbmltcG9ydCB7IE5vZGVVcGRhdGVUeXBlLCBkZWZhdWx0QnVpbGRTdGFnZXMsIHNoYWRlclN0YWdlcyB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHtcblx0TnVtYmVyTm9kZVVuaWZvcm0sIFZlY3RvcjJOb2RlVW5pZm9ybSwgVmVjdG9yM05vZGVVbmlmb3JtLCBWZWN0b3I0Tm9kZVVuaWZvcm0sXG5cdENvbG9yTm9kZVVuaWZvcm0sIE1hdHJpeDJOb2RlVW5pZm9ybSwgTWF0cml4M05vZGVVbmlmb3JtLCBNYXRyaXg0Tm9kZVVuaWZvcm1cbn0gZnJvbSAnLi4vLi4vcmVuZGVyZXJzL2NvbW1vbi9ub2Rlcy9Ob2RlVW5pZm9ybS5qcyc7XG5cbmltcG9ydCB7IHN0YWNrIH0gZnJvbSAnLi9TdGFja05vZGUuanMnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudFN0YWNrLCBzZXRDdXJyZW50U3RhY2sgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbmltcG9ydCBDdWJlUmVuZGVyVGFyZ2V0IGZyb20gJy4uLy4uL3JlbmRlcmVycy9jb21tb24vQ3ViZVJlbmRlclRhcmdldC5qcyc7XG5pbXBvcnQgQ2hhaW5NYXAgZnJvbSAnLi4vLi4vcmVuZGVyZXJzL2NvbW1vbi9DaGFpbk1hcC5qcyc7XG5cbmltcG9ydCBCaW5kR3JvdXAgZnJvbSAnLi4vLi4vcmVuZGVyZXJzL2NvbW1vbi9CaW5kR3JvdXAuanMnO1xuXG5pbXBvcnQgeyBSRVZJU0lPTiwgSW50VHlwZSwgVW5zaWduZWRJbnRUeXBlLCBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcG1hcExpbmVhckZpbHRlciB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBSZW5kZXJUYXJnZXQgfSBmcm9tICcuLi8uLi9jb3JlL1JlbmRlclRhcmdldC5qcyc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uL21hdGgvQ29sb3IuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjQuanMnO1xuaW1wb3J0IHsgRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcblxuY29uc3QgcmVuZGVyZXJDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbmNvbnN0IHR5cGVGcm9tQXJyYXkgPSBuZXcgTWFwKCBbXG5cdFsgSW50OEFycmF5LCAnaW50JyBdLFxuXHRbIEludDE2QXJyYXksICdpbnQnIF0sXG5cdFsgSW50MzJBcnJheSwgJ2ludCcgXSxcblx0WyBVaW50OEFycmF5LCAndWludCcgXSxcblx0WyBVaW50MTZBcnJheSwgJ3VpbnQnIF0sXG5cdFsgVWludDMyQXJyYXksICd1aW50JyBdLFxuXHRbIEZsb2F0MzJBcnJheSwgJ2Zsb2F0JyBdXG5dICk7XG5cbmNvbnN0IHRvRmxvYXQgPSAoIHZhbHVlICkgPT4ge1xuXG5cdGlmICggL2UvZy50ZXN0KCB2YWx1ZSApICkge1xuXG5cdFx0cmV0dXJuIFN0cmluZyggdmFsdWUgKS5yZXBsYWNlKCAvXFwrL2csICcnICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHZhbHVlID0gTnVtYmVyKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHZhbHVlICsgKCB2YWx1ZSAlIDEgPyAnJyA6ICcuMCcgKTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYnVpbGRlcnMgd2hpY2ggZ2VuZXJhdGUgYSBzaGFkZXIgcHJvZ3JhbSBiYXNlZFxuICogb24gYSAzRCBvYmplY3QgYW5kIGl0cyBub2RlIG1hdGVyaWFsIGRlZmluaXRpb24uXG4gKi9cbmNsYXNzIE5vZGVCdWlsZGVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlIGJ1aWxkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIGN1cnJlbnQgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7Tm9kZVBhcnNlcn0gcGFyc2VyIC0gQSByZWZlcmVuY2UgdG8gYSBub2RlIHBhcnNlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIHJlbmRlcmVyLCBwYXJzZXIgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgM0Qgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDNEfVxuXHRcdCAqL1xuXHRcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG1hdGVyaWFsIG9mIHRoZSAzRCBvYmplY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P01hdGVyaWFsfVxuXHRcdCAqL1xuXHRcdHRoaXMubWF0ZXJpYWwgPSAoIG9iamVjdCAmJiBvYmplY3QubWF0ZXJpYWwgKSB8fCBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGdlb21ldHJ5IG9mIHRoZSAzRCBvYmplY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0J1ZmZlckdlb21ldHJ5fVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2VvbWV0cnkgPSAoIG9iamVjdCAmJiBvYmplY3QuZ2VvbWV0cnkgKSB8fCBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgcmVuZGVyZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7UmVuZGVyZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gYSBub2RlIHBhcnNlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlUGFyc2VyfVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyc2VyID0gcGFyc2VyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNjZW5lIHRoZSAzRCBvYmplY3QgYmVsb25ncyB0by5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/U2NlbmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2NlbmUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhbWVyYSB0aGUgM0Qgb2JqZWN0IGlzIHJlbmRlcmVkIHdpdGguXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0NhbWVyYX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jYW1lcmEgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IG9mIGFsbCBub2RlcyB0aGUgYnVpbGRlciBpcyBwcm9jZXNzaW5nXG5cdFx0ICogZm9yIHRoaXMgM0Qgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE5vZGU+fVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgbGlzdCBvZiBhbGwgc2VxdWVudGlhbCBub2Rlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxOb2RlPn1cblx0XHQgKi9cblx0XHR0aGlzLnNlcXVlbnRpYWxOb2RlcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IG9mIGFsbCBub2RlcyB3aGljaCB7QGxpbmsgTm9kZSN1cGRhdGV9IG1ldGhvZCBzaG91bGQgYmUgZXhlY3V0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Tm9kZT59XG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVOb2RlcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IG9mIGFsbCBub2RlcyB3aGljaCB7QGxpbmsgTm9kZSN1cGRhdGVCZWZvcmV9IG1ldGhvZCBzaG91bGQgYmUgZXhlY3V0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Tm9kZT59XG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVCZWZvcmVOb2RlcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IG9mIGFsbCBub2RlcyB3aGljaCB7QGxpbmsgTm9kZSN1cGRhdGVBZnRlcn0gbWV0aG9kIHNob3VsZCBiZSBleGVjdXRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxOb2RlPn1cblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZUFmdGVyTm9kZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSB0aGF0IGFzc2lnbnMgZWFjaCBub2RlIHRvIGEgdW5pcXVlIGhhc2guXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PG51bWJlcixOb2RlPn1cblx0XHQgKi9cblx0XHR0aGlzLmhhc2hOb2RlcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gYSBub2RlIG1hdGVyaWFsIG9ic2VydmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Ob2RlTWF0ZXJpYWxPYnNlcnZlcn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5vYnNlcnZlciA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBsaWdodHMgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/TGlnaHRzTm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5saWdodHNOb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGVudmlyb25tZW50IG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P05vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZW52aXJvbm1lbnROb2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGZvZyBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Gb2dOb2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmZvZ05vZGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgY2xpcHBpbmcgY29udGV4dC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Q2xpcHBpbmdDb250ZXh0fVxuXHRcdCAqL1xuXHRcdHRoaXMuY2xpcHBpbmdDb250ZXh0ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBnZW5lcmF0ZWQgdmVydGV4IHNoYWRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMudmVydGV4U2hhZGVyID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBnZW5lcmF0ZWQgZnJhZ21lbnQgc2hhZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5mcmFnbWVudFNoYWRlciA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZ2VuZXJhdGVkIGNvbXB1dGUgc2hhZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5jb21wdXRlU2hhZGVyID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIE5vZGVzIHVzZWQgaW4gdGhlIHByaW1hcnkgZmxvdyBvZiBjb2RlIGdlbmVyYXRpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxBcnJheTxOb2RlPj59XG5cdFx0ICovXG5cdFx0dGhpcy5mbG93Tm9kZXMgPSB7IHZlcnRleDogW10sIGZyYWdtZW50OiBbXSwgY29tcHV0ZTogW10gfTtcblxuXHRcdC8qKlxuXHRcdCAqIE5vZGVzIGNvZGUgZnJvbSBgLmZsb3dOb2Rlc2AuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxzdHJpbmc+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZmxvd0NvZGUgPSB7IHZlcnRleDogJycsIGZyYWdtZW50OiAnJywgY29tcHV0ZTogJycgfTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZGljdGlvbmFyeSBob2xkcyB0aGUgbm9kZSB1bmlmb3JtcyBvZiB0aGUgYnVpbGRlci5cblx0XHQgKiBUaGUgdW5pZm9ybXMgYXJlIG1haW50YWluZWQgaW4gYW4gYXJyYXkgZm9yIGVhY2ggc2hhZGVyIHN0YWdlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLnVuaWZvcm1zID0geyB2ZXJ0ZXg6IFtdLCBmcmFnbWVudDogW10sIGNvbXB1dGU6IFtdLCBpbmRleDogMCB9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBkaWN0aW9uYXJ5IGhvbGRzIHRoZSBvdXRwdXQgc3RydWN0cyBvZiB0aGUgYnVpbGRlci5cblx0XHQgKiBUaGUgc3RydWN0cyBhcmUgbWFpbnRhaW5lZCBpbiBhbiBhcnJheSBmb3IgZWFjaCBzaGFkZXIgc3RhZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuc3RydWN0cyA9IHsgdmVydGV4OiBbXSwgZnJhZ21lbnQ6IFtdLCBjb21wdXRlOiBbXSwgaW5kZXg6IDAgfTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZGljdGlvbmFyeSBob2xkcyB0aGUgYmluZGluZ3MgZm9yIGVhY2ggc2hhZGVyIHN0YWdlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLmJpbmRpbmdzID0geyB2ZXJ0ZXg6IHt9LCBmcmFnbWVudDoge30sIGNvbXB1dGU6IHt9IH07XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGRpY3Rpb25hcnkgbWFpbnRhaW5zIHRoZSBiaW5kaW5nIGluZGljZXMgcGVyIGJpbmQgZ3JvdXAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZGluZ3NJbmRleGVzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGFycmF5IG9mIGJpbmQgZ3JvdXBzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9BcnJheTxCaW5kR3JvdXA+fVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZEdyb3VwcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGFycmF5IGhvbGRzIHRoZSBub2RlIGF0dHJpYnV0ZXMgb2YgdGhpcyBidWlsZGVyXG5cdFx0ICogY3JlYXRlZCB2aWEge0BsaW5rIEF0dHJpYnV0ZU5vZGV9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE5vZGVBdHRyaWJ1dGU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBhcnJheSBob2xkcyB0aGUgbm9kZSBhdHRyaWJ1dGVzIG9mIHRoaXMgYnVpbGRlclxuXHRcdCAqIGNyZWF0ZWQgdmlhIHtAbGluayBCdWZmZXJBdHRyaWJ1dGVOb2RlfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxOb2RlQXR0cmlidXRlPn1cblx0XHQgKi9cblx0XHR0aGlzLmJ1ZmZlckF0dHJpYnV0ZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgYXJyYXkgaG9sZHMgdGhlIG5vZGUgdmFyeWluZ3Mgb2YgdGhpcyBidWlsZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE5vZGVWYXJ5aW5nPn1cblx0XHQgKi9cblx0XHR0aGlzLnZhcnlpbmdzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGRpY3Rpb25hcnkgaG9sZHMgdGhlIChuYXRpdmUpIG5vZGUgY29kZXMgb2YgdGhpcyBidWlsZGVyLlxuXHRcdCAqIFRoZSBjb2RlcyBhcmUgbWFpbnRhaW5lZCBpbiBhbiBhcnJheSBmb3IgZWFjaCBzaGFkZXIgc3RhZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxBcnJheTxOb2RlQ29kZT4+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY29kZXMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZGljdGlvbmFyeSBob2xkcyB0aGUgbm9kZSB2YXJpYWJsZXMgb2YgdGhpcyBidWlsZGVyLlxuXHRcdCAqIFRoZSB2YXJpYWJsZXMgYXJlIG1haW50YWluZWQgaW4gYW4gYXJyYXkgZm9yIGVhY2ggc2hhZGVyIHN0YWdlLlxuXHRcdCAqIFRoaXMgZGljdGlvbmFyeSBpcyBhbHNvIHVzZWQgdG8gY291bnQgdGhlIG51bWJlciBvZiB2YXJpYWJsZXNcblx0XHQgKiBhY2NvcmRpbmcgdG8gdGhlaXIgdHlwZSAoY29uc3QsIHZhcnMpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsQXJyYXk8Tm9kZVZhcj58bnVtYmVyPn1cblx0XHQgKi9cblx0XHR0aGlzLnZhcnMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnQgY29kZSBmbG93LlxuXHRcdCAqIEFsbCBjb2RlIGdlbmVyYXRlZCBpbiB0aGlzIHN0YWNrIHdpbGwgYmUgc3RvcmVkIGluIGAuZmxvd2AuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7e2NvZGU6IHN0cmluZ319XG5cdFx0ICovXG5cdFx0dGhpcy5mbG93ID0geyBjb2RlOiAnJyB9O1xuXG5cdFx0LyoqXG5cdFx0ICogQSBjaGFpbiBvZiBub2Rlcy5cblx0XHQgKiBVc2VkIHRvIGNoZWNrIHJlY3Vyc2l2ZSBjYWxscyBpbiBub2RlLWdyYXBoLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE5vZGU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY2hhaW5pbmcgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjdXJyZW50IHN0YWNrLlxuXHRcdCAqIFRoaXMgcmVmbGVjdHMgdGhlIGN1cnJlbnQgcHJvY2VzcyBpbiB0aGUgY29kZSBibG9jayBoaWVyYXJjaHksXG5cdFx0ICogaXQgaXMgdXNlZnVsIHRvIGtub3cgaWYgdGhlIGN1cnJlbnQgcHJvY2VzcyBpcyBpbnNpZGUgYSBjb25kaXRpb25hbCBmb3IgZXhhbXBsZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtTdGFja05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5zdGFjayA9IHN0YWNrKCk7XG5cblx0XHQvKipcblx0XHQgKiBMaXN0IG9mIHN0YWNrIG5vZGVzLlxuXHRcdCAqIFRoZSBjdXJyZW50IHN0YWNrIGhpZXJhcmNoeSBpcyBzdG9yZWQgaW4gYW4gYXJyYXkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8U3RhY2tOb2RlPn1cblx0XHQgKi9cblx0XHR0aGlzLnN0YWNrcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQSB0YWIgdmFsdWUuIFVzZWQgZm9yIHNoYWRlciBzdHJpbmcgZ2VuZXJhdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ1xcdCdcblx0XHQgKi9cblx0XHR0aGlzLnRhYiA9ICdcXHQnO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGZ1bmN0aW9uIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0Z1bmN0aW9uTm9kZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jdXJyZW50RnVuY3Rpb25Ob2RlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBidWlsZGVyJ3MgY29udGV4dC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5jb250ZXh0ID0ge1xuXHRcdFx0bWF0ZXJpYWw6IHRoaXMubWF0ZXJpYWxcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJ1aWxkZXIncyBjYWNoZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlQ2FjaGV9XG5cdFx0ICovXG5cdFx0dGhpcy5jYWNoZSA9IG5ldyBOb2RlQ2FjaGUoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFNpbmNlIHRoZSB7QGxpbmsgTm9kZUJ1aWxkZXIjY2FjaGV9IG1pZ2h0IGJlIHRlbXBvcmFyaWx5XG5cdFx0ICogb3ZlcndyaXR0ZW4gYnkgb3RoZXIgY2FjaGVzLCB0aGlzIG1lbWJlciByZXRhaW5zIHRoZSByZWZlcmVuY2Vcblx0XHQgKiB0byB0aGUgYnVpbGRlcidzIG93biBjYWNoZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlQ2FjaGV9XG5cdFx0ICogQGRlZmF1bHQgdGhpcy5jYWNoZVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2xvYmFsQ2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdFx0dGhpcy5mbG93c0RhdGEgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgc2hhZGVyIHN0YWdlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez8oJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZSd8J2FueScpfVxuXHRcdCAqL1xuXHRcdHRoaXMuc2hhZGVyU3RhZ2UgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgYnVpbGQgc3RhZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Pygnc2V0dXAnfCdhbmFseXplJ3wnZ2VuZXJhdGUnKX1cblx0XHQgKi9cblx0XHR0aGlzLmJ1aWxkU3RhZ2UgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciBjb21wYXJpc29uIGluIHNoYWRlciBjb2RlIGFyZSBnZW5lcmF0ZWQgd2l0aCBtZXRob2RzIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy51c2VDb21wYXJpc29uTWV0aG9kID0gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBiaW5kIGdyb3VwcyBvZiB0aGUgY3VycmVudCByZW5kZXJlci5cblx0ICpcblx0ICogQHJldHVybiB7Q2hhaW5NYXB9IFRoZSBjYWNoZS5cblx0ICovXG5cdGdldEJpbmRHcm91cHNDYWNoZSgpIHtcblxuXHRcdGxldCBiaW5kR3JvdXBzQ2FjaGUgPSByZW5kZXJlckNhY2hlLmdldCggdGhpcy5yZW5kZXJlciApO1xuXG5cdFx0aWYgKCBiaW5kR3JvdXBzQ2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YmluZEdyb3Vwc0NhY2hlID0gbmV3IENoYWluTWFwKCk7XG5cblx0XHRcdHJlbmRlcmVyQ2FjaGUuc2V0KCB0aGlzLnJlbmRlcmVyLCBiaW5kR3JvdXBzQ2FjaGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBiaW5kR3JvdXBzQ2FjaGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFJlbmRlclRhcmdldH0gd2l0aCB0aGUgZ2l2ZW5cblx0ICogZGltZW5zaW9ucyBhbmQgb3B0aW9ucy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICogQHJldHVybiB7UmVuZGVyVGFyZ2V0fSBUaGUgcmVuZGVyIHRhcmdldC5cblx0ICovXG5cdGNyZWF0ZVJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIHtcblxuXHRcdHJldHVybiBuZXcgUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEN1YmVSZW5kZXJUYXJnZXR9IHdpdGggdGhlIGdpdmVuXG5cdCAqIGRpbWVuc2lvbnMgYW5kIG9wdGlvbnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIC0gVGhlIHNpemUgb2YgdGhlIGN1YmUgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvZiB0aGUgY3ViZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcmV0dXJuIHtDdWJlUmVuZGVyVGFyZ2V0fSBUaGUgY3ViZSByZW5kZXIgdGFyZ2V0LlxuXHQgKi9cblx0Y3JlYXRlQ3ViZVJlbmRlclRhcmdldCggc2l6ZSwgb3B0aW9ucyApIHtcblxuXHRcdHJldHVybiBuZXcgQ3ViZVJlbmRlclRhcmdldCggc2l6ZSwgb3B0aW9ucyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgZ2l2ZW4gbm9kZSBpcyBpbmNsdWRlZCBpbiB0aGUgaW50ZXJuYWwgYXJyYXkgb2Ygbm9kZXMgb3Igbm90LlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBub2RlIGlzIGluY2x1ZGVkIGluIHRoZSBpbnRlcm5hbCBhcnJheSBvZiBub2RlcyBvciBub3QuXG5cdCAqL1xuXHRpbmNsdWRlcyggbm9kZSApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVzLmluY2x1ZGVzKCBub2RlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBvdXRwdXQgc3RydWN0IG5hbWUgd2hpY2ggaXMgcmVxdWlyZWQgYnlcblx0ICoge0BsaW5rIE91dHB1dFN0cnVjdE5vZGV9LlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvZiB0aGUgb3V0cHV0IHN0cnVjdC5cblx0ICovXG5cdGdldE91dHB1dFN0cnVjdE5hbWUoKSB7fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgYmluZCBncm91cCBmb3IgdGhlIGdpdmVuIGdyb3VwIG5hbWUgYW5kIGJpbmRpbmcuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBncm91cE5hbWUgLSBUaGUgZ3JvdXAgbmFtZS5cblx0ICogQHBhcmFtIHtBcnJheTxOb2RlVW5pZm9ybXNHcm91cD59IGJpbmRpbmdzIC0gTGlzdCBvZiBiaW5kaW5ncy5cblx0ICogQHJldHVybiB7QmluZEdyb3VwfSBUaGUgYmluZCBncm91cFxuXHQgKi9cblx0X2dldEJpbmRHcm91cCggZ3JvdXBOYW1lLCBiaW5kaW5ncyApIHtcblxuXHRcdGNvbnN0IGJpbmRHcm91cHNDYWNoZSA9IHRoaXMuZ2V0QmluZEdyb3Vwc0NhY2hlKCk7XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgYmluZGluZ3NBcnJheSA9IFtdO1xuXG5cdFx0bGV0IHNoYXJlZEdyb3VwID0gdHJ1ZTtcblxuXHRcdGZvciAoIGNvbnN0IGJpbmRpbmcgb2YgYmluZGluZ3MgKSB7XG5cblx0XHRcdGJpbmRpbmdzQXJyYXkucHVzaCggYmluZGluZyApO1xuXG5cdFx0XHRzaGFyZWRHcm91cCA9IHNoYXJlZEdyb3VwICYmIGJpbmRpbmcuZ3JvdXBOb2RlLnNoYXJlZCAhPT0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRsZXQgYmluZEdyb3VwO1xuXG5cdFx0aWYgKCBzaGFyZWRHcm91cCApIHtcblxuXHRcdFx0YmluZEdyb3VwID0gYmluZEdyb3Vwc0NhY2hlLmdldCggYmluZGluZ3NBcnJheSApO1xuXG5cdFx0XHRpZiAoIGJpbmRHcm91cCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGJpbmRHcm91cCA9IG5ldyBCaW5kR3JvdXAoIGdyb3VwTmFtZSwgYmluZGluZ3NBcnJheSwgdGhpcy5iaW5kaW5nc0luZGV4ZXNbIGdyb3VwTmFtZSBdLmdyb3VwLCBiaW5kaW5nc0FycmF5ICk7XG5cblx0XHRcdFx0YmluZEdyb3Vwc0NhY2hlLnNldCggYmluZGluZ3NBcnJheSwgYmluZEdyb3VwICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJpbmRHcm91cCA9IG5ldyBCaW5kR3JvdXAoIGdyb3VwTmFtZSwgYmluZGluZ3NBcnJheSwgdGhpcy5iaW5kaW5nc0luZGV4ZXNbIGdyb3VwTmFtZSBdLmdyb3VwLCBiaW5kaW5nc0FycmF5ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYmluZEdyb3VwO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSBvZiBub2RlIHVuaWZvcm0gZ3JvdXBzIGZvciB0aGUgZ2l2ZW4gZ3JvdXAgbmFtZSBhbmQgc2hhZGVyIHN0YWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBOYW1lIC0gVGhlIGdyb3VwIG5hbWUuXG5cdCAqIEBwYXJhbSB7KCd2ZXJ0ZXgnfCdmcmFnbWVudCd8J2NvbXB1dGUnfCdhbnknKX0gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtBcnJheTxOb2RlVW5pZm9ybXNHcm91cD59IFRoZSBhcnJheSBvZiBub2RlIHVuaWZvcm0gZ3JvdXBzLlxuXHQgKi9cblx0Z2V0QmluZEdyb3VwQXJyYXkoIGdyb3VwTmFtZSwgc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuYmluZGluZ3NbIHNoYWRlclN0YWdlIF07XG5cblx0XHRsZXQgYmluZEdyb3VwID0gYmluZGluZ3NbIGdyb3VwTmFtZSBdO1xuXG5cdFx0aWYgKCBiaW5kR3JvdXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB0aGlzLmJpbmRpbmdzSW5kZXhlc1sgZ3JvdXBOYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLmJpbmRpbmdzSW5kZXhlc1sgZ3JvdXBOYW1lIF0gPSB7IGJpbmRpbmc6IDAsIGdyb3VwOiBPYmplY3Qua2V5cyggdGhpcy5iaW5kaW5nc0luZGV4ZXMgKS5sZW5ndGggfTtcblxuXHRcdFx0fVxuXG5cdFx0XHRiaW5kaW5nc1sgZ3JvdXBOYW1lIF0gPSBiaW5kR3JvdXAgPSBbXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBiaW5kR3JvdXA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbGlzdCBiaW5kaW5ncyBvZiBhbGwgc2hhZGVyIHN0YWdlcyBzZXBhcmF0ZWQgYnkgZ3JvdXBzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBcnJheTxCaW5kR3JvdXA+fSBUaGUgbGlzdCBvZiBiaW5kaW5ncy5cblx0ICovXG5cdGdldEJpbmRpbmdzKCkge1xuXG5cdFx0bGV0IGJpbmRpbmdzR3JvdXBzID0gdGhpcy5iaW5kR3JvdXBzO1xuXG5cdFx0aWYgKCBiaW5kaW5nc0dyb3VwcyA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgZ3JvdXBzID0ge307XG5cdFx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuYmluZGluZ3M7XG5cblx0XHRcdGZvciAoIGNvbnN0IHNoYWRlclN0YWdlIG9mIHNoYWRlclN0YWdlcyApIHtcblxuXHRcdFx0XHRmb3IgKCBjb25zdCBncm91cE5hbWUgaW4gYmluZGluZ3NbIHNoYWRlclN0YWdlIF0gKSB7XG5cblx0XHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IGJpbmRpbmdzWyBzaGFkZXJTdGFnZSBdWyBncm91cE5hbWUgXTtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwVW5pZm9ybXMgPSBncm91cHNbIGdyb3VwTmFtZSBdIHx8ICggZ3JvdXBzWyBncm91cE5hbWUgXSA9IFtdICk7XG5cdFx0XHRcdFx0Z3JvdXBVbmlmb3Jtcy5wdXNoKCAuLi51bmlmb3JtcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRiaW5kaW5nc0dyb3VwcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBncm91cE5hbWUgaW4gZ3JvdXBzICkge1xuXG5cdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBncm91cE5hbWUgXTtcblxuXHRcdFx0XHRjb25zdCBiaW5kaW5nc0dyb3VwID0gdGhpcy5fZ2V0QmluZEdyb3VwKCBncm91cE5hbWUsIGdyb3VwICk7XG5cblx0XHRcdFx0YmluZGluZ3NHcm91cHMucHVzaCggYmluZGluZ3NHcm91cCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYmluZEdyb3VwcyA9IGJpbmRpbmdzR3JvdXBzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJpbmRpbmdzR3JvdXBzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU29ydHMgdGhlIGJpbmQgZ3JvdXBzIGFuZCB1cGRhdGVzIHtAbGluayBOb2RlQnVpbGRlciNiaW5kaW5nc0luZGV4ZXN9LlxuXHQgKi9cblx0c29ydEJpbmRpbmdHcm91cHMoKSB7XG5cblx0XHRjb25zdCBiaW5kaW5nc0dyb3VwcyA9IHRoaXMuZ2V0QmluZGluZ3MoKTtcblxuXHRcdGJpbmRpbmdzR3JvdXBzLnNvcnQoICggYSwgYiApID0+ICggYS5iaW5kaW5nc1sgMCBdLmdyb3VwTm9kZS5vcmRlciAtIGIuYmluZGluZ3NbIDAgXS5ncm91cE5vZGUub3JkZXIgKSApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYmluZGluZ3NHcm91cHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBiaW5kaW5nR3JvdXAgPSBiaW5kaW5nc0dyb3Vwc1sgaSBdO1xuXHRcdFx0dGhpcy5iaW5kaW5nc0luZGV4ZXNbIGJpbmRpbmdHcm91cC5uYW1lIF0uZ3JvdXAgPSBpO1xuXG5cdFx0XHRiaW5kaW5nR3JvdXAuaW5kZXggPSBpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGJ1aWxkZXIgbWFpbnRhaW5zIGVhY2ggbm9kZSBpbiBhIGhhc2gtYmFzZWQgZGljdGlvbmFyeS5cblx0ICogVGhpcyBtZXRob2Qgc2V0cyB0aGUgZ2l2ZW4gbm9kZSAodmFsdWUpIHdpdGggdGhlIGdpdmVuIGhhc2ggKGtleSkgaW50byB0aGlzIGRpY3Rpb25hcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRvIGFkZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGhhc2ggLSBUaGUgaGFzaCBvZiB0aGUgbm9kZS5cblx0ICovXG5cdHNldEhhc2hOb2RlKCBub2RlLCBoYXNoICkge1xuXG5cdFx0dGhpcy5oYXNoTm9kZXNbIGhhc2ggXSA9IG5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgbm9kZSB0byB0aGlzIGJ1aWxkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRvIGFkZC5cblx0ICovXG5cdGFkZE5vZGUoIG5vZGUgKSB7XG5cblx0XHRpZiAoIHRoaXMubm9kZXMuaW5jbHVkZXMoIG5vZGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHRoaXMubm9kZXMucHVzaCggbm9kZSApO1xuXG5cdFx0XHR0aGlzLnNldEhhc2hOb2RlKCBub2RlLCBub2RlLmdldEhhc2goIHRoaXMgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogSXQgaXMgdXNlZCB0byBhZGQgTm9kZXMgdGhhdCB3aWxsIGJlIHVzZWQgYXMgRlJBTUUgYW5kIFJFTkRFUiBldmVudHMsXG5cdCAqIGFuZCBuZWVkIHRvIGZvbGxvdyBhIGNlcnRhaW4gc2VxdWVuY2UgaW4gdGhlIGNhbGxzIHRvIHdvcmsgY29ycmVjdGx5LlxuXHQgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgJ3NldHVwKCknIGluIHRoZSAnYnVpbGQoKScgcHJvY2VzcyB0byBlbnN1cmUgdGhhdCB0aGUgY2hpbGQgbm9kZXMgYXJlIHByb2Nlc3NlZCBmaXJzdC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdG8gYWRkLlxuXHQgKi9cblx0YWRkU2VxdWVudGlhbE5vZGUoIG5vZGUgKSB7XG5cblx0XHRpZiAoIHRoaXMuc2VxdWVudGlhbE5vZGVzLmluY2x1ZGVzKCBub2RlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aGlzLnNlcXVlbnRpYWxOb2Rlcy5wdXNoKCBub2RlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgdGhlIHVwZGF0ZSB0eXBlcyBvZiBub2Rlc1xuXHQgKi9cblx0YnVpbGRVcGRhdGVOb2RlcygpIHtcblxuXHRcdGZvciAoIGNvbnN0IG5vZGUgb2YgdGhpcy5ub2RlcyApIHtcblxuXHRcdFx0Y29uc3QgdXBkYXRlVHlwZSA9IG5vZGUuZ2V0VXBkYXRlVHlwZSgpO1xuXG5cdFx0XHRpZiAoIHVwZGF0ZVR5cGUgIT09IE5vZGVVcGRhdGVUeXBlLk5PTkUgKSB7XG5cblx0XHRcdFx0dGhpcy51cGRhdGVOb2Rlcy5wdXNoKCBub2RlLmdldFNlbGYoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCBjb25zdCBub2RlIG9mIHRoaXMuc2VxdWVudGlhbE5vZGVzICkge1xuXG5cdFx0XHRjb25zdCB1cGRhdGVCZWZvcmVUeXBlID0gbm9kZS5nZXRVcGRhdGVCZWZvcmVUeXBlKCk7XG5cdFx0XHRjb25zdCB1cGRhdGVBZnRlclR5cGUgPSBub2RlLmdldFVwZGF0ZUFmdGVyVHlwZSgpO1xuXG5cdFx0XHRpZiAoIHVwZGF0ZUJlZm9yZVR5cGUgIT09IE5vZGVVcGRhdGVUeXBlLk5PTkUgKSB7XG5cblx0XHRcdFx0dGhpcy51cGRhdGVCZWZvcmVOb2Rlcy5wdXNoKCBub2RlLmdldFNlbGYoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdXBkYXRlQWZ0ZXJUeXBlICE9PSBOb2RlVXBkYXRlVHlwZS5OT05FICkge1xuXG5cdFx0XHRcdHRoaXMudXBkYXRlQWZ0ZXJOb2Rlcy5wdXNoKCBub2RlLmdldFNlbGYoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBIHJlZmVyZW5jZSB0aGUgY3VycmVudCBub2RlIHdoaWNoIGlzIHRoZVxuXHQgKiBsYXN0IG5vZGUgaW4gdGhlIGNoYWluIG9mIG5vZGVzLlxuXHQgKlxuXHQgKiBAdHlwZSB7Tm9kZX1cblx0ICovXG5cdGdldCBjdXJyZW50Tm9kZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmNoYWluaW5nWyB0aGlzLmNoYWluaW5nLmxlbmd0aCAtIDEgXTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIGdpdmVuIHRleHR1cmUgaXMgZmlsdGVyZWQgb3Igbm90LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBjaGVjay5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gdGV4dHVyZSBpcyBmaWx0ZXJlZCBvciBub3QuXG5cdCAqL1xuXHRpc0ZpbHRlcmVkVGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdHJldHVybiAoIHRleHR1cmUubWFnRmlsdGVyID09PSBMaW5lYXJGaWx0ZXIgfHwgdGV4dHVyZS5tYWdGaWx0ZXIgPT09IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgfHwgdGV4dHVyZS5tYWdGaWx0ZXIgPT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgfHwgdGV4dHVyZS5tYWdGaWx0ZXIgPT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciB8fFxuXHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhckZpbHRlciB8fCB0ZXh0dXJlLm1pbkZpbHRlciA9PT0gTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciB8fCB0ZXh0dXJlLm1pbkZpbHRlciA9PT0gTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciB8fCB0ZXh0dXJlLm1pbkZpbHRlciA9PT0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiBub2RlIHRvIHRoZSBpbnRlcm5hbCBub2RlIGNoYWluLlxuXHQgKiBUaGlzIGlzIHVzZWQgdG8gY2hlY2sgcmVjdXJzaXZlIGNhbGxzIGluIG5vZGUtZ3JhcGguXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRvIGFkZC5cblx0ICovXG5cdGFkZENoYWluKCBub2RlICkge1xuXG5cdFx0Lypcblx0XHRpZiAoIHRoaXMuY2hhaW5pbmcuaW5kZXhPZiggbm9kZSApICE9PSAtIDEgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1JlY3Vyc2l2ZSBub2RlOiAnLCBub2RlICk7XG5cblx0XHR9XG5cdFx0Ki9cblxuXHRcdHRoaXMuY2hhaW5pbmcucHVzaCggbm9kZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgZ2l2ZW4gbm9kZSBmcm9tIHRoZSBpbnRlcm5hbCBub2RlIGNoYWluLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSB0byByZW1vdmUuXG5cdCAqL1xuXHRyZW1vdmVDaGFpbiggbm9kZSApIHtcblxuXHRcdGNvbnN0IGxhc3RDaGFpbiA9IHRoaXMuY2hhaW5pbmcucG9wKCk7XG5cblx0XHRpZiAoIGxhc3RDaGFpbiAhPT0gbm9kZSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnTm9kZUJ1aWxkZXI6IEludmFsaWQgbm9kZSBjaGFpbmluZyEnICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBuYXRpdmUgc2hhZGVyIG1ldGhvZCBuYW1lIGZvciBhIGdpdmVuIGdlbmVyaWMgbmFtZS4gRS5nLlxuXHQgKiB0aGUgbWV0aG9kIG5hbWUgYHRleHR1cmVEaW1lbnNpb25zYCBtYXRjaGVzIHRoZSBXR1NMIG5hbWUgYnV0IG11c3QgYmVcblx0ICogcmVzb2x2ZWQgdG8gYHRleHR1cmVTaXplYCBpbiBHTFNMLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCAtIFRoZSBtZXRob2QgbmFtZSB0byByZXNvbHZlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSByZXNvbHZlZCBtZXRob2QgbmFtZS5cblx0ICovXG5cdGdldE1ldGhvZCggbWV0aG9kICkge1xuXG5cdFx0cmV0dXJuIG1ldGhvZDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBub2RlIGZvciB0aGUgZ2l2ZW4gaGFzaCwgc2VlIHtAbGluayBOb2RlQnVpbGRlciNzZXRIYXNoTm9kZX0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoYXNoIC0gVGhlIGhhc2ggb2YgdGhlIG5vZGUuXG5cdCAqIEByZXR1cm4ge05vZGV9IFRoZSBmb3VuZCBub2RlLlxuXHQgKi9cblx0Z2V0Tm9kZUZyb21IYXNoKCBoYXNoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaGFzaE5vZGVzWyBoYXNoIF07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBOb2RlIHRvIGEgdGFyZ2V0IGZsb3cgc28gdGhhdCBpdCBjYW4gZ2VuZXJhdGUgY29kZSBpbiB0aGUgJ2dlbmVyYXRlJyBwcm9jZXNzLlxuXHQgKlxuXHQgKiBAcGFyYW0geygndmVydGV4J3wnZnJhZ21lbnQnfCdjb21wdXRlJyl9IHNoYWRlclN0YWdlIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdG8gYWRkLlxuXHQgKiBAcmV0dXJuIHtOb2RlfSBUaGUgbm9kZS5cblx0ICovXG5cdGFkZEZsb3coIHNoYWRlclN0YWdlLCBub2RlICkge1xuXG5cdFx0dGhpcy5mbG93Tm9kZXNbIHNoYWRlclN0YWdlIF0ucHVzaCggbm9kZSApO1xuXG5cdFx0cmV0dXJuIG5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGJ1aWxkZXIncyBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dCAtIFRoZSBjb250ZXh0IHRvIHNldC5cblx0ICovXG5cdHNldENvbnRleHQoIGNvbnRleHQgKSB7XG5cblx0XHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYnVpbGRlcidzIGN1cnJlbnQgY29udGV4dC5cblx0ICpcblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgYnVpbGRlcidzIGN1cnJlbnQgY29udGV4dC5cblx0ICovXG5cdGdldENvbnRleHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb250ZXh0O1xuXG5cdH1cblxuXHQvKipcblx0ICogR2V0cyBhIGNvbnRleHQgdXNlZCBpbiBzaGFkZXIgY29uc3RydWN0aW9uIHRoYXQgY2FuIGJlIHNoYXJlZCBhY3Jvc3MgZGlmZmVyZW50IG1hdGVyaWFscy5cblx0ICogVGhpcyBpcyBuZWNlc3Nhcnkgc2luY2UgdGhlIHJlbmRlcmVyIGNhY2hlIGNhbiByZXVzZSBzaGFkZXJzIGdlbmVyYXRlZCBpbiBvbmUgbWF0ZXJpYWwgYW5kIHVzZSB0aGVtIGluIGFub3RoZXIuXG5cdCAqXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIGJ1aWxkZXIncyBjdXJyZW50IGNvbnRleHQgd2l0aG91dCBtYXRlcmlhbC5cblx0ICovXG5cdGdldFNoYXJlZENvbnRleHQoKSB7XG5cblx0XHRjb25zdCBjb250ZXh0ID0geyAuLi50aGlzLmNvbnRleHQgfTtcblxuXHRcdGRlbGV0ZSBjb250ZXh0Lm1hdGVyaWFsO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29udGV4dDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgYnVpbGRlcidzIGNhY2hlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVDYWNoZX0gY2FjaGUgLSBUaGUgY2FjaGUgdG8gc2V0LlxuXHQgKi9cblx0c2V0Q2FjaGUoIGNhY2hlICkge1xuXG5cdFx0dGhpcy5jYWNoZSA9IGNhY2hlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYnVpbGRlcidzIGN1cnJlbnQgY2FjaGUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge05vZGVDYWNoZX0gVGhlIGJ1aWxkZXIncyBjdXJyZW50IGNhY2hlLlxuXHQgKi9cblx0Z2V0Q2FjaGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jYWNoZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBjYWNoZSBmb3IgdGhlIGdpdmVuIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJlbnQ9dHJ1ZV0gLSBXaGV0aGVyIHRoaXMgbm9kZSByZWZlcnMgdG8gYSBzaGFyZWQgcGFyZW50IGNhY2hlIG9yIG5vdC5cblx0ICogQHJldHVybiB7Tm9kZUNhY2hlfSBUaGUgY2FjaGUuXG5cdCAqL1xuXHRnZXRDYWNoZUZyb21Ob2RlKCBub2RlLCBwYXJlbnQgPSB0cnVlICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YUZyb21Ob2RlKCBub2RlICk7XG5cdFx0aWYgKCBkYXRhLmNhY2hlID09PSB1bmRlZmluZWQgKSBkYXRhLmNhY2hlID0gbmV3IE5vZGVDYWNoZSggcGFyZW50ID8gdGhpcy5nZXRDYWNoZSgpIDogbnVsbCApO1xuXG5cdFx0cmV0dXJuIGRhdGEuY2FjaGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoZSByZXF1ZXN0ZWQgZmVhdHVyZSBpcyBhdmFpbGFibGUgb3Igbm90LlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgcmVxdWVzdGVkIGZlYXR1cmUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlcXVlc3RlZCBmZWF0dXJlIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqL1xuXHRpc0F2YWlsYWJsZSggLypuYW1lKi8gKSB7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2ZXJ0ZXhJbmRleCBpbnB1dCB2YXJpYWJsZSBhcyBhIG5hdGl2ZSBzaGFkZXIgc3RyaW5nLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgaW5zdGFuY2VJbmRleCBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0Z2V0VmVydGV4SW5kZXgoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdBYnN0cmFjdCBmdW5jdGlvbi4nICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnN0YW5jZUluZGV4IGlucHV0IHZhcmlhYmxlIGFzIGEgbmF0aXZlIHNoYWRlciBzdHJpbmcuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBpbnN0YW5jZUluZGV4IHNoYWRlciBzdHJpbmcuXG5cdCAqL1xuXHRnZXRJbnN0YW5jZUluZGV4KCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnQWJzdHJhY3QgZnVuY3Rpb24uJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZHJhd0luZGV4IGlucHV0IHZhcmlhYmxlIGFzIGEgbmF0aXZlIHNoYWRlciBzdHJpbmcuXG5cdCAqIE9ubHkgcmVsZXZhbnQgZm9yIFdlYkdMIGFuZCBpdHMgYFdFQkdMX211bHRpX2RyYXdgIGV4dGVuc2lvbi5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBkcmF3SW5kZXggc2hhZGVyIHN0cmluZy5cblx0ICovXG5cdGdldERyYXdJbmRleCgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ0Fic3RyYWN0IGZ1bmN0aW9uLicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGZyb250RmFjaW5nIGlucHV0IHZhcmlhYmxlIGFzIGEgbmF0aXZlIHNoYWRlciBzdHJpbmcuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmcm9udEZhY2luZyBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0Z2V0RnJvbnRGYWNpbmcoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdBYnN0cmFjdCBmdW5jdGlvbi4nICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBmcmFnQ29vcmQgaW5wdXQgdmFyaWFibGUgYXMgYSBuYXRpdmUgc2hhZGVyIHN0cmluZy5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZyYWdDb29yZCBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0Z2V0RnJhZ0Nvb3JkKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnQWJzdHJhY3QgZnVuY3Rpb24uJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0byBmbGlwIHRleHR1cmUgZGF0YSBhbG9uZyBpdHMgdmVydGljYWwgYXhpcyBvciBub3QuIFdlYkdMIG5lZWRzXG5cdCAqIHRoaXMgbWV0aG9kIGV2YWx1YXRlIHRvIGB0cnVlYCwgV2ViR1BVIHRvIGBmYWxzZWAuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRvIGZsaXAgdGV4dHVyZSBkYXRhIGFsb25nIGl0cyB2ZXJ0aWNhbCBheGlzIG9yIG5vdC5cblx0ICovXG5cdGlzRmxpcFkoKSB7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxsaW5nIHRoaXMgbWV0aG9kIGluY3JlYXNlcyB0aGUgdXNhZ2UgY291bnQgZm9yIHRoZSBnaXZlbiBub2RlIGJ5IG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdG8gaW5jcmVhc2UgdGhlIHVzYWdlIGNvdW50IGZvci5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgdXBkYXRlZCB1c2FnZSBjb3VudC5cblx0ICovXG5cdGluY3JlYXNlVXNhZ2UoIG5vZGUgKSB7XG5cblx0XHRjb25zdCBub2RlRGF0YSA9IHRoaXMuZ2V0RGF0YUZyb21Ob2RlKCBub2RlICk7XG5cdFx0bm9kZURhdGEudXNhZ2VDb3VudCA9IG5vZGVEYXRhLnVzYWdlQ291bnQgPT09IHVuZGVmaW5lZCA/IDEgOiBub2RlRGF0YS51c2FnZUNvdW50ICsgMTtcblxuXHRcdHJldHVybiBub2RlRGF0YS51c2FnZUNvdW50O1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgdGV4dHVyZSBzYW1wbGUgc2hhZGVyIHN0cmluZyBmb3IgdGhlIGdpdmVuIHRleHR1cmUgZGF0YS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIHRleHR1cmUgcHJvcGVydHkgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHV2U25pcHBldCAtIFNuaXBwZXQgZGVmaW5pbmcgdGhlIHRleHR1cmUgY29vcmRpbmF0ZXMuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGdlbmVyYXRlZCBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlKCAvKiB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCAqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ0Fic3RyYWN0IGZ1bmN0aW9uLicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIHRleHR1cmUgTE9EIHNoYWRlciBzdHJpbmcgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIGRhdGEuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVQcm9wZXJ0eSAtIFRoZSB0ZXh0dXJlIHByb3BlcnR5IG5hbWUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1dlNuaXBwZXQgLSBTbmlwcGV0IGRlZmluaW5nIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzLlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IGRlcHRoU25pcHBldCAtIFNuaXBwZXQgZGVmaW5pbmcgdGhlIDAtYmFzZWQgdGV4dHVyZSBhcnJheSBpbmRleCB0byBzYW1wbGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbFNuaXBwZXQgLSBTbmlwcGV0IGRlZmluaW5nIHRoZSBtaXAgbGV2ZWwuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGdlbmVyYXRlZCBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlTG9kKCAvKiB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgZGVwdGhTbmlwcGV0LCBsZXZlbFNuaXBwZXQgKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdBYnN0cmFjdCBmdW5jdGlvbi4nICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIGFycmF5IGRlY2xhcmF0aW9uIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZS5cblx0ICogQHBhcmFtIHs/bnVtYmVyfSBbY291bnRdIC0gVGhlIGNvdW50LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBnZW5lcmF0ZWQgdmFsdWUgYXMgYSBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0Z2VuZXJhdGVBcnJheURlY2xhcmF0aW9uKCB0eXBlLCBjb3VudCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldFR5cGUoIHR5cGUgKSArICdbICcgKyBjb3VudCArICcgXSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIGFycmF5IHNoYWRlciBzdHJpbmcgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZS5cblx0ICogQHBhcmFtIHs/bnVtYmVyfSBbY291bnRdIC0gVGhlIGNvdW50LlxuXHQgKiBAcGFyYW0gez9BcnJheTxOb2RlPn0gW3ZhbHVlcz1udWxsXSAtIFRoZSBkZWZhdWx0IHZhbHVlcy5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIHZhbHVlIGFzIGEgc2hhZGVyIHN0cmluZy5cblx0ICovXG5cdGdlbmVyYXRlQXJyYXkoIHR5cGUsIGNvdW50LCB2YWx1ZXMgPSBudWxsICkge1xuXG5cdFx0bGV0IHNuaXBwZXQgPSB0aGlzLmdlbmVyYXRlQXJyYXlEZWNsYXJhdGlvbiggdHlwZSwgY291bnQgKSArICcoICc7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXMgPyB2YWx1ZXNbIGkgXSA6IG51bGw7XG5cblx0XHRcdGlmICggdmFsdWUgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0c25pcHBldCArPSB2YWx1ZS5idWlsZCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHNuaXBwZXQgKz0gdGhpcy5nZW5lcmF0ZUNvbnN0KCB0eXBlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpIDwgY291bnQgLSAxICkgc25pcHBldCArPSAnLCAnO1xuXG5cdFx0fVxuXG5cdFx0c25pcHBldCArPSAnICknO1xuXG5cdFx0cmV0dXJuIHNuaXBwZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIHN0cnVjdCBzaGFkZXIgc3RyaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlLlxuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IFttZW1iZXJzTGF5b3V0XSAtIFRoZSBjb3VudC5cblx0ICogQHBhcmFtIHs/QXJyYXk8Tm9kZT59IFt2YWx1ZXM9bnVsbF0gLSBUaGUgZGVmYXVsdCB2YWx1ZXMuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGdlbmVyYXRlZCB2YWx1ZSBhcyBhIHNoYWRlciBzdHJpbmcuXG5cdCAqL1xuXHRnZW5lcmF0ZVN0cnVjdCggdHlwZSwgbWVtYmVyc0xheW91dCwgdmFsdWVzID0gbnVsbCApIHtcblxuXHRcdGNvbnN0IHNuaXBwZXRzID0gW107XG5cblx0XHRmb3IgKCBjb25zdCBtZW1iZXIgb2YgbWVtYmVyc0xheW91dCApIHtcblxuXHRcdFx0Y29uc3QgeyBuYW1lLCB0eXBlIH0gPSBtZW1iZXI7XG5cblx0XHRcdGlmICggdmFsdWVzICYmIHZhbHVlc1sgbmFtZSBdICYmIHZhbHVlc1sgbmFtZSBdLmlzTm9kZSApIHtcblxuXHRcdFx0XHRzbmlwcGV0cy5wdXNoKCB2YWx1ZXNbIG5hbWUgXS5idWlsZCggdGhpcywgdHlwZSApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c25pcHBldHMucHVzaCggdGhpcy5nZW5lcmF0ZUNvbnN0KCB0eXBlICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHR5cGUgKyAnKCAnICsgc25pcHBldHMuam9pbiggJywgJyApICsgJyApJztcblxuXHR9XG5cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSBzaGFkZXIgc3RyaW5nIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUuXG5cdCAqIEBwYXJhbSB7P2FueX0gW3ZhbHVlPW51bGxdIC0gVGhlIHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBnZW5lcmF0ZWQgdmFsdWUgYXMgYSBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0Z2VuZXJhdGVDb25zdCggdHlwZSwgdmFsdWUgPSBudWxsICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCB0eXBlID09PSAnZmxvYXQnIHx8IHR5cGUgPT09ICdpbnQnIHx8IHR5cGUgPT09ICd1aW50JyApIHZhbHVlID0gMDtcblx0XHRcdGVsc2UgaWYgKCB0eXBlID09PSAnYm9vbCcgKSB2YWx1ZSA9IGZhbHNlO1xuXHRcdFx0ZWxzZSBpZiAoIHR5cGUgPT09ICdjb2xvcicgKSB2YWx1ZSA9IG5ldyBDb2xvcigpO1xuXHRcdFx0ZWxzZSBpZiAoIHR5cGUgPT09ICd2ZWMyJyApIHZhbHVlID0gbmV3IFZlY3RvcjIoKTtcblx0XHRcdGVsc2UgaWYgKCB0eXBlID09PSAndmVjMycgKSB2YWx1ZSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRlbHNlIGlmICggdHlwZSA9PT0gJ3ZlYzQnICkgdmFsdWUgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlID09PSAnZmxvYXQnICkgcmV0dXJuIHRvRmxvYXQoIHZhbHVlICk7XG5cdFx0aWYgKCB0eXBlID09PSAnaW50JyApIHJldHVybiBgJHsgTWF0aC5yb3VuZCggdmFsdWUgKSB9YDtcblx0XHRpZiAoIHR5cGUgPT09ICd1aW50JyApIHJldHVybiB2YWx1ZSA+PSAwID8gYCR7IE1hdGgucm91bmQoIHZhbHVlICkgfXVgIDogJzB1Jztcblx0XHRpZiAoIHR5cGUgPT09ICdib29sJyApIHJldHVybiB2YWx1ZSA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cdFx0aWYgKCB0eXBlID09PSAnY29sb3InICkgcmV0dXJuIGAkeyB0aGlzLmdldFR5cGUoICd2ZWMzJyApIH0oICR7IHRvRmxvYXQoIHZhbHVlLnIgKSB9LCAkeyB0b0Zsb2F0KCB2YWx1ZS5nICkgfSwgJHsgdG9GbG9hdCggdmFsdWUuYiApIH0gKWA7XG5cblx0XHRjb25zdCB0eXBlTGVuZ3RoID0gdGhpcy5nZXRUeXBlTGVuZ3RoKCB0eXBlICk7XG5cblx0XHRjb25zdCBjb21wb25lbnRUeXBlID0gdGhpcy5nZXRDb21wb25lbnRUeXBlKCB0eXBlICk7XG5cblx0XHRjb25zdCBnZW5lcmF0ZUNvbnN0ID0gdmFsdWUgPT4gdGhpcy5nZW5lcmF0ZUNvbnN0KCBjb21wb25lbnRUeXBlLCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlTGVuZ3RoID09PSAyICkge1xuXG5cdFx0XHRyZXR1cm4gYCR7IHRoaXMuZ2V0VHlwZSggdHlwZSApIH0oICR7IGdlbmVyYXRlQ29uc3QoIHZhbHVlLnggKSB9LCAkeyBnZW5lcmF0ZUNvbnN0KCB2YWx1ZS55ICkgfSApYDtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVMZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdHJldHVybiBgJHsgdGhpcy5nZXRUeXBlKCB0eXBlICkgfSggJHsgZ2VuZXJhdGVDb25zdCggdmFsdWUueCApIH0sICR7IGdlbmVyYXRlQ29uc3QoIHZhbHVlLnkgKSB9LCAkeyBnZW5lcmF0ZUNvbnN0KCB2YWx1ZS56ICkgfSApYDtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVMZW5ndGggPT09IDQgJiYgdHlwZSAhPT0gJ21hdDInICkge1xuXG5cdFx0XHRyZXR1cm4gYCR7IHRoaXMuZ2V0VHlwZSggdHlwZSApIH0oICR7IGdlbmVyYXRlQ29uc3QoIHZhbHVlLnggKSB9LCAkeyBnZW5lcmF0ZUNvbnN0KCB2YWx1ZS55ICkgfSwgJHsgZ2VuZXJhdGVDb25zdCggdmFsdWUueiApIH0sICR7IGdlbmVyYXRlQ29uc3QoIHZhbHVlLncgKSB9IClgO1xuXG5cdFx0fSBlbHNlIGlmICggdHlwZUxlbmd0aCA+PSA0ICYmIHZhbHVlICYmICggdmFsdWUuaXNNYXRyaXgyIHx8IHZhbHVlLmlzTWF0cml4MyB8fCB2YWx1ZS5pc01hdHJpeDQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGAkeyB0aGlzLmdldFR5cGUoIHR5cGUgKSB9KCAkeyB2YWx1ZS5lbGVtZW50cy5tYXAoIGdlbmVyYXRlQ29uc3QgKS5qb2luKCAnLCAnICkgfSApYDtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVMZW5ndGggPiA0ICkge1xuXG5cdFx0XHRyZXR1cm4gYCR7IHRoaXMuZ2V0VHlwZSggdHlwZSApIH0oKWA7XG5cblx0XHR9XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoIGBOb2RlQnVpbGRlcjogVHlwZSAnJHt0eXBlfScgbm90IGZvdW5kIGluIGdlbmVyYXRlIGNvbnN0YW50IGF0dGVtcHQuYCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogSXQgbWlnaHQgYmUgbmVjZXNzYXJ5IHRvIGNvbnZlcnQgY2VydGFpbiBkYXRhIHR5cGVzIHRvIGRpZmZlcmVudCBvbmVzXG5cdCAqIHNvIHRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIHRvIGhpZGUgdGhlIGNvbnZlcnNpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVwZGF0ZWQgdHlwZS5cblx0ICovXG5cdGdldFR5cGUoIHR5cGUgKSB7XG5cblx0XHRpZiAoIHR5cGUgPT09ICdjb2xvcicgKSByZXR1cm4gJ3ZlYzMnO1xuXG5cdFx0cmV0dXJuIHR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoZSBnaXZlbiBhdHRyaWJ1dGUgbmFtZSBpcyBkZWZpbmVkIGluIHRoZSBnZW9tZXRyeSBvciBub3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGF0dHJpYnV0ZSBuYW1lLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBhdHRyaWJ1dGUgbmFtZSBpcyBkZWZpbmVkIGluIHRoZSBnZW9tZXRyeS5cblx0ICovXG5cdGhhc0dlb21ldHJ5QXR0cmlidXRlKCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnkgJiYgdGhpcy5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSAhPT0gdW5kZWZpbmVkO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5vZGUgYXR0cmlidXRlIGZvciB0aGUgZ2l2ZW4gbmFtZSBhbmQgdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgYXR0cmlidXRlJ3MgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgYXR0cmlidXRlJ3MgdHlwZS5cblx0ICogQHJldHVybiB7Tm9kZUF0dHJpYnV0ZX0gVGhlIG5vZGUgYXR0cmlidXRlLlxuXHQgKi9cblx0Z2V0QXR0cmlidXRlKCBuYW1lLCB0eXBlICkge1xuXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdC8vIGZpbmQgYXR0cmlidXRlXG5cblx0XHRmb3IgKCBjb25zdCBhdHRyaWJ1dGUgb2YgYXR0cmlidXRlcyApIHtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUubmFtZSA9PT0gbmFtZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gYXR0cmlidXRlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBjcmVhdGUgYSBuZXcgaWYgbm8gZXhpc3RcblxuXHRcdGNvbnN0IGF0dHJpYnV0ZSA9IG5ldyBOb2RlQXR0cmlidXRlKCBuYW1lLCB0eXBlICk7XG5cblx0XHRhdHRyaWJ1dGVzLnB1c2goIGF0dHJpYnV0ZSApO1xuXG5cdFx0cmV0dXJuIGF0dHJpYnV0ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgZm9yIHRoZSBnaXZlbiBub2RlIGFuZCBzaGFkZXIgc3RhZ2UgdGhlIHByb3BlcnR5IG5hbWUgZm9yIHRoZSBzaGFkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlLlxuXHQgKiBAcGFyYW0geygndmVydGV4J3wnZnJhZ21lbnQnfCdjb21wdXRlJ3wnYW55Jyl9IHNoYWRlclN0YWdlIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgcHJvcGVydHkgbmFtZS5cblx0ICovXG5cdGdldFByb3BlcnR5TmFtZSggbm9kZS8qLCBzaGFkZXJTdGFnZSovICkge1xuXG5cdFx0cmV0dXJuIG5vZGUubmFtZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIGdpdmVuIHR5cGUgaXMgYSB2ZWN0b3IgdHlwZSBvciBub3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIHR5cGUgaXMgYSB2ZWN0b3IgdHlwZSBvciBub3QuXG5cdCAqL1xuXHRpc1ZlY3RvciggdHlwZSApIHtcblxuXHRcdHJldHVybiAvdmVjXFxkLy50ZXN0KCB0eXBlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIHRoZSBnaXZlbiB0eXBlIGlzIGEgbWF0cml4IHR5cGUgb3Igbm90LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiB0eXBlIGlzIGEgbWF0cml4IHR5cGUgb3Igbm90LlxuXHQgKi9cblx0aXNNYXRyaXgoIHR5cGUgKSB7XG5cblx0XHRyZXR1cm4gL21hdFxcZC8udGVzdCggdHlwZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgZ2l2ZW4gdHlwZSBpcyBhIHJlZmVyZW5jZSB0eXBlIG9yIG5vdC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSB0byBjaGVjay5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gdHlwZSBpcyBhIHJlZmVyZW5jZSB0eXBlIG9yIG5vdC5cblx0ICovXG5cdGlzUmVmZXJlbmNlKCB0eXBlICkge1xuXG5cdFx0cmV0dXJuIHR5cGUgPT09ICd2b2lkJyB8fCB0eXBlID09PSAncHJvcGVydHknIHx8IHR5cGUgPT09ICdzYW1wbGVyJyB8fCB0eXBlID09PSAndGV4dHVyZScgfHwgdHlwZSA9PT0gJ2N1YmVUZXh0dXJlJyB8fCB0eXBlID09PSAnc3RvcmFnZVRleHR1cmUnIHx8IHR5cGUgPT09ICdkZXB0aFRleHR1cmUnIHx8IHR5cGUgPT09ICd0ZXh0dXJlM0QnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB0ZXh0dXJlIHJlcXVpcmVzIGEgbWFudWFsIGNvbnZlcnNpb24gdG8gdGhlIHdvcmtpbmcgY29sb3Igc3BhY2UuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBjaGVjay5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gdGV4dHVyZSByZXF1aXJlcyBhIGNvbnZlcnNpb24gdG8gd29ya2luZyBjb2xvciBzcGFjZSBvciBub3QuXG5cdCAqL1xuXHRuZWVkc1RvV29ya2luZ0NvbG9yU3BhY2UoIC8qdGV4dHVyZSovICkge1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY29tcG9uZW50IHR5cGUgb2YgYSBnaXZlbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgY29tcG9uZW50IHR5cGUuXG5cdCAqL1xuXHRnZXRDb21wb25lbnRUeXBlRnJvbVRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHRjb25zdCB0eXBlID0gdGV4dHVyZS50eXBlO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gSW50VHlwZSApIHJldHVybiAnaW50Jztcblx0XHRcdGlmICggdHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlICkgcmV0dXJuICd1aW50JztcblxuXHRcdH1cblxuXHRcdHJldHVybiAnZmxvYXQnO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZWxlbWVudCB0eXBlIGZvciBhIGdpdmVuIHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGVsZW1lbnQgdHlwZS5cblx0ICovXG5cdGdldEVsZW1lbnRUeXBlKCB0eXBlICkge1xuXG5cdFx0aWYgKCB0eXBlID09PSAnbWF0MicgKSByZXR1cm4gJ3ZlYzInO1xuXHRcdGlmICggdHlwZSA9PT0gJ21hdDMnICkgcmV0dXJuICd2ZWMzJztcblx0XHRpZiAoIHR5cGUgPT09ICdtYXQ0JyApIHJldHVybiAndmVjNCc7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRDb21wb25lbnRUeXBlKCB0eXBlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjb21wb25lbnQgdHlwZSBmb3IgYSBnaXZlbiB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb21wb25lbnQgdHlwZS5cblx0ICovXG5cdGdldENvbXBvbmVudFR5cGUoIHR5cGUgKSB7XG5cblx0XHR0eXBlID0gdGhpcy5nZXRWZWN0b3JUeXBlKCB0eXBlICk7XG5cblx0XHRpZiAoIHR5cGUgPT09ICdmbG9hdCcgfHwgdHlwZSA9PT0gJ2Jvb2wnIHx8IHR5cGUgPT09ICdpbnQnIHx8IHR5cGUgPT09ICd1aW50JyApIHJldHVybiB0eXBlO1xuXG5cdFx0Y29uc3QgY29tcG9uZW50VHlwZSA9IC8oYnxpfHV8KSh2ZWN8bWF0KShbMi00XSkvLmV4ZWMoIHR5cGUgKTtcblxuXHRcdGlmICggY29tcG9uZW50VHlwZSA9PT0gbnVsbCApIHJldHVybiBudWxsO1xuXG5cdFx0aWYgKCBjb21wb25lbnRUeXBlWyAxIF0gPT09ICdiJyApIHJldHVybiAnYm9vbCc7XG5cdFx0aWYgKCBjb21wb25lbnRUeXBlWyAxIF0gPT09ICdpJyApIHJldHVybiAnaW50Jztcblx0XHRpZiAoIGNvbXBvbmVudFR5cGVbIDEgXSA9PT0gJ3UnICkgcmV0dXJuICd1aW50JztcblxuXHRcdHJldHVybiAnZmxvYXQnO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmVjdG9yIHR5cGUgZm9yIGEgZ2l2ZW4gdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgdmVjdG9yIHR5cGUuXG5cdCAqL1xuXHRnZXRWZWN0b3JUeXBlKCB0eXBlICkge1xuXG5cdFx0aWYgKCB0eXBlID09PSAnY29sb3InICkgcmV0dXJuICd2ZWMzJztcblx0XHRpZiAoIHR5cGUgPT09ICd0ZXh0dXJlJyB8fCB0eXBlID09PSAnY3ViZVRleHR1cmUnIHx8IHR5cGUgPT09ICdzdG9yYWdlVGV4dHVyZScgfHwgdHlwZSA9PT0gJ3RleHR1cmUzRCcgKSByZXR1cm4gJ3ZlYzQnO1xuXG5cdFx0cmV0dXJuIHR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBkYXRhIHR5cGUgZm9yIHRoZSBnaXZlbiB0aGUgbGVuZ3RoIGFuZCBjb21wb25lbnQgdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIFRoZSBsZW5ndGguXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbY29tcG9uZW50VHlwZT0nZmxvYXQnXSAtIFRoZSBjb21wb25lbnQgdHlwZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgdHlwZS5cblx0ICovXG5cdGdldFR5cGVGcm9tTGVuZ3RoKCBsZW5ndGgsIGNvbXBvbmVudFR5cGUgPSAnZmxvYXQnICkge1xuXG5cdFx0aWYgKCBsZW5ndGggPT09IDEgKSByZXR1cm4gY29tcG9uZW50VHlwZTtcblxuXHRcdGxldCBiYXNlVHlwZSA9IGdldFR5cGVGcm9tTGVuZ3RoKCBsZW5ndGggKTtcblx0XHRjb25zdCBwcmVmaXggPSBjb21wb25lbnRUeXBlID09PSAnZmxvYXQnID8gJycgOiBjb21wb25lbnRUeXBlWyAwIF07XG5cblx0XHQvLyBmaXggZWRnZSBjYXNlIGZvciBtYXQyeDIgYmVpbmcgc2FtZSBzaXplIGFzIHZlYzRcblx0XHRpZiAoIC9tYXQyLy50ZXN0KCBjb21wb25lbnRUeXBlICkgPT09IHRydWUgKSB7XG5cblx0XHRcdGJhc2VUeXBlID0gYmFzZVR5cGUucmVwbGFjZSggJ3ZlYycsICdtYXQnICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcHJlZml4ICsgYmFzZVR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0eXBlIGZvciBhIGdpdmVuIHR5cGVkIGFycmF5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGFycmF5IC0gVGhlIHR5cGVkIGFycmF5LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0eXBlLlxuXHQgKi9cblx0Z2V0VHlwZUZyb21BcnJheSggYXJyYXkgKSB7XG5cblx0XHRyZXR1cm4gdHlwZUZyb21BcnJheS5nZXQoIGFycmF5LmNvbnN0cnVjdG9yICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0eXBlIGZvciBhIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgdHlwZS5cblx0ICovXG5cdGdldFR5cGVGcm9tQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRsZXQgZGF0YUF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcblxuXHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBkYXRhQXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRjb25zdCBhcnJheSA9IGRhdGFBdHRyaWJ1dGUuYXJyYXk7XG5cdFx0Y29uc3QgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cdFx0Y29uc3Qgbm9ybWFsaXplZCA9IGF0dHJpYnV0ZS5ub3JtYWxpemVkO1xuXG5cdFx0bGV0IGFycmF5VHlwZTtcblxuXHRcdGlmICggISAoIGF0dHJpYnV0ZSBpbnN0YW5jZW9mIEZsb2F0MTZCdWZmZXJBdHRyaWJ1dGUgKSAmJiBub3JtYWxpemVkICE9PSB0cnVlICkge1xuXG5cdFx0XHRhcnJheVR5cGUgPSB0aGlzLmdldFR5cGVGcm9tQXJyYXkoIGFycmF5ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRUeXBlRnJvbUxlbmd0aCggaXRlbVNpemUsIGFycmF5VHlwZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbGVuZ3RoIGZvciB0aGUgZ2l2ZW4gZGF0YSB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBkYXRhIHR5cGUuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGxlbmd0aC5cblx0ICovXG5cdGdldFR5cGVMZW5ndGgoIHR5cGUgKSB7XG5cblx0XHRjb25zdCB2ZWNUeXBlID0gdGhpcy5nZXRWZWN0b3JUeXBlKCB0eXBlICk7XG5cdFx0Y29uc3QgdmVjTnVtID0gL3ZlYyhbMi00XSkvLmV4ZWMoIHZlY1R5cGUgKTtcblxuXHRcdGlmICggdmVjTnVtICE9PSBudWxsICkgcmV0dXJuIE51bWJlciggdmVjTnVtWyAxIF0gKTtcblx0XHRpZiAoIHZlY1R5cGUgPT09ICdmbG9hdCcgfHwgdmVjVHlwZSA9PT0gJ2Jvb2wnIHx8IHZlY1R5cGUgPT09ICdpbnQnIHx8IHZlY1R5cGUgPT09ICd1aW50JyApIHJldHVybiAxO1xuXHRcdGlmICggL21hdDIvLnRlc3QoIHR5cGUgKSA9PT0gdHJ1ZSApIHJldHVybiA0O1xuXHRcdGlmICggL21hdDMvLnRlc3QoIHR5cGUgKSA9PT0gdHJ1ZSApIHJldHVybiA5O1xuXHRcdGlmICggL21hdDQvLnRlc3QoIHR5cGUgKSA9PT0gdHJ1ZSApIHJldHVybiAxNjtcblxuXHRcdHJldHVybiAwO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmVjdG9yIHR5cGUgZm9yIGEgZ2l2ZW4gbWF0cml4IHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIG1hdHJpeCB0eXBlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB2ZWN0b3IgdHlwZS5cblx0ICovXG5cdGdldFZlY3RvckZyb21NYXRyaXgoIHR5cGUgKSB7XG5cblx0XHRyZXR1cm4gdHlwZS5yZXBsYWNlKCAnbWF0JywgJ3ZlYycgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZvciBhIGdpdmVuIHR5cGUgdGhpcyBtZXRob2QgY2hhbmdlcyB0aGUgY29tcG9uZW50IHR5cGUgdG8gdGhlXG5cdCAqIGdpdmVuIHZhbHVlLiBFLmcuIGB2ZWM0YCBzaG91bGQgYmUgY2hhbmdlZCB0byB0aGUgbmV3IGNvbXBvbmVudCB0eXBlXG5cdCAqIGB1aW50YCB3aGljaCByZXN1bHRzIGluIGB1dmVjNGAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuZXdDb21wb25lbnRUeXBlIC0gVGhlIG5ldyBjb21wb25lbnQgdHlwZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmV3IHR5cGUuXG5cdCAqL1xuXHRjaGFuZ2VDb21wb25lbnRUeXBlKCB0eXBlLCBuZXdDb21wb25lbnRUeXBlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0VHlwZUZyb21MZW5ndGgoIHRoaXMuZ2V0VHlwZUxlbmd0aCggdHlwZSApLCBuZXdDb21wb25lbnRUeXBlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnRlZ2VyIHR5cGUgcGVuZGFudCBmb3IgdGhlIGdpdmVuIHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGludGVnZXIgdHlwZS5cblx0ICovXG5cdGdldEludGVnZXJUeXBlKCB0eXBlICkge1xuXG5cdFx0Y29uc3QgY29tcG9uZW50VHlwZSA9IHRoaXMuZ2V0Q29tcG9uZW50VHlwZSggdHlwZSApO1xuXG5cdFx0aWYgKCBjb21wb25lbnRUeXBlID09PSAnaW50JyB8fCBjb21wb25lbnRUeXBlID09PSAndWludCcgKSByZXR1cm4gdHlwZTtcblxuXHRcdHJldHVybiB0aGlzLmNoYW5nZUNvbXBvbmVudFR5cGUoIHR5cGUsICdpbnQnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgc3RhY2sgbm9kZSB0byB0aGUgaW50ZXJuYWwgc3RhY2suXG5cdCAqXG5cdCAqIEByZXR1cm4ge1N0YWNrTm9kZX0gVGhlIGFkZGVkIHN0YWNrIG5vZGUuXG5cdCAqL1xuXHRhZGRTdGFjaygpIHtcblxuXHRcdHRoaXMuc3RhY2sgPSBzdGFjayggdGhpcy5zdGFjayApO1xuXG5cdFx0dGhpcy5zdGFja3MucHVzaCggZ2V0Q3VycmVudFN0YWNrKCkgfHwgdGhpcy5zdGFjayApO1xuXHRcdHNldEN1cnJlbnRTdGFjayggdGhpcy5zdGFjayApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhY2s7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBsYXN0IHN0YWNrIG5vZGUgZnJvbSB0aGUgaW50ZXJuYWwgc3RhY2suXG5cdCAqXG5cdCAqIEByZXR1cm4ge1N0YWNrTm9kZX0gVGhlIHJlbW92ZWQgc3RhY2sgbm9kZS5cblx0ICovXG5cdHJlbW92ZVN0YWNrKCkge1xuXG5cdFx0Y29uc3QgbGFzdFN0YWNrID0gdGhpcy5zdGFjaztcblx0XHR0aGlzLnN0YWNrID0gbGFzdFN0YWNrLnBhcmVudDtcblxuXHRcdHNldEN1cnJlbnRTdGFjayggdGhpcy5zdGFja3MucG9wKCkgKTtcblxuXHRcdHJldHVybiBsYXN0U3RhY2s7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYnVpbGRlciBtYWludGFpbnMgKGNhY2hlZCkgZGF0YSBmb3IgZWFjaCBub2RlIGR1cmluZyB0aGUgYnVpbGRpbmcgcHJvY2Vzcy4gVGhpcyBtZXRob2Rcblx0ICogY2FuIGJlIHVzZWQgdG8gZ2V0IHRoZXNlIGRhdGEgZm9yIGEgc3BlY2lmaWMgc2hhZGVyIHN0YWdlIGFuZCBjYWNoZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdG8gZ2V0IHRoZSBkYXRhIGZvci5cblx0ICogQHBhcmFtIHsoJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZSd8J2FueScpfSBbc2hhZGVyU3RhZ2U9dGhpcy5zaGFkZXJTdGFnZV0gLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcGFyYW0gez9Ob2RlQ2FjaGV9IGNhY2hlIC0gQW4gb3B0aW9uYWwgY2FjaGUuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5vZGUgZGF0YS5cblx0ICovXG5cdGdldERhdGFGcm9tTm9kZSggbm9kZSwgc2hhZGVyU3RhZ2UgPSB0aGlzLnNoYWRlclN0YWdlLCBjYWNoZSA9IG51bGwgKSB7XG5cblx0XHRjYWNoZSA9IGNhY2hlID09PSBudWxsID8gKCBub2RlLmlzR2xvYmFsKCB0aGlzICkgPyB0aGlzLmdsb2JhbENhY2hlIDogdGhpcy5jYWNoZSApIDogY2FjaGU7XG5cblx0XHRsZXQgbm9kZURhdGEgPSBjYWNoZS5nZXREYXRhKCBub2RlICk7XG5cblx0XHRpZiAoIG5vZGVEYXRhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG5vZGVEYXRhID0ge307XG5cblx0XHRcdGNhY2hlLnNldERhdGEoIG5vZGUsIG5vZGVEYXRhICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG5vZGVEYXRhWyBzaGFkZXJTdGFnZSBdID09PSB1bmRlZmluZWQgKSBub2RlRGF0YVsgc2hhZGVyU3RhZ2UgXSA9IHt9O1xuXG5cdFx0cmV0dXJuIG5vZGVEYXRhWyBzaGFkZXJTdGFnZSBdO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcHJvcGVydGllcyBmb3IgdGhlIGdpdmVuIG5vZGUgYW5kIHNoYWRlciBzdGFnZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdG8gZ2V0IHRoZSBwcm9wZXJ0aWVzIGZvci5cblx0ICogQHBhcmFtIHsoJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZSd8J2FueScpfSBbc2hhZGVyU3RhZ2U9J2FueSddIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgbm9kZSBwcm9wZXJ0aWVzLlxuXHQgKi9cblx0Z2V0Tm9kZVByb3BlcnRpZXMoIG5vZGUsIHNoYWRlclN0YWdlID0gJ2FueScgKSB7XG5cblx0XHRjb25zdCBub2RlRGF0YSA9IHRoaXMuZ2V0RGF0YUZyb21Ob2RlKCBub2RlLCBzaGFkZXJTdGFnZSApO1xuXG5cdFx0cmV0dXJuIG5vZGVEYXRhLnByb3BlcnRpZXMgfHwgKCBub2RlRGF0YS5wcm9wZXJ0aWVzID0geyBvdXRwdXROb2RlOiBudWxsIH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIE5vZGVBdHRyaWJ1dGV9IGZvciB0aGUgZ2l2ZW4gYnVmZmVyIGF0dHJpYnV0ZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZU5vZGV9IG5vZGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZSBub2RlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBub2RlIHR5cGUuXG5cdCAqIEByZXR1cm4ge05vZGVBdHRyaWJ1dGV9IFRoZSBub2RlIGF0dHJpYnV0ZS5cblx0ICovXG5cdGdldEJ1ZmZlckF0dHJpYnV0ZUZyb21Ob2RlKCBub2RlLCB0eXBlICkge1xuXG5cdFx0Y29uc3Qgbm9kZURhdGEgPSB0aGlzLmdldERhdGFGcm9tTm9kZSggbm9kZSApO1xuXG5cdFx0bGV0IGJ1ZmZlckF0dHJpYnV0ZSA9IG5vZGVEYXRhLmJ1ZmZlckF0dHJpYnV0ZTtcblxuXHRcdGlmICggYnVmZmVyQXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGluZGV4ID0gdGhpcy51bmlmb3Jtcy5pbmRleCArKztcblxuXHRcdFx0YnVmZmVyQXR0cmlidXRlID0gbmV3IE5vZGVBdHRyaWJ1dGUoICdub2RlQXR0cmlidXRlJyArIGluZGV4LCB0eXBlLCBub2RlICk7XG5cblx0XHRcdHRoaXMuYnVmZmVyQXR0cmlidXRlcy5wdXNoKCBidWZmZXJBdHRyaWJ1dGUgKTtcblxuXHRcdFx0bm9kZURhdGEuYnVmZmVyQXR0cmlidXRlID0gYnVmZmVyQXR0cmlidXRlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJ1ZmZlckF0dHJpYnV0ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFN0cnVjdFR5cGV9IGZvciB0aGUgZ2l2ZW4gb3V0cHV0IHN0cnVjdCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge091dHB1dFN0cnVjdE5vZGV9IG5vZGUgLSBUaGUgb3V0cHV0IHN0cnVjdCBub2RlLlxuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IG1lbWJlcnNMYXlvdXQgLSBUaGUgb3V0cHV0IHN0cnVjdCB0eXBlcy5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbbmFtZT1udWxsXSAtIFRoZSBuYW1lIG9mIHRoZSBzdHJ1Y3QuXG5cdCAqIEBwYXJhbSB7KCd2ZXJ0ZXgnfCdmcmFnbWVudCd8J2NvbXB1dGUnfCdhbnknKX0gW3NoYWRlclN0YWdlPXRoaXMuc2hhZGVyU3RhZ2VdIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHJldHVybiB7U3RydWN0VHlwZX0gVGhlIHN0cnVjdCB0eXBlIGF0dHJpYnV0ZS5cblx0ICovXG5cdGdldFN0cnVjdFR5cGVGcm9tTm9kZSggbm9kZSwgbWVtYmVyc0xheW91dCwgbmFtZSA9IG51bGwsIHNoYWRlclN0YWdlID0gdGhpcy5zaGFkZXJTdGFnZSApIHtcblxuXHRcdGNvbnN0IG5vZGVEYXRhID0gdGhpcy5nZXREYXRhRnJvbU5vZGUoIG5vZGUsIHNoYWRlclN0YWdlLCB0aGlzLmdsb2JhbENhY2hlICk7XG5cblx0XHRsZXQgc3RydWN0VHlwZSA9IG5vZGVEYXRhLnN0cnVjdFR5cGU7XG5cblx0XHRpZiAoIHN0cnVjdFR5cGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSB0aGlzLnN0cnVjdHMuaW5kZXggKys7XG5cblx0XHRcdGlmICggbmFtZSA9PT0gbnVsbCApIG5hbWUgPSAnU3RydWN0VHlwZScgKyBpbmRleDtcblxuXHRcdFx0c3RydWN0VHlwZSA9IG5ldyBTdHJ1Y3RUeXBlKCBuYW1lLCBtZW1iZXJzTGF5b3V0ICk7XG5cblx0XHRcdHRoaXMuc3RydWN0c1sgc2hhZGVyU3RhZ2UgXS5wdXNoKCBzdHJ1Y3RUeXBlICk7XG5cblx0XHRcdG5vZGVEYXRhLnN0cnVjdFR5cGUgPSBzdHJ1Y3RUeXBlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0cnVjdFR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIHtAbGluayBTdHJ1Y3RUeXBlfSBmb3IgdGhlIGdpdmVuIG91dHB1dCBzdHJ1Y3Qgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtPdXRwdXRTdHJ1Y3ROb2RlfSBub2RlIC0gVGhlIG91dHB1dCBzdHJ1Y3Qgbm9kZS5cblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBtZW1iZXJzTGF5b3V0IC0gVGhlIG91dHB1dCBzdHJ1Y3QgdHlwZXMuXG5cdCAqIEByZXR1cm4ge1N0cnVjdFR5cGV9IFRoZSBzdHJ1Y3QgdHlwZSBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRnZXRPdXRwdXRTdHJ1Y3RUeXBlRnJvbU5vZGUoIG5vZGUsIG1lbWJlcnNMYXlvdXQgKSB7XG5cblx0XHRjb25zdCBzdHJ1Y3RUeXBlID0gdGhpcy5nZXRTdHJ1Y3RUeXBlRnJvbU5vZGUoIG5vZGUsIG1lbWJlcnNMYXlvdXQsICdPdXRwdXRUeXBlJywgJ2ZyYWdtZW50JyApO1xuXHRcdHN0cnVjdFR5cGUub3V0cHV0ID0gdHJ1ZTtcblxuXHRcdHJldHVybiBzdHJ1Y3RUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgTm9kZVVuaWZvcm19IGZvciB0aGUgZ2l2ZW4gdW5pZm9ybSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1VuaWZvcm1Ob2RlfSBub2RlIC0gVGhlIHVuaWZvcm0gbm9kZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdW5pZm9ybSB0eXBlLlxuXHQgKiBAcGFyYW0geygndmVydGV4J3wnZnJhZ21lbnQnfCdjb21wdXRlJ3wnYW55Jyl9IFtzaGFkZXJTdGFnZT10aGlzLnNoYWRlclN0YWdlXSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB1bmlmb3JtLlxuXHQgKiBAcmV0dXJuIHtOb2RlVW5pZm9ybX0gVGhlIG5vZGUgdW5pZm9ybS5cblx0ICovXG5cdGdldFVuaWZvcm1Gcm9tTm9kZSggbm9kZSwgdHlwZSwgc2hhZGVyU3RhZ2UgPSB0aGlzLnNoYWRlclN0YWdlLCBuYW1lID0gbnVsbCApIHtcblxuXHRcdGNvbnN0IG5vZGVEYXRhID0gdGhpcy5nZXREYXRhRnJvbU5vZGUoIG5vZGUsIHNoYWRlclN0YWdlLCB0aGlzLmdsb2JhbENhY2hlICk7XG5cblx0XHRsZXQgbm9kZVVuaWZvcm0gPSBub2RlRGF0YS51bmlmb3JtO1xuXG5cdFx0aWYgKCBub2RlVW5pZm9ybSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBpbmRleCA9IHRoaXMudW5pZm9ybXMuaW5kZXggKys7XG5cblx0XHRcdG5vZGVVbmlmb3JtID0gbmV3IE5vZGVVbmlmb3JtKCBuYW1lIHx8ICggJ25vZGVVbmlmb3JtJyArIGluZGV4ICksIHR5cGUsIG5vZGUgKTtcblxuXHRcdFx0dGhpcy51bmlmb3Jtc1sgc2hhZGVyU3RhZ2UgXS5wdXNoKCBub2RlVW5pZm9ybSApO1xuXG5cdFx0XHRub2RlRGF0YS51bmlmb3JtID0gbm9kZVVuaWZvcm07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbm9kZVVuaWZvcm07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBhcnJheSBsZW5ndGguXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlLlxuXHQgKiBAcmV0dXJuIHs/bnVtYmVyfSBUaGUgYXJyYXkgbGVuZ3RoLlxuXHQgKi9cblx0Z2V0QXJyYXlDb3VudCggbm9kZSApIHtcblxuXHRcdGxldCBjb3VudCA9IG51bGw7XG5cblx0XHRpZiAoIG5vZGUuaXNBcnJheU5vZGUgKSBjb3VudCA9IG5vZGUuY291bnQ7XG5cdFx0ZWxzZSBpZiAoIG5vZGUuaXNWYXJOb2RlICYmIG5vZGUubm9kZS5pc0FycmF5Tm9kZSApIGNvdW50ID0gbm9kZS5ub2RlLmNvdW50O1xuXG5cdFx0cmV0dXJuIGNvdW50O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgTm9kZVZhcn0gZm9yIHRoZSBnaXZlbiB2YXJpYWJsZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1Zhck5vZGV9IG5vZGUgLSBUaGUgdmFyaWFibGUgbm9kZS5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBuYW1lIC0gVGhlIHZhcmlhYmxlJ3MgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlPW5vZGUuZ2V0Tm9kZVR5cGUoIHRoaXMgKV0gLSBUaGUgdmFyaWFibGUncyB0eXBlLlxuXHQgKiBAcGFyYW0geygndmVydGV4J3wnZnJhZ21lbnQnfCdjb21wdXRlJ3wnYW55Jyl9IFtzaGFkZXJTdGFnZT10aGlzLnNoYWRlclN0YWdlXSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlYWRPbmx5PWZhbHNlXSAtIFdoZXRoZXIgdGhlIHZhcmlhYmxlIGlzIHJlYWQtb25seSBvciBub3QuXG5cdCAqXG5cdCAqIEByZXR1cm4ge05vZGVWYXJ9IFRoZSBub2RlIHZhcmlhYmxlLlxuXHQgKi9cblx0Z2V0VmFyRnJvbU5vZGUoIG5vZGUsIG5hbWUgPSBudWxsLCB0eXBlID0gbm9kZS5nZXROb2RlVHlwZSggdGhpcyApLCBzaGFkZXJTdGFnZSA9IHRoaXMuc2hhZGVyU3RhZ2UsIHJlYWRPbmx5ID0gZmFsc2UgKSB7XG5cblx0XHRjb25zdCBub2RlRGF0YSA9IHRoaXMuZ2V0RGF0YUZyb21Ob2RlKCBub2RlLCBzaGFkZXJTdGFnZSApO1xuXG5cdFx0bGV0IG5vZGVWYXIgPSBub2RlRGF0YS52YXJpYWJsZTtcblxuXHRcdGlmICggbm9kZVZhciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBpZE5TID0gcmVhZE9ubHkgPyAnX2NvbnN0JyA6ICdfdmFyJztcblxuXHRcdFx0Y29uc3QgdmFycyA9IHRoaXMudmFyc1sgc2hhZGVyU3RhZ2UgXSB8fCAoIHRoaXMudmFyc1sgc2hhZGVyU3RhZ2UgXSA9IFtdICk7XG5cdFx0XHRjb25zdCBpZCA9IHRoaXMudmFyc1sgaWROUyBdIHx8ICggdGhpcy52YXJzWyBpZE5TIF0gPSAwICk7XG5cblx0XHRcdGlmICggbmFtZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRuYW1lID0gKCByZWFkT25seSA/ICdub2RlQ29uc3QnIDogJ25vZGVWYXInICkgKyBpZDtcblxuXHRcdFx0XHR0aGlzLnZhcnNbIGlkTlMgXSArKztcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRjb25zdCBjb3VudCA9IHRoaXMuZ2V0QXJyYXlDb3VudCggbm9kZSApO1xuXG5cdFx0XHRub2RlVmFyID0gbmV3IE5vZGVWYXIoIG5hbWUsIHR5cGUsIHJlYWRPbmx5LCBjb3VudCApO1xuXG5cdFx0XHRpZiAoICEgcmVhZE9ubHkgKSB7XG5cblx0XHRcdFx0dmFycy5wdXNoKCBub2RlVmFyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0bm9kZURhdGEudmFyaWFibGUgPSBub2RlVmFyO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGVWYXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHdoZXRoZXIgYSBOb2RlIG9yIGl0cyBmbG93IGlzIGRldGVybWluaXN0aWMsIHVzZWZ1bCBmb3IgdXNlIGluIGBjb25zdGAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSB2YXJ5aW5nIG5vZGUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBkZXRlcm1pbmlzdGljLlxuXHQgKi9cblx0aXNEZXRlcm1pbmlzdGljKCBub2RlICkge1xuXG5cdFx0aWYgKCBub2RlLmlzTWF0aE5vZGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmlzRGV0ZXJtaW5pc3RpYyggbm9kZS5hTm9kZSApICYmXG5cdFx0XHRcdCggbm9kZS5iTm9kZSA/IHRoaXMuaXNEZXRlcm1pbmlzdGljKCBub2RlLmJOb2RlICkgOiB0cnVlICkgJiZcblx0XHRcdFx0KCBub2RlLmNOb2RlID8gdGhpcy5pc0RldGVybWluaXN0aWMoIG5vZGUuY05vZGUgKSA6IHRydWUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG5vZGUuaXNPcGVyYXRvck5vZGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmlzRGV0ZXJtaW5pc3RpYyggbm9kZS5hTm9kZSApICYmXG5cdFx0XHRcdCggbm9kZS5iTm9kZSA/IHRoaXMuaXNEZXRlcm1pbmlzdGljKCBub2RlLmJOb2RlICkgOiB0cnVlICk7XG5cblx0XHR9IGVsc2UgaWYgKCBub2RlLmlzQXJyYXlOb2RlICkge1xuXG5cdFx0XHRpZiAoIG5vZGUudmFsdWVzICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGZvciAoIGNvbnN0IG4gb2Ygbm9kZS52YWx1ZXMgKSB7XG5cblx0XHRcdFx0XHRpZiAoICEgdGhpcy5pc0RldGVybWluaXN0aWMoIG4gKSApIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH0gZWxzZSBpZiAoIG5vZGUuaXNDb25zdE5vZGUgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgTm9kZVZhcnlpbmd9IGZvciB0aGUgZ2l2ZW4gdmFyeWluZyBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0geyhWYXJ5aW5nTm9kZXxQcm9wZXJ0eU5vZGUpfSBub2RlIC0gVGhlIHZhcnlpbmcgbm9kZS5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBuYW1lIC0gVGhlIHZhcnlpbmcncyBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3R5cGU9bm9kZS5nZXROb2RlVHlwZSggdGhpcyApXSAtIFRoZSB2YXJ5aW5nJ3MgdHlwZS5cblx0ICogQHJldHVybiB7Tm9kZVZhcn0gVGhlIG5vZGUgdmFyeWluZy5cblx0ICovXG5cdGdldFZhcnlpbmdGcm9tTm9kZSggbm9kZSwgbmFtZSA9IG51bGwsIHR5cGUgPSBub2RlLmdldE5vZGVUeXBlKCB0aGlzICkgKSB7XG5cblx0XHRjb25zdCBub2RlRGF0YSA9IHRoaXMuZ2V0RGF0YUZyb21Ob2RlKCBub2RlLCAnYW55JyApO1xuXG5cdFx0bGV0IG5vZGVWYXJ5aW5nID0gbm9kZURhdGEudmFyeWluZztcblxuXHRcdGlmICggbm9kZVZhcnlpbmcgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgdmFyeWluZ3MgPSB0aGlzLnZhcnlpbmdzO1xuXHRcdFx0Y29uc3QgaW5kZXggPSB2YXJ5aW5ncy5sZW5ndGg7XG5cblx0XHRcdGlmICggbmFtZSA9PT0gbnVsbCApIG5hbWUgPSAnbm9kZVZhcnlpbmcnICsgaW5kZXg7XG5cblx0XHRcdG5vZGVWYXJ5aW5nID0gbmV3IE5vZGVWYXJ5aW5nKCBuYW1lLCB0eXBlICk7XG5cblx0XHRcdHZhcnlpbmdzLnB1c2goIG5vZGVWYXJ5aW5nICk7XG5cblx0XHRcdG5vZGVEYXRhLnZhcnlpbmcgPSBub2RlVmFyeWluZztcblxuXHRcdH1cblxuXHRcdHJldHVybiBub2RlVmFyeWluZztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIE5vZGVDb2RlfSBmb3IgdGhlIGdpdmVuIGNvZGUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtDb2RlTm9kZX0gbm9kZSAtIFRoZSBjb2RlIG5vZGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIG5vZGUgdHlwZS5cblx0ICogQHBhcmFtIHsoJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZSd8J2FueScpfSBbc2hhZGVyU3RhZ2U9dGhpcy5zaGFkZXJTdGFnZV0gLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtOb2RlQ29kZX0gVGhlIG5vZGUgY29kZS5cblx0ICovXG5cdGdldENvZGVGcm9tTm9kZSggbm9kZSwgdHlwZSwgc2hhZGVyU3RhZ2UgPSB0aGlzLnNoYWRlclN0YWdlICkge1xuXG5cdFx0Y29uc3Qgbm9kZURhdGEgPSB0aGlzLmdldERhdGFGcm9tTm9kZSggbm9kZSApO1xuXG5cdFx0bGV0IG5vZGVDb2RlID0gbm9kZURhdGEuY29kZTtcblxuXHRcdGlmICggbm9kZUNvZGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgY29kZXMgPSB0aGlzLmNvZGVzWyBzaGFkZXJTdGFnZSBdIHx8ICggdGhpcy5jb2Rlc1sgc2hhZGVyU3RhZ2UgXSA9IFtdICk7XG5cdFx0XHRjb25zdCBpbmRleCA9IGNvZGVzLmxlbmd0aDtcblxuXHRcdFx0bm9kZUNvZGUgPSBuZXcgTm9kZUNvZGUoICdub2RlQ29kZScgKyBpbmRleCwgdHlwZSApO1xuXG5cdFx0XHRjb2Rlcy5wdXNoKCBub2RlQ29kZSApO1xuXG5cdFx0XHRub2RlRGF0YS5jb2RlID0gbm9kZUNvZGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbm9kZUNvZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgY29kZSBmbG93IGJhc2VkIG9uIHRoZSBjb2RlLWJsb2NrIGhpZXJhcmNoeS5cblxuXHQgKiBUaGlzIGlzIHVzZWQgc28gdGhhdCBjb2RlLWJsb2NrcyBsaWtlIElmLEVsc2UgY3JlYXRlIHRoZWlyIHZhcmlhYmxlcyBsb2NhbGx5IGlmIHRoZSBOb2RlXG5cdCAqIGlzIG9ubHkgdXNlZCBpbnNpZGUgb25lIG9mIHRoZXNlIGNvbmRpdGlvbmFscyBpbiB0aGUgY3VycmVudCBzaGFkZXIgc3RhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRvIGFkZC5cblx0ICogQHBhcmFtIHtOb2RlfSBub2RlQmxvY2sgLSBOb2RlLWJhc2VkIGNvZGUtYmxvY2suIFVzdWFsbHkgJ0NvbmRpdGlvbmFsTm9kZScuXG5cdCAqL1xuXHRhZGRGbG93Q29kZUhpZXJhcmNoeSggbm9kZSwgbm9kZUJsb2NrICkge1xuXG5cdFx0Y29uc3QgeyBmbG93Q29kZXMsIGZsb3dDb2RlQmxvY2sgfSA9IHRoaXMuZ2V0RGF0YUZyb21Ob2RlKCBub2RlICk7XG5cblx0XHRsZXQgbmVlZHNGbG93Q29kZSA9IHRydWU7XG5cdFx0bGV0IG5vZGVCbG9ja0hpZXJhcmNoeSA9IG5vZGVCbG9jaztcblxuXHRcdHdoaWxlICggbm9kZUJsb2NrSGllcmFyY2h5ICkge1xuXG5cdFx0XHRpZiAoIGZsb3dDb2RlQmxvY2suZ2V0KCBub2RlQmxvY2tIaWVyYXJjaHkgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRuZWVkc0Zsb3dDb2RlID0gZmFsc2U7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdG5vZGVCbG9ja0hpZXJhcmNoeSA9IHRoaXMuZ2V0RGF0YUZyb21Ob2RlKCBub2RlQmxvY2tIaWVyYXJjaHkgKS5wYXJlbnROb2RlQmxvY2s7XG5cblx0XHR9XG5cblx0XHRpZiAoIG5lZWRzRmxvd0NvZGUgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IGZsb3dDb2RlIG9mIGZsb3dDb2RlcyApIHtcblxuXHRcdFx0XHR0aGlzLmFkZExpbmVGbG93Q29kZSggZmxvd0NvZGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQWRkIGEgaW5saW5lLWNvZGUgdG8gdGhlIGN1cnJlbnQgZmxvdyBjb2RlLWJsb2NrLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSB0byBhZGQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gVGhlIGNvZGUgdG8gYWRkLlxuXHQgKiBAcGFyYW0ge05vZGV9IG5vZGVCbG9jayAtIEN1cnJlbnQgQ29uZGl0aW9uYWxOb2RlXG5cdCAqL1xuXHRhZGRMaW5lRmxvd0NvZGVCbG9jayggbm9kZSwgY29kZSwgbm9kZUJsb2NrICkge1xuXG5cdFx0Y29uc3Qgbm9kZURhdGEgPSB0aGlzLmdldERhdGFGcm9tTm9kZSggbm9kZSApO1xuXHRcdGNvbnN0IGZsb3dDb2RlcyA9IG5vZGVEYXRhLmZsb3dDb2RlcyB8fCAoIG5vZGVEYXRhLmZsb3dDb2RlcyA9IFtdICk7XG5cdFx0Y29uc3QgY29kZUJsb2NrID0gbm9kZURhdGEuZmxvd0NvZGVCbG9jayB8fCAoIG5vZGVEYXRhLmZsb3dDb2RlQmxvY2sgPSBuZXcgV2Vha01hcCgpICk7XG5cblx0XHRmbG93Q29kZXMucHVzaCggY29kZSApO1xuXHRcdGNvZGVCbG9jay5zZXQoIG5vZGVCbG9jaywgdHJ1ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkIGEgaW5saW5lLWNvZGUgdG8gdGhlIGN1cnJlbnQgZmxvdy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSBUaGUgY29kZSB0byBhZGQuXG5cdCAqIEBwYXJhbSB7P05vZGV9IFtub2RlPSBudWxsXSAtIE9wdGlvbmFsIE5vZGUsIGNhbiBoZWxwIHRoZSBzeXN0ZW0gdW5kZXJzdGFuZCBpZiB0aGUgTm9kZSBpcyBwYXJ0IG9mIGEgY29kZS1ibG9jay5cblx0ICogQHJldHVybiB7Tm9kZUJ1aWxkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0YWRkTGluZUZsb3dDb2RlKCBjb2RlLCBub2RlID0gbnVsbCApIHtcblxuXHRcdGlmICggY29kZSA9PT0gJycgKSByZXR1cm4gdGhpcztcblxuXHRcdGlmICggbm9kZSAhPT0gbnVsbCAmJiB0aGlzLmNvbnRleHQubm9kZUJsb2NrICkge1xuXG5cdFx0XHR0aGlzLmFkZExpbmVGbG93Q29kZUJsb2NrKCBub2RlLCBjb2RlLCB0aGlzLmNvbnRleHQubm9kZUJsb2NrICk7XG5cblx0XHR9XG5cblx0XHRjb2RlID0gdGhpcy50YWIgKyBjb2RlO1xuXG5cdFx0aWYgKCAhIC87XFxzKiQvLnRlc3QoIGNvZGUgKSApIHtcblxuXHRcdFx0Y29kZSA9IGNvZGUgKyAnO1xcbic7XG5cblx0XHR9XG5cblx0XHR0aGlzLmZsb3cuY29kZSArPSBjb2RlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgY29kZSB0byB0aGUgY3VycmVudCBjb2RlIGZsb3cuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIC0gU2hhZGVyIGNvZGUuXG5cdCAqIEByZXR1cm4ge05vZGVCdWlsZGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUgYnVpbGRlci5cblx0ICovXG5cdGFkZEZsb3dDb2RlKCBjb2RlICkge1xuXG5cdFx0dGhpcy5mbG93LmNvZGUgKz0gY29kZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkIHRhYiBpbiB0aGUgY29kZSB0aGF0IHdpbGwgYmUgZ2VuZXJhdGVkIHNvIHRoYXQgb3RoZXIgc25pcHBldHMgcmVzcGVjdCB0aGUgY3VycmVudCB0YWJ1bGF0aW9uLlxuXHQgKiBUeXBpY2FsbHkgdXNlZCBpbiBjb2RlcyB3aXRoIElmLEVsc2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge05vZGVCdWlsZGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUgYnVpbGRlci5cblx0ICovXG5cdGFkZEZsb3dUYWIoKSB7XG5cblx0XHR0aGlzLnRhYiArPSAnXFx0JztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhIHRhYi5cblx0ICpcblx0ICogQHJldHVybiB7Tm9kZUJ1aWxkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0cmVtb3ZlRmxvd1RhYigpIHtcblxuXHRcdHRoaXMudGFiID0gdGhpcy50YWIuc2xpY2UoIDAsIC0gMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjdXJyZW50IGZsb3cgZGF0YSBiYXNlZCBvbiBhIE5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIE5vZGUgdGhhdCB0aGUgZmxvdyB3YXMgc3RhcnRlZC5cblx0ICogQHBhcmFtIHsoJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZSd8J2FueScpfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIGZsb3cgZGF0YS5cblx0ICovXG5cdGdldEZsb3dEYXRhKCBub2RlLyosIHNoYWRlclN0YWdlKi8gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5mbG93c0RhdGEuZ2V0KCBub2RlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlcyB0aGUgbm9kZSBmbG93IGJhc2VkIG9uIGEgcm9vdCBub2RlIHRvIGdlbmVyYXRlIHRoZSBmaW5hbCBzaGFkZXIgY29kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdG8gZXhlY3V0ZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgY29kZSBmbG93LlxuXHQgKi9cblx0Zmxvd05vZGUoIG5vZGUgKSB7XG5cblx0XHRjb25zdCBvdXRwdXQgPSBub2RlLmdldE5vZGVUeXBlKCB0aGlzICk7XG5cblx0XHRjb25zdCBmbG93RGF0YSA9IHRoaXMuZmxvd0NoaWxkTm9kZSggbm9kZSwgb3V0cHV0ICk7XG5cblx0XHR0aGlzLmZsb3dzRGF0YS5zZXQoIG5vZGUsIGZsb3dEYXRhICk7XG5cblx0XHRyZXR1cm4gZmxvd0RhdGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbmNsdWRlcyBhIG5vZGUgaW4gdGhlIGN1cnJlbnQgZnVuY3Rpb24gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdG8gaW5jbHVkZS5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRhZGRJbmNsdWRlKCBub2RlICkge1xuXG5cdFx0aWYgKCB0aGlzLmN1cnJlbnRGdW5jdGlvbk5vZGUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY3VycmVudEZ1bmN0aW9uTm9kZS5pbmNsdWRlcy5wdXNoKCBub2RlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBuYXRpdmUgc2hhZGVyIG9wZXJhdG9yIG5hbWUgZm9yIGEgZ2l2ZW4gZ2VuZXJpYyBuYW1lLlxuXHQgKiBJdCBpcyBhIHNpbWlsYXIgdHlwZSBvZiBtZXRob2QgbGlrZSB7QGxpbmsgTm9kZUJ1aWxkZXIjZ2V0TWV0aG9kfS5cblx0ICpcblx0ICogQHBhcmFtIHtTaGFkZXJOb2RlSW50ZXJuYWx9IHNoYWRlck5vZGUgLSBUaGUgc2hhZGVyIG5vZGUgdG8gYnVpbGQgdGhlIGZ1bmN0aW9uIG5vZGUgd2l0aC5cblx0ICogQHJldHVybiB7RnVuY3Rpb25Ob2RlfSBUaGUgYnVpbGQgZnVuY3Rpb24gbm9kZS5cblx0ICovXG5cdGJ1aWxkRnVuY3Rpb25Ob2RlKCBzaGFkZXJOb2RlICkge1xuXG5cdFx0Y29uc3QgZm4gPSBuZXcgRnVuY3Rpb25Ob2RlKCk7XG5cblx0XHRjb25zdCBwcmV2aW91cyA9IHRoaXMuY3VycmVudEZ1bmN0aW9uTm9kZTtcblxuXHRcdHRoaXMuY3VycmVudEZ1bmN0aW9uTm9kZSA9IGZuO1xuXG5cdFx0Zm4uY29kZSA9IHRoaXMuYnVpbGRGdW5jdGlvbkNvZGUoIHNoYWRlck5vZGUgKTtcblxuXHRcdHRoaXMuY3VycmVudEZ1bmN0aW9uTm9kZSA9IHByZXZpb3VzO1xuXG5cdFx0cmV0dXJuIGZuO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgY29kZSBmbG93IGJhc2VkIG9uIGEgVFNMIGZ1bmN0aW9uOiBGbigpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NoYWRlck5vZGVJbnRlcm5hbH0gc2hhZGVyTm9kZSAtIEEgZnVuY3Rpb24gY29kZSB3aWxsIGJlIGdlbmVyYXRlZCBiYXNlZCBvbiB0aGUgaW5wdXQuXG5cdCAqIEByZXR1cm4ge09iamVjdH1cblx0ICovXG5cdGZsb3dTaGFkZXJOb2RlKCBzaGFkZXJOb2RlICkge1xuXG5cdFx0Y29uc3QgbGF5b3V0ID0gc2hhZGVyTm9kZS5sYXlvdXQ7XG5cblx0XHRjb25zdCBpbnB1dHMgPSB7XG5cdFx0XHRbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRcdGNvbnN0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXMoIHRoaXMgKTtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRuZXh0OiAoKSA9PiAoIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZXNbIGluZGV4IF0sXG5cdFx0XHRcdFx0XHRkb25lOiBpbmRleCArKyA+PSB2YWx1ZXMubGVuZ3RoXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Zm9yICggY29uc3QgaW5wdXQgb2YgbGF5b3V0LmlucHV0cyApIHtcblxuXHRcdFx0aW5wdXRzWyBpbnB1dC5uYW1lIF0gPSBuZXcgUGFyYW1ldGVyTm9kZSggaW5wdXQudHlwZSwgaW5wdXQubmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHNoYWRlck5vZGUubGF5b3V0ID0gbnVsbDtcblxuXHRcdGNvbnN0IGNhbGxOb2RlID0gc2hhZGVyTm9kZS5jYWxsKCBpbnB1dHMgKTtcblx0XHRjb25zdCBmbG93RGF0YSA9IHRoaXMuZmxvd1N0YWdlc05vZGUoIGNhbGxOb2RlLCBsYXlvdXQudHlwZSApO1xuXG5cdFx0c2hhZGVyTm9kZS5sYXlvdXQgPSBsYXlvdXQ7XG5cblx0XHRyZXR1cm4gZmxvd0RhdGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSdW5zIHRoZSBub2RlIGZsb3cgdGhyb3VnaCBhbGwgdGhlIHN0ZXBzIG9mIGNyZWF0aW9uLCAnc2V0dXAnLCAnYW5hbHl6ZScsICdnZW5lcmF0ZScuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRvIGV4ZWN1dGUuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gb3V0cHV0IC0gRXhwZWN0ZWQgb3V0cHV0IHR5cGUuIEZvciBleGFtcGxlICd2ZWMzJy5cblx0ICogQHJldHVybiB7T2JqZWN0fVxuXHQgKi9cblx0Zmxvd1N0YWdlc05vZGUoIG5vZGUsIG91dHB1dCA9IG51bGwgKSB7XG5cblx0XHRjb25zdCBwcmV2aW91c0Zsb3cgPSB0aGlzLmZsb3c7XG5cdFx0Y29uc3QgcHJldmlvdXNWYXJzID0gdGhpcy52YXJzO1xuXHRcdGNvbnN0IHByZXZpb3VzQ2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRcdGNvbnN0IHByZXZpb3VzQnVpbGRTdGFnZSA9IHRoaXMuYnVpbGRTdGFnZTtcblx0XHRjb25zdCBwcmV2aW91c1N0YWNrID0gdGhpcy5zdGFjaztcblxuXHRcdGNvbnN0IGZsb3cgPSB7XG5cdFx0XHRjb2RlOiAnJ1xuXHRcdH07XG5cblx0XHR0aGlzLmZsb3cgPSBmbG93O1xuXHRcdHRoaXMudmFycyA9IHt9O1xuXHRcdHRoaXMuY2FjaGUgPSBuZXcgTm9kZUNhY2hlKCk7XG5cdFx0dGhpcy5zdGFjayA9IHN0YWNrKCk7XG5cblx0XHRmb3IgKCBjb25zdCBidWlsZFN0YWdlIG9mIGRlZmF1bHRCdWlsZFN0YWdlcyApIHtcblxuXHRcdFx0dGhpcy5zZXRCdWlsZFN0YWdlKCBidWlsZFN0YWdlICk7XG5cblx0XHRcdGZsb3cucmVzdWx0ID0gbm9kZS5idWlsZCggdGhpcywgb3V0cHV0ICk7XG5cblx0XHR9XG5cblx0XHRmbG93LnZhcnMgPSB0aGlzLmdldFZhcnMoIHRoaXMuc2hhZGVyU3RhZ2UgKTtcblxuXHRcdHRoaXMuZmxvdyA9IHByZXZpb3VzRmxvdztcblx0XHR0aGlzLnZhcnMgPSBwcmV2aW91c1ZhcnM7XG5cdFx0dGhpcy5jYWNoZSA9IHByZXZpb3VzQ2FjaGU7XG5cdFx0dGhpcy5zdGFjayA9IHByZXZpb3VzU3RhY2s7XG5cblx0XHR0aGlzLnNldEJ1aWxkU3RhZ2UoIHByZXZpb3VzQnVpbGRTdGFnZSApO1xuXG5cdFx0cmV0dXJuIGZsb3c7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBuYXRpdmUgc2hhZGVyIG9wZXJhdG9yIG5hbWUgZm9yIGEgZ2l2ZW4gZ2VuZXJpYyBuYW1lLlxuXHQgKiBJdCBpcyBhIHNpbWlsYXIgdHlwZSBvZiBtZXRob2QgbGlrZSB7QGxpbmsgTm9kZUJ1aWxkZXIjZ2V0TWV0aG9kfS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBvcCAtIFRoZSBvcGVyYXRvciBuYW1lIHRvIHJlc29sdmUuXG5cdCAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSByZXNvbHZlZCBvcGVyYXRvciBuYW1lLlxuXHQgKi9cblx0Z2V0RnVuY3Rpb25PcGVyYXRvciggLyogb3AgKi8gKSB7XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIGNvZGUgZmxvdyBiYXNlZCBvbiBhIGNoaWxkIE5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRvIGV4ZWN1dGUuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gb3V0cHV0IC0gRXhwZWN0ZWQgb3V0cHV0IHR5cGUuIEZvciBleGFtcGxlICd2ZWMzJy5cblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgY29kZSBmbG93LlxuXHQgKi9cblx0Zmxvd0NoaWxkTm9kZSggbm9kZSwgb3V0cHV0ID0gbnVsbCApIHtcblxuXHRcdGNvbnN0IHByZXZpb3VzRmxvdyA9IHRoaXMuZmxvdztcblxuXHRcdGNvbnN0IGZsb3cgPSB7XG5cdFx0XHRjb2RlOiAnJ1xuXHRcdH07XG5cblx0XHR0aGlzLmZsb3cgPSBmbG93O1xuXG5cdFx0Zmxvdy5yZXN1bHQgPSBub2RlLmJ1aWxkKCB0aGlzLCBvdXRwdXQgKTtcblxuXHRcdHRoaXMuZmxvdyA9IHByZXZpb3VzRmxvdztcblxuXHRcdHJldHVybiBmbG93O1xuXG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZXMgYSBmbG93IG9mIGNvZGUgaW4gYSBkaWZmZXJlbnQgc3RhZ2UuXG5cdCAqXG5cdCAqIFNvbWUgbm9kZXMgbGlrZSBgdmFyeWluZygpYCBoYXZlIHRoZSBhYmlsaXR5IHRvIGNvbXB1dGUgY29kZSBpbiB2ZXJ0ZXgtc3RhZ2UgYW5kXG5cdCAqIHJldHVybiB0aGUgdmFsdWUgaW4gZnJhZ21lbnQtc3RhZ2UgZXZlbiBpZiBpdCBpcyBiZWluZyBleGVjdXRlZCBpbiBhbiBpbnB1dCBmcmFnbWVudC5cblx0ICpcblx0ICogQHBhcmFtIHsoJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZSd8J2FueScpfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBub2RlIHRvIGV4ZWN1dGUuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gb3V0cHV0IC0gRXhwZWN0ZWQgb3V0cHV0IHR5cGUuIEZvciBleGFtcGxlICd2ZWMzJy5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBwcm9wZXJ0eU5hbWUgLSBUaGUgcHJvcGVydHkgbmFtZSB0byBhc3NpZ24gdGhlIHJlc3VsdC5cblx0ICogQHJldHVybiB7T2JqZWN0fVxuXHQgKi9cblx0Zmxvd05vZGVGcm9tU2hhZGVyU3RhZ2UoIHNoYWRlclN0YWdlLCBub2RlLCBvdXRwdXQgPSBudWxsLCBwcm9wZXJ0eU5hbWUgPSBudWxsICkge1xuXG5cdFx0Y29uc3QgcHJldmlvdXNTaGFkZXJTdGFnZSA9IHRoaXMuc2hhZGVyU3RhZ2U7XG5cblx0XHR0aGlzLnNldFNoYWRlclN0YWdlKCBzaGFkZXJTdGFnZSApO1xuXG5cdFx0Y29uc3QgZmxvd0RhdGEgPSB0aGlzLmZsb3dDaGlsZE5vZGUoIG5vZGUsIG91dHB1dCApO1xuXG5cdFx0aWYgKCBwcm9wZXJ0eU5hbWUgIT09IG51bGwgKSB7XG5cblx0XHRcdGZsb3dEYXRhLmNvZGUgKz0gYCR7IHRoaXMudGFiICsgcHJvcGVydHlOYW1lIH0gPSAkeyBmbG93RGF0YS5yZXN1bHQgfTtcXG5gO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5mbG93Q29kZVsgc2hhZGVyU3RhZ2UgXSA9IHRoaXMuZmxvd0NvZGVbIHNoYWRlclN0YWdlIF0gKyBmbG93RGF0YS5jb2RlO1xuXG5cdFx0dGhpcy5zZXRTaGFkZXJTdGFnZSggcHJldmlvdXNTaGFkZXJTdGFnZSApO1xuXG5cdFx0cmV0dXJuIGZsb3dEYXRhO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSBob2xkaW5nIGFsbCBub2RlIGF0dHJpYnV0ZXMgb2YgdGhpcyBub2RlIGJ1aWxkZXIuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0FycmF5PE5vZGVBdHRyaWJ1dGU+fSBUaGUgbm9kZSBhdHRyaWJ1dGVzIG9mIHRoaXMgYnVpbGRlci5cblx0ICovXG5cdGdldEF0dHJpYnV0ZXNBcnJheSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuY29uY2F0KCB0aGlzLmJ1ZmZlckF0dHJpYnV0ZXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGF0dHJpYnV0ZSBkZWZpbml0aW9ucyBhcyBhIHNoYWRlciBzdHJpbmcgZm9yIHRoZSBnaXZlbiBzaGFkZXIgc3RhZ2UuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0geygndmVydGV4J3wnZnJhZ21lbnQnfCdjb21wdXRlJ3wnYW55Jyl9IHNoYWRlclN0YWdlIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgYXR0cmlidXRlIGNvZGUgc2VjdGlvbi5cblx0ICovXG5cdGdldEF0dHJpYnV0ZXMoIC8qc2hhZGVyU3RhZ2UqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ0Fic3RyYWN0IGZ1bmN0aW9uLicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZhcnlpbmcgZGVmaW5pdGlvbnMgYXMgYSBzaGFkZXIgc3RyaW5nIGZvciB0aGUgZ2l2ZW4gc2hhZGVyIHN0YWdlLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHsoJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZSd8J2FueScpfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZhcnlpbmcgY29kZSBzZWN0aW9uLlxuXHQgKi9cblx0Z2V0VmFyeWluZ3MoIC8qc2hhZGVyU3RhZ2UqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ0Fic3RyYWN0IGZ1bmN0aW9uLicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBzaW5nbGUgdmFyaWFibGUgZGVmaW5pdGlvbiBhcyBhIHNoYWRlciBzdHJpbmcgZm9yIHRoZSBnaXZlbiB2YXJpYWJsZSB0eXBlIGFuZCBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB2YXJpYWJsZSdzIHR5cGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHZhcmlhYmxlJ3MgbmFtZS5cblx0ICogQHBhcmFtIHs/bnVtYmVyfSBbY291bnQ9bnVsbF0gLSBUaGUgYXJyYXkgbGVuZ3RoLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzaGFkZXIgc3RyaW5nLlxuXHQgKi9cblx0Z2V0VmFyKCB0eXBlLCBuYW1lLCBjb3VudCA9IG51bGwgKSB7XG5cblx0XHRyZXR1cm4gYCR7IGNvdW50ICE9PSBudWxsID8gdGhpcy5nZW5lcmF0ZUFycmF5RGVjbGFyYXRpb24oIHR5cGUsIGNvdW50ICkgOiB0aGlzLmdldFR5cGUoIHR5cGUgKSB9ICR7IG5hbWUgfWA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2YXJpYWJsZSBkZWZpbml0aW9ucyBhcyBhIHNoYWRlciBzdHJpbmcgZm9yIHRoZSBnaXZlbiBzaGFkZXIgc3RhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KCd2ZXJ0ZXgnfCdmcmFnbWVudCd8J2NvbXB1dGUnfCdhbnknKX0gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB2YXJpYWJsZSBjb2RlIHNlY3Rpb24uXG5cdCAqL1xuXHRnZXRWYXJzKCBzaGFkZXJTdGFnZSApIHtcblxuXHRcdGxldCBzbmlwcGV0ID0gJyc7XG5cblx0XHRjb25zdCB2YXJzID0gdGhpcy52YXJzWyBzaGFkZXJTdGFnZSBdO1xuXG5cdFx0aWYgKCB2YXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IHZhcmlhYmxlIG9mIHZhcnMgKSB7XG5cblx0XHRcdFx0c25pcHBldCArPSBgJHsgdGhpcy5nZXRWYXIoIHZhcmlhYmxlLnR5cGUsIHZhcmlhYmxlLm5hbWUgKSB9OyBgO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHVuaWZvcm0gZGVmaW5pdGlvbnMgYXMgYSBzaGFkZXIgc3RyaW5nIGZvciB0aGUgZ2l2ZW4gc2hhZGVyIHN0YWdlLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHsoJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZSd8J2FueScpfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVuaWZvcm0gY29kZSBzZWN0aW9uLlxuXHQgKi9cblx0Z2V0VW5pZm9ybXMoIC8qc2hhZGVyU3RhZ2UqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ0Fic3RyYWN0IGZ1bmN0aW9uLicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG5hdGl2ZSBjb2RlIGRlZmluaXRpb25zIGFzIGEgc2hhZGVyIHN0cmluZyBmb3IgdGhlIGdpdmVuIHNoYWRlciBzdGFnZS5cblx0ICpcblx0ICogQHBhcmFtIHsoJ3ZlcnRleCd8J2ZyYWdtZW50J3wnY29tcHV0ZSd8J2FueScpfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5hdGl2ZSBjb2RlIHNlY3Rpb24uXG5cdCAqL1xuXHRnZXRDb2Rlcyggc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRjb25zdCBjb2RlcyA9IHRoaXMuY29kZXNbIHNoYWRlclN0YWdlIF07XG5cblx0XHRsZXQgY29kZSA9ICcnO1xuXG5cdFx0aWYgKCBjb2RlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCBub2RlQ29kZSBvZiBjb2RlcyApIHtcblxuXHRcdFx0XHRjb2RlICs9IG5vZGVDb2RlLmNvZGUgKyAnXFxuJztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBoYXNoIG9mIHRoaXMgbm9kZSBidWlsZGVyLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoYXNoLlxuXHQgKi9cblx0Z2V0SGFzaCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnZlcnRleFNoYWRlciArIHRoaXMuZnJhZ21lbnRTaGFkZXIgKyB0aGlzLmNvbXB1dGVTaGFkZXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBjdXJyZW50IHNoYWRlciBzdGFnZS5cblx0ICpcblx0ICogQHBhcmFtIHs/KCd2ZXJ0ZXgnfCdmcmFnbWVudCd8J2NvbXB1dGUnfCdhbnknKX0gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlIHRvIHNldC5cblx0ICovXG5cdHNldFNoYWRlclN0YWdlKCBzaGFkZXJTdGFnZSApIHtcblxuXHRcdHRoaXMuc2hhZGVyU3RhZ2UgPSBzaGFkZXJTdGFnZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgc2hhZGVyIHN0YWdlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHs/KCd2ZXJ0ZXgnfCdmcmFnbWVudCd8J2NvbXB1dGUnfCdhbnknKX0gVGhlIGN1cnJlbnQgc2hhZGVyIHN0YWdlLlxuXHQgKi9cblx0Z2V0U2hhZGVyU3RhZ2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zaGFkZXJTdGFnZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGN1cnJlbnQgYnVpbGQgc3RhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Pygnc2V0dXAnfCdhbmFseXplJ3wnZ2VuZXJhdGUnKX0gYnVpbGRTdGFnZSAtIFRoZSBidWlsZCBzdGFnZSB0byBzZXQuXG5cdCAqL1xuXHRzZXRCdWlsZFN0YWdlKCBidWlsZFN0YWdlICkge1xuXG5cdFx0dGhpcy5idWlsZFN0YWdlID0gYnVpbGRTdGFnZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgYnVpbGQgc3RhZ2UuXG5cdCAqXG5cdCAqIEByZXR1cm4gez8oJ3NldHVwJ3wnYW5hbHl6ZSd8J2dlbmVyYXRlJyl9IFRoZSBjdXJyZW50IGJ1aWxkIHN0YWdlLlxuXHQgKi9cblx0Z2V0QnVpbGRTdGFnZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmJ1aWxkU3RhZ2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb250cm9scyB0aGUgY29kZSBidWlsZCBvZiB0aGUgc2hhZGVyIHN0YWdlcy5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqL1xuXHRidWlsZENvZGUoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdBYnN0cmFjdCBmdW5jdGlvbi4nICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDZW50cmFsIGJ1aWxkIG1ldGhvZCB3aGljaCBjb250cm9scyB0aGUgYnVpbGQgZm9yIHRoZSBnaXZlbiBvYmplY3QuXG5cdCAqXG5cdCAqIEByZXR1cm4ge05vZGVCdWlsZGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIG5vZGUgYnVpbGRlci5cblx0ICovXG5cdGJ1aWxkKCkge1xuXG5cdFx0Y29uc3QgeyBvYmplY3QsIG1hdGVyaWFsLCByZW5kZXJlciB9ID0gdGhpcztcblxuXHRcdGlmICggbWF0ZXJpYWwgIT09IG51bGwgKSB7XG5cblx0XHRcdGxldCBub2RlTWF0ZXJpYWwgPSByZW5kZXJlci5saWJyYXJ5LmZyb21NYXRlcmlhbCggbWF0ZXJpYWwgKTtcblxuXHRcdFx0aWYgKCBub2RlTWF0ZXJpYWwgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggYE5vZGVNYXRlcmlhbDogTWF0ZXJpYWwgXCIkeyBtYXRlcmlhbC50eXBlIH1cIiBpcyBub3QgY29tcGF0aWJsZS5gICk7XG5cblx0XHRcdFx0bm9kZU1hdGVyaWFsID0gbmV3IE5vZGVNYXRlcmlhbCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdG5vZGVNYXRlcmlhbC5idWlsZCggdGhpcyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5hZGRGbG93KCAnY29tcHV0ZScsIG9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2V0dXAoKSAtPiBzdGFnZSAxOiBjcmVhdGUgcG9zc2libGUgbmV3IG5vZGVzIGFuZCByZXR1cm5zIGFuIG91dHB1dCByZWZlcmVuY2Ugbm9kZVxuXHRcdC8vIGFuYWx5emUoKSAgIC0+IHN0YWdlIDI6IGFuYWx5emUgbm9kZXMgdG8gcG9zc2libGUgb3B0aW1pemF0aW9uIGFuZCB2YWxpZGF0aW9uXG5cdFx0Ly8gZ2VuZXJhdGUoKSAgLT4gc3RhZ2UgMzogZ2VuZXJhdGUgc2hhZGVyXG5cblx0XHRmb3IgKCBjb25zdCBidWlsZFN0YWdlIG9mIGRlZmF1bHRCdWlsZFN0YWdlcyApIHtcblxuXHRcdFx0dGhpcy5zZXRCdWlsZFN0YWdlKCBidWlsZFN0YWdlICk7XG5cblx0XHRcdGlmICggdGhpcy5jb250ZXh0LnZlcnRleCAmJiB0aGlzLmNvbnRleHQudmVydGV4LmlzTm9kZSApIHtcblxuXHRcdFx0XHR0aGlzLmZsb3dOb2RlRnJvbVNoYWRlclN0YWdlKCAndmVydGV4JywgdGhpcy5jb250ZXh0LnZlcnRleCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGNvbnN0IHNoYWRlclN0YWdlIG9mIHNoYWRlclN0YWdlcyApIHtcblxuXHRcdFx0XHR0aGlzLnNldFNoYWRlclN0YWdlKCBzaGFkZXJTdGFnZSApO1xuXG5cdFx0XHRcdGNvbnN0IGZsb3dOb2RlcyA9IHRoaXMuZmxvd05vZGVzWyBzaGFkZXJTdGFnZSBdO1xuXG5cdFx0XHRcdGZvciAoIGNvbnN0IG5vZGUgb2YgZmxvd05vZGVzICkge1xuXG5cdFx0XHRcdFx0aWYgKCBidWlsZFN0YWdlID09PSAnZ2VuZXJhdGUnICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLmZsb3dOb2RlKCBub2RlICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRub2RlLmJ1aWxkKCB0aGlzICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldEJ1aWxkU3RhZ2UoIG51bGwgKTtcblx0XHR0aGlzLnNldFNoYWRlclN0YWdlKCBudWxsICk7XG5cblx0XHQvLyBzdGFnZSA0OiBidWlsZCBjb2RlIGZvciBhIHNwZWNpZmljIG91dHB1dFxuXG5cdFx0dGhpcy5idWlsZENvZGUoKTtcblx0XHR0aGlzLmJ1aWxkVXBkYXRlTm9kZXMoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHVuaWZvcm0gcmVwcmVzZW50YXRpb24gd2hpY2ggaXMgbGF0ZXIgdXNlZCBmb3IgVUJPIGdlbmVyYXRpb24gYW5kIHJlbmRlcmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlVW5pZm9ybX0gdW5pZm9ybU5vZGUgLSBUaGUgdW5pZm9ybSBub2RlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSByZXF1ZXN0ZWQgdHlwZS5cblx0ICogQHJldHVybiB7VW5pZm9ybX0gVGhlIHVuaWZvcm0uXG5cdCAqL1xuXHRnZXROb2RlVW5pZm9ybSggdW5pZm9ybU5vZGUsIHR5cGUgKSB7XG5cblx0XHRpZiAoIHR5cGUgPT09ICdmbG9hdCcgfHwgdHlwZSA9PT0gJ2ludCcgfHwgdHlwZSA9PT0gJ3VpbnQnICkgcmV0dXJuIG5ldyBOdW1iZXJOb2RlVW5pZm9ybSggdW5pZm9ybU5vZGUgKTtcblx0XHRpZiAoIHR5cGUgPT09ICd2ZWMyJyB8fCB0eXBlID09PSAnaXZlYzInIHx8IHR5cGUgPT09ICd1dmVjMicgKSByZXR1cm4gbmV3IFZlY3RvcjJOb2RlVW5pZm9ybSggdW5pZm9ybU5vZGUgKTtcblx0XHRpZiAoIHR5cGUgPT09ICd2ZWMzJyB8fCB0eXBlID09PSAnaXZlYzMnIHx8IHR5cGUgPT09ICd1dmVjMycgKSByZXR1cm4gbmV3IFZlY3RvcjNOb2RlVW5pZm9ybSggdW5pZm9ybU5vZGUgKTtcblx0XHRpZiAoIHR5cGUgPT09ICd2ZWM0JyB8fCB0eXBlID09PSAnaXZlYzQnIHx8IHR5cGUgPT09ICd1dmVjNCcgKSByZXR1cm4gbmV3IFZlY3RvcjROb2RlVW5pZm9ybSggdW5pZm9ybU5vZGUgKTtcblx0XHRpZiAoIHR5cGUgPT09ICdjb2xvcicgKSByZXR1cm4gbmV3IENvbG9yTm9kZVVuaWZvcm0oIHVuaWZvcm1Ob2RlICk7XG5cdFx0aWYgKCB0eXBlID09PSAnbWF0MicgKSByZXR1cm4gbmV3IE1hdHJpeDJOb2RlVW5pZm9ybSggdW5pZm9ybU5vZGUgKTtcblx0XHRpZiAoIHR5cGUgPT09ICdtYXQzJyApIHJldHVybiBuZXcgTWF0cml4M05vZGVVbmlmb3JtKCB1bmlmb3JtTm9kZSApO1xuXHRcdGlmICggdHlwZSA9PT0gJ21hdDQnICkgcmV0dXJuIG5ldyBNYXRyaXg0Tm9kZVVuaWZvcm0oIHVuaWZvcm1Ob2RlICk7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoIGBVbmlmb3JtIFwiJHt0eXBlfVwiIG5vdCBkZWNsYXJlZC5gICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGb3JtYXRzIHRoZSBnaXZlbiBzaGFkZXIgc25pcHBldCBmcm9tIGEgZ2l2ZW4gdHlwZSBpbnRvIGFub3RoZXIgb25lLiBFLmcuXG5cdCAqIHRoaXMgbWV0aG9kIG1pZ2h0IGJlIHVzZWQgdG8gY29udmVydCBhIHNpbXBsZSBmbG9hdCBzdHJpbmcgYFwiMS4wXCJgIGludG8gYVxuXHQgKiBgdmVjM2AgcmVwcmVzZW50YXRpb246IGBcInZlYzM8ZjMyPiggMS4wIClcImAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzbmlwcGV0IC0gVGhlIHNoYWRlciBzbmlwcGV0LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZnJvbVR5cGUgLSBUaGUgc291cmNlIHR5cGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0b1R5cGUgLSBUaGUgdGFyZ2V0IHR5cGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVwZGF0ZWQgc2hhZGVyIHN0cmluZy5cblx0ICovXG5cdGZvcm1hdCggc25pcHBldCwgZnJvbVR5cGUsIHRvVHlwZSApIHtcblxuXHRcdGZyb21UeXBlID0gdGhpcy5nZXRWZWN0b3JUeXBlKCBmcm9tVHlwZSApO1xuXHRcdHRvVHlwZSA9IHRoaXMuZ2V0VmVjdG9yVHlwZSggdG9UeXBlICk7XG5cblx0XHRpZiAoIGZyb21UeXBlID09PSB0b1R5cGUgfHwgdG9UeXBlID09PSBudWxsIHx8IHRoaXMuaXNSZWZlcmVuY2UoIHRvVHlwZSApICkge1xuXG5cdFx0XHRyZXR1cm4gc25pcHBldDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGZyb21UeXBlTGVuZ3RoID0gdGhpcy5nZXRUeXBlTGVuZ3RoKCBmcm9tVHlwZSApO1xuXHRcdGNvbnN0IHRvVHlwZUxlbmd0aCA9IHRoaXMuZ2V0VHlwZUxlbmd0aCggdG9UeXBlICk7XG5cblx0XHRpZiAoIGZyb21UeXBlTGVuZ3RoID09PSAxNiAmJiB0b1R5cGVMZW5ndGggPT09IDkgKSB7XG5cblx0XHRcdHJldHVybiBgJHsgdGhpcy5nZXRUeXBlKCB0b1R5cGUgKSB9KCR7IHNuaXBwZXQgfVswXS54eXosICR7IHNuaXBwZXQgfVsxXS54eXosICR7IHNuaXBwZXQgfVsyXS54eXopYDtcblxuXHRcdH1cblxuXHRcdGlmICggZnJvbVR5cGVMZW5ndGggPT09IDkgJiYgdG9UeXBlTGVuZ3RoID09PSA0ICkge1xuXG5cdFx0XHRyZXR1cm4gYCR7IHRoaXMuZ2V0VHlwZSggdG9UeXBlICkgfSgkeyBzbmlwcGV0IH1bMF0ueHksICR7IHNuaXBwZXQgfVsxXS54eSlgO1xuXG5cdFx0fVxuXG5cblx0XHRpZiAoIGZyb21UeXBlTGVuZ3RoID4gNCApIHsgLy8gZnJvbVR5cGUgaXMgbWF0cml4LWxpa2VcblxuXHRcdFx0Ly8gQFRPRE86IGlnbm9yZSBmb3Igbm93XG5cblx0XHRcdHJldHVybiBzbmlwcGV0O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0b1R5cGVMZW5ndGggPiA0IHx8IHRvVHlwZUxlbmd0aCA9PT0gMCApIHsgLy8gdG9UeXBlIGlzIG1hdHJpeC1saWtlIG9yIHVua25vd25cblxuXHRcdFx0Ly8gQFRPRE86IGlnbm9yZSBmb3Igbm93XG5cblx0XHRcdHJldHVybiBzbmlwcGV0O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBmcm9tVHlwZUxlbmd0aCA9PT0gdG9UeXBlTGVuZ3RoICkge1xuXG5cdFx0XHRyZXR1cm4gYCR7IHRoaXMuZ2V0VHlwZSggdG9UeXBlICkgfSggJHsgc25pcHBldCB9IClgO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBmcm9tVHlwZUxlbmd0aCA+IHRvVHlwZUxlbmd0aCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZm9ybWF0KCBgJHsgc25pcHBldCB9LiR7ICd4eXonLnNsaWNlKCAwLCB0b1R5cGVMZW5ndGggKSB9YCwgdGhpcy5nZXRUeXBlRnJvbUxlbmd0aCggdG9UeXBlTGVuZ3RoLCB0aGlzLmdldENvbXBvbmVudFR5cGUoIGZyb21UeXBlICkgKSwgdG9UeXBlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRvVHlwZUxlbmd0aCA9PT0gNCAmJiBmcm9tVHlwZUxlbmd0aCA+IDEgKSB7IC8vIHRvVHlwZSBpcyB2ZWM0LWxpa2VcblxuXHRcdFx0cmV0dXJuIGAkeyB0aGlzLmdldFR5cGUoIHRvVHlwZSApIH0oICR7IHRoaXMuZm9ybWF0KCBzbmlwcGV0LCBmcm9tVHlwZSwgJ3ZlYzMnICkgfSwgMS4wIClgO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBmcm9tVHlwZUxlbmd0aCA9PT0gMiApIHsgLy8gZnJvbVR5cGUgaXMgdmVjMi1saWtlIGFuZCB0b1R5cGUgaXMgdmVjMy1saWtlXG5cblx0XHRcdHJldHVybiBgJHsgdGhpcy5nZXRUeXBlKCB0b1R5cGUgKSB9KCAkeyB0aGlzLmZvcm1hdCggc25pcHBldCwgZnJvbVR5cGUsICd2ZWMyJyApIH0sIDAuMCApYDtcblxuXHRcdH1cblxuXHRcdGlmICggZnJvbVR5cGVMZW5ndGggPT09IDEgJiYgdG9UeXBlTGVuZ3RoID4gMSAmJiBmcm9tVHlwZSAhPT0gdGhpcy5nZXRDb21wb25lbnRUeXBlKCB0b1R5cGUgKSApIHsgLy8gZnJvbVR5cGUgaXMgZmxvYXQtbGlrZVxuXG5cdFx0XHQvLyBjb252ZXJ0IGEgbnVtYmVyIHZhbHVlIHRvIHZlY3RvciB0eXBlLCBlLmc6XG5cdFx0XHQvLyB2ZWMzKCAxdSApIC0+IHZlYzMoIGZsb2F0KCAxdSApIClcblxuXHRcdFx0c25pcHBldCA9IGAkeyB0aGlzLmdldFR5cGUoIHRoaXMuZ2V0Q29tcG9uZW50VHlwZSggdG9UeXBlICkgKSB9KCAkeyBzbmlwcGV0IH0gKWA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYCR7IHRoaXMuZ2V0VHlwZSggdG9UeXBlICkgfSggJHsgc25pcHBldCB9IClgOyAvLyBmcm9tVHlwZSBpcyBmbG9hdC1saWtlXG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgc2lnbmF0dXJlIHdpdGggdGhlIGVuZ2luZSdzIGN1cnJlbnQgcmV2aXNpb24uXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHNpZ25hdHVyZS5cblx0ICovXG5cdGdldFNpZ25hdHVyZSgpIHtcblxuXHRcdHJldHVybiBgLy8gVGhyZWUuanMgciR7IFJFVklTSU9OIH0gLSBOb2RlIFN5c3RlbVxcbmA7XG5cblx0fVxuXG5cdC8vIERlcHJlY2F0ZWRcblxuXHQvKipcblx0ICogQGZ1bmN0aW9uXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHIxNjguIFVzZSBgbmV3IE5vZGVNYXRlcmlhbCgpYCBpbnN0ZWFkLCB3aXRoIHRhcmdldGVkIG5vZGUgbWF0ZXJpYWwgbmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlPSdOb2RlTWF0ZXJpYWwnXSAtIFRoZSBub2RlIG1hdGVyaWFsIHR5cGUuXG5cdCAqIEB0aHJvd3Mge0Vycm9yfVxuXHQgKi9cblx0Y3JlYXRlTm9kZU1hdGVyaWFsKCB0eXBlID0gJ05vZGVNYXRlcmlhbCcgKSB7IC8vIEBkZXByZWNhdGVkLCByMTY4XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoIGBUSFJFRS5Ob2RlQnVpbGRlcjogY3JlYXRlTm9kZU1hdGVyaWFsKCkgd2FzIGRlcHJlY2F0ZWQuIFVzZSBuZXcgJHsgdHlwZSB9KCkgaW5zdGVhZC5gICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVCdWlsZGVyO1xuIiwiaW1wb3J0IHsgTm9kZVVwZGF0ZVR5cGUgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogTWFuYWdlbWVudCBjbGFzcyBmb3IgdXBkYXRpbmcgbm9kZXMuIFRoZSBtb2R1bGUgdHJhY2tzIG1ldHJpY3MgbGlrZVxuICogdGhlIGVsYXBzZWQgdGltZSwgZGVsdGEgdGltZSwgdGhlIHJlbmRlciBhbmQgZnJhbWUgSUQgdG8gY29ycmVjdGx5XG4gKiBjYWxsIHRoZSBub2RlIHVwZGF0ZSBtZXRob2RzIHtAbGluayBOb2RlI3VwZGF0ZUJlZm9yZX0sIHtAbGluayBOb2RlI3VwZGF0ZX1cbiAqIGFuZCB7QGxpbmsgTm9kZSN1cGRhdGVBZnRlcn0gZGVwZW5kaW5nIG9uIHRoZSBub2RlJ3MgY29uZmlndXJhdGlvbi5cbiAqL1xuY2xhc3MgTm9kZUZyYW1lIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlIGZhbWUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBlbGFwc2VkIHRpbWUgaW4gc2Vjb25kcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMudGltZSA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGVsdGEgdGltZSBpbiBzZWNvbmRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kZWx0YVRpbWUgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGZyYW1lIElELlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5mcmFtZUlkID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXIgSUQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlcklkID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gY29udHJvbCB0aGUge0BsaW5rIE5vZGUjdXBkYXRlfSBjYWxsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1dlYWtNYXA8Tm9kZSwgT2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnVwZGF0ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIHRvIGNvbnRyb2wgdGhlIHtAbGluayBOb2RlI3VwZGF0ZUJlZm9yZX0gY2FsbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWFrTWFwPE5vZGUsIE9iamVjdD59XG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVCZWZvcmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVXNlZCB0byBjb250cm9sIHRoZSB7QGxpbmsgTm9kZSN1cGRhdGVBZnRlcn0gY2FsbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWFrTWFwPE5vZGUsIE9iamVjdD59XG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVBZnRlck1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCByZW5kZXJlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/UmVuZGVyZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucmVuZGVyZXIgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P01hdGVyaWFsfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm1hdGVyaWFsID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGNhbWVyYS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Q2FtZXJhfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNhbWVyYSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCAzRCBvYmplY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P09iamVjdDNEfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm9iamVjdCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBzY2VuZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/U2NlbmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2NlbmUgPSBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGRpY3Rpb25hcnkgZm9yIGEgZ2l2ZW4gbm9kZSBhbmQgdXBkYXRlIG1hcCB3aGljaFxuXHQgKiBpcyB1c2VkIHRvIGNvcnJlY3RseSBjYWxsIG5vZGUgdXBkYXRlIG1ldGhvZHMgcGVyIGZyYW1lIG9yIHJlbmRlci5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtXZWFrTWFwPE5vZGUsIE9iamVjdD59IHJlZmVyZW5jZU1hcCAtIFRoZSByZWZlcmVuY2Ugd2VhayBtYXAuXG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZVJlZiAtIFRoZSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZS5cblx0ICogQHJldHVybiB7T2JqZWN0PHN0cmluZyxXZWFrTWFwPn0gVGhlIGRpY3Rpb25hcnkuXG5cdCAqL1xuXHRfZ2V0TWFwcyggcmVmZXJlbmNlTWFwLCBub2RlUmVmICkge1xuXG5cdFx0bGV0IG1hcHMgPSByZWZlcmVuY2VNYXAuZ2V0KCBub2RlUmVmICk7XG5cblx0XHRpZiAoIG1hcHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bWFwcyA9IHtcblx0XHRcdFx0cmVuZGVyTWFwOiBuZXcgV2Vha01hcCgpLFxuXHRcdFx0XHRmcmFtZU1hcDogbmV3IFdlYWtNYXAoKVxuXHRcdFx0fTtcblxuXHRcdFx0cmVmZXJlbmNlTWFwLnNldCggbm9kZVJlZiwgbWFwcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcHM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBleGVjdXRlcyB0aGUge0BsaW5rIE5vZGUjdXBkYXRlQmVmb3JlfSBmb3IgdGhlIGdpdmVuIG5vZGUuXG5cdCAqIEl0IG1ha2VzIHN1cmUge0BsaW5rIE5vZGUjdXBkYXRlQmVmb3JlVHlwZX0gaXMgaG9ub3JlZCBtZWFuaW5nIHRoZSB1cGRhdGVcblx0ICogaXMgb25seSBleGVjdXRlZCBvbmNlIHBlciBmcmFtZSwgcmVuZGVyIG9yIG9iamVjdCBkZXBlbmRpbmcgb24gdGhlIHVwZGF0ZVxuXHQgKiB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSB0aGF0IHNob3VsZCBiZSB1cGRhdGVkLlxuXHQgKi9cblx0dXBkYXRlQmVmb3JlTm9kZSggbm9kZSApIHtcblxuXHRcdGNvbnN0IHVwZGF0ZVR5cGUgPSBub2RlLmdldFVwZGF0ZUJlZm9yZVR5cGUoKTtcblx0XHRjb25zdCByZWZlcmVuY2UgPSBub2RlLnVwZGF0ZVJlZmVyZW5jZSggdGhpcyApO1xuXG5cdFx0aWYgKCB1cGRhdGVUeXBlID09PSBOb2RlVXBkYXRlVHlwZS5GUkFNRSApIHtcblxuXHRcdFx0Y29uc3QgeyBmcmFtZU1hcCB9ID0gdGhpcy5fZ2V0TWFwcyggdGhpcy51cGRhdGVCZWZvcmVNYXAsIHJlZmVyZW5jZSApO1xuXG5cdFx0XHRpZiAoIGZyYW1lTWFwLmdldCggcmVmZXJlbmNlICkgIT09IHRoaXMuZnJhbWVJZCApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGUudXBkYXRlQmVmb3JlKCB0aGlzICkgIT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0ZnJhbWVNYXAuc2V0KCByZWZlcmVuY2UsIHRoaXMuZnJhbWVJZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdXBkYXRlVHlwZSA9PT0gTm9kZVVwZGF0ZVR5cGUuUkVOREVSICkge1xuXG5cdFx0XHRjb25zdCB7IHJlbmRlck1hcCB9ID0gdGhpcy5fZ2V0TWFwcyggdGhpcy51cGRhdGVCZWZvcmVNYXAsIHJlZmVyZW5jZSApO1xuXG5cdFx0XHRpZiAoIHJlbmRlck1hcC5nZXQoIHJlZmVyZW5jZSApICE9PSB0aGlzLnJlbmRlcklkICkge1xuXG5cdFx0XHRcdGlmICggbm9kZS51cGRhdGVCZWZvcmUoIHRoaXMgKSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJNYXAuc2V0KCByZWZlcmVuY2UsIHRoaXMucmVuZGVySWQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHVwZGF0ZVR5cGUgPT09IE5vZGVVcGRhdGVUeXBlLk9CSkVDVCApIHtcblxuXHRcdFx0bm9kZS51cGRhdGVCZWZvcmUoIHRoaXMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGV4ZWN1dGVzIHRoZSB7QGxpbmsgTm9kZSN1cGRhdGVBZnRlcn0gZm9yIHRoZSBnaXZlbiBub2RlLlxuXHQgKiBJdCBtYWtlcyBzdXJlIHtAbGluayBOb2RlI3VwZGF0ZUFmdGVyVHlwZX0gaXMgaG9ub3JlZCBtZWFuaW5nIHRoZSB1cGRhdGVcblx0ICogaXMgb25seSBleGVjdXRlZCBvbmNlIHBlciBmcmFtZSwgcmVuZGVyIG9yIG9iamVjdCBkZXBlbmRpbmcgb24gdGhlIHVwZGF0ZVxuXHQgKiB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgbm9kZSB0aGF0IHNob3VsZCBiZSB1cGRhdGVkLlxuXHQgKi9cblx0dXBkYXRlQWZ0ZXJOb2RlKCBub2RlICkge1xuXG5cdFx0Y29uc3QgdXBkYXRlVHlwZSA9IG5vZGUuZ2V0VXBkYXRlQWZ0ZXJUeXBlKCk7XG5cdFx0Y29uc3QgcmVmZXJlbmNlID0gbm9kZS51cGRhdGVSZWZlcmVuY2UoIHRoaXMgKTtcblxuXHRcdGlmICggdXBkYXRlVHlwZSA9PT0gTm9kZVVwZGF0ZVR5cGUuRlJBTUUgKSB7XG5cblx0XHRcdGNvbnN0IHsgZnJhbWVNYXAgfSA9IHRoaXMuX2dldE1hcHMoIHRoaXMudXBkYXRlQWZ0ZXJNYXAsIHJlZmVyZW5jZSApO1xuXG5cdFx0XHRpZiAoIGZyYW1lTWFwLmdldCggcmVmZXJlbmNlICkgIT09IHRoaXMuZnJhbWVJZCApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGUudXBkYXRlQWZ0ZXIoIHRoaXMgKSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRmcmFtZU1hcC5zZXQoIHJlZmVyZW5jZSwgdGhpcy5mcmFtZUlkICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCB1cGRhdGVUeXBlID09PSBOb2RlVXBkYXRlVHlwZS5SRU5ERVIgKSB7XG5cblx0XHRcdGNvbnN0IHsgcmVuZGVyTWFwIH0gPSB0aGlzLl9nZXRNYXBzKCB0aGlzLnVwZGF0ZUFmdGVyTWFwLCByZWZlcmVuY2UgKTtcblxuXHRcdFx0aWYgKCByZW5kZXJNYXAuZ2V0KCByZWZlcmVuY2UgKSAhPT0gdGhpcy5yZW5kZXJJZCApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGUudXBkYXRlQWZ0ZXIoIHRoaXMgKSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJNYXAuc2V0KCByZWZlcmVuY2UsIHRoaXMucmVuZGVySWQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHVwZGF0ZVR5cGUgPT09IE5vZGVVcGRhdGVUeXBlLk9CSkVDVCApIHtcblxuXHRcdFx0bm9kZS51cGRhdGVBZnRlciggdGhpcyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgZXhlY3V0ZXMgdGhlIHtAbGluayBOb2RlI3VwZGF0ZX0gZm9yIHRoZSBnaXZlbiBub2RlLlxuXHQgKiBJdCBtYWtlcyBzdXJlIHtAbGluayBOb2RlI3VwZGF0ZVR5cGV9IGlzIGhvbm9yZWQgbWVhbmluZyB0aGUgdXBkYXRlXG5cdCAqIGlzIG9ubHkgZXhlY3V0ZWQgb25jZSBwZXIgZnJhbWUsIHJlbmRlciBvciBvYmplY3QgZGVwZW5kaW5nIG9uIHRoZSB1cGRhdGVcblx0ICogdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUgdGhhdCBzaG91bGQgYmUgdXBkYXRlZC5cblx0ICovXG5cdHVwZGF0ZU5vZGUoIG5vZGUgKSB7XG5cblx0XHRjb25zdCB1cGRhdGVUeXBlID0gbm9kZS5nZXRVcGRhdGVUeXBlKCk7XG5cdFx0Y29uc3QgcmVmZXJlbmNlID0gbm9kZS51cGRhdGVSZWZlcmVuY2UoIHRoaXMgKTtcblxuXHRcdGlmICggdXBkYXRlVHlwZSA9PT0gTm9kZVVwZGF0ZVR5cGUuRlJBTUUgKSB7XG5cblx0XHRcdGNvbnN0IHsgZnJhbWVNYXAgfSA9IHRoaXMuX2dldE1hcHMoIHRoaXMudXBkYXRlTWFwLCByZWZlcmVuY2UgKTtcblxuXHRcdFx0aWYgKCBmcmFtZU1hcC5nZXQoIHJlZmVyZW5jZSApICE9PSB0aGlzLmZyYW1lSWQgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlLnVwZGF0ZSggdGhpcyApICE9PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGZyYW1lTWFwLnNldCggcmVmZXJlbmNlLCB0aGlzLmZyYW1lSWQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHVwZGF0ZVR5cGUgPT09IE5vZGVVcGRhdGVUeXBlLlJFTkRFUiApIHtcblxuXHRcdFx0Y29uc3QgeyByZW5kZXJNYXAgfSA9IHRoaXMuX2dldE1hcHMoIHRoaXMudXBkYXRlTWFwLCByZWZlcmVuY2UgKTtcblxuXHRcdFx0aWYgKCByZW5kZXJNYXAuZ2V0KCByZWZlcmVuY2UgKSAhPT0gdGhpcy5yZW5kZXJJZCApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGUudXBkYXRlKCB0aGlzICkgIT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyTWFwLnNldCggcmVmZXJlbmNlLCB0aGlzLnJlbmRlcklkICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCB1cGRhdGVUeXBlID09PSBOb2RlVXBkYXRlVHlwZS5PQkpFQ1QgKSB7XG5cblx0XHRcdG5vZGUudXBkYXRlKCB0aGlzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiB0aGUgbm9kZSBmcmFtZS4gVGhpcyBtZXRob2QgaXNcblx0ICogY2FsbGVkIGJ5IHRoZSByZW5kZXJlciBpbiBpdHMgaW50ZXJuYWwgYW5pbWF0aW9uIGxvb3AuXG5cdCAqL1xuXHR1cGRhdGUoKSB7XG5cblx0XHR0aGlzLmZyYW1lSWQgKys7XG5cblx0XHRpZiAoIHRoaXMubGFzdFRpbWUgPT09IHVuZGVmaW5lZCApIHRoaXMubGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuXHRcdHRoaXMuZGVsdGFUaW1lID0gKCBwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMubGFzdFRpbWUgKSAvIDEwMDA7XG5cblx0XHR0aGlzLmxhc3RUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cblx0XHR0aGlzLnRpbWUgKz0gdGhpcy5kZWx0YVRpbWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVGcmFtZTtcbiIsIi8qKlxuICogRGVzY3JpYmVzIHRoZSBpbnB1dCBvZiBhIHtAbGluayBOb2RlRnVuY3Rpb259LlxuICovXG5jbGFzcyBOb2RlRnVuY3Rpb25JbnB1dCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbm9kZSBmdW5jdGlvbiBpbnB1dC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgaW5wdXQgdHlwZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgaW5wdXQgbmFtZS5cblx0ICogQHBhcmFtIHs/bnVtYmVyfSBbY291bnQ9bnVsbF0gLSBJZiB0aGUgaW5wdXQgaXMgYW4gQXJyYXksIGNvdW50IHdpbGwgYmUgdGhlIGxlbmd0aC5cblx0ICogQHBhcmFtIHsoJ2luJ3wnb3V0J3wnaW5vdXQnKX0gW3F1YWxpZmllcj0nJ10gLSBUaGUgcGFyYW1ldGVyIHF1YWxpZmllciAob25seSByZWxldmFudCBmb3IgR0xTTCkuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzQ29uc3Q9ZmFsc2VdIC0gV2hldGhlciB0aGUgaW5wdXQgdXNlcyBhIGNvbnN0IHF1YWxpZmllciBvciBub3QgKG9ubHkgcmVsZXZhbnQgZm9yIEdMU0wpLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHR5cGUsIG5hbWUsIGNvdW50ID0gbnVsbCwgcXVhbGlmaWVyID0gJycsIGlzQ29uc3QgPSBmYWxzZSApIHtcblxuXHRcdC8qKlxuXHRcdCAqICBUaGUgaW5wdXQgdHlwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbnB1dCBuYW1lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0LyoqXG5cdFx0ICogSWYgdGhlIGlucHV0IGlzIGFuIEFycmF5LCBjb3VudCB3aWxsIGJlIHRoZSBsZW5ndGguXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdFx0LyoqXG5cdFx0ICpUaGUgcGFyYW1ldGVyIHF1YWxpZmllciAob25seSByZWxldmFudCBmb3IgR0xTTCkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdpbid8J291dCd8J2lub3V0Jyl9XG5cdFx0ICogQGRlZmF1bHQgJydcblx0XHQgKi9cblx0XHR0aGlzLnF1YWxpZmllciA9IHF1YWxpZmllcjtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGlucHV0IHVzZXMgYSBjb25zdCBxdWFsaWZpZXIgb3Igbm90IChvbmx5IHJlbGV2YW50IGZvciBHTFNMKS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0NvbnN0ID0gaXNDb25zdDtcblxuXHR9XG5cbn1cblxuTm9kZUZ1bmN0aW9uSW5wdXQuaXNOb2RlRnVuY3Rpb25JbnB1dCA9IHRydWU7XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVGdW5jdGlvbklucHV0O1xuIiwiaW1wb3J0IEFuYWx5dGljTGlnaHROb2RlIGZyb20gJy4vQW5hbHl0aWNMaWdodE5vZGUuanMnO1xuaW1wb3J0IHsgbGlnaHRUYXJnZXREaXJlY3Rpb24gfSBmcm9tICcuLi9hY2Nlc3NvcnMvTGlnaHRzLmpzJztcblxuLyoqXG4gKiBNb2R1bGUgZm9yIHJlcHJlc2VudGluZyBkaXJlY3Rpb25hbCBsaWdodHMgYXMgbm9kZXMuXG4gKlxuICogQGF1Z21lbnRzIEFuYWx5dGljTGlnaHROb2RlXG4gKi9cbmNsYXNzIERpcmVjdGlvbmFsTGlnaHROb2RlIGV4dGVuZHMgQW5hbHl0aWNMaWdodE5vZGUge1xuXG5cdHN0YXRpYyBnZXQgdHlwZSgpIHtcblxuXHRcdHJldHVybiAnRGlyZWN0aW9uYWxMaWdodE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBkaXJlY3Rpb25hbCBsaWdodCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0gez9EaXJlY3Rpb25hbExpZ2h0fSBbbGlnaHQ9bnVsbF0gLSBUaGUgZGlyZWN0aW9uYWwgbGlnaHQgc291cmNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpZ2h0ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBsaWdodCApO1xuXG5cdH1cblxuXHRzZXR1cERpcmVjdCgpIHtcblxuXHRcdGNvbnN0IGxpZ2h0Q29sb3IgPSB0aGlzLmNvbG9yTm9kZTtcblx0XHRjb25zdCBsaWdodERpcmVjdGlvbiA9IGxpZ2h0VGFyZ2V0RGlyZWN0aW9uKCB0aGlzLmxpZ2h0ICk7XG5cblx0XHRyZXR1cm4geyBsaWdodERpcmVjdGlvbiwgbGlnaHRDb2xvciB9O1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBEaXJlY3Rpb25hbExpZ2h0Tm9kZTtcbiIsImltcG9ydCBBbmFseXRpY0xpZ2h0Tm9kZSBmcm9tICcuL0FuYWx5dGljTGlnaHROb2RlLmpzJztcbmltcG9ydCB7IHRleHR1cmUgfSBmcm9tICcuLi9hY2Nlc3NvcnMvVGV4dHVyZU5vZGUuanMnO1xuaW1wb3J0IHsgdW5pZm9ybSB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybU5vZGUuanMnO1xuaW1wb3J0IHsgbGlnaHRWaWV3UG9zaXRpb24gfSBmcm9tICcuLi9hY2Nlc3NvcnMvTGlnaHRzLmpzJztcbmltcG9ydCB7IHJlbmRlckdyb3VwIH0gZnJvbSAnLi4vY29yZS9Vbmlmb3JtR3JvdXBOb2RlLmpzJztcblxuaW1wb3J0IHsgTWF0cml4NCB9IGZyb20gJy4uLy4uL21hdGgvTWF0cml4NC5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IE5vZGVVcGRhdGVUeXBlIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMuanMnO1xuXG5jb25zdCBfbWF0cml4NDEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfbWF0cml4NDIgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbmxldCBfbHRjTGliID0gbnVsbDtcblxuLyoqXG4gKiBNb2R1bGUgZm9yIHJlcHJlc2VudGluZyByZWN0IGFyZWEgbGlnaHRzIGFzIG5vZGVzLlxuICpcbiAqIEBhdWdtZW50cyBBbmFseXRpY0xpZ2h0Tm9kZVxuICovXG5jbGFzcyBSZWN0QXJlYUxpZ2h0Tm9kZSBleHRlbmRzIEFuYWx5dGljTGlnaHROb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1JlY3RBcmVhTGlnaHROb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcmVjdCBhcmVhIGxpZ2h0IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P1JlY3RBcmVhTGlnaHR9IFtsaWdodD1udWxsXSAtIFRoZSByZWN0IGFyZWEgbGlnaHQgc291cmNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpZ2h0ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBsaWdodCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVW5pZm9ybSBub2RlIHJlcHJlc2VudGluZyB0aGUgaGFsZiBoZWlnaHQgb2YgdGhlIGFyZSBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtVbmlmb3JtTm9kZTx2ZWMzPn1cblx0XHQgKi9cblx0XHR0aGlzLmhhbGZIZWlnaHQgPSB1bmlmb3JtKCBuZXcgVmVjdG9yMygpICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cblx0XHQvKipcblx0XHQgKiBVbmlmb3JtIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBoYWxmIHdpZHRoIG9mIHRoZSBhcmUgbGlnaHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGU8dmVjMz59XG5cdFx0ICovXG5cdFx0dGhpcy5oYWxmV2lkdGggPSB1bmlmb3JtKCBuZXcgVmVjdG9yMygpICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYHVwZGF0ZVR5cGVgIGlzIHNldCB0byBgTm9kZVVwZGF0ZVR5cGUuUkVOREVSYCBzaW5jZSB0aGUgbGlnaHRcblx0XHQgKiByZWxpZXMgb24gYHZpZXdNYXRyaXhgIHdoaWNoIG1pZ2h0IHZhcnkgcGVyIHJlbmRlciBjYWxsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAncmVuZGVyJ1xuXHRcdCAqL1xuXHRcdHRoaXMudXBkYXRlVHlwZSA9IE5vZGVVcGRhdGVUeXBlLlJFTkRFUjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHRvIHVwZGF0ZWQgcmVjdCBhcmVhIGxpZ2h0IHNwZWNpZmljIHVuaWZvcm1zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlKCBmcmFtZSApIHtcblxuXHRcdHN1cGVyLnVwZGF0ZSggZnJhbWUgKTtcblxuXHRcdGNvbnN0IHsgbGlnaHQgfSA9IHRoaXM7XG5cblx0XHRjb25zdCB2aWV3TWF0cml4ID0gZnJhbWUuY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcblxuXHRcdF9tYXRyaXg0Mi5pZGVudGl0eSgpO1xuXHRcdF9tYXRyaXg0MS5jb3B5KCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdF9tYXRyaXg0MS5wcmVtdWx0aXBseSggdmlld01hdHJpeCApO1xuXHRcdF9tYXRyaXg0Mi5leHRyYWN0Um90YXRpb24oIF9tYXRyaXg0MSApO1xuXG5cdFx0dGhpcy5oYWxmV2lkdGgudmFsdWUuc2V0KCBsaWdodC53aWR0aCAqIDAuNSwgMC4wLCAwLjAgKTtcblx0XHR0aGlzLmhhbGZIZWlnaHQudmFsdWUuc2V0KCAwLjAsIGxpZ2h0LmhlaWdodCAqIDAuNSwgMC4wICk7XG5cblx0XHR0aGlzLmhhbGZXaWR0aC52YWx1ZS5hcHBseU1hdHJpeDQoIF9tYXRyaXg0MiApO1xuXHRcdHRoaXMuaGFsZkhlaWdodC52YWx1ZS5hcHBseU1hdHJpeDQoIF9tYXRyaXg0MiApO1xuXG5cdH1cblxuXHRzZXR1cERpcmVjdFJlY3RBcmVhKCBidWlsZGVyICkge1xuXG5cdFx0bGV0IGx0Y18xLCBsdGNfMjtcblxuXHRcdGlmICggYnVpbGRlci5pc0F2YWlsYWJsZSggJ2Zsb2F0MzJGaWx0ZXJhYmxlJyApICkge1xuXG5cdFx0XHRsdGNfMSA9IHRleHR1cmUoIF9sdGNMaWIuTFRDX0ZMT0FUXzEgKTtcblx0XHRcdGx0Y18yID0gdGV4dHVyZSggX2x0Y0xpYi5MVENfRkxPQVRfMiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bHRjXzEgPSB0ZXh0dXJlKCBfbHRjTGliLkxUQ19IQUxGXzEgKTtcblx0XHRcdGx0Y18yID0gdGV4dHVyZSggX2x0Y0xpYi5MVENfSEFMRl8yICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB7IGNvbG9yTm9kZSwgbGlnaHQgfSA9IHRoaXM7XG5cblx0XHRjb25zdCBsaWdodFBvc2l0aW9uID0gbGlnaHRWaWV3UG9zaXRpb24oIGxpZ2h0ICk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bGlnaHRDb2xvcjogY29sb3JOb2RlLFxuXHRcdFx0bGlnaHRQb3NpdGlvbixcblx0XHRcdGhhbGZXaWR0aDogdGhpcy5oYWxmV2lkdGgsXG5cdFx0XHRoYWxmSGVpZ2h0OiB0aGlzLmhhbGZIZWlnaHQsXG5cdFx0XHRsdGNfMSxcblx0XHRcdGx0Y18yXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gY29uZmlndXJlIHRoZSBpbnRlcm5hbCBCUkRGIGFwcHJveGltYXRpb24gdGV4dHVyZSBkYXRhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlY3RBcmVhTGlnaHRUZXh0dXJlc0xpYn0gbHRjIC0gVGhlIEJSREYgYXBwcm94aW1hdGlvbiB0ZXh0dXJlIGRhdGEuXG5cdCAqL1xuXHRzdGF0aWMgc2V0TFRDKCBsdGMgKSB7XG5cblx0XHRfbHRjTGliID0gbHRjO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWN0QXJlYUxpZ2h0Tm9kZTtcbiIsImltcG9ydCBBbmFseXRpY0xpZ2h0Tm9kZSBmcm9tICcuL0FuYWx5dGljTGlnaHROb2RlLmpzJztcbmltcG9ydCB7IGdldERpc3RhbmNlQXR0ZW51YXRpb24gfSBmcm9tICcuL0xpZ2h0VXRpbHMuanMnO1xuaW1wb3J0IHsgdW5pZm9ybSB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybU5vZGUuanMnO1xuaW1wb3J0IHsgc21vb3Roc3RlcCB9IGZyb20gJy4uL21hdGgvTWF0aE5vZGUuanMnO1xuaW1wb3J0IHsgcmVuZGVyR3JvdXAgfSBmcm9tICcuLi9jb3JlL1VuaWZvcm1Hcm91cE5vZGUuanMnO1xuaW1wb3J0IHsgbGlnaHRUYXJnZXREaXJlY3Rpb24sIGxpZ2h0UHJvamVjdGlvblVWIH0gZnJvbSAnLi4vYWNjZXNzb3JzL0xpZ2h0cy5qcyc7XG5pbXBvcnQgeyB0ZXh0dXJlIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1RleHR1cmVOb2RlLmpzJztcblxuLyoqXG4gKiBNb2R1bGUgZm9yIHJlcHJlc2VudGluZyBzcG90IGxpZ2h0cyBhcyBub2Rlcy5cbiAqXG4gKiBAYXVnbWVudHMgQW5hbHl0aWNMaWdodE5vZGVcbiAqL1xuY2xhc3MgU3BvdExpZ2h0Tm9kZSBleHRlbmRzIEFuYWx5dGljTGlnaHROb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ1Nwb3RMaWdodE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzcG90IGxpZ2h0IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P1Nwb3RMaWdodH0gW2xpZ2h0PW51bGxdIC0gVGhlIHNwb3QgbGlnaHQgc291cmNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpZ2h0ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBsaWdodCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVW5pZm9ybSBub2RlIHJlcHJlc2VudGluZyB0aGUgY29uZSBjb3NpbmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGU8ZmxvYXQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY29uZUNvc05vZGUgPSB1bmlmb3JtKCAwICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cblx0XHQvKipcblx0XHQgKiBVbmlmb3JtIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBwZW51bWJyYSBjb3NpbmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGU8ZmxvYXQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMucGVudW1icmFDb3NOb2RlID0gdW5pZm9ybSggMCApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVW5pZm9ybSBub2RlIHJlcHJlc2VudGluZyB0aGUgY3V0b2ZmIGRpc3RhbmNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1VuaWZvcm1Ob2RlPGZsb2F0Pn1cblx0XHQgKi9cblx0XHR0aGlzLmN1dG9mZkRpc3RhbmNlTm9kZSA9IHVuaWZvcm0oIDAgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFVuaWZvcm0gbm9kZSByZXByZXNlbnRpbmcgdGhlIGRlY2F5IGV4cG9uZW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1VuaWZvcm1Ob2RlPGZsb2F0Pn1cblx0XHQgKi9cblx0XHR0aGlzLmRlY2F5RXhwb25lbnROb2RlID0gdW5pZm9ybSggMCApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXR0ZW4gdG8gdXBkYXRlZCBzcG90IGxpZ2h0IHNwZWNpZmljIHVuaWZvcm1zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVGcmFtZX0gZnJhbWUgLSBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBub2RlIGZyYW1lLlxuXHQgKi9cblx0dXBkYXRlKCBmcmFtZSApIHtcblxuXHRcdHN1cGVyLnVwZGF0ZSggZnJhbWUgKTtcblxuXHRcdGNvbnN0IHsgbGlnaHQgfSA9IHRoaXM7XG5cblx0XHR0aGlzLmNvbmVDb3NOb2RlLnZhbHVlID0gTWF0aC5jb3MoIGxpZ2h0LmFuZ2xlICk7XG5cdFx0dGhpcy5wZW51bWJyYUNvc05vZGUudmFsdWUgPSBNYXRoLmNvcyggbGlnaHQuYW5nbGUgKiAoIDEgLSBsaWdodC5wZW51bWJyYSApICk7XG5cblx0XHR0aGlzLmN1dG9mZkRpc3RhbmNlTm9kZS52YWx1ZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXHRcdHRoaXMuZGVjYXlFeHBvbmVudE5vZGUudmFsdWUgPSBsaWdodC5kZWNheTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBzcG90IGF0dGVudWF0aW9uIGZvciB0aGUgZ2l2ZW4gYW5nbGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGFuZ2xlQ29zaW5lIC0gVGhlIGFuZ2xlIHRvIGNvbXB1dGUgdGhlIHNwb3QgYXR0ZW51YXRpb24gZm9yLlxuXHQgKiBAcmV0dXJuIHtOb2RlPGZsb2F0Pn0gVGhlIHNwb3QgYXR0ZW51YXRpb24uXG5cdCAqL1xuXHRnZXRTcG90QXR0ZW51YXRpb24oIGFuZ2xlQ29zaW5lICkge1xuXG5cdFx0Y29uc3QgeyBjb25lQ29zTm9kZSwgcGVudW1icmFDb3NOb2RlIH0gPSB0aGlzO1xuXG5cdFx0cmV0dXJuIHNtb290aHN0ZXAoIGNvbmVDb3NOb2RlLCBwZW51bWJyYUNvc05vZGUsIGFuZ2xlQ29zaW5lICk7XG5cblx0fVxuXG5cdHNldHVwRGlyZWN0KCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBjb2xvck5vZGUsIGN1dG9mZkRpc3RhbmNlTm9kZSwgZGVjYXlFeHBvbmVudE5vZGUsIGxpZ2h0IH0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgbGlnaHRWZWN0b3IgPSB0aGlzLmdldExpZ2h0VmVjdG9yKCBidWlsZGVyICk7XG5cblx0XHRjb25zdCBsaWdodERpcmVjdGlvbiA9IGxpZ2h0VmVjdG9yLm5vcm1hbGl6ZSgpO1xuXHRcdGNvbnN0IGFuZ2xlQ29zID0gbGlnaHREaXJlY3Rpb24uZG90KCBsaWdodFRhcmdldERpcmVjdGlvbiggbGlnaHQgKSApO1xuXHRcdGNvbnN0IHNwb3RBdHRlbnVhdGlvbiA9IHRoaXMuZ2V0U3BvdEF0dGVudWF0aW9uKCBhbmdsZUNvcyApO1xuXG5cdFx0Y29uc3QgbGlnaHREaXN0YW5jZSA9IGxpZ2h0VmVjdG9yLmxlbmd0aCgpO1xuXG5cdFx0Y29uc3QgbGlnaHRBdHRlbnVhdGlvbiA9IGdldERpc3RhbmNlQXR0ZW51YXRpb24oIHtcblx0XHRcdGxpZ2h0RGlzdGFuY2UsXG5cdFx0XHRjdXRvZmZEaXN0YW5jZTogY3V0b2ZmRGlzdGFuY2VOb2RlLFxuXHRcdFx0ZGVjYXlFeHBvbmVudDogZGVjYXlFeHBvbmVudE5vZGVcblx0XHR9ICk7XG5cblx0XHRsZXQgbGlnaHRDb2xvciA9IGNvbG9yTm9kZS5tdWwoIHNwb3RBdHRlbnVhdGlvbiApLm11bCggbGlnaHRBdHRlbnVhdGlvbiApO1xuXG5cdFx0aWYgKCBsaWdodC5tYXAgKSB7XG5cblx0XHRcdGNvbnN0IHNwb3RMaWdodENvb3JkID0gbGlnaHRQcm9qZWN0aW9uVVYoIGxpZ2h0LCBidWlsZGVyLmNvbnRleHQucG9zaXRpb25Xb3JsZCApO1xuXHRcdFx0Y29uc3QgcHJvamVjdGVkVGV4dHVyZSA9IHRleHR1cmUoIGxpZ2h0Lm1hcCwgc3BvdExpZ2h0Q29vcmQueHkgKS5vblJlbmRlclVwZGF0ZSggKCkgPT4gbGlnaHQubWFwICk7XG5cblx0XHRcdGNvbnN0IGluU3BvdExpZ2h0TWFwID0gc3BvdExpZ2h0Q29vcmQubXVsKCAyLiApLnN1YiggMS4gKS5hYnMoKS5sZXNzVGhhbiggMS4gKS5hbGwoKTtcblxuXHRcdFx0bGlnaHRDb2xvciA9IGluU3BvdExpZ2h0TWFwLnNlbGVjdCggbGlnaHRDb2xvci5tdWwoIHByb2plY3RlZFRleHR1cmUgKSwgbGlnaHRDb2xvciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHsgbGlnaHRDb2xvciwgbGlnaHREaXJlY3Rpb24gfTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3BvdExpZ2h0Tm9kZTtcbiIsImltcG9ydCBTcG90TGlnaHROb2RlIGZyb20gJy4vU3BvdExpZ2h0Tm9kZS5qcyc7XG5pbXBvcnQgeyB0ZXh0dXJlIH0gZnJvbSAnLi4vYWNjZXNzb3JzL1RleHR1cmVOb2RlLmpzJztcbmltcG9ydCB7IHZlYzIgfSBmcm9tICcuLi90c2wvVFNMQmFzZS5qcyc7XG5cbi8qKlxuICogQW4gSUVTIHZlcnNpb24gb2YgdGhlIGRlZmF1bHQgc3BvdCBsaWdodCBub2RlLlxuICpcbiAqIEBhdWdtZW50cyBTcG90TGlnaHROb2RlXG4gKi9cbmNsYXNzIElFU1Nwb3RMaWdodE5vZGUgZXh0ZW5kcyBTcG90TGlnaHROb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0lFU1Nwb3RMaWdodE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXRlcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byBjb21wdXRlIGFuIElFUyBjb25mb3JtIHNwb3QgYXR0ZW51YXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZTxmbG9hdD59IGFuZ2xlQ29zaW5lIC0gVGhlIGFuZ2xlIHRvIGNvbXB1dGUgdGhlIHNwb3QgYXR0ZW51YXRpb24gZm9yLlxuXHQgKiBAcmV0dXJuIHtOb2RlPGZsb2F0Pn0gVGhlIHNwb3QgYXR0ZW51YXRpb24uXG5cdCAqL1xuXHRnZXRTcG90QXR0ZW51YXRpb24oIGFuZ2xlQ29zaW5lICkge1xuXG5cdFx0Y29uc3QgaWVzTWFwID0gdGhpcy5saWdodC5pZXNNYXA7XG5cblx0XHRsZXQgc3BvdEF0dGVudWF0aW9uID0gbnVsbDtcblxuXHRcdGlmICggaWVzTWFwICYmIGllc01hcC5pc1RleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IGFuZ2xlID0gYW5nbGVDb3NpbmUuYWNvcygpLm11bCggMS4wIC8gTWF0aC5QSSApO1xuXG5cdFx0XHRzcG90QXR0ZW51YXRpb24gPSB0ZXh0dXJlKCBpZXNNYXAsIHZlYzIoIGFuZ2xlLCAwICksIDAgKS5yO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c3BvdEF0dGVudWF0aW9uID0gc3VwZXIuZ2V0U3BvdEF0dGVudWF0aW9uKCBhbmdsZUNvc2luZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNwb3RBdHRlbnVhdGlvbjtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgSUVTU3BvdExpZ2h0Tm9kZTtcbiIsImltcG9ydCBBbmFseXRpY0xpZ2h0Tm9kZSBmcm9tICcuL0FuYWx5dGljTGlnaHROb2RlLmpzJztcblxuLyoqXG4gKiBNb2R1bGUgZm9yIHJlcHJlc2VudGluZyBhbWJpZW50IGxpZ2h0cyBhcyBub2Rlcy5cbiAqXG4gKiBAYXVnbWVudHMgQW5hbHl0aWNMaWdodE5vZGVcbiAqL1xuY2xhc3MgQW1iaWVudExpZ2h0Tm9kZSBleHRlbmRzIEFuYWx5dGljTGlnaHROb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0FtYmllbnRMaWdodE5vZGUnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBhbWJpZW50IGxpZ2h0IG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P0FtYmllbnRMaWdodH0gW2xpZ2h0PW51bGxdIC0gVGhlIGFtYmllbnQgbGlnaHQgc291cmNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpZ2h0ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBsaWdodCApO1xuXG5cdH1cblxuXHRzZXR1cCggeyBjb250ZXh0IH0gKSB7XG5cblx0XHRjb250ZXh0LmlycmFkaWFuY2UuYWRkQXNzaWduKCB0aGlzLmNvbG9yTm9kZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBbWJpZW50TGlnaHROb2RlO1xuIiwiaW1wb3J0IEFuYWx5dGljTGlnaHROb2RlIGZyb20gJy4vQW5hbHl0aWNMaWdodE5vZGUuanMnO1xuaW1wb3J0IHsgdW5pZm9ybSB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybU5vZGUuanMnO1xuaW1wb3J0IHsgbWl4IH0gZnJvbSAnLi4vbWF0aC9NYXRoTm9kZS5qcyc7XG5pbXBvcnQgeyBub3JtYWxWaWV3IH0gZnJvbSAnLi4vYWNjZXNzb3JzL05vcm1hbC5qcyc7XG5pbXBvcnQgeyBsaWdodFBvc2l0aW9uIH0gZnJvbSAnLi4vYWNjZXNzb3JzL0xpZ2h0cy5qcyc7XG5pbXBvcnQgeyByZW5kZXJHcm91cCB9IGZyb20gJy4uL2NvcmUvVW5pZm9ybUdyb3VwTm9kZS5qcyc7XG5cbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vbWF0aC9Db2xvci5qcyc7XG5cbi8qKlxuICogTW9kdWxlIGZvciByZXByZXNlbnRpbmcgaGVtaXNwaGVyZSBsaWdodHMgYXMgbm9kZXMuXG4gKlxuICogQGF1Z21lbnRzIEFuYWx5dGljTGlnaHROb2RlXG4gKi9cbmNsYXNzIEhlbWlzcGhlcmVMaWdodE5vZGUgZXh0ZW5kcyBBbmFseXRpY0xpZ2h0Tm9kZSB7XG5cblx0c3RhdGljIGdldCB0eXBlKCkge1xuXG5cdFx0cmV0dXJuICdIZW1pc3BoZXJlTGlnaHROb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgaGVtaXNwaGVyZSBsaWdodCBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0gez9IZW1pc3BoZXJlTGlnaHR9IFtsaWdodD1udWxsXSAtIFRoZSBoZW1pc3BoZXJlIGxpZ2h0IHNvdXJjZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBsaWdodCA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggbGlnaHQgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFVuaWZvcm0gbm9kZSByZXByZXNlbnRpbmcgdGhlIGxpZ2h0J3MgcG9zaXRpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybU5vZGU8dmVjMz59XG5cdFx0ICovXG5cdFx0dGhpcy5saWdodFBvc2l0aW9uTm9kZSA9IGxpZ2h0UG9zaXRpb24oIGxpZ2h0ICk7XG5cblx0XHQvKipcblx0XHQgKiBBIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBsaWdodCdzIGRpcmVjdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOb2RlPHZlYzM+fVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHREaXJlY3Rpb25Ob2RlID0gdGhpcy5saWdodFBvc2l0aW9uTm9kZS5ub3JtYWxpemUoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFVuaWZvcm0gbm9kZSByZXByZXNlbnRpbmcgdGhlIGxpZ2h0J3MgZ3JvdW5kIGNvbG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1VuaWZvcm1Ob2RlPHZlYzM+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZ3JvdW5kQ29sb3JOb2RlID0gdW5pZm9ybSggbmV3IENvbG9yKCkgKS5zZXRHcm91cCggcmVuZGVyR3JvdXAgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHRvIHVwZGF0ZWQgaGVtaXNwaGVyZSBsaWdodCBzcGVjaWZpYyB1bmlmb3Jtcy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlRnJhbWV9IGZyYW1lIC0gQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbm9kZSBmcmFtZS5cblx0ICovXG5cdHVwZGF0ZSggZnJhbWUgKSB7XG5cblx0XHRjb25zdCB7IGxpZ2h0IH0gPSB0aGlzO1xuXG5cdFx0c3VwZXIudXBkYXRlKCBmcmFtZSApO1xuXG5cdFx0dGhpcy5saWdodFBvc2l0aW9uTm9kZS5vYmplY3QzZCA9IGxpZ2h0O1xuXG5cdFx0dGhpcy5ncm91bmRDb2xvck5vZGUudmFsdWUuY29weSggbGlnaHQuZ3JvdW5kQ29sb3IgKS5tdWx0aXBseVNjYWxhciggbGlnaHQuaW50ZW5zaXR5ICk7XG5cblx0fVxuXG5cdHNldHVwKCBidWlsZGVyICkge1xuXG5cdFx0Y29uc3QgeyBjb2xvck5vZGUsIGdyb3VuZENvbG9yTm9kZSwgbGlnaHREaXJlY3Rpb25Ob2RlIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgZG90TkwgPSBub3JtYWxWaWV3LmRvdCggbGlnaHREaXJlY3Rpb25Ob2RlICk7XG5cdFx0Y29uc3QgaGVtaURpZmZ1c2VXZWlnaHQgPSBkb3ROTC5tdWwoIDAuNSApLmFkZCggMC41ICk7XG5cblx0XHRjb25zdCBpcnJhZGlhbmNlID0gbWl4KCBncm91bmRDb2xvck5vZGUsIGNvbG9yTm9kZSwgaGVtaURpZmZ1c2VXZWlnaHQgKTtcblxuXHRcdGJ1aWxkZXIuY29udGV4dC5pcnJhZGlhbmNlLmFkZEFzc2lnbiggaXJyYWRpYW5jZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBIZW1pc3BoZXJlTGlnaHROb2RlO1xuIiwiaW1wb3J0IEFuYWx5dGljTGlnaHROb2RlIGZyb20gJy4vQW5hbHl0aWNMaWdodE5vZGUuanMnO1xuaW1wb3J0IHsgbm9ybWFsV29ybGQgfSBmcm9tICcuLi9hY2Nlc3NvcnMvTm9ybWFsLmpzJztcbmltcG9ydCB7IHVuaWZvcm1BcnJheSB9IGZyb20gJy4uL2FjY2Vzc29ycy9Vbmlmb3JtQXJyYXlOb2RlLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IGdldFNoSXJyYWRpYW5jZUF0IGZyb20gJy4uL2Z1bmN0aW9ucy9tYXRlcmlhbC9nZXRTaElycmFkaWFuY2VBdC5qcyc7XG5cbi8qKlxuICogTW9kdWxlIGZvciByZXByZXNlbnRpbmcgbGlnaHQgcHJvYmVzIGFzIG5vZGVzLlxuICpcbiAqIEBhdWdtZW50cyBBbmFseXRpY0xpZ2h0Tm9kZVxuICovXG5jbGFzcyBMaWdodFByb2JlTm9kZSBleHRlbmRzIEFuYWx5dGljTGlnaHROb2RlIHtcblxuXHRzdGF0aWMgZ2V0IHR5cGUoKSB7XG5cblx0XHRyZXR1cm4gJ0xpZ2h0UHJvYmVOb2RlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbGlnaHQgcHJvYmUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHs/TGlnaHRQcm9iZX0gW2xpZ2h0PW51bGxdIC0gVGhlIGxpZ2h0IHByb2JlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpZ2h0ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBsaWdodCApO1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSBhcnJheS5wdXNoKCBuZXcgVmVjdG9yMygpICk7XG5cblx0XHQvKipcblx0XHQgKiBMaWdodCBwcm9iZSByZXByZXNlbnRlZCBhcyBhIHVuaWZvcm0gb2Ygc3BoZXJpY2FsIGhhcm1vbmljcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtVbmlmb3JtQXJyYXlOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRQcm9iZSA9IHVuaWZvcm1BcnJheSggYXJyYXkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE92ZXJ3cml0dGVuIHRvIHVwZGF0ZWQgbGlnaHQgcHJvYmUgc3BlY2lmaWMgdW5pZm9ybXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZUZyYW1lfSBmcmFtZSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IG5vZGUgZnJhbWUuXG5cdCAqL1xuXHR1cGRhdGUoIGZyYW1lICkge1xuXG5cdFx0Y29uc3QgeyBsaWdodCB9ID0gdGhpcztcblxuXHRcdHN1cGVyLnVwZGF0ZSggZnJhbWUgKTtcblxuXHRcdC8vXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmxpZ2h0UHJvYmUuYXJyYXlbIGkgXS5jb3B5KCBsaWdodC5zaC5jb2VmZmljaWVudHNbIGkgXSApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0c2V0dXAoIGJ1aWxkZXIgKSB7XG5cblx0XHRjb25zdCBpcnJhZGlhbmNlID0gZ2V0U2hJcnJhZGlhbmNlQXQoIG5vcm1hbFdvcmxkLCB0aGlzLmxpZ2h0UHJvYmUgKTtcblxuXHRcdGJ1aWxkZXIuY29udGV4dC5pcnJhZGlhbmNlLmFkZEFzc2lnbiggaXJyYWRpYW5jZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBMaWdodFByb2JlTm9kZTtcbiIsIi8qKlxuICogQmFzZSBjbGFzcyBmb3Igbm9kZSBwYXJzZXJzLiBBIGRlcml2ZWQgcGFyc2VyIG11c3QgYmUgaW1wbGVtZW50ZWRcbiAqIGZvciBlYWNoIHN1cHBvcnRlZCBuYXRpdmUgc2hhZGVyIGxhbmd1YWdlLlxuICovXG5jbGFzcyBOb2RlUGFyc2VyIHtcblxuXHQvKipcblx0ICogVGhlIG1ldGhvZCBwYXJzZXMgdGhlIGdpdmVuIG5hdGl2ZSBjb2RlIGFuIHJldHVybnMgYSBub2RlIGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSAtIFRoZSBuYXRpdmUgc2hhZGVyIGNvZGUuXG5cdCAqIEByZXR1cm4ge05vZGVGdW5jdGlvbn0gQSBub2RlIGZ1bmN0aW9uLlxuXHQgKi9cblx0cGFyc2VGdW5jdGlvbiggLypzb3VyY2UqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ0Fic3RyYWN0IGZ1bmN0aW9uLicgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZVBhcnNlcjtcbiIsIi8qKlxuICogQmFzZSBjbGFzcyBmb3Igbm9kZSBmdW5jdGlvbnMuIEEgZGVyaXZlZCBtb2R1bGUgbXVzdCBiZSBpbXBsZW1lbnRlZFxuICogZm9yIGVhY2ggc3VwcG9ydGVkIG5hdGl2ZSBzaGFkZXIgbGFuZ3VhZ2UuIFNpbWlsYXIgdG8gb3RoZXIgYE5vZGUqYCBtb2R1bGVzLFxuICogdGhpcyBjbGFzcyBpcyBvbmx5IHJlbGV2YW50IGR1cmluZyB0aGUgYnVpbGRpbmcgcHJvY2VzcyBhbmQgbm90IHVzZWRcbiAqIGluIHVzZXItbGV2ZWwgY29kZS5cbiAqL1xuY2xhc3MgTm9kZUZ1bmN0aW9uIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlIGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBub2RlIHR5cGUuIFRoaXMgdHlwZSBpcyB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlIG5vZGUgZnVuY3Rpb24uXG5cdCAqIEBwYXJhbSB7QXJyYXk8Tm9kZUZ1bmN0aW9uSW5wdXQ+fSBpbnB1dHMgLSBUaGUgZnVuY3Rpb24ncyBpbnB1dHMuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nJ10gLSBUaGUgZnVuY3Rpb24ncyBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWNpc2lvbj0nJ10gLSBUaGUgcHJlY2lzaW9uIHF1YWxpZmllci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB0eXBlLCBpbnB1dHMsIG5hbWUgPSAnJywgcHJlY2lzaW9uID0gJycgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB0eXBlLiBUaGlzIHR5cGUgaXMgdGhlIHJldHVybiB0eXBlIG9mIHRoZSBub2RlIGZ1bmN0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGZ1bmN0aW9uJ3MgaW5wdXRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE5vZGVGdW5jdGlvbklucHV0Pn1cblx0XHQgKi9cblx0XHR0aGlzLmlucHV0cyA9IGlucHV0cztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSB1bmlmb3JtLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCAnJ1xuXHRcdCAqL1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcHJlY2lzaW9uIHF1YWxpZmllci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJydcblx0XHQgKi9cblx0XHR0aGlzLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIG5hdGl2ZSBjb2RlIG9mIHRoZSBub2RlIGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgZnVuY3Rpb24ncyBuYW1lLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEEgc2hhZGVyIGNvZGUuXG5cdCAqL1xuXHRnZXRDb2RlKCAvKm5hbWUgPSB0aGlzLm5hbWUqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ0Fic3RyYWN0IGZ1bmN0aW9uLicgKTtcblxuXHR9XG5cbn1cblxuTm9kZUZ1bmN0aW9uLmlzTm9kZUZ1bmN0aW9uID0gdHJ1ZTtcblxuZXhwb3J0IGRlZmF1bHQgTm9kZUZ1bmN0aW9uO1xuIiwiaW1wb3J0IE5vZGVGdW5jdGlvbiBmcm9tICcuLi9jb3JlL05vZGVGdW5jdGlvbi5qcyc7XG5pbXBvcnQgTm9kZUZ1bmN0aW9uSW5wdXQgZnJvbSAnLi4vY29yZS9Ob2RlRnVuY3Rpb25JbnB1dC5qcyc7XG5cbmNvbnN0IGRlY2xhcmF0aW9uUmVnZXhwID0gL15cXHMqKGhpZ2hwfG1lZGl1bXB8bG93cCk/XFxzKihbYS16XzAtOV0rKVxccyooW2Etel8wLTldKyk/XFxzKlxcKChbXFxzXFxTXSo/KVxcKS9pO1xuY29uc3QgcHJvcGVydGllc1JlZ2V4cCA9IC9bYS16XzAtOV0rL2lnO1xuXG5jb25zdCBwcmFnbWFNYWluID0gJyNwcmFnbWEgbWFpbic7XG5cbmNvbnN0IHBhcnNlID0gKCBzb3VyY2UgKSA9PiB7XG5cblx0c291cmNlID0gc291cmNlLnRyaW0oKTtcblxuXHRjb25zdCBwcmFnbWFNYWluSW5kZXggPSBzb3VyY2UuaW5kZXhPZiggcHJhZ21hTWFpbiApO1xuXG5cdGNvbnN0IG1haW5Db2RlID0gcHJhZ21hTWFpbkluZGV4ICE9PSAtIDEgPyBzb3VyY2Uuc2xpY2UoIHByYWdtYU1haW5JbmRleCArIHByYWdtYU1haW4ubGVuZ3RoICkgOiBzb3VyY2U7XG5cblx0Y29uc3QgZGVjbGFyYXRpb24gPSBtYWluQ29kZS5tYXRjaCggZGVjbGFyYXRpb25SZWdleHAgKTtcblxuXHRpZiAoIGRlY2xhcmF0aW9uICE9PSBudWxsICYmIGRlY2xhcmF0aW9uLmxlbmd0aCA9PT0gNSApIHtcblxuXHRcdC8vIHRva2VuaXplclxuXG5cdFx0Y29uc3QgaW5wdXRzQ29kZSA9IGRlY2xhcmF0aW9uWyA0IF07XG5cdFx0Y29uc3QgcHJvcHNNYXRjaGVzID0gW107XG5cblx0XHRsZXQgbmFtZU1hdGNoID0gbnVsbDtcblxuXHRcdHdoaWxlICggKCBuYW1lTWF0Y2ggPSBwcm9wZXJ0aWVzUmVnZXhwLmV4ZWMoIGlucHV0c0NvZGUgKSApICE9PSBudWxsICkge1xuXG5cdFx0XHRwcm9wc01hdGNoZXMucHVzaCggbmFtZU1hdGNoICk7XG5cblx0XHR9XG5cblx0XHQvLyBwYXJzZXJcblxuXHRcdGNvbnN0IGlucHV0cyA9IFtdO1xuXG5cdFx0bGV0IGkgPSAwO1xuXG5cdFx0d2hpbGUgKCBpIDwgcHJvcHNNYXRjaGVzLmxlbmd0aCApIHtcblxuXHRcdFx0Y29uc3QgaXNDb25zdCA9IHByb3BzTWF0Y2hlc1sgaSBdWyAwIF0gPT09ICdjb25zdCc7XG5cblx0XHRcdGlmICggaXNDb25zdCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRpICsrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCBxdWFsaWZpZXIgPSBwcm9wc01hdGNoZXNbIGkgXVsgMCBdO1xuXG5cdFx0XHRpZiAoIHF1YWxpZmllciA9PT0gJ2luJyB8fCBxdWFsaWZpZXIgPT09ICdvdXQnIHx8IHF1YWxpZmllciA9PT0gJ2lub3V0JyApIHtcblxuXHRcdFx0XHRpICsrO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHF1YWxpZmllciA9ICcnO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHR5cGUgPSBwcm9wc01hdGNoZXNbIGkgKysgXVsgMCBdO1xuXG5cdFx0XHRsZXQgY291bnQgPSBOdW1iZXIucGFyc2VJbnQoIHByb3BzTWF0Y2hlc1sgaSBdWyAwIF0gKTtcblxuXHRcdFx0aWYgKCBOdW1iZXIuaXNOYU4oIGNvdW50ICkgPT09IGZhbHNlICkgaSArKztcblx0XHRcdGVsc2UgY291bnQgPSBudWxsO1xuXG5cdFx0XHRjb25zdCBuYW1lID0gcHJvcHNNYXRjaGVzWyBpICsrIF1bIDAgXTtcblxuXHRcdFx0aW5wdXRzLnB1c2goIG5ldyBOb2RlRnVuY3Rpb25JbnB1dCggdHlwZSwgbmFtZSwgY291bnQsIHF1YWxpZmllciwgaXNDb25zdCApICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgYmxvY2tDb2RlID0gbWFpbkNvZGUuc3Vic3RyaW5nKCBkZWNsYXJhdGlvblsgMCBdLmxlbmd0aCApO1xuXG5cdFx0Y29uc3QgbmFtZSA9IGRlY2xhcmF0aW9uWyAzIF0gIT09IHVuZGVmaW5lZCA/IGRlY2xhcmF0aW9uWyAzIF0gOiAnJztcblx0XHRjb25zdCB0eXBlID0gZGVjbGFyYXRpb25bIDIgXTtcblxuXHRcdGNvbnN0IHByZWNpc2lvbiA9IGRlY2xhcmF0aW9uWyAxIF0gIT09IHVuZGVmaW5lZCA/IGRlY2xhcmF0aW9uWyAxIF0gOiAnJztcblxuXHRcdGNvbnN0IGhlYWRlckNvZGUgPSBwcmFnbWFNYWluSW5kZXggIT09IC0gMSA/IHNvdXJjZS5zbGljZSggMCwgcHJhZ21hTWFpbkluZGV4ICkgOiAnJztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlLFxuXHRcdFx0aW5wdXRzLFxuXHRcdFx0bmFtZSxcblx0XHRcdHByZWNpc2lvbixcblx0XHRcdGlucHV0c0NvZGUsXG5cdFx0XHRibG9ja0NvZGUsXG5cdFx0XHRoZWFkZXJDb2RlXG5cdFx0fTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnRnVuY3Rpb25Ob2RlOiBGdW5jdGlvbiBpcyBub3QgYSBHTFNMIGNvZGUuJyApO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBHTFNMIG5vZGUgZnVuY3Rpb24uXG4gKlxuICogQGF1Z21lbnRzIE5vZGVGdW5jdGlvblxuICovXG5jbGFzcyBHTFNMTm9kZUZ1bmN0aW9uIGV4dGVuZHMgTm9kZUZ1bmN0aW9uIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBHTFNMIG5vZGUgZnVuY3Rpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgLSBUaGUgR0xTTCBzb3VyY2UuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggc291cmNlICkge1xuXG5cdFx0Y29uc3QgeyB0eXBlLCBpbnB1dHMsIG5hbWUsIHByZWNpc2lvbiwgaW5wdXRzQ29kZSwgYmxvY2tDb2RlLCBoZWFkZXJDb2RlIH0gPSBwYXJzZSggc291cmNlICk7XG5cblx0XHRzdXBlciggdHlwZSwgaW5wdXRzLCBuYW1lLCBwcmVjaXNpb24gKTtcblxuXHRcdHRoaXMuaW5wdXRzQ29kZSA9IGlucHV0c0NvZGU7XG5cdFx0dGhpcy5ibG9ja0NvZGUgPSBibG9ja0NvZGU7XG5cdFx0dGhpcy5oZWFkZXJDb2RlID0gaGVhZGVyQ29kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIEdMU0wgY29kZSBvZiB0aGUgbm9kZSBmdW5jdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lPXRoaXMubmFtZV0gLSBUaGUgZnVuY3Rpb24ncyBuYW1lLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzaGFkZXIgY29kZS5cblx0ICovXG5cdGdldENvZGUoIG5hbWUgPSB0aGlzLm5hbWUgKSB7XG5cblx0XHRsZXQgY29kZTtcblxuXHRcdGNvbnN0IGJsb2NrQ29kZSA9IHRoaXMuYmxvY2tDb2RlO1xuXG5cdFx0aWYgKCBibG9ja0NvZGUgIT09ICcnICkge1xuXG5cdFx0XHRjb25zdCB7IHR5cGUsIGlucHV0c0NvZGUsIGhlYWRlckNvZGUsIHByZWNpc2lvbiB9ID0gdGhpcztcblxuXHRcdFx0bGV0IGRlY2xhcmF0aW9uQ29kZSA9IGAkeyB0eXBlIH0gJHsgbmFtZSB9ICggJHsgaW5wdXRzQ29kZS50cmltKCkgfSApYDtcblxuXHRcdFx0aWYgKCBwcmVjaXNpb24gIT09ICcnICkge1xuXG5cdFx0XHRcdGRlY2xhcmF0aW9uQ29kZSA9IGAkeyBwcmVjaXNpb24gfSAkeyBkZWNsYXJhdGlvbkNvZGUgfWA7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29kZSA9IGhlYWRlckNvZGUgKyBkZWNsYXJhdGlvbkNvZGUgKyBibG9ja0NvZGU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBpbnRlcmZhY2UgZnVuY3Rpb25cblxuXHRcdFx0Y29kZSA9ICcnO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvZGU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEdMU0xOb2RlRnVuY3Rpb247XG4iLCJpbXBvcnQgTm9kZVBhcnNlciBmcm9tICcuLi9jb3JlL05vZGVQYXJzZXIuanMnO1xuaW1wb3J0IEdMU0xOb2RlRnVuY3Rpb24gZnJvbSAnLi9HTFNMTm9kZUZ1bmN0aW9uLmpzJztcblxuLyoqXG4gKiBBIEdMU0wgbm9kZSBwYXJzZXIuXG4gKlxuICogQGF1Z21lbnRzIE5vZGVQYXJzZXJcbiAqL1xuY2xhc3MgR0xTTE5vZGVQYXJzZXIgZXh0ZW5kcyBOb2RlUGFyc2VyIHtcblxuXHQvKipcblx0ICogVGhlIG1ldGhvZCBwYXJzZXMgdGhlIGdpdmVuIEdMU0wgY29kZSBhbiByZXR1cm5zIGEgbm9kZSBmdW5jdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSAtIFRoZSBHTFNMIGNvZGUuXG5cdCAqIEByZXR1cm4ge0dMU0xOb2RlRnVuY3Rpb259IEEgbm9kZSBmdW5jdGlvbi5cblx0ICovXG5cdHBhcnNlRnVuY3Rpb24oIHNvdXJjZSApIHtcblxuXHRcdHJldHVybiBuZXcgR0xTTE5vZGVGdW5jdGlvbiggc291cmNlICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEdMU0xOb2RlUGFyc2VyO1xuIiwiaW1wb3J0IERhdGFNYXAgZnJvbSAnLi4vRGF0YU1hcC5qcyc7XG5pbXBvcnQgQ2hhaW5NYXAgZnJvbSAnLi4vQ2hhaW5NYXAuanMnO1xuaW1wb3J0IE5vZGVCdWlsZGVyU3RhdGUgZnJvbSAnLi9Ob2RlQnVpbGRlclN0YXRlLmpzJztcbmltcG9ydCB7IGN1YmVNYXBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vbm9kZXMvdXRpbHMvQ3ViZU1hcE5vZGUuanMnO1xuaW1wb3J0IHsgTm9kZUZyYW1lIH0gZnJvbSAnLi4vLi4vLi4vbm9kZXMvTm9kZXMuanMnO1xuaW1wb3J0IHsgb2JqZWN0R3JvdXAsIHJlbmRlckdyb3VwLCBmcmFtZUdyb3VwLCBjdWJlVGV4dHVyZSwgdGV4dHVyZSwgZm9nLCByYW5nZUZvZ0ZhY3RvciwgZGVuc2l0eUZvZ0ZhY3RvciwgcmVmZXJlbmNlLCBwbXJlbVRleHR1cmUsIHNjcmVlblVWIH0gZnJvbSAnLi4vLi4vLi4vbm9kZXMvVFNMLmpzJztcblxuaW1wb3J0IHsgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBoYXNoQXJyYXkgfSBmcm9tICcuLi8uLi8uLi9ub2Rlcy9jb3JlL05vZGVVdGlscy5qcyc7XG5cbmNvbnN0IF9vdXRwdXROb2RlTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IF9jaGFpbktleXMgPSBbXTtcbmNvbnN0IF9jYWNoZUtleVZhbHVlcyA9IFtdO1xuXG4vKipcbiAqIFRoaXMgcmVuZGVyZXIgbW9kdWxlIG1hbmFnZXMgbm9kZS1yZWxhdGVkIG9iamVjdHMgYW5kIGlzIHRoZVxuICogcHJpbWFyeSBpbnRlcmZhY2UgYmV0d2VlbiB0aGUgcmVuZGVyZXIgYW5kIHRoZSBub2RlIHN5c3RlbS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIERhdGFNYXBcbiAqL1xuY2xhc3MgTm9kZXMgZXh0ZW5kcyBEYXRhTWFwIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlcyBtYW5hZ2VtZW50IGNvbXBvbmVudC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7QmFja2VuZH0gYmFja2VuZCAtIFRoZSByZW5kZXJlcidzIGJhY2tlbmQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcmVuZGVyZXIsIGJhY2tlbmQgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlbmRlcmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1JlbmRlcmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXJlcidzIGJhY2tlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QmFja2VuZH1cblx0XHQgKi9cblx0XHR0aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgZnJhbWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7UmVuZGVyZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlRnJhbWUgPSBuZXcgTm9kZUZyYW1lKCk7XG5cblx0XHQvKipcblx0XHQgKiBBIGNhY2hlIGZvciBtYW5hZ2luZyBub2RlIGJ1aWxkZXIgc3RhdGVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hcDxudW1iZXIsTm9kZUJ1aWxkZXJTdGF0ZT59XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlQnVpbGRlckNhY2hlID0gbmV3IE1hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBjYWNoZSBmb3IgbWFuYWdpbmcgZGF0YSBjYWNoZSBrZXkgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDaGFpbk1hcH1cblx0XHQgKi9cblx0XHR0aGlzLmNhbGxIYXNoQ2FjaGUgPSBuZXcgQ2hhaW5NYXAoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgY2FjaGUgZm9yIG1hbmFnaW5nIG5vZGUgdW5pZm9ybXMgZ3JvdXAgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDaGFpbk1hcH1cblx0XHQgKi9cblx0XHR0aGlzLmdyb3Vwc0RhdGEgPSBuZXcgQ2hhaW5NYXAoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgY2FjaGUgZm9yIG1hbmFnaW5nIG5vZGUgb2JqZWN0cyBvZlxuXHRcdCAqIHNjZW5lIHByb3BlcnRpZXMgbGlrZSBmb2cgb3IgZW52aXJvbm1lbnRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsV2Vha01hcD59XG5cdFx0ICovXG5cdFx0dGhpcy5jYWNoZUxpYiA9IHt9O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG5vZGUgdW5pZm9ybXMgZ3JvdXAgbXVzdCBiZSB1cGRhdGVkIG9yIG5vdC5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlVW5pZm9ybXNHcm91cH0gbm9kZVVuaWZvcm1zR3JvdXAgLSBUaGUgbm9kZSB1bmlmb3JtcyBncm91cC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgbm9kZSB1bmlmb3JtcyBncm91cCByZXF1aXJlcyBhbiB1cGRhdGUgb3Igbm90LlxuXHQgKi9cblx0dXBkYXRlR3JvdXAoIG5vZGVVbmlmb3Jtc0dyb3VwICkge1xuXG5cdFx0Y29uc3QgZ3JvdXBOb2RlID0gbm9kZVVuaWZvcm1zR3JvdXAuZ3JvdXBOb2RlO1xuXHRcdGNvbnN0IG5hbWUgPSBncm91cE5vZGUubmFtZTtcblxuXHRcdC8vIG9iamVjdEdyb3VwIGlzIGFsd2F5cyB1cGRhdGVkXG5cblx0XHRpZiAoIG5hbWUgPT09IG9iamVjdEdyb3VwLm5hbWUgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdC8vIHJlbmRlckdyb3VwIGlzIHVwZGF0ZWQgb25jZSBwZXIgcmVuZGVyL2NvbXB1dGUgY2FsbFxuXG5cdFx0aWYgKCBuYW1lID09PSByZW5kZXJHcm91cC5uYW1lICkge1xuXG5cdFx0XHRjb25zdCB1bmlmb3Jtc0dyb3VwRGF0YSA9IHRoaXMuZ2V0KCBub2RlVW5pZm9ybXNHcm91cCApO1xuXHRcdFx0Y29uc3QgcmVuZGVySWQgPSB0aGlzLm5vZGVGcmFtZS5yZW5kZXJJZDtcblxuXHRcdFx0aWYgKCB1bmlmb3Jtc0dyb3VwRGF0YS5yZW5kZXJJZCAhPT0gcmVuZGVySWQgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXNHcm91cERhdGEucmVuZGVySWQgPSByZW5kZXJJZDtcblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyBmcmFtZUdyb3VwIGlzIHVwZGF0ZWQgb25jZSBwZXIgZnJhbWVcblxuXHRcdGlmICggbmFtZSA9PT0gZnJhbWVHcm91cC5uYW1lICkge1xuXG5cdFx0XHRjb25zdCB1bmlmb3Jtc0dyb3VwRGF0YSA9IHRoaXMuZ2V0KCBub2RlVW5pZm9ybXNHcm91cCApO1xuXHRcdFx0Y29uc3QgZnJhbWVJZCA9IHRoaXMubm9kZUZyYW1lLmZyYW1lSWQ7XG5cblx0XHRcdGlmICggdW5pZm9ybXNHcm91cERhdGEuZnJhbWVJZCAhPT0gZnJhbWVJZCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtc0dyb3VwRGF0YS5mcmFtZUlkID0gZnJhbWVJZDtcblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyBvdGhlciBncm91cHMgYXJlIHVwZGF0ZWQganVzdCB3aGVuIGdyb3VwTm9kZS5uZWVkc1VwZGF0ZSBpcyB0cnVlXG5cblx0XHRfY2hhaW5LZXlzWyAwIF0gPSBncm91cE5vZGU7XG5cdFx0X2NoYWluS2V5c1sgMSBdID0gbm9kZVVuaWZvcm1zR3JvdXA7XG5cblx0XHRsZXQgZ3JvdXBEYXRhID0gdGhpcy5ncm91cHNEYXRhLmdldCggX2NoYWluS2V5cyApO1xuXHRcdGlmICggZ3JvdXBEYXRhID09PSB1bmRlZmluZWQgKSB0aGlzLmdyb3Vwc0RhdGEuc2V0KCBfY2hhaW5LZXlzLCBncm91cERhdGEgPSB7fSApO1xuXG5cdFx0X2NoYWluS2V5cy5sZW5ndGggPSAwO1xuXG5cdFx0aWYgKCBncm91cERhdGEudmVyc2lvbiAhPT0gZ3JvdXBOb2RlLnZlcnNpb24gKSB7XG5cblx0XHRcdGdyb3VwRGF0YS52ZXJzaW9uID0gZ3JvdXBOb2RlLnZlcnNpb247XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2FjaGUga2V5IGZvciB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjYWNoZSBrZXkuXG5cdCAqL1xuXHRnZXRGb3JSZW5kZXJDYWNoZUtleSggcmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0cmV0dXJuIHJlbmRlck9iamVjdC5pbml0aWFsQ2FjaGVLZXk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbm9kZSBidWlsZGVyIHN0YXRlIGZvciB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtOb2RlQnVpbGRlclN0YXRlfSBUaGUgbm9kZSBidWlsZGVyIHN0YXRlLlxuXHQgKi9cblx0Z2V0Rm9yUmVuZGVyKCByZW5kZXJPYmplY3QgKSB7XG5cblx0XHRjb25zdCByZW5kZXJPYmplY3REYXRhID0gdGhpcy5nZXQoIHJlbmRlck9iamVjdCApO1xuXG5cdFx0bGV0IG5vZGVCdWlsZGVyU3RhdGUgPSByZW5kZXJPYmplY3REYXRhLm5vZGVCdWlsZGVyU3RhdGU7XG5cblx0XHRpZiAoIG5vZGVCdWlsZGVyU3RhdGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgeyBub2RlQnVpbGRlckNhY2hlIH0gPSB0aGlzO1xuXG5cdFx0XHRjb25zdCBjYWNoZUtleSA9IHRoaXMuZ2V0Rm9yUmVuZGVyQ2FjaGVLZXkoIHJlbmRlck9iamVjdCApO1xuXG5cdFx0XHRub2RlQnVpbGRlclN0YXRlID0gbm9kZUJ1aWxkZXJDYWNoZS5nZXQoIGNhY2hlS2V5ICk7XG5cblx0XHRcdGlmICggbm9kZUJ1aWxkZXJTdGF0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnN0IG5vZGVCdWlsZGVyID0gdGhpcy5iYWNrZW5kLmNyZWF0ZU5vZGVCdWlsZGVyKCByZW5kZXJPYmplY3Qub2JqZWN0LCB0aGlzLnJlbmRlcmVyICk7XG5cdFx0XHRcdG5vZGVCdWlsZGVyLnNjZW5lID0gcmVuZGVyT2JqZWN0LnNjZW5lO1xuXHRcdFx0XHRub2RlQnVpbGRlci5tYXRlcmlhbCA9IHJlbmRlck9iamVjdC5tYXRlcmlhbDtcblx0XHRcdFx0bm9kZUJ1aWxkZXIuY2FtZXJhID0gcmVuZGVyT2JqZWN0LmNhbWVyYTtcblx0XHRcdFx0bm9kZUJ1aWxkZXIuY29udGV4dC5tYXRlcmlhbCA9IHJlbmRlck9iamVjdC5tYXRlcmlhbDtcblx0XHRcdFx0bm9kZUJ1aWxkZXIubGlnaHRzTm9kZSA9IHJlbmRlck9iamVjdC5saWdodHNOb2RlO1xuXHRcdFx0XHRub2RlQnVpbGRlci5lbnZpcm9ubWVudE5vZGUgPSB0aGlzLmdldEVudmlyb25tZW50Tm9kZSggcmVuZGVyT2JqZWN0LnNjZW5lICk7XG5cdFx0XHRcdG5vZGVCdWlsZGVyLmZvZ05vZGUgPSB0aGlzLmdldEZvZ05vZGUoIHJlbmRlck9iamVjdC5zY2VuZSApO1xuXHRcdFx0XHRub2RlQnVpbGRlci5jbGlwcGluZ0NvbnRleHQgPSByZW5kZXJPYmplY3QuY2xpcHBpbmdDb250ZXh0O1xuXHRcdFx0XHRub2RlQnVpbGRlci5idWlsZCgpO1xuXG5cdFx0XHRcdG5vZGVCdWlsZGVyU3RhdGUgPSB0aGlzLl9jcmVhdGVOb2RlQnVpbGRlclN0YXRlKCBub2RlQnVpbGRlciApO1xuXG5cdFx0XHRcdG5vZGVCdWlsZGVyQ2FjaGUuc2V0KCBjYWNoZUtleSwgbm9kZUJ1aWxkZXJTdGF0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG5vZGVCdWlsZGVyU3RhdGUudXNlZFRpbWVzICsrO1xuXG5cdFx0XHRyZW5kZXJPYmplY3REYXRhLm5vZGVCdWlsZGVyU3RhdGUgPSBub2RlQnVpbGRlclN0YXRlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGVCdWlsZGVyU3RhdGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWxldGVzIHRoZSBnaXZlbiBvYmplY3QgZnJvbSB0aGUgaW50ZXJuYWwgZGF0YSBtYXBcblx0ICpcblx0ICogQHBhcmFtIHthbnl9IG9iamVjdCAtIFRoZSBvYmplY3QgdG8gZGVsZXRlLlxuXHQgKiBAcmV0dXJuIHs/T2JqZWN0fSBUaGUgZGVsZXRlZCBkaWN0aW9uYXJ5LlxuXHQgKi9cblx0ZGVsZXRlKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIG9iamVjdC5pc1JlbmRlck9iamVjdCApIHtcblxuXHRcdFx0Y29uc3Qgbm9kZUJ1aWxkZXJTdGF0ZSA9IHRoaXMuZ2V0KCBvYmplY3QgKS5ub2RlQnVpbGRlclN0YXRlO1xuXHRcdFx0bm9kZUJ1aWxkZXJTdGF0ZS51c2VkVGltZXMgLS07XG5cblx0XHRcdGlmICggbm9kZUJ1aWxkZXJTdGF0ZS51c2VkVGltZXMgPT09IDAgKSB7XG5cblx0XHRcdFx0dGhpcy5ub2RlQnVpbGRlckNhY2hlLmRlbGV0ZSggdGhpcy5nZXRGb3JSZW5kZXJDYWNoZUtleSggb2JqZWN0ICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN1cGVyLmRlbGV0ZSggb2JqZWN0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbm9kZSBidWlsZGVyIHN0YXRlIGZvciB0aGUgZ2l2ZW4gY29tcHV0ZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV9IGNvbXB1dGVOb2RlIC0gVGhlIGNvbXB1dGUgbm9kZS5cblx0ICogQHJldHVybiB7Tm9kZUJ1aWxkZXJTdGF0ZX0gVGhlIG5vZGUgYnVpbGRlciBzdGF0ZS5cblx0ICovXG5cdGdldEZvckNvbXB1dGUoIGNvbXB1dGVOb2RlICkge1xuXG5cdFx0Y29uc3QgY29tcHV0ZURhdGEgPSB0aGlzLmdldCggY29tcHV0ZU5vZGUgKTtcblxuXHRcdGxldCBub2RlQnVpbGRlclN0YXRlID0gY29tcHV0ZURhdGEubm9kZUJ1aWxkZXJTdGF0ZTtcblxuXHRcdGlmICggbm9kZUJ1aWxkZXJTdGF0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBub2RlQnVpbGRlciA9IHRoaXMuYmFja2VuZC5jcmVhdGVOb2RlQnVpbGRlciggY29tcHV0ZU5vZGUsIHRoaXMucmVuZGVyZXIgKTtcblx0XHRcdG5vZGVCdWlsZGVyLmJ1aWxkKCk7XG5cblx0XHRcdG5vZGVCdWlsZGVyU3RhdGUgPSB0aGlzLl9jcmVhdGVOb2RlQnVpbGRlclN0YXRlKCBub2RlQnVpbGRlciApO1xuXG5cdFx0XHRjb21wdXRlRGF0YS5ub2RlQnVpbGRlclN0YXRlID0gbm9kZUJ1aWxkZXJTdGF0ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBub2RlQnVpbGRlclN0YXRlO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5vZGUgYnVpbGRlciBzdGF0ZSBmb3IgdGhlIGdpdmVuIG5vZGUgYnVpbGRlci5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOb2RlQnVpbGRlcn0gbm9kZUJ1aWxkZXIgLSBUaGUgbm9kZSBidWlsZGVyLlxuXHQgKiBAcmV0dXJuIHtOb2RlQnVpbGRlclN0YXRlfSBUaGUgbm9kZSBidWlsZGVyIHN0YXRlLlxuXHQgKi9cblx0X2NyZWF0ZU5vZGVCdWlsZGVyU3RhdGUoIG5vZGVCdWlsZGVyICkge1xuXG5cdFx0cmV0dXJuIG5ldyBOb2RlQnVpbGRlclN0YXRlKFxuXHRcdFx0bm9kZUJ1aWxkZXIudmVydGV4U2hhZGVyLFxuXHRcdFx0bm9kZUJ1aWxkZXIuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRub2RlQnVpbGRlci5jb21wdXRlU2hhZGVyLFxuXHRcdFx0bm9kZUJ1aWxkZXIuZ2V0QXR0cmlidXRlc0FycmF5KCksXG5cdFx0XHRub2RlQnVpbGRlci5nZXRCaW5kaW5ncygpLFxuXHRcdFx0bm9kZUJ1aWxkZXIudXBkYXRlTm9kZXMsXG5cdFx0XHRub2RlQnVpbGRlci51cGRhdGVCZWZvcmVOb2Rlcyxcblx0XHRcdG5vZGVCdWlsZGVyLnVwZGF0ZUFmdGVyTm9kZXMsXG5cdFx0XHRub2RlQnVpbGRlci5vYnNlcnZlcixcblx0XHRcdG5vZGVCdWlsZGVyLnRyYW5zZm9ybXNcblx0XHQpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBlbnZpcm9ubWVudCBub2RlIGZvciB0aGUgY3VycmVudCBjb25maWd1cmVkXG5cdCAqIHNjZW5lIGVudmlyb25tZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZS5cblx0ICogQHJldHVybiB7Tm9kZX0gQSBub2RlIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBzY2VuZSBlbnZpcm9ubWVudC5cblx0ICovXG5cdGdldEVudmlyb25tZW50Tm9kZSggc2NlbmUgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZUVudmlyb25tZW50KCBzY2VuZSApO1xuXG5cdFx0bGV0IGVudmlyb25tZW50Tm9kZSA9IG51bGw7XG5cblx0XHRpZiAoIHNjZW5lLmVudmlyb25tZW50Tm9kZSAmJiBzY2VuZS5lbnZpcm9ubWVudE5vZGUuaXNOb2RlICkge1xuXG5cdFx0XHRlbnZpcm9ubWVudE5vZGUgPSBzY2VuZS5lbnZpcm9ubWVudE5vZGU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBzY2VuZURhdGEgPSB0aGlzLmdldCggc2NlbmUgKTtcblxuXHRcdFx0aWYgKCBzY2VuZURhdGEuZW52aXJvbm1lbnROb2RlICkge1xuXG5cdFx0XHRcdGVudmlyb25tZW50Tm9kZSA9IHNjZW5lRGF0YS5lbnZpcm9ubWVudE5vZGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBlbnZpcm9ubWVudE5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgYmFja2dyb3VuZCBub2RlIGZvciB0aGUgY3VycmVudCBjb25maWd1cmVkXG5cdCAqIHNjZW5lIGJhY2tncm91bmQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lLlxuXHQgKiBAcmV0dXJuIHtOb2RlfSBBIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHNjZW5lIGJhY2tncm91bmQuXG5cdCAqL1xuXHRnZXRCYWNrZ3JvdW5kTm9kZSggc2NlbmUgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZUJhY2tncm91bmQoIHNjZW5lICk7XG5cblx0XHRsZXQgYmFja2dyb3VuZE5vZGUgPSBudWxsO1xuXG5cdFx0aWYgKCBzY2VuZS5iYWNrZ3JvdW5kTm9kZSAmJiBzY2VuZS5iYWNrZ3JvdW5kTm9kZS5pc05vZGUgKSB7XG5cblx0XHRcdGJhY2tncm91bmROb2RlID0gc2NlbmUuYmFja2dyb3VuZE5vZGU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBzY2VuZURhdGEgPSB0aGlzLmdldCggc2NlbmUgKTtcblxuXHRcdFx0aWYgKCBzY2VuZURhdGEuYmFja2dyb3VuZE5vZGUgKSB7XG5cblx0XHRcdFx0YmFja2dyb3VuZE5vZGUgPSBzY2VuZURhdGEuYmFja2dyb3VuZE5vZGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBiYWNrZ3JvdW5kTm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBmb2cgbm9kZSBmb3IgdGhlIGN1cnJlbnQgY29uZmlndXJlZCBzY2VuZSBmb2cuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lLlxuXHQgKiBAcmV0dXJuIHtOb2RlfSBBIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHNjZW5lIGZvZy5cblx0ICovXG5cdGdldEZvZ05vZGUoIHNjZW5lICkge1xuXG5cdFx0dGhpcy51cGRhdGVGb2coIHNjZW5lICk7XG5cblx0XHRyZXR1cm4gc2NlbmUuZm9nTm9kZSB8fCB0aGlzLmdldCggc2NlbmUgKS5mb2dOb2RlIHx8IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgY2FjaGUga2V5IGZvciB0aGUgZ2l2ZW4gc2NlbmUgYW5kIGxpZ2h0cyBub2RlLlxuXHQgKiBUaGlzIGtleSBpcyB1c2VkIGJ5IGBSZW5kZXJPYmplY3RgIGFzIGEgcGFydCBvZiB0aGUgZHluYW1pY1xuXHQgKiBjYWNoZSBrZXkgKGEga2V5IHRoYXQgbXVzdCBiZSBjaGVja2VkIGV2ZXJ5IHRpbWUgdGhlIHJlbmRlclxuXHQgKiBvYmplY3RzIGlzIGRyYXduKS5cblx0ICpcblx0ICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBUaGUgc2NlbmUuXG5cdCAqIEBwYXJhbSB7TGlnaHRzTm9kZX0gbGlnaHRzTm9kZSAtIFRoZSBsaWdodHMgbm9kZS5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY2FjaGUga2V5LlxuXHQgKi9cblx0Z2V0Q2FjaGVLZXkoIHNjZW5lLCBsaWdodHNOb2RlICkge1xuXG5cdFx0X2NoYWluS2V5c1sgMCBdID0gc2NlbmU7XG5cdFx0X2NoYWluS2V5c1sgMSBdID0gbGlnaHRzTm9kZTtcblxuXHRcdGNvbnN0IGNhbGxJZCA9IHRoaXMucmVuZGVyZXIuaW5mby5jYWxscztcblxuXHRcdGNvbnN0IGNhY2hlS2V5RGF0YSA9IHRoaXMuY2FsbEhhc2hDYWNoZS5nZXQoIF9jaGFpbktleXMgKSB8fCB7fTtcblxuXHRcdGlmICggY2FjaGVLZXlEYXRhLmNhbGxJZCAhPT0gY2FsbElkICkge1xuXG5cdFx0XHRjb25zdCBlbnZpcm9ubWVudE5vZGUgPSB0aGlzLmdldEVudmlyb25tZW50Tm9kZSggc2NlbmUgKTtcblx0XHRcdGNvbnN0IGZvZ05vZGUgPSB0aGlzLmdldEZvZ05vZGUoIHNjZW5lICk7XG5cblx0XHRcdGlmICggbGlnaHRzTm9kZSApIF9jYWNoZUtleVZhbHVlcy5wdXNoKCBsaWdodHNOb2RlLmdldENhY2hlS2V5KCB0cnVlICkgKTtcblx0XHRcdGlmICggZW52aXJvbm1lbnROb2RlICkgX2NhY2hlS2V5VmFsdWVzLnB1c2goIGVudmlyb25tZW50Tm9kZS5nZXRDYWNoZUtleSgpICk7XG5cdFx0XHRpZiAoIGZvZ05vZGUgKSBfY2FjaGVLZXlWYWx1ZXMucHVzaCggZm9nTm9kZS5nZXRDYWNoZUtleSgpICk7XG5cblx0XHRcdF9jYWNoZUtleVZhbHVlcy5wdXNoKCB0aGlzLnJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID8gMSA6IDAgKTtcblxuXHRcdFx0Y2FjaGVLZXlEYXRhLmNhbGxJZCA9IGNhbGxJZDtcblx0XHRcdGNhY2hlS2V5RGF0YS5jYWNoZUtleSA9IGhhc2hBcnJheSggX2NhY2hlS2V5VmFsdWVzICk7XG5cblx0XHRcdHRoaXMuY2FsbEhhc2hDYWNoZS5zZXQoIF9jaGFpbktleXMsIGNhY2hlS2V5RGF0YSApO1xuXG5cdFx0XHRfY2FjaGVLZXlWYWx1ZXMubGVuZ3RoID0gMDtcblxuXHRcdH1cblxuXHRcdF9jaGFpbktleXMubGVuZ3RoID0gMDtcblxuXHRcdHJldHVybiBjYWNoZUtleURhdGEuY2FjaGVLZXk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0b25lIG1hcHBpbmcgc2hvdWxkIGJlIGVuYWJsZWRcblx0ICogb3Igbm90LlxuXHQgKlxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICovXG5cdGdldCBpc1RvbmVNYXBwaW5nU3RhdGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5yZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKSA/IGZhbHNlIDogdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIGEgc2NlbmUgYmFja2dyb3VuZCBpcyBjb25maWd1cmVkLCB0aGlzIG1ldGhvZCBtYWtlcyBzdXJlIHRvXG5cdCAqIHJlcHJlc2VudCB0aGUgYmFja2dyb3VuZCB3aXRoIGEgY29ycmVzcG9uZGluZyBub2RlLWJhc2VkIGltcGxlbWVudGF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZS5cblx0ICovXG5cdHVwZGF0ZUJhY2tncm91bmQoIHNjZW5lICkge1xuXG5cdFx0Y29uc3Qgc2NlbmVEYXRhID0gdGhpcy5nZXQoIHNjZW5lICk7XG5cdFx0Y29uc3QgYmFja2dyb3VuZCA9IHNjZW5lLmJhY2tncm91bmQ7XG5cblx0XHRpZiAoIGJhY2tncm91bmQgKSB7XG5cblx0XHRcdGNvbnN0IGZvcmNlVXBkYXRlID0gKCBzY2VuZS5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA9PT0gMCAmJiBzY2VuZURhdGEuYmFja2dyb3VuZEJsdXJyaW5lc3MgPiAwICkgfHwgKCBzY2VuZS5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA+IDAgJiYgc2NlbmVEYXRhLmJhY2tncm91bmRCbHVycmluZXNzID09PSAwICk7XG5cblx0XHRcdGlmICggc2NlbmVEYXRhLmJhY2tncm91bmQgIT09IGJhY2tncm91bmQgfHwgZm9yY2VVcGRhdGUgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmFja2dyb3VuZE5vZGUgPSB0aGlzLmdldENhY2hlTm9kZSggJ2JhY2tncm91bmQnLCBiYWNrZ3JvdW5kLCAoKSA9PiB7XG5cblx0XHRcdFx0XHRpZiAoIGJhY2tncm91bmQuaXNDdWJlVGV4dHVyZSA9PT0gdHJ1ZSB8fCAoIGJhY2tncm91bmQubWFwcGluZyA9PT0gRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcgfHwgYmFja2dyb3VuZC5tYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyB8fCBiYWNrZ3JvdW5kLm1hcHBpbmcgPT09IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggc2NlbmUuYmFja2dyb3VuZEJsdXJyaW5lc3MgPiAwIHx8IGJhY2tncm91bmQubWFwcGluZyA9PT0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBtcmVtVGV4dHVyZSggYmFja2dyb3VuZCApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGxldCBlbnZNYXA7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBiYWNrZ3JvdW5kLmlzQ3ViZVRleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRlbnZNYXAgPSBjdWJlVGV4dHVyZSggYmFja2dyb3VuZCApO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRlbnZNYXAgPSB0ZXh0dXJlKCBiYWNrZ3JvdW5kICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBjdWJlTWFwTm9kZSggZW52TWFwICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGJhY2tncm91bmQuaXNUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGV4dHVyZSggYmFja2dyb3VuZCwgc2NyZWVuVVYuZmxpcFkoKSApLnNldFVwZGF0ZU1hdHJpeCggdHJ1ZSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggYmFja2dyb3VuZC5pc0NvbG9yICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnV2ViR1BVTm9kZXM6IFVuc3VwcG9ydGVkIGJhY2tncm91bmQgY29uZmlndXJhdGlvbi4nLCBiYWNrZ3JvdW5kICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSwgZm9yY2VVcGRhdGUgKTtcblxuXHRcdFx0XHRzY2VuZURhdGEuYmFja2dyb3VuZE5vZGUgPSBiYWNrZ3JvdW5kTm9kZTtcblx0XHRcdFx0c2NlbmVEYXRhLmJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuXHRcdFx0XHRzY2VuZURhdGEuYmFja2dyb3VuZEJsdXJyaW5lc3MgPSBzY2VuZS5iYWNrZ3JvdW5kQmx1cnJpbmVzcztcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggc2NlbmVEYXRhLmJhY2tncm91bmROb2RlICkge1xuXG5cdFx0XHRkZWxldGUgc2NlbmVEYXRhLmJhY2tncm91bmROb2RlO1xuXHRcdFx0ZGVsZXRlIHNjZW5lRGF0YS5iYWNrZ3JvdW5kO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUgY2FjaGluZyBvZiBub2RlcyB3aGljaCBhcmUgdXNlZCB0byByZXByZXNlbnRzIHRoZVxuXHQgKiBzY2VuZSdzIGJhY2tncm91bmQsIGZvZyBvciBlbnZpcm9ubWVudC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBvYmplY3QgdG8gY2FjaGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBUaGUgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgY2FsbGJhY2sgdGhhdCBwcm9kdWNlcyBhIG5vZGUgcmVwcmVzZW50YXRpb24gZm9yIHRoZSBnaXZlbiBvYmplY3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ZvcmNlVXBkYXRlPWZhbHNlXSAtIFdoZXRoZXIgYW4gdXBkYXRlIHNob3VsZCBiZSBlbmZvcmNlZCBvciBub3QuXG5cdCAqIEByZXR1cm4ge05vZGV9IFRoZSBub2RlIHJlcHJlc2VudGF0aW9uLlxuXHQgKi9cblx0Z2V0Q2FjaGVOb2RlKCB0eXBlLCBvYmplY3QsIGNhbGxiYWNrLCBmb3JjZVVwZGF0ZSA9IGZhbHNlICkge1xuXG5cdFx0Y29uc3Qgbm9kZUNhY2hlID0gdGhpcy5jYWNoZUxpYlsgdHlwZSBdIHx8ICggdGhpcy5jYWNoZUxpYlsgdHlwZSBdID0gbmV3IFdlYWtNYXAoKSApO1xuXG5cdFx0bGV0IG5vZGUgPSBub2RlQ2FjaGUuZ2V0KCBvYmplY3QgKTtcblxuXHRcdGlmICggbm9kZSA9PT0gdW5kZWZpbmVkIHx8IGZvcmNlVXBkYXRlICkge1xuXG5cdFx0XHRub2RlID0gY2FsbGJhY2soKTtcblx0XHRcdG5vZGVDYWNoZS5zZXQoIG9iamVjdCwgbm9kZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJZiBhIHNjZW5lIGZvZyBpcyBjb25maWd1cmVkLCB0aGlzIG1ldGhvZCBtYWtlcyBzdXJlIHRvXG5cdCAqIHJlcHJlc2VudCB0aGUgZm9nIHdpdGggYSBjb3JyZXNwb25kaW5nIG5vZGUtYmFzZWQgaW1wbGVtZW50YXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lLlxuXHQgKi9cblx0dXBkYXRlRm9nKCBzY2VuZSApIHtcblxuXHRcdGNvbnN0IHNjZW5lRGF0YSA9IHRoaXMuZ2V0KCBzY2VuZSApO1xuXHRcdGNvbnN0IHNjZW5lRm9nID0gc2NlbmUuZm9nO1xuXG5cdFx0aWYgKCBzY2VuZUZvZyApIHtcblxuXHRcdFx0aWYgKCBzY2VuZURhdGEuZm9nICE9PSBzY2VuZUZvZyApIHtcblxuXHRcdFx0XHRjb25zdCBmb2dOb2RlID0gdGhpcy5nZXRDYWNoZU5vZGUoICdmb2cnLCBzY2VuZUZvZywgKCkgPT4ge1xuXG5cdFx0XHRcdFx0aWYgKCBzY2VuZUZvZy5pc0ZvZ0V4cDIgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGNvbG9yID0gcmVmZXJlbmNlKCAnY29sb3InLCAnY29sb3InLCBzY2VuZUZvZyApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXHRcdFx0XHRcdFx0Y29uc3QgZGVuc2l0eSA9IHJlZmVyZW5jZSggJ2RlbnNpdHknLCAnZmxvYXQnLCBzY2VuZUZvZyApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gZm9nKCBjb2xvciwgZGVuc2l0eUZvZ0ZhY3RvciggZGVuc2l0eSApICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBzY2VuZUZvZy5pc0ZvZyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgY29sb3IgPSByZWZlcmVuY2UoICdjb2xvcicsICdjb2xvcicsIHNjZW5lRm9nICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cdFx0XHRcdFx0XHRjb25zdCBuZWFyID0gcmVmZXJlbmNlKCAnbmVhcicsICdmbG9hdCcsIHNjZW5lRm9nICkuc2V0R3JvdXAoIHJlbmRlckdyb3VwICk7XG5cdFx0XHRcdFx0XHRjb25zdCBmYXIgPSByZWZlcmVuY2UoICdmYXInLCAnZmxvYXQnLCBzY2VuZUZvZyApLnNldEdyb3VwKCByZW5kZXJHcm91cCApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gZm9nKCBjb2xvciwgcmFuZ2VGb2dGYWN0b3IoIG5lYXIsIGZhciApICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUmVuZGVyZXI6IFVuc3VwcG9ydGVkIGZvZyBjb25maWd1cmF0aW9uLicsIHNjZW5lRm9nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdHNjZW5lRGF0YS5mb2dOb2RlID0gZm9nTm9kZTtcblx0XHRcdFx0c2NlbmVEYXRhLmZvZyA9IHNjZW5lRm9nO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkZWxldGUgc2NlbmVEYXRhLmZvZ05vZGU7XG5cdFx0XHRkZWxldGUgc2NlbmVEYXRhLmZvZztcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIGEgc2NlbmUgZW52aXJvbm1lbnQgaXMgY29uZmlndXJlZCwgdGhpcyBtZXRob2QgbWFrZXMgc3VyZSB0b1xuXHQgKiByZXByZXNlbnQgdGhlIGVudmlyb25tZW50IHdpdGggYSBjb3JyZXNwb25kaW5nIG5vZGUtYmFzZWQgaW1wbGVtZW50YXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lLlxuXHQgKi9cblx0dXBkYXRlRW52aXJvbm1lbnQoIHNjZW5lICkge1xuXG5cdFx0Y29uc3Qgc2NlbmVEYXRhID0gdGhpcy5nZXQoIHNjZW5lICk7XG5cdFx0Y29uc3QgZW52aXJvbm1lbnQgPSBzY2VuZS5lbnZpcm9ubWVudDtcblxuXHRcdGlmICggZW52aXJvbm1lbnQgKSB7XG5cblx0XHRcdGlmICggc2NlbmVEYXRhLmVudmlyb25tZW50ICE9PSBlbnZpcm9ubWVudCApIHtcblxuXHRcdFx0XHRjb25zdCBlbnZpcm9ubWVudE5vZGUgPSB0aGlzLmdldENhY2hlTm9kZSggJ2Vudmlyb25tZW50JywgZW52aXJvbm1lbnQsICgpID0+IHtcblxuXHRcdFx0XHRcdGlmICggZW52aXJvbm1lbnQuaXNDdWJlVGV4dHVyZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIGN1YmVUZXh0dXJlKCBlbnZpcm9ubWVudCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggZW52aXJvbm1lbnQuaXNUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGV4dHVyZSggZW52aXJvbm1lbnQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdOb2RlczogVW5zdXBwb3J0ZWQgZW52aXJvbm1lbnQgY29uZmlndXJhdGlvbi4nLCBlbnZpcm9ubWVudCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRzY2VuZURhdGEuZW52aXJvbm1lbnROb2RlID0gZW52aXJvbm1lbnROb2RlO1xuXHRcdFx0XHRzY2VuZURhdGEuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggc2NlbmVEYXRhLmVudmlyb25tZW50Tm9kZSApIHtcblxuXHRcdFx0ZGVsZXRlIHNjZW5lRGF0YS5lbnZpcm9ubWVudE5vZGU7XG5cdFx0XHRkZWxldGUgc2NlbmVEYXRhLmVudmlyb25tZW50O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRnZXROb2RlRnJhbWUoIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlciwgc2NlbmUgPSBudWxsLCBvYmplY3QgPSBudWxsLCBjYW1lcmEgPSBudWxsLCBtYXRlcmlhbCA9IG51bGwgKSB7XG5cblx0XHRjb25zdCBub2RlRnJhbWUgPSB0aGlzLm5vZGVGcmFtZTtcblx0XHRub2RlRnJhbWUucmVuZGVyZXIgPSByZW5kZXJlcjtcblx0XHRub2RlRnJhbWUuc2NlbmUgPSBzY2VuZTtcblx0XHRub2RlRnJhbWUub2JqZWN0ID0gb2JqZWN0O1xuXHRcdG5vZGVGcmFtZS5jYW1lcmEgPSBjYW1lcmE7XG5cdFx0bm9kZUZyYW1lLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0XHRyZXR1cm4gbm9kZUZyYW1lO1xuXG5cdH1cblxuXHRnZXROb2RlRnJhbWVGb3JSZW5kZXIoIHJlbmRlck9iamVjdCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE5vZGVGcmFtZSggcmVuZGVyT2JqZWN0LnJlbmRlcmVyLCByZW5kZXJPYmplY3Quc2NlbmUsIHJlbmRlck9iamVjdC5vYmplY3QsIHJlbmRlck9iamVjdC5jYW1lcmEsIHJlbmRlck9iamVjdC5tYXRlcmlhbCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY3VycmVudCBvdXRwdXQgY2FjaGUga2V5LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBvdXRwdXQgY2FjaGUga2V5LlxuXHQgKi9cblx0Z2V0T3V0cHV0Q2FjaGVLZXkoKSB7XG5cblx0XHRjb25zdCByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cblx0XHRyZXR1cm4gcmVuZGVyZXIudG9uZU1hcHBpbmcgKyAnLCcgKyByZW5kZXJlci5jdXJyZW50Q29sb3JTcGFjZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgb3V0cHV0IGNvbmZpZ3VyYXRpb24gKHRvbmUgbWFwcGluZyBhbmQgY29sb3Igc3BhY2UpIGZvclxuXHQgKiB0aGUgZ2l2ZW4gdGFyZ2V0IGhhcyBjaGFuZ2VkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IG91dHB1dFRhcmdldCAtIFRoZSBvdXRwdXQgdGFyZ2V0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBvdXRwdXQgY29uZmlndXJhdGlvbiBoYXMgY2hhbmdlZCBvciBub3QuXG5cdCAqL1xuXHRoYXNPdXRwdXRDaGFuZ2UoIG91dHB1dFRhcmdldCApIHtcblxuXHRcdGNvbnN0IGNhY2hlS2V5ID0gX291dHB1dE5vZGVNYXAuZ2V0KCBvdXRwdXRUYXJnZXQgKTtcblxuXHRcdHJldHVybiBjYWNoZUtleSAhPT0gdGhpcy5nZXRPdXRwdXRDYWNoZUtleSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5vZGUgdGhhdCByZXByZXNlbnRzIHRoZSBvdXRwdXQgY29uZmlndXJhdGlvbiAodG9uZSBtYXBwaW5nIGFuZFxuXHQgKiBjb2xvciBzcGFjZSkgZm9yIHRoZSBjdXJyZW50IHRhcmdldC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSBvdXRwdXRUYXJnZXQgLSBUaGUgb3V0cHV0IHRhcmdldC5cblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIG91dHB1dCBub2RlLlxuXHQgKi9cblx0Z2V0T3V0cHV0Tm9kZSggb3V0cHV0VGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXHRcdGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZXRPdXRwdXRDYWNoZUtleSgpO1xuXG5cdFx0Y29uc3Qgb3V0cHV0ID0gdGV4dHVyZSggb3V0cHV0VGFyZ2V0LCBzY3JlZW5VViApLnJlbmRlck91dHB1dCggcmVuZGVyZXIudG9uZU1hcHBpbmcsIHJlbmRlcmVyLmN1cnJlbnRDb2xvclNwYWNlICk7XG5cblx0XHRfb3V0cHV0Tm9kZU1hcC5zZXQoIG91dHB1dFRhcmdldCwgY2FjaGVLZXkgKTtcblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmlnZ2VycyB0aGUgY2FsbCBvZiBgdXBkYXRlQmVmb3JlKClgIG1ldGhvZHNcblx0ICogZm9yIGFsbCBub2RlcyBvZiB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKi9cblx0dXBkYXRlQmVmb3JlKCByZW5kZXJPYmplY3QgKSB7XG5cblx0XHRjb25zdCBub2RlQnVpbGRlciA9IHJlbmRlck9iamVjdC5nZXROb2RlQnVpbGRlclN0YXRlKCk7XG5cblx0XHRmb3IgKCBjb25zdCBub2RlIG9mIG5vZGVCdWlsZGVyLnVwZGF0ZUJlZm9yZU5vZGVzICkge1xuXG5cdFx0XHQvLyB1cGRhdGUgZnJhbWUgc3RhdGUgZm9yIGVhY2ggbm9kZVxuXG5cdFx0XHR0aGlzLmdldE5vZGVGcmFtZUZvclJlbmRlciggcmVuZGVyT2JqZWN0ICkudXBkYXRlQmVmb3JlTm9kZSggbm9kZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVHJpZ2dlcnMgdGhlIGNhbGwgb2YgYHVwZGF0ZUFmdGVyKClgIG1ldGhvZHNcblx0ICogZm9yIGFsbCBub2RlcyBvZiB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKi9cblx0dXBkYXRlQWZ0ZXIoIHJlbmRlck9iamVjdCApIHtcblxuXHRcdGNvbnN0IG5vZGVCdWlsZGVyID0gcmVuZGVyT2JqZWN0LmdldE5vZGVCdWlsZGVyU3RhdGUoKTtcblxuXHRcdGZvciAoIGNvbnN0IG5vZGUgb2Ygbm9kZUJ1aWxkZXIudXBkYXRlQWZ0ZXJOb2RlcyApIHtcblxuXHRcdFx0Ly8gdXBkYXRlIGZyYW1lIHN0YXRlIGZvciBlYWNoIG5vZGVcblxuXHRcdFx0dGhpcy5nZXROb2RlRnJhbWVGb3JSZW5kZXIoIHJlbmRlck9iamVjdCApLnVwZGF0ZUFmdGVyTm9kZSggbm9kZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVHJpZ2dlcnMgdGhlIGNhbGwgb2YgYHVwZGF0ZSgpYCBtZXRob2RzXG5cdCAqIGZvciBhbGwgbm9kZXMgb2YgdGhlIGdpdmVuIGNvbXB1dGUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBjb21wdXRlTm9kZSAtIFRoZSBjb21wdXRlIG5vZGUuXG5cdCAqL1xuXHR1cGRhdGVGb3JDb21wdXRlKCBjb21wdXRlTm9kZSApIHtcblxuXHRcdGNvbnN0IG5vZGVGcmFtZSA9IHRoaXMuZ2V0Tm9kZUZyYW1lKCk7XG5cdFx0Y29uc3Qgbm9kZUJ1aWxkZXIgPSB0aGlzLmdldEZvckNvbXB1dGUoIGNvbXB1dGVOb2RlICk7XG5cblx0XHRmb3IgKCBjb25zdCBub2RlIG9mIG5vZGVCdWlsZGVyLnVwZGF0ZU5vZGVzICkge1xuXG5cdFx0XHRub2RlRnJhbWUudXBkYXRlTm9kZSggbm9kZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVHJpZ2dlcnMgdGhlIGNhbGwgb2YgYHVwZGF0ZSgpYCBtZXRob2RzXG5cdCAqIGZvciBhbGwgbm9kZXMgb2YgdGhlIGdpdmVuIGNvbXB1dGUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKi9cblx0dXBkYXRlRm9yUmVuZGVyKCByZW5kZXJPYmplY3QgKSB7XG5cblx0XHRjb25zdCBub2RlRnJhbWUgPSB0aGlzLmdldE5vZGVGcmFtZUZvclJlbmRlciggcmVuZGVyT2JqZWN0ICk7XG5cdFx0Y29uc3Qgbm9kZUJ1aWxkZXIgPSByZW5kZXJPYmplY3QuZ2V0Tm9kZUJ1aWxkZXJTdGF0ZSgpO1xuXG5cdFx0Zm9yICggY29uc3Qgbm9kZSBvZiBub2RlQnVpbGRlci51cGRhdGVOb2RlcyApIHtcblxuXHRcdFx0bm9kZUZyYW1lLnVwZGF0ZU5vZGUoIG5vZGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0IHJlcXVpcmVzIGEgcmVmcmVzaC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0IHJlcXVpcmVzIGEgcmVmcmVzaCBvciBub3QuXG5cdCAqL1xuXHRuZWVkc1JlZnJlc2goIHJlbmRlck9iamVjdCApIHtcblxuXHRcdGNvbnN0IG5vZGVGcmFtZSA9IHRoaXMuZ2V0Tm9kZUZyYW1lRm9yUmVuZGVyKCByZW5kZXJPYmplY3QgKTtcblx0XHRjb25zdCBtb25pdG9yID0gcmVuZGVyT2JqZWN0LmdldE1vbml0b3IoKTtcblxuXHRcdHJldHVybiBtb25pdG9yLm5lZWRzUmVmcmVzaCggcmVuZGVyT2JqZWN0LCBub2RlRnJhbWUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIHRoZSBpbnRlcm5hbCByZXNvdXJjZXMuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0c3VwZXIuZGlzcG9zZSgpO1xuXG5cdFx0dGhpcy5ub2RlRnJhbWUgPSBuZXcgTm9kZUZyYW1lKCk7XG5cdFx0dGhpcy5ub2RlQnVpbGRlckNhY2hlID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMuY2FjaGVMaWIgPSB7fTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZXM7XG4iLCJpbXBvcnQgeyBNYXRyaXgzIH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXgzLmpzJztcbmltcG9ydCB7IFBsYW5lIH0gZnJvbSAnLi4vLi4vbWF0aC9QbGFuZS5qcyc7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3I0LmpzJztcblxuY29uc3QgX3BsYW5lID0gLypAX19QVVJFX18qLyBuZXcgUGxhbmUoKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBzdGF0ZSB0aGF0IGlzIHVzZWQgdG8gcGVyZm9ybSBjbGlwcGluZyB2aWEgY2xpcHBpbmcgcGxhbmVzLlxuICogVGhlcmUgaXMgYSBkZWZhdWx0IGNsaXBwaW5nIGNvbnRleHQgZm9yIGVhY2ggcmVuZGVyIGNvbnRleHQuIFdoZW4gdGhlXG4gKiBzY2VuZSBob2xkcyBpbnN0YW5jZXMgb2YgYENsaXBwaW5nR3JvdXBgLCB0aGVyZSB3aWxsIGJlIGEgY29udGV4dCBmb3IgZWFjaFxuICogZ3JvdXAuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ2xpcHBpbmdDb250ZXh0IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBjbGlwcGluZyBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcGFyYW0gez9DbGlwcGluZ0NvbnRleHR9IFtwYXJlbnRDb250ZXh0PW51bGxdIC0gQSByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBjbGlwcGluZyBjb250ZXh0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmVudENvbnRleHQgPSBudWxsICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNsaXBwaW5nIGNvbnRleHQncyB2ZXJzaW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSBjbGlwcGluZyBwbGFuZXMgaXMgdXNlZCB0byBjbGlwIG9iamVjdHMsIHJhdGhlciB0aGFuIHRoZWlyIHVuaW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9ib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNsaXBJbnRlcnNlY3Rpb24gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNsaXBwaW5nIGNvbnRleHQncyBjYWNoZSBrZXkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FjaGVLZXkgPSAnJztcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHNoYWRvdyBwYXNzIGlzIGFjdGl2ZSBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuc2hhZG93UGFzcyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHZpZXcgbm9ybWFsIG1hdHJpeC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtNYXRyaXgzfVxuXHRcdCAqL1xuXHRcdHRoaXMudmlld05vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7XG5cblx0XHQvKipcblx0XHQgKiBJbnRlcm5hbCBjYWNoZSBmb3IgbWFpbnRhaW5pbmcgY2xpcHBpbmcgY29udGV4dHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2Vha01hcDxDbGlwcGluZ0dyb3VwLENsaXBwaW5nQ29udGV4dD59XG5cdFx0ICovXG5cdFx0dGhpcy5jbGlwcGluZ0dyb3VwQ29udGV4dHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGludGVyc2VjdGlvbiBwbGFuZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8VmVjdG9yND59XG5cdFx0ICovXG5cdFx0dGhpcy5pbnRlcnNlY3Rpb25QbGFuZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbnRlcnNlY3Rpb24gcGxhbmVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PFZlY3RvcjQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMudW5pb25QbGFuZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBjbGlwcGluZyBjb250ZXh0J3MgcGFyZW50IGNvbnRleHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P251bWJlcn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLnBhcmVudFZlcnNpb24gPSBudWxsO1xuXG5cdFx0aWYgKCBwYXJlbnRDb250ZXh0ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXdOb3JtYWxNYXRyaXggPSBwYXJlbnRDb250ZXh0LnZpZXdOb3JtYWxNYXRyaXg7XG5cdFx0XHR0aGlzLmNsaXBwaW5nR3JvdXBDb250ZXh0cyA9IHBhcmVudENvbnRleHQuY2xpcHBpbmdHcm91cENvbnRleHRzO1xuXG5cdFx0XHR0aGlzLnNoYWRvd1Bhc3MgPSBwYXJlbnRDb250ZXh0LnNoYWRvd1Bhc3M7XG5cdFx0XHR0aGlzLnZpZXdNYXRyaXggPSBwYXJlbnRDb250ZXh0LnZpZXdNYXRyaXg7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcm9qZWN0cyB0aGUgZ2l2ZW4gc291cmNlIGNsaXBwaW5nIHBsYW5lcyBhbmQgd3JpdGVzIHRoZSByZXN1bHQgaW50byB0aGVcblx0ICogZGVzdGluYXRpb24gYXJyYXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8UGxhbmU+fSBzb3VyY2UgLSBUaGUgc291cmNlIGNsaXBwaW5nIHBsYW5lcy5cblx0ICogQHBhcmFtIHtBcnJheTxWZWN0b3I0Pn0gZGVzdGluYXRpb24gLSBUaGUgZGVzdGluYXRpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBUaGUgb2Zmc2V0LlxuXHQgKi9cblx0cHJvamVjdFBsYW5lcyggc291cmNlLCBkZXN0aW5hdGlvbiwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc3QgbCA9IHNvdXJjZS5sZW5ndGg7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRfcGxhbmUuY29weSggc291cmNlWyBpIF0gKS5hcHBseU1hdHJpeDQoIHRoaXMudmlld01hdHJpeCwgdGhpcy52aWV3Tm9ybWFsTWF0cml4ICk7XG5cblx0XHRcdGNvbnN0IHYgPSBkZXN0aW5hdGlvblsgb2Zmc2V0ICsgaSBdO1xuXHRcdFx0Y29uc3Qgbm9ybWFsID0gX3BsYW5lLm5vcm1hbDtcblxuXHRcdFx0di54ID0gLSBub3JtYWwueDtcblx0XHRcdHYueSA9IC0gbm9ybWFsLnk7XG5cdFx0XHR2LnogPSAtIG5vcm1hbC56O1xuXHRcdFx0di53ID0gX3BsYW5lLmNvbnN0YW50O1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgcm9vdCBjbGlwcGluZyBjb250ZXh0IG9mIGEgc2NlbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lLlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGF0IGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBzY2VuZS5cblx0ICovXG5cdHVwZGF0ZUdsb2JhbCggc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdHRoaXMuc2hhZG93UGFzcyA9ICggc2NlbmUub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCAmJiBzY2VuZS5vdmVycmlkZU1hdGVyaWFsLmlzU2hhZG93UGFzc01hdGVyaWFsICk7XG5cdFx0dGhpcy52aWV3TWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcblxuXHRcdHRoaXMudmlld05vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIHRoaXMudmlld01hdHJpeCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgY2xpcHBpbmcgY29udGV4dC5cblx0ICpcblx0ICogQHBhcmFtIHtDbGlwcGluZ0NvbnRleHR9IHBhcmVudENvbnRleHQgLSBUaGUgcGFyZW50IGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7Q2xpcHBpbmdHcm91cH0gY2xpcHBpbmdHcm91cCAtIFRoZSBjbGlwcGluZyBncm91cCB0aGlzIGNvbnRleHQgYmVsb25ncyB0by5cblx0ICovXG5cdHVwZGF0ZSggcGFyZW50Q29udGV4dCwgY2xpcHBpbmdHcm91cCApIHtcblxuXHRcdGxldCB1cGRhdGUgPSBmYWxzZTtcblxuXHRcdGlmICggcGFyZW50Q29udGV4dC52ZXJzaW9uICE9PSB0aGlzLnBhcmVudFZlcnNpb24gKSB7XG5cblx0XHRcdHRoaXMuaW50ZXJzZWN0aW9uUGxhbmVzID0gQXJyYXkuZnJvbSggcGFyZW50Q29udGV4dC5pbnRlcnNlY3Rpb25QbGFuZXMgKTtcblx0XHRcdHRoaXMudW5pb25QbGFuZXMgPSBBcnJheS5mcm9tKCBwYXJlbnRDb250ZXh0LnVuaW9uUGxhbmVzICk7XG5cdFx0XHR0aGlzLnBhcmVudFZlcnNpb24gPSBwYXJlbnRDb250ZXh0LnZlcnNpb247XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2xpcEludGVyc2VjdGlvbiAhPT0gY2xpcHBpbmdHcm91cC5jbGlwSW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHR0aGlzLmNsaXBJbnRlcnNlY3Rpb24gPSBjbGlwcGluZ0dyb3VwLmNsaXBJbnRlcnNlY3Rpb247XG5cblx0XHRcdGlmICggdGhpcy5jbGlwSW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdHRoaXMudW5pb25QbGFuZXMubGVuZ3RoID0gcGFyZW50Q29udGV4dC51bmlvblBsYW5lcy5sZW5ndGg7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5pbnRlcnNlY3Rpb25QbGFuZXMubGVuZ3RoID0gcGFyZW50Q29udGV4dC5pbnRlcnNlY3Rpb25QbGFuZXMubGVuZ3RoO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBzcmNDbGlwcGluZ1BsYW5lcyA9IGNsaXBwaW5nR3JvdXAuY2xpcHBpbmdQbGFuZXM7XG5cdFx0Y29uc3QgbCA9IHNyY0NsaXBwaW5nUGxhbmVzLmxlbmd0aDtcblxuXHRcdGxldCBkc3RDbGlwcGluZ1BsYW5lcztcblx0XHRsZXQgb2Zmc2V0O1xuXG5cdFx0aWYgKCB0aGlzLmNsaXBJbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdGRzdENsaXBwaW5nUGxhbmVzID0gdGhpcy5pbnRlcnNlY3Rpb25QbGFuZXM7XG5cdFx0XHRvZmZzZXQgPSBwYXJlbnRDb250ZXh0LmludGVyc2VjdGlvblBsYW5lcy5sZW5ndGg7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkc3RDbGlwcGluZ1BsYW5lcyA9IHRoaXMudW5pb25QbGFuZXM7XG5cdFx0XHRvZmZzZXQgPSBwYXJlbnRDb250ZXh0LnVuaW9uUGxhbmVzLmxlbmd0aDtcblxuXHRcdH1cblxuXHRcdGlmICggZHN0Q2xpcHBpbmdQbGFuZXMubGVuZ3RoICE9PSBvZmZzZXQgKyBsICkge1xuXG5cdFx0XHRkc3RDbGlwcGluZ1BsYW5lcy5sZW5ndGggPSBvZmZzZXQgKyBsO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGRzdENsaXBwaW5nUGxhbmVzWyBvZmZzZXQgKyBpIF0gPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHR0aGlzLnByb2plY3RQbGFuZXMoIHNyY0NsaXBwaW5nUGxhbmVzLCBkc3RDbGlwcGluZ1BsYW5lcywgb2Zmc2V0ICk7XG5cblx0XHRpZiAoIHVwZGF0ZSApIHtcblxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xuXHRcdFx0dGhpcy5jYWNoZUtleSA9IGAkeyB0aGlzLmludGVyc2VjdGlvblBsYW5lcy5sZW5ndGggfTokeyB0aGlzLnVuaW9uUGxhbmVzLmxlbmd0aCB9YDtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBjbGlwcGluZyBjb250ZXh0IGZvciB0aGUgZ2l2ZW4gY2xpcHBpbmcgZ3JvdXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q2xpcHBpbmdHcm91cH0gY2xpcHBpbmdHcm91cCAtIFRoZSBjbGlwcGluZyBncm91cC5cblx0ICogQHJldHVybiB7Q2xpcHBpbmdDb250ZXh0fSBUaGUgY2xpcHBpbmcgY29udGV4dC5cblx0ICovXG5cdGdldEdyb3VwQ29udGV4dCggY2xpcHBpbmdHcm91cCApIHtcblxuXHRcdGlmICggdGhpcy5zaGFkb3dQYXNzICYmICEgY2xpcHBpbmdHcm91cC5jbGlwU2hhZG93cyApIHJldHVybiB0aGlzO1xuXG5cdFx0bGV0IGNvbnRleHQgPSB0aGlzLmNsaXBwaW5nR3JvdXBDb250ZXh0cy5nZXQoIGNsaXBwaW5nR3JvdXAgKTtcblxuXHRcdGlmICggY29udGV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb250ZXh0ID0gbmV3IENsaXBwaW5nQ29udGV4dCggdGhpcyApO1xuXHRcdFx0dGhpcy5jbGlwcGluZ0dyb3VwQ29udGV4dHMuc2V0KCBjbGlwcGluZ0dyb3VwLCBjb250ZXh0ICk7XG5cblx0XHR9XG5cblx0XHRjb250ZXh0LnVwZGF0ZSggdGhpcywgY2xpcHBpbmdHcm91cCApO1xuXG5cdFx0cmV0dXJuIGNvbnRleHQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgY291bnQgb2YgdW5pb24gY2xpcHBpbmcgcGxhbmVzLlxuXHQgKlxuXHQgKiBAdHlwZSB7bnVtYmVyfVxuXHQgKiBAcmVhZG9ubHlcblx0ICovXG5cdGdldCB1bmlvbkNsaXBwaW5nQ291bnQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy51bmlvblBsYW5lcy5sZW5ndGg7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsaXBwaW5nQ29udGV4dDtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgaXMgdXNlZCB0byByZXByZXNlbnQgcmVuZGVyIGJ1bmRsZXMgaW5zaWRlIHRoZSByZW5kZXJlclxuICogZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBSZW5kZXJCdW5kbGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1bmRsZSBncm91cC5cblx0ICpcblx0ICogQHBhcmFtIHtCdW5kbGVHcm91cH0gYnVuZGxlR3JvdXAgLSBUaGUgYnVuZGxlIGdyb3VwLlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGUgYnVuZGxlIGdyb3VwIGlzIHJlbmRlcmVkIHdpdGguXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYnVuZGxlR3JvdXAsIGNhbWVyYSApIHtcblxuXHRcdHRoaXMuYnVuZGxlR3JvdXAgPSBidW5kbGVHcm91cDtcblx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVuZGVyQnVuZGxlO1xuIiwiaW1wb3J0IENoYWluTWFwIGZyb20gJy4vQ2hhaW5NYXAuanMnO1xuaW1wb3J0IFJlbmRlckJ1bmRsZSBmcm9tICcuL1JlbmRlckJ1bmRsZS5qcyc7XG5cbmNvbnN0IF9jaGFpbktleXMgPSBbXTtcblxuLyoqXG4gKiBUaGlzIHJlbmRlcmVyIG1vZHVsZSBtYW5hZ2VzIHJlbmRlciBidW5kbGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFJlbmRlckJ1bmRsZXMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlbmRlciBidW5kbGUgbWFuYWdlbWVudCBjb21wb25lbnQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgY2hhaW4gbWFwIGZvciBtYWludGFpbmluZyB0aGUgcmVuZGVyIGJ1bmRsZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q2hhaW5NYXB9XG5cdFx0ICovXG5cdFx0dGhpcy5idW5kbGVzID0gbmV3IENoYWluTWFwKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcmVuZGVyIGJ1bmRsZSBmb3IgdGhlIGdpdmVuIGJ1bmRsZSBncm91cCBhbmQgY2FtZXJhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1bmRsZUdyb3VwfSBidW5kbGVHcm91cCAtIFRoZSBidW5kbGUgZ3JvdXAuXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhIHRoZSBidW5kbGUgZ3JvdXAgaXMgcmVuZGVyZWQgd2l0aC5cblx0ICogQHJldHVybiB7UmVuZGVyQnVuZGxlfSBUaGUgcmVuZGVyIGJ1bmRsZS5cblx0ICovXG5cdGdldCggYnVuZGxlR3JvdXAsIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGJ1bmRsZXMgPSB0aGlzLmJ1bmRsZXM7XG5cblx0XHRfY2hhaW5LZXlzWyAwIF0gPSBidW5kbGVHcm91cDtcblx0XHRfY2hhaW5LZXlzWyAxIF0gPSBjYW1lcmE7XG5cblx0XHRsZXQgYnVuZGxlID0gYnVuZGxlcy5nZXQoIF9jaGFpbktleXMgKTtcblxuXHRcdGlmICggYnVuZGxlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJ1bmRsZSA9IG5ldyBSZW5kZXJCdW5kbGUoIGJ1bmRsZUdyb3VwLCBjYW1lcmEgKTtcblx0XHRcdGJ1bmRsZXMuc2V0KCBfY2hhaW5LZXlzLCBidW5kbGUgKTtcblxuXHRcdH1cblxuXHRcdF9jaGFpbktleXMubGVuZ3RoID0gMDtcblxuXHRcdHJldHVybiBidW5kbGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyBhbGwgaW50ZXJuYWwgcmVzb3VyY2VzLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuYnVuZGxlcyA9IG5ldyBDaGFpbk1hcCgpO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSZW5kZXJCdW5kbGVzO1xuIiwiLyoqXG4gKiBUaGUgcHVycG9zZSBvZiBhIG5vZGUgbGlicmFyeSBpcyB0byBhc3NpZ24gbm9kZSBpbXBsZW1lbnRhdGlvbnNcbiAqIHRvIGV4aXN0aW5nIGxpYnJhcnkgZmVhdHVyZXMuIEluIGBXZWJHUFVSZW5kZXJlcmAgbGlnaHRzLCBtYXRlcmlhbHNcbiAqIHdoaWNoIGFyZSBub3QgYmFzZWQgb24gYE5vZGVNYXRlcmlhbGAgYXMgd2VsbCBhcyB0b25lIG1hcHBpbmcgdGVjaG5pcXVlc1xuICogYXJlIGltcGxlbWVudGVkIHdpdGggbm9kZS1iYXNlZCBtb2R1bGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIE5vZGVMaWJyYXJ5IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlIGxpYnJhcnkuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgd2VhayBtYXAgdGhhdCBtYXBzIGxpZ2h0cyB0byBsaWdodCBub2Rlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWFrTWFwPExpZ2h0LmNvbnN0cnVjdG9yLEFuYWx5dGljTGlnaHROb2RlLmNvbnN0cnVjdG9yPn1cblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0Tm9kZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBtYXAgdGhhdCBtYXBzIG1hdGVyaWFscyB0byBub2RlIG1hdGVyaWFscy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtNYXA8c3RyaW5nLE5vZGVNYXRlcmlhbC5jb25zdHJ1Y3Rvcj59XG5cdFx0ICovXG5cdFx0dGhpcy5tYXRlcmlhbE5vZGVzID0gbmV3IE1hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBtYXAgdGhhdCBtYXBzIHRvbmUgbWFwcGluZyB0ZWNobmlxdWVzIChjb25zdGFudHMpXG5cdFx0ICogdG8gdG9uZSBtYXBwaW5nIG5vZGUgZnVuY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hcDxudW1iZXIsRnVuY3Rpb24+fVxuXHRcdCAqL1xuXHRcdHRoaXMudG9uZU1hcHBpbmdOb2RlcyA9IG5ldyBNYXAoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBtYXRjaGluZyBub2RlIG1hdGVyaWFsIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gbWF0ZXJpYWwgb2JqZWN0LlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBhbHNvIGFzc2lnbnMvY29waWVzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlbiBtYXRlcmlhbCBvYmplY3Rcblx0ICogdG8gdGhlIG5vZGUgbWF0ZXJpYWwuIFRoaXMgaXMgZG9uZSB0byBtYWtlIHN1cmUgdGhlIGN1cnJlbnQgbWF0ZXJpYWxcblx0ICogY29uZmlndXJhdGlvbiBjYXJyaWVzIG92ZXIgdG8gdGhlIG5vZGUgdmVyc2lvbi5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBBIG1hdGVyaWFsLlxuXHQgKiBAcmV0dXJuIHtOb2RlTWF0ZXJpYWx9IFRoZSBjb3JyZXNwb25kaW5nIG5vZGUgbWF0ZXJpYWwuXG5cdCAqL1xuXHRmcm9tTWF0ZXJpYWwoIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5pc05vZGVNYXRlcmlhbCApIHJldHVybiBtYXRlcmlhbDtcblxuXHRcdGxldCBub2RlTWF0ZXJpYWwgPSBudWxsO1xuXG5cdFx0Y29uc3Qgbm9kZU1hdGVyaWFsQ2xhc3MgPSB0aGlzLmdldE1hdGVyaWFsTm9kZUNsYXNzKCBtYXRlcmlhbC50eXBlICk7XG5cblx0XHRpZiAoIG5vZGVNYXRlcmlhbENsYXNzICE9PSBudWxsICkge1xuXG5cdFx0XHRub2RlTWF0ZXJpYWwgPSBuZXcgbm9kZU1hdGVyaWFsQ2xhc3MoKTtcblxuXHRcdFx0Zm9yICggY29uc3Qga2V5IGluIG1hdGVyaWFsICkge1xuXG5cdFx0XHRcdG5vZGVNYXRlcmlhbFsga2V5IF0gPSBtYXRlcmlhbFsga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBub2RlTWF0ZXJpYWw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgdG9uZSBtYXBwaW5nIG5vZGUgZnVuY3Rpb24gZm9yIGEgdG9uZSBtYXBwaW5nIHRlY2huaXF1ZSAoY29uc3RhbnQpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b25lTWFwcGluZ05vZGUgLSBUaGUgdG9uZSBtYXBwaW5nIG5vZGUgZnVuY3Rpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0b25lTWFwcGluZyAtIFRoZSB0b25lIG1hcHBpbmcuXG5cdCAqL1xuXHRhZGRUb25lTWFwcGluZyggdG9uZU1hcHBpbmdOb2RlLCB0b25lTWFwcGluZyApIHtcblxuXHRcdHRoaXMuYWRkVHlwZSggdG9uZU1hcHBpbmdOb2RlLCB0b25lTWFwcGluZywgdGhpcy50b25lTWFwcGluZ05vZGVzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgdG9uZSBtYXBwaW5nIG5vZGUgZnVuY3Rpb24gZm9yIGEgdG9uZSBtYXBwaW5nIHRlY2huaXF1ZSAoY29uc3RhbnQpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdG9uZU1hcHBpbmcgLSBUaGUgdG9uZSBtYXBwaW5nLlxuXHQgKiBAcmV0dXJuIHs/RnVuY3Rpb259IFRoZSB0b25lIG1hcHBpbmcgbm9kZSBmdW5jdGlvbi4gUmV0dXJucyBgbnVsbGAgaWYgbm8gbm9kZSBmdW5jdGlvbiBpcyBmb3VuZC5cblx0ICovXG5cdGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIHRvbmVNYXBwaW5nICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudG9uZU1hcHBpbmdOb2Rlcy5nZXQoIHRvbmVNYXBwaW5nICkgfHwgbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBub2RlIG1hdGVyaWFsIGNsYXNzIGRlZmluaXRpb24gZm9yIGEgbWF0ZXJpYWwgdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG1hdGVyaWFsVHlwZSAtIFRoZSBtYXRlcmlhbCB0eXBlLlxuXHQgKiBAcmV0dXJuIHs/Tm9kZU1hdGVyaWFsLmNvbnN0cnVjdG9yfSBUaGUgbm9kZSBtYXRlcmlhbCBjbGFzcyBkZWZpbml0aW9uLiBSZXR1cm5zIGBudWxsYCBpZiBubyBub2RlIG1hdGVyaWFsIGlzIGZvdW5kLlxuXHQgKi9cblx0Z2V0TWF0ZXJpYWxOb2RlQ2xhc3MoIG1hdGVyaWFsVHlwZSApIHtcblxuXHRcdHJldHVybiB0aGlzLm1hdGVyaWFsTm9kZXMuZ2V0KCBtYXRlcmlhbFR5cGUgKSB8fCBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIG5vZGUgbWF0ZXJpYWwgY2xhc3MgZGVmaW5pdGlvbiBmb3IgYSBnaXZlbiBtYXRlcmlhbCB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGVNYXRlcmlhbC5jb25zdHJ1Y3Rvcn0gbWF0ZXJpYWxOb2RlQ2xhc3MgLSBUaGUgbm9kZSBtYXRlcmlhbCBjbGFzcyBkZWZpbml0aW9uLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbWF0ZXJpYWxDbGFzc1R5cGUgLSBUaGUgbWF0ZXJpYWwgdHlwZS5cblx0ICovXG5cdGFkZE1hdGVyaWFsKCBtYXRlcmlhbE5vZGVDbGFzcywgbWF0ZXJpYWxDbGFzc1R5cGUgKSB7XG5cblx0XHR0aGlzLmFkZFR5cGUoIG1hdGVyaWFsTm9kZUNsYXNzLCBtYXRlcmlhbENsYXNzVHlwZSwgdGhpcy5tYXRlcmlhbE5vZGVzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbGlnaHQgbm9kZSBjbGFzcyBkZWZpbml0aW9uIGZvciBhIGxpZ2h0IGNsYXNzIGRlZmluaXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGlnaHQuY29uc3RydWN0b3J9IGxpZ2h0IC0gVGhlIGxpZ2h0IGNsYXNzIGRlZmluaXRpb24uXG5cdCAqIEByZXR1cm4gez9BbmFseXRpY0xpZ2h0Tm9kZS5jb25zdHJ1Y3Rvcn0gVGhlIGxpZ2h0IG5vZGUgY2xhc3MgZGVmaW5pdGlvbi4gUmV0dXJucyBgbnVsbGAgaWYgbm8gbGlnaHQgbm9kZSBpcyBmb3VuZC5cblx0ICovXG5cdGdldExpZ2h0Tm9kZUNsYXNzKCBsaWdodCApIHtcblxuXHRcdHJldHVybiB0aGlzLmxpZ2h0Tm9kZXMuZ2V0KCBsaWdodCApIHx8IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgbGlnaHQgbm9kZSBjbGFzcyBkZWZpbml0aW9uIGZvciBhIGdpdmVuIGxpZ2h0IGNsYXNzIGRlZmluaXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7QW5hbHl0aWNMaWdodE5vZGUuY29uc3RydWN0b3J9IGxpZ2h0Tm9kZUNsYXNzIC0gVGhlIGxpZ2h0IG5vZGUgY2xhc3MgZGVmaW5pdGlvbi5cblx0ICogQHBhcmFtIHtMaWdodC5jb25zdHJ1Y3Rvcn0gbGlnaHRDbGFzcyAtIFRoZSBsaWdodCBjbGFzcyBkZWZpbml0aW9uLlxuXHQgKi9cblx0YWRkTGlnaHQoIGxpZ2h0Tm9kZUNsYXNzLCBsaWdodENsYXNzICkge1xuXG5cdFx0dGhpcy5hZGRDbGFzcyggbGlnaHROb2RlQ2xhc3MsIGxpZ2h0Q2xhc3MsIHRoaXMubGlnaHROb2RlcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIG5vZGUgY2xhc3MgZGVmaW5pdGlvbiBmb3IgdGhlIGdpdmVuIHR5cGUgdG8gdGhlIHByb3ZpZGVkIHR5cGUgbGlicmFyeS5cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IG5vZGVDbGFzcyAtIFRoZSBub2RlIGNsYXNzIGRlZmluaXRpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdHlwZSAtIFRoZSBvYmplY3QgdHlwZS5cblx0ICogQHBhcmFtIHtNYXB9IGxpYnJhcnkgLSBUaGUgdHlwZSBsaWJyYXJ5LlxuXHQgKi9cblx0YWRkVHlwZSggbm9kZUNsYXNzLCB0eXBlLCBsaWJyYXJ5ICkge1xuXG5cdFx0aWYgKCBsaWJyYXJ5LmhhcyggdHlwZSApICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oIGBSZWRlZmluaXRpb24gb2Ygbm9kZSAkeyB0eXBlIH1gICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiBub2RlQ2xhc3MgIT09ICdmdW5jdGlvbicgKSB0aHJvdyBuZXcgRXJyb3IoIGBOb2RlIGNsYXNzICR7IG5vZGVDbGFzcy5uYW1lIH0gaXMgbm90IGEgY2xhc3MuYCApO1xuXHRcdGlmICggdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICkgdGhyb3cgbmV3IEVycm9yKCBgQmFzZSBjbGFzcyAkeyB0eXBlIH0gaXMgbm90IGEgY2xhc3MuYCApO1xuXG5cdFx0bGlicmFyeS5zZXQoIHR5cGUsIG5vZGVDbGFzcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIG5vZGUgY2xhc3MgZGVmaW5pdGlvbiBmb3IgdGhlIGdpdmVuIGNsYXNzIGRlZmluaXRpb24gdG8gdGhlIHByb3ZpZGVkIHR5cGUgbGlicmFyeS5cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IG5vZGVDbGFzcyAtIFRoZSBub2RlIGNsYXNzIGRlZmluaXRpb24uXG5cdCAqIEBwYXJhbSB7YW55fSBiYXNlQ2xhc3MgLSBUaGUgY2xhc3MgZGVmaW5pdGlvbi5cblx0ICogQHBhcmFtIHtXZWFrTWFwfSBsaWJyYXJ5IC0gVGhlIHR5cGUgbGlicmFyeS5cblx0ICovXG5cdGFkZENsYXNzKCBub2RlQ2xhc3MsIGJhc2VDbGFzcywgbGlicmFyeSApIHtcblxuXHRcdGlmICggbGlicmFyeS5oYXMoIGJhc2VDbGFzcyApICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oIGBSZWRlZmluaXRpb24gb2Ygbm9kZSAkeyBiYXNlQ2xhc3MubmFtZSB9YCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2Ygbm9kZUNsYXNzICE9PSAnZnVuY3Rpb24nICkgdGhyb3cgbmV3IEVycm9yKCBgTm9kZSBjbGFzcyAkeyBub2RlQ2xhc3MubmFtZSB9IGlzIG5vdCBhIGNsYXNzLmAgKTtcblx0XHRpZiAoIHR5cGVvZiBiYXNlQ2xhc3MgIT09ICdmdW5jdGlvbicgKSB0aHJvdyBuZXcgRXJyb3IoIGBCYXNlIGNsYXNzICR7IGJhc2VDbGFzcy5uYW1lIH0gaXMgbm90IGEgY2xhc3MuYCApO1xuXG5cdFx0bGlicmFyeS5zZXQoIGJhc2VDbGFzcywgbm9kZUNsYXNzICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVMaWJyYXJ5O1xuIiwiaW1wb3J0IHsgTGlnaHRzTm9kZSB9IGZyb20gJy4uLy4uL25vZGVzL05vZGVzLmpzJztcbmltcG9ydCBDaGFpbk1hcCBmcm9tICcuL0NoYWluTWFwLmpzJztcblxuY29uc3QgX2RlZmF1bHRMaWdodHMgPSAvKkBfX1BVUkVfXyovIG5ldyBMaWdodHNOb2RlKCk7XG5jb25zdCBfY2hhaW5LZXlzID0gW107XG5cbi8qKlxuICogVGhpcyByZW5kZXJlciBtb2R1bGUgbWFuYWdlcyB0aGUgbGlnaHRzIG5vZGVzIHdoaWNoIGFyZSB1bmlxdWVcbiAqIHBlciBzY2VuZSBhbmQgY2FtZXJhIGNvbWJpbmF0aW9uLlxuICpcbiAqIFRoZSBsaWdodHMgbm9kZSBpdHNlbGYgaXMgbGF0ZXIgY29uZmlndXJlZCBpbiB0aGUgcmVuZGVyIGxpc3RcbiAqIHdpdGggdGhlIGFjdHVhbCBsaWdodHMgZnJvbSB0aGUgc2NlbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBDaGFpbk1hcFxuICovXG5jbGFzcyBMaWdodGluZyBleHRlbmRzIENoYWluTWFwIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIGxpZ2h0aW5nIG1hbmFnZW1lbnQgY29tcG9uZW50LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBsaWdodHMgbm9kZSBmb3IgdGhlIGdpdmVuIGFycmF5IG9mIGxpZ2h0cy5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxMaWdodD59IGxpZ2h0cyAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtMaWdodHNOb2RlfSBUaGUgbGlnaHRzIG5vZGUuXG5cdCAqL1xuXHRjcmVhdGVOb2RlKCBsaWdodHMgPSBbXSApIHtcblxuXHRcdHJldHVybiBuZXcgTGlnaHRzTm9kZSgpLnNldExpZ2h0cyggbGlnaHRzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbGlnaHRzIG5vZGUgZm9yIHRoZSBnaXZlbiBzY2VuZSBhbmQgY2FtZXJhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZS5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEuXG5cdCAqIEByZXR1cm4ge0xpZ2h0c05vZGV9IFRoZSBsaWdodHMgbm9kZS5cblx0ICovXG5cdGdldE5vZGUoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHQvLyBpZ25vcmUgcG9zdC1wcm9jZXNzaW5nXG5cblx0XHRpZiAoIHNjZW5lLmlzUXVhZE1lc2ggKSByZXR1cm4gX2RlZmF1bHRMaWdodHM7XG5cblx0XHRfY2hhaW5LZXlzWyAwIF0gPSBzY2VuZTtcblx0XHRfY2hhaW5LZXlzWyAxIF0gPSBjYW1lcmE7XG5cblx0XHRsZXQgbm9kZSA9IHRoaXMuZ2V0KCBfY2hhaW5LZXlzICk7XG5cblx0XHRpZiAoIG5vZGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHRcdFx0dGhpcy5zZXQoIF9jaGFpbktleXMsIG5vZGUgKTtcblxuXHRcdH1cblxuXHRcdF9jaGFpbktleXMubGVuZ3RoID0gMDtcblxuXHRcdHJldHVybiBub2RlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBMaWdodGluZztcbiIsImltcG9ydCB7IFJlbmRlclRhcmdldCB9IGZyb20gJy4uLy4uL2NvcmUvUmVuZGVyVGFyZ2V0LmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWwgdHlwZSBvZiByZW5kZXIgdGFyZ2V0IHRoYXQgaXMgdXNlZCB3aGVuIHJlbmRlcmluZ1xuICogd2l0aCB0aGUgV2ViWFIgRGV2aWNlIEFQSS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFJlbmRlclRhcmdldFxuICovXG5jbGFzcyBYUlJlbmRlclRhcmdldCBleHRlbmRzIFJlbmRlclRhcmdldCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgWFIgcmVuZGVyIHRhcmdldC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9MV0gLSBUaGUgaGVpZ2h0IG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIG9wdGlvbnMgPSB7fSApIHtcblxuXHRcdHN1cGVyKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzWFJSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgYXR0YWNobWVudHMgb2YgdGhlIHJlbmRlciB0YXJnZXRcblx0XHQgKiBhcmUgZGVmaW5lZCBieSBleHRlcm5hbCB0ZXh0dXJlcy4gVGhpcyBmbGFnIGlzXG5cdFx0ICogc2V0IHRvIGB0cnVlYCB3aGVuIHVzaW5nIHRoZSBXZWJYUiBMYXllcnMgQVBJLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmhhc0V4dGVybmFsVGV4dHVyZXMgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgYSBkZXB0aCBidWZmZXIgc2hvdWxkIGF1dG9tYXRpY2FsbHkgYmUgYWxsb2NhdGVkXG5cdFx0ICogZm9yIHRoaXMgWFIgcmVuZGVyIHRhcmdldCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBBbGxvY2F0aW5nIGEgZGVwdGggYnVmZmVyIGlzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIFhSIHJlbmRlclxuXHRcdCAqIHRhcmdldHMuIEhvd2V2ZXIsIHdoZW4gdXNpbmcgdGhlIFdlYlhSIExheWVycyBBUEksIHRoaXMgZmxhZ1xuXHRcdCAqIG11c3QgYmUgc2V0IHRvIGBmYWxzZWAgd2hlbiB0aGUgYGlnbm9yZURlcHRoVmFsdWVzYCBwcm9wZXJ0eSBvZlxuXHRcdCAqIHRoZSBwcm9qZWN0aW9uIGxheWVycyBldmFsdWF0ZXMgdG8gYGZhbHNlYC5cblx0XHQgKlxuXHRcdCAqIFJlZmVyZW5jZToge0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJ4cmxheWVycy0xLyNkb20teHJwcm9qZWN0aW9ubGF5ZXItaWdub3JlZGVwdGh2YWx1ZXN9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgPSB0cnVlO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuaGFzRXh0ZXJuYWxUZXh0dXJlcyA9IHNvdXJjZS5oYXNFeHRlcm5hbFRleHR1cmVzO1xuXHRcdHRoaXMuYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgPSBzb3VyY2UuYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblxufVxuXG5leHBvcnQgeyBYUlJlbmRlclRhcmdldCB9O1xuIiwiaW1wb3J0IHsgQXJyYXlDYW1lcmEgfSBmcm9tICcuLi8uLi9jYW1lcmFzL0FycmF5Q2FtZXJhLmpzJztcbmltcG9ydCB7IEV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJy4uLy4uL2NvcmUvRXZlbnREaXNwYXRjaGVyLmpzJztcbmltcG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhIH0gZnJvbSAnLi4vLi4vY2FtZXJhcy9QZXJzcGVjdGl2ZUNhbWVyYS5qcyc7XG5pbXBvcnQgeyBSQUQyREVHIH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjQuanMnO1xuaW1wb3J0IHsgV2ViWFJDb250cm9sbGVyIH0gZnJvbSAnLi4vd2VieHIvV2ViWFJDb250cm9sbGVyLmpzJztcbmltcG9ydCB7IERlcHRoRm9ybWF0LCBEZXB0aFN0ZW5jaWxGb3JtYXQsIFJHQkFGb3JtYXQsIFVuc2lnbmVkQnl0ZVR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSwgVW5zaWduZWRJbnRUeXBlIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IERlcHRoVGV4dHVyZSB9IGZyb20gJy4uLy4uL3RleHR1cmVzL0RlcHRoVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBYUlJlbmRlclRhcmdldCB9IGZyb20gJy4vWFJSZW5kZXJUYXJnZXQuanMnO1xuXG5jb25zdCBfY2FtZXJhTFBvcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9jYW1lcmFSUG9zID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vKipcbiAqIFRoZSBYUiBtYW5hZ2VyIGlzIGJ1aWx0IG9uIHRvcCBvZiB0aGUgV2ViWFIgRGV2aWNlIEFQSSB0b1xuICogbWFuYWdlIFhSIHNlc3Npb25zIHdpdGggYFdlYkdQVVJlbmRlcmVyYC5cbiAqXG4gKiBYUiBpcyBjdXJyZW50bHkgb25seSBzdXBwb3J0ZWQgd2l0aCBhIFdlYkdMIDIgYmFja2VuZC5cbiAqXG4gKiBAYXVnbWVudHMgRXZlbnREaXNwYXRjaGVyXG4gKi9cbmNsYXNzIFhSTWFuYWdlciBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgWFIgbWFuYWdlci5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcmVuZGVyZXIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGdsb2JhbGx5IGVuYWJsZXMgWFIgcmVuZGVyaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIFhSIGRldmljZSBpcyBjdXJyZW50bHkgcHJlc2VudGluZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNQcmVzZW50aW5nID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBYUiBjYW1lcmEgc2hvdWxkIGF1dG9tYXRpY2FsbHkgYmUgdXBkYXRlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5jYW1lcmFBdXRvVXBkYXRlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXJlci5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge1JlbmRlcmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG5cblx0XHQvLyBjYW1lcmFcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIGNhbWVyYSBmb3IgdGhlIGxlZnQgZXllLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7UGVyc3BlY3RpdmVDYW1lcmF9XG5cdFx0ICovXG5cdFx0dGhpcy5fY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdHRoaXMuX2NhbWVyYUwudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgY2FtZXJhIGZvciB0aGUgcmlnaHQgZXllLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7UGVyc3BlY3RpdmVDYW1lcmF9XG5cdFx0ICovXG5cdFx0dGhpcy5fY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdHRoaXMuX2NhbWVyYVIudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IG9mIGNhbWVyYXMgdXNlZCBmb3IgcmVuZGVyaW5nIHRoZSBYUiB2aWV3cy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge0FycmF5PENhbWVyYT59XG5cdFx0ICovXG5cdFx0dGhpcy5fY2FtZXJhcyA9IFsgdGhpcy5fY2FtZXJhTCwgdGhpcy5fY2FtZXJhUiBdO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG1haW4gWFIgY2FtZXJhLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7QXJyYXlDYW1lcmF9XG5cdFx0ICovXG5cdFx0dGhpcy5fY2FtZXJhWFIgPSBuZXcgQXJyYXlDYW1lcmEoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjdXJyZW50IG5lYXIgdmFsdWUgb2YgdGhlIFhSIGNhbWVyYS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9udW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2N1cnJlbnREZXB0aE5lYXIgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgZmFyIHZhbHVlIG9mIHRoZSBYUiBjYW1lcmEuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9jdXJyZW50RGVwdGhGYXIgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IG9mIFdlYlhSIGNvbnRyb2xsZXJzIHJlcXVlc3RlZCBieSB0aGUgYXBwbGljYXRpb24uXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtBcnJheTxXZWJYUkNvbnRyb2xsZXI+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvbnRyb2xsZXJzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBBIGxpc3Qgb2YgWFIgaW5wdXQgc291cmNlLiBFYWNoIGlucHV0IHNvdXJjZSBiZWxvbmdzIHRvXG5cdFx0ICogYW4gaW5zdGFuY2Ugb2YgV2ViWFJDb250cm9sbGVyLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7QXJyYXk8WFJJbnB1dFNvdXJjZT8+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvbnRyb2xsZXJJbnB1dFNvdXJjZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBYUiByZW5kZXIgdGFyZ2V0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVuZGVyaW5nIGRlc3RpbmF0aW9uXG5cdFx0ICogZHVyaW5nIGFuIGFjdGl2ZSBYUiBzZXNzaW9uLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P1JlbmRlclRhcmdldH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5feHJSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgYW5pbWF0aW9uIGNvbnRleHQuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/V2luZG93fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9jdXJyZW50QW5pbWF0aW9uQ29udGV4dCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VycmVudCBhbmltYXRpb24gbG9vcC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9GdW5jdGlvbn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fY3VycmVudEFuaW1hdGlvbkxvb3AgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgcGl4ZWwgcmF0aW8uXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9jdXJyZW50UGl4ZWxSYXRpbyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VycmVudCBzaXplIG9mIHRoZSByZW5kZXJlcidzIGNhbnZhc1xuXHRcdCAqIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge1ZlY3RvcjJ9XG5cdFx0ICovXG5cdFx0dGhpcy5fY3VycmVudFNpemUgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRlZmF1bHQgZXZlbnQgbGlzdGVuZXIgZm9yIGhhbmRsaW5nIGV2ZW50cyBpbnNpZGUgYSBYUiBzZXNzaW9uLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7RnVuY3Rpb259XG5cdFx0ICovXG5cdFx0dGhpcy5fb25TZXNzaW9uRXZlbnQgPSBvblNlc3Npb25FdmVudC5iaW5kKCB0aGlzICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZXZlbnQgbGlzdGVuZXIgZm9yIGhhbmRsaW5nIHRoZSBlbmQgb2YgYSBYUiBzZXNzaW9uLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7RnVuY3Rpb259XG5cdFx0ICovXG5cdFx0dGhpcy5fb25TZXNzaW9uRW5kID0gb25TZXNzaW9uRW5kLmJpbmQoIHRoaXMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBldmVudCBsaXN0ZW5lciBmb3IgaGFuZGxpbmcgdGhlIGBpbnB1dHNvdXJjZXNjaGFuZ2VgIGV2ZW50LlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7RnVuY3Rpb259XG5cdFx0ICovXG5cdFx0dGhpcy5fb25JbnB1dFNvdXJjZXNDaGFuZ2UgPSBvbklucHV0U291cmNlc0NoYW5nZS5iaW5kKCB0aGlzICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYW5pbWF0aW9uIGxvb3Agd2hpY2ggaXMgdXNlZCBhcyBhIHJlcGxhY2VtZW50IGZvciB0aGUgZGVmYXVsdFxuXHRcdCAqIGFuaW1hdGlvbiBsb29wIG9mIHRoZSBhcHBsaWNhdGlvbi4gSXQgaXMgb25seSB1c2VkIHdoZW4gYSBYUiBzZXNzaW9uXG5cdFx0ICogaXMgYWN0aXZlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7RnVuY3Rpb259XG5cdFx0ICovXG5cdFx0dGhpcy5fb25BbmltYXRpb25GcmFtZSA9IG9uQW5pbWF0aW9uRnJhbWUuYmluZCggdGhpcyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgWFIgcmVmZXJlbmNlIHNwYWNlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P1hSUmVmZXJlbmNlU3BhY2V9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX3JlZmVyZW5jZVNwYWNlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjdXJyZW50IFhSIHJlZmVyZW5jZSBzcGFjZSB0eXBlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7WFJSZWZlcmVuY2VTcGFjZVR5cGV9XG5cdFx0ICogQGRlZmF1bHQgJ2xvY2FsLWZsb29yJ1xuXHRcdCAqL1xuXHRcdHRoaXMuX3JlZmVyZW5jZVNwYWNlVHlwZSA9ICdsb2NhbC1mbG9vcic7XG5cblx0XHQvKipcblx0XHQgKiBBIGN1c3RvbSByZWZlcmVuY2Ugc3BhY2UgZGVmaW5lZCBieSB0aGUgYXBwbGljYXRpb24uXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/WFJSZWZlcmVuY2VTcGFjZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fY3VzdG9tUmVmZXJlbmNlU3BhY2UgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGZyYW1lYnVmZmVyIHNjYWxlIGZhY3Rvci5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5fZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZm92ZWF0aW9uIGZhY3Rvci5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5fZm92ZWF0aW9uID0gMS4wO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgWFIgc2Vzc2lvbi5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9YUlNlc3Npb259XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX3Nlc3Npb24gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgWFIgYmFzZSBsYXllci5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9YUldlYkdMTGF5ZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2dsQmFzZUxheWVyID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IFhSIGJpbmRpbmcuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/WFJXZWJHTEJpbmRpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2dsQmluZGluZyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBYUiBwcm9qZWN0aW9uIGxheWVyLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P1hSUHJvamVjdGlvbkxheWVyfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9nbFByb2pMYXllciA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBYUiBmcmFtZS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9YUkZyYW1lfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl94ckZyYW1lID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdG8gdXNlIHRoZSBXZWJYUiBMYXllcnMgQVBJIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy5fdXNlTGF5ZXJzID0gKCB0eXBlb2YgWFJXZWJHTEJpbmRpbmcgIT09ICd1bmRlZmluZWQnICYmICdjcmVhdGVQcm9qZWN0aW9uTGF5ZXInIGluIFhSV2ViR0xCaW5kaW5nLnByb3RvdHlwZSApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbXBhdC9jb21wYXRcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2YgYFRIUkVFLkdyb3VwYCB0aGF0IHJlcHJlc2VudHMgdGhlIHRyYW5zZm9ybWF0aW9uXG5cdCAqIG9mIGEgWFIgY29udHJvbGxlciBpbiB0YXJnZXQgcmF5IHNwYWNlLiBUaGUgcmVxdWVzdGVkIGNvbnRyb2xsZXIgaXMgZGVmaW5lZFxuXHQgKiBieSB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgWFIgY29udHJvbGxlci5cblx0ICogQHJldHVybiB7R3JvdXB9IEEgZ3JvdXAgdGhhdCByZXByZXNlbnRzIHRoZSBjb250cm9sbGVyJ3MgdHJhbnNmb3JtYXRpb24uXG5cdCAqL1xuXHRnZXRDb250cm9sbGVyKCBpbmRleCApIHtcblxuXHRcdGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLl9nZXRDb250cm9sbGVyKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIGNvbnRyb2xsZXIuZ2V0VGFyZ2V0UmF5U3BhY2UoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2YgYFRIUkVFLkdyb3VwYCB0aGF0IHJlcHJlc2VudHMgdGhlIHRyYW5zZm9ybWF0aW9uXG5cdCAqIG9mIGEgWFIgY29udHJvbGxlciBpbiBncmlwIHNwYWNlLiBUaGUgcmVxdWVzdGVkIGNvbnRyb2xsZXIgaXMgZGVmaW5lZFxuXHQgKiBieSB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgWFIgY29udHJvbGxlci5cblx0ICogQHJldHVybiB7R3JvdXB9IEEgZ3JvdXAgdGhhdCByZXByZXNlbnRzIHRoZSBjb250cm9sbGVyJ3MgdHJhbnNmb3JtYXRpb24uXG5cdCAqL1xuXHRnZXRDb250cm9sbGVyR3JpcCggaW5kZXggKSB7XG5cblx0XHRjb25zdCBjb250cm9sbGVyID0gdGhpcy5fZ2V0Q29udHJvbGxlciggaW5kZXggKTtcblxuXHRcdHJldHVybiBjb250cm9sbGVyLmdldEdyaXBTcGFjZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiBgVEhSRUUuR3JvdXBgIHRoYXQgcmVwcmVzZW50cyB0aGUgdHJhbnNmb3JtYXRpb25cblx0ICogb2YgYSBYUiBjb250cm9sbGVyIGluIGhhbmQgc3BhY2UuIFRoZSByZXF1ZXN0ZWQgY29udHJvbGxlciBpcyBkZWZpbmVkXG5cdCAqIGJ5IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSBYUiBjb250cm9sbGVyLlxuXHQgKiBAcmV0dXJuIHtHcm91cH0gQSBncm91cCB0aGF0IHJlcHJlc2VudHMgdGhlIGNvbnRyb2xsZXIncyB0cmFuc2Zvcm1hdGlvbi5cblx0ICovXG5cdGdldEhhbmQoIGluZGV4ICkge1xuXG5cdFx0Y29uc3QgY29udHJvbGxlciA9IHRoaXMuX2dldENvbnRyb2xsZXIoIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gY29udHJvbGxlci5nZXRIYW5kU3BhY2UoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGZvdmVhdGlvbiB2YWx1ZS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfHVuZGVmaW5lZH0gVGhlIGZvdmVhdGlvbiB2YWx1ZS4gUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBubyBiYXNlIG9yIHByb2plY3Rpb24gbGF5ZXIgaXMgZGVmaW5lZC5cblx0ICovXG5cdGdldEZvdmVhdGlvbigpIHtcblxuXHRcdGlmICggdGhpcy5fZ2xQcm9qTGF5ZXIgPT09IG51bGwgJiYgdGhpcy5fZ2xCYXNlTGF5ZXIgPT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fZm92ZWF0aW9uO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZm92ZWF0aW9uIHZhbHVlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZm92ZWF0aW9uIC0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIGBbMCwxXWAgd2hlcmUgYDBgIG1lYW5zIG5vIGZvdmVhdGlvbiAoZnVsbCByZXNvbHV0aW9uKVxuXHQgKiBhbmQgYDFgIG1lYW5zIG1heGltdW0gZm92ZWF0aW9uICh0aGUgZWRnZXMgcmVuZGVyIGF0IGxvd2VyIHJlc29sdXRpb24pLlxuXHQgKi9cblx0c2V0Rm92ZWF0aW9uKCBmb3ZlYXRpb24gKSB7XG5cblx0XHR0aGlzLl9mb3ZlYXRpb24gPSBmb3ZlYXRpb247XG5cblx0XHRpZiAoIHRoaXMuX2dsUHJvakxheWVyICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9nbFByb2pMYXllci5maXhlZEZvdmVhdGlvbiA9IGZvdmVhdGlvbjtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5fZ2xCYXNlTGF5ZXIgIT09IG51bGwgJiYgdGhpcy5fZ2xCYXNlTGF5ZXIuZml4ZWRGb3ZlYXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5fZ2xCYXNlTGF5ZXIuZml4ZWRGb3ZlYXRpb24gPSBmb3ZlYXRpb247XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBmcmFtZWJ1ZmZlciBzY2FsZSBmYWN0b3IuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGZyYW1lYnVmZmVyIHNjYWxlIGZhY3Rvci5cblx0ICovXG5cdGdldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJhbWVidWZmZXJTY2FsZUZhY3RvcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGZyYW1lYnVmZmVyIHNjYWxlIGZhY3Rvci5cblx0ICpcblx0ICogVGhpcyBtZXRob2QgY2FuIG5vdCBiZSB1c2VkIGR1cmluZyBhIFhSIHNlc3Npb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmYWN0b3IgLSBUaGUgZnJhbWVidWZmZXIgc2NhbGUgZmFjdG9yLlxuXHQgKi9cblx0c2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciggZmFjdG9yICkge1xuXG5cdFx0dGhpcy5fZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IGZhY3RvcjtcblxuXHRcdGlmICggdGhpcy5pc1ByZXNlbnRpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlhSTWFuYWdlcjogQ2Fubm90IGNoYW5nZSBmcmFtZWJ1ZmZlciBzY2FsZSB3aGlsZSBwcmVzZW50aW5nLicgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHJlZmVyZW5jZSBzcGFjZSB0eXBlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtYUlJlZmVyZW5jZVNwYWNlVHlwZX0gVGhlIHJlZmVyZW5jZSBzcGFjZSB0eXBlLlxuXHQgKi9cblx0Z2V0UmVmZXJlbmNlU3BhY2VUeXBlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3JlZmVyZW5jZVNwYWNlVHlwZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHJlZmVyZW5jZSBzcGFjZSB0eXBlLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYW4gbm90IGJlIHVzZWQgZHVyaW5nIGEgWFIgc2Vzc2lvbi5cblx0ICpcblx0ICogQHBhcmFtIHtYUlJlZmVyZW5jZVNwYWNlVHlwZX0gdHlwZSAtIFRoZSByZWZlcmVuY2Ugc3BhY2UgdHlwZS5cblx0ICovXG5cdHNldFJlZmVyZW5jZVNwYWNlVHlwZSggdHlwZSApIHtcblxuXHRcdHRoaXMuX3JlZmVyZW5jZVNwYWNlVHlwZSA9IHR5cGU7XG5cblx0XHRpZiAoIHRoaXMuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5YUk1hbmFnZXI6IENhbm5vdCBjaGFuZ2UgcmVmZXJlbmNlIHNwYWNlIHR5cGUgd2hpbGUgcHJlc2VudGluZy4nICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBYUiByZWZlcmVuY2Ugc3BhY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1hSUmVmZXJlbmNlU3BhY2V9IFRoZSBYUiByZWZlcmVuY2Ugc3BhY2UuXG5cdCAqL1xuXHRnZXRSZWZlcmVuY2VTcGFjZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jdXN0b21SZWZlcmVuY2VTcGFjZSB8fCB0aGlzLl9yZWZlcmVuY2VTcGFjZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgYSBjdXN0b20gWFIgcmVmZXJlbmNlIHNwYWNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1hSUmVmZXJlbmNlU3BhY2V9IHNwYWNlIC0gVGhlIFhSIHJlZmVyZW5jZSBzcGFjZS5cblx0ICovXG5cdHNldFJlZmVyZW5jZVNwYWNlKCBzcGFjZSApIHtcblxuXHRcdHRoaXMuX2N1c3RvbVJlZmVyZW5jZVNwYWNlID0gc3BhY2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBYUiBjYW1lcmEuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0FycmF5Q2FtZXJhfSBUaGUgWFIgY2FtZXJhLlxuXHQgKi9cblx0Z2V0Q2FtZXJhKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2NhbWVyYVhSO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZW52aXJvbm1lbnQgYmxlbmQgbW9kZSBmcm9tIHRoZSBjdXJyZW50IFhSIHNlc3Npb24uXG5cdCAqXG5cdCAqIEByZXR1cm4gez8oJ29wYXF1ZSd8J2FkZGl0aXZlJ3wnYWxwaGEtYmxlbmQnKX0gVGhlIGVudmlyb25tZW50IGJsZW5kIG1vZGUuIFJldHVybnMgYG51bGxgIHdoZW4gdXNlZCBvdXRzaWRlIG9mIGEgWFIgc2Vzc2lvbi5cblx0ICovXG5cdGdldEVudmlyb25tZW50QmxlbmRNb2RlKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9zZXNzaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5fc2Vzc2lvbi5lbnZpcm9ubWVudEJsZW5kTW9kZTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgWFIgZnJhbWUuXG5cdCAqXG5cdCAqIEByZXR1cm4gez9YUkZyYW1lfSBUaGUgWFIgZnJhbWUuIFJldHVybnMgYG51bGxgIHdoZW4gdXNlZCBvdXRzaWRlIGEgWFIgc2Vzc2lvbi5cblx0ICovXG5cdGdldEZyYW1lKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3hyRnJhbWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IFhSIHNlc3Npb24uXG5cdCAqXG5cdCAqIEByZXR1cm4gez9YUlNlc3Npb259IFRoZSBYUiBzZXNzaW9uLiBSZXR1cm5zIGBudWxsYCB3aGVuIHVzZWQgb3V0c2lkZSBhIFhSIHNlc3Npb24uXG5cdCAqL1xuXHRnZXRTZXNzaW9uKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3Nlc3Npb247XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZnRlciBhIFhSIHNlc3Npb24gaGFzIGJlZW4gcmVxdWVzdGVkIHVzdWFsbHkgd2l0aCBvbmUgb2YgdGhlIGAqQnV0dG9uYCBtb2R1bGVzLCBpdFxuXHQgKiBpcyBpbmplY3RlZCBpbnRvIHRoZSByZW5kZXJlciB3aXRoIHRoaXMgbWV0aG9kLiBUaGlzIG1ldGhvZCB0cmlnZ2VycyB0aGUgc3RhcnQgb2Zcblx0ICogdGhlIGFjdHVhbCBYUiByZW5kZXJpbmcuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcGFyYW0ge1hSU2Vzc2lvbn0gc2Vzc2lvbiAtIFRoZSBYUiBzZXNzaW9uIHRvIHNldC5cblx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgc2Vzc2lvbiBoYXMgYmVlbiBzZXQuXG5cdCAqL1xuXHRhc3luYyBzZXRTZXNzaW9uKCBzZXNzaW9uICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblx0XHRjb25zdCBiYWNrZW5kID0gcmVuZGVyZXIuYmFja2VuZDtcblxuXHRcdGNvbnN0IGdsID0gcmVuZGVyZXIuZ2V0Q29udGV4dCgpO1xuXG5cdFx0dGhpcy5fc2Vzc2lvbiA9IHNlc3Npb247XG5cblx0XHRpZiAoIHNlc3Npb24gIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggYmFja2VuZC5pc1dlYkdQVUJhY2tlbmQgPT09IHRydWUgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5YUk1hbmFnZXI6IFhSIGlzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkIHdpdGggYSBXZWJHUFUgYmFja2VuZC4gVXNlIFdlYkdMIGJ5IHBhc3NpbmcgXCJ7IGZvcmNlV2ViR0w6IHRydWUgfVwiIHRvIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgcmVuZGVyZXIuJyApO1xuXG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3QnLCB0aGlzLl9vblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0c3RhcnQnLCB0aGlzLl9vblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0ZW5kJywgdGhpcy5fb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NxdWVlemUnLCB0aGlzLl9vblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZXN0YXJ0JywgdGhpcy5fb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NxdWVlemVlbmQnLCB0aGlzLl9vblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnZW5kJywgdGhpcy5fb25TZXNzaW9uRW5kICk7XG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dHNvdXJjZXNjaGFuZ2UnLCB0aGlzLl9vbklucHV0U291cmNlc0NoYW5nZSApO1xuXG5cdFx0XHRhd2FpdCBiYWNrZW5kLm1ha2VYUkNvbXBhdGlibGUoKTtcblxuXHRcdFx0dGhpcy5fY3VycmVudFBpeGVsUmF0aW8gPSByZW5kZXJlci5nZXRQaXhlbFJhdGlvKCk7XG5cdFx0XHRyZW5kZXJlci5nZXRTaXplKCB0aGlzLl9jdXJyZW50U2l6ZSApO1xuXG5cdFx0XHR0aGlzLl9jdXJyZW50QW5pbWF0aW9uQ29udGV4dCA9IHJlbmRlcmVyLl9hbmltYXRpb24uZ2V0Q29udGV4dCgpO1xuXHRcdFx0dGhpcy5fY3VycmVudEFuaW1hdGlvbkxvb3AgPSByZW5kZXJlci5fYW5pbWF0aW9uLmdldEFuaW1hdGlvbkxvb3AoKTtcblx0XHRcdHJlbmRlcmVyLl9hbmltYXRpb24uc3RvcCgpO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRpZiAoIHRoaXMuX3VzZUxheWVycyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHQvLyBkZWZhdWx0IHBhdGggdXNpbmcgWFJXZWJHTEJpbmRpbmcvWFJQcm9qZWN0aW9uTGF5ZXJcblxuXHRcdFx0XHRsZXQgZGVwdGhGb3JtYXQgPSBudWxsO1xuXHRcdFx0XHRsZXQgZGVwdGhUeXBlID0gbnVsbDtcblx0XHRcdFx0bGV0IGdsRGVwdGhGb3JtYXQgPSBudWxsO1xuXG5cdFx0XHRcdGlmICggcmVuZGVyZXIuZGVwdGggKSB7XG5cblx0XHRcdFx0XHRnbERlcHRoRm9ybWF0ID0gcmVuZGVyZXIuc3RlbmNpbCA/IGdsLkRFUFRIMjRfU1RFTkNJTDggOiBnbC5ERVBUSF9DT01QT05FTlQyNDtcblx0XHRcdFx0XHRkZXB0aEZvcm1hdCA9IHJlbmRlcmVyLnN0ZW5jaWwgPyBEZXB0aFN0ZW5jaWxGb3JtYXQgOiBEZXB0aEZvcm1hdDtcblx0XHRcdFx0XHRkZXB0aFR5cGUgPSByZW5kZXJlci5zdGVuY2lsID8gVW5zaWduZWRJbnQyNDhUeXBlIDogVW5zaWduZWRJbnRUeXBlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBwcm9qZWN0aW9ubGF5ZXJJbml0ID0ge1xuXHRcdFx0XHRcdGNvbG9yRm9ybWF0OiBnbC5SR0JBOCxcblx0XHRcdFx0XHRkZXB0aEZvcm1hdDogZ2xEZXB0aEZvcm1hdCxcblx0XHRcdFx0XHRzY2FsZUZhY3RvcjogdGhpcy5fZnJhbWVidWZmZXJTY2FsZUZhY3RvclxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbnN0IGdsQmluZGluZyA9IG5ldyBYUldlYkdMQmluZGluZyggc2Vzc2lvbiwgZ2wgKTtcblx0XHRcdFx0Y29uc3QgZ2xQcm9qTGF5ZXIgPSBnbEJpbmRpbmcuY3JlYXRlUHJvamVjdGlvbkxheWVyKCBwcm9qZWN0aW9ubGF5ZXJJbml0ICk7XG5cblx0XHRcdFx0dGhpcy5fZ2xCaW5kaW5nID0gZ2xCaW5kaW5nO1xuXHRcdFx0XHR0aGlzLl9nbFByb2pMYXllciA9IGdsUHJvakxheWVyO1xuXG5cdFx0XHRcdHNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoIHsgbGF5ZXJzOiBbIGdsUHJvakxheWVyIF0gfSApO1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIDEgKTtcblx0XHRcdFx0cmVuZGVyZXIuc2V0U2l6ZSggZ2xQcm9qTGF5ZXIudGV4dHVyZVdpZHRoLCBnbFByb2pMYXllci50ZXh0dXJlSGVpZ2h0LCBmYWxzZSApO1xuXG5cdFx0XHRcdHRoaXMuX3hyUmVuZGVyVGFyZ2V0ID0gbmV3IFhSUmVuZGVyVGFyZ2V0KFxuXHRcdFx0XHRcdGdsUHJvakxheWVyLnRleHR1cmVXaWR0aCxcblx0XHRcdFx0XHRnbFByb2pMYXllci50ZXh0dXJlSGVpZ2h0LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGZvcm1hdDogUkdCQUZvcm1hdCxcblx0XHRcdFx0XHRcdHR5cGU6IFVuc2lnbmVkQnl0ZVR5cGUsXG5cdFx0XHRcdFx0XHRjb2xvclNwYWNlOiByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlLFxuXHRcdFx0XHRcdFx0ZGVwdGhUZXh0dXJlOiBuZXcgRGVwdGhUZXh0dXJlKCBnbFByb2pMYXllci50ZXh0dXJlV2lkdGgsIGdsUHJvakxheWVyLnRleHR1cmVIZWlnaHQsIGRlcHRoVHlwZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZGVwdGhGb3JtYXQgKSxcblx0XHRcdFx0XHRcdHN0ZW5jaWxCdWZmZXI6IHJlbmRlcmVyLnN0ZW5jaWwsXG5cdFx0XHRcdFx0XHRyZXNvbHZlRGVwdGhCdWZmZXI6ICggZ2xQcm9qTGF5ZXIuaWdub3JlRGVwdGhWYWx1ZXMgPT09IGZhbHNlICksXG5cdFx0XHRcdFx0XHRyZXNvbHZlU3RlbmNpbEJ1ZmZlcjogKCBnbFByb2pMYXllci5pZ25vcmVEZXB0aFZhbHVlcyA9PT0gZmFsc2UgKSxcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0dGhpcy5feHJSZW5kZXJUYXJnZXQuaGFzRXh0ZXJuYWxUZXh0dXJlcyA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gZmFsbGJhY2sgdG8gWFJXZWJHTExheWVyXG5cblx0XHRcdFx0Y29uc3QgbGF5ZXJJbml0ID0ge1xuXHRcdFx0XHRcdGFudGlhbGlhczogcmVuZGVyZXIuc2FtcGxlcyA+IDAsXG5cdFx0XHRcdFx0YWxwaGE6IHRydWUsXG5cdFx0XHRcdFx0ZGVwdGg6IHJlbmRlcmVyLmRlcHRoLFxuXHRcdFx0XHRcdHN0ZW5jaWw6IHJlbmRlcmVyLnN0ZW5jaWwsXG5cdFx0XHRcdFx0ZnJhbWVidWZmZXJTY2FsZUZhY3RvcjogdGhpcy5nZXRGcmFtZWJ1ZmZlclNjYWxlRmFjdG9yKClcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRjb25zdCBnbEJhc2VMYXllciA9IG5ldyBYUldlYkdMTGF5ZXIoIHNlc3Npb24sIGdsLCBsYXllckluaXQgKTtcblx0XHRcdFx0dGhpcy5fZ2xCYXNlTGF5ZXIgPSBnbEJhc2VMYXllcjtcblxuXHRcdFx0XHRzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKCB7IGJhc2VMYXllcjogZ2xCYXNlTGF5ZXIgfSApO1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIDEgKTtcblx0XHRcdFx0cmVuZGVyZXIuc2V0U2l6ZSggZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJXaWR0aCwgZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJIZWlnaHQsIGZhbHNlICk7XG5cblx0XHRcdFx0dGhpcy5feHJSZW5kZXJUYXJnZXQgPSBuZXcgWFJSZW5kZXJUYXJnZXQoXG5cdFx0XHRcdFx0Z2xCYXNlTGF5ZXIuZnJhbWVidWZmZXJXaWR0aCxcblx0XHRcdFx0XHRnbEJhc2VMYXllci5mcmFtZWJ1ZmZlckhlaWdodCxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRmb3JtYXQ6IFJHQkFGb3JtYXQsXG5cdFx0XHRcdFx0XHR0eXBlOiBVbnNpZ25lZEJ5dGVUeXBlLFxuXHRcdFx0XHRcdFx0Y29sb3JTcGFjZTogcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSxcblx0XHRcdFx0XHRcdHN0ZW5jaWxCdWZmZXI6IHJlbmRlcmVyLnN0ZW5jaWwsXG5cdFx0XHRcdFx0XHRyZXNvbHZlRGVwdGhCdWZmZXI6ICggZ2xCYXNlTGF5ZXIuaWdub3JlRGVwdGhWYWx1ZXMgPT09IGZhbHNlICksXG5cdFx0XHRcdFx0XHRyZXNvbHZlU3RlbmNpbEJ1ZmZlcjogKCBnbEJhc2VMYXllci5pZ25vcmVEZXB0aFZhbHVlcyA9PT0gZmFsc2UgKSxcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0dGhpcy5zZXRGb3ZlYXRpb24oIHRoaXMuZ2V0Rm92ZWF0aW9uKCkgKTtcblxuXHRcdFx0dGhpcy5fcmVmZXJlbmNlU3BhY2UgPSBhd2FpdCBzZXNzaW9uLnJlcXVlc3RSZWZlcmVuY2VTcGFjZSggdGhpcy5nZXRSZWZlcmVuY2VTcGFjZVR5cGUoKSApO1xuXG5cdFx0XHRyZW5kZXJlci5fYW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIHRoaXMuX29uQW5pbWF0aW9uRnJhbWUgKTtcblx0XHRcdHJlbmRlcmVyLl9hbmltYXRpb24uc2V0Q29udGV4dCggc2Vzc2lvbiApO1xuXHRcdFx0cmVuZGVyZXIuX2FuaW1hdGlvbi5zdGFydCgpO1xuXG5cdFx0XHR0aGlzLmlzUHJlc2VudGluZyA9IHRydWU7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2Vzc2lvbnN0YXJ0JyB9ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIHJlbmRlcmVyIHBlciBmcmFtZSBhbmQgdXBkYXRlcyB0aGUgWFIgY2FtZXJhXG5cdCAqIGFuZCBpdCBzdWIgY2FtZXJhcyBiYXNlZCBvbiB0aGUgZ2l2ZW4gY2FtZXJhLiBUaGUgZ2l2ZW4gY2FtZXJhIGlzIHRoZSBcInVzZXJcIlxuXHQgKiBjYW1lcmEgY3JlYXRlZCBvbiBhcHBsaWNhdGlvbiBsZXZlbCBhbmQgdXNlZCBmb3Igbm9uLVhSIHJlbmRlcmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtQZXJzcGVjdGl2ZUNhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYS5cblx0ICovXG5cdHVwZGF0ZUNhbWVyYSggY2FtZXJhICkge1xuXG5cdFx0Y29uc3Qgc2Vzc2lvbiA9IHRoaXMuX3Nlc3Npb247XG5cblx0XHRpZiAoIHNlc3Npb24gPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRjb25zdCBkZXB0aE5lYXIgPSBjYW1lcmEubmVhcjtcblx0XHRjb25zdCBkZXB0aEZhciA9IGNhbWVyYS5mYXI7XG5cblx0XHRjb25zdCBjYW1lcmFYUiA9IHRoaXMuX2NhbWVyYVhSO1xuXHRcdGNvbnN0IGNhbWVyYUwgPSB0aGlzLl9jYW1lcmFMO1xuXHRcdGNvbnN0IGNhbWVyYVIgPSB0aGlzLl9jYW1lcmFSO1xuXG5cdFx0Y2FtZXJhWFIubmVhciA9IGNhbWVyYVIubmVhciA9IGNhbWVyYUwubmVhciA9IGRlcHRoTmVhcjtcblx0XHRjYW1lcmFYUi5mYXIgPSBjYW1lcmFSLmZhciA9IGNhbWVyYUwuZmFyID0gZGVwdGhGYXI7XG5cblx0XHRpZiAoIHRoaXMuX2N1cnJlbnREZXB0aE5lYXIgIT09IGNhbWVyYVhSLm5lYXIgfHwgdGhpcy5fY3VycmVudERlcHRoRmFyICE9PSBjYW1lcmFYUi5mYXIgKSB7XG5cblx0XHRcdC8vIE5vdGUgdGhhdCB0aGUgbmV3IHJlbmRlclN0YXRlIHdvbid0IGFwcGx5IHVudGlsIHRoZSBuZXh0IGZyYW1lLiBTZWUgIzE4MzIwXG5cblx0XHRcdHNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoIHtcblx0XHRcdFx0ZGVwdGhOZWFyOiBjYW1lcmFYUi5uZWFyLFxuXHRcdFx0XHRkZXB0aEZhcjogY2FtZXJhWFIuZmFyXG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuX2N1cnJlbnREZXB0aE5lYXIgPSBjYW1lcmFYUi5uZWFyO1xuXHRcdFx0dGhpcy5fY3VycmVudERlcHRoRmFyID0gY2FtZXJhWFIuZmFyO1xuXG5cdFx0fVxuXG5cdFx0Y2FtZXJhTC5sYXllcnMubWFzayA9IGNhbWVyYS5sYXllcnMubWFzayB8IDBiMDEwO1xuXHRcdGNhbWVyYVIubGF5ZXJzLm1hc2sgPSBjYW1lcmEubGF5ZXJzLm1hc2sgfCAwYjEwMDtcblx0XHRjYW1lcmFYUi5sYXllcnMubWFzayA9IGNhbWVyYUwubGF5ZXJzLm1hc2sgfCBjYW1lcmFSLmxheWVycy5tYXNrO1xuXG5cdFx0Y29uc3QgcGFyZW50ID0gY2FtZXJhLnBhcmVudDtcblx0XHRjb25zdCBjYW1lcmFzID0gY2FtZXJhWFIuY2FtZXJhcztcblxuXHRcdHVwZGF0ZUNhbWVyYSggY2FtZXJhWFIsIHBhcmVudCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2FtZXJhcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHVwZGF0ZUNhbWVyYSggY2FtZXJhc1sgaSBdLCBwYXJlbnQgKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBwcm9qZWN0aW9uIG1hdHJpeCBmb3IgcHJvcGVyIHZpZXcgZnJ1c3R1bSBjdWxsaW5nXG5cblx0XHRpZiAoIGNhbWVyYXMubGVuZ3RoID09PSAyICkge1xuXG5cdFx0XHRzZXRQcm9qZWN0aW9uRnJvbVVuaW9uKCBjYW1lcmFYUiwgY2FtZXJhTCwgY2FtZXJhUiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYXNzdW1lIHNpbmdsZSBjYW1lcmEgc2V0dXAgKEFSKVxuXG5cdFx0XHRjYW1lcmFYUi5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIHVzZXIgY2FtZXJhIGFuZCBpdHMgY2hpbGRyZW5cblxuXHRcdHVwZGF0ZVVzZXJDYW1lcmEoIGNhbWVyYSwgY2FtZXJhWFIsIHBhcmVudCApO1xuXG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgV2ViWFIgY29udHJvbGxlciBmb3IgdGhlIGdpdmVuIGNvbnRyb2xsZXIgaW5kZXguXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBjb250cm9sbGVyIGluZGV4LlxuXHQgKiBAcmV0dXJuIHtXZWJYUkNvbnRyb2xsZXJ9IFRoZSBYUiBjb250cm9sbGVyLlxuXHQgKi9cblx0X2dldENvbnRyb2xsZXIoIGluZGV4ICkge1xuXG5cdFx0bGV0IGNvbnRyb2xsZXIgPSB0aGlzLl9jb250cm9sbGVyc1sgaW5kZXggXTtcblxuXHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb250cm9sbGVyID0gbmV3IFdlYlhSQ29udHJvbGxlcigpO1xuXHRcdFx0dGhpcy5fY29udHJvbGxlcnNbIGluZGV4IF0gPSBjb250cm9sbGVyO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbnRyb2xsZXI7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQXNzdW1lcyAyIGNhbWVyYXMgdGhhdCBhcmUgcGFyYWxsZWwgYW5kIHNoYXJlIGFuIFgtYXhpcywgYW5kIHRoYXRcbiAqIHRoZSBjYW1lcmFzJyBwcm9qZWN0aW9uIGFuZCB3b3JsZCBtYXRyaWNlcyBoYXZlIGFscmVhZHkgYmVlbiBzZXQuXG4gKiBBbmQgdGhhdCBuZWFyIGFuZCBmYXIgcGxhbmVzIGFyZSBpZGVudGljYWwgZm9yIGJvdGggY2FtZXJhcy5cbiAqIFZpc3VhbGl6YXRpb24gb2YgdGhpcyB0ZWNobmlxdWU6IGh0dHBzOi8vY29tcHV0ZXJncmFwaGljcy5zdGFja2V4Y2hhbmdlLmNvbS9hLzQ3NjVcbiAqXG4gKiBAcGFyYW0ge0FycmF5Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7UGVyc3BlY3RpdmVDYW1lcmF9IGNhbWVyYUwgLSBUaGUgbGVmdCBjYW1lcmEuXG4gKiBAcGFyYW0ge1BlcnNwZWN0aXZlQ2FtZXJhfSBjYW1lcmFSIC0gVGhlIHJpZ2h0IGNhbWVyYS5cbiAqL1xuZnVuY3Rpb24gc2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhLCBjYW1lcmFMLCBjYW1lcmFSICkge1xuXG5cdF9jYW1lcmFMUG9zLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhTC5tYXRyaXhXb3JsZCApO1xuXHRfY2FtZXJhUlBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYVIubWF0cml4V29ybGQgKTtcblxuXHRjb25zdCBpcGQgPSBfY2FtZXJhTFBvcy5kaXN0YW5jZVRvKCBfY2FtZXJhUlBvcyApO1xuXG5cdGNvbnN0IHByb2pMID0gY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xuXHRjb25zdCBwcm9qUiA9IGNhbWVyYVIucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcblxuXHQvLyBWUiBzeXN0ZW1zIHdpbGwgaGF2ZSBpZGVudGljYWwgZmFyIGFuZCBuZWFyIHBsYW5lcywgYW5kXG5cdC8vIG1vc3QgbGlrZWx5IGlkZW50aWNhbCB0b3AgYW5kIGJvdHRvbSBmcnVzdHVtIGV4dGVudHMuXG5cdC8vIFVzZSB0aGUgbGVmdCBjYW1lcmEgZm9yIHRoZXNlIHZhbHVlcy5cblx0Y29uc3QgbmVhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSAtIDEgKTtcblx0Y29uc3QgZmFyID0gcHJvakxbIDE0IF0gLyAoIHByb2pMWyAxMCBdICsgMSApO1xuXHRjb25zdCB0b3BGb3YgPSAoIHByb2pMWyA5IF0gKyAxICkgLyBwcm9qTFsgNSBdO1xuXHRjb25zdCBib3R0b21Gb3YgPSAoIHByb2pMWyA5IF0gLSAxICkgLyBwcm9qTFsgNSBdO1xuXG5cdGNvbnN0IGxlZnRGb3YgPSAoIHByb2pMWyA4IF0gLSAxICkgLyBwcm9qTFsgMCBdO1xuXHRjb25zdCByaWdodEZvdiA9ICggcHJvalJbIDggXSArIDEgKSAvIHByb2pSWyAwIF07XG5cdGNvbnN0IGxlZnQgPSBuZWFyICogbGVmdEZvdjtcblx0Y29uc3QgcmlnaHQgPSBuZWFyICogcmlnaHRGb3Y7XG5cblx0Ly8gQ2FsY3VsYXRlIHRoZSBuZXcgY2FtZXJhJ3MgcG9zaXRpb24gb2Zmc2V0IGZyb20gdGhlXG5cdC8vIGxlZnQgY2FtZXJhLiB4T2Zmc2V0IHNob3VsZCBiZSByb3VnaGx5IGhhbGYgYGlwZGAuXG5cdGNvbnN0IHpPZmZzZXQgPSBpcGQgLyAoIC0gbGVmdEZvdiArIHJpZ2h0Rm92ICk7XG5cdGNvbnN0IHhPZmZzZXQgPSB6T2Zmc2V0ICogLSBsZWZ0Rm92O1xuXG5cdC8vIFRPRE86IEJldHRlciB3YXkgdG8gYXBwbHkgdGhpcyBvZmZzZXQ/XG5cdGNhbWVyYUwubWF0cml4V29ybGQuZGVjb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0Y2FtZXJhLnRyYW5zbGF0ZVgoIHhPZmZzZXQgKTtcblx0Y2FtZXJhLnRyYW5zbGF0ZVooIHpPZmZzZXQgKTtcblx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdC8vIENoZWNrIGlmIHRoZSBwcm9qZWN0aW9uIHVzZXMgYW4gaW5maW5pdGUgZmFyIHBsYW5lLlxuXHRpZiAoIHByb2pMWyAxMCBdID09PSAtIDEuMCApIHtcblxuXHRcdC8vIFVzZSB0aGUgcHJvamVjdGlvbiBtYXRyaXggZnJvbSB0aGUgbGVmdCBleWUuXG5cdFx0Ly8gVGhlIGNhbWVyYSBvZmZzZXQgaXMgc3VmZmljaWVudCB0byBpbmNsdWRlIHRoZSB2aWV3IHZvbHVtZXNcblx0XHQvLyBvZiBib3RoIGV5ZXMgKGFzc3VtaW5nIHN5bW1ldHJpYyBwcm9qZWN0aW9ucykuXG5cdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gRmluZCB0aGUgdW5pb24gb2YgdGhlIGZydXN0dW0gdmFsdWVzIG9mIHRoZSBjYW1lcmFzIGFuZCBzY2FsZVxuXHRcdC8vIHRoZSB2YWx1ZXMgc28gdGhhdCB0aGUgbmVhciBwbGFuZSdzIHBvc2l0aW9uIGRvZXMgbm90IGNoYW5nZSBpbiB3b3JsZCBzcGFjZSxcblx0XHQvLyBhbHRob3VnaCBtdXN0IG5vdyBiZSByZWxhdGl2ZSB0byB0aGUgbmV3IHVuaW9uIGNhbWVyYS5cblx0XHRjb25zdCBuZWFyMiA9IG5lYXIgKyB6T2Zmc2V0O1xuXHRcdGNvbnN0IGZhcjIgPSBmYXIgKyB6T2Zmc2V0O1xuXHRcdGNvbnN0IGxlZnQyID0gbGVmdCAtIHhPZmZzZXQ7XG5cdFx0Y29uc3QgcmlnaHQyID0gcmlnaHQgKyAoIGlwZCAtIHhPZmZzZXQgKTtcblx0XHRjb25zdCB0b3AyID0gdG9wRm92ICogZmFyIC8gZmFyMiAqIG5lYXIyO1xuXHRcdGNvbnN0IGJvdHRvbTIgPSBib3R0b21Gb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7XG5cblx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5tYWtlUGVyc3BlY3RpdmUoIGxlZnQyLCByaWdodDIsIHRvcDIsIGJvdHRvbTIsIG5lYXIyLCBmYXIyICk7XG5cdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgd29ybGQgbWF0cmljZXMgZm9yIHRoZSBnaXZlbiBjYW1lcmEgYmFzZWQgb24gdGhlIHBhcmVudCAzRCBvYmplY3QuXG4gKlxuICogQGlubmVyXG4gKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdDNEfSBwYXJlbnQgLSBUaGUgcGFyZW50IDNEIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlQ2FtZXJhKCBjYW1lcmEsIHBhcmVudCApIHtcblxuXHRpZiAoIHBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKCBwYXJlbnQubWF0cml4V29ybGQsIGNhbWVyYS5tYXRyaXggKTtcblxuXHR9XG5cblx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIGdpdmVuIGNhbWVyYSB3aXRoIHRoZSB0cmFuc2Zvcm1hdGlvbiBvZiB0aGUgWFIgY2FtZXJhIGFuZCBwYXJlbnQgb2JqZWN0LlxuICpcbiAqIEBpbm5lclxuICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtBcnJheUNhbWVyYX0gY2FtZXJhWFIgLSBUaGUgWFIgY2FtZXJhLlxuICogQHBhcmFtIHtPYmplY3QzRH0gcGFyZW50IC0gVGhlIHBhcmVudCAzRCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVVzZXJDYW1lcmEoIGNhbWVyYSwgY2FtZXJhWFIsIHBhcmVudCApIHtcblxuXHRpZiAoIHBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdGNhbWVyYS5tYXRyaXguY29weSggY2FtZXJhWFIubWF0cml4V29ybGQgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Y2FtZXJhLm1hdHJpeC5jb3B5KCBwYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRjYW1lcmEubWF0cml4LmludmVydCgpO1xuXHRcdGNhbWVyYS5tYXRyaXgubXVsdGlwbHkoIGNhbWVyYVhSLm1hdHJpeFdvcmxkICk7XG5cblx0fVxuXG5cdGNhbWVyYS5tYXRyaXguZGVjb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0Y2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhWFIucHJvamVjdGlvbk1hdHJpeCApO1xuXHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggY2FtZXJhWFIucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTtcblxuXHRpZiAoIGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0Y2FtZXJhLmZvdiA9IFJBRDJERUcgKiAyICogTWF0aC5hdGFuKCAxIC8gY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDUgXSApO1xuXHRcdGNhbWVyYS56b29tID0gMTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25TZXNzaW9uRXZlbnQoIGV2ZW50ICkge1xuXG5cdGNvbnN0IGNvbnRyb2xsZXJJbmRleCA9IHRoaXMuX2NvbnRyb2xsZXJJbnB1dFNvdXJjZXMuaW5kZXhPZiggZXZlbnQuaW5wdXRTb3VyY2UgKTtcblxuXHRpZiAoIGNvbnRyb2xsZXJJbmRleCA9PT0gLSAxICkge1xuXG5cdFx0cmV0dXJuO1xuXG5cdH1cblxuXHRjb25zdCBjb250cm9sbGVyID0gdGhpcy5fY29udHJvbGxlcnNbIGNvbnRyb2xsZXJJbmRleCBdO1xuXG5cdGlmICggY29udHJvbGxlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0Y29uc3QgcmVmZXJlbmNlU3BhY2UgPSB0aGlzLmdldFJlZmVyZW5jZVNwYWNlKCk7XG5cblx0XHRjb250cm9sbGVyLnVwZGF0ZSggZXZlbnQuaW5wdXRTb3VyY2UsIGV2ZW50LmZyYW1lLCByZWZlcmVuY2VTcGFjZSApO1xuXHRcdGNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiBldmVudC50eXBlLCBkYXRhOiBldmVudC5pbnB1dFNvdXJjZSB9ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uU2Vzc2lvbkVuZCgpIHtcblxuXHRjb25zdCBzZXNzaW9uID0gdGhpcy5fc2Vzc2lvbjtcblx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblxuXHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzZWxlY3QnLCB0aGlzLl9vblNlc3Npb25FdmVudCApO1xuXHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzZWxlY3RzdGFydCcsIHRoaXMuX29uU2Vzc2lvbkV2ZW50ICk7XG5cdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NlbGVjdGVuZCcsIHRoaXMuX29uU2Vzc2lvbkV2ZW50ICk7XG5cdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NxdWVlemUnLCB0aGlzLl9vblNlc3Npb25FdmVudCApO1xuXHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzcXVlZXplc3RhcnQnLCB0aGlzLl9vblNlc3Npb25FdmVudCApO1xuXHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzcXVlZXplZW5kJywgdGhpcy5fb25TZXNzaW9uRXZlbnQgKTtcblx0c2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnZW5kJywgdGhpcy5fb25TZXNzaW9uRW5kICk7XG5cdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2lucHV0c291cmNlc2NoYW5nZScsIHRoaXMuX29uSW5wdXRTb3VyY2VzQ2hhbmdlICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5fY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSB0aGlzLl9jb250cm9sbGVySW5wdXRTb3VyY2VzWyBpIF07XG5cblx0XHRpZiAoIGlucHV0U291cmNlID09PSBudWxsICkgY29udGludWU7XG5cblx0XHR0aGlzLl9jb250cm9sbGVySW5wdXRTb3VyY2VzWyBpIF0gPSBudWxsO1xuXG5cdFx0dGhpcy5fY29udHJvbGxlcnNbIGkgXS5kaXNjb25uZWN0KCBpbnB1dFNvdXJjZSApO1xuXG5cdH1cblxuXHR0aGlzLl9jdXJyZW50RGVwdGhOZWFyID0gbnVsbDtcblx0dGhpcy5fY3VycmVudERlcHRoRmFyID0gbnVsbDtcblxuXHQvLyByZXN0b3JlIGZyYW1lYnVmZmVyL3JlbmRlcmluZyBzdGF0ZVxuXG5cdHJlbmRlcmVyLmJhY2tlbmQuc2V0WFJUYXJnZXQoIG51bGwgKTtcblx0cmVuZGVyZXIuc2V0T3V0cHV0UmVuZGVyVGFyZ2V0KCBudWxsICk7XG5cblx0dGhpcy5fc2Vzc2lvbiA9IG51bGw7XG5cdHRoaXMuX3hyUmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHQvL1xuXG5cdHRoaXMuaXNQcmVzZW50aW5nID0gZmFsc2U7XG5cblx0cmVuZGVyZXIuX2FuaW1hdGlvbi5zdG9wKCk7XG5cblx0cmVuZGVyZXIuX2FuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCB0aGlzLl9jdXJyZW50QW5pbWF0aW9uTG9vcCApO1xuXHRyZW5kZXJlci5fYW5pbWF0aW9uLnNldENvbnRleHQoIHRoaXMuX2N1cnJlbnRBbmltYXRpb25Db250ZXh0ICk7XG5cdHJlbmRlcmVyLl9hbmltYXRpb24uc3RhcnQoKTtcblxuXHRyZW5kZXJlci5zZXRQaXhlbFJhdGlvKCB0aGlzLl9jdXJyZW50UGl4ZWxSYXRpbyApO1xuXHRyZW5kZXJlci5zZXRTaXplKCB0aGlzLl9jdXJyZW50U2l6ZS53aWR0aCwgdGhpcy5fY3VycmVudFNpemUuaGVpZ2h0LCBmYWxzZSApO1xuXG5cdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2Vzc2lvbmVuZCcgfSApO1xuXG59XG5cbmZ1bmN0aW9uIG9uSW5wdXRTb3VyY2VzQ2hhbmdlKCBldmVudCApIHtcblxuXHRjb25zdCBjb250cm9sbGVycyA9IHRoaXMuX2NvbnRyb2xsZXJzO1xuXHRjb25zdCBjb250cm9sbGVySW5wdXRTb3VyY2VzID0gdGhpcy5fY29udHJvbGxlcklucHV0U291cmNlcztcblxuXHQvLyBOb3RpZnkgZGlzY29ubmVjdGVkXG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZXZlbnQucmVtb3ZlZC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRjb25zdCBpbnB1dFNvdXJjZSA9IGV2ZW50LnJlbW92ZWRbIGkgXTtcblx0XHRjb25zdCBpbmRleCA9IGNvbnRyb2xsZXJJbnB1dFNvdXJjZXMuaW5kZXhPZiggaW5wdXRTb3VyY2UgKTtcblxuXHRcdGlmICggaW5kZXggPj0gMCApIHtcblxuXHRcdFx0Y29udHJvbGxlcklucHV0U291cmNlc1sgaW5kZXggXSA9IG51bGw7XG5cdFx0XHRjb250cm9sbGVyc1sgaW5kZXggXS5kaXNjb25uZWN0KCBpbnB1dFNvdXJjZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBOb3RpZnkgY29ubmVjdGVkXG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZXZlbnQuYWRkZWQubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBldmVudC5hZGRlZFsgaSBdO1xuXG5cdFx0bGV0IGNvbnRyb2xsZXJJbmRleCA9IGNvbnRyb2xsZXJJbnB1dFNvdXJjZXMuaW5kZXhPZiggaW5wdXRTb3VyY2UgKTtcblxuXHRcdGlmICggY29udHJvbGxlckluZGV4ID09PSAtIDEgKSB7XG5cblx0XHRcdC8vIEFzc2lnbiBpbnB1dCBzb3VyY2UgYSBjb250cm9sbGVyIHRoYXQgY3VycmVudGx5IGhhcyBubyBpbnB1dCBzb3VyY2VcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggaSA+PSBjb250cm9sbGVySW5wdXRTb3VyY2VzLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdGNvbnRyb2xsZXJJbnB1dFNvdXJjZXMucHVzaCggaW5wdXRTb3VyY2UgKTtcblx0XHRcdFx0XHRjb250cm9sbGVySW5kZXggPSBpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRyb2xsZXJJbnB1dFNvdXJjZXNbIGkgXSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGNvbnRyb2xsZXJJbnB1dFNvdXJjZXNbIGkgXSA9IGlucHV0U291cmNlO1xuXHRcdFx0XHRcdGNvbnRyb2xsZXJJbmRleCA9IGk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGFsbCBjb250cm9sbGVycyBkbyBjdXJyZW50bHkgcmVjZWl2ZSBpbnB1dCB3ZSBpZ25vcmUgbmV3IG9uZXNcblxuXHRcdFx0aWYgKCBjb250cm9sbGVySW5kZXggPT09IC0gMSApIGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBjb250cm9sbGVySW5kZXggXTtcblxuXHRcdGlmICggY29udHJvbGxlciApIHtcblxuXHRcdFx0Y29udHJvbGxlci5jb25uZWN0KCBpbnB1dFNvdXJjZSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKCB0aW1lLCBmcmFtZSApIHtcblxuXHRpZiAoIGZyYW1lID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0Y29uc3QgY2FtZXJhWFIgPSB0aGlzLl9jYW1lcmFYUjtcblx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblx0Y29uc3QgYmFja2VuZCA9IHJlbmRlcmVyLmJhY2tlbmQ7XG5cblx0Y29uc3QgZ2xCYXNlTGF5ZXIgPSB0aGlzLl9nbEJhc2VMYXllcjtcblxuXHRjb25zdCByZWZlcmVuY2VTcGFjZSA9IHRoaXMuZ2V0UmVmZXJlbmNlU3BhY2UoKTtcblx0Y29uc3QgcG9zZSA9IGZyYW1lLmdldFZpZXdlclBvc2UoIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0dGhpcy5feHJGcmFtZSA9IGZyYW1lO1xuXG5cdGlmICggcG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdGNvbnN0IHZpZXdzID0gcG9zZS52aWV3cztcblxuXHRcdGlmICggdGhpcy5fZ2xCYXNlTGF5ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdGJhY2tlbmQuc2V0WFJUYXJnZXQoIGdsQmFzZUxheWVyLmZyYW1lYnVmZmVyICk7XG5cblx0XHR9XG5cblx0XHRsZXQgY2FtZXJhWFJOZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0Ly8gY2hlY2sgaWYgaXQncyBuZWNlc3NhcnkgdG8gcmVidWlsZCBjYW1lcmFYUidzIGNhbWVyYSBsaXN0XG5cblx0XHRpZiAoIHZpZXdzLmxlbmd0aCAhPT0gY2FtZXJhWFIuY2FtZXJhcy5sZW5ndGggKSB7XG5cblx0XHRcdGNhbWVyYVhSLmNhbWVyYXMubGVuZ3RoID0gMDtcblx0XHRcdGNhbWVyYVhSTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmlld3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB2aWV3ID0gdmlld3NbIGkgXTtcblxuXHRcdFx0bGV0IHZpZXdwb3J0O1xuXG5cdFx0XHRpZiAoIHRoaXMuX3VzZUxheWVycyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zdCBnbFN1YkltYWdlID0gdGhpcy5fZ2xCaW5kaW5nLmdldFZpZXdTdWJJbWFnZSggdGhpcy5fZ2xQcm9qTGF5ZXIsIHZpZXcgKTtcblx0XHRcdFx0dmlld3BvcnQgPSBnbFN1YkltYWdlLnZpZXdwb3J0O1xuXG5cdFx0XHRcdC8vIEZvciBzaWRlLWJ5LXNpZGUgcHJvamVjdGlvbiwgd2Ugb25seSBwcm9kdWNlIGEgc2luZ2xlIHRleHR1cmUgZm9yIGJvdGggZXllcy5cblx0XHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdFx0YmFja2VuZC5zZXRYUlJlbmRlclRhcmdldFRleHR1cmVzKFxuXHRcdFx0XHRcdFx0dGhpcy5feHJSZW5kZXJUYXJnZXQsXG5cdFx0XHRcdFx0XHRnbFN1YkltYWdlLmNvbG9yVGV4dHVyZSxcblx0XHRcdFx0XHRcdHRoaXMuX2dsUHJvakxheWVyLmlnbm9yZURlcHRoVmFsdWVzID8gdW5kZWZpbmVkIDogZ2xTdWJJbWFnZS5kZXB0aFN0ZW5jaWxUZXh0dXJlXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmlld3BvcnQgPSBnbEJhc2VMYXllci5nZXRWaWV3cG9ydCggdmlldyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCBjYW1lcmEgPSB0aGlzLl9jYW1lcmFzWyBpIF07XG5cblx0XHRcdGlmICggY2FtZXJhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdFx0XHRcdGNhbWVyYS5sYXllcnMuZW5hYmxlKCBpICk7XG5cdFx0XHRcdGNhbWVyYS52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0XHRcdHRoaXMuX2NhbWVyYXNbIGkgXSA9IGNhbWVyYTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYW1lcmEubWF0cml4LmZyb21BcnJheSggdmlldy50cmFuc2Zvcm0ubWF0cml4ICk7XG5cdFx0XHRjYW1lcmEubWF0cml4LmRlY29tcG9zZSggY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlICk7XG5cdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoIHZpZXcucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7XG5cdFx0XHRjYW1lcmEudmlld3BvcnQuc2V0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0ICk7XG5cblx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRjYW1lcmFYUi5tYXRyaXguY29weSggY2FtZXJhLm1hdHJpeCApO1xuXHRcdFx0XHRjYW1lcmFYUi5tYXRyaXguZGVjb21wb3NlKCBjYW1lcmFYUi5wb3NpdGlvbiwgY2FtZXJhWFIucXVhdGVybmlvbiwgY2FtZXJhWFIuc2NhbGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGNhbWVyYVhSTmVlZHNVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y2FtZXJhWFIuY2FtZXJhcy5wdXNoKCBjYW1lcmEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmVuZGVyZXIuc2V0T3V0cHV0UmVuZGVyVGFyZ2V0KCB0aGlzLl94clJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuX2NvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGNvbnN0IGlucHV0U291cmNlID0gdGhpcy5fY29udHJvbGxlcklucHV0U291cmNlc1sgaSBdO1xuXHRcdGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLl9jb250cm9sbGVyc1sgaSBdO1xuXG5cdFx0aWYgKCBpbnB1dFNvdXJjZSAhPT0gbnVsbCAmJiBjb250cm9sbGVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnRyb2xsZXIudXBkYXRlKCBpbnB1dFNvdXJjZSwgZnJhbWUsIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGlmICggdGhpcy5fY3VycmVudEFuaW1hdGlvbkxvb3AgKSB0aGlzLl9jdXJyZW50QW5pbWF0aW9uTG9vcCggdGltZSwgZnJhbWUgKTtcblxuXHRpZiAoIGZyYW1lLmRldGVjdGVkUGxhbmVzICkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdwbGFuZXNkZXRlY3RlZCcsIGRhdGE6IGZyYW1lIH0gKTtcblxuXHR9XG5cblx0dGhpcy5feHJGcmFtZSA9IG51bGw7XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgWFJNYW5hZ2VyO1xuIiwiaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuL0FuaW1hdGlvbi5qcyc7XG5pbXBvcnQgUmVuZGVyT2JqZWN0cyBmcm9tICcuL1JlbmRlck9iamVjdHMuanMnO1xuaW1wb3J0IEF0dHJpYnV0ZXMgZnJvbSAnLi9BdHRyaWJ1dGVzLmpzJztcbmltcG9ydCBHZW9tZXRyaWVzIGZyb20gJy4vR2VvbWV0cmllcy5qcyc7XG5pbXBvcnQgSW5mbyBmcm9tICcuL0luZm8uanMnO1xuaW1wb3J0IFBpcGVsaW5lcyBmcm9tICcuL1BpcGVsaW5lcy5qcyc7XG5pbXBvcnQgQmluZGluZ3MgZnJvbSAnLi9CaW5kaW5ncy5qcyc7XG5pbXBvcnQgUmVuZGVyTGlzdHMgZnJvbSAnLi9SZW5kZXJMaXN0cy5qcyc7XG5pbXBvcnQgUmVuZGVyQ29udGV4dHMgZnJvbSAnLi9SZW5kZXJDb250ZXh0cy5qcyc7XG5pbXBvcnQgVGV4dHVyZXMgZnJvbSAnLi9UZXh0dXJlcy5qcyc7XG5pbXBvcnQgQmFja2dyb3VuZCBmcm9tICcuL0JhY2tncm91bmQuanMnO1xuaW1wb3J0IE5vZGVzIGZyb20gJy4vbm9kZXMvTm9kZXMuanMnO1xuaW1wb3J0IENvbG9yNCBmcm9tICcuL0NvbG9yNC5qcyc7XG5pbXBvcnQgQ2xpcHBpbmdDb250ZXh0IGZyb20gJy4vQ2xpcHBpbmdDb250ZXh0LmpzJztcbmltcG9ydCBRdWFkTWVzaCBmcm9tICcuL1F1YWRNZXNoLmpzJztcbmltcG9ydCBSZW5kZXJCdW5kbGVzIGZyb20gJy4vUmVuZGVyQnVuZGxlcy5qcyc7XG5pbXBvcnQgTm9kZUxpYnJhcnkgZnJvbSAnLi9ub2Rlcy9Ob2RlTGlicmFyeS5qcyc7XG5pbXBvcnQgTGlnaHRpbmcgZnJvbSAnLi9MaWdodGluZy5qcyc7XG5pbXBvcnQgWFJNYW5hZ2VyIGZyb20gJy4vWFJNYW5hZ2VyLmpzJztcblxuaW1wb3J0IE5vZGVNYXRlcmlhbCBmcm9tICcuLi8uLi9tYXRlcmlhbHMvbm9kZXMvTm9kZU1hdGVyaWFsLmpzJztcblxuaW1wb3J0IHsgU2NlbmUgfSBmcm9tICcuLi8uLi9zY2VuZXMvU2NlbmUuanMnO1xuaW1wb3J0IHsgRnJ1c3R1bSB9IGZyb20gJy4uLy4uL21hdGgvRnJ1c3R1bS5qcyc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXg0LmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yNC5qcyc7XG5pbXBvcnQgeyBSZW5kZXJUYXJnZXQgfSBmcm9tICcuLi8uLi9jb3JlL1JlbmRlclRhcmdldC5qcyc7XG5pbXBvcnQgeyBEb3VibGVTaWRlLCBCYWNrU2lkZSwgRnJvbnRTaWRlLCBTUkdCQ29sb3JTcGFjZSwgTm9Ub25lTWFwcGluZywgTGluZWFyRmlsdGVyLCBMaW5lYXJTUkdCQ29sb3JTcGFjZSwgSGFsZkZsb2F0VHlwZSwgUkdCQUZvcm1hdCwgUENGU2hhZG93TWFwIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuY29uc3QgX3NjZW5lID0gLypAX19QVVJFX18qLyBuZXcgU2NlbmUoKTtcbmNvbnN0IF9kcmF3aW5nQnVmZmVyU2l6ZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IF9zY3JlZW4gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3I0KCk7XG5jb25zdCBfZnJ1c3R1bSA9IC8qQF9fUFVSRV9fKi8gbmV3IEZydXN0dW0oKTtcbmNvbnN0IF9wcm9qU2NyZWVuTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3ZlY3RvcjQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3I0KCk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgcmVuZGVyZXJzLlxuICovXG5jbGFzcyBSZW5kZXJlciB7XG5cblx0LyoqXG5cdCAqIFJlbmRlcmVyIG9wdGlvbnMuXG5cdCAqXG5cdCAqIEB0eXBlZGVmIHtPYmplY3R9IFJlbmRlcmVyfk9wdGlvbnNcblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcj1mYWxzZV0gLSBXaGV0aGVyIGxvZ2FyaXRobWljIGRlcHRoIGJ1ZmZlciBpcyBlbmFibGVkIG9yIG5vdC5cblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbYWxwaGE9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyICh3aGljaCByZXByZXNlbnRzIHRoZSBmaW5hbCBjb250ZW50cyBvZiB0aGUgY2FudmFzKSBzaG91bGQgYmUgdHJhbnNwYXJlbnQgb3Igb3BhcXVlLlxuXHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtkZXB0aD10cnVlXSAtIFdoZXRoZXIgdGhlIGRlZmF1bHQgZnJhbWVidWZmZXIgc2hvdWxkIGhhdmUgYSBkZXB0aCBidWZmZXIgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzdGVuY2lsPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGRlZmF1bHQgZnJhbWVidWZmZXIgc2hvdWxkIGhhdmUgYSBzdGVuY2lsIGJ1ZmZlciBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2FudGlhbGlhcz1mYWxzZV0gLSBXaGV0aGVyIE1TQUEgYXMgdGhlIGRlZmF1bHQgYW50aS1hbGlhc2luZyBzaG91bGQgYmUgZW5hYmxlZCBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc2FtcGxlcz0wXSAtIFdoZW4gYGFudGlhbGlhc2AgaXMgYHRydWVgLCBgNGAgc2FtcGxlcyBhcmUgdXNlZCBieSBkZWZhdWx0LiBUaGlzIHBhcmFtZXRlciBjYW4gc2V0IHRvIGFueSBvdGhlciBpbnRlZ2VyIHZhbHVlIHRoYW4gMFxuXHQgKiB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHQuXG5cdCAqIEBwcm9wZXJ0eSB7P0Z1bmN0aW9ufSBbZ2V0RmFsbGJhY2s9bnVsbF0gLSBUaGlzIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIHByb3ZpZGUgYSBmYWxsYmFjayBiYWNrZW5kLCBpZiB0aGUgcHJpbWFyeSBiYWNrZW5kIGNhbid0IGJlIHRhcmdldGVkLlxuXHQgKiBAcHJvcGVydHkge251bWJlcn0gW2NvbG9yQnVmZmVyVHlwZT1IYWxmRmxvYXRUeXBlXSAtIERlZmluZXMgdGhlIHR5cGUgb2YgY29sb3IgYnVmZmVycy4gVGhlIGRlZmF1bHQgYEhhbGZGbG9hdFR5cGVgIGlzIHJlY29tbWVuZCBmb3IgYmVzdFxuXHQgKiBxdWFsaXR5LiBUbyBzYXZlIG1lbW9yeSBhbmQgYmFuZHdpZHRoLCBgVW5zaWduZWRCeXRlVHlwZWAgbWlnaHQgYmUgdXNlZC4gVGhpcyB3aWxsIHJlZHVjZSByZW5kZXJpbmcgcXVhbGl0eSB0aG91Z2guXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlbmRlcmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JhY2tlbmR9IGJhY2tlbmQgLSBUaGUgYmFja2VuZCB0aGUgcmVuZGVyZXIgaXMgdGFyZ2V0aW5nIChlLmcuIFdlYkdQVSBvciBXZWJHTCAyKS5cblx0ICogQHBhcmFtIHtSZW5kZXJlcn5PcHRpb25zfSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBiYWNrZW5kLCBwYXJhbWV0ZXJzID0ge30gKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUmVuZGVyZXIgPSB0cnVlO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHtcblx0XHRcdGxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPSBmYWxzZSxcblx0XHRcdGFscGhhID0gdHJ1ZSxcblx0XHRcdGRlcHRoID0gdHJ1ZSxcblx0XHRcdHN0ZW5jaWwgPSBmYWxzZSxcblx0XHRcdGFudGlhbGlhcyA9IGZhbHNlLFxuXHRcdFx0c2FtcGxlcyA9IDAsXG5cdFx0XHRnZXRGYWxsYmFjayA9IG51bGwsXG5cdFx0XHRjb2xvckJ1ZmZlclR5cGUgPSBIYWxmRmxvYXRUeXBlXG5cdFx0fSA9IHBhcmFtZXRlcnM7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgY2FudmFzIGVsZW1lbnQgdGhlIHJlbmRlcmVyIGlzIGRyYXdpbmcgdG8uXG5cdFx0ICogVGhpcyB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5IHdpbGwgYXV0b21hdGljYWxseSBiZSBjcmVhdGVkIGJ5XG5cdFx0ICogdGhlIHJlbmRlcmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0hUTUxDYW52YXNFbGVtZW50fE9mZnNjcmVlbkNhbnZhc31cblx0XHQgKi9cblx0XHR0aGlzLmRvbUVsZW1lbnQgPSBiYWNrZW5kLmdldERvbUVsZW1lbnQoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGJhY2tlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QmFja2VuZH1cblx0XHQgKi9cblx0XHR0aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG51bWJlciBvZiBNU0FBIHNhbXBsZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnNhbXBsZXMgPSBzYW1wbGVzIHx8ICggYW50aWFsaWFzID09PSB0cnVlICkgPyA0IDogMDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHJlbmRlcmVyIHNob3VsZCBhdXRvbWF0aWNhbGx5IGNsZWFyIHRoZSBjdXJyZW50IHJlbmRlcmluZyB0YXJnZXRcblx0XHQgKiBiZWZvcmUgZXhlY3V0ZSBhIGByZW5kZXIoKWAgY2FsbC4gVGhlIHRhcmdldCBjYW4gYmUgdGhlIGNhbnZhcyAoZGVmYXVsdCBmcmFtZWJ1ZmZlcilcblx0XHQgKiBvciB0aGUgY3VycmVudCBib3VuZCByZW5kZXIgdGFyZ2V0IChjdXN0b20gZnJhbWVidWZmZXIpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b0NsZWFyID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gYGF1dG9DbGVhcmAgaXMgc2V0IHRvIGB0cnVlYCwgdGhpcyBwcm9wZXJ0eSBkZWZpbmVzIHdoZXRoZXIgdGhlIHJlbmRlcmVyXG5cdFx0ICogc2hvdWxkIGNsZWFyIHRoZSBjb2xvciBidWZmZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5hdXRvQ2xlYXJDb2xvciA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGVuIGBhdXRvQ2xlYXJgIGlzIHNldCB0byBgdHJ1ZWAsIHRoaXMgcHJvcGVydHkgZGVmaW5lcyB3aGV0aGVyIHRoZSByZW5kZXJlclxuXHRcdCAqIHNob3VsZCBjbGVhciB0aGUgZGVwdGggYnVmZmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b0NsZWFyRGVwdGggPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiBgYXV0b0NsZWFyYCBpcyBzZXQgdG8gYHRydWVgLCB0aGlzIHByb3BlcnR5IGRlZmluZXMgd2hldGhlciB0aGUgcmVuZGVyZXJcblx0XHQgKiBzaG91bGQgY2xlYXIgdGhlIHN0ZW5jaWwgYnVmZmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b0NsZWFyU3RlbmNpbCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyIHNob3VsZCBiZSB0cmFuc3BhcmVudCBvciBvcGFxdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5hbHBoYSA9IGFscGhhO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciBsb2dhcml0aG1pYyBkZXB0aCBidWZmZXIgaXMgZW5hYmxlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9IGxvZ2FyaXRobWljRGVwdGhCdWZmZXI7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBvdXRwdXQgY29sb3Igc3BhY2Ugb2YgdGhlIHJlbmRlcmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBTUkdCQ29sb3JTcGFjZVxuXHRcdCAqL1xuXHRcdHRoaXMub3V0cHV0Q29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB0aGUgdG9uZSBtYXBwaW5nIG9mIHRoZSByZW5kZXJlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgTm9Ub25lTWFwcGluZ1xuXHRcdCAqL1xuXHRcdHRoaXMudG9uZU1hcHBpbmcgPSBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB0aGUgdG9uZSBtYXBwaW5nIGV4cG9zdXJlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy50b25lTWFwcGluZ0V4cG9zdXJlID0gMS4wO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgcmVuZGVyZXIgc2hvdWxkIHNvcnQgaXRzIHJlbmRlciBsaXN0cyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBOb3RlOiBTb3J0aW5nIGlzIHVzZWQgdG8gYXR0ZW1wdCB0byBwcm9wZXJseSByZW5kZXIgb2JqZWN0cyB0aGF0IGhhdmUgc29tZSBkZWdyZWUgb2YgdHJhbnNwYXJlbmN5LlxuXHRcdCAqIEJ5IGRlZmluaXRpb24sIHNvcnRpbmcgb2JqZWN0cyBtYXkgbm90IHdvcmsgaW4gYWxsIGNhc2VzLiBEZXBlbmRpbmcgb24gdGhlIG5lZWRzIG9mIGFwcGxpY2F0aW9uLFxuXHRcdCAqIGl0IG1heSBiZSBuZWNlc3NhcnkgdG8gdHVybiBvZmYgc29ydGluZyBhbmQgdXNlIG90aGVyIG1ldGhvZHMgdG8gZGVhbCB3aXRoIHRyYW5zcGFyZW5jeSByZW5kZXJpbmdcblx0XHQgKiBlLmcuIG1hbnVhbGx5IGRldGVybWluaW5nIGVhY2ggb2JqZWN0J3MgcmVuZGVyaW5nIG9yZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuc29ydE9iamVjdHMgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgZGVmYXVsdCBmcmFtZWJ1ZmZlciBzaG91bGQgaGF2ZSBhIGRlcHRoIGJ1ZmZlciBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgZGVmYXVsdCBmcmFtZWJ1ZmZlciBzaG91bGQgaGF2ZSBhIHN0ZW5jaWwgYnVmZmVyIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5zdGVuY2lsID0gc3RlbmNpbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIGEgc2VyaWVzIG9mIHN0YXRpc3RpY2FsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBHUFUgbWVtb3J5XG5cdFx0ICogYW5kIHRoZSByZW5kZXJpbmcgcHJvY2Vzcy4gVXNlZnVsIGZvciBkZWJ1Z2dpbmcgYW5kIG1vbml0b3JpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7SW5mb31cblx0XHQgKi9cblx0XHR0aGlzLmluZm8gPSBuZXcgSW5mbygpO1xuXG5cdFx0dGhpcy5ub2RlcyA9IHtcblx0XHRcdG1vZGVsVmlld01hdHJpeDogbnVsbCxcblx0XHRcdG1vZGVsTm9ybWFsVmlld01hdHJpeDogbnVsbFxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSBsaWJyYXJ5IGRlZmluZXMgaG93IGNlcnRhaW4gbGlicmFyeSBvYmplY3RzIGxpa2UgbWF0ZXJpYWxzLCBsaWdodHNcblx0XHQgKiBvciB0b25lIG1hcHBpbmcgZnVuY3Rpb25zIGFyZSBtYXBwZWQgdG8gbm9kZSB0eXBlcy4gVGhpcyBpcyByZXF1aXJlZCBzaW5jZVxuXHRcdCAqIGFsdGhvdWdoIGluc3RhbmNlcyBvZiBjbGFzc2VzIGxpa2UgYE1lc2hCYXNpY01hdGVyaWFsYCBvciBgUG9pbnRMaWdodGAgY2FuXG5cdFx0ICogYmUgcGFydCBvZiB0aGUgc2NlbmUgZ3JhcGgsIHRoZXkgYXJlIGludGVybmFsbHkgcmVwcmVzZW50ZWQgYXMgbm9kZXMgZm9yXG5cdFx0ICogZnVydGhlciBwcm9jZXNzaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGVMaWJyYXJ5fVxuXHRcdCAqL1xuXHRcdHRoaXMubGlicmFyeSA9IG5ldyBOb2RlTGlicmFyeSgpO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBtYXAtbGlrZSBkYXRhIHN0cnVjdHVyZSBmb3IgbWFuYWdpbmcgbGlnaHRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0xpZ2h0aW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRpbmcgPSBuZXcgTGlnaHRpbmcoKTtcblxuXHRcdC8vIGludGVybmFsc1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBjYWxsYmFjayBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBwcm92aWRlIGEgZmFsbGJhY2sgYmFja2VuZCwgaWYgdGhlIHByaW1hcnkgYmFja2VuZCBjYW4ndCBiZSB0YXJnZXRlZC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9GdW5jdGlvbn1cblx0XHQgKi9cblx0XHR0aGlzLl9nZXRGYWxsYmFjayA9IGdldEZhbGxiYWNrO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlbmRlcmVyJ3MgcGl4ZWwgcmF0aW8uXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuX3BpeGVsUmF0aW8gPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHdpZHRoIG9mIHRoZSByZW5kZXJlcidzIGRlZmF1bHQgZnJhbWVidWZmZXIgaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuX3dpZHRoID0gdGhpcy5kb21FbGVtZW50LndpZHRoO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyZXIncyBkZWZhdWx0IGZyYW1lYnVmZmVyIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLl9oZWlnaHQgPSB0aGlzLmRvbUVsZW1lbnQuaGVpZ2h0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHZpZXdwb3J0IG9mIHRoZSByZW5kZXJlciBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtWZWN0b3I0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzY2lzc29yIHJlY3RhbmdsZSBvZiB0aGUgcmVuZGVyZXIgaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7VmVjdG9yNH1cblx0XHQgKi9cblx0XHR0aGlzLl9zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHNjaXNzb3IgdGVzdCBzaG91bGQgYmUgZW5hYmxlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuX3NjaXNzb3JUZXN0ID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIHJlbmRlcmVyIG1vZHVsZSBmb3IgbWFuYWdpbmcgc2hhZGVyIGF0dHJpYnV0ZXMuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/QXR0cmlidXRlc31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fYXR0cmlidXRlcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIHJlbmRlcmVyIG1vZHVsZSBmb3IgbWFuYWdpbmcgZ2VvbWV0cmllcy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9HZW9tZXRyaWVzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9nZW9tZXRyaWVzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgcmVuZGVyZXIgbW9kdWxlIGZvciBtYW5hZ2luZyBub2RlIHJlbGF0ZWQgbG9naWMuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/Tm9kZXN9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX25vZGVzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgcmVuZGVyZXIgbW9kdWxlIGZvciBtYW5hZ2luZyB0aGUgaW50ZXJuYWwgYW5pbWF0aW9uIGxvb3AuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/QW5pbWF0aW9ufVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9hbmltYXRpb24gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gYSByZW5kZXJlciBtb2R1bGUgZm9yIG1hbmFnaW5nIHNoYWRlciBwcm9ncmFtIGJpbmRpbmdzLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P0JpbmRpbmdzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9iaW5kaW5ncyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIHJlbmRlcmVyIG1vZHVsZSBmb3IgbWFuYWdpbmcgcmVuZGVyIG9iamVjdHMuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/UmVuZGVyT2JqZWN0c31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fb2JqZWN0cyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIHJlbmRlcmVyIG1vZHVsZSBmb3IgbWFuYWdpbmcgcmVuZGVyIGFuZCBjb21wdXRlIHBpcGVsaW5lcy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9QaXBlbGluZXN9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX3BpcGVsaW5lcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIHJlbmRlcmVyIG1vZHVsZSBmb3IgbWFuYWdpbmcgcmVuZGVyIGJ1bmRsZXMuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/UmVuZGVyQnVuZGxlc31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fYnVuZGxlcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIHJlbmRlcmVyIG1vZHVsZSBmb3IgbWFuYWdpbmcgcmVuZGVyIGxpc3RzLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P1JlbmRlckxpc3RzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9yZW5kZXJMaXN0cyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIHJlbmRlcmVyIG1vZHVsZSBmb3IgbWFuYWdpbmcgcmVuZGVyIGNvbnRleHRzLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P1JlbmRlckNvbnRleHRzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9yZW5kZXJDb250ZXh0cyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIHJlbmRlcmVyIG1vZHVsZSBmb3IgbWFuYWdpbmcgdGV4dHVyZXMuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZXN9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX3RleHR1cmVzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgcmVuZGVyZXIgbW9kdWxlIGZvciBiYWNrZ3JvdW5kcy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9CYWNrZ3JvdW5kfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9iYWNrZ3JvdW5kID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZnVsbHNjcmVlbiBxdWFkIGlzIHVzZWQgZm9yIGludGVybmFsIHJlbmRlciBwYXNzZXNcblx0XHQgKiBsaWtlIHRoZSB0b25lIG1hcHBpbmcgYW5kIGNvbG9yIHNwYWNlIG91dHB1dCBwYXNzLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7UXVhZE1lc2h9XG5cdFx0ICovXG5cdFx0dGhpcy5fcXVhZCA9IG5ldyBRdWFkTWVzaCggbmV3IE5vZGVNYXRlcmlhbCgpICk7XG5cdFx0dGhpcy5fcXVhZC5tYXRlcmlhbC5uYW1lID0gJ1JlbmRlcmVyX291dHB1dCc7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCByZW5kZXIgY29udGV4dC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9SZW5kZXJDb250ZXh0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9jdXJyZW50UmVuZGVyQ29udGV4dCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIGN1c3RvbSBzb3J0IGZ1bmN0aW9uIGZvciB0aGUgb3BhcXVlIHJlbmRlciBsaXN0LlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P0Z1bmN0aW9ufVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9vcGFxdWVTb3J0ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgY3VzdG9tIHNvcnQgZnVuY3Rpb24gZm9yIHRoZSB0cmFuc3BhcmVudCByZW5kZXIgbGlzdC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9GdW5jdGlvbn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fdHJhbnNwYXJlbnRTb3J0ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBmcmFtZWJ1ZmZlciB0YXJnZXQuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/UmVuZGVyVGFyZ2V0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9mcmFtZUJ1ZmZlclRhcmdldCA9IG51bGw7XG5cblx0XHRjb25zdCBhbHBoYUNsZWFyID0gdGhpcy5hbHBoYSA9PT0gdHJ1ZSA/IDAgOiAxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNsZWFyIGNvbG9yIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7Q29sb3I0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NsZWFyQ29sb3IgPSBuZXcgQ29sb3I0KCAwLCAwLCAwLCBhbHBoYUNsZWFyICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2xlYXIgZGVwdGggdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NsZWFyRGVwdGggPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNsZWFyIHN0ZW5jaWwgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuX2NsZWFyU3RlbmNpbCA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VycmVudCByZW5kZXIgdGFyZ2V0LlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P1JlbmRlclRhcmdldH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fcmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhY3RpdmUgY3ViZSBmYWNlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLl9hY3RpdmVDdWJlRmFjZSA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYWN0aXZlIG1pcG1hcCBsZXZlbC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5fYWN0aXZlTWlwbWFwTGV2ZWwgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgb3V0cHV0IHJlbmRlciB0YXJnZXQuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/UmVuZGVyVGFyZ2V0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9vdXRwdXRSZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIE1SVCBzZXR0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P01SVE5vZGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX21ydCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZ1bmN0aW9uIGRlZmluZXMgaG93IGEgcmVuZGVyIG9iamVjdCBpcyBnb2luZ1xuXHRcdCAqIHRvIGJlIHJlbmRlcmVkLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P0Z1bmN0aW9ufVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9yZW5kZXJPYmplY3RGdW5jdGlvbiA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgcmVuZGVyIG9iamVjdCBmdW5jdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9GdW5jdGlvbn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fY3VycmVudFJlbmRlck9iamVjdEZ1bmN0aW9uID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgY3VycmVudCByZW5kZXIgYnVuZGxlLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P1JlbmRlckJ1bmRsZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fY3VycmVudFJlbmRlckJ1bmRsZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBOZXh0IHRvIGBfcmVuZGVyT2JqZWN0RnVuY3Rpb24oKWAsIHRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgYW5vdGhlciBob29rXG5cdFx0ICogZm9yIGluZmx1ZW5jaW5nIHRoZSByZW5kZXIgcHJvY2VzcyBvZiBhIHJlbmRlciBvYmplY3QuIEl0IGlzIG1lYW50IGZvciBpbnRlcm5hbFxuXHRcdCAqIHVzZSBhbmQgb25seSByZWxldmFudCBmb3IgYGNvbXBpbGVBc3luYygpYCByaWdodCBub3cuIEluc3RlYWQgb2YgdXNpbmdcblx0XHQgKiB0aGUgZGVmYXVsdCBsb2dpYyBvZiBgX3JlbmRlck9iamVjdERpcmVjdCgpYCB3aGljaCBhY3R1YWxseSBkcmF3cyB0aGUgcmVuZGVyIG9iamVjdCxcblx0XHQgKiBhIGRpZmZlcmVudCBmdW5jdGlvbiBtaWdodCBiZSB1c2VkIHdoaWNoIHBlcmZvcm1zIG5vIGRyYXcgYnV0IGp1c3QgdGhlIG5vZGVcblx0XHQgKiBhbmQgcGlwZWxpbmUgdXBkYXRlcy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9GdW5jdGlvbn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZGxlT2JqZWN0RnVuY3Rpb24gPSB0aGlzLl9yZW5kZXJPYmplY3REaXJlY3Q7XG5cblx0XHQvKipcblx0XHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZGV2aWNlIGhhcyBiZWVuIGxvc3Qgb3Igbm90LiBJbiBXZWJHTCB0ZXJtcywgdGhlIGRldmljZVxuXHRcdCAqIGxvc3QgaXMgY29uc2lkZXJlZCBhcyBhIGNvbnRleHQgbG9zdC4gV2hlbiB0aGlzIGlzIHNldCB0byBgdHJ1ZWAsIHJlbmRlcmluZ1xuXHRcdCAqIGlzbid0IHBvc3NpYmxlIGFueW1vcmUuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5faXNEZXZpY2VMb3N0ID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgZGVmaW5lcyB3aGF0IHNob3VsZCBoYXBwZW4gd2hlbiBhIGRldmljZS9jb250ZXh0IGxvc3Qgb2NjdXJzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0Z1bmN0aW9ufVxuXHRcdCAqL1xuXHRcdHRoaXMub25EZXZpY2VMb3N0ID0gdGhpcy5fb25EZXZpY2VMb3N0O1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB0aGUgdHlwZSBvZiBjb2xvciBidWZmZXJzLiBUaGUgZGVmYXVsdCBgSGFsZkZsb2F0VHlwZWAgaXMgcmVjb21tZW5kIGZvclxuXHRcdCAqIGJlc3QgcXVhbGl0eS4gVG8gc2F2ZSBtZW1vcnkgYW5kIGJhbmR3aWR0aCwgYFVuc2lnbmVkQnl0ZVR5cGVgIG1pZ2h0IGJlIHVzZWQuXG5cdFx0ICogVGhpcyB3aWxsIHJlZHVjZSByZW5kZXJpbmcgcXVhbGl0eSB0aG91Z2guXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgSGFsZkZsb2F0VHlwZVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvbG9yQnVmZmVyVHlwZSA9IGNvbG9yQnVmZmVyVHlwZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIHJlbmRlcmVyIGhhcyBiZWVuIGluaXRpYWxpemVkIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIHByb21pc2Ugd2hpY2ggaW5pdGlhbGl6ZXMgdGhlIHJlbmRlcmVyLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P1Byb21pc2U8dGhpcz59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2luaXRQcm9taXNlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IG9mIGNvbXBpbGF0aW9uIHByb21pc2VzIHdoaWNoIGFyZSB1c2VkIGluIGBjb21waWxlQXN5bmMoKWAuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/QXJyYXk8UHJvbWlzZT59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvbXBpbGF0aW9uUHJvbWlzZXMgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgcmVuZGVyZXIgc2hvdWxkIHJlbmRlciB0cmFuc3BhcmVudCByZW5kZXIgb2JqZWN0cyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSByZW5kZXJlciBzaG91bGQgcmVuZGVyIG9wYXF1ZSByZW5kZXIgb2JqZWN0cyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5vcGFxdWUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogU2hhZG93IG1hcCBjb25maWd1cmF0aW9uXG5cdFx0ICogQHR5cGVkZWYge09iamVjdH0gU2hhZG93TWFwQ29uZmlnXG5cdFx0ICogQHByb3BlcnR5IHtib29sZWFufSBlbmFibGVkIC0gV2hldGhlciB0byBnbG9iYWxseSBlbmFibGUgc2hhZG93cyBvciBub3QuXG5cdFx0ICogQHByb3BlcnR5IHtudW1iZXJ9IHR5cGUgLSBUaGUgc2hhZG93IG1hcCB0eXBlLlxuXHRcdCAqL1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlbmRlcmVyJ3Mgc2hhZG93IGNvbmZpZ3VyYXRpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7U2hhZG93TWFwQ29uZmlnfVxuXHRcdCAqL1xuXHRcdHRoaXMuc2hhZG93TWFwID0ge1xuXHRcdFx0ZW5hYmxlZDogZmFsc2UsXG5cdFx0XHR0eXBlOiBQQ0ZTaGFkb3dNYXBcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogWFIgY29uZmlndXJhdGlvbi5cblx0XHQgKiBAdHlwZWRlZiB7T2JqZWN0fSBYUkNvbmZpZ1xuXHRcdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZW5hYmxlZCAtIFdoZXRoZXIgdG8gZ2xvYmFsbHkgZW5hYmxlIFhSIG9yIG5vdC5cblx0XHQgKi9cblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXJlcidzIFhSIG1hbmFnZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7WFJNYW5hZ2VyfVxuXHRcdCAqL1xuXHRcdHRoaXMueHIgPSBuZXcgWFJNYW5hZ2VyKCB0aGlzICk7XG5cblx0XHQvKipcblx0XHQgKiBEZWJ1ZyBjb25maWd1cmF0aW9uLlxuXHRcdCAqIEB0eXBlZGVmIHtPYmplY3R9IERlYnVnQ29uZmlnXG5cdFx0ICogQHByb3BlcnR5IHtib29sZWFufSBjaGVja1NoYWRlckVycm9ycyAtIFdoZXRoZXIgc2hhZGVyIGVycm9ycyBzaG91bGQgYmUgY2hlY2tlZCBvciBub3QuXG5cdFx0ICogQHByb3BlcnR5IHs/RnVuY3Rpb259IG9uU2hhZGVyRXJyb3IgLSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiBhIHNoYWRlciBlcnJvciBoYXBwZW5zLiBPbmx5IHN1cHBvcnRlZCB3aXRoIFdlYkdMIDIgcmlnaHQgbm93LlxuXHRcdCAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldFNoYWRlckFzeW5jIC0gQWxsb3dzIHRoZSBnZXQgdGhlIHJhdyBzaGFkZXIgY29kZSBmb3IgdGhlIGdpdmVuIHNjZW5lLCBjYW1lcmEgYW5kIDNEIG9iamVjdC5cblx0XHQgKi9cblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZW5kZXJlcidzIGRlYnVnIGNvbmZpZ3VyYXRpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RGVidWdDb25maWd9XG5cdFx0ICovXG5cdFx0dGhpcy5kZWJ1ZyA9IHtcblx0XHRcdGNoZWNrU2hhZGVyRXJyb3JzOiB0cnVlLFxuXHRcdFx0b25TaGFkZXJFcnJvcjogbnVsbCxcblx0XHRcdGdldFNoYWRlckFzeW5jOiBhc3luYyAoIHNjZW5lLCBjYW1lcmEsIG9iamVjdCApID0+IHtcblxuXHRcdFx0XHRhd2FpdCB0aGlzLmNvbXBpbGVBc3luYyggc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0XHRcdGNvbnN0IHJlbmRlckxpc3QgPSB0aGlzLl9yZW5kZXJMaXN0cy5nZXQoIHNjZW5lLCBjYW1lcmEgKTtcblx0XHRcdFx0Y29uc3QgcmVuZGVyQ29udGV4dCA9IHRoaXMuX3JlbmRlckNvbnRleHRzLmdldCggc2NlbmUsIGNhbWVyYSwgdGhpcy5fcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBzY2VuZS5vdmVycmlkZU1hdGVyaWFsIHx8IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRjb25zdCByZW5kZXJPYmplY3QgPSB0aGlzLl9vYmplY3RzLmdldCggb2JqZWN0LCBtYXRlcmlhbCwgc2NlbmUsIGNhbWVyYSwgcmVuZGVyTGlzdC5saWdodHNOb2RlLCByZW5kZXJDb250ZXh0LCByZW5kZXJDb250ZXh0LmNsaXBwaW5nQ29udGV4dCApO1xuXG5cdFx0XHRcdGNvbnN0IHsgZnJhZ21lbnRTaGFkZXIsIHZlcnRleFNoYWRlciB9ID0gcmVuZGVyT2JqZWN0LmdldE5vZGVCdWlsZGVyU3RhdGUoKTtcblxuXHRcdFx0XHRyZXR1cm4geyBmcmFnbWVudFNoYWRlciwgdmVydGV4U2hhZGVyIH07XG5cblx0XHRcdH1cblx0XHR9O1xuXG5cdH1cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgdGhlIHJlbmRlcmVyIHNvIGl0IGlzIHJlYWR5IGZvciB1c2FnZS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8dGhpcz59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHJlbmRlcmVyIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuXHQgKi9cblx0YXN5bmMgaW5pdCgpIHtcblxuXHRcdGlmICggdGhpcy5faW5pdGlhbGl6ZWQgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1JlbmRlcmVyOiBCYWNrZW5kIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9pbml0UHJvbWlzZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX2luaXRQcm9taXNlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5faW5pdFByb21pc2UgPSBuZXcgUHJvbWlzZSggYXN5bmMgKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XG5cblx0XHRcdGxldCBiYWNrZW5kID0gdGhpcy5iYWNrZW5kO1xuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdGF3YWl0IGJhY2tlbmQuaW5pdCggdGhpcyApO1xuXG5cdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLl9nZXRGYWxsYmFjayAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdC8vIHRyeSB0aGUgZmFsbGJhY2tcblxuXHRcdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmQgPSB0aGlzLl9nZXRGYWxsYmFjayggZXJyb3IgKTtcblx0XHRcdFx0XHRcdGF3YWl0IGJhY2tlbmQuaW5pdCggdGhpcyApO1xuXG5cdFx0XHRcdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRcdFx0XHRyZWplY3QoIGVycm9yICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlamVjdCggZXJyb3IgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX25vZGVzID0gbmV3IE5vZGVzKCB0aGlzLCBiYWNrZW5kICk7XG5cdFx0XHR0aGlzLl9hbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKCB0aGlzLl9ub2RlcywgdGhpcy5pbmZvICk7XG5cdFx0XHR0aGlzLl9hdHRyaWJ1dGVzID0gbmV3IEF0dHJpYnV0ZXMoIGJhY2tlbmQgKTtcblx0XHRcdHRoaXMuX2JhY2tncm91bmQgPSBuZXcgQmFja2dyb3VuZCggdGhpcywgdGhpcy5fbm9kZXMgKTtcblx0XHRcdHRoaXMuX2dlb21ldHJpZXMgPSBuZXcgR2VvbWV0cmllcyggdGhpcy5fYXR0cmlidXRlcywgdGhpcy5pbmZvICk7XG5cdFx0XHR0aGlzLl90ZXh0dXJlcyA9IG5ldyBUZXh0dXJlcyggdGhpcywgYmFja2VuZCwgdGhpcy5pbmZvICk7XG5cdFx0XHR0aGlzLl9waXBlbGluZXMgPSBuZXcgUGlwZWxpbmVzKCBiYWNrZW5kLCB0aGlzLl9ub2RlcyApO1xuXHRcdFx0dGhpcy5fYmluZGluZ3MgPSBuZXcgQmluZGluZ3MoIGJhY2tlbmQsIHRoaXMuX25vZGVzLCB0aGlzLl90ZXh0dXJlcywgdGhpcy5fYXR0cmlidXRlcywgdGhpcy5fcGlwZWxpbmVzLCB0aGlzLmluZm8gKTtcblx0XHRcdHRoaXMuX29iamVjdHMgPSBuZXcgUmVuZGVyT2JqZWN0cyggdGhpcywgdGhpcy5fbm9kZXMsIHRoaXMuX2dlb21ldHJpZXMsIHRoaXMuX3BpcGVsaW5lcywgdGhpcy5fYmluZGluZ3MsIHRoaXMuaW5mbyApO1xuXHRcdFx0dGhpcy5fcmVuZGVyTGlzdHMgPSBuZXcgUmVuZGVyTGlzdHMoIHRoaXMubGlnaHRpbmcgKTtcblx0XHRcdHRoaXMuX2J1bmRsZXMgPSBuZXcgUmVuZGVyQnVuZGxlcygpO1xuXHRcdFx0dGhpcy5fcmVuZGVyQ29udGV4dHMgPSBuZXcgUmVuZGVyQ29udGV4dHMoKTtcblxuXHRcdFx0Ly9cblxuXHRcdFx0dGhpcy5fYW5pbWF0aW9uLnN0YXJ0KCk7XG5cdFx0XHR0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cblx0XHRcdHJlc29sdmUoIHRoaXMgKTtcblxuXHRcdH0gKTtcblxuXHRcdHJldHVybiB0aGlzLl9pbml0UHJvbWlzZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGUgcmVuZGVyZXIuIFRoZSB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5XG5cdCAqIGRlcGVuZHMgb24gdGhlIHNlbGVjdGVkIGJhY2tlbmQuIEVpdGhlciBgVEhSRUUuV2ViR0xDb29yZGluYXRlU3lzdGVtYCBvclxuXHQgKiBgVEhSRUUuV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbWAuXG5cdCAqXG5cdCAqIEByZWFkb25seVxuXHQgKiBAdHlwZSB7bnVtYmVyfVxuXHQgKi9cblx0Z2V0IGNvb3JkaW5hdGVTeXN0ZW0oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5iYWNrZW5kLmNvb3JkaW5hdGVTeXN0ZW07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21waWxlcyBhbGwgbWF0ZXJpYWxzIGluIHRoZSBnaXZlbiBzY2VuZS4gVGhpcyBjYW4gYmUgdXNlZnVsIHRvIGF2b2lkIGFcblx0ICogcGhlbm9tZW5vbiB3aGljaCBpcyBjYWxsZWQgXCJzaGFkZXIgY29tcGlsYXRpb24gc3R1dHRlclwiLCB3aGljaCBvY2N1cnMgd2hlblxuXHQgKiByZW5kZXJpbmcgYW4gb2JqZWN0IHdpdGggYSBuZXcgc2hhZGVyIGZvciB0aGUgZmlyc3QgdGltZS5cblx0ICpcblx0ICogSWYgeW91IHdhbnQgdG8gYWRkIGEgM0Qgb2JqZWN0IHRvIGFuIGV4aXN0aW5nIHNjZW5lLCB1c2UgdGhlIHRoaXJkIG9wdGlvbmFsXG5cdCAqIHBhcmFtZXRlciBmb3IgYXBwbHlpbmcgdGhlIHRhcmdldCBzY2VuZS4gTm90ZSB0aGF0IHRoZSAodGFyZ2V0KSBzY2VuZSdzIGxpZ2h0aW5nXG5cdCAqIGFuZCBlbnZpcm9ubWVudCBtdXN0IGJlIGNvbmZpZ3VyZWQgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBzY2VuZSAtIFRoZSBzY2VuZSBvciAzRCBvYmplY3QgdG8gcHJlY29tcGlsZS5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhhdCBpcyB1c2VkIHRvIHJlbmRlciB0aGUgc2NlbmUuXG5cdCAqIEBwYXJhbSB7P1NjZW5lfSB0YXJnZXRTY2VuZSAtIElmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhIDNEIG9iamVjdCwgdGhpcyBwYXJhbWV0ZXIgbXVzdCByZXByZXNlbnQgdGhlIHNjZW5lIHRoZSAzRCBvYmplY3QgaXMgZ29pbmcgdG8gYmUgYWRkZWQuXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXl8dW5kZWZpbmVkPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29tcGlsZSBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICovXG5cdGFzeW5jIGNvbXBpbGVBc3luYyggc2NlbmUsIGNhbWVyYSwgdGFyZ2V0U2NlbmUgPSBudWxsICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pc0RldmljZUxvc3QgPT09IHRydWUgKSByZXR1cm47XG5cblx0XHRpZiAoIHRoaXMuX2luaXRpYWxpemVkID09PSBmYWxzZSApIGF3YWl0IHRoaXMuaW5pdCgpO1xuXG5cdFx0Ly8gcHJlc2VydmUgcmVuZGVyIHRyZWVcblxuXHRcdGNvbnN0IG5vZGVGcmFtZSA9IHRoaXMuX25vZGVzLm5vZGVGcmFtZTtcblxuXHRcdGNvbnN0IHByZXZpb3VzUmVuZGVySWQgPSBub2RlRnJhbWUucmVuZGVySWQ7XG5cdFx0Y29uc3QgcHJldmlvdXNSZW5kZXJDb250ZXh0ID0gdGhpcy5fY3VycmVudFJlbmRlckNvbnRleHQ7XG5cdFx0Y29uc3QgcHJldmlvdXNSZW5kZXJPYmplY3RGdW5jdGlvbiA9IHRoaXMuX2N1cnJlbnRSZW5kZXJPYmplY3RGdW5jdGlvbjtcblx0XHRjb25zdCBwcmV2aW91c0NvbXBpbGF0aW9uUHJvbWlzZXMgPSB0aGlzLl9jb21waWxhdGlvblByb21pc2VzO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHNjZW5lUmVmID0gKCBzY2VuZS5pc1NjZW5lID09PSB0cnVlICkgPyBzY2VuZSA6IF9zY2VuZTtcblxuXHRcdGlmICggdGFyZ2V0U2NlbmUgPT09IG51bGwgKSB0YXJnZXRTY2VuZSA9IHNjZW5lO1xuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0ID0gdGhpcy5fcmVuZGVyVGFyZ2V0O1xuXHRcdGNvbnN0IHJlbmRlckNvbnRleHQgPSB0aGlzLl9yZW5kZXJDb250ZXh0cy5nZXQoIHRhcmdldFNjZW5lLCBjYW1lcmEsIHJlbmRlclRhcmdldCApO1xuXHRcdGNvbnN0IGFjdGl2ZU1pcG1hcExldmVsID0gdGhpcy5fYWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0XHRjb25zdCBjb21waWxhdGlvblByb21pc2VzID0gW107XG5cblx0XHR0aGlzLl9jdXJyZW50UmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG5cdFx0dGhpcy5fY3VycmVudFJlbmRlck9iamVjdEZ1bmN0aW9uID0gdGhpcy5yZW5kZXJPYmplY3Q7XG5cblx0XHR0aGlzLl9oYW5kbGVPYmplY3RGdW5jdGlvbiA9IHRoaXMuX2NyZWF0ZU9iamVjdFBpcGVsaW5lO1xuXG5cdFx0dGhpcy5fY29tcGlsYXRpb25Qcm9taXNlcyA9IGNvbXBpbGF0aW9uUHJvbWlzZXM7XG5cblx0XHRub2RlRnJhbWUucmVuZGVySWQgKys7XG5cblx0XHQvL1xuXG5cdFx0bm9kZUZyYW1lLnVwZGF0ZSgpO1xuXG5cdFx0Ly9cblxuXHRcdHJlbmRlckNvbnRleHQuZGVwdGggPSB0aGlzLmRlcHRoO1xuXHRcdHJlbmRlckNvbnRleHQuc3RlbmNpbCA9IHRoaXMuc3RlbmNpbDtcblxuXHRcdGlmICggISByZW5kZXJDb250ZXh0LmNsaXBwaW5nQ29udGV4dCApIHJlbmRlckNvbnRleHQuY2xpcHBpbmdDb250ZXh0ID0gbmV3IENsaXBwaW5nQ29udGV4dCgpO1xuXHRcdHJlbmRlckNvbnRleHQuY2xpcHBpbmdDb250ZXh0LnVwZGF0ZUdsb2JhbCggc2NlbmVSZWYsIGNhbWVyYSApO1xuXG5cdFx0Ly9cblxuXHRcdHNjZW5lUmVmLm9uQmVmb3JlUmVuZGVyKCB0aGlzLCBzY2VuZSwgY2FtZXJhLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdC8vXG5cblx0XHRjb25zdCByZW5kZXJMaXN0ID0gdGhpcy5fcmVuZGVyTGlzdHMuZ2V0KCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0cmVuZGVyTGlzdC5iZWdpbigpO1xuXG5cdFx0dGhpcy5fcHJvamVjdE9iamVjdCggc2NlbmUsIGNhbWVyYSwgMCwgcmVuZGVyTGlzdCwgcmVuZGVyQ29udGV4dC5jbGlwcGluZ0NvbnRleHQgKTtcblxuXHRcdC8vIGluY2x1ZGUgbGlnaHRzIGZyb20gdGFyZ2V0IHNjZW5lXG5cdFx0aWYgKCB0YXJnZXRTY2VuZSAhPT0gc2NlbmUgKSB7XG5cblx0XHRcdHRhcmdldFNjZW5lLnRyYXZlcnNlVmlzaWJsZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuaXNMaWdodCAmJiBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKSApIHtcblxuXHRcdFx0XHRcdHJlbmRlckxpc3QucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdHJlbmRlckxpc3QuZmluaXNoKCk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3RleHR1cmVzLnVwZGF0ZVJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCBhY3RpdmVNaXBtYXBMZXZlbCApO1xuXG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXREYXRhID0gdGhpcy5fdGV4dHVyZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0cmVuZGVyQ29udGV4dC50ZXh0dXJlcyA9IHJlbmRlclRhcmdldERhdGEudGV4dHVyZXM7XG5cdFx0XHRyZW5kZXJDb250ZXh0LmRlcHRoVGV4dHVyZSA9IHJlbmRlclRhcmdldERhdGEuZGVwdGhUZXh0dXJlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVyQ29udGV4dC50ZXh0dXJlcyA9IG51bGw7XG5cdFx0XHRyZW5kZXJDb250ZXh0LmRlcHRoVGV4dHVyZSA9IG51bGw7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dGhpcy5fYmFja2dyb3VuZC51cGRhdGUoIHNjZW5lUmVmLCByZW5kZXJMaXN0LCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHQvLyBwcm9jZXNzIHJlbmRlciBsaXN0c1xuXG5cdFx0Y29uc3Qgb3BhcXVlT2JqZWN0cyA9IHJlbmRlckxpc3Qub3BhcXVlO1xuXHRcdGNvbnN0IHRyYW5zcGFyZW50T2JqZWN0cyA9IHJlbmRlckxpc3QudHJhbnNwYXJlbnQ7XG5cdFx0Y29uc3QgdHJhbnNwYXJlbnREb3VibGVQYXNzT2JqZWN0cyA9IHJlbmRlckxpc3QudHJhbnNwYXJlbnREb3VibGVQYXNzO1xuXHRcdGNvbnN0IGxpZ2h0c05vZGUgPSByZW5kZXJMaXN0LmxpZ2h0c05vZGU7XG5cblx0XHRpZiAoIHRoaXMub3BhcXVlID09PSB0cnVlICYmIG9wYXF1ZU9iamVjdHMubGVuZ3RoID4gMCApIHRoaXMuX3JlbmRlck9iamVjdHMoIG9wYXF1ZU9iamVjdHMsIGNhbWVyYSwgc2NlbmVSZWYsIGxpZ2h0c05vZGUgKTtcblx0XHRpZiAoIHRoaXMudHJhbnNwYXJlbnQgPT09IHRydWUgJiYgdHJhbnNwYXJlbnRPYmplY3RzLmxlbmd0aCA+IDAgKSB0aGlzLl9yZW5kZXJUcmFuc3BhcmVudHMoIHRyYW5zcGFyZW50T2JqZWN0cywgdHJhbnNwYXJlbnREb3VibGVQYXNzT2JqZWN0cywgY2FtZXJhLCBzY2VuZVJlZiwgbGlnaHRzTm9kZSApO1xuXG5cdFx0Ly8gcmVzdG9yZSByZW5kZXIgdHJlZVxuXG5cdFx0bm9kZUZyYW1lLnJlbmRlcklkID0gcHJldmlvdXNSZW5kZXJJZDtcblxuXHRcdHRoaXMuX2N1cnJlbnRSZW5kZXJDb250ZXh0ID0gcHJldmlvdXNSZW5kZXJDb250ZXh0O1xuXHRcdHRoaXMuX2N1cnJlbnRSZW5kZXJPYmplY3RGdW5jdGlvbiA9IHByZXZpb3VzUmVuZGVyT2JqZWN0RnVuY3Rpb247XG5cdFx0dGhpcy5fY29tcGlsYXRpb25Qcm9taXNlcyA9IHByZXZpb3VzQ29tcGlsYXRpb25Qcm9taXNlcztcblxuXHRcdHRoaXMuX2hhbmRsZU9iamVjdEZ1bmN0aW9uID0gdGhpcy5fcmVuZGVyT2JqZWN0RGlyZWN0O1xuXG5cdFx0Ly8gd2FpdCBmb3IgYWxsIHByb21pc2VzIHNldHVwIGJ5IGJhY2tlbmRzIGF3YWl0aW5nIGNvbXBpbGF0aW9uL2xpbmtpbmcvcGlwZWxpbmUgY3JlYXRpb24gdG8gY29tcGxldGVcblxuXHRcdGF3YWl0IFByb21pc2UuYWxsKCBjb21waWxhdGlvblByb21pc2VzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXJzIHRoZSBzY2VuZSBpbiBhbiBhc3luYyBmYXNoaW9uLlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gc2NlbmUgLSBUaGUgc2NlbmUgb3IgM0Qgb2JqZWN0IHRvIHJlbmRlci5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEuXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHJlbmRlciBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICovXG5cdGFzeW5jIHJlbmRlckFzeW5jKCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pbml0aWFsaXplZCA9PT0gZmFsc2UgKSBhd2FpdCB0aGlzLmluaXQoKTtcblxuXHRcdHRoaXMuX3JlbmRlclNjZW5lKCBzY2VuZSwgY2FtZXJhICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDYW4gYmUgdXNlZCB0byBzeW5jaHJvbml6ZSBDUFUgb3BlcmF0aW9ucyB3aXRoIEdQVSB0YXNrcy4gU28gd2hlbiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQsXG5cdCAqIHRoZSBDUFUgd2FpdHMgZm9yIHRoZSBHUFUgdG8gY29tcGxldGUgaXRzIG9wZXJhdGlvbiAoZS5nLiBhIGNvbXB1dGUgdGFzaykuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHN5bmNocm9uaXphdGlvbiBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICovXG5cdGFzeW5jIHdhaXRGb3JHUFUoKSB7XG5cblx0XHRhd2FpdCB0aGlzLmJhY2tlbmQud2FpdEZvckdQVSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gTVJUIGNvbmZpZ3VyYXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7TVJUTm9kZX0gbXJ0IC0gVGhlIE1SVCBub2RlIHRvIHNldC5cblx0ICogQHJldHVybiB7UmVuZGVyZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcmVuZGVyZXIuXG5cdCAqL1xuXHRzZXRNUlQoIG1ydCApIHtcblxuXHRcdHRoaXMuX21ydCA9IG1ydDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgTVJUIGNvbmZpZ3VyYXRpb24uXG5cdCAqXG5cdCAqIEByZXR1cm4ge01SVE5vZGV9IFRoZSBNUlQgY29uZmlndXJhdGlvbi5cblx0ICovXG5cdGdldE1SVCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9tcnQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjb2xvciBidWZmZXIgdHlwZS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY29sb3IgYnVmZmVyIHR5cGUuXG5cdCAqL1xuXHRnZXRDb2xvckJ1ZmZlclR5cGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fY29sb3JCdWZmZXJUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgZGV2aWNlIGxvc3QgY2FsbGJhY2suXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIC0gSW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbnRleHQgbG9zdC5cblx0ICovXG5cdF9vbkRldmljZUxvc3QoIGluZm8gKSB7XG5cblx0XHRsZXQgZXJyb3JNZXNzYWdlID0gYFRIUkVFLldlYkdQVVJlbmRlcmVyOiAke2luZm8uYXBpfSBEZXZpY2UgTG9zdDpcXG5cXG5NZXNzYWdlOiAke2luZm8ubWVzc2FnZX1gO1xuXG5cdFx0aWYgKCBpbmZvLnJlYXNvbiApIHtcblxuXHRcdFx0ZXJyb3JNZXNzYWdlICs9IGBcXG5SZWFzb246ICR7aW5mby5yZWFzb259YDtcblxuXHRcdH1cblxuXHRcdGNvbnNvbGUuZXJyb3IoIGVycm9yTWVzc2FnZSApO1xuXG5cdFx0dGhpcy5faXNEZXZpY2VMb3N0ID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbmRlcnMgdGhlIGdpdmVuIHJlbmRlciBidW5kbGUuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBidW5kbGUgLSBSZW5kZXIgYnVuZGxlIGRhdGEuXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lUmVmIC0gVGhlIHNjZW5lIHRoZSByZW5kZXIgYnVuZGxlIGJlbG9uZ3MgdG8uXG5cdCAqIEBwYXJhbSB7TGlnaHRzTm9kZX0gbGlnaHRzTm9kZSAtIFRoZSBjdXJyZW50IGxpZ2h0cyBub2RlLlxuXHQgKi9cblx0X3JlbmRlckJ1bmRsZSggYnVuZGxlLCBzY2VuZVJlZiwgbGlnaHRzTm9kZSApIHtcblxuXHRcdGNvbnN0IHsgYnVuZGxlR3JvdXAsIGNhbWVyYSwgcmVuZGVyTGlzdCB9ID0gYnVuZGxlO1xuXG5cdFx0Y29uc3QgcmVuZGVyQ29udGV4dCA9IHRoaXMuX2N1cnJlbnRSZW5kZXJDb250ZXh0O1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHJlbmRlckJ1bmRsZSA9IHRoaXMuX2J1bmRsZXMuZ2V0KCBidW5kbGVHcm91cCwgY2FtZXJhICk7XG5cdFx0Y29uc3QgcmVuZGVyQnVuZGxlRGF0YSA9IHRoaXMuYmFja2VuZC5nZXQoIHJlbmRlckJ1bmRsZSApO1xuXG5cdFx0aWYgKCByZW5kZXJCdW5kbGVEYXRhLnJlbmRlckNvbnRleHRzID09PSB1bmRlZmluZWQgKSByZW5kZXJCdW5kbGVEYXRhLnJlbmRlckNvbnRleHRzID0gbmV3IFNldCgpO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IG5lZWRzVXBkYXRlID0gYnVuZGxlR3JvdXAudmVyc2lvbiAhPT0gcmVuZGVyQnVuZGxlRGF0YS52ZXJzaW9uO1xuXHRcdGNvbnN0IHJlbmRlckJ1bmRsZU5lZWRzVXBkYXRlID0gcmVuZGVyQnVuZGxlRGF0YS5yZW5kZXJDb250ZXh0cy5oYXMoIHJlbmRlckNvbnRleHQgKSA9PT0gZmFsc2UgfHwgbmVlZHNVcGRhdGU7XG5cblx0XHRyZW5kZXJCdW5kbGVEYXRhLnJlbmRlckNvbnRleHRzLmFkZCggcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0aWYgKCByZW5kZXJCdW5kbGVOZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0dGhpcy5iYWNrZW5kLmJlZ2luQnVuZGxlKCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHRcdGlmICggcmVuZGVyQnVuZGxlRGF0YS5yZW5kZXJPYmplY3RzID09PSB1bmRlZmluZWQgfHwgbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdFx0cmVuZGVyQnVuZGxlRGF0YS5yZW5kZXJPYmplY3RzID0gW107XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY3VycmVudFJlbmRlckJ1bmRsZSA9IHJlbmRlckJ1bmRsZTtcblxuXHRcdFx0Y29uc3Qgb3BhcXVlT2JqZWN0cyA9IHJlbmRlckxpc3Qub3BhcXVlO1xuXG5cdFx0XHRpZiAoIHRoaXMub3BhcXVlID09PSB0cnVlICYmIG9wYXF1ZU9iamVjdHMubGVuZ3RoID4gMCApIHRoaXMuX3JlbmRlck9iamVjdHMoIG9wYXF1ZU9iamVjdHMsIGNhbWVyYSwgc2NlbmVSZWYsIGxpZ2h0c05vZGUgKTtcblxuXHRcdFx0dGhpcy5fY3VycmVudFJlbmRlckJ1bmRsZSA9IG51bGw7XG5cblx0XHRcdC8vXG5cblx0XHRcdHRoaXMuYmFja2VuZC5maW5pc2hCdW5kbGUoIHJlbmRlckNvbnRleHQsIHJlbmRlckJ1bmRsZSApO1xuXG5cdFx0XHRyZW5kZXJCdW5kbGVEYXRhLnZlcnNpb24gPSBidW5kbGVHcm91cC52ZXJzaW9uO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgeyByZW5kZXJPYmplY3RzIH0gPSByZW5kZXJCdW5kbGVEYXRhO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSByZW5kZXJPYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgcmVuZGVyT2JqZWN0ID0gcmVuZGVyT2JqZWN0c1sgaSBdO1xuXG5cdFx0XHRcdGlmICggdGhpcy5fbm9kZXMubmVlZHNSZWZyZXNoKCByZW5kZXJPYmplY3QgKSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX25vZGVzLnVwZGF0ZUJlZm9yZSggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHRcdFx0XHR0aGlzLl9ub2Rlcy51cGRhdGVGb3JSZW5kZXIoIHJlbmRlck9iamVjdCApO1xuXHRcdFx0XHRcdHRoaXMuX2JpbmRpbmdzLnVwZGF0ZUZvclJlbmRlciggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHRcdFx0XHR0aGlzLl9ub2Rlcy51cGRhdGVBZnRlciggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmJhY2tlbmQuYWRkQnVuZGxlKCByZW5kZXJDb250ZXh0LCByZW5kZXJCdW5kbGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbmRlcnMgdGhlIHNjZW5lIG9yIDNEIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBjYW1lcmEuIFRoaXMgbWV0aG9kIGNhbiBvbmx5IGJlIGNhbGxlZFxuXHQgKiBpZiB0aGUgcmVuZGVyZXIgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG5cdCAqXG5cdCAqIFRoZSB0YXJnZXQgb2YgdGhlIG1ldGhvZCBpcyB0aGUgZGVmYXVsdCBmcmFtZWJ1ZmZlciAobWVhbmluZyB0aGUgY2FudmFzKVxuXHQgKiBvciBhbHRlcm5hdGl2ZWx5IGEgcmVuZGVyIHRhcmdldCB3aGVuIHNwZWNpZmllZCB2aWEgYHNldFJlbmRlclRhcmdldCgpYC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gc2NlbmUgLSBUaGUgc2NlbmUgb3IgM0Qgb2JqZWN0IHRvIHJlbmRlci5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdG8gcmVuZGVyIHRoZSBzY2VuZSB3aXRoLlxuXHQgKiBAcmV0dXJuIHs/UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZSB3aGVuIHRoZSBzY2VuZSBoYXMgYmVlbiByZW5kZXJlZC5cblx0ICogT25seSByZXR1cm5lZCB3aGVuIHRoZSByZW5kZXJlciBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuXG5cdCAqL1xuXHRyZW5kZXIoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2luaXRpYWxpemVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmVuZGVyZXI6IC5yZW5kZXIoKSBjYWxsZWQgYmVmb3JlIHRoZSBiYWNrZW5kIGlzIGluaXRpYWxpemVkLiBUcnkgdXNpbmcgLnJlbmRlckFzeW5jKCkgaW5zdGVhZC4nICk7XG5cblx0XHRcdHJldHVybiB0aGlzLnJlbmRlckFzeW5jKCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9yZW5kZXJTY2VuZSggc2NlbmUsIGNhbWVyYSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBpbnRlcm5hbCByZW5kZXIgdGFyZ2V0IHdoaWNoIGlzIHVzZWQgd2hlbiBjb21wdXRpbmcgdGhlIG91dHB1dCB0b25lIG1hcHBpbmdcblx0ICogYW5kIGNvbG9yIHNwYWNlIGNvbnZlcnNpb24uIFVubGlrZSBpbiBgV2ViR0xSZW5kZXJlcmAsIHRoaXMgaXMgZG9uZSBpbiBhIHNlcGFyYXRlIHJlbmRlclxuXHQgKiBwYXNzIGFuZCBub3QgaW5saW5lIHRvIGFjaGlldmUgbW9yZSBjb3JyZWN0IHJlc3VsdHMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEByZXR1cm4gez9SZW5kZXJUYXJnZXR9IFRoZSByZW5kZXIgdGFyZ2V0LiBUaGUgbWV0aG9kIHJldHVybnMgYG51bGxgIGlmIG5vIG91dHB1dCBjb252ZXJzaW9uIHNob3VsZCBiZSBhcHBsaWVkLlxuXHQgKi9cblx0X2dldEZyYW1lQnVmZmVyVGFyZ2V0KCkge1xuXG5cdFx0Y29uc3QgeyBjdXJyZW50VG9uZU1hcHBpbmcsIGN1cnJlbnRDb2xvclNwYWNlIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgdXNlVG9uZU1hcHBpbmcgPSBjdXJyZW50VG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmc7XG5cdFx0Y29uc3QgdXNlQ29sb3JTcGFjZSA9IGN1cnJlbnRDb2xvclNwYWNlICE9PSBMaW5lYXJTUkdCQ29sb3JTcGFjZTtcblxuXHRcdGlmICggdXNlVG9uZU1hcHBpbmcgPT09IGZhbHNlICYmIHVzZUNvbG9yU3BhY2UgPT09IGZhbHNlICkgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuZ2V0RHJhd2luZ0J1ZmZlclNpemUoIF9kcmF3aW5nQnVmZmVyU2l6ZSApO1xuXHRcdGNvbnN0IHsgZGVwdGgsIHN0ZW5jaWwgfSA9IHRoaXM7XG5cblx0XHRsZXQgZnJhbWVCdWZmZXJUYXJnZXQgPSB0aGlzLl9mcmFtZUJ1ZmZlclRhcmdldDtcblxuXHRcdGlmICggZnJhbWVCdWZmZXJUYXJnZXQgPT09IG51bGwgKSB7XG5cblx0XHRcdGZyYW1lQnVmZmVyVGFyZ2V0ID0gbmV3IFJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwge1xuXHRcdFx0XHRkZXB0aEJ1ZmZlcjogZGVwdGgsXG5cdFx0XHRcdHN0ZW5jaWxCdWZmZXI6IHN0ZW5jaWwsXG5cdFx0XHRcdHR5cGU6IHRoaXMuX2NvbG9yQnVmZmVyVHlwZSxcblx0XHRcdFx0Zm9ybWF0OiBSR0JBRm9ybWF0LFxuXHRcdFx0XHRjb2xvclNwYWNlOiBMaW5lYXJTUkdCQ29sb3JTcGFjZSxcblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXBzOiBmYWxzZSxcblx0XHRcdFx0bWluRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXG5cdFx0XHRcdG1hZ0ZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRcdFx0XHRzYW1wbGVzOiB0aGlzLnNhbXBsZXNcblx0XHRcdH0gKTtcblxuXHRcdFx0ZnJhbWVCdWZmZXJUYXJnZXQuaXNQb3N0UHJvY2Vzc2luZ1JlbmRlclRhcmdldCA9IHRydWU7XG5cblx0XHRcdHRoaXMuX2ZyYW1lQnVmZmVyVGFyZ2V0ID0gZnJhbWVCdWZmZXJUYXJnZXQ7XG5cblx0XHR9XG5cblx0XHRmcmFtZUJ1ZmZlclRhcmdldC5kZXB0aEJ1ZmZlciA9IGRlcHRoO1xuXHRcdGZyYW1lQnVmZmVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPSBzdGVuY2lsO1xuXHRcdGZyYW1lQnVmZmVyVGFyZ2V0LnNldFNpemUoIHdpZHRoLCBoZWlnaHQgKTtcblx0XHRmcmFtZUJ1ZmZlclRhcmdldC52aWV3cG9ydC5jb3B5KCB0aGlzLl92aWV3cG9ydCApO1xuXHRcdGZyYW1lQnVmZmVyVGFyZ2V0LnNjaXNzb3IuY29weSggdGhpcy5fc2Npc3NvciApO1xuXHRcdGZyYW1lQnVmZmVyVGFyZ2V0LnZpZXdwb3J0Lm11bHRpcGx5U2NhbGFyKCB0aGlzLl9waXhlbFJhdGlvICk7XG5cdFx0ZnJhbWVCdWZmZXJUYXJnZXQuc2Npc3Nvci5tdWx0aXBseVNjYWxhciggdGhpcy5fcGl4ZWxSYXRpbyApO1xuXHRcdGZyYW1lQnVmZmVyVGFyZ2V0LnNjaXNzb3JUZXN0ID0gdGhpcy5fc2Npc3NvclRlc3Q7XG5cblx0XHRyZXR1cm4gZnJhbWVCdWZmZXJUYXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXJzIHRoZSBzY2VuZSBvciAzRCBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gY2FtZXJhLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBzY2VuZSAtIFRoZSBzY2VuZSBvciAzRCBvYmplY3QgdG8gcmVuZGVyLlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0byByZW5kZXIgdGhlIHNjZW5lIHdpdGguXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VzZUZyYW1lQnVmZmVyVGFyZ2V0PXRydWVdIC0gV2hldGhlciB0byB1c2UgYSBmcmFtZWJ1ZmZlciB0YXJnZXQgb3Igbm90LlxuXHQgKiBAcmV0dXJuIHtSZW5kZXJDb250ZXh0fSBUaGUgY3VycmVudCByZW5kZXIgY29udGV4dC5cblx0ICovXG5cdF9yZW5kZXJTY2VuZSggc2NlbmUsIGNhbWVyYSwgdXNlRnJhbWVCdWZmZXJUYXJnZXQgPSB0cnVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pc0RldmljZUxvc3QgPT09IHRydWUgKSByZXR1cm47XG5cblx0XHRjb25zdCBmcmFtZUJ1ZmZlclRhcmdldCA9IHVzZUZyYW1lQnVmZmVyVGFyZ2V0ID8gdGhpcy5fZ2V0RnJhbWVCdWZmZXJUYXJnZXQoKSA6IG51bGw7XG5cblx0XHQvLyBwcmVzZXJ2ZSByZW5kZXIgdHJlZVxuXG5cdFx0Y29uc3Qgbm9kZUZyYW1lID0gdGhpcy5fbm9kZXMubm9kZUZyYW1lO1xuXG5cdFx0Y29uc3QgcHJldmlvdXNSZW5kZXJJZCA9IG5vZGVGcmFtZS5yZW5kZXJJZDtcblx0XHRjb25zdCBwcmV2aW91c1JlbmRlckNvbnRleHQgPSB0aGlzLl9jdXJyZW50UmVuZGVyQ29udGV4dDtcblx0XHRjb25zdCBwcmV2aW91c1JlbmRlck9iamVjdEZ1bmN0aW9uID0gdGhpcy5fY3VycmVudFJlbmRlck9iamVjdEZ1bmN0aW9uO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHNjZW5lUmVmID0gKCBzY2VuZS5pc1NjZW5lID09PSB0cnVlICkgPyBzY2VuZSA6IF9zY2VuZTtcblxuXHRcdGNvbnN0IG91dHB1dFJlbmRlclRhcmdldCA9IHRoaXMuX3JlbmRlclRhcmdldCB8fCB0aGlzLl9vdXRwdXRSZW5kZXJUYXJnZXQ7XG5cblx0XHRjb25zdCBhY3RpdmVDdWJlRmFjZSA9IHRoaXMuX2FjdGl2ZUN1YmVGYWNlO1xuXHRcdGNvbnN0IGFjdGl2ZU1pcG1hcExldmVsID0gdGhpcy5fYWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0XHQvL1xuXG5cdFx0bGV0IHJlbmRlclRhcmdldDtcblxuXHRcdGlmICggZnJhbWVCdWZmZXJUYXJnZXQgIT09IG51bGwgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldCA9IGZyYW1lQnVmZmVyVGFyZ2V0O1xuXG5cdFx0XHR0aGlzLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQgPSBvdXRwdXRSZW5kZXJUYXJnZXQ7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgcmVuZGVyQ29udGV4dCA9IHRoaXMuX3JlbmRlckNvbnRleHRzLmdldCggc2NlbmUsIGNhbWVyYSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR0aGlzLl9jdXJyZW50UmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG5cdFx0dGhpcy5fY3VycmVudFJlbmRlck9iamVjdEZ1bmN0aW9uID0gdGhpcy5fcmVuZGVyT2JqZWN0RnVuY3Rpb24gfHwgdGhpcy5yZW5kZXJPYmplY3Q7XG5cblx0XHQvL1xuXG5cdFx0dGhpcy5pbmZvLmNhbGxzICsrO1xuXHRcdHRoaXMuaW5mby5yZW5kZXIuY2FsbHMgKys7XG5cdFx0dGhpcy5pbmZvLnJlbmRlci5mcmFtZUNhbGxzICsrO1xuXG5cdFx0bm9kZUZyYW1lLnJlbmRlcklkID0gdGhpcy5pbmZvLmNhbGxzO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGNvb3JkaW5hdGVTeXN0ZW0gPSB0aGlzLmNvb3JkaW5hdGVTeXN0ZW07XG5cdFx0Y29uc3QgeHIgPSB0aGlzLnhyO1xuXG5cdFx0aWYgKCBjYW1lcmEuY29vcmRpbmF0ZVN5c3RlbSAhPT0gY29vcmRpbmF0ZVN5c3RlbSAmJiB4ci5pc1ByZXNlbnRpbmcgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjYW1lcmEuY29vcmRpbmF0ZVN5c3RlbSA9IGNvb3JkaW5hdGVTeXN0ZW07XG5cdFx0XHRjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0XHRpZiAoIGNhbWVyYS5pc0FycmF5Q2FtZXJhICkge1xuXG5cdFx0XHRcdGZvciAoIGNvbnN0IHN1YkNhbWVyYSBvZiBjYW1lcmEuY2FtZXJhcyApIHtcblxuXHRcdFx0XHRcdHN1YkNhbWVyYS5jb29yZGluYXRlU3lzdGVtID0gY29vcmRpbmF0ZVN5c3RlbTtcblx0XHRcdFx0XHRzdWJDYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggc2NlbmUubWF0cml4V29ybGRBdXRvVXBkYXRlID09PSB0cnVlICkgc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGlmICggY2FtZXJhLnBhcmVudCA9PT0gbnVsbCAmJiBjYW1lcmEubWF0cml4V29ybGRBdXRvVXBkYXRlID09PSB0cnVlICkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRpZiAoIHhyLmVuYWJsZWQgPT09IHRydWUgJiYgeHIuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRpZiAoIHhyLmNhbWVyYUF1dG9VcGRhdGUgPT09IHRydWUgKSB4ci51cGRhdGVDYW1lcmEoIGNhbWVyYSApO1xuXHRcdFx0Y2FtZXJhID0geHIuZ2V0Q2FtZXJhKCk7IC8vIHVzZSBYUiBjYW1lcmEgZm9yIHJlbmRlcmluZ1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGxldCB2aWV3cG9ydCA9IHRoaXMuX3ZpZXdwb3J0O1xuXHRcdGxldCBzY2lzc29yID0gdGhpcy5fc2Npc3Nvcjtcblx0XHRsZXQgcGl4ZWxSYXRpbyA9IHRoaXMuX3BpeGVsUmF0aW87XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dmlld3BvcnQgPSByZW5kZXJUYXJnZXQudmlld3BvcnQ7XG5cdFx0XHRzY2lzc29yID0gcmVuZGVyVGFyZ2V0LnNjaXNzb3I7XG5cdFx0XHRwaXhlbFJhdGlvID0gMTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZ2V0RHJhd2luZ0J1ZmZlclNpemUoIF9kcmF3aW5nQnVmZmVyU2l6ZSApO1xuXG5cdFx0X3NjcmVlbi5zZXQoIDAsIDAsIF9kcmF3aW5nQnVmZmVyU2l6ZS53aWR0aCwgX2RyYXdpbmdCdWZmZXJTaXplLmhlaWdodCApO1xuXG5cdFx0Y29uc3QgbWluRGVwdGggPSAoIHZpZXdwb3J0Lm1pbkRlcHRoID09PSB1bmRlZmluZWQgKSA/IDAgOiB2aWV3cG9ydC5taW5EZXB0aDtcblx0XHRjb25zdCBtYXhEZXB0aCA9ICggdmlld3BvcnQubWF4RGVwdGggPT09IHVuZGVmaW5lZCApID8gMSA6IHZpZXdwb3J0Lm1heERlcHRoO1xuXG5cdFx0cmVuZGVyQ29udGV4dC52aWV3cG9ydFZhbHVlLmNvcHkoIHZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIHBpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdHJlbmRlckNvbnRleHQudmlld3BvcnRWYWx1ZS53aWR0aCA+Pj0gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cdFx0cmVuZGVyQ29udGV4dC52aWV3cG9ydFZhbHVlLmhlaWdodCA+Pj0gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cdFx0cmVuZGVyQ29udGV4dC52aWV3cG9ydFZhbHVlLm1pbkRlcHRoID0gbWluRGVwdGg7XG5cdFx0cmVuZGVyQ29udGV4dC52aWV3cG9ydFZhbHVlLm1heERlcHRoID0gbWF4RGVwdGg7XG5cdFx0cmVuZGVyQ29udGV4dC52aWV3cG9ydCA9IHJlbmRlckNvbnRleHQudmlld3BvcnRWYWx1ZS5lcXVhbHMoIF9zY3JlZW4gKSA9PT0gZmFsc2U7XG5cblx0XHRyZW5kZXJDb250ZXh0LnNjaXNzb3JWYWx1ZS5jb3B5KCBzY2lzc29yICkubXVsdGlwbHlTY2FsYXIoIHBpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdHJlbmRlckNvbnRleHQuc2Npc3NvciA9IHRoaXMuX3NjaXNzb3JUZXN0ICYmIHJlbmRlckNvbnRleHQuc2Npc3NvclZhbHVlLmVxdWFscyggX3NjcmVlbiApID09PSBmYWxzZTtcblx0XHRyZW5kZXJDb250ZXh0LnNjaXNzb3JWYWx1ZS53aWR0aCA+Pj0gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cdFx0cmVuZGVyQ29udGV4dC5zY2lzc29yVmFsdWUuaGVpZ2h0ID4+PSBhY3RpdmVNaXBtYXBMZXZlbDtcblxuXHRcdGlmICggISByZW5kZXJDb250ZXh0LmNsaXBwaW5nQ29udGV4dCApIHJlbmRlckNvbnRleHQuY2xpcHBpbmdDb250ZXh0ID0gbmV3IENsaXBwaW5nQ29udGV4dCgpO1xuXHRcdHJlbmRlckNvbnRleHQuY2xpcHBpbmdDb250ZXh0LnVwZGF0ZUdsb2JhbCggc2NlbmVSZWYsIGNhbWVyYSApO1xuXG5cdFx0Ly9cblxuXHRcdHNjZW5lUmVmLm9uQmVmb3JlUmVuZGVyKCB0aGlzLCBzY2VuZSwgY2FtZXJhLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdC8vXG5cblx0XHRfcHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdF9mcnVzdHVtLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCwgY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0Y29uc3QgcmVuZGVyTGlzdCA9IHRoaXMuX3JlbmRlckxpc3RzLmdldCggc2NlbmUsIGNhbWVyYSApO1xuXHRcdHJlbmRlckxpc3QuYmVnaW4oKTtcblxuXHRcdHRoaXMuX3Byb2plY3RPYmplY3QoIHNjZW5lLCBjYW1lcmEsIDAsIHJlbmRlckxpc3QsIHJlbmRlckNvbnRleHQuY2xpcHBpbmdDb250ZXh0ICk7XG5cblx0XHRyZW5kZXJMaXN0LmZpbmlzaCgpO1xuXG5cdFx0aWYgKCB0aGlzLnNvcnRPYmplY3RzID09PSB0cnVlICkge1xuXG5cdFx0XHRyZW5kZXJMaXN0LnNvcnQoIHRoaXMuX29wYXF1ZVNvcnQsIHRoaXMuX3RyYW5zcGFyZW50U29ydCApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl90ZXh0dXJlcy51cGRhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcblxuXHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0RGF0YSA9IHRoaXMuX3RleHR1cmVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdHJlbmRlckNvbnRleHQudGV4dHVyZXMgPSByZW5kZXJUYXJnZXREYXRhLnRleHR1cmVzO1xuXHRcdFx0cmVuZGVyQ29udGV4dC5kZXB0aFRleHR1cmUgPSByZW5kZXJUYXJnZXREYXRhLmRlcHRoVGV4dHVyZTtcblx0XHRcdHJlbmRlckNvbnRleHQud2lkdGggPSByZW5kZXJUYXJnZXREYXRhLndpZHRoO1xuXHRcdFx0cmVuZGVyQ29udGV4dC5oZWlnaHQgPSByZW5kZXJUYXJnZXREYXRhLmhlaWdodDtcblx0XHRcdHJlbmRlckNvbnRleHQucmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0O1xuXHRcdFx0cmVuZGVyQ29udGV4dC5kZXB0aCA9IHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlcjtcblx0XHRcdHJlbmRlckNvbnRleHQuc3RlbmNpbCA9IHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVyQ29udGV4dC50ZXh0dXJlcyA9IG51bGw7XG5cdFx0XHRyZW5kZXJDb250ZXh0LmRlcHRoVGV4dHVyZSA9IG51bGw7XG5cdFx0XHRyZW5kZXJDb250ZXh0LndpZHRoID0gdGhpcy5kb21FbGVtZW50LndpZHRoO1xuXHRcdFx0cmVuZGVyQ29udGV4dC5oZWlnaHQgPSB0aGlzLmRvbUVsZW1lbnQuaGVpZ2h0O1xuXHRcdFx0cmVuZGVyQ29udGV4dC5kZXB0aCA9IHRoaXMuZGVwdGg7XG5cdFx0XHRyZW5kZXJDb250ZXh0LnN0ZW5jaWwgPSB0aGlzLnN0ZW5jaWw7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJDb250ZXh0LndpZHRoID4+PSBhY3RpdmVNaXBtYXBMZXZlbDtcblx0XHRyZW5kZXJDb250ZXh0LmhlaWdodCA+Pj0gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cdFx0cmVuZGVyQ29udGV4dC5hY3RpdmVDdWJlRmFjZSA9IGFjdGl2ZUN1YmVGYWNlO1xuXHRcdHJlbmRlckNvbnRleHQuYWN0aXZlTWlwbWFwTGV2ZWwgPSBhY3RpdmVNaXBtYXBMZXZlbDtcblx0XHRyZW5kZXJDb250ZXh0Lm9jY2x1c2lvblF1ZXJ5Q291bnQgPSByZW5kZXJMaXN0Lm9jY2x1c2lvblF1ZXJ5Q291bnQ7XG5cblx0XHQvL1xuXG5cdFx0dGhpcy5fYmFja2dyb3VuZC51cGRhdGUoIHNjZW5lUmVmLCByZW5kZXJMaXN0LCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHQvL1xuXG5cdFx0dGhpcy5iYWNrZW5kLmJlZ2luUmVuZGVyKCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHQvLyBwcm9jZXNzIHJlbmRlciBsaXN0c1xuXG5cdFx0Y29uc3Qge1xuXHRcdFx0YnVuZGxlcyxcblx0XHRcdGxpZ2h0c05vZGUsXG5cdFx0XHR0cmFuc3BhcmVudERvdWJsZVBhc3M6IHRyYW5zcGFyZW50RG91YmxlUGFzc09iamVjdHMsXG5cdFx0XHR0cmFuc3BhcmVudDogdHJhbnNwYXJlbnRPYmplY3RzLFxuXHRcdFx0b3BhcXVlOiBvcGFxdWVPYmplY3RzXG5cdFx0fSA9IHJlbmRlckxpc3Q7XG5cblx0XHRpZiAoIGJ1bmRsZXMubGVuZ3RoID4gMCApIHRoaXMuX3JlbmRlckJ1bmRsZXMoIGJ1bmRsZXMsIHNjZW5lUmVmLCBsaWdodHNOb2RlICk7XG5cdFx0aWYgKCB0aGlzLm9wYXF1ZSA9PT0gdHJ1ZSAmJiBvcGFxdWVPYmplY3RzLmxlbmd0aCA+IDAgKSB0aGlzLl9yZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBjYW1lcmEsIHNjZW5lUmVmLCBsaWdodHNOb2RlICk7XG5cdFx0aWYgKCB0aGlzLnRyYW5zcGFyZW50ID09PSB0cnVlICYmIHRyYW5zcGFyZW50T2JqZWN0cy5sZW5ndGggPiAwICkgdGhpcy5fcmVuZGVyVHJhbnNwYXJlbnRzKCB0cmFuc3BhcmVudE9iamVjdHMsIHRyYW5zcGFyZW50RG91YmxlUGFzc09iamVjdHMsIGNhbWVyYSwgc2NlbmVSZWYsIGxpZ2h0c05vZGUgKTtcblxuXHRcdC8vIGZpbmlzaCByZW5kZXIgcGFzc1xuXG5cdFx0dGhpcy5iYWNrZW5kLmZpbmlzaFJlbmRlciggcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0Ly8gcmVzdG9yZSByZW5kZXIgdHJlZVxuXG5cdFx0bm9kZUZyYW1lLnJlbmRlcklkID0gcHJldmlvdXNSZW5kZXJJZDtcblxuXHRcdHRoaXMuX2N1cnJlbnRSZW5kZXJDb250ZXh0ID0gcHJldmlvdXNSZW5kZXJDb250ZXh0O1xuXHRcdHRoaXMuX2N1cnJlbnRSZW5kZXJPYmplY3RGdW5jdGlvbiA9IHByZXZpb3VzUmVuZGVyT2JqZWN0RnVuY3Rpb247XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBmcmFtZUJ1ZmZlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5zZXRSZW5kZXJUYXJnZXQoIG91dHB1dFJlbmRlclRhcmdldCwgYWN0aXZlQ3ViZUZhY2UsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cblx0XHRcdHRoaXMuX3JlbmRlck91dHB1dCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0c2NlbmVSZWYub25BZnRlclJlbmRlciggdGhpcywgc2NlbmUsIGNhbWVyYSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHQvL1xuXG5cdFx0cmV0dXJuIHJlbmRlckNvbnRleHQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgb3V0cHV0IHBhc3MgcGVyZm9ybXMgdG9uZSBtYXBwaW5nIGFuZCBjb2xvciBzcGFjZSBjb252ZXJzaW9uLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1JlbmRlclRhcmdldH0gcmVuZGVyVGFyZ2V0IC0gVGhlIGN1cnJlbnQgcmVuZGVyIHRhcmdldC5cblx0ICovXG5cdF9yZW5kZXJPdXRwdXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHF1YWQgPSB0aGlzLl9xdWFkO1xuXG5cdFx0aWYgKCB0aGlzLl9ub2Rlcy5oYXNPdXRwdXRDaGFuZ2UoIHJlbmRlclRhcmdldC50ZXh0dXJlICkgKSB7XG5cblx0XHRcdHF1YWQubWF0ZXJpYWwuZnJhZ21lbnROb2RlID0gdGhpcy5fbm9kZXMuZ2V0T3V0cHV0Tm9kZSggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblx0XHRcdHF1YWQubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYSBjbGVhciBvcGVyYXRpb24gY2xlYXJzIHRoZSBpbnRlcm1lZGlhdGUgcmVuZGVyVGFyZ2V0IHRleHR1cmUsIGJ1dCBzaG91bGQgbm90IHVwZGF0ZSB0aGUgc2NyZWVuIGNhbnZhcy5cblxuXHRcdGNvbnN0IGN1cnJlbnRBdXRvQ2xlYXIgPSB0aGlzLmF1dG9DbGVhcjtcblx0XHRjb25zdCBjdXJyZW50WFIgPSB0aGlzLnhyLmVuYWJsZWQ7XG5cblx0XHR0aGlzLmF1dG9DbGVhciA9IGZhbHNlO1xuXHRcdHRoaXMueHIuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fcmVuZGVyU2NlbmUoIHF1YWQsIHF1YWQuY2FtZXJhLCBmYWxzZSApO1xuXG5cdFx0dGhpcy5hdXRvQ2xlYXIgPSBjdXJyZW50QXV0b0NsZWFyO1xuXHRcdHRoaXMueHIuZW5hYmxlZCA9IGN1cnJlbnRYUjtcblxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbWF4aW11bSBhdmFpbGFibGUgYW5pc290cm9weSBmb3IgdGV4dHVyZSBmaWx0ZXJpbmcuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIG1heGltdW0gYXZhaWxhYmxlIGFuaXNvdHJvcHkuXG5cdCAqL1xuXHRnZXRNYXhBbmlzb3Ryb3B5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYmFja2VuZC5nZXRNYXhBbmlzb3Ryb3B5KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBhY3RpdmUgY3ViZSBmYWNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhY3RpdmUgY3ViZSBmYWNlLlxuXHQgKi9cblx0Z2V0QWN0aXZlQ3ViZUZhY2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fYWN0aXZlQ3ViZUZhY2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBhY3RpdmUgbWlwbWFwIGxldmVsLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhY3RpdmUgbWlwbWFwIGxldmVsLlxuXHQgKi9cblx0Z2V0QWN0aXZlTWlwbWFwTGV2ZWwoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fYWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBcHBsaWNhdGlvbnMgYXJlIGFkdmlzZWQgdG8gYWx3YXlzIGRlZmluZSB0aGUgYW5pbWF0aW9uIGxvb3Bcblx0ICogd2l0aCB0aGlzIG1ldGhvZCBhbmQgbm90IG1hbnVhbGx5IHdpdGggYHJlcXVlc3RBbmltYXRpb25GcmFtZSgpYFxuXHQgKiBmb3IgYmVzdCBjb21wYXRpYmlsaXR5LlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHBhcmFtIHs/RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGFwcGxpY2F0aW9uJ3MgYW5pbWF0aW9uIGxvb3AuXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHNldCBoYXMgYmVlbiBleGVjdXRlZC5cblx0ICovXG5cdGFzeW5jIHNldEFuaW1hdGlvbkxvb3AoIGNhbGxiYWNrICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pbml0aWFsaXplZCA9PT0gZmFsc2UgKSBhd2FpdCB0aGlzLmluaXQoKTtcblxuXHRcdHRoaXMuX2FuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2FuIGJlIHVzZWQgdG8gdHJhbnNmZXIgYnVmZmVyIGRhdGEgZnJvbSBhIHN0b3JhZ2UgYnVmZmVyIGF0dHJpYnV0ZVxuXHQgKiBmcm9tIHRoZSBHUFUgdG8gdGhlIENQVSBpbiBjb250ZXh0IG9mIGNvbXB1dGUgc2hhZGVycy5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7U3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIHN0b3JhZ2UgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGJ1ZmZlciBkYXRhIHdoZW4gdGhlIGRhdGEgYXJlIHJlYWR5LlxuXHQgKi9cblx0YXN5bmMgZ2V0QXJyYXlCdWZmZXJBc3luYyggYXR0cmlidXRlICkge1xuXG5cdFx0cmV0dXJuIGF3YWl0IHRoaXMuYmFja2VuZC5nZXRBcnJheUJ1ZmZlckFzeW5jKCBhdHRyaWJ1dGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHJlbmRlcmluZyBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtHUFVDYW52YXNDb250ZXh0fFdlYkdMMlJlbmRlcmluZ0NvbnRleHR9IFRoZSByZW5kZXJpbmcgY29udGV4dC5cblx0ICovXG5cdGdldENvbnRleHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5iYWNrZW5kLmdldENvbnRleHQoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHBpeGVsIHJhdGlvLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBwaXhlbCByYXRpby5cblx0ICovXG5cdGdldFBpeGVsUmF0aW8oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fcGl4ZWxSYXRpbztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRyYXdpbmcgYnVmZmVyIHNpemUgaW4gcGh5c2ljYWwgcGl4ZWxzLiBUaGlzIG1ldGhvZCBob25vcnMgdGhlIHBpeGVsIHJhdGlvLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHRhcmdldCAtIFRoZSBtZXRob2Qgd3JpdGVzIHRoZSByZXN1bHQgaW4gdGhpcyB0YXJnZXQgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgZHJhd2luZyBidWZmZXIgc2l6ZS5cblx0ICovXG5cdGdldERyYXdpbmdCdWZmZXJTaXplKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggdGhpcy5fd2lkdGggKiB0aGlzLl9waXhlbFJhdGlvLCB0aGlzLl9oZWlnaHQgKiB0aGlzLl9waXhlbFJhdGlvICkuZmxvb3IoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHJlbmRlcmVyJ3Mgc2l6ZSBpbiBsb2dpY2FsIHBpeGVscy4gVGhpcyBtZXRob2QgZG9lcyBub3QgaG9ub3IgdGhlIHBpeGVsIHJhdGlvLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHRhcmdldCAtIFRoZSBtZXRob2Qgd3JpdGVzIHRoZSByZXN1bHQgaW4gdGhpcyB0YXJnZXQgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgcmVuZGVyZXIncyBzaXplIGluIGxvZ2ljYWwgcGl4ZWxzLlxuXHQgKi9cblx0Z2V0U2l6ZSggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIHBpeGVsIHJhdGlvIGFuZCByZXNpemVzIHRoZSBjYW52YXMgaWYgbmVjZXNzYXJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3ZhbHVlPTFdIC0gVGhlIHBpeGVsIHJhdGlvLlxuXHQgKi9cblx0c2V0UGl4ZWxSYXRpbyggdmFsdWUgPSAxICkge1xuXG5cdFx0aWYgKCB0aGlzLl9waXhlbFJhdGlvID09PSB2YWx1ZSApIHJldHVybjtcblxuXHRcdHRoaXMuX3BpeGVsUmF0aW8gPSB2YWx1ZTtcblxuXHRcdHRoaXMuc2V0U2l6ZSggdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCwgZmFsc2UgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGFsbG93cyB0byBkZWZpbmUgdGhlIGRyYXdpbmcgYnVmZmVyIHNpemUgYnkgc3BlY2lmeWluZ1xuXHQgKiB3aWR0aCwgaGVpZ2h0IGFuZCBwaXhlbCByYXRpbyBhbGwgYXQgb25jZS4gVGhlIHNpemUgb2YgdGhlIGRyYXdpbmdcblx0ICogYnVmZmVyIGlzIGNvbXB1dGVkIHdpdGggdGhpcyBmb3JtdWxhOlxuXHQgKiBgYGBqc1xuXHQgKiBzaXplLnggPSB3aWR0aCAqIHBpeGVsUmF0aW87XG5cdCAqIHNpemUueSA9IGhlaWdodCAqIHBpeGVsUmF0aW87XG5cdCAqIGBgYFxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggaW4gbG9naWNhbCBwaXhlbHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IGluIGxvZ2ljYWwgcGl4ZWxzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcGl4ZWxSYXRpbyAtIFRoZSBwaXhlbCByYXRpby5cblx0ICovXG5cdHNldERyYXdpbmdCdWZmZXJTaXplKCB3aWR0aCwgaGVpZ2h0LCBwaXhlbFJhdGlvICkge1xuXG5cdFx0dGhpcy5fd2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHR0aGlzLl9waXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcblxuXHRcdHRoaXMuZG9tRWxlbWVudC53aWR0aCA9IE1hdGguZmxvb3IoIHdpZHRoICogcGl4ZWxSYXRpbyApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBwaXhlbFJhdGlvICk7XG5cblx0XHR0aGlzLnNldFZpZXdwb3J0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRpZiAoIHRoaXMuX2luaXRpYWxpemVkICkgdGhpcy5iYWNrZW5kLnVwZGF0ZVNpemUoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHNpemUgb2YgdGhlIHJlbmRlcmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggaW4gbG9naWNhbCBwaXhlbHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IGluIGxvZ2ljYWwgcGl4ZWxzLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGVTdHlsZT10cnVlXSAtIFdoZXRoZXIgdG8gdXBkYXRlIHRoZSBgc3R5bGVgIGF0dHJpYnV0ZSBvZiB0aGUgY2FudmFzIG9yIG5vdC5cblx0ICovXG5cdHNldFNpemUoIHdpZHRoLCBoZWlnaHQsIHVwZGF0ZVN0eWxlID0gdHJ1ZSApIHtcblxuXHRcdHRoaXMuX3dpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LndpZHRoID0gTWF0aC5mbG9vciggd2lkdGggKiB0aGlzLl9waXhlbFJhdGlvICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LmhlaWdodCA9IE1hdGguZmxvb3IoIGhlaWdodCAqIHRoaXMuX3BpeGVsUmF0aW8gKTtcblxuXHRcdGlmICggdXBkYXRlU3R5bGUgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuZG9tRWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4Jztcblx0XHRcdHRoaXMuZG9tRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRWaWV3cG9ydCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0aWYgKCB0aGlzLl9pbml0aWFsaXplZCApIHRoaXMuYmFja2VuZC51cGRhdGVTaXplKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIGEgbWFudWFsIHNvcnQgZnVuY3Rpb24gZm9yIHRoZSBvcGFxdWUgcmVuZGVyIGxpc3QuXG5cdCAqIFBhc3MgYG51bGxgIHRvIHVzZSB0aGUgZGVmYXVsdCBzb3J0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXRob2QgLSBUaGUgc29ydCBmdW5jdGlvbi5cblx0ICovXG5cdHNldE9wYXF1ZVNvcnQoIG1ldGhvZCApIHtcblxuXHRcdHRoaXMuX29wYXF1ZVNvcnQgPSBtZXRob2Q7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIGEgbWFudWFsIHNvcnQgZnVuY3Rpb24gZm9yIHRoZSB0cmFuc3BhcmVudCByZW5kZXIgbGlzdC5cblx0ICogUGFzcyBgbnVsbGAgdG8gdXNlIHRoZSBkZWZhdWx0IHNvcnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCAtIFRoZSBzb3J0IGZ1bmN0aW9uLlxuXHQgKi9cblx0c2V0VHJhbnNwYXJlbnRTb3J0KCBtZXRob2QgKSB7XG5cblx0XHR0aGlzLl90cmFuc3BhcmVudFNvcnQgPSBtZXRob2Q7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzY2lzc29yIHJlY3RhbmdsZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3I0fSB0YXJnZXQgLSBUaGUgbWV0aG9kIHdyaXRlcyB0aGUgcmVzdWx0IGluIHRoaXMgdGFyZ2V0IG9iamVjdC5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gVGhlIHNjaXNzb3IgcmVjdGFuZ2xlLlxuXHQgKi9cblx0Z2V0U2Npc3NvciggdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3Qgc2Npc3NvciA9IHRoaXMuX3NjaXNzb3I7XG5cblx0XHR0YXJnZXQueCA9IHNjaXNzb3IueDtcblx0XHR0YXJnZXQueSA9IHNjaXNzb3IueTtcblx0XHR0YXJnZXQud2lkdGggPSBzY2lzc29yLndpZHRoO1xuXHRcdHRhcmdldC5oZWlnaHQgPSBzY2lzc29yLmhlaWdodDtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBzY2lzc29yIHJlY3RhbmdsZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXIgfCBWZWN0b3I0fSB4IC0gVGhlIGhvcml6b250YWwgY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSBib3ggaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHQgKiBJbnN0ZWFkIG9mIHBhc3NpbmcgZm91ciBhcmd1bWVudHMsIHRoZSBtZXRob2QgYWxzbyB3b3JrcyB3aXRoIGEgc2luZ2xlIGZvdXItZGltZW5zaW9uYWwgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2ZXJ0aWNhbCBjb29yZGluYXRlIGZvciB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIGJveCBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgc2Npc3NvciBib3ggaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgc2Npc3NvciBib3ggaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHQgKi9cblx0c2V0U2Npc3NvciggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGNvbnN0IHNjaXNzb3IgPSB0aGlzLl9zY2lzc29yO1xuXG5cdFx0aWYgKCB4LmlzVmVjdG9yNCApIHtcblxuXHRcdFx0c2Npc3Nvci5jb3B5KCB4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRzY2lzc29yLnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2Npc3NvciB0ZXN0IHZhbHVlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzY2lzc29yIHRlc3Qgc2hvdWxkIGJlIGVuYWJsZWQgb3Igbm90LlxuXHQgKi9cblx0Z2V0U2Npc3NvclRlc3QoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc2Npc3NvclRlc3Q7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBzY2lzc29yIHRlc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gYm9vbGVhbiAtIFdoZXRoZXIgdGhlIHNjaXNzb3IgdGVzdCBzaG91bGQgYmUgZW5hYmxlZCBvciBub3QuXG5cdCAqL1xuXHRzZXRTY2lzc29yVGVzdCggYm9vbGVhbiApIHtcblxuXHRcdHRoaXMuX3NjaXNzb3JUZXN0ID0gYm9vbGVhbjtcblxuXHRcdHRoaXMuYmFja2VuZC5zZXRTY2lzc29yVGVzdCggYm9vbGVhbiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmlld3BvcnQgZGVmaW5pdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3I0fSB0YXJnZXQgLSBUaGUgbWV0aG9kIHdyaXRlcyB0aGUgcmVzdWx0IGluIHRoaXMgdGFyZ2V0IG9iamVjdC5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gVGhlIHZpZXdwb3J0IGRlZmluaXRpb24uXG5cdCAqL1xuXHRnZXRWaWV3cG9ydCggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLl92aWV3cG9ydCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgdmlld3BvcnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyIHwgVmVjdG9yNH0geCAtIFRoZSBob3Jpem9udGFsIGNvb3JkaW5hdGUgZm9yIHRoZSBsb3dlciBsZWZ0IGNvcm5lciBvZiB0aGUgdmlld3BvcnQgb3JpZ2luIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmVydGljYWwgY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSB2aWV3cG9ydCBvcmlnaW4gIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSB2aWV3cG9ydCBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydCBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtaW5EZXB0aCAtIFRoZSBtaW5pbXVtIGRlcHRoIHZhbHVlIG9mIHRoZSB2aWV3cG9ydC4gV2ViR1BVIG9ubHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtYXhEZXB0aCAtIFRoZSBtYXhpbXVtIGRlcHRoIHZhbHVlIG9mIHRoZSB2aWV3cG9ydC4gV2ViR1BVIG9ubHkuXG5cdCAqL1xuXHRzZXRWaWV3cG9ydCggeCwgeSwgd2lkdGgsIGhlaWdodCwgbWluRGVwdGggPSAwLCBtYXhEZXB0aCA9IDEgKSB7XG5cblx0XHRjb25zdCB2aWV3cG9ydCA9IHRoaXMuX3ZpZXdwb3J0O1xuXG5cdFx0aWYgKCB4LmlzVmVjdG9yNCApIHtcblxuXHRcdFx0dmlld3BvcnQuY29weSggeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmlld3BvcnQuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHR2aWV3cG9ydC5taW5EZXB0aCA9IG1pbkRlcHRoO1xuXHRcdHZpZXdwb3J0Lm1heERlcHRoID0gbWF4RGVwdGg7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjbGVhciBjb2xvci5cblx0ICpcblx0ICogQHBhcmFtIHtDb2xvcn0gdGFyZ2V0IC0gVGhlIG1ldGhvZCB3cml0ZXMgdGhlIHJlc3VsdCBpbiB0aGlzIHRhcmdldCBvYmplY3QuXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBUaGUgY2xlYXIgY29sb3IuXG5cdCAqL1xuXHRnZXRDbGVhckNvbG9yKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMuX2NsZWFyQ29sb3IgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGNsZWFyIGNvbG9yIGFuZCBvcHRpb25hbGx5IHRoZSBjbGVhciBhbHBoYS5cblx0ICpcblx0ICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBUaGUgY2xlYXIgY29sb3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYWxwaGE9MV0gLSBUaGUgY2xlYXIgYWxwaGEuXG5cdCAqL1xuXHRzZXRDbGVhckNvbG9yKCBjb2xvciwgYWxwaGEgPSAxICkge1xuXG5cdFx0dGhpcy5fY2xlYXJDb2xvci5zZXQoIGNvbG9yICk7XG5cdFx0dGhpcy5fY2xlYXJDb2xvci5hID0gYWxwaGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjbGVhciBhbHBoYS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY2xlYXIgYWxwaGEuXG5cdCAqL1xuXHRnZXRDbGVhckFscGhhKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2NsZWFyQ29sb3IuYTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGNsZWFyIGFscGhhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgY2xlYXIgYWxwaGEuXG5cdCAqL1xuXHRzZXRDbGVhckFscGhhKCBhbHBoYSApIHtcblxuXHRcdHRoaXMuX2NsZWFyQ29sb3IuYSA9IGFscGhhO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2xlYXIgZGVwdGguXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNsZWFyIGRlcHRoLlxuXHQgKi9cblx0Z2V0Q2xlYXJEZXB0aCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGVhckRlcHRoO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgY2xlYXIgZGVwdGguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCAtIFRoZSBjbGVhciBkZXB0aC5cblx0ICovXG5cdHNldENsZWFyRGVwdGgoIGRlcHRoICkge1xuXG5cdFx0dGhpcy5fY2xlYXJEZXB0aCA9IGRlcHRoO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2xlYXIgc3RlbmNpbC5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY2xlYXIgc3RlbmNpbC5cblx0ICovXG5cdGdldENsZWFyU3RlbmNpbCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGVhclN0ZW5jaWw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBjbGVhciBzdGVuY2lsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RlbmNpbCAtIFRoZSBjbGVhciBzdGVuY2lsLlxuXHQgKi9cblx0c2V0Q2xlYXJTdGVuY2lsKCBzdGVuY2lsICkge1xuXG5cdFx0dGhpcy5fY2xlYXJTdGVuY2lsID0gc3RlbmNpbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHBlcmZvcm1zIGFuIG9jY2x1c2lvbiBxdWVyeSBmb3IgdGhlIGdpdmVuIDNEIG9iamVjdC5cblx0ICogSXQgcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIDNEIG9iamVjdCBpcyBmdWxseSBvY2NsdWRlZCBieSBvdGhlclxuXHQgKiAzRCBvYmplY3RzIGluIHRoZSBzY2VuZS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0byB0ZXN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSAzRCBvYmplY3QgaXMgZnVsbHkgb2NjbHVkZWQgb3Igbm90LlxuXHQgKi9cblx0aXNPY2NsdWRlZCggb2JqZWN0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyQ29udGV4dCA9IHRoaXMuX2N1cnJlbnRSZW5kZXJDb250ZXh0O1xuXG5cdFx0cmV0dXJuIHJlbmRlckNvbnRleHQgJiYgdGhpcy5iYWNrZW5kLmlzT2NjbHVkZWQoIHJlbmRlckNvbnRleHQsIG9iamVjdCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUGVyZm9ybXMgYSBtYW51YWwgY2xlYXIgb3BlcmF0aW9uLiBUaGlzIG1ldGhvZCBpZ25vcmVzIGBhdXRvQ2xlYXJgIHByb3BlcnRpZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbG9yPXRydWVdIC0gV2hldGhlciB0aGUgY29sb3IgYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbZGVwdGg9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBkZXB0aCBidWZmZXIgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtzdGVuY2lsPXRydWVdIC0gV2hldGhlciB0aGUgc3RlbmNpbCBidWZmZXIgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LlxuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjbGVhciBvcGVyYXRpb24gaGFzIGJlZW4gZXhlY3V0ZWQuXG5cdCAqIE9ubHkgcmV0dXJuZWQgd2hlbiB0aGUgcmVuZGVyZXIgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLlxuXHQgKi9cblx0Y2xlYXIoIGNvbG9yID0gdHJ1ZSwgZGVwdGggPSB0cnVlLCBzdGVuY2lsID0gdHJ1ZSApIHtcblxuXHRcdGlmICggdGhpcy5faW5pdGlhbGl6ZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SZW5kZXJlcjogLmNsZWFyKCkgY2FsbGVkIGJlZm9yZSB0aGUgYmFja2VuZCBpcyBpbml0aWFsaXplZC4gVHJ5IHVzaW5nIC5jbGVhckFzeW5jKCkgaW5zdGVhZC4nICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmNsZWFyQXN5bmMoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0ID0gdGhpcy5fcmVuZGVyVGFyZ2V0IHx8IHRoaXMuX2dldEZyYW1lQnVmZmVyVGFyZ2V0KCk7XG5cblx0XHRsZXQgcmVuZGVyQ29udGV4dCA9IG51bGw7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0Y29uc3QgcmVuZGVyVGFyZ2V0RGF0YSA9IHRoaXMuX3RleHR1cmVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdHJlbmRlckNvbnRleHQgPSB0aGlzLl9yZW5kZXJDb250ZXh0cy5nZXRGb3JDbGVhciggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRyZW5kZXJDb250ZXh0LnRleHR1cmVzID0gcmVuZGVyVGFyZ2V0RGF0YS50ZXh0dXJlcztcblx0XHRcdHJlbmRlckNvbnRleHQuZGVwdGhUZXh0dXJlID0gcmVuZGVyVGFyZ2V0RGF0YS5kZXB0aFRleHR1cmU7XG5cdFx0XHRyZW5kZXJDb250ZXh0LndpZHRoID0gcmVuZGVyVGFyZ2V0RGF0YS53aWR0aDtcblx0XHRcdHJlbmRlckNvbnRleHQuaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0RGF0YS5oZWlnaHQ7XG5cdFx0XHRyZW5kZXJDb250ZXh0LnJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblx0XHRcdHJlbmRlckNvbnRleHQuZGVwdGggPSByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXI7XG5cdFx0XHRyZW5kZXJDb250ZXh0LnN0ZW5jaWwgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlcjtcblx0XHRcdC8vICMzMDMyOVxuXHRcdFx0cmVuZGVyQ29udGV4dC5jbGVhckNvbG9yVmFsdWUgPSB0aGlzLmJhY2tlbmQuZ2V0Q2xlYXJDb2xvcigpO1xuXHRcdFx0cmVuZGVyQ29udGV4dC5hY3RpdmVDdWJlRmFjZSA9IHRoaXMuZ2V0QWN0aXZlQ3ViZUZhY2UoKTtcblx0XHRcdHJlbmRlckNvbnRleHQuYWN0aXZlTWlwbWFwTGV2ZWwgPSB0aGlzLmdldEFjdGl2ZU1pcG1hcExldmVsKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJhY2tlbmQuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCwgcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQgIT09IG51bGwgJiYgdGhpcy5fcmVuZGVyVGFyZ2V0ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9yZW5kZXJPdXRwdXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUGVyZm9ybXMgYSBtYW51YWwgY2xlYXIgb3BlcmF0aW9uIG9mIHRoZSBjb2xvciBidWZmZXIuIFRoaXMgbWV0aG9kIGlnbm9yZXMgYGF1dG9DbGVhcmAgcHJvcGVydGllcy5cblx0ICpcblx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY2xlYXIgb3BlcmF0aW9uIGhhcyBiZWVuIGV4ZWN1dGVkLlxuXHQgKiBPbmx5IHJldHVybmVkIHdoZW4gdGhlIHJlbmRlcmVyIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC5cblx0ICovXG5cdGNsZWFyQ29sb3IoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jbGVhciggdHJ1ZSwgZmFsc2UsIGZhbHNlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQZXJmb3JtcyBhIG1hbnVhbCBjbGVhciBvcGVyYXRpb24gb2YgdGhlIGRlcHRoIGJ1ZmZlci4gVGhpcyBtZXRob2QgaWdub3JlcyBgYXV0b0NsZWFyYCBwcm9wZXJ0aWVzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjbGVhciBvcGVyYXRpb24gaGFzIGJlZW4gZXhlY3V0ZWQuXG5cdCAqIE9ubHkgcmV0dXJuZWQgd2hlbiB0aGUgcmVuZGVyZXIgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLlxuXHQgKi9cblx0Y2xlYXJEZXB0aCgpIHtcblxuXHRcdHJldHVybiB0aGlzLmNsZWFyKCBmYWxzZSwgdHJ1ZSwgZmFsc2UgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBlcmZvcm1zIGEgbWFudWFsIGNsZWFyIG9wZXJhdGlvbiBvZiB0aGUgc3RlbmNpbCBidWZmZXIuIFRoaXMgbWV0aG9kIGlnbm9yZXMgYGF1dG9DbGVhcmAgcHJvcGVydGllcy5cblx0ICpcblx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY2xlYXIgb3BlcmF0aW9uIGhhcyBiZWVuIGV4ZWN1dGVkLlxuXHQgKiBPbmx5IHJldHVybmVkIHdoZW4gdGhlIHJlbmRlcmVyIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC5cblx0ICovXG5cdGNsZWFyU3RlbmNpbCgpIHtcblxuXHRcdHJldHVybiB0aGlzLmNsZWFyKCBmYWxzZSwgZmFsc2UsIHRydWUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFzeW5jIHZlcnNpb24gb2Yge0BsaW5rIFJlbmRlcmVyI2NsZWFyfS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbG9yPXRydWVdIC0gV2hldGhlciB0aGUgY29sb3IgYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbZGVwdGg9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBkZXB0aCBidWZmZXIgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtzdGVuY2lsPXRydWVdIC0gV2hldGhlciB0aGUgc3RlbmNpbCBidWZmZXIgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LlxuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjbGVhciBvcGVyYXRpb24gaGFzIGJlZW4gZXhlY3V0ZWQuXG5cdCAqL1xuXHRhc3luYyBjbGVhckFzeW5jKCBjb2xvciA9IHRydWUsIGRlcHRoID0gdHJ1ZSwgc3RlbmNpbCA9IHRydWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2luaXRpYWxpemVkID09PSBmYWxzZSApIGF3YWl0IHRoaXMuaW5pdCgpO1xuXG5cdFx0dGhpcy5jbGVhciggY29sb3IsIGRlcHRoLCBzdGVuY2lsICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBc3luYyB2ZXJzaW9uIG9mIHtAbGluayBSZW5kZXJlciNjbGVhckNvbG9yfS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGNsZWFyIG9wZXJhdGlvbiBoYXMgYmVlbiBleGVjdXRlZC5cblx0ICovXG5cdGFzeW5jIGNsZWFyQ29sb3JBc3luYygpIHtcblxuXHRcdHRoaXMuY2xlYXJBc3luYyggdHJ1ZSwgZmFsc2UsIGZhbHNlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBc3luYyB2ZXJzaW9uIG9mIHtAbGluayBSZW5kZXJlciNjbGVhckRlcHRofS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGNsZWFyIG9wZXJhdGlvbiBoYXMgYmVlbiBleGVjdXRlZC5cblx0ICovXG5cdGFzeW5jIGNsZWFyRGVwdGhBc3luYygpIHtcblxuXHRcdHRoaXMuY2xlYXJBc3luYyggZmFsc2UsIHRydWUsIGZhbHNlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBc3luYyB2ZXJzaW9uIG9mIHtAbGluayBSZW5kZXJlciNjbGVhclN0ZW5jaWx9LlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY2xlYXIgb3BlcmF0aW9uIGhhcyBiZWVuIGV4ZWN1dGVkLlxuXHQgKi9cblx0YXN5bmMgY2xlYXJTdGVuY2lsQXN5bmMoKSB7XG5cblx0XHR0aGlzLmNsZWFyQXN5bmMoIGZhbHNlLCBmYWxzZSwgdHJ1ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGN1cnJlbnQgb3V0cHV0IHRvbmUgbWFwcGluZyBvZiB0aGUgcmVuZGVyZXIuIFdoZW4gYSByZW5kZXIgdGFyZ2V0IGlzIHNldCxcblx0ICogdGhlIG91dHB1dCB0b25lIG1hcHBpbmcgaXMgYWx3YXlzIGBOb1RvbmVNYXBwaW5nYC5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICovXG5cdGdldCBjdXJyZW50VG9uZU1hcHBpbmcoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc091dHB1dFRhcmdldCA/IHRoaXMudG9uZU1hcHBpbmcgOiBOb1RvbmVNYXBwaW5nO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGN1cnJlbnQgb3V0cHV0IGNvbG9yIHNwYWNlIG9mIHRoZSByZW5kZXJlci4gV2hlbiBhIHJlbmRlciB0YXJnZXQgaXMgc2V0LFxuXHQgKiB0aGUgb3V0cHV0IGNvbG9yIHNwYWNlIGlzIGFsd2F5cyBgTGluZWFyU1JHQkNvbG9yU3BhY2VgLlxuXHQgKlxuXHQgKiBAdHlwZSB7c3RyaW5nfVxuXHQgKi9cblx0Z2V0IGN1cnJlbnRDb2xvclNwYWNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNPdXRwdXRUYXJnZXQgPyB0aGlzLm91dHB1dENvbG9yU3BhY2UgOiBMaW5lYXJTUkdCQ29sb3JTcGFjZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSByZW5kZXJpbmcgc2V0dGluZ3MgYXJlIHNldCB0byBzY3JlZW4gb3V0cHV0LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY3VycmVudCByZW5kZXIgdGFyZ2V0IGlzIHRoZSBzYW1lIG9mIG91dHB1dCByZW5kZXIgdGFyZ2V0IG9yIGBudWxsYCwgb3RoZXJ3aXNlIGZhbHNlLlxuXHQgKi9cblx0Z2V0IGlzT3V0cHV0VGFyZ2V0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3JlbmRlclRhcmdldCA9PT0gdGhpcy5fb3V0cHV0UmVuZGVyVGFyZ2V0IHx8IHRoaXMuX3JlbmRlclRhcmdldCA9PT0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIGFsbCBpbnRlcm5hbCByZXNvdXJjZXMgb2YgdGhlIHJlbmRlcmVyLiBDYWxsIHRoaXMgbWV0aG9kIGlmIHRoZSByZW5kZXJlclxuXHQgKiBpcyBubyBsb25nZXIgaW4gdXNlIGJ5IHlvdXIgYXBwLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuaW5mby5kaXNwb3NlKCk7XG5cdFx0dGhpcy5iYWNrZW5kLmRpc3Bvc2UoKTtcblxuXHRcdHRoaXMuX2FuaW1hdGlvbi5kaXNwb3NlKCk7XG5cdFx0dGhpcy5fb2JqZWN0cy5kaXNwb3NlKCk7XG5cdFx0dGhpcy5fcGlwZWxpbmVzLmRpc3Bvc2UoKTtcblx0XHR0aGlzLl9ub2Rlcy5kaXNwb3NlKCk7XG5cdFx0dGhpcy5fYmluZGluZ3MuZGlzcG9zZSgpO1xuXHRcdHRoaXMuX3JlbmRlckxpc3RzLmRpc3Bvc2UoKTtcblx0XHR0aGlzLl9yZW5kZXJDb250ZXh0cy5kaXNwb3NlKCk7XG5cdFx0dGhpcy5fdGV4dHVyZXMuZGlzcG9zZSgpO1xuXG5cdFx0aWYgKCB0aGlzLl9mcmFtZUJ1ZmZlclRhcmdldCAhPT0gbnVsbCApIHRoaXMuX2ZyYW1lQnVmZmVyVGFyZ2V0LmRpc3Bvc2UoKTtcblxuXHRcdE9iamVjdC52YWx1ZXMoIHRoaXMuYmFja2VuZC50aW1lc3RhbXBRdWVyeVBvb2wgKS5mb3JFYWNoKCBxdWVyeVBvb2wgPT4ge1xuXG5cdFx0XHRpZiAoIHF1ZXJ5UG9vbCAhPT0gbnVsbCApIHF1ZXJ5UG9vbC5kaXNwb3NlKCk7XG5cblx0XHR9ICk7XG5cblx0XHR0aGlzLnNldFJlbmRlclRhcmdldCggbnVsbCApO1xuXHRcdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCggbnVsbCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gcmVuZGVyIHRhcmdldC4gQ2FsbGluZyB0aGlzIG1ldGhvZCBtZWFucyB0aGUgcmVuZGVyZXIgZG9lcyBub3Rcblx0ICogdGFyZ2V0IHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyIChtZWFuaW5nIHRoZSBjYW52YXMpIGFueW1vcmUgYnV0IGEgY3VzdG9tIGZyYW1lYnVmZmVyLlxuXHQgKiBVc2UgYG51bGxgIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byByZXNldCB0aGUgc3RhdGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P1JlbmRlclRhcmdldH0gcmVuZGVyVGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gc2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FjdGl2ZUN1YmVGYWNlPTBdIC0gVGhlIGFjdGl2ZSBjdWJlIGZhY2UuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYWN0aXZlTWlwbWFwTGV2ZWw9MF0gLSBUaGUgYWN0aXZlIG1pcG1hcCBsZXZlbC5cblx0ICovXG5cdHNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCBhY3RpdmVDdWJlRmFjZSA9IDAsIGFjdGl2ZU1pcG1hcExldmVsID0gMCApIHtcblxuXHRcdHRoaXMuX3JlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblx0XHR0aGlzLl9hY3RpdmVDdWJlRmFjZSA9IGFjdGl2ZUN1YmVGYWNlO1xuXHRcdHRoaXMuX2FjdGl2ZU1pcG1hcExldmVsID0gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHJlbmRlciB0YXJnZXQuXG5cdCAqXG5cdCAqIEByZXR1cm4gez9SZW5kZXJUYXJnZXR9IFRoZSByZW5kZXIgdGFyZ2V0LiBSZXR1cm5zIGBudWxsYCBpZiBubyByZW5kZXIgdGFyZ2V0IGlzIHNldC5cblx0ICovXG5cdGdldFJlbmRlclRhcmdldCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9yZW5kZXJUYXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBvdXRwdXQgcmVuZGVyIHRhcmdldCBmb3IgdGhlIHJlbmRlcmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gcmVuZGVyVGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gc2V0IGFzIHRoZSBvdXRwdXQgdGFyZ2V0LlxuXHQgKi9cblx0c2V0T3V0cHV0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHR0aGlzLl9vdXRwdXRSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IG91dHB1dCB0YXJnZXQuXG5cdCAqXG5cdCAqIEByZXR1cm4gez9SZW5kZXJUYXJnZXR9IFRoZSBjdXJyZW50IG91dHB1dCByZW5kZXIgdGFyZ2V0LiBSZXR1cm5zIGBudWxsYCBpZiBubyBvdXRwdXQgdGFyZ2V0IGlzIHNldC5cblx0ICovXG5cdGdldE91dHB1dFJlbmRlclRhcmdldCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9vdXRwdXRSZW5kZXJUYXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxsYmFjayBmb3Ige0BsaW5rIFJlbmRlcmVyI3NldFJlbmRlck9iamVjdEZ1bmN0aW9ufS5cblx0ICpcblx0ICogQGNhbGxiYWNrIHJlbmRlck9iamVjdEZ1bmN0aW9uXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lIHRoZSAzRCBvYmplY3QgYmVsb25ncyB0by5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhlIG9iamVjdCBzaG91bGQgYmUgcmVuZGVyZWQgd2l0aC5cblx0ICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnkgLSBUaGUgb2JqZWN0J3MgZ2VvbWV0cnkuXG5cdCAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdGVyaWFsIC0gVGhlIG9iamVjdCdzIG1hdGVyaWFsLlxuXHQgKiBAcGFyYW0gez9PYmplY3R9IGdyb3VwIC0gT25seSByZWxldmFudCBmb3Igb2JqZWN0cyB1c2luZyBtdWx0aXBsZSBtYXRlcmlhbHMuIFRoaXMgcmVwcmVzZW50cyBhIGdyb3VwIGVudHJ5IGZyb20gdGhlIHJlc3BlY3RpdmUgYEJ1ZmZlckdlb21ldHJ5YC5cblx0ICogQHBhcmFtIHtMaWdodHNOb2RlfSBsaWdodHNOb2RlIC0gVGhlIGN1cnJlbnQgbGlnaHRzIG5vZGUuXG5cdCAqIEBwYXJhbSB7Q2xpcHBpbmdDb250ZXh0fSBjbGlwcGluZ0NvbnRleHQgLSBUaGUgY2xpcHBpbmcgY29udGV4dC5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbcGFzc0lkPW51bGxdIC0gQW4gb3B0aW9uYWwgSUQgZm9yIGlkZW50aWZ5aW5nIHRoZSBwYXNzLlxuXHQgKi9cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdCBmdW5jdGlvbi4gQ2FsbGluZyB0aGlzIG1ldGhvZCBvdmVyd3JpdGVzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uXG5cdCAqIHdoaWNoIGlzIHtAbGluayBSZW5kZXJlciNyZW5kZXJPYmplY3R9LiBEZWZpbmluZyBhIGN1c3RvbSBmdW5jdGlvbiBjYW4gYmUgdXNlZnVsXG5cdCAqIGlmIHlvdSB3YW50IHRvIG1vZGlmeSB0aGUgd2F5IG9iamVjdHMgYXJlIHJlbmRlcmVkLiBGb3IgZXhhbXBsZSB5b3UgY2FuIGRlZmluZSB0aGluZ3MgbGlrZSBcImV2ZXJ5XG5cdCAqIG9iamVjdCB0aGF0IGhhcyBtYXRlcmlhbCBvZiBhIGNlcnRhaW4gdHlwZSBzaG91bGQgcGVyZm9ybSBhIHByZS1wYXNzIHdpdGggYSBzcGVjaWFsIG92ZXJ3cml0ZSBtYXRlcmlhbFwiLlxuXHQgKiBUaGUgY3VzdG9tIGZ1bmN0aW9uIG11c3QgYWx3YXlzIGNhbGwgYHJlbmRlck9iamVjdCgpYCBpbiBpdHMgaW1wbGVtZW50YXRpb24uXG5cdCAqXG5cdCAqIFVzZSBgbnVsbGAgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHJlc2V0IHRoZSBzdGF0ZS5cblx0ICpcblx0ICogQHBhcmFtIHs/cmVuZGVyT2JqZWN0RnVuY3Rpb259IHJlbmRlck9iamVjdEZ1bmN0aW9uIC0gVGhlIHJlbmRlciBvYmplY3QgZnVuY3Rpb24uXG5cdCAqL1xuXHRzZXRSZW5kZXJPYmplY3RGdW5jdGlvbiggcmVuZGVyT2JqZWN0RnVuY3Rpb24gKSB7XG5cblx0XHR0aGlzLl9yZW5kZXJPYmplY3RGdW5jdGlvbiA9IHJlbmRlck9iamVjdEZ1bmN0aW9uO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY3VycmVudCByZW5kZXIgb2JqZWN0IGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHs/RnVuY3Rpb259IFRoZSBjdXJyZW50IHJlbmRlciBvYmplY3QgZnVuY3Rpb24uIFJldHVybnMgYG51bGxgIGlmIG5vIGZ1bmN0aW9uIGlzIHNldC5cblx0ICovXG5cdGdldFJlbmRlck9iamVjdEZ1bmN0aW9uKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3JlbmRlck9iamVjdEZ1bmN0aW9uO1xuXG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZSBhIHNpbmdsZSBvciBhbiBhcnJheSBvZiBjb21wdXRlIG5vZGVzLiBUaGlzIG1ldGhvZCBjYW4gb25seSBiZSBjYWxsZWRcblx0ICogaWYgdGhlIHJlbmRlcmVyIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV8QXJyYXk8Tm9kZT59IGNvbXB1dGVOb2RlcyAtIFRoZSBjb21wdXRlIG5vZGUocykuXG5cdCAqIEByZXR1cm4gez9Qcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlIHdoZW4gdGhlIGNvbXB1dGUgaGFzIGZpbmlzaGVkLiBPbmx5IHJldHVybmVkIHdoZW4gdGhlIHJlbmRlcmVyIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC5cblx0ICovXG5cdGNvbXB1dGUoIGNvbXB1dGVOb2RlcyApIHtcblxuXHRcdGlmICggdGhpcy5faXNEZXZpY2VMb3N0ID09PSB0cnVlICkgcmV0dXJuO1xuXG5cdFx0aWYgKCB0aGlzLl9pbml0aWFsaXplZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJlbmRlcmVyOiAuY29tcHV0ZSgpIGNhbGxlZCBiZWZvcmUgdGhlIGJhY2tlbmQgaXMgaW5pdGlhbGl6ZWQuIFRyeSB1c2luZyAuY29tcHV0ZUFzeW5jKCkgaW5zdGVhZC4nICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmNvbXB1dGVBc3luYyggY29tcHV0ZU5vZGVzICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3Qgbm9kZUZyYW1lID0gdGhpcy5fbm9kZXMubm9kZUZyYW1lO1xuXG5cdFx0Y29uc3QgcHJldmlvdXNSZW5kZXJJZCA9IG5vZGVGcmFtZS5yZW5kZXJJZDtcblxuXHRcdC8vXG5cblx0XHR0aGlzLmluZm8uY2FsbHMgKys7XG5cdFx0dGhpcy5pbmZvLmNvbXB1dGUuY2FsbHMgKys7XG5cdFx0dGhpcy5pbmZvLmNvbXB1dGUuZnJhbWVDYWxscyArKztcblxuXHRcdG5vZGVGcmFtZS5yZW5kZXJJZCA9IHRoaXMuaW5mby5jYWxscztcblxuXHRcdC8vXG5cblx0XHRjb25zdCBiYWNrZW5kID0gdGhpcy5iYWNrZW5kO1xuXHRcdGNvbnN0IHBpcGVsaW5lcyA9IHRoaXMuX3BpcGVsaW5lcztcblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXHRcdGNvbnN0IG5vZGVzID0gdGhpcy5fbm9kZXM7XG5cblx0XHRjb25zdCBjb21wdXRlTGlzdCA9IEFycmF5LmlzQXJyYXkoIGNvbXB1dGVOb2RlcyApID8gY29tcHV0ZU5vZGVzIDogWyBjb21wdXRlTm9kZXMgXTtcblxuXHRcdGlmICggY29tcHV0ZUxpc3RbIDAgXSA9PT0gdW5kZWZpbmVkIHx8IGNvbXB1dGVMaXN0WyAwIF0uaXNDb21wdXRlTm9kZSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuUmVuZGVyZXI6IC5jb21wdXRlKCkgZXhwZWN0cyBhIENvbXB1dGVOb2RlLicgKTtcblxuXHRcdH1cblxuXHRcdGJhY2tlbmQuYmVnaW5Db21wdXRlKCBjb21wdXRlTm9kZXMgKTtcblxuXHRcdGZvciAoIGNvbnN0IGNvbXB1dGVOb2RlIG9mIGNvbXB1dGVMaXN0ICkge1xuXG5cdFx0XHQvLyBvbkluaXRcblxuXHRcdFx0aWYgKCBwaXBlbGluZXMuaGFzKCBjb21wdXRlTm9kZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zdCBkaXNwb3NlID0gKCkgPT4ge1xuXG5cdFx0XHRcdFx0Y29tcHV0ZU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBkaXNwb3NlICk7XG5cblx0XHRcdFx0XHRwaXBlbGluZXMuZGVsZXRlKCBjb21wdXRlTm9kZSApO1xuXHRcdFx0XHRcdGJpbmRpbmdzLmRlbGV0ZSggY29tcHV0ZU5vZGUgKTtcblx0XHRcdFx0XHRub2Rlcy5kZWxldGUoIGNvbXB1dGVOb2RlICk7XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRjb21wdXRlTm9kZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2UgKTtcblxuXHRcdFx0XHQvL1xuXG5cdFx0XHRcdGNvbnN0IG9uSW5pdEZuID0gY29tcHV0ZU5vZGUub25Jbml0RnVuY3Rpb247XG5cblx0XHRcdFx0aWYgKCBvbkluaXRGbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdG9uSW5pdEZuLmNhbGwoIGNvbXB1dGVOb2RlLCB7IHJlbmRlcmVyOiB0aGlzIH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0bm9kZXMudXBkYXRlRm9yQ29tcHV0ZSggY29tcHV0ZU5vZGUgKTtcblx0XHRcdGJpbmRpbmdzLnVwZGF0ZUZvckNvbXB1dGUoIGNvbXB1dGVOb2RlICk7XG5cblx0XHRcdGNvbnN0IGNvbXB1dGVCaW5kaW5ncyA9IGJpbmRpbmdzLmdldEZvckNvbXB1dGUoIGNvbXB1dGVOb2RlICk7XG5cdFx0XHRjb25zdCBjb21wdXRlUGlwZWxpbmUgPSBwaXBlbGluZXMuZ2V0Rm9yQ29tcHV0ZSggY29tcHV0ZU5vZGUsIGNvbXB1dGVCaW5kaW5ncyApO1xuXG5cdFx0XHRiYWNrZW5kLmNvbXB1dGUoIGNvbXB1dGVOb2RlcywgY29tcHV0ZU5vZGUsIGNvbXB1dGVCaW5kaW5ncywgY29tcHV0ZVBpcGVsaW5lICk7XG5cblx0XHR9XG5cblx0XHRiYWNrZW5kLmZpbmlzaENvbXB1dGUoIGNvbXB1dGVOb2RlcyApO1xuXG5cdFx0Ly9cblxuXHRcdG5vZGVGcmFtZS5yZW5kZXJJZCA9IHByZXZpb3VzUmVuZGVySWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlIGEgc2luZ2xlIG9yIGFuIGFycmF5IG9mIGNvbXB1dGUgbm9kZXMuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcGFyYW0ge05vZGV8QXJyYXk8Tm9kZT59IGNvbXB1dGVOb2RlcyAtIFRoZSBjb21wdXRlIG5vZGUocykuXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmUgd2hlbiB0aGUgY29tcHV0ZSBoYXMgZmluaXNoZWQuXG5cdCAqL1xuXHRhc3luYyBjb21wdXRlQXN5bmMoIGNvbXB1dGVOb2RlcyApIHtcblxuXHRcdGlmICggdGhpcy5faW5pdGlhbGl6ZWQgPT09IGZhbHNlICkgYXdhaXQgdGhpcy5pbml0KCk7XG5cblx0XHR0aGlzLmNvbXB1dGUoIGNvbXB1dGVOb2RlcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBmZWF0dXJlIGlzIHN1cHBvcnRlZCBieSB0aGUgc2VsZWN0ZWQgYmFja2VuZC5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGZlYXR1cmUncyBuYW1lLlxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgYm9vbCB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBmZWF0dXJlIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqL1xuXHRhc3luYyBoYXNGZWF0dXJlQXN5bmMoIG5hbWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2luaXRpYWxpemVkID09PSBmYWxzZSApIGF3YWl0IHRoaXMuaW5pdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuYmFja2VuZC5oYXNGZWF0dXJlKCBuYW1lICk7XG5cblx0fVxuXG5cdGFzeW5jIHJlc29sdmVUaW1lc3RhbXBzQXN5bmMoIHR5cGUgPSAncmVuZGVyJyApIHtcblxuXHRcdGlmICggdGhpcy5faW5pdGlhbGl6ZWQgPT09IGZhbHNlICkgYXdhaXQgdGhpcy5pbml0KCk7XG5cblx0XHRyZXR1cm4gdGhpcy5iYWNrZW5kLnJlc29sdmVUaW1lc3RhbXBzQXN5bmMoIHR5cGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZmVhdHVyZSBpcyBzdXBwb3J0ZWQgYnkgdGhlIHNlbGVjdGVkIGJhY2tlbmQuIElmIHRoZVxuXHQgKiByZW5kZXJlciBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQsIHRoaXMgbWV0aG9kIGFsd2F5cyByZXR1cm5zIGBmYWxzZWAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGZlYXR1cmUncyBuYW1lLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBmZWF0dXJlIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqL1xuXHRoYXNGZWF0dXJlKCBuYW1lICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pbml0aWFsaXplZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJlbmRlcmVyOiAuaGFzRmVhdHVyZSgpIGNhbGxlZCBiZWZvcmUgdGhlIGJhY2tlbmQgaXMgaW5pdGlhbGl6ZWQuIFRyeSB1c2luZyAuaGFzRmVhdHVyZUFzeW5jKCkgaW5zdGVhZC4nICk7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmJhY2tlbmQuaGFzRmVhdHVyZSggbmFtZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgd2hlbiB0aGUgcmVuZGVyZXIgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlbmRlcmVyIGhhcyBiZWVuIGluaXRpYWxpemVkIG9yIG5vdC5cblx0ICovXG5cdGhhc0luaXRpYWxpemVkKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2luaXRpYWxpemVkO1xuXG5cdH1cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGdpdmVuIHRleHR1cmVzLiBVc2VmdWwgZm9yIHByZWxvYWRpbmcgYSB0ZXh0dXJlIHJhdGhlciB0aGFuIHdhaXRpbmcgdW50aWwgZmlyc3QgcmVuZGVyXG5cdCAqICh3aGljaCBjYW4gY2F1c2Ugbm90aWNlYWJsZSBsYWdzIGR1ZSB0byBkZWNvZGUgYW5kIEdQVSB1cGxvYWQgb3ZlcmhlYWQpLlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHRleHR1cmUgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG5cdCAqL1xuXHRhc3luYyBpbml0VGV4dHVyZUFzeW5jKCB0ZXh0dXJlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pbml0aWFsaXplZCA9PT0gZmFsc2UgKSBhd2FpdCB0aGlzLmluaXQoKTtcblxuXHRcdHRoaXMuX3RleHR1cmVzLnVwZGF0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBnaXZlbiB0ZXh0dXJlLiBVc2VmdWwgZm9yIHByZWxvYWRpbmcgYSB0ZXh0dXJlIHJhdGhlciB0aGFuIHdhaXRpbmcgdW50aWwgZmlyc3QgcmVuZGVyXG5cdCAqICh3aGljaCBjYW4gY2F1c2Ugbm90aWNlYWJsZSBsYWdzIGR1ZSB0byBkZWNvZGUgYW5kIEdQVSB1cGxvYWQgb3ZlcmhlYWQpLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYW4gb25seSBiZSB1c2VkIGlmIHRoZSByZW5kZXJlciBoYXMgYmVlbiBpbml0aWFsaXplZC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqL1xuXHRpbml0VGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGlmICggdGhpcy5faW5pdGlhbGl6ZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SZW5kZXJlcjogLmluaXRUZXh0dXJlKCkgY2FsbGVkIGJlZm9yZSB0aGUgYmFja2VuZCBpcyBpbml0aWFsaXplZC4gVHJ5IHVzaW5nIC5pbml0VGV4dHVyZUFzeW5jKCkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl90ZXh0dXJlcy51cGRhdGVUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIGN1cnJlbnQgYm91bmQgZnJhbWVidWZmZXIgaW50byB0aGUgZ2l2ZW4gdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtGcmFtZWJ1ZmZlclRleHR1cmV9IGZyYW1lYnVmZmVyVGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0gez9WZWN0b3IyfFZlY3RvcjR9IFtyZWN0YW5nbGU9bnVsbF0gLSBBIHR3byBvciBmb3VyIGRpbWVuc2lvbmFsIHZlY3RvciB0aGF0IGRlZmluZXMgdGhlIHJlY3Rhbmd1bGFyIHBvcnRpb24gb2YgdGhlIGZyYW1lYnVmZmVyIHRoYXQgc2hvdWxkIGJlIGNvcGllZC5cblx0ICovXG5cdGNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSggZnJhbWVidWZmZXJUZXh0dXJlLCByZWN0YW5nbGUgPSBudWxsICkge1xuXG5cdFx0aWYgKCByZWN0YW5nbGUgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggcmVjdGFuZ2xlLmlzVmVjdG9yMiApIHtcblxuXHRcdFx0XHRyZWN0YW5nbGUgPSBfdmVjdG9yNC5zZXQoIHJlY3RhbmdsZS54LCByZWN0YW5nbGUueSwgZnJhbWVidWZmZXJUZXh0dXJlLmltYWdlLndpZHRoLCBmcmFtZWJ1ZmZlclRleHR1cmUuaW1hZ2UuaGVpZ2h0ICkuZmxvb3IoKTtcblxuXHRcdFx0fSBlbHNlIGlmICggcmVjdGFuZ2xlLmlzVmVjdG9yNCApIHtcblxuXHRcdFx0XHRyZWN0YW5nbGUgPSBfdmVjdG9yNC5jb3B5KCByZWN0YW5nbGUgKS5mbG9vcigpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5SZW5kZXJlci5jb3B5RnJhbWVidWZmZXJUb1RleHR1cmU6IEludmFsaWQgcmVjdGFuZ2xlLicgKTtcblxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlY3RhbmdsZSA9IF92ZWN0b3I0LnNldCggMCwgMCwgZnJhbWVidWZmZXJUZXh0dXJlLmltYWdlLndpZHRoLCBmcmFtZWJ1ZmZlclRleHR1cmUuaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0bGV0IHJlbmRlckNvbnRleHQgPSB0aGlzLl9jdXJyZW50UmVuZGVyQ29udGV4dDtcblx0XHRsZXQgcmVuZGVyVGFyZ2V0O1xuXG5cdFx0aWYgKCByZW5kZXJDb250ZXh0ICE9PSBudWxsICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQgPSByZW5kZXJDb250ZXh0LnJlbmRlclRhcmdldDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlclRhcmdldCA9IHRoaXMuX3JlbmRlclRhcmdldCB8fCB0aGlzLl9nZXRGcmFtZUJ1ZmZlclRhcmdldCgpO1xuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLl90ZXh0dXJlcy51cGRhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdHJlbmRlckNvbnRleHQgPSB0aGlzLl90ZXh0dXJlcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dGhpcy5fdGV4dHVyZXMudXBkYXRlVGV4dHVyZSggZnJhbWVidWZmZXJUZXh0dXJlLCB7IHJlbmRlclRhcmdldCB9ICk7XG5cblx0XHR0aGlzLmJhY2tlbmQuY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlKCBmcmFtZWJ1ZmZlclRleHR1cmUsIHJlbmRlckNvbnRleHQsIHJlY3RhbmdsZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIGRhdGEgb2YgdGhlIGdpdmVuIHNvdXJjZSB0ZXh0dXJlIGludG8gYSBkZXN0aW5hdGlvbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHNyY1RleHR1cmUgLSBUaGUgc291cmNlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gZHN0VGV4dHVyZSAtIFRoZSBkZXN0aW5hdGlvbiB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge0JveDJ8Qm94M30gW3NyY1JlZ2lvbj1udWxsXSAtIEEgYm91bmRpbmcgYm94IHdoaWNoIGRlc2NyaWJlcyB0aGUgc291cmNlIHJlZ2lvbi4gQ2FuIGJlIHR3byBvciB0aHJlZS1kaW1lbnNpb25hbC5cblx0ICogQHBhcmFtIHtWZWN0b3IyfFZlY3RvcjN9IFtkc3RQb3NpdGlvbj1udWxsXSAtIEEgdmVjdG9yIHRoYXQgcmVwcmVzZW50cyB0aGUgb3JpZ2luIG9mIHRoZSBkZXN0aW5hdGlvbiByZWdpb24uIENhbiBiZSB0d28gb3IgdGhyZWUtZGltZW5zaW9uYWwuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbc3JjTGV2ZWw9MF0gLSBUaGUgc291cmNlIG1pcCBsZXZlbCB0byBjb3B5IGZyb20uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZHN0TGV2ZWw9MF0gLSBUaGUgZGVzdGluYXRpb24gbWlwIGxldmVsIHRvIGNvcHkgdG8uXG5cdCAqL1xuXHRjb3B5VGV4dHVyZVRvVGV4dHVyZSggc3JjVGV4dHVyZSwgZHN0VGV4dHVyZSwgc3JjUmVnaW9uID0gbnVsbCwgZHN0UG9zaXRpb24gPSBudWxsLCBzcmNMZXZlbCA9IDAsIGRzdExldmVsID0gMCApIHtcblxuXHRcdHRoaXMuX3RleHR1cmVzLnVwZGF0ZVRleHR1cmUoIHNyY1RleHR1cmUgKTtcblx0XHR0aGlzLl90ZXh0dXJlcy51cGRhdGVUZXh0dXJlKCBkc3RUZXh0dXJlICk7XG5cblx0XHR0aGlzLmJhY2tlbmQuY29weVRleHR1cmVUb1RleHR1cmUoIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIHNyY1JlZ2lvbiwgZHN0UG9zaXRpb24sIHNyY0xldmVsLCBkc3RMZXZlbCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVhZHMgcGl4ZWwgZGF0YSBmcm9tIHRoZSBnaXZlbiByZW5kZXIgdGFyZ2V0LlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHBhcmFtIHtSZW5kZXJUYXJnZXR9IHJlbmRlclRhcmdldCAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIHJlYWQgZnJvbS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgYHhgIGNvb3JkaW5hdGUgb2YgdGhlIGNvcHkgcmVnaW9uJ3Mgb3JpZ2luLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBgeWAgY29vcmRpbmF0ZSBvZiB0aGUgY29weSByZWdpb24ncyBvcmlnaW4uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgY29weSByZWdpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSBjb3B5IHJlZ2lvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0ZXh0dXJlSW5kZXg9MF0gLSBUaGUgdGV4dHVyZSBpbmRleCBvZiBhIE1SVCByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2ZhY2VJbmRleD0wXSAtIFRoZSBhY3RpdmUgY3ViZSBmYWNlIGluZGV4LlxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPFR5cGVkQXJyYXk+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSByZWFkIGhhcyBiZWVuIGZpbmlzaGVkLiBUaGUgcmVzb2x2ZSBwcm92aWRlcyB0aGUgcmVhZCBkYXRhIGFzIGEgdHlwZWQgYXJyYXkuXG5cdCAqL1xuXHRhc3luYyByZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzQXN5bmMoIHJlbmRlclRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgdGV4dHVyZUluZGV4ID0gMCwgZmFjZUluZGV4ID0gMCApIHtcblxuXHRcdHJldHVybiB0aGlzLmJhY2tlbmQuY29weVRleHR1cmVUb0J1ZmZlciggcmVuZGVyVGFyZ2V0LnRleHR1cmVzWyB0ZXh0dXJlSW5kZXggXSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgZmFjZUluZGV4ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbmFseXplcyB0aGUgZ2l2ZW4gM0Qgb2JqZWN0J3MgaGllcmFyY2h5IGFuZCBidWlsZHMgcmVuZGVyIGxpc3RzIGZyb20gdGhlXG5cdCAqIHByb2Nlc3NlZCBoaWVyYXJjaHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QgdG8gcHJvY2VzcyAodXN1YWxseSBhIHNjZW5lKS5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhlIG9iamVjdCBpcyByZW5kZXJlZCB3aXRoLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZ3JvdXBPcmRlciAtIFRoZSBncm91cCBvcmRlciBpcyBkZXJpdmVkIGZyb20gdGhlIGByZW5kZXJPcmRlcmAgb2YgZ3JvdXBzIGFuZCBpcyB1c2VkIHRvIGdyb3VwIDNEIG9iamVjdHMgd2l0aGluIGdyb3Vwcy5cblx0ICogQHBhcmFtIHtSZW5kZXJMaXN0fSByZW5kZXJMaXN0IC0gVGhlIGN1cnJlbnQgcmVuZGVyIGxpc3QuXG5cdCAqIEBwYXJhbSB7Q2xpcHBpbmdDb250ZXh0fSBjbGlwcGluZ0NvbnRleHQgLSBUaGUgY3VycmVudCBjbGlwcGluZyBjb250ZXh0LlxuXHQgKi9cblx0X3Byb2plY3RPYmplY3QoIG9iamVjdCwgY2FtZXJhLCBncm91cE9yZGVyLCByZW5kZXJMaXN0LCBjbGlwcGluZ0NvbnRleHQgKSB7XG5cblx0XHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGNvbnN0IHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdGlmICggdmlzaWJsZSApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNHcm91cCApIHtcblxuXHRcdFx0XHRncm91cE9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmlzQ2xpcHBpbmdHcm91cCAmJiBvYmplY3QuZW5hYmxlZCApIGNsaXBwaW5nQ29udGV4dCA9IGNsaXBwaW5nQ29udGV4dC5nZXRHcm91cENvbnRleHQoIG9iamVjdCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMT0QgKSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuYXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIG9iamVjdC51cGRhdGUoIGNhbWVyYSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaWdodCApIHtcblxuXHRcdFx0XHRyZW5kZXJMaXN0LnB1c2hMaWdodCggb2JqZWN0ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1Nwcml0ZSApIHtcblxuXHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c1Nwcml0ZSggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuc29ydE9iamVjdHMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3I0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkICkuYXBwbHlNYXRyaXg0KCBfcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29uc3QgeyBnZW9tZXRyeSwgbWF0ZXJpYWwgfSA9IG9iamVjdDtcblxuXHRcdFx0XHRcdGlmICggbWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjQueiwgbnVsbCwgY2xpcHBpbmdDb250ZXh0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lTG9vcCApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUmVuZGVyZXI6IE9iamVjdHMgb2YgdHlwZSBUSFJFRS5MaW5lTG9vcCBhcmUgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVzZSBUSFJFRS5MaW5lIG9yIFRIUkVFLkxpbmVTZWdtZW50cy4nICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc01lc2ggfHwgb2JqZWN0LmlzTGluZSB8fCBvYmplY3QuaXNQb2ludHMgKSB7XG5cblx0XHRcdFx0aWYgKCAhIG9iamVjdC5mcnVzdHVtQ3VsbGVkIHx8IF9mcnVzdHVtLmludGVyc2VjdHNPYmplY3QoIG9iamVjdCApICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgeyBnZW9tZXRyeSwgbWF0ZXJpYWwgfSA9IG9iamVjdDtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5zb3J0T2JqZWN0cyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yNFxuXHRcdFx0XHRcdFx0XHQuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUuY2VudGVyIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0cmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBncm91cE1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yNC56LCBncm91cCwgY2xpcHBpbmdDb250ZXh0ICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRyZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yNC56LCBudWxsLCBjbGlwcGluZ0NvbnRleHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0LmlzQnVuZGxlR3JvdXAgPT09IHRydWUgJiYgdGhpcy5iYWNrZW5kLmJlZ2luQnVuZGxlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGJhc2VSZW5kZXJMaXN0ID0gcmVuZGVyTGlzdDtcblxuXHRcdFx0Ly8gcmVwbGFjZSByZW5kZXIgbGlzdFxuXHRcdFx0cmVuZGVyTGlzdCA9IHRoaXMuX3JlbmRlckxpc3RzLmdldCggb2JqZWN0LCBjYW1lcmEgKTtcblxuXHRcdFx0cmVuZGVyTGlzdC5iZWdpbigpO1xuXG5cdFx0XHRiYXNlUmVuZGVyTGlzdC5wdXNoQnVuZGxlKCB7XG5cdFx0XHRcdGJ1bmRsZUdyb3VwOiBvYmplY3QsXG5cdFx0XHRcdGNhbWVyYSxcblx0XHRcdFx0cmVuZGVyTGlzdCxcblx0XHRcdH0gKTtcblxuXHRcdFx0cmVuZGVyTGlzdC5maW5pc2goKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5fcHJvamVjdE9iamVjdCggY2hpbGRyZW5bIGkgXSwgY2FtZXJhLCBncm91cE9yZGVyLCByZW5kZXJMaXN0LCBjbGlwcGluZ0NvbnRleHQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbmRlcnMgdGhlIGdpdmVuIHJlbmRlciBidW5kbGVzLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IGJ1bmRsZXMgLSBBcnJheSB3aXRoIHJlbmRlciBidW5kbGUgZGF0YS5cblx0ICogQHBhcmFtIHtTY2VuZX0gc2NlbmVSZWYgLSBUaGUgc2NlbmUgdGhlIHJlbmRlciBidW5kbGVzIGJlbG9uZyB0by5cblx0ICogQHBhcmFtIHtMaWdodHNOb2RlfSBsaWdodHNOb2RlIC0gVGhlIGN1cnJlbnQgbGlnaHRzIG5vZGUuXG5cdCAqL1xuXHRfcmVuZGVyQnVuZGxlcyggYnVuZGxlcywgc2NlbmVSZWYsIGxpZ2h0c05vZGUgKSB7XG5cblx0XHRmb3IgKCBjb25zdCBidW5kbGUgb2YgYnVuZGxlcyApIHtcblxuXHRcdFx0dGhpcy5fcmVuZGVyQnVuZGxlKCBidW5kbGUsIHNjZW5lUmVmLCBsaWdodHNOb2RlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXJzIHRoZSB0cmFuc3BhcmVudCBvYmplY3RzIGZyb20gdGhlIGdpdmVuIHJlbmRlciBsaXN0cy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSByZW5kZXJMaXN0IC0gVGhlIHRyYW5zcGFyZW50IHJlbmRlciBsaXN0LlxuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IGRvdWJsZVBhc3NMaXN0IC0gVGhlIGxpc3Qgb2YgdHJhbnNwYXJlbnQgb2JqZWN0cyB3aGljaCByZXF1aXJlIGEgZG91YmxlIHBhc3MgKGUuZy4gYmVjYXVzZSBvZiB0cmFuc21pc3Npb24pLlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGUgcmVuZGVyIGxpc3Qgc2hvdWxkIGJlIHJlbmRlcmVkIHdpdGguXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lIHRoZSByZW5kZXIgbGlzdCBiZWxvbmdzIHRvLlxuXHQgKiBAcGFyYW0ge0xpZ2h0c05vZGV9IGxpZ2h0c05vZGUgLSBUaGUgY3VycmVudCBsaWdodHMgbm9kZS5cblx0ICovXG5cdF9yZW5kZXJUcmFuc3BhcmVudHMoIHJlbmRlckxpc3QsIGRvdWJsZVBhc3NMaXN0LCBjYW1lcmEsIHNjZW5lLCBsaWdodHNOb2RlICkge1xuXG5cdFx0aWYgKCBkb3VibGVQYXNzTGlzdC5sZW5ndGggPiAwICkge1xuXG5cdFx0XHQvLyByZW5kZXIgYmFjayBzaWRlXG5cblx0XHRcdGZvciAoIGNvbnN0IHsgbWF0ZXJpYWwgfSBvZiBkb3VibGVQYXNzTGlzdCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5zaWRlID0gQmFja1NpZGU7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fcmVuZGVyT2JqZWN0cyggZG91YmxlUGFzc0xpc3QsIGNhbWVyYSwgc2NlbmUsIGxpZ2h0c05vZGUsICdiYWNrU2lkZScgKTtcblxuXHRcdFx0Ly8gcmVuZGVyIGZyb250IHNpZGVcblxuXHRcdFx0Zm9yICggY29uc3QgeyBtYXRlcmlhbCB9IG9mIGRvdWJsZVBhc3NMaXN0ICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBGcm9udFNpZGU7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fcmVuZGVyT2JqZWN0cyggcmVuZGVyTGlzdCwgY2FtZXJhLCBzY2VuZSwgbGlnaHRzTm9kZSApO1xuXG5cdFx0XHQvLyByZXN0b3JlXG5cblx0XHRcdGZvciAoIGNvbnN0IHsgbWF0ZXJpYWwgfSBvZiBkb3VibGVQYXNzTGlzdCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5zaWRlID0gRG91YmxlU2lkZTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5fcmVuZGVyT2JqZWN0cyggcmVuZGVyTGlzdCwgY2FtZXJhLCBzY2VuZSwgbGlnaHRzTm9kZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmVuZGVycyB0aGUgb2JqZWN0cyBmcm9tIHRoZSBnaXZlbiByZW5kZXIgbGlzdC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSByZW5kZXJMaXN0IC0gVGhlIHJlbmRlciBsaXN0LlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGUgcmVuZGVyIGxpc3Qgc2hvdWxkIGJlIHJlbmRlcmVkIHdpdGguXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lIHRoZSByZW5kZXIgbGlzdCBiZWxvbmdzIHRvLlxuXHQgKiBAcGFyYW0ge0xpZ2h0c05vZGV9IGxpZ2h0c05vZGUgLSBUaGUgY3VycmVudCBsaWdodHMgbm9kZS5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbcGFzc0lkPW51bGxdIC0gQW4gb3B0aW9uYWwgSUQgZm9yIGlkZW50aWZ5aW5nIHRoZSBwYXNzLlxuXHQgKi9cblx0X3JlbmRlck9iamVjdHMoIHJlbmRlckxpc3QsIGNhbWVyYSwgc2NlbmUsIGxpZ2h0c05vZGUsIHBhc3NJZCA9IG51bGwgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgeyBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAsIGNsaXBwaW5nQ29udGV4dCB9ID0gcmVuZGVyTGlzdFsgaSBdO1xuXG5cdFx0XHR0aGlzLl9jdXJyZW50UmVuZGVyT2JqZWN0RnVuY3Rpb24oIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCwgbGlnaHRzTm9kZSwgY2xpcHBpbmdDb250ZXh0LCBwYXNzSWQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHJlcHJlc2VudHMgdGhlIGRlZmF1bHQgcmVuZGVyIG9iamVjdCBmdW5jdGlvbiB0aGF0IG1hbmFnZXMgdGhlIHJlbmRlciBsaWZlY3ljbGVcblx0ICogb2YgdGhlIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBUaGUgc2NlbmUgdGhlIDNEIG9iamVjdCBiZWxvbmdzIHRvLlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGUgb2JqZWN0IHNob3VsZCBiZSByZW5kZXJlZCB3aXRoLlxuXHQgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeSAtIFRoZSBvYmplY3QncyBnZW9tZXRyeS5cblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgb2JqZWN0J3MgbWF0ZXJpYWwuXG5cdCAqIEBwYXJhbSB7P09iamVjdH0gZ3JvdXAgLSBPbmx5IHJlbGV2YW50IGZvciBvYmplY3RzIHVzaW5nIG11bHRpcGxlIG1hdGVyaWFscy4gVGhpcyByZXByZXNlbnRzIGEgZ3JvdXAgZW50cnkgZnJvbSB0aGUgcmVzcGVjdGl2ZSBgQnVmZmVyR2VvbWV0cnlgLlxuXHQgKiBAcGFyYW0ge0xpZ2h0c05vZGV9IGxpZ2h0c05vZGUgLSBUaGUgY3VycmVudCBsaWdodHMgbm9kZS5cblx0ICogQHBhcmFtIHs/Q2xpcHBpbmdDb250ZXh0fSBjbGlwcGluZ0NvbnRleHQgLSBUaGUgY2xpcHBpbmcgY29udGV4dC5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbcGFzc0lkPW51bGxdIC0gQW4gb3B0aW9uYWwgSUQgZm9yIGlkZW50aWZ5aW5nIHRoZSBwYXNzLlxuXHQgKi9cblx0cmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAsIGxpZ2h0c05vZGUsIGNsaXBwaW5nQ29udGV4dCA9IG51bGwsIHBhc3NJZCA9IG51bGwgKSB7XG5cblx0XHRsZXQgb3ZlcnJpZGVQb3NpdGlvbk5vZGU7XG5cdFx0bGV0IG92ZXJyaWRlQ29sb3JOb2RlO1xuXHRcdGxldCBvdmVycmlkZURlcHRoTm9kZTtcblxuXHRcdC8vXG5cblx0XHRvYmplY3Qub25CZWZvcmVSZW5kZXIoIHRoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdC8vXG5cblx0XHRpZiAoIHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWwgIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IG92ZXJyaWRlTWF0ZXJpYWwgPSBzY2VuZS5vdmVycmlkZU1hdGVyaWFsO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnBvc2l0aW9uTm9kZSAmJiBtYXRlcmlhbC5wb3NpdGlvbk5vZGUuaXNOb2RlICkge1xuXG5cdFx0XHRcdG92ZXJyaWRlUG9zaXRpb25Ob2RlID0gb3ZlcnJpZGVNYXRlcmlhbC5wb3NpdGlvbk5vZGU7XG5cdFx0XHRcdG92ZXJyaWRlTWF0ZXJpYWwucG9zaXRpb25Ob2RlID0gbWF0ZXJpYWwucG9zaXRpb25Ob2RlO1xuXG5cdFx0XHR9XG5cblx0XHRcdG92ZXJyaWRlTWF0ZXJpYWwuYWxwaGFUZXN0ID0gbWF0ZXJpYWwuYWxwaGFUZXN0O1xuXHRcdFx0b3ZlcnJpZGVNYXRlcmlhbC5hbHBoYU1hcCA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXHRcdFx0b3ZlcnJpZGVNYXRlcmlhbC50cmFuc3BhcmVudCA9IG1hdGVyaWFsLnRyYW5zcGFyZW50IHx8IG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDA7XG5cblx0XHRcdGlmICggb3ZlcnJpZGVNYXRlcmlhbC5pc1NoYWRvd1Bhc3NNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRvdmVycmlkZU1hdGVyaWFsLnNpZGUgPSBtYXRlcmlhbC5zaGFkb3dTaWRlID09PSBudWxsID8gbWF0ZXJpYWwuc2lkZSA6IG1hdGVyaWFsLnNoYWRvd1NpZGU7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC5kZXB0aE5vZGUgJiYgbWF0ZXJpYWwuZGVwdGhOb2RlLmlzTm9kZSApIHtcblxuXHRcdFx0XHRcdG92ZXJyaWRlRGVwdGhOb2RlID0gb3ZlcnJpZGVNYXRlcmlhbC5kZXB0aE5vZGU7XG5cdFx0XHRcdFx0b3ZlcnJpZGVNYXRlcmlhbC5kZXB0aE5vZGUgPSBtYXRlcmlhbC5kZXB0aE5vZGU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuY2FzdFNoYWRvd05vZGUgJiYgbWF0ZXJpYWwuY2FzdFNoYWRvd05vZGUuaXNOb2RlICkge1xuXG5cdFx0XHRcdFx0b3ZlcnJpZGVDb2xvck5vZGUgPSBvdmVycmlkZU1hdGVyaWFsLmNvbG9yTm9kZTtcblx0XHRcdFx0XHRvdmVycmlkZU1hdGVyaWFsLmNvbG9yTm9kZSA9IG1hdGVyaWFsLmNhc3RTaGFkb3dOb2RlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbCA9IG92ZXJyaWRlTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSAmJiBtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlICYmIG1hdGVyaWFsLmZvcmNlU2luZ2xlUGFzcyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdG1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRcdHRoaXMuX2hhbmRsZU9iamVjdEZ1bmN0aW9uKCBvYmplY3QsIG1hdGVyaWFsLCBzY2VuZSwgY2FtZXJhLCBsaWdodHNOb2RlLCBncm91cCwgY2xpcHBpbmdDb250ZXh0LCAnYmFja1NpZGUnICk7IC8vIGNyZWF0ZSBiYWNrU2lkZSBwYXNzIGlkXG5cblx0XHRcdG1hdGVyaWFsLnNpZGUgPSBGcm9udFNpZGU7XG5cdFx0XHR0aGlzLl9oYW5kbGVPYmplY3RGdW5jdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgc2NlbmUsIGNhbWVyYSwgbGlnaHRzTm9kZSwgZ3JvdXAsIGNsaXBwaW5nQ29udGV4dCwgcGFzc0lkICk7IC8vIHVzZSBkZWZhdWx0IHBhc3MgaWRcblxuXHRcdFx0bWF0ZXJpYWwuc2lkZSA9IERvdWJsZVNpZGU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLl9oYW5kbGVPYmplY3RGdW5jdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgc2NlbmUsIGNhbWVyYSwgbGlnaHRzTm9kZSwgZ3JvdXAsIGNsaXBwaW5nQ29udGV4dCwgcGFzc0lkICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBvdmVycmlkZVBvc2l0aW9uTm9kZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzY2VuZS5vdmVycmlkZU1hdGVyaWFsLnBvc2l0aW9uTm9kZSA9IG92ZXJyaWRlUG9zaXRpb25Ob2RlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvdmVycmlkZURlcHRoTm9kZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzY2VuZS5vdmVycmlkZU1hdGVyaWFsLmRlcHRoTm9kZSA9IG92ZXJyaWRlRGVwdGhOb2RlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvdmVycmlkZUNvbG9yTm9kZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzY2VuZS5vdmVycmlkZU1hdGVyaWFsLmNvbG9yTm9kZSA9IG92ZXJyaWRlQ29sb3JOb2RlO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdG9iamVjdC5vbkFmdGVyUmVuZGVyKCB0aGlzLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCByZXByZXNlbnRzIHRoZSBkZWZhdWx0IGBfaGFuZGxlT2JqZWN0RnVuY3Rpb25gIGltcGxlbWVudGF0aW9uIHdoaWNoIGNyZWF0ZXNcblx0ICogYSByZW5kZXIgb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIHBlcmZvcm1zIHRoZSBkcmF3IGNvbW1hbmQgd2l0aCB0aGUgc2VsZWN0ZWQgYmFja2VuZC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgb2JqZWN0J3MgbWF0ZXJpYWwuXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lIHRoZSAzRCBvYmplY3QgYmVsb25ncyB0by5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhlIG9iamVjdCBzaG91bGQgYmUgcmVuZGVyZWQgd2l0aC5cblx0ICogQHBhcmFtIHtMaWdodHNOb2RlfSBsaWdodHNOb2RlIC0gVGhlIGN1cnJlbnQgbGlnaHRzIG5vZGUuXG5cdCAqIEBwYXJhbSB7P3tzdGFydDogbnVtYmVyLCBjb3VudDogbnVtYmVyfX0gZ3JvdXAgLSBPbmx5IHJlbGV2YW50IGZvciBvYmplY3RzIHVzaW5nIG11bHRpcGxlIG1hdGVyaWFscy4gVGhpcyByZXByZXNlbnRzIGEgZ3JvdXAgZW50cnkgZnJvbSB0aGUgcmVzcGVjdGl2ZSBgQnVmZmVyR2VvbWV0cnlgLlxuXHQgKiBAcGFyYW0ge0NsaXBwaW5nQ29udGV4dH0gY2xpcHBpbmdDb250ZXh0IC0gVGhlIGNsaXBwaW5nIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gW3Bhc3NJZD1udWxsXSAtIEFuIG9wdGlvbmFsIElEIGZvciBpZGVudGlmeWluZyB0aGUgcGFzcy5cblx0ICovXG5cdF9yZW5kZXJPYmplY3REaXJlY3QoIG9iamVjdCwgbWF0ZXJpYWwsIHNjZW5lLCBjYW1lcmEsIGxpZ2h0c05vZGUsIGdyb3VwLCBjbGlwcGluZ0NvbnRleHQsIHBhc3NJZCApIHtcblxuXHRcdGNvbnN0IHJlbmRlck9iamVjdCA9IHRoaXMuX29iamVjdHMuZ2V0KCBvYmplY3QsIG1hdGVyaWFsLCBzY2VuZSwgY2FtZXJhLCBsaWdodHNOb2RlLCB0aGlzLl9jdXJyZW50UmVuZGVyQ29udGV4dCwgY2xpcHBpbmdDb250ZXh0LCBwYXNzSWQgKTtcblx0XHRyZW5kZXJPYmplY3QuZHJhd1JhbmdlID0gb2JqZWN0Lmdlb21ldHJ5LmRyYXdSYW5nZTtcblx0XHRyZW5kZXJPYmplY3QuZ3JvdXAgPSBncm91cDtcblxuXHRcdC8vXG5cblx0XHRjb25zdCBuZWVkc1JlZnJlc2ggPSB0aGlzLl9ub2Rlcy5uZWVkc1JlZnJlc2goIHJlbmRlck9iamVjdCApO1xuXG5cdFx0aWYgKCBuZWVkc1JlZnJlc2ggKSB7XG5cblx0XHRcdHRoaXMuX25vZGVzLnVwZGF0ZUJlZm9yZSggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHRcdHRoaXMuX2dlb21ldHJpZXMudXBkYXRlRm9yUmVuZGVyKCByZW5kZXJPYmplY3QgKTtcblxuXHRcdFx0dGhpcy5fbm9kZXMudXBkYXRlRm9yUmVuZGVyKCByZW5kZXJPYmplY3QgKTtcblx0XHRcdHRoaXMuX2JpbmRpbmdzLnVwZGF0ZUZvclJlbmRlciggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9waXBlbGluZXMudXBkYXRlRm9yUmVuZGVyKCByZW5kZXJPYmplY3QgKTtcblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuX2N1cnJlbnRSZW5kZXJCdW5kbGUgIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IHJlbmRlckJ1bmRsZURhdGEgPSB0aGlzLmJhY2tlbmQuZ2V0KCB0aGlzLl9jdXJyZW50UmVuZGVyQnVuZGxlICk7XG5cblx0XHRcdHJlbmRlckJ1bmRsZURhdGEucmVuZGVyT2JqZWN0cy5wdXNoKCByZW5kZXJPYmplY3QgKTtcblxuXHRcdFx0cmVuZGVyT2JqZWN0LmJ1bmRsZSA9IHRoaXMuX2N1cnJlbnRSZW5kZXJCdW5kbGUuYnVuZGxlR3JvdXA7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJhY2tlbmQuZHJhdyggcmVuZGVyT2JqZWN0LCB0aGlzLmluZm8gKTtcblxuXHRcdGlmICggbmVlZHNSZWZyZXNoICkgdGhpcy5fbm9kZXMudXBkYXRlQWZ0ZXIoIHJlbmRlck9iamVjdCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQSBkaWZmZXJlbnQgaW1wbGVtZW50YXRpb24gZm9yIGBfaGFuZGxlT2JqZWN0RnVuY3Rpb25gIHdoaWNoIG9ubHkgbWFrZXMgc3VyZSB0aGUgb2JqZWN0IGlzIHJlYWR5IGZvciByZW5kZXJpbmcuXG5cdCAqIFVzZWQgaW4gYGNvbXBpbGVBc3luYygpYC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgb2JqZWN0J3MgbWF0ZXJpYWwuXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lIHRoZSAzRCBvYmplY3QgYmVsb25ncyB0by5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhlIG9iamVjdCBzaG91bGQgYmUgcmVuZGVyZWQgd2l0aC5cblx0ICogQHBhcmFtIHtMaWdodHNOb2RlfSBsaWdodHNOb2RlIC0gVGhlIGN1cnJlbnQgbGlnaHRzIG5vZGUuXG5cdCAqIEBwYXJhbSB7P3tzdGFydDogbnVtYmVyLCBjb3VudDogbnVtYmVyfX0gZ3JvdXAgLSBPbmx5IHJlbGV2YW50IGZvciBvYmplY3RzIHVzaW5nIG11bHRpcGxlIG1hdGVyaWFscy4gVGhpcyByZXByZXNlbnRzIGEgZ3JvdXAgZW50cnkgZnJvbSB0aGUgcmVzcGVjdGl2ZSBgQnVmZmVyR2VvbWV0cnlgLlxuXHQgKiBAcGFyYW0ge0NsaXBwaW5nQ29udGV4dH0gY2xpcHBpbmdDb250ZXh0IC0gVGhlIGNsaXBwaW5nIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gW3Bhc3NJZD1udWxsXSAtIEFuIG9wdGlvbmFsIElEIGZvciBpZGVudGlmeWluZyB0aGUgcGFzcy5cblx0ICovXG5cdF9jcmVhdGVPYmplY3RQaXBlbGluZSggb2JqZWN0LCBtYXRlcmlhbCwgc2NlbmUsIGNhbWVyYSwgbGlnaHRzTm9kZSwgZ3JvdXAsIGNsaXBwaW5nQ29udGV4dCwgcGFzc0lkICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyT2JqZWN0ID0gdGhpcy5fb2JqZWN0cy5nZXQoIG9iamVjdCwgbWF0ZXJpYWwsIHNjZW5lLCBjYW1lcmEsIGxpZ2h0c05vZGUsIHRoaXMuX2N1cnJlbnRSZW5kZXJDb250ZXh0LCBjbGlwcGluZ0NvbnRleHQsIHBhc3NJZCApO1xuXHRcdHJlbmRlck9iamVjdC5kcmF3UmFuZ2UgPSBvYmplY3QuZ2VvbWV0cnkuZHJhd1JhbmdlO1xuXHRcdHJlbmRlck9iamVjdC5ncm91cCA9IGdyb3VwO1xuXG5cdFx0Ly9cblxuXHRcdHRoaXMuX25vZGVzLnVwZGF0ZUJlZm9yZSggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHR0aGlzLl9nZW9tZXRyaWVzLnVwZGF0ZUZvclJlbmRlciggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHR0aGlzLl9ub2Rlcy51cGRhdGVGb3JSZW5kZXIoIHJlbmRlck9iamVjdCApO1xuXHRcdHRoaXMuX2JpbmRpbmdzLnVwZGF0ZUZvclJlbmRlciggcmVuZGVyT2JqZWN0ICk7XG5cblx0XHR0aGlzLl9waXBlbGluZXMuZ2V0Rm9yUmVuZGVyKCByZW5kZXJPYmplY3QsIHRoaXMuX2NvbXBpbGF0aW9uUHJvbWlzZXMgKTtcblxuXHRcdHRoaXMuX25vZGVzLnVwZGF0ZUFmdGVyKCByZW5kZXJPYmplY3QgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFsaWFzIGZvciBgY29tcGlsZUFzeW5jKClgLlxuXHQgKlxuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IHNjZW5lIC0gVGhlIHNjZW5lIG9yIDNEIG9iamVjdCB0byBwcmVjb21waWxlLlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGF0IGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBzY2VuZS5cblx0ICogQHBhcmFtIHtTY2VuZX0gdGFyZ2V0U2NlbmUgLSBJZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYSAzRCBvYmplY3QsIHRoaXMgcGFyYW1ldGVyIG11c3QgcmVwcmVzZW50IHRoZSBzY2VuZSB0aGUgM0Qgb2JqZWN0IGlzIGdvaW5nIHRvIGJlIGFkZGVkLlxuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjb21waWxlIGhhcyBiZWVuIGZpbmlzaGVkLlxuXHQgKi9cblx0Z2V0IGNvbXBpbGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb21waWxlQXN5bmM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlbmRlcmVyO1xuIiwiLyoqXG4gKiBBIGJpbmRpbmcgcmVwcmVzZW50cyB0aGUgY29ubmVjdGlvbiBiZXR3ZWVuIGEgcmVzb3VyY2UgKGxpa2UgYSB0ZXh0dXJlLCBzYW1wbGVyXG4gKiBvciB1bmlmb3JtIGJ1ZmZlcikgYW5kIHRoZSByZXNvdXJjZSBkZWZpbml0aW9uIGluIGEgc2hhZGVyIHN0YWdlLlxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGFuIGFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGFsbCBjb25jcmV0ZSBiaW5kaW5ncyB0eXBlcy5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEJpbmRpbmcge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJpbmRpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nJ10gLSBUaGUgYmluZGluZydzIG5hbWUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmFtZSA9ICcnICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJpbmRpbmcncyBuYW1lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBiaXRtYXNrIHRoYXQgZGVmaW5lcyBpbiB3aGF0IHNoYWRlciBzdGFnZXMgdGhlXG5cdFx0ICogYmluZGluZydzIHJlc291cmNlIGlzIGFjY2Vzc2libGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMudmlzaWJpbGl0eSA9IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNYWtlcyBzdXJlIGJpbmRpbmcncyByZXNvdXJjZSBpcyB2aXNpYmxlIGZvciB0aGUgZ2l2ZW4gc2hhZGVyIHN0YWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmlzaWJpbGl0eSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqL1xuXHRzZXRWaXNpYmlsaXR5KCB2aXNpYmlsaXR5ICkge1xuXG5cdFx0dGhpcy52aXNpYmlsaXR5IHw9IHZpc2liaWxpdHk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDbG9uZXMgdGhlIGJpbmRpbmcuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0JpbmRpbmd9IFRoZSBjbG9uZWQgYmluZGluZy5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCksIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmluZGluZztcbiIsImltcG9ydCBCaW5kaW5nIGZyb20gJy4vQmluZGluZy5qcyc7XG5pbXBvcnQgeyBnZXRGbG9hdExlbmd0aCB9IGZyb20gJy4vQnVmZmVyVXRpbHMuanMnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBidWZmZXIgYmluZGluZyB0eXBlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYWJzdHJhY3RcbiAqIEBhdWdtZW50cyBCaW5kaW5nXG4gKi9cbmNsYXNzIEJ1ZmZlciBleHRlbmRzIEJpbmRpbmcge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlci5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgYnVmZmVyJ3MgbmFtZS5cblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBbYnVmZmVyPW51bGxdIC0gVGhlIGJ1ZmZlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCBidWZmZXIgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIG5hbWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNCdWZmZXIgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJ5dGVzIHBlciBlbGVtZW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLmJ5dGVzUGVyRWxlbWVudCA9IEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBidWZmZXIuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtUeXBlZEFycmF5fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2J1ZmZlciA9IGJ1ZmZlcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBidWZmZXIncyBieXRlIGxlbmd0aC5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQHJlYWRvbmx5XG5cdCAqL1xuXHRnZXQgYnl0ZUxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBnZXRGbG9hdExlbmd0aCggdGhpcy5fYnVmZmVyLmJ5dGVMZW5ndGggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBpbnRlcm5hbCBidWZmZXIuXG5cdCAqXG5cdCAqIEB0eXBlIHtGbG9hdDMyQXJyYXl9XG5cdCAqIEByZWFkb25seVxuXHQgKi9cblx0Z2V0IGJ1ZmZlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9idWZmZXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBiaW5kaW5nLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBidWZmZXIgaGFzIGJlZW4gdXBkYXRlZCBhbmQgbXVzdCBiZVxuXHQgKiB1cGxvYWRlZCB0byB0aGUgR1BVLlxuXHQgKi9cblx0dXBkYXRlKCkge1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1ZmZlcjtcbiIsImltcG9ydCB7IEdQVV9DSFVOS19CWVRFUyB9IGZyb20gJy4vQ29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzdWFsbHkgY2FsbGVkIHdpdGggdGhlIGxlbmd0aCBpbiBieXRlcyBvZiBhbiBhcnJheSBidWZmZXIuXG4gKiBJdCByZXR1cm5zIGFuIHBhZGRlZCB2YWx1ZSB3aGljaCBlbnN1cmUgY2h1bmsgc2l6ZSBhbGlnbm1lbnQgYWNjb3JkaW5nIHRvIFNURDE0MCBsYXlvdXQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gZmxvYXRMZW5ndGggLSBUaGUgYnVmZmVyIGxlbmd0aC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBhZGRlZCBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGdldEZsb2F0TGVuZ3RoKCBmbG9hdExlbmd0aCApIHtcblxuXHQvLyBlbnN1cmUgY2h1bmsgc2l6ZSBhbGlnbm1lbnQgKFNURDE0MCBsYXlvdXQpXG5cblx0cmV0dXJuIGZsb2F0TGVuZ3RoICsgKCAoIEdQVV9DSFVOS19CWVRFUyAtICggZmxvYXRMZW5ndGggJSBHUFVfQ0hVTktfQllURVMgKSApICUgR1BVX0NIVU5LX0JZVEVTICk7XG5cbn1cblxuLyoqXG4gKiBHaXZlbiB0aGUgY291bnQgb2YgdmVjdG9ycyBhbmQgdGhlaXIgdmVjdG9yIGxlbmd0aCwgdGhpcyBmdW5jdGlvbiBjb21wdXRlc1xuICogYSB0b3RhbCBsZW5ndGggaW4gYnl0ZXMgd2l0aCBidWZmZXIgYWxpZ25tZW50IGFjY29yZGluZyB0byBTVEQxNDAgbGF5b3V0LlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0gVGhlIG51bWJlciBvZiB2ZWN0b3JzLlxuICogQHBhcmFtIHtudW1iZXJ9IFt2ZWN0b3JMZW5ndGg9NF0gLSBUaGUgdmVjdG9yIGxlbmd0aC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBhZGRlZCBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGdldFZlY3Rvckxlbmd0aCggY291bnQsIHZlY3Rvckxlbmd0aCA9IDQgKSB7XG5cblx0Y29uc3Qgc3RyaWRlTGVuZ3RoID0gZ2V0U3RyaWRlTGVuZ3RoKCB2ZWN0b3JMZW5ndGggKTtcblxuXHRjb25zdCBmbG9hdExlbmd0aCA9IHN0cmlkZUxlbmd0aCAqIGNvdW50O1xuXG5cdHJldHVybiBnZXRGbG9hdExlbmd0aCggZmxvYXRMZW5ndGggKTtcblxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYSB2ZWN0b3IgbGVuZ3RoIGFuZCBlbnN1cmUgdGhlIGNvbXB1dGVkIGxlbmd0aFxuICogbWF0Y2hlcyBhIHByZWRlZmluZWQgc3RyaWRlIChpbiB0aGlzIGNhc2UgYDRgKS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB2ZWN0b3JMZW5ndGggLSBUaGUgdmVjdG9yIGxlbmd0aC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBhZGRlZCBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGdldFN0cmlkZUxlbmd0aCggdmVjdG9yTGVuZ3RoICkge1xuXG5cdGNvbnN0IHN0cmlkZUxlbmd0aCA9IDQ7XG5cblx0cmV0dXJuIHZlY3Rvckxlbmd0aCArICggKCBzdHJpZGVMZW5ndGggLSAoIHZlY3Rvckxlbmd0aCAlIHN0cmlkZUxlbmd0aCApICkgJSBzdHJpZGVMZW5ndGggKTtcblxufVxuXG5leHBvcnQge1xuXHRnZXRGbG9hdExlbmd0aCxcblx0Z2V0VmVjdG9yTGVuZ3RoLFxuXHRnZXRTdHJpZGVMZW5ndGhcbn07XG4iLCJpbXBvcnQgQnVmZmVyIGZyb20gJy4vQnVmZmVyLmpzJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgdW5pZm9ybSBidWZmZXIgYmluZGluZyB0eXBlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgQnVmZmVyXG4gKi9cbmNsYXNzIFVuaWZvcm1CdWZmZXIgZXh0ZW5kcyBCdWZmZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHVuaWZvcm0gYnVmZmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBidWZmZXIncyBuYW1lLlxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IFtidWZmZXI9bnVsbF0gLSBUaGUgYnVmZmVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIGJ1ZmZlciA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggbmFtZSwgYnVmZmVyICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzVW5pZm9ybUJ1ZmZlciA9IHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuaWZvcm1CdWZmZXI7XG4iLCJpbXBvcnQgVW5pZm9ybUJ1ZmZlciBmcm9tICcuLi9Vbmlmb3JtQnVmZmVyLmpzJztcblxubGV0IF9pZCA9IDA7XG5cbi8qKlxuICogQSBzcGVjaWFsIGZvcm0gb2YgdW5pZm9ybSBidWZmZXIgYmluZGluZyB0eXBlLlxuICogSXQncyBidWZmZXIgdmFsdWUgaXMgbWFuYWdlZCBieSBhIG5vZGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgVW5pZm9ybUJ1ZmZlclxuICovXG5jbGFzcyBOb2RlVW5pZm9ybUJ1ZmZlciBleHRlbmRzIFVuaWZvcm1CdWZmZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUtYmFzZWQgdW5pZm9ybSBidWZmZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyTm9kZX0gbm9kZVVuaWZvcm0gLSBUaGUgdW5pZm9ybSBidWZmZXIgbm9kZS5cblx0ICogQHBhcmFtIHtVbmlmb3JtR3JvdXBOb2RlfSBncm91cE5vZGUgLSBUaGUgdW5pZm9ybSBncm91cCBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5vZGVVbmlmb3JtLCBncm91cE5vZGUgKSB7XG5cblx0XHRzdXBlciggJ1VuaWZvcm1CdWZmZXJfJyArIF9pZCArKywgbm9kZVVuaWZvcm0gPyBub2RlVW5pZm9ybS52YWx1ZSA6IG51bGwgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1bmlmb3JtIGJ1ZmZlciBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0J1ZmZlck5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlVW5pZm9ybSA9IG5vZGVVbmlmb3JtO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVuaWZvcm0gZ3JvdXAgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtVbmlmb3JtR3JvdXBOb2RlfVxuXHRcdCAqL1xuXHRcdHRoaXMuZ3JvdXBOb2RlID0gZ3JvdXBOb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIHVuaWZvcm0gYnVmZmVyLlxuXHQgKlxuXHQgKiBAdHlwZSB7RmxvYXQzMkFycmF5fVxuXHQgKi9cblx0Z2V0IGJ1ZmZlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLm5vZGVVbmlmb3JtLnZhbHVlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBOb2RlVW5pZm9ybUJ1ZmZlcjtcbiIsImltcG9ydCBVbmlmb3JtQnVmZmVyIGZyb20gJy4vVW5pZm9ybUJ1ZmZlci5qcyc7XG5pbXBvcnQgeyBHUFVfQ0hVTktfQllURVMgfSBmcm9tICcuL0NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgdW5pZm9ybSBidWZmZXIgYmluZGluZyBidXQgd2l0aFxuICogYW4gQVBJIHRoYXQgYWxsb3dzIHRvIG1haW50YWluIGluZGl2aWR1YWwgdW5pZm9ybSBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgVW5pZm9ybUJ1ZmZlclxuICovXG5jbGFzcyBVbmlmb3Jtc0dyb3VwIGV4dGVuZHMgVW5pZm9ybUJ1ZmZlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdW5pZm9ybXMgZ3JvdXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGdyb3VwJ3MgbmFtZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lICkge1xuXG5cdFx0c3VwZXIoIG5hbWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNVbmlmb3Jtc0dyb3VwID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IHdpdGggdGhlIHJhdyB1bmlmb3JtIHZhbHVlcy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9BcnJheTxudW1iZXI+fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl92YWx1ZXMgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgb2YgdW5pZm9ybSBvYmplY3RzLlxuXHRcdCAqXG5cdFx0ICogVGhlIG9yZGVyIG9mIHVuaWZvcm1zIGluIHRoaXMgYXJyYXkgbXVzdCBtYXRjaCB0aGUgb3JkZXIgb2YgdW5pZm9ybXMgaW4gdGhlIHNoYWRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxVbmlmb3JtPn1cblx0XHQgKi9cblx0XHR0aGlzLnVuaWZvcm1zID0gW107XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgdW5pZm9ybSB0byB0aGlzIGdyb3VwLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1VuaWZvcm19IHVuaWZvcm0gLSBUaGUgdW5pZm9ybSB0byBhZGQuXG5cdCAqIEByZXR1cm4ge1VuaWZvcm1zR3JvdXB9IEEgcmVmZXJlbmNlIHRvIHRoaXMgZ3JvdXAuXG5cdCAqL1xuXHRhZGRVbmlmb3JtKCB1bmlmb3JtICkge1xuXG5cdFx0dGhpcy51bmlmb3Jtcy5wdXNoKCB1bmlmb3JtICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYSB1bmlmb3JtIGZyb20gdGhpcyBncm91cC5cblx0ICpcblx0ICogQHBhcmFtIHtVbmlmb3JtfSB1bmlmb3JtIC0gVGhlIHVuaWZvcm0gdG8gcmVtb3ZlLlxuXHQgKiBAcmV0dXJuIHtVbmlmb3Jtc0dyb3VwfSBBIHJlZmVyZW5jZSB0byB0aGlzIGdyb3VwLlxuXHQgKi9cblx0cmVtb3ZlVW5pZm9ybSggdW5pZm9ybSApIHtcblxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy51bmlmb3Jtcy5pbmRleE9mKCB1bmlmb3JtICk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdHRoaXMudW5pZm9ybXMuc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbiBhcnJheSB3aXRoIHRoZSByYXcgdW5pZm9ybSB2YWx1ZXMuXG5cdCAqXG5cdCAqIEB0eXBlIHtBcnJheTxudW1iZXI+fVxuXHQgKi9cblx0Z2V0IHZhbHVlcygpIHtcblxuXHRcdGlmICggdGhpcy5fdmFsdWVzID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl92YWx1ZXMgPSBBcnJheS5mcm9tKCB0aGlzLmJ1ZmZlciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX3ZhbHVlcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEEgRmxvYXQzMiBhcnJheSBidWZmZXIgd2l0aCB0aGUgdW5pZm9ybSB2YWx1ZXMuXG5cdCAqXG5cdCAqIEB0eXBlIHtGbG9hdDMyQXJyYXl9XG5cdCAqL1xuXHRnZXQgYnVmZmVyKCkge1xuXG5cdFx0bGV0IGJ1ZmZlciA9IHRoaXMuX2J1ZmZlcjtcblxuXHRcdGlmICggYnVmZmVyID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoO1xuXG5cdFx0XHRidWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCBuZXcgQXJyYXlCdWZmZXIoIGJ5dGVMZW5ndGggKSApO1xuXG5cdFx0XHR0aGlzLl9idWZmZXIgPSBidWZmZXI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYnVmZmVyO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGJ5dGUgbGVuZ3RoIG9mIHRoZSBidWZmZXIgd2l0aCBjb3JyZWN0IGJ1ZmZlciBhbGlnbm1lbnQuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqL1xuXHRnZXQgYnl0ZUxlbmd0aCgpIHtcblxuXHRcdGxldCBvZmZzZXQgPSAwOyAvLyBnbG9iYWwgYnVmZmVyIG9mZnNldCBpbiBieXRlc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy51bmlmb3Jtcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB1bmlmb3JtID0gdGhpcy51bmlmb3Jtc1sgaSBdO1xuXG5cdFx0XHRjb25zdCB7IGJvdW5kYXJ5LCBpdGVtU2l6ZSB9ID0gdW5pZm9ybTtcblxuXHRcdFx0Ly8gb2Zmc2V0IHdpdGhpbiBhIHNpbmdsZSBjaHVuayBpbiBieXRlc1xuXG5cdFx0XHRjb25zdCBjaHVua09mZnNldCA9IG9mZnNldCAlIEdQVV9DSFVOS19CWVRFUztcblx0XHRcdGNvbnN0IHJlbWFpbmluZ1NpemVJbkNodW5rID0gR1BVX0NIVU5LX0JZVEVTIC0gY2h1bmtPZmZzZXQ7XG5cblx0XHRcdC8vIGNvbmZvcm1hbmNlIHRlc3RzXG5cblx0XHRcdGlmICggY2h1bmtPZmZzZXQgIT09IDAgJiYgKCByZW1haW5pbmdTaXplSW5DaHVuayAtIGJvdW5kYXJ5ICkgPCAwICkge1xuXG5cdFx0XHRcdC8vIGNoZWNrIGZvciBjaHVuayBvdmVyZmxvd1xuXG5cdFx0XHRcdG9mZnNldCArPSAoIEdQVV9DSFVOS19CWVRFUyAtIGNodW5rT2Zmc2V0ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNodW5rT2Zmc2V0ICUgYm91bmRhcnkgIT09IDAgKSB7XG5cblx0XHRcdFx0Ly8gY2hlY2sgZm9yIGNvcnJlY3QgYWxpZ25tZW50XG5cblx0XHRcdFx0b2Zmc2V0ICs9ICggY2h1bmtPZmZzZXQgJSBib3VuZGFyeSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm0ub2Zmc2V0ID0gKCBvZmZzZXQgLyB0aGlzLmJ5dGVzUGVyRWxlbWVudCApO1xuXG5cdFx0XHRvZmZzZXQgKz0gKCBpdGVtU2l6ZSAqIHRoaXMuYnl0ZXNQZXJFbGVtZW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gTWF0aC5jZWlsKCBvZmZzZXQgLyBHUFVfQ0hVTktfQllURVMgKSAqIEdQVV9DSFVOS19CWVRFUztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhpcyBncm91cCBieSB1cGRhdGluZyBlYWNoIHVuaWZvcm0gb2JqZWN0IG9mXG5cdCAqIHRoZSBpbnRlcm5hbCB1bmlmb3JtIGxpc3QuIFRoZSB1bmlmb3JtIG9iamVjdHMgY2hlY2sgaWYgdGhlaXJcblx0ICogdmFsdWVzIGhhcyBhY3R1YWxseSBjaGFuZ2VkIHNvIHRoaXMgbWV0aG9kIG9ubHkgcmV0dXJuc1xuXHQgKiBgdHJ1ZWAgaWYgdGhlcmUgaXMgYSByZWFsIHZhbHVlIGNoYW5nZS5cblx0ICpcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdW5pZm9ybXMgaGF2ZSBiZWVuIHVwZGF0ZWQgYW5kXG5cdCAqIG11c3QgYmUgdXBsb2FkZWQgdG8gdGhlIEdQVS5cblx0ICovXG5cdHVwZGF0ZSgpIHtcblxuXHRcdGxldCB1cGRhdGVkID0gZmFsc2U7XG5cblx0XHRmb3IgKCBjb25zdCB1bmlmb3JtIG9mIHRoaXMudW5pZm9ybXMgKSB7XG5cblx0XHRcdGlmICggdGhpcy51cGRhdGVCeVR5cGUoIHVuaWZvcm0gKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVwZGF0ZWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGEgZ2l2ZW4gdW5pZm9ybSBieSBjYWxsaW5nIGFuIHVwZGF0ZSBtZXRob2QgbWF0Y2hpbmdcblx0ICogdGhlIHVuaWZvcm1zIHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VW5pZm9ybX0gdW5pZm9ybSAtIFRoZSB1bmlmb3JtIHRvIHVwZGF0ZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdW5pZm9ybSBoYXMgYmVlbiB1cGRhdGVkIG9yIG5vdC5cblx0ICovXG5cdHVwZGF0ZUJ5VHlwZSggdW5pZm9ybSApIHtcblxuXHRcdGlmICggdW5pZm9ybS5pc051bWJlclVuaWZvcm0gKSByZXR1cm4gdGhpcy51cGRhdGVOdW1iZXIoIHVuaWZvcm0gKTtcblx0XHRpZiAoIHVuaWZvcm0uaXNWZWN0b3IyVW5pZm9ybSApIHJldHVybiB0aGlzLnVwZGF0ZVZlY3RvcjIoIHVuaWZvcm0gKTtcblx0XHRpZiAoIHVuaWZvcm0uaXNWZWN0b3IzVW5pZm9ybSApIHJldHVybiB0aGlzLnVwZGF0ZVZlY3RvcjMoIHVuaWZvcm0gKTtcblx0XHRpZiAoIHVuaWZvcm0uaXNWZWN0b3I0VW5pZm9ybSApIHJldHVybiB0aGlzLnVwZGF0ZVZlY3RvcjQoIHVuaWZvcm0gKTtcblx0XHRpZiAoIHVuaWZvcm0uaXNDb2xvclVuaWZvcm0gKSByZXR1cm4gdGhpcy51cGRhdGVDb2xvciggdW5pZm9ybSApO1xuXHRcdGlmICggdW5pZm9ybS5pc01hdHJpeDNVbmlmb3JtICkgcmV0dXJuIHRoaXMudXBkYXRlTWF0cml4MyggdW5pZm9ybSApO1xuXHRcdGlmICggdW5pZm9ybS5pc01hdHJpeDRVbmlmb3JtICkgcmV0dXJuIHRoaXMudXBkYXRlTWF0cml4NCggdW5pZm9ybSApO1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdQVVVuaWZvcm1zR3JvdXA6IFVuc3VwcG9ydGVkIHVuaWZvcm0gdHlwZS4nLCB1bmlmb3JtICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGEgZ2l2ZW4gTnVtYmVyIHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7TnVtYmVyVW5pZm9ybX0gdW5pZm9ybSAtIFRoZSBOdW1iZXIgdW5pZm9ybS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdW5pZm9ybSBoYXMgYmVlbiB1cGRhdGVkIG9yIG5vdC5cblx0ICovXG5cdHVwZGF0ZU51bWJlciggdW5pZm9ybSApIHtcblxuXHRcdGxldCB1cGRhdGVkID0gZmFsc2U7XG5cblx0XHRjb25zdCBhID0gdGhpcy52YWx1ZXM7XG5cdFx0Y29uc3QgdiA9IHVuaWZvcm0uZ2V0VmFsdWUoKTtcblx0XHRjb25zdCBvZmZzZXQgPSB1bmlmb3JtLm9mZnNldDtcblx0XHRjb25zdCB0eXBlID0gdW5pZm9ybS5nZXRUeXBlKCk7XG5cblx0XHRpZiAoIGFbIG9mZnNldCBdICE9PSB2ICkge1xuXG5cdFx0XHRjb25zdCBiID0gdGhpcy5fZ2V0QnVmZmVyRm9yVHlwZSggdHlwZSApO1xuXG5cdFx0XHRiWyBvZmZzZXQgXSA9IGFbIG9mZnNldCBdID0gdjtcblx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVwZGF0ZWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGEgZ2l2ZW4gVmVjdG9yMiB1bmlmb3JtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJVbmlmb3JtfSB1bmlmb3JtIC0gVGhlIFZlY3RvcjIgdW5pZm9ybS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdW5pZm9ybSBoYXMgYmVlbiB1cGRhdGVkIG9yIG5vdC5cblx0ICovXG5cdHVwZGF0ZVZlY3RvcjIoIHVuaWZvcm0gKSB7XG5cblx0XHRsZXQgdXBkYXRlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgYSA9IHRoaXMudmFsdWVzO1xuXHRcdGNvbnN0IHYgPSB1bmlmb3JtLmdldFZhbHVlKCk7XG5cdFx0Y29uc3Qgb2Zmc2V0ID0gdW5pZm9ybS5vZmZzZXQ7XG5cdFx0Y29uc3QgdHlwZSA9IHVuaWZvcm0uZ2V0VHlwZSgpO1xuXG5cdFx0aWYgKCBhWyBvZmZzZXQgKyAwIF0gIT09IHYueCB8fCBhWyBvZmZzZXQgKyAxIF0gIT09IHYueSApIHtcblxuXHRcdFx0Y29uc3QgYiA9IHRoaXMuX2dldEJ1ZmZlckZvclR5cGUoIHR5cGUgKTtcblxuXHRcdFx0Ylsgb2Zmc2V0ICsgMCBdID0gYVsgb2Zmc2V0ICsgMCBdID0gdi54O1xuXHRcdFx0Ylsgb2Zmc2V0ICsgMSBdID0gYVsgb2Zmc2V0ICsgMSBdID0gdi55O1xuXG5cdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1cGRhdGVkO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyBhIGdpdmVuIFZlY3RvcjMgdW5pZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzVW5pZm9ybX0gdW5pZm9ybSAtIFRoZSBWZWN0b3IzIHVuaWZvcm0uXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVuaWZvcm0gaGFzIGJlZW4gdXBkYXRlZCBvciBub3QuXG5cdCAqL1xuXHR1cGRhdGVWZWN0b3IzKCB1bmlmb3JtICkge1xuXG5cdFx0bGV0IHVwZGF0ZWQgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGEgPSB0aGlzLnZhbHVlcztcblx0XHRjb25zdCB2ID0gdW5pZm9ybS5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IG9mZnNldCA9IHVuaWZvcm0ub2Zmc2V0O1xuXHRcdGNvbnN0IHR5cGUgPSB1bmlmb3JtLmdldFR5cGUoKTtcblxuXHRcdGlmICggYVsgb2Zmc2V0ICsgMCBdICE9PSB2LnggfHwgYVsgb2Zmc2V0ICsgMSBdICE9PSB2LnkgfHwgYVsgb2Zmc2V0ICsgMiBdICE9PSB2LnogKSB7XG5cblx0XHRcdGNvbnN0IGIgPSB0aGlzLl9nZXRCdWZmZXJGb3JUeXBlKCB0eXBlICk7XG5cblx0XHRcdGJbIG9mZnNldCArIDAgXSA9IGFbIG9mZnNldCArIDAgXSA9IHYueDtcblx0XHRcdGJbIG9mZnNldCArIDEgXSA9IGFbIG9mZnNldCArIDEgXSA9IHYueTtcblx0XHRcdGJbIG9mZnNldCArIDIgXSA9IGFbIG9mZnNldCArIDIgXSA9IHYuejtcblxuXHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdXBkYXRlZDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgYSBnaXZlbiBWZWN0b3I0IHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNFVuaWZvcm19IHVuaWZvcm0gLSBUaGUgVmVjdG9yNCB1bmlmb3JtLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB1bmlmb3JtIGhhcyBiZWVuIHVwZGF0ZWQgb3Igbm90LlxuXHQgKi9cblx0dXBkYXRlVmVjdG9yNCggdW5pZm9ybSApIHtcblxuXHRcdGxldCB1cGRhdGVkID0gZmFsc2U7XG5cblx0XHRjb25zdCBhID0gdGhpcy52YWx1ZXM7XG5cdFx0Y29uc3QgdiA9IHVuaWZvcm0uZ2V0VmFsdWUoKTtcblx0XHRjb25zdCBvZmZzZXQgPSB1bmlmb3JtLm9mZnNldDtcblx0XHRjb25zdCB0eXBlID0gdW5pZm9ybS5nZXRUeXBlKCk7XG5cblx0XHRpZiAoIGFbIG9mZnNldCArIDAgXSAhPT0gdi54IHx8IGFbIG9mZnNldCArIDEgXSAhPT0gdi55IHx8IGFbIG9mZnNldCArIDIgXSAhPT0gdi56IHx8IGFbIG9mZnNldCArIDQgXSAhPT0gdi53ICkge1xuXG5cdFx0XHRjb25zdCBiID0gdGhpcy5fZ2V0QnVmZmVyRm9yVHlwZSggdHlwZSApO1xuXG5cdFx0XHRiWyBvZmZzZXQgKyAwIF0gPSBhWyBvZmZzZXQgKyAwIF0gPSB2Lng7XG5cdFx0XHRiWyBvZmZzZXQgKyAxIF0gPSBhWyBvZmZzZXQgKyAxIF0gPSB2Lnk7XG5cdFx0XHRiWyBvZmZzZXQgKyAyIF0gPSBhWyBvZmZzZXQgKyAyIF0gPSB2Lno7XG5cdFx0XHRiWyBvZmZzZXQgKyAzIF0gPSBhWyBvZmZzZXQgKyAzIF0gPSB2Lnc7XG5cblx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVwZGF0ZWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGEgZ2l2ZW4gQ29sb3IgdW5pZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtDb2xvclVuaWZvcm19IHVuaWZvcm0gLSBUaGUgQ29sb3IgdW5pZm9ybS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdW5pZm9ybSBoYXMgYmVlbiB1cGRhdGVkIG9yIG5vdC5cblx0ICovXG5cdHVwZGF0ZUNvbG9yKCB1bmlmb3JtICkge1xuXG5cdFx0bGV0IHVwZGF0ZWQgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGEgPSB0aGlzLnZhbHVlcztcblx0XHRjb25zdCBjID0gdW5pZm9ybS5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IG9mZnNldCA9IHVuaWZvcm0ub2Zmc2V0O1xuXG5cdFx0aWYgKCBhWyBvZmZzZXQgKyAwIF0gIT09IGMuciB8fCBhWyBvZmZzZXQgKyAxIF0gIT09IGMuZyB8fCBhWyBvZmZzZXQgKyAyIF0gIT09IGMuYiApIHtcblxuXHRcdFx0Y29uc3QgYiA9IHRoaXMuYnVmZmVyO1xuXG5cdFx0XHRiWyBvZmZzZXQgKyAwIF0gPSBhWyBvZmZzZXQgKyAwIF0gPSBjLnI7XG5cdFx0XHRiWyBvZmZzZXQgKyAxIF0gPSBhWyBvZmZzZXQgKyAxIF0gPSBjLmc7XG5cdFx0XHRiWyBvZmZzZXQgKyAyIF0gPSBhWyBvZmZzZXQgKyAyIF0gPSBjLmI7XG5cblx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVwZGF0ZWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGEgZ2l2ZW4gTWF0cml4MyB1bmlmb3JtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDNVbmlmb3JtfSB1bmlmb3JtIC0gVGhlIE1hdHJpeDMgdW5pZm9ybS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdW5pZm9ybSBoYXMgYmVlbiB1cGRhdGVkIG9yIG5vdC5cblx0ICovXG5cdHVwZGF0ZU1hdHJpeDMoIHVuaWZvcm0gKSB7XG5cblx0XHRsZXQgdXBkYXRlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgYSA9IHRoaXMudmFsdWVzO1xuXHRcdGNvbnN0IGUgPSB1bmlmb3JtLmdldFZhbHVlKCkuZWxlbWVudHM7XG5cdFx0Y29uc3Qgb2Zmc2V0ID0gdW5pZm9ybS5vZmZzZXQ7XG5cblx0XHRpZiAoIGFbIG9mZnNldCArIDAgXSAhPT0gZVsgMCBdIHx8IGFbIG9mZnNldCArIDEgXSAhPT0gZVsgMSBdIHx8IGFbIG9mZnNldCArIDIgXSAhPT0gZVsgMiBdIHx8XG5cdFx0XHRhWyBvZmZzZXQgKyA0IF0gIT09IGVbIDMgXSB8fCBhWyBvZmZzZXQgKyA1IF0gIT09IGVbIDQgXSB8fCBhWyBvZmZzZXQgKyA2IF0gIT09IGVbIDUgXSB8fFxuXHRcdFx0YVsgb2Zmc2V0ICsgOCBdICE9PSBlWyA2IF0gfHwgYVsgb2Zmc2V0ICsgOSBdICE9PSBlWyA3IF0gfHwgYVsgb2Zmc2V0ICsgMTAgXSAhPT0gZVsgOCBdICkge1xuXG5cdFx0XHRjb25zdCBiID0gdGhpcy5idWZmZXI7XG5cblx0XHRcdGJbIG9mZnNldCArIDAgXSA9IGFbIG9mZnNldCArIDAgXSA9IGVbIDAgXTtcblx0XHRcdGJbIG9mZnNldCArIDEgXSA9IGFbIG9mZnNldCArIDEgXSA9IGVbIDEgXTtcblx0XHRcdGJbIG9mZnNldCArIDIgXSA9IGFbIG9mZnNldCArIDIgXSA9IGVbIDIgXTtcblx0XHRcdGJbIG9mZnNldCArIDQgXSA9IGFbIG9mZnNldCArIDQgXSA9IGVbIDMgXTtcblx0XHRcdGJbIG9mZnNldCArIDUgXSA9IGFbIG9mZnNldCArIDUgXSA9IGVbIDQgXTtcblx0XHRcdGJbIG9mZnNldCArIDYgXSA9IGFbIG9mZnNldCArIDYgXSA9IGVbIDUgXTtcblx0XHRcdGJbIG9mZnNldCArIDggXSA9IGFbIG9mZnNldCArIDggXSA9IGVbIDYgXTtcblx0XHRcdGJbIG9mZnNldCArIDkgXSA9IGFbIG9mZnNldCArIDkgXSA9IGVbIDcgXTtcblx0XHRcdGJbIG9mZnNldCArIDEwIF0gPSBhWyBvZmZzZXQgKyAxMCBdID0gZVsgOCBdO1xuXG5cdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1cGRhdGVkO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyBhIGdpdmVuIE1hdHJpeDQgdW5pZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0VW5pZm9ybX0gdW5pZm9ybSAtIFRoZSBNYXRyaXg0IHVuaWZvcm0uXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHVuaWZvcm0gaGFzIGJlZW4gdXBkYXRlZCBvciBub3QuXG5cdCAqL1xuXHR1cGRhdGVNYXRyaXg0KCB1bmlmb3JtICkge1xuXG5cdFx0bGV0IHVwZGF0ZWQgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGEgPSB0aGlzLnZhbHVlcztcblx0XHRjb25zdCBlID0gdW5pZm9ybS5nZXRWYWx1ZSgpLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG9mZnNldCA9IHVuaWZvcm0ub2Zmc2V0O1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggYSwgZSwgb2Zmc2V0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zdCBiID0gdGhpcy5idWZmZXI7XG5cdFx0XHRiLnNldCggZSwgb2Zmc2V0ICk7XG5cdFx0XHRzZXRBcnJheSggYSwgZSwgb2Zmc2V0ICk7XG5cdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1cGRhdGVkO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHR5cGVkIGFycmF5IHRoYXQgbWF0Y2hlcyB0aGUgZ2l2ZW4gZGF0YSB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBkYXRhIHR5cGUuXG5cdCAqIEByZXR1cm4ge1R5cGVkQXJyYXl9IFRoZSB0eXBlZCBhcnJheS5cblx0ICovXG5cdF9nZXRCdWZmZXJGb3JUeXBlKCB0eXBlICkge1xuXG5cdFx0aWYgKCB0eXBlID09PSAnaW50JyB8fCB0eXBlID09PSAnaXZlYzInIHx8IHR5cGUgPT09ICdpdmVjMycgfHwgdHlwZSA9PT0gJ2l2ZWM0JyApIHJldHVybiBuZXcgSW50MzJBcnJheSggdGhpcy5idWZmZXIuYnVmZmVyICk7XG5cdFx0aWYgKCB0eXBlID09PSAndWludCcgfHwgdHlwZSA9PT0gJ3V2ZWMyJyB8fCB0eXBlID09PSAndXZlYzMnIHx8IHR5cGUgPT09ICd1dmVjNCcgKSByZXR1cm4gbmV3IFVpbnQzMkFycmF5KCB0aGlzLmJ1ZmZlci5idWZmZXIgKTtcblx0XHRyZXR1cm4gdGhpcy5idWZmZXI7XG5cblx0fVxuXG59XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWVzIG9mIHRoZSBzZWNvbmQgYXJyYXkgdG8gdGhlIGZpcnN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGEgLSBUaGUgZmlyc3QgYXJyYXkuXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGIgLSBUaGUgc2Vjb25kIGFycmF5LlxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIEFuIGluZGV4IG9mZnNldCBmb3IgdGhlIGZpcnN0IGFycmF5LlxuICovXG5mdW5jdGlvbiBzZXRBcnJheSggYSwgYiwgb2Zmc2V0ICkge1xuXG5cdGZvciAoIGxldCBpID0gMCwgbCA9IGIubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdGFbIG9mZnNldCArIGkgXSA9IGJbIGkgXTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYXJyYXlzIGFyZSBlcXVhbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtUeXBlZEFycmF5fSBhIC0gVGhlIGZpcnN0IGFycmF5LlxuICogQHBhcmFtIHtUeXBlZEFycmF5fSBiIC0gVGhlIHNlY29uZCBhcnJheS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBBbiBpbmRleCBvZmZzZXQgZm9yIHRoZSBmaXJzdCBhcnJheS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGFycmF5cyBhcmUgZXF1YWwgb3Igbm90LlxuICovXG5mdW5jdGlvbiBhcnJheXNFcXVhbCggYSwgYiwgb2Zmc2V0ICkge1xuXG5cdGZvciAoIGxldCBpID0gMCwgbCA9IGIubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdGlmICggYVsgb2Zmc2V0ICsgaSBdICE9PSBiWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdHJldHVybiB0cnVlO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuaWZvcm1zR3JvdXA7XG4iLCJpbXBvcnQgVW5pZm9ybXNHcm91cCBmcm9tICcuLi9Vbmlmb3Jtc0dyb3VwLmpzJztcblxubGV0IF9pZCA9IDA7XG5cbi8qKlxuICogQSBzcGVjaWFsIGZvcm0gb2YgdW5pZm9ybXMgZ3JvdXAgdGhhdCByZXByZXNlbnRzXG4gKiB0aGUgaW5kaXZpZHVhbCB1bmlmb3JtcyBhcyBub2RlLWJhc2VkIHVuaWZvcm1zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgVW5pZm9ybXNHcm91cFxuICovXG5jbGFzcyBOb2RlVW5pZm9ybXNHcm91cCBleHRlbmRzIFVuaWZvcm1zR3JvdXAge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUtYmFzZWQgdW5pZm9ybXMgZ3JvdXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGdyb3VwJ3MgbmFtZS5cblx0ICogQHBhcmFtIHtVbmlmb3JtR3JvdXBOb2RlfSBncm91cE5vZGUgLSBUaGUgdW5pZm9ybSBncm91cCBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIGdyb3VwTm9kZSApIHtcblxuXHRcdHN1cGVyKCBuYW1lICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZ3JvdXAncyBJRC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5pZCA9IF9pZCArKztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1bmlmb3JtIGdyb3VwIG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VW5pZm9ybUdyb3VwTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLmdyb3VwTm9kZSA9IGdyb3VwTm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNOb2RlVW5pZm9ybXNHcm91cCA9IHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVVbmlmb3Jtc0dyb3VwO1xuIiwiaW1wb3J0IEJpbmRpbmcgZnJvbSAnLi9CaW5kaW5nLmpzJztcblxubGV0IF9pZCA9IDA7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHNhbXBsZWQgdGV4dHVyZSBiaW5kaW5nIHR5cGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBCaW5kaW5nXG4gKi9cbmNsYXNzIFNhbXBsZWRUZXh0dXJlIGV4dGVuZHMgQmluZGluZyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc2FtcGxlZCB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBzYW1wbGVkIHRleHR1cmUncyBuYW1lLlxuXHQgKiBAcGFyYW0gez9UZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdGhpcyBiaW5kaW5nIGlzIHJlZmVycmluZyB0by5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB0ZXh0dXJlICkge1xuXG5cdFx0c3VwZXIoIG5hbWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgaWRlbnRpZmllci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5pZCA9IF9pZCArKztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRoaXMgYmluZGluZyBpcyByZWZlcnJpbmcgdG8uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICovXG5cdFx0dGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBiaW5kaW5nJ3MgdmVyc2lvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy52ZXJzaW9uID0gdGV4dHVyZSA/IHRleHR1cmUudmVyc2lvbiA6IDA7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSB0ZXh0dXJlIGlzIGEgc3RvcmFnZSB0ZXh0dXJlIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5zdG9yZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJpbmRpbmcncyBnZW5lcmF0aW9uIHdoaWNoIGlzIGFuIGFkZGl0aW9uYWwgdmVyc2lvblxuXHRcdCAqIHF1YWxpZmllci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmdlbmVyYXRpb24gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1NhbXBsZWRUZXh0dXJlID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIHdoZXRoZXIgdGhpcyBiaW5kaW5nIHJlcXVpcmVzIGFuIHVwZGF0ZSBmb3IgdGhlXG5cdCAqIGdpdmVuIGdlbmVyYXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBnZW5lcmF0aW9uIC0gVGhlIGdlbmVyYXRpb24uXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYW4gdXBkYXRlIGlzIHJlcXVpcmVkIG9yIG5vdC5cblx0ICovXG5cdG5lZWRzQmluZGluZ3NVcGRhdGUoIGdlbmVyYXRpb24gKSB7XG5cblx0XHRjb25zdCB7IHRleHR1cmUgfSA9IHRoaXM7XG5cblx0XHRpZiAoIGdlbmVyYXRpb24gIT09IHRoaXMuZ2VuZXJhdGlvbiApIHtcblxuXHRcdFx0dGhpcy5nZW5lcmF0aW9uID0gZ2VuZXJhdGlvbjtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGJpbmRpbmcuXG5cdCAqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHRleHR1cmUgaGFzIGJlZW4gdXBkYXRlZCBhbmQgbXVzdCBiZVxuXHQgKiB1cGxvYWRlZCB0byB0aGUgR1BVLlxuXHQgKi9cblx0dXBkYXRlKCkge1xuXG5cdFx0Y29uc3QgeyB0ZXh0dXJlLCB2ZXJzaW9uIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCB2ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHNhbXBsZWQgYXJyYXkgdGV4dHVyZSBiaW5kaW5nIHR5cGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBTYW1wbGVkVGV4dHVyZVxuICovXG5jbGFzcyBTYW1wbGVkQXJyYXlUZXh0dXJlIGV4dGVuZHMgU2FtcGxlZFRleHR1cmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHNhbXBsZWQgYXJyYXkgdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgc2FtcGxlZCBhcnJheSB0ZXh0dXJlJ3MgbmFtZS5cblx0ICogQHBhcmFtIHs/KERhdGFBcnJheVRleHR1cmV8Q29tcHJlc3NlZEFycmF5VGV4dHVyZSl9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0aGlzIGJpbmRpbmcgaXMgcmVmZXJyaW5nIHRvLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHRleHR1cmUgKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdGV4dHVyZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1NhbXBsZWRBcnJheVRleHR1cmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzYW1wbGVkIDNEIHRleHR1cmUgYmluZGluZyB0eXBlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgU2FtcGxlZFRleHR1cmVcbiAqL1xuY2xhc3MgU2FtcGxlZDNEVGV4dHVyZSBleHRlbmRzIFNhbXBsZWRUZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzYW1wbGVkIDNEIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHNhbXBsZWQgM0QgdGV4dHVyZSdzIG5hbWUuXG5cdCAqIEBwYXJhbSB7P0RhdGEzRFRleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0aGlzIGJpbmRpbmcgaXMgcmVmZXJyaW5nIHRvLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHRleHR1cmUgKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdGV4dHVyZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1NhbXBsZWQzRFRleHR1cmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzYW1wbGVkIGN1YmUgdGV4dHVyZSBiaW5kaW5nIHR5cGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBTYW1wbGVkVGV4dHVyZVxuICovXG5jbGFzcyBTYW1wbGVkQ3ViZVRleHR1cmUgZXh0ZW5kcyBTYW1wbGVkVGV4dHVyZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc2FtcGxlZCBjdWJlIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHNhbXBsZWQgY3ViZSB0ZXh0dXJlJ3MgbmFtZS5cblx0ICogQHBhcmFtIHs/KEN1YmVUZXh0dXJlfENvbXByZXNzZWRDdWJlVGV4dHVyZSl9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0aGlzIGJpbmRpbmcgaXMgcmVmZXJyaW5nIHRvLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHRleHR1cmUgKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdGV4dHVyZSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1NhbXBsZWRDdWJlVGV4dHVyZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFNhbXBsZWRUZXh0dXJlLCBTYW1wbGVkQXJyYXlUZXh0dXJlLCBTYW1wbGVkM0RUZXh0dXJlLCBTYW1wbGVkQ3ViZVRleHR1cmUgfTtcbiIsImltcG9ydCB7IFNhbXBsZWRUZXh0dXJlIH0gZnJvbSAnLi4vU2FtcGxlZFRleHR1cmUuanMnO1xuXG4vKipcbiAqIEEgc3BlY2lhbCBmb3JtIG9mIHNhbXBsZWQgdGV4dHVyZSBiaW5kaW5nIHR5cGUuXG4gKiBJdCdzIHRleHR1cmUgdmFsdWUgaXMgbWFuYWdlZCBieSBhIG5vZGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgU2FtcGxlZFRleHR1cmVcbiAqL1xuY2xhc3MgTm9kZVNhbXBsZWRUZXh0dXJlIGV4dGVuZHMgU2FtcGxlZFRleHR1cmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUtYmFzZWQgc2FtcGxlZCB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSB0ZXh0dXJlcydzIG5hbWUuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZU5vZGV9IHRleHR1cmVOb2RlIC0gVGhlIHRleHR1cmUgbm9kZS5cblx0ICogQHBhcmFtIHtVbmlmb3JtR3JvdXBOb2RlfSBncm91cE5vZGUgLSBUaGUgdW5pZm9ybSBncm91cCBub2RlLlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IFthY2Nlc3M9bnVsbF0gLSBUaGUgYWNjZXNzIHR5cGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmFtZSwgdGV4dHVyZU5vZGUsIGdyb3VwTm9kZSwgYWNjZXNzID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB0ZXh0dXJlTm9kZSA/IHRleHR1cmVOb2RlLnZhbHVlIDogbnVsbCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHRleHR1cmUgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtUZXh0dXJlTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmVOb2RlID0gdGV4dHVyZU5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdW5pZm9ybSBncm91cCBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1VuaWZvcm1Hcm91cE5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5ncm91cE5vZGUgPSBncm91cE5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYWNjZXNzIHR5cGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5hY2Nlc3MgPSBhY2Nlc3M7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdGVzIHRoZSBkZWZhdWx0IHRvIGFkZGl0aW9uYWxseSBjaGVjayBpZiB0aGUgbm9kZSB2YWx1ZSBoYXMgY2hhbmdlZC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGdlbmVyYXRpb24gLSBUaGUgZ2VuZXJhdGlvbi5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhbiB1cGRhdGUgaXMgcmVxdWlyZWQgb3Igbm90LlxuXHQgKi9cblx0bmVlZHNCaW5kaW5nc1VwZGF0ZSggZ2VuZXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLnRleHR1cmVOb2RlLnZhbHVlICE9PSB0aGlzLnRleHR1cmUgfHwgc3VwZXIubmVlZHNCaW5kaW5nc1VwZGF0ZSggZ2VuZXJhdGlvbiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgYmluZGluZy5cblx0ICpcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdGV4dHVyZSBoYXMgYmVlbiB1cGRhdGVkIGFuZCBtdXN0IGJlXG5cdCAqIHVwbG9hZGVkIHRvIHRoZSBHUFUuXG5cdCAqL1xuXHR1cGRhdGUoKSB7XG5cblx0XHRjb25zdCB7IHRleHR1cmVOb2RlIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCB0aGlzLnRleHR1cmUgIT09IHRleHR1cmVOb2RlLnZhbHVlICkge1xuXG5cdFx0XHR0aGlzLnRleHR1cmUgPSB0ZXh0dXJlTm9kZS52YWx1ZTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc3VwZXIudXBkYXRlKCk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBzcGVjaWFsIGZvcm0gb2Ygc2FtcGxlZCBjdWJlIHRleHR1cmUgYmluZGluZyB0eXBlLlxuICogSXQncyB0ZXh0dXJlIHZhbHVlIGlzIG1hbmFnZWQgYnkgYSBub2RlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIE5vZGVTYW1wbGVkVGV4dHVyZVxuICovXG5jbGFzcyBOb2RlU2FtcGxlZEN1YmVUZXh0dXJlIGV4dGVuZHMgTm9kZVNhbXBsZWRUZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlLWJhc2VkIHNhbXBsZWQgY3ViZSB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSB0ZXh0dXJlcydzIG5hbWUuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZU5vZGV9IHRleHR1cmVOb2RlIC0gVGhlIHRleHR1cmUgbm9kZS5cblx0ICogQHBhcmFtIHtVbmlmb3JtR3JvdXBOb2RlfSBncm91cE5vZGUgLSBUaGUgdW5pZm9ybSBncm91cCBub2RlLlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IFthY2Nlc3M9bnVsbF0gLSBUaGUgYWNjZXNzIHR5cGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmFtZSwgdGV4dHVyZU5vZGUsIGdyb3VwTm9kZSwgYWNjZXNzID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB0ZXh0dXJlTm9kZSwgZ3JvdXBOb2RlLCBhY2Nlc3MgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTYW1wbGVkQ3ViZVRleHR1cmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgc3BlY2lhbCBmb3JtIG9mIHNhbXBsZWQgM0QgdGV4dHVyZSBiaW5kaW5nIHR5cGUuXG4gKiBJdCdzIHRleHR1cmUgdmFsdWUgaXMgbWFuYWdlZCBieSBhIG5vZGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgTm9kZVNhbXBsZWRUZXh0dXJlXG4gKi9cbmNsYXNzIE5vZGVTYW1wbGVkVGV4dHVyZTNEIGV4dGVuZHMgTm9kZVNhbXBsZWRUZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlLWJhc2VkIHNhbXBsZWQgM0QgdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgdGV4dHVyZXMncyBuYW1lLlxuXHQgKiBAcGFyYW0ge1RleHR1cmVOb2RlfSB0ZXh0dXJlTm9kZSAtIFRoZSB0ZXh0dXJlIG5vZGUuXG5cdCAqIEBwYXJhbSB7VW5pZm9ybUdyb3VwTm9kZX0gZ3JvdXBOb2RlIC0gVGhlIHVuaWZvcm0gZ3JvdXAgbm9kZS5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbYWNjZXNzPW51bGxdIC0gVGhlIGFjY2VzcyB0eXBlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHRleHR1cmVOb2RlLCBncm91cE5vZGUsIGFjY2VzcyA9IG51bGwgKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdGV4dHVyZU5vZGUsIGdyb3VwTm9kZSwgYWNjZXNzICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU2FtcGxlZFRleHR1cmUzRCA9IHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IE5vZGVTYW1wbGVkVGV4dHVyZSwgTm9kZVNhbXBsZWRDdWJlVGV4dHVyZSwgTm9kZVNhbXBsZWRUZXh0dXJlM0QgfTtcbiIsImltcG9ydCB7IEdMU0xOb2RlUGFyc2VyLCBOb2RlQnVpbGRlciwgVGV4dHVyZU5vZGUsIHZlY3RvckNvbXBvbmVudHMgfSBmcm9tICcuLi8uLi8uLi9ub2Rlcy9Ob2Rlcy5qcyc7XG5cbmltcG9ydCBOb2RlVW5pZm9ybUJ1ZmZlciBmcm9tICcuLi8uLi9jb21tb24vbm9kZXMvTm9kZVVuaWZvcm1CdWZmZXIuanMnO1xuaW1wb3J0IE5vZGVVbmlmb3Jtc0dyb3VwIGZyb20gJy4uLy4uL2NvbW1vbi9ub2Rlcy9Ob2RlVW5pZm9ybXNHcm91cC5qcyc7XG5cbmltcG9ydCB7IE5vZGVTYW1wbGVkVGV4dHVyZSwgTm9kZVNhbXBsZWRDdWJlVGV4dHVyZSwgTm9kZVNhbXBsZWRUZXh0dXJlM0QgfSBmcm9tICcuLi8uLi9jb21tb24vbm9kZXMvTm9kZVNhbXBsZWRUZXh0dXJlLmpzJztcblxuaW1wb3J0IHsgTm9Db2xvclNwYWNlLCBCeXRlVHlwZSwgU2hvcnRUeXBlLCBSR0JBSW50ZWdlckZvcm1hdCwgUkdCSW50ZWdlckZvcm1hdCwgUmVkSW50ZWdlckZvcm1hdCwgUkdJbnRlZ2VyRm9ybWF0LCBVbnNpZ25lZEJ5dGVUeXBlLCBVbnNpZ25lZEludFR5cGUsIFVuc2lnbmVkU2hvcnRUeXBlLCBSZWRGb3JtYXQsIFJHRm9ybWF0LCBJbnRUeXBlLCBSR0JGb3JtYXQsIFJHQkFGb3JtYXQsIEZsb2F0VHlwZSB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBEYXRhVGV4dHVyZSB9IGZyb20gJy4uLy4uLy4uL3RleHR1cmVzL0RhdGFUZXh0dXJlLmpzJztcblxuY29uc3QgZ2xzbE1ldGhvZHMgPSB7XG5cdHRleHR1cmVEaW1lbnNpb25zOiAndGV4dHVyZVNpemUnLFxuXHRlcXVhbHM6ICdlcXVhbCdcbn07XG5cbmNvbnN0IHByZWNpc2lvbkxpYiA9IHtcblx0bG93OiAnbG93cCcsXG5cdG1lZGl1bTogJ21lZGl1bXAnLFxuXHRoaWdoOiAnaGlnaHAnXG59O1xuXG5jb25zdCBzdXBwb3J0cyA9IHtcblx0c3dpenpsZUFzc2lnbjogdHJ1ZSxcblx0c3RvcmFnZUJ1ZmZlcjogZmFsc2Vcbn07XG5cbmNvbnN0IGRlZmF1bHRQcmVjaXNpb25zID0gYFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xucHJlY2lzaW9uIGhpZ2hwIGludDtcbnByZWNpc2lvbiBoaWdocCBzYW1wbGVyMkQ7XG5wcmVjaXNpb24gaGlnaHAgc2FtcGxlcjNEO1xucHJlY2lzaW9uIGhpZ2hwIHNhbXBsZXJDdWJlO1xucHJlY2lzaW9uIGhpZ2hwIHNhbXBsZXIyREFycmF5O1xuXG5wcmVjaXNpb24gaGlnaHAgdXNhbXBsZXIyRDtcbnByZWNpc2lvbiBoaWdocCB1c2FtcGxlcjNEO1xucHJlY2lzaW9uIGhpZ2hwIHVzYW1wbGVyQ3ViZTtcbnByZWNpc2lvbiBoaWdocCB1c2FtcGxlcjJEQXJyYXk7XG5cbnByZWNpc2lvbiBoaWdocCBpc2FtcGxlcjJEO1xucHJlY2lzaW9uIGhpZ2hwIGlzYW1wbGVyM0Q7XG5wcmVjaXNpb24gaGlnaHAgaXNhbXBsZXJDdWJlO1xucHJlY2lzaW9uIGhpZ2hwIGlzYW1wbGVyMkRBcnJheTtcblxucHJlY2lzaW9uIGxvd3Agc2FtcGxlcjJEU2hhZG93O1xuYDtcblxuLyoqXG4gKiBBIG5vZGUgYnVpbGRlciB0YXJnZXRpbmcgR0xTTC5cbiAqXG4gKiBUaGlzIG1vZHVsZSBnZW5lcmF0ZXMgR0xTTCBzaGFkZXIgY29kZSBmcm9tIG5vZGUgbWF0ZXJpYWxzIGFuZCBhbHNvXG4gKiBnZW5lcmF0ZXMgdGhlIHJlc3BlY3RpdmUgYmluZGluZ3MgYW5kIHZlcnRleCBidWZmZXIgZGVmaW5pdGlvbnMuIFRoZXNlXG4gKiBkYXRhIGFyZSBsYXRlciB1c2VkIGJ5IHRoZSByZW5kZXJlciB0byBjcmVhdGUgcmVuZGVyIGFuZCBjb21wdXRlIHBpcGVsaW5lc1xuICogZm9yIHJlbmRlciBvYmplY3RzLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlQnVpbGRlclxuICovXG5jbGFzcyBHTFNMTm9kZUJ1aWxkZXIgZXh0ZW5kcyBOb2RlQnVpbGRlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgR0xTTCBub2RlIGJ1aWxkZXIgcmVuZGVyZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG9iamVjdCwgcmVuZGVyZXIgKSB7XG5cblx0XHRzdXBlciggb2JqZWN0LCByZW5kZXJlciwgbmV3IEdMU0xOb2RlUGFyc2VyKCkgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSBob2xkcyBmb3IgZWFjaCBzaGFkZXIgc3RhZ2UgKCd2ZXJ0ZXgnLCAnZnJhZ21lbnQnLCAnY29tcHV0ZScpXG5cdFx0ICogYW5vdGhlciBkaWN0aW9uYXJ5IHdoaWNoIG1hbmFnZXMgVUJPcyBwZXIgZ3JvdXAgKCdyZW5kZXInLCdmcmFtZScsJ29iamVjdCcpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsT2JqZWN0PHN0cmluZyxOb2RlVW5pZm9ybXNHcm91cD4+fVxuXHRcdCAqL1xuXHRcdHRoaXMudW5pZm9ybUdyb3VwcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgdGhhdCBob2xkcyBvYmplY3RzIGRlZmluaW5nIHRoZSB2YXJ5aW5nIGFuZCBhdHRyaWJ1dGUgZGF0YSBpblxuXHRcdCAqIGNvbnRleHQgb2YgVHJhbnNmb3JtIEZlZWRiYWNrLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE9iamVjdDxzdHJpbmcsQXR0cmlidXRlTm9kZXxzdHJpbmc+Pn1cblx0XHQgKi9cblx0XHR0aGlzLnRyYW5zZm9ybXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSB0aGF0IGhvbGRzIGZvciBlYWNoIHNoYWRlciBzdGFnZSBhIE1hcCBvZiB1c2VkIGV4dGVuc2lvbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxNYXA8c3RyaW5nLE9iamVjdD4+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZXh0ZW5zaW9ucyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQSBkaWN0aW9uYXJ5IHRoYXQgaG9sZHMgZm9yIGVhY2ggc2hhZGVyIHN0YWdlIGFuIEFycmF5IG9mIHVzZWQgYnVpbHRpbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxBcnJheTxzdHJpbmc+Pn1cblx0XHQgKi9cblx0XHR0aGlzLmJ1aWx0aW5zID0geyB2ZXJ0ZXg6IFtdLCBmcmFnbWVudDogW10sIGNvbXB1dGU6IFtdIH07XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIGNvbXBhcmlzb24gaW4gc2hhZGVyIGNvZGUgYXJlIGdlbmVyYXRlZCB3aXRoIG1ldGhvZHMgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMudXNlQ29tcGFyaXNvbk1ldGhvZCA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIHRleHR1cmUgcmVxdWlyZXMgYSBtYW51YWwgY29udmVyc2lvbiB0byB0aGUgd29ya2luZyBjb2xvciBzcGFjZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIHRleHR1cmUgcmVxdWlyZXMgYSBjb252ZXJzaW9uIHRvIHdvcmtpbmcgY29sb3Igc3BhY2Ugb3Igbm90LlxuXHQgKi9cblx0bmVlZHNUb1dvcmtpbmdDb2xvclNwYWNlKCB0ZXh0dXJlICkge1xuXG5cdFx0cmV0dXJuIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgPT09IHRydWUgJiYgdGV4dHVyZS5jb2xvclNwYWNlICE9PSBOb0NvbG9yU3BhY2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBuYXRpdmUgc2hhZGVyIG1ldGhvZCBuYW1lIGZvciBhIGdpdmVuIGdlbmVyaWMgbmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCAtIFRoZSBtZXRob2QgbmFtZSB0byByZXNvbHZlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSByZXNvbHZlZCBHTFNMIG1ldGhvZCBuYW1lLlxuXHQgKi9cblx0Z2V0TWV0aG9kKCBtZXRob2QgKSB7XG5cblx0XHRyZXR1cm4gZ2xzbE1ldGhvZHNbIG1ldGhvZCBdIHx8IG1ldGhvZDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG91dHB1dCBzdHJ1Y3QgbmFtZS4gTm90IHJlbGV2YW50IGZvciBHTFNMLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRnZXRPdXRwdXRTdHJ1Y3ROYW1lKCkge1xuXG5cdFx0cmV0dXJuICcnO1xuXG5cdH1cblxuXHQvKipcblx0ICogQnVpbGRzIHRoZSBnaXZlbiBzaGFkZXIgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtTaGFkZXJOb2RlSW50ZXJuYWx9IHNoYWRlck5vZGUgLSBUaGUgc2hhZGVyIG5vZGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEdMU0wgZnVuY3Rpb24gY29kZS5cblx0ICovXG5cdGJ1aWxkRnVuY3Rpb25Db2RlKCBzaGFkZXJOb2RlICkge1xuXG5cdFx0Y29uc3QgbGF5b3V0ID0gc2hhZGVyTm9kZS5sYXlvdXQ7XG5cdFx0Y29uc3QgZmxvd0RhdGEgPSB0aGlzLmZsb3dTaGFkZXJOb2RlKCBzaGFkZXJOb2RlICk7XG5cblx0XHRjb25zdCBwYXJhbWV0ZXJzID0gW107XG5cblx0XHRmb3IgKCBjb25zdCBpbnB1dCBvZiBsYXlvdXQuaW5wdXRzICkge1xuXG5cdFx0XHRwYXJhbWV0ZXJzLnB1c2goIHRoaXMuZ2V0VHlwZSggaW5wdXQudHlwZSApICsgJyAnICsgaW5wdXQubmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGNvZGUgPSBgJHsgdGhpcy5nZXRUeXBlKCBsYXlvdXQudHlwZSApIH0gJHsgbGF5b3V0Lm5hbWUgfSggJHsgcGFyYW1ldGVycy5qb2luKCAnLCAnICkgfSApIHtcblxuXHQkeyBmbG93RGF0YS52YXJzIH1cblxuJHsgZmxvd0RhdGEuY29kZSB9XG5cdHJldHVybiAkeyBmbG93RGF0YS5yZXN1bHQgfTtcblxufWA7XG5cblx0XHQvL1xuXG5cdFx0cmV0dXJuIGNvZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIFBpeGVsIEJ1ZmZlciBPYmplY3QgKFBCTykgZm9yIHRoZSBnaXZlbiBzdG9yYWdlXG5cdCAqIGJ1ZmZlciBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0b3JhZ2VCdWZmZXJOb2RlfSBzdG9yYWdlQnVmZmVyTm9kZSAtIFRoZSBzdG9yYWdlIGJ1ZmZlciBub2RlLlxuXHQgKi9cblx0c2V0dXBQQk8oIHN0b3JhZ2VCdWZmZXJOb2RlICkge1xuXG5cdFx0Y29uc3QgYXR0cmlidXRlID0gc3RvcmFnZUJ1ZmZlck5vZGUudmFsdWU7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5wYm8gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3Qgb3JpZ2luYWxBcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcblx0XHRcdGNvbnN0IG51bUVsZW1lbnRzID0gYXR0cmlidXRlLmNvdW50ICogYXR0cmlidXRlLml0ZW1TaXplO1xuXG5cdFx0XHRjb25zdCB7IGl0ZW1TaXplIH0gPSBhdHRyaWJ1dGU7XG5cblx0XHRcdGNvbnN0IGlzSW50ZWdlciA9IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoICdpbnQnICk7XG5cblx0XHRcdGxldCBmb3JtYXQgPSBpc0ludGVnZXIgPyBSZWRJbnRlZ2VyRm9ybWF0IDogUmVkRm9ybWF0O1xuXG5cdFx0XHRpZiAoIGl0ZW1TaXplID09PSAyICkge1xuXG5cdFx0XHRcdGZvcm1hdCA9IGlzSW50ZWdlciA/IFJHSW50ZWdlckZvcm1hdCA6IFJHRm9ybWF0O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBpdGVtU2l6ZSA9PT0gMyApIHtcblxuXHRcdFx0XHRmb3JtYXQgPSBpc0ludGVnZXIgPyBSR0JJbnRlZ2VyRm9ybWF0IDogUkdCRm9ybWF0O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBpdGVtU2l6ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRmb3JtYXQgPSBpc0ludGVnZXIgPyBSR0JBSW50ZWdlckZvcm1hdCA6IFJHQkFGb3JtYXQ7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdHlwZU1hcCA9IHtcblx0XHRcdFx0RmxvYXQzMkFycmF5OiBGbG9hdFR5cGUsXG5cdFx0XHRcdFVpbnQ4QXJyYXk6IFVuc2lnbmVkQnl0ZVR5cGUsXG5cdFx0XHRcdFVpbnQxNkFycmF5OiBVbnNpZ25lZFNob3J0VHlwZSxcblx0XHRcdFx0VWludDMyQXJyYXk6IFVuc2lnbmVkSW50VHlwZSxcblx0XHRcdFx0SW50OEFycmF5OiBCeXRlVHlwZSxcblx0XHRcdFx0SW50MTZBcnJheTogU2hvcnRUeXBlLFxuXHRcdFx0XHRJbnQzMkFycmF5OiBJbnRUeXBlLFxuXHRcdFx0XHRVaW50OENsYW1wZWRBcnJheTogVW5zaWduZWRCeXRlVHlwZSxcblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IHdpZHRoID0gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2cyKCBNYXRoLnNxcnQoIG51bUVsZW1lbnRzIC8gaXRlbVNpemUgKSApICkgKTtcblx0XHRcdGxldCBoZWlnaHQgPSBNYXRoLmNlaWwoICggbnVtRWxlbWVudHMgLyBpdGVtU2l6ZSApIC8gd2lkdGggKTtcblx0XHRcdGlmICggd2lkdGggKiBoZWlnaHQgKiBpdGVtU2l6ZSA8IG51bUVsZW1lbnRzICkgaGVpZ2h0ICsrOyAvLyBFbnN1cmUgZW5vdWdoIHNwYWNlXG5cblx0XHRcdGNvbnN0IG5ld1NpemUgPSB3aWR0aCAqIGhlaWdodCAqIGl0ZW1TaXplO1xuXG5cdFx0XHRjb25zdCBuZXdBcnJheSA9IG5ldyBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yKCBuZXdTaXplICk7XG5cblx0XHRcdG5ld0FycmF5LnNldCggb3JpZ2luYWxBcnJheSwgMCApO1xuXG5cdFx0XHRhdHRyaWJ1dGUuYXJyYXkgPSBuZXdBcnJheTtcblxuXHRcdFx0Y29uc3QgcGJvVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggYXR0cmlidXRlLmFycmF5LCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGVNYXBbIGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lIF0gfHwgRmxvYXRUeXBlICk7XG5cdFx0XHRwYm9UZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdHBib1RleHR1cmUuaXNQQk9UZXh0dXJlID0gdHJ1ZTtcblxuXHRcdFx0Y29uc3QgcGJvID0gbmV3IFRleHR1cmVOb2RlKCBwYm9UZXh0dXJlLCBudWxsLCBudWxsICk7XG5cdFx0XHRwYm8uc2V0UHJlY2lzaW9uKCAnaGlnaCcgKTtcblxuXHRcdFx0YXR0cmlidXRlLnBib05vZGUgPSBwYm87XG5cdFx0XHRhdHRyaWJ1dGUucGJvID0gcGJvLnZhbHVlO1xuXG5cdFx0XHR0aGlzLmdldFVuaWZvcm1Gcm9tTm9kZSggYXR0cmlidXRlLnBib05vZGUsICd0ZXh0dXJlJywgdGhpcy5zaGFkZXJTdGFnZSwgdGhpcy5jb250ZXh0LmxhYmVsICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgR0xTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgcHJvcGVydHkgbmFtZSBvZiB0aGUgZ2l2ZW4gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbc2hhZGVyU3RhZ2U9dGhpcy5zaGFkZXJTdGFnZV0gLSBUaGUgc2hhZGVyIHN0YWdlIHRoaXMgY29kZSBzbmlwcGV0IGlzIGdlbmVyYXRlZCBmb3IuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHByb3BlcnR5IG5hbWUuXG5cdCAqL1xuXHRnZXRQcm9wZXJ0eU5hbWUoIG5vZGUsIHNoYWRlclN0YWdlID0gdGhpcy5zaGFkZXJTdGFnZSApIHtcblxuXHRcdGlmICggbm9kZS5pc05vZGVVbmlmb3JtICYmIG5vZGUubm9kZS5pc1RleHR1cmVOb2RlICE9PSB0cnVlICYmIG5vZGUubm9kZS5pc0J1ZmZlck5vZGUgIT09IHRydWUgKSB7XG5cblx0XHRcdHJldHVybiBzaGFkZXJTdGFnZS5jaGFyQXQoIDAgKSArICdfJyArIG5vZGUubmFtZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzdXBlci5nZXRQcm9wZXJ0eU5hbWUoIG5vZGUsIHNoYWRlclN0YWdlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIFBpeGVsIEJ1ZmZlciBPYmplY3QgKFBCTykgZm9yIHRoZSBnaXZlbiBzdG9yYWdlXG5cdCAqIGJ1ZmZlciBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0b3JhZ2VBcnJheUVsZW1lbnROb2RlfSBzdG9yYWdlQXJyYXlFbGVtZW50Tm9kZSAtIFRoZSBzdG9yYWdlIGFycmF5IGVsZW1lbnQgbm9kZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgcHJvcGVydHkgbmFtZS5cblx0ICovXG5cdGdlbmVyYXRlUEJPKCBzdG9yYWdlQXJyYXlFbGVtZW50Tm9kZSApIHtcblxuXHRcdGNvbnN0IHsgbm9kZSwgaW5kZXhOb2RlIH0gPSBzdG9yYWdlQXJyYXlFbGVtZW50Tm9kZTtcblx0XHRjb25zdCBhdHRyaWJ1dGUgPSBub2RlLnZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLnJlbmRlcmVyLmJhY2tlbmQuaGFzKCBhdHRyaWJ1dGUgKSApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlRGF0YSA9IHRoaXMucmVuZGVyZXIuYmFja2VuZC5nZXQoIGF0dHJpYnV0ZSApO1xuXHRcdFx0YXR0cmlidXRlRGF0YS5wYm8gPSBhdHRyaWJ1dGUucGJvO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgbm9kZVVuaWZvcm0gPSB0aGlzLmdldFVuaWZvcm1Gcm9tTm9kZSggYXR0cmlidXRlLnBib05vZGUsICd0ZXh0dXJlJywgdGhpcy5zaGFkZXJTdGFnZSwgdGhpcy5jb250ZXh0LmxhYmVsICk7XG5cdFx0Y29uc3QgdGV4dHVyZU5hbWUgPSB0aGlzLmdldFByb3BlcnR5TmFtZSggbm9kZVVuaWZvcm0gKTtcblxuXHRcdHRoaXMuaW5jcmVhc2VVc2FnZSggaW5kZXhOb2RlICk7IC8vIGZvcmNlIGNhY2hlIGdlbmVyYXRlIHRvIGJlIHVzZWQgYXMgaW5kZXggaW4geCx5XG5cdFx0Y29uc3QgaW5kZXhTbmlwcGV0ID0gaW5kZXhOb2RlLmJ1aWxkKCB0aGlzLCAndWludCcgKTtcblxuXHRcdGNvbnN0IGVsZW1lbnROb2RlRGF0YSA9IHRoaXMuZ2V0RGF0YUZyb21Ob2RlKCBzdG9yYWdlQXJyYXlFbGVtZW50Tm9kZSApO1xuXG5cdFx0bGV0IHByb3BlcnR5TmFtZSA9IGVsZW1lbnROb2RlRGF0YS5wcm9wZXJ0eU5hbWU7XG5cblx0XHRpZiAoIHByb3BlcnR5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBwcm9wZXJ0eSBlbGVtZW50XG5cblx0XHRcdGNvbnN0IG5vZGVWYXIgPSB0aGlzLmdldFZhckZyb21Ob2RlKCBzdG9yYWdlQXJyYXlFbGVtZW50Tm9kZSApO1xuXG5cdFx0XHRwcm9wZXJ0eU5hbWUgPSB0aGlzLmdldFByb3BlcnR5TmFtZSggbm9kZVZhciApO1xuXG5cdFx0XHQvLyBwcm9wZXJ0eSBzaXplXG5cblx0XHRcdGNvbnN0IGJ1ZmZlck5vZGVEYXRhID0gdGhpcy5nZXREYXRhRnJvbU5vZGUoIG5vZGUgKTtcblxuXHRcdFx0bGV0IHByb3BlcnR5U2l6ZU5hbWUgPSBidWZmZXJOb2RlRGF0YS5wcm9wZXJ0eVNpemVOYW1lO1xuXG5cdFx0XHRpZiAoIHByb3BlcnR5U2l6ZU5hbWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwcm9wZXJ0eVNpemVOYW1lID0gcHJvcGVydHlOYW1lICsgJ1NpemUnO1xuXG5cdFx0XHRcdHRoaXMuZ2V0VmFyRnJvbU5vZGUoIG5vZGUsIHByb3BlcnR5U2l6ZU5hbWUsICd1aW50JyApO1xuXG5cdFx0XHRcdHRoaXMuYWRkTGluZUZsb3dDb2RlKCBgJHsgcHJvcGVydHlTaXplTmFtZSB9ID0gdWludCggdGV4dHVyZVNpemUoICR7IHRleHR1cmVOYW1lIH0sIDAgKS54IClgLCBzdG9yYWdlQXJyYXlFbGVtZW50Tm9kZSApO1xuXG5cdFx0XHRcdGJ1ZmZlck5vZGVEYXRhLnByb3BlcnR5U2l6ZU5hbWUgPSBwcm9wZXJ0eVNpemVOYW1lO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdGNvbnN0IHsgaXRlbVNpemUgfSA9IGF0dHJpYnV0ZTtcblxuXHRcdFx0Y29uc3QgY2hhbm5lbCA9ICcuJyArIHZlY3RvckNvbXBvbmVudHMuam9pbiggJycgKS5zbGljZSggMCwgaXRlbVNpemUgKTtcblx0XHRcdGNvbnN0IHV2U25pcHBldCA9IGBpdmVjMigke2luZGV4U25pcHBldH0gJSAkeyBwcm9wZXJ0eVNpemVOYW1lIH0sICR7aW5kZXhTbmlwcGV0fSAvICR7IHByb3BlcnR5U2l6ZU5hbWUgfSlgO1xuXG5cdFx0XHRjb25zdCBzbmlwcGV0ID0gdGhpcy5nZW5lcmF0ZVRleHR1cmVMb2FkKCBudWxsLCB0ZXh0dXJlTmFtZSwgdXZTbmlwcGV0LCBudWxsLCAnMCcgKTtcblxuXHRcdFx0Ly9cblxuXG5cdFx0XHRsZXQgcHJlZml4ID0gJ3ZlYzQnO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5wYm8udHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlICkge1xuXG5cdFx0XHRcdHByZWZpeCA9ICd1dmVjNCc7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGF0dHJpYnV0ZS5wYm8udHlwZSA9PT0gSW50VHlwZSApIHtcblxuXHRcdFx0XHRwcmVmaXggPSAnaXZlYzQnO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYWRkTGluZUZsb3dDb2RlKCBgJHsgcHJvcGVydHlOYW1lIH0gPSAke3ByZWZpeH0oJHsgc25pcHBldCB9KSR7Y2hhbm5lbH1gLCBzdG9yYWdlQXJyYXlFbGVtZW50Tm9kZSApO1xuXG5cdFx0XHRlbGVtZW50Tm9kZURhdGEucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb3BlcnR5TmFtZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgR0xTTCBzbmlwcGV0IHRoYXQgcmVhZHMgYSBzaW5nbGUgdGV4ZWwgZnJvbSBhIHRleHR1cmUgd2l0aG91dCBzYW1wbGluZyBvciBmaWx0ZXJpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHRleHR1cmUgdW5pZm9ybSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXZJbmRleFNuaXBwZXQgLSBBIEdMU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGV4dHVyZSBjb29yZGluYXRlcyB1c2VkIGZvciBzYW1wbGluZy5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBkZXB0aFNuaXBwZXQgLSBBIEdMU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGhlIDAtYmFzZWQgdGV4dHVyZSBhcnJheSBpbmRleCB0byBzYW1wbGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbbGV2ZWxTbmlwcGV0PScwdSddIC0gQSBHTFNMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIHRoZSBtaXAgbGV2ZWwsIHdpdGggbGV2ZWwgMCBjb250YWluaW5nIGEgZnVsbCBzaXplIHZlcnNpb24gb2YgdGhlIHRleHR1cmUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEdMU0wgc25pcHBldC5cblx0ICovXG5cdGdlbmVyYXRlVGV4dHVyZUxvYWQoIHRleHR1cmUsIHRleHR1cmVQcm9wZXJ0eSwgdXZJbmRleFNuaXBwZXQsIGRlcHRoU25pcHBldCwgbGV2ZWxTbmlwcGV0ID0gJzAnICkge1xuXG5cdFx0aWYgKCBkZXB0aFNuaXBwZXQgKSB7XG5cblx0XHRcdHJldHVybiBgdGV4ZWxGZXRjaCggJHsgdGV4dHVyZVByb3BlcnR5IH0sIGl2ZWMzKCAkeyB1dkluZGV4U25pcHBldCB9LCAkeyBkZXB0aFNuaXBwZXQgfSApLCAkeyBsZXZlbFNuaXBwZXQgfSApYDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBgdGV4ZWxGZXRjaCggJHsgdGV4dHVyZVByb3BlcnR5IH0sICR7IHV2SW5kZXhTbmlwcGV0IH0sICR7IGxldmVsU25pcHBldCB9IClgO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSBHTFNMIHNuaXBwZXQgZm9yIHNhbXBsaW5nL2xvYWRpbmcgdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHRleHR1cmUgdW5pZm9ybSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXZTbmlwcGV0IC0gQSBHTFNMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIHRleHR1cmUgY29vcmRpbmF0ZXMgdXNlZCBmb3Igc2FtcGxpbmcuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gZGVwdGhTbmlwcGV0IC0gIEEgR0xTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgMC1iYXNlZCB0ZXh0dXJlIGFycmF5IGluZGV4IHRvIHNhbXBsZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR0xTTCBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlKCB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgZGVwdGhTbmlwcGV0ICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRyZXR1cm4gYHRleHR1cmUoICR7IHRleHR1cmVQcm9wZXJ0eSB9LCAkeyB1dlNuaXBwZXQgfSApLnhgO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBkZXB0aFNuaXBwZXQgKSB1dlNuaXBwZXQgPSBgdmVjMyggJHsgdXZTbmlwcGV0IH0sICR7IGRlcHRoU25pcHBldCB9IClgO1xuXG5cdFx0XHRyZXR1cm4gYHRleHR1cmUoICR7IHRleHR1cmVQcm9wZXJ0eSB9LCAkeyB1dlNuaXBwZXQgfSApYDtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgR0xTTCBzbmlwcGV0IHdoZW4gc2FtcGxpbmcgdGV4dHVyZXMgd2l0aCBleHBsaWNpdCBtaXAgbGV2ZWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHRleHR1cmUgdW5pZm9ybSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXZTbmlwcGV0IC0gQSBHTFNMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIHRleHR1cmUgY29vcmRpbmF0ZXMgdXNlZCBmb3Igc2FtcGxpbmcuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbFNuaXBwZXQgLSBBIEdMU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGhlIG1pcCBsZXZlbCwgd2l0aCBsZXZlbCAwIGNvbnRhaW5pbmcgYSBmdWxsIHNpemUgdmVyc2lvbiBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR0xTTCBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlTGV2ZWwoIHRleHR1cmUsIHRleHR1cmVQcm9wZXJ0eSwgdXZTbmlwcGV0LCBsZXZlbFNuaXBwZXQgKSB7XG5cblx0XHRyZXR1cm4gYHRleHR1cmVMb2QoICR7IHRleHR1cmVQcm9wZXJ0eSB9LCAkeyB1dlNuaXBwZXQgfSwgJHsgbGV2ZWxTbmlwcGV0IH0gKWA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIEdMU0wgc25pcHBldCB3aGVuIHNhbXBsaW5nIHRleHR1cmVzIHdpdGggYSBiaWFzIHRvIHRoZSBtaXAgbGV2ZWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHRleHR1cmUgdW5pZm9ybSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXZTbmlwcGV0IC0gQSBHTFNMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIHRleHR1cmUgY29vcmRpbmF0ZXMgdXNlZCBmb3Igc2FtcGxpbmcuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBiaWFzU25pcHBldCAtIEEgR0xTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgYmlhcyB0byBhcHBseSB0byB0aGUgbWlwIGxldmVsIGJlZm9yZSBzYW1wbGluZy5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR0xTTCBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlQmlhcyggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGJpYXNTbmlwcGV0ICkge1xuXG5cdFx0cmV0dXJuIGB0ZXh0dXJlKCAkeyB0ZXh0dXJlUHJvcGVydHkgfSwgJHsgdXZTbmlwcGV0IH0sICR7IGJpYXNTbmlwcGV0IH0gKWA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIEdMU0wgc25pcHBldCBmb3Igc2FtcGxpbmcvbG9hZGluZyB0aGUgZ2l2ZW4gdGV4dHVyZSB1c2luZyBleHBsaWNpdCBncmFkaWVudHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHRleHR1cmUgdW5pZm9ybSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXZTbmlwcGV0IC0gQSBHTFNMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIHRleHR1cmUgY29vcmRpbmF0ZXMgdXNlZCBmb3Igc2FtcGxpbmcuXG5cdCAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gZ3JhZFNuaXBwZXQgLSBBbiBhcnJheSBob2xkaW5nIGJvdGggZ3JhZGllbnQgR0xTTCBzbmlwcGV0cy5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR0xTTCBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlR3JhZCggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGdyYWRTbmlwcGV0ICkge1xuXG5cdFx0cmV0dXJuIGB0ZXh0dXJlR3JhZCggJHsgdGV4dHVyZVByb3BlcnR5IH0sICR7IHV2U25pcHBldCB9LCAkeyBncmFkU25pcHBldFsgMCBdIH0sICR7IGdyYWRTbmlwcGV0WyAxIF0gfSApYDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgR0xTTCBzbmlwcGV0IGZvciBzYW1wbGluZyBhIGRlcHRoIHRleHR1cmUgYW5kIGNvbXBhcmluZyB0aGUgc2FtcGxlZCBkZXB0aCB2YWx1ZXNcblx0ICogYWdhaW5zdCBhIHJlZmVyZW5jZSB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0dXJlUHJvcGVydHkgLSBUaGUgbmFtZSBvZiB0aGUgdGV4dHVyZSB1bmlmb3JtIGluIHRoZSBzaGFkZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1dlNuaXBwZXQgLSBBIEdMU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGV4dHVyZSBjb29yZGluYXRlcyB1c2VkIGZvciBzYW1wbGluZy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGNvbXBhcmVTbmlwcGV0IC0gIEEgR0xTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVmZXJlbmNlIHZhbHVlLlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IGRlcHRoU25pcHBldCAtIEEgR0xTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyAwLWJhc2VkIHRleHR1cmUgYXJyYXkgaW5kZXggdG8gc2FtcGxlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3NoYWRlclN0YWdlPXRoaXMuc2hhZGVyU3RhZ2VdIC0gVGhlIHNoYWRlciBzdGFnZSB0aGlzIGNvZGUgc25pcHBldCBpcyBnZW5lcmF0ZWQgZm9yLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHTFNMIHNuaXBwZXQuXG5cdCAqL1xuXHRnZW5lcmF0ZVRleHR1cmVDb21wYXJlKCB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgY29tcGFyZVNuaXBwZXQsIGRlcHRoU25pcHBldCwgc2hhZGVyU3RhZ2UgPSB0aGlzLnNoYWRlclN0YWdlICkge1xuXG5cdFx0aWYgKCBzaGFkZXJTdGFnZSA9PT0gJ2ZyYWdtZW50JyApIHtcblxuXHRcdFx0cmV0dXJuIGB0ZXh0dXJlKCAkeyB0ZXh0dXJlUHJvcGVydHkgfSwgdmVjMyggJHsgdXZTbmlwcGV0IH0sICR7IGNvbXBhcmVTbmlwcGV0IH0gKSApYDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoIGBXZWJHUFVSZW5kZXJlcjogVEhSRUUuRGVwdGhUZXh0dXJlLmNvbXBhcmVGdW5jdGlvbigpIGRvZXMgbm90IHN1cHBvcnQgJHsgc2hhZGVyU3RhZ2UgfSBzaGFkZXIuYCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmFyaWFibGVzIG9mIHRoZSBnaXZlbiBzaGFkZXIgc3RhZ2UgYXMgYSBHTFNMIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNoYWRlclN0YWdlIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR0xTTCBzbmlwcGV0IHRoYXQgZGVmaW5lcyB0aGUgdmFyaWFibGVzLlxuXHQgKi9cblx0Z2V0VmFycyggc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRjb25zdCBzbmlwcGV0cyA9IFtdO1xuXG5cdFx0Y29uc3QgdmFycyA9IHRoaXMudmFyc1sgc2hhZGVyU3RhZ2UgXTtcblxuXHRcdGlmICggdmFycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCB2YXJpYWJsZSBvZiB2YXJzICkge1xuXG5cdFx0XHRcdHNuaXBwZXRzLnB1c2goIGAkeyB0aGlzLmdldFZhciggdmFyaWFibGUudHlwZSwgdmFyaWFibGUubmFtZSwgdmFyaWFibGUuY291bnQgKSB9O2AgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNuaXBwZXRzLmpvaW4oICdcXG5cXHQnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB1bmlmb3JtcyBvZiB0aGUgZ2l2ZW4gc2hhZGVyIHN0YWdlIGFzIGEgR0xTTCBzdHJpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEdMU0wgc25pcHBldCB0aGF0IGRlZmluZXMgdGhlIHVuaWZvcm1zLlxuXHQgKi9cblx0Z2V0VW5pZm9ybXMoIHNoYWRlclN0YWdlICkge1xuXG5cdFx0Y29uc3QgdW5pZm9ybXMgPSB0aGlzLnVuaWZvcm1zWyBzaGFkZXJTdGFnZSBdO1xuXG5cdFx0Y29uc3QgYmluZGluZ1NuaXBwZXRzID0gW107XG5cdFx0Y29uc3QgdW5pZm9ybUdyb3VwcyA9IHt9O1xuXG5cdFx0Zm9yICggY29uc3QgdW5pZm9ybSBvZiB1bmlmb3JtcyApIHtcblxuXHRcdFx0bGV0IHNuaXBwZXQgPSBudWxsO1xuXHRcdFx0bGV0IGdyb3VwID0gZmFsc2U7XG5cblx0XHRcdGlmICggdW5pZm9ybS50eXBlID09PSAndGV4dHVyZScgfHwgdW5pZm9ybS50eXBlID09PSAndGV4dHVyZTNEJyApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlID0gdW5pZm9ybS5ub2RlLnZhbHVlO1xuXG5cdFx0XHRcdGxldCB0eXBlUHJlZml4ID0gJyc7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUgPT09IHRydWUgfHwgdGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHR0eXBlUHJlZml4ID0gJ3UnO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS50eXBlID09PSBJbnRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHR0eXBlUHJlZml4ID0gJ2knO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHVuaWZvcm0udHlwZSA9PT0gJ3RleHR1cmUzRCcgKSB7XG5cblx0XHRcdFx0XHRzbmlwcGV0ID0gYCR7dHlwZVByZWZpeH1zYW1wbGVyM0QgJHsgdW5pZm9ybS5uYW1lIH07YDtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmNvbXBhcmVGdW5jdGlvbiApIHtcblxuXHRcdFx0XHRcdHNuaXBwZXQgPSBgc2FtcGxlcjJEU2hhZG93ICR7IHVuaWZvcm0ubmFtZSB9O2A7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgPT09IHRydWUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRzbmlwcGV0ID0gYCR7dHlwZVByZWZpeH1zYW1wbGVyMkRBcnJheSAkeyB1bmlmb3JtLm5hbWUgfTtgO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzbmlwcGV0ID0gYCR7dHlwZVByZWZpeH1zYW1wbGVyMkQgJHsgdW5pZm9ybS5uYW1lIH07YDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHVuaWZvcm0udHlwZSA9PT0gJ2N1YmVUZXh0dXJlJyApIHtcblxuXHRcdFx0XHRzbmlwcGV0ID0gYHNhbXBsZXJDdWJlICR7IHVuaWZvcm0ubmFtZSB9O2A7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHVuaWZvcm0udHlwZSA9PT0gJ2J1ZmZlcicgKSB7XG5cblx0XHRcdFx0Y29uc3QgYnVmZmVyTm9kZSA9IHVuaWZvcm0ubm9kZTtcblx0XHRcdFx0Y29uc3QgYnVmZmVyVHlwZSA9IHRoaXMuZ2V0VHlwZSggYnVmZmVyTm9kZS5idWZmZXJUeXBlICk7XG5cdFx0XHRcdGNvbnN0IGJ1ZmZlckNvdW50ID0gYnVmZmVyTm9kZS5idWZmZXJDb3VudDtcblxuXHRcdFx0XHRjb25zdCBidWZmZXJDb3VudFNuaXBwZXQgPSBidWZmZXJDb3VudCA+IDAgPyBidWZmZXJDb3VudCA6ICcnO1xuXHRcdFx0XHRzbmlwcGV0ID0gYCR7YnVmZmVyTm9kZS5uYW1lfSB7XFxuXFx0JHsgYnVmZmVyVHlwZSB9ICR7IHVuaWZvcm0ubmFtZSB9WyR7IGJ1ZmZlckNvdW50U25pcHBldCB9XTtcXG59O1xcbmA7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc3QgdmVjdG9yVHlwZSA9IHRoaXMuZ2V0VmVjdG9yVHlwZSggdW5pZm9ybS50eXBlICk7XG5cblx0XHRcdFx0c25pcHBldCA9IGAkeyB2ZWN0b3JUeXBlIH0gJHsgdGhpcy5nZXRQcm9wZXJ0eU5hbWUoIHVuaWZvcm0sIHNoYWRlclN0YWdlICkgfTtgO1xuXG5cdFx0XHRcdGdyb3VwID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBwcmVjaXNpb24gPSB1bmlmb3JtLm5vZGUucHJlY2lzaW9uO1xuXG5cdFx0XHRpZiAoIHByZWNpc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRzbmlwcGV0ID0gcHJlY2lzaW9uTGliWyBwcmVjaXNpb24gXSArICcgJyArIHNuaXBwZXQ7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBncm91cCApIHtcblxuXHRcdFx0XHRzbmlwcGV0ID0gJ1xcdCcgKyBzbmlwcGV0O1xuXG5cdFx0XHRcdGNvbnN0IGdyb3VwTmFtZSA9IHVuaWZvcm0uZ3JvdXBOb2RlLm5hbWU7XG5cdFx0XHRcdGNvbnN0IGdyb3VwU25pcHBldHMgPSB1bmlmb3JtR3JvdXBzWyBncm91cE5hbWUgXSB8fCAoIHVuaWZvcm1Hcm91cHNbIGdyb3VwTmFtZSBdID0gW10gKTtcblxuXHRcdFx0XHRncm91cFNuaXBwZXRzLnB1c2goIHNuaXBwZXQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzbmlwcGV0ID0gJ3VuaWZvcm0gJyArIHNuaXBwZXQ7XG5cblx0XHRcdFx0YmluZGluZ1NuaXBwZXRzLnB1c2goIHNuaXBwZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0bGV0IG91dHB1dCA9ICcnO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiB1bmlmb3JtR3JvdXBzICkge1xuXG5cdFx0XHRjb25zdCBncm91cFNuaXBwZXRzID0gdW5pZm9ybUdyb3Vwc1sgbmFtZSBdO1xuXG5cdFx0XHRvdXRwdXQgKz0gdGhpcy5fZ2V0R0xTTFVuaWZvcm1TdHJ1Y3QoIHNoYWRlclN0YWdlICsgJ18nICsgbmFtZSwgZ3JvdXBTbmlwcGV0cy5qb2luKCAnXFxuJyApICkgKyAnXFxuJztcblxuXHRcdH1cblxuXHRcdG91dHB1dCArPSBiaW5kaW5nU25pcHBldHMuam9pbiggJ1xcbicgKTtcblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB0eXBlIGZvciBhIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgdHlwZS5cblx0ICovXG5cdGdldFR5cGVGcm9tQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRsZXQgbm9kZVR5cGUgPSBzdXBlci5nZXRUeXBlRnJvbUF0dHJpYnV0ZSggYXR0cmlidXRlICk7XG5cblx0XHRpZiAoIC9eW2l1XS8udGVzdCggbm9kZVR5cGUgKSAmJiBhdHRyaWJ1dGUuZ3B1VHlwZSAhPT0gSW50VHlwZSApIHtcblxuXHRcdFx0bGV0IGRhdGFBdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBkYXRhQXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gZGF0YUF0dHJpYnV0ZS5hcnJheTtcblxuXHRcdFx0aWYgKCAoIGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgfHwgYXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdG5vZGVUeXBlID0gbm9kZVR5cGUuc2xpY2UoIDEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGVUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2hhZGVyIGF0dHJpYnV0ZXMgb2YgdGhlIGdpdmVuIHNoYWRlciBzdGFnZSBhcyBhIEdMU0wgc3RyaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHTFNMIHNuaXBwZXQgdGhhdCBkZWZpbmVzIHRoZSBzaGFkZXIgYXR0cmlidXRlcy5cblx0ICovXG5cdGdldEF0dHJpYnV0ZXMoIHNoYWRlclN0YWdlICkge1xuXG5cdFx0bGV0IHNuaXBwZXQgPSAnJztcblxuXHRcdGlmICggc2hhZGVyU3RhZ2UgPT09ICd2ZXJ0ZXgnIHx8IHNoYWRlclN0YWdlID09PSAnY29tcHV0ZScgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmdldEF0dHJpYnV0ZXNBcnJheSgpO1xuXG5cdFx0XHRsZXQgbG9jYXRpb24gPSAwO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBhdHRyaWJ1dGUgb2YgYXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHRzbmlwcGV0ICs9IGBsYXlvdXQoIGxvY2F0aW9uID0gJHsgbG9jYXRpb24gKysgfSApIGluICR7IGF0dHJpYnV0ZS50eXBlIH0gJHsgYXR0cmlidXRlLm5hbWUgfTtcXG5gO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG1lbWJlcnMgb2YgdGhlIGdpdmVuIHN0cnVjdCB0eXBlIG5vZGUgYXMgYSBHTFNMIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJ1Y3RUeXBlTm9kZX0gc3RydWN0IC0gVGhlIHN0cnVjdCB0eXBlIG5vZGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEdMU0wgc25pcHBldCB0aGF0IGRlZmluZXMgdGhlIHN0cnVjdCBtZW1iZXJzLlxuXHQgKi9cblx0Z2V0U3RydWN0TWVtYmVycyggc3RydWN0ICkge1xuXG5cdFx0Y29uc3Qgc25pcHBldHMgPSBbXTtcblxuXHRcdGZvciAoIGNvbnN0IG1lbWJlciBvZiBzdHJ1Y3QubWVtYmVycyApIHtcblxuXHRcdFx0c25pcHBldHMucHVzaCggYFxcdCR7IG1lbWJlci50eXBlIH0gJHsgbWVtYmVyLm5hbWUgfTtgICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldHMuam9pbiggJ1xcbicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHN0cnVjdHMgb2YgdGhlIGdpdmVuIHNoYWRlciBzdGFnZSBhcyBhIEdMU0wgc3RyaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHTFNMIHNuaXBwZXQgdGhhdCBkZWZpbmVzIHRoZSBzdHJ1Y3RzLlxuXHQgKi9cblx0Z2V0U3RydWN0cyggc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRjb25zdCBzbmlwcGV0cyA9IFtdO1xuXHRcdGNvbnN0IHN0cnVjdHMgPSB0aGlzLnN0cnVjdHNbIHNoYWRlclN0YWdlIF07XG5cblx0XHRjb25zdCBvdXRwdXRTbmlwcGV0ID0gW107XG5cblx0XHRmb3IgKCBjb25zdCBzdHJ1Y3Qgb2Ygc3RydWN0cyApIHtcblxuXHRcdFx0aWYgKCBzdHJ1Y3Qub3V0cHV0ICkge1xuXG5cdFx0XHRcdGZvciAoIGNvbnN0IG1lbWJlciBvZiBzdHJ1Y3QubWVtYmVycyApIHtcblxuXHRcdFx0XHRcdG91dHB1dFNuaXBwZXQucHVzaCggYGxheW91dCggbG9jYXRpb24gPSAkeyBtZW1iZXIuaW5kZXggfSApIG91dCAkeyBtZW1iZXIudHlwZSB9ICR7IG1lbWJlci5uYW1lIH07YCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRsZXQgc25pcHBldCA9ICdzdHJ1Y3QgJyArIHN0cnVjdC5uYW1lICsgJyB7XFxuJztcblx0XHRcdFx0c25pcHBldCArPSB0aGlzLmdldFN0cnVjdE1lbWJlcnMoIHN0cnVjdCApO1xuXHRcdFx0XHRzbmlwcGV0ICs9ICdcXG59O1xcbic7XG5cblx0XHRcdFx0c25pcHBldHMucHVzaCggc25pcHBldCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG91dHB1dFNuaXBwZXQubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRvdXRwdXRTbmlwcGV0LnB1c2goICdsYXlvdXQoIGxvY2F0aW9uID0gMCApIG91dCB2ZWM0IGZyYWdDb2xvcjsnICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gJ1xcbicgKyBvdXRwdXRTbmlwcGV0LmpvaW4oICdcXG4nICkgKyAnXFxuXFxuJyArIHNuaXBwZXRzLmpvaW4oICdcXG4nICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2YXJ5aW5ncyBvZiB0aGUgZ2l2ZW4gc2hhZGVyIHN0YWdlIGFzIGEgR0xTTCBzdHJpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEdMU0wgc25pcHBldCB0aGF0IGRlZmluZXMgdGhlIHZhcnlpbmdzLlxuXHQgKi9cblx0Z2V0VmFyeWluZ3MoIHNoYWRlclN0YWdlICkge1xuXG5cdFx0bGV0IHNuaXBwZXQgPSAnJztcblxuXHRcdGNvbnN0IHZhcnlpbmdzID0gdGhpcy52YXJ5aW5ncztcblxuXHRcdGlmICggc2hhZGVyU3RhZ2UgPT09ICd2ZXJ0ZXgnIHx8IHNoYWRlclN0YWdlID09PSAnY29tcHV0ZScgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IHZhcnlpbmcgb2YgdmFyeWluZ3MgKSB7XG5cblx0XHRcdFx0aWYgKCBzaGFkZXJTdGFnZSA9PT0gJ2NvbXB1dGUnICkgdmFyeWluZy5uZWVkc0ludGVycG9sYXRpb24gPSB0cnVlO1xuXG5cdFx0XHRcdGNvbnN0IHR5cGUgPSB0aGlzLmdldFR5cGUoIHZhcnlpbmcudHlwZSApO1xuXG5cdFx0XHRcdGlmICggdmFyeWluZy5uZWVkc0ludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0XHRjb25zdCBmbGF0ID0gdHlwZS5pbmNsdWRlcyggJ2ludCcgKSB8fCB0eXBlLmluY2x1ZGVzKCAndXYnICkgfHwgdHlwZS5pbmNsdWRlcyggJ2l2JyApID8gJ2ZsYXQgJyA6ICcnO1xuXG5cdFx0XHRcdFx0c25pcHBldCArPSBgJHtmbGF0fSBvdXQgJHt0eXBlfSAke3ZhcnlpbmcubmFtZX07XFxuYDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c25pcHBldCArPSBgJHt0eXBlfSAke3ZhcnlpbmcubmFtZX07XFxuYDsgLy8gZ2VuZXJhdGUgdmFyaWFibGUgKG5vIHZhcnlpbmcgcmVxdWlyZWQpXG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBzaGFkZXJTdGFnZSA9PT0gJ2ZyYWdtZW50JyApIHtcblxuXHRcdFx0Zm9yICggY29uc3QgdmFyeWluZyBvZiB2YXJ5aW5ncyApIHtcblxuXHRcdFx0XHRpZiAoIHZhcnlpbmcubmVlZHNJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdHlwZSA9IHRoaXMuZ2V0VHlwZSggdmFyeWluZy50eXBlICk7XG5cdFx0XHRcdFx0Y29uc3QgZmxhdCA9IHR5cGUuaW5jbHVkZXMoICdpbnQnICkgfHwgdHlwZS5pbmNsdWRlcyggJ3V2JyApIHx8IHR5cGUuaW5jbHVkZXMoICdpdicgKSA/ICdmbGF0ICcgOiAnJztcblxuXHRcdFx0XHRcdHNuaXBwZXQgKz0gYCR7ZmxhdH1pbiAke3R5cGV9ICR7dmFyeWluZy5uYW1lfTtcXG5gO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggY29uc3QgYnVpbHRpbiBvZiB0aGlzLmJ1aWx0aW5zWyBzaGFkZXJTdGFnZSBdICkge1xuXG5cdFx0XHRzbmlwcGV0ICs9IGAke2J1aWx0aW59O1xcbmA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZlcnRleCBpbmRleCBidWlsdGluLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB2ZXJ0ZXggaW5kZXguXG5cdCAqL1xuXHRnZXRWZXJ0ZXhJbmRleCgpIHtcblxuXHRcdHJldHVybiAndWludCggZ2xfVmVydGV4SUQgKSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnN0YW5jZSBpbmRleCBidWlsdGluLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBpbnN0YW5jZSBpbmRleC5cblx0ICovXG5cdGdldEluc3RhbmNlSW5kZXgoKSB7XG5cblx0XHRyZXR1cm4gJ3VpbnQoIGdsX0luc3RhbmNlSUQgKSc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnZvY2F0aW9uIGxvY2FsIGluZGV4IGJ1aWx0aW4uXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGludm9jYXRpb24gbG9jYWwgaW5kZXguXG5cdCAqL1xuXHRnZXRJbnZvY2F0aW9uTG9jYWxJbmRleCgpIHtcblxuXHRcdGNvbnN0IHdvcmtncm91cFNpemUgPSB0aGlzLm9iamVjdC53b3JrZ3JvdXBTaXplO1xuXG5cdFx0Y29uc3Qgc2l6ZSA9IHdvcmtncm91cFNpemUucmVkdWNlKCAoIGFjYywgY3VyciApID0+IGFjYyAqIGN1cnIsIDEgKTtcblxuXHRcdHJldHVybiBgdWludCggZ2xfSW5zdGFuY2VJRCApICUgJHtzaXplfXVgO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZHJhdyBpbmRleCBidWlsdGluLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZHJhd0luZGV4IHNoYWRlciBzdHJpbmcuIFJldHVybnMgYG51bGxgIGlmIGBXRUJHTF9tdWx0aV9kcmF3YCBpc24ndCBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZS5cblx0ICovXG5cdGdldERyYXdJbmRleCgpIHtcblxuXHRcdGNvbnN0IGV4dGVuc2lvbnMgPSB0aGlzLnJlbmRlcmVyLmJhY2tlbmQuZXh0ZW5zaW9ucztcblxuXHRcdGlmICggZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aV9kcmF3JyApICkge1xuXG5cdFx0XHRyZXR1cm4gJ3VpbnQoIGdsX0RyYXdJRCApJztcblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZnJvbnQgZmFjaW5nIGJ1aWx0aW4uXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZyb250IGZhY2luZyBidWlsdGluLlxuXHQgKi9cblx0Z2V0RnJvbnRGYWNpbmcoKSB7XG5cblx0XHRyZXR1cm4gJ2dsX0Zyb250RmFjaW5nJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGZyYWcgY29vcmQgYnVpbHRpbi5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZnJhZyBjb29yZCBidWlsdGluLlxuXHQgKi9cblx0Z2V0RnJhZ0Nvb3JkKCkge1xuXG5cdFx0cmV0dXJuICdnbF9GcmFnQ29vcmQueHknO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZnJhZyBkZXB0aCBidWlsdGluLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmcmFnIGRlcHRoIGJ1aWx0aW4uXG5cdCAqL1xuXHRnZXRGcmFnRGVwdGgoKSB7XG5cblx0XHRyZXR1cm4gJ2dsX0ZyYWdEZXB0aCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFbmFibGVzIHRoZSBnaXZlbiBleHRlbnNpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGV4dGVuc2lvbiBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYmVoYXZpb3IgLSBUaGUgZXh0ZW5zaW9uIGJlaGF2aW9yLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3NoYWRlclN0YWdlPXRoaXMuc2hhZGVyU3RhZ2VdIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICovXG5cdGVuYWJsZUV4dGVuc2lvbiggbmFtZSwgYmVoYXZpb3IsIHNoYWRlclN0YWdlID0gdGhpcy5zaGFkZXJTdGFnZSApIHtcblxuXHRcdGNvbnN0IG1hcCA9IHRoaXMuZXh0ZW5zaW9uc1sgc2hhZGVyU3RhZ2UgXSB8fCAoIHRoaXMuZXh0ZW5zaW9uc1sgc2hhZGVyU3RhZ2UgXSA9IG5ldyBNYXAoKSApO1xuXG5cdFx0aWYgKCBtYXAuaGFzKCBuYW1lICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRtYXAuc2V0KCBuYW1lLCB7XG5cdFx0XHRcdG5hbWUsXG5cdFx0XHRcdGJlaGF2aW9yXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBlbmFibGVkIGV4dGVuc2lvbnMgb2YgdGhlIGdpdmVuIHNoYWRlciBzdGFnZSBhcyBhIEdMU0wgc3RyaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHTFNMIHNuaXBwZXQgdGhhdCBkZWZpbmVzIHRoZSBlbmFibGVkIGV4dGVuc2lvbnMuXG5cdCAqL1xuXHRnZXRFeHRlbnNpb25zKCBzaGFkZXJTdGFnZSApIHtcblxuXHRcdGNvbnN0IHNuaXBwZXRzID0gW107XG5cblx0XHRpZiAoIHNoYWRlclN0YWdlID09PSAndmVydGV4JyApIHtcblxuXHRcdFx0Y29uc3QgZXh0ID0gdGhpcy5yZW5kZXJlci5iYWNrZW5kLmV4dGVuc2lvbnM7XG5cdFx0XHRjb25zdCBpc0JhdGNoZWRNZXNoID0gdGhpcy5vYmplY3QuaXNCYXRjaGVkTWVzaDtcblxuXHRcdFx0aWYgKCBpc0JhdGNoZWRNZXNoICYmIGV4dC5oYXMoICdXRUJHTF9tdWx0aV9kcmF3JyApICkge1xuXG5cdFx0XHRcdHRoaXMuZW5hYmxlRXh0ZW5zaW9uKCAnR0xfQU5HTEVfbXVsdGlfZHJhdycsICdyZXF1aXJlJywgc2hhZGVyU3RhZ2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9uc1sgc2hhZGVyU3RhZ2UgXTtcblxuXHRcdGlmICggZXh0ZW5zaW9ucyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCB7IG5hbWUsIGJlaGF2aW9yIH0gb2YgZXh0ZW5zaW9ucy52YWx1ZXMoKSApIHtcblxuXHRcdFx0XHRzbmlwcGV0cy5wdXNoKCBgI2V4dGVuc2lvbiAke25hbWV9IDogJHtiZWhhdmlvcn1gICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBzbmlwcGV0cy5qb2luKCAnXFxuJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2xpcCBkaXN0YW5jZXMgYnVpbHRpbi5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgY2xpcCBkaXN0YW5jZXMgYnVpbHRpbi5cblx0ICovXG5cdGdldENsaXBEaXN0YW5jZSgpIHtcblxuXHRcdHJldHVybiAnZ2xfQ2xpcERpc3RhbmNlJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdGhlIHJlcXVlc3RlZCBmZWF0dXJlIGlzIGF2YWlsYWJsZSBvciBub3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHJlcXVlc3RlZCBmZWF0dXJlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSByZXF1ZXN0ZWQgZmVhdHVyZSBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHQgKi9cblx0aXNBdmFpbGFibGUoIG5hbWUgKSB7XG5cblx0XHRsZXQgcmVzdWx0ID0gc3VwcG9ydHNbIG5hbWUgXTtcblxuXHRcdGlmICggcmVzdWx0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxldCBleHRlbnNpb25OYW1lO1xuXG5cdFx0XHRyZXN1bHQgPSBmYWxzZTtcblxuXHRcdFx0c3dpdGNoICggbmFtZSApIHtcblxuXHRcdFx0XHRjYXNlICdmbG9hdDMyRmlsdGVyYWJsZSc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uTmFtZSA9ICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2NsaXBEaXN0YW5jZSc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uTmFtZSA9ICdXRUJHTF9jbGlwX2N1bGxfZGlzdGFuY2UnO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uTmFtZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnN0IGV4dGVuc2lvbnMgPSB0aGlzLnJlbmRlcmVyLmJhY2tlbmQuZXh0ZW5zaW9ucztcblxuXHRcdFx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCBleHRlbnNpb25OYW1lICkgKSB7XG5cblx0XHRcdFx0XHRleHRlbnNpb25zLmdldCggZXh0ZW5zaW9uTmFtZSApO1xuXHRcdFx0XHRcdHJlc3VsdCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHN1cHBvcnRzWyBuYW1lIF0gPSByZXN1bHQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0byBmbGlwIHRleHR1cmUgZGF0YSBhbG9uZyBpdHMgdmVydGljYWwgYXhpcyBvciBub3QuXG5cdCAqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgYWx3YXlzIGB0cnVlYCBpbiBjb250ZXh0IG9mIEdMU0wuXG5cdCAqL1xuXHRpc0ZsaXBZKCkge1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFbmFibGVzIGhhcmR3YXJlIGNsaXBwaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGxhbmVDb3VudCAtIFRoZSBjbGlwcGluZyBwbGFuZSBjb3VudC5cblx0ICovXG5cdGVuYWJsZUhhcmR3YXJlQ2xpcHBpbmcoIHBsYW5lQ291bnQgKSB7XG5cblx0XHR0aGlzLmVuYWJsZUV4dGVuc2lvbiggJ0dMX0FOR0xFX2NsaXBfY3VsbF9kaXN0YW5jZScsICdyZXF1aXJlJyApO1xuXG5cdFx0dGhpcy5idWlsdGluc1sgJ3ZlcnRleCcgXS5wdXNoKCBgb3V0IGZsb2F0IGdsX0NsaXBEaXN0YW5jZVsgJHsgcGxhbmVDb3VudCB9IF1gICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgYSB0cmFuc2Zvcm0gaW4gY29udGV4dCBvZiBUcmFuc2Zvcm0gRmVlZGJhY2suXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB2YXJ5aW5nTmFtZSAtIFRoZSB2YXJ5aW5nIG5hbWUuXG5cdCAqIEBwYXJhbSB7QXR0cmlidXRlTm9kZX0gYXR0cmlidXRlTm9kZSAtIFRoZSBhdHRyaWJ1dGUgbm9kZS5cblx0ICovXG5cdHJlZ2lzdGVyVHJhbnNmb3JtKCB2YXJ5aW5nTmFtZSwgYXR0cmlidXRlTm9kZSApIHtcblxuXHRcdHRoaXMudHJhbnNmb3Jtcy5wdXNoKCB7IHZhcnlpbmdOYW1lLCBhdHRyaWJ1dGVOb2RlIH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHRyYW5zZm9ybXMgb2YgdGhlIGdpdmVuIHNoYWRlciBzdGFnZSBhcyBhIEdMU0wgc3RyaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHTFNMIHNuaXBwZXQgdGhhdCBkZWZpbmVzIHRoZSB0cmFuc2Zvcm1zLlxuXHQgKi9cblx0Z2V0VHJhbnNmb3JtcyggLyogc2hhZGVyU3RhZ2UgICovICkge1xuXG5cdFx0Y29uc3QgdHJhbnNmb3JtcyA9IHRoaXMudHJhbnNmb3JtcztcblxuXHRcdGxldCBzbmlwcGV0ID0gJyc7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0cmFuc2Zvcm1zLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdHJhbnNmb3JtID0gdHJhbnNmb3Jtc1sgaSBdO1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVOYW1lID0gdGhpcy5nZXRQcm9wZXJ0eU5hbWUoIHRyYW5zZm9ybS5hdHRyaWJ1dGVOb2RlICk7XG5cblx0XHRcdHNuaXBwZXQgKz0gYCR7IHRyYW5zZm9ybS52YXJ5aW5nTmFtZSB9ID0gJHsgYXR0cmlidXRlTmFtZSB9O1xcblxcdGA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBHTFNMIHN0cnVjdCBiYXNlZCBvbiB0aGUgZ2l2ZW4gbmFtZSBhbmQgdmFyaWFibGVzLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBzdHJ1Y3QgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHZhcnMgLSBUaGUgc3RydWN0IHZhcmlhYmxlcy5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR0xTTCBzbmlwcGV0IHJlcHJlc2VudGluZyBhIHN0cnVjdC5cblx0ICovXG5cdF9nZXRHTFNMVW5pZm9ybVN0cnVjdCggbmFtZSwgdmFycyApIHtcblxuXHRcdHJldHVybiBgXG5sYXlvdXQoIHN0ZDE0MCApIHVuaWZvcm0gJHtuYW1lfSB7XG4ke3ZhcnN9XG59O2A7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgR0xTTCB2ZXJ0ZXggc2hhZGVyIGJhc2VkIG9uIHRoZSBnaXZlbiBzaGFkZXIgZGF0YS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtPYmplY3R9IHNoYWRlckRhdGEgLSBUaGUgc2hhZGVyIGRhdGEuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZlcnRleCBzaGFkZXIuXG5cdCAqL1xuXHRfZ2V0R0xTTFZlcnRleENvZGUoIHNoYWRlckRhdGEgKSB7XG5cblx0XHRyZXR1cm4gYCN2ZXJzaW9uIDMwMCBlc1xuXG4keyB0aGlzLmdldFNpZ25hdHVyZSgpIH1cblxuLy8gZXh0ZW5zaW9uc1xuJHtzaGFkZXJEYXRhLmV4dGVuc2lvbnN9XG5cbi8vIHByZWNpc2lvblxuJHsgZGVmYXVsdFByZWNpc2lvbnMgfVxuXG4vLyB1bmlmb3Jtc1xuJHtzaGFkZXJEYXRhLnVuaWZvcm1zfVxuXG4vLyB2YXJ5aW5nc1xuJHtzaGFkZXJEYXRhLnZhcnlpbmdzfVxuXG4vLyBhdHRyaWJ1dGVzXG4ke3NoYWRlckRhdGEuYXR0cmlidXRlc31cblxuLy8gY29kZXNcbiR7c2hhZGVyRGF0YS5jb2Rlc31cblxudm9pZCBtYWluKCkge1xuXG5cdC8vIHZhcnNcblx0JHtzaGFkZXJEYXRhLnZhcnN9XG5cblx0Ly8gdHJhbnNmb3Jtc1xuXHQke3NoYWRlckRhdGEudHJhbnNmb3Jtc31cblxuXHQvLyBmbG93XG5cdCR7c2hhZGVyRGF0YS5mbG93fVxuXG5cdGdsX1BvaW50U2l6ZSA9IDEuMDtcblxufVxuYDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBHTFNMIGZyYWdtZW50IHNoYWRlciBiYXNlZCBvbiB0aGUgZ2l2ZW4gc2hhZGVyIGRhdGEuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBzaGFkZXJEYXRhIC0gVGhlIHNoYWRlciBkYXRhLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB2ZXJ0ZXggc2hhZGVyLlxuXHQgKi9cblx0X2dldEdMU0xGcmFnbWVudENvZGUoIHNoYWRlckRhdGEgKSB7XG5cblx0XHRyZXR1cm4gYCN2ZXJzaW9uIDMwMCBlc1xuXG4keyB0aGlzLmdldFNpZ25hdHVyZSgpIH1cblxuLy8gcHJlY2lzaW9uXG4keyBkZWZhdWx0UHJlY2lzaW9ucyB9XG5cbi8vIHVuaWZvcm1zXG4ke3NoYWRlckRhdGEudW5pZm9ybXN9XG5cbi8vIHZhcnlpbmdzXG4ke3NoYWRlckRhdGEudmFyeWluZ3N9XG5cbi8vIGNvZGVzXG4ke3NoYWRlckRhdGEuY29kZXN9XG5cbi8vIHN0cnVjdHNcbiR7c2hhZGVyRGF0YS5zdHJ1Y3RzfVxuXG52b2lkIG1haW4oKSB7XG5cblx0Ly8gdmFyc1xuXHQke3NoYWRlckRhdGEudmFyc31cblxuXHQvLyBmbG93XG5cdCR7c2hhZGVyRGF0YS5mbG93fVxuXG59XG5gO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udHJvbHMgdGhlIGNvZGUgYnVpbGQgb2YgdGhlIHNoYWRlciBzdGFnZXMuXG5cdCAqL1xuXHRidWlsZENvZGUoKSB7XG5cblx0XHRjb25zdCBzaGFkZXJzRGF0YSA9IHRoaXMubWF0ZXJpYWwgIT09IG51bGwgPyB7IGZyYWdtZW50OiB7fSwgdmVydGV4OiB7fSB9IDogeyBjb21wdXRlOiB7fSB9O1xuXG5cdFx0dGhpcy5zb3J0QmluZGluZ0dyb3VwcygpO1xuXG5cdFx0Zm9yICggY29uc3Qgc2hhZGVyU3RhZ2UgaW4gc2hhZGVyc0RhdGEgKSB7XG5cblx0XHRcdGxldCBmbG93ID0gJy8vIGNvZGVcXG5cXG4nO1xuXHRcdFx0ZmxvdyArPSB0aGlzLmZsb3dDb2RlWyBzaGFkZXJTdGFnZSBdO1xuXG5cdFx0XHRjb25zdCBmbG93Tm9kZXMgPSB0aGlzLmZsb3dOb2Rlc1sgc2hhZGVyU3RhZ2UgXTtcblx0XHRcdGNvbnN0IG1haW5Ob2RlID0gZmxvd05vZGVzWyBmbG93Tm9kZXMubGVuZ3RoIC0gMSBdO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBub2RlIG9mIGZsb3dOb2RlcyApIHtcblxuXHRcdFx0XHRjb25zdCBmbG93U2xvdERhdGEgPSB0aGlzLmdldEZsb3dEYXRhKCBub2RlLyosIHNoYWRlclN0YWdlKi8gKTtcblx0XHRcdFx0Y29uc3Qgc2xvdE5hbWUgPSBub2RlLm5hbWU7XG5cblx0XHRcdFx0aWYgKCBzbG90TmFtZSApIHtcblxuXHRcdFx0XHRcdGlmICggZmxvdy5sZW5ndGggPiAwICkgZmxvdyArPSAnXFxuJztcblxuXHRcdFx0XHRcdGZsb3cgKz0gYFxcdC8vIGZsb3cgLT4gJHsgc2xvdE5hbWUgfVxcblxcdGA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZsb3cgKz0gYCR7IGZsb3dTbG90RGF0YS5jb2RlIH1cXG5cXHRgO1xuXG5cdFx0XHRcdGlmICggbm9kZSA9PT0gbWFpbk5vZGUgJiYgc2hhZGVyU3RhZ2UgIT09ICdjb21wdXRlJyApIHtcblxuXHRcdFx0XHRcdGZsb3cgKz0gJy8vIHJlc3VsdFxcblxcdCc7XG5cblx0XHRcdFx0XHRpZiAoIHNoYWRlclN0YWdlID09PSAndmVydGV4JyApIHtcblxuXHRcdFx0XHRcdFx0ZmxvdyArPSAnZ2xfUG9zaXRpb24gPSAnO1xuXHRcdFx0XHRcdFx0ZmxvdyArPSBgJHsgZmxvd1Nsb3REYXRhLnJlc3VsdCB9O2A7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBzaGFkZXJTdGFnZSA9PT0gJ2ZyYWdtZW50JyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCAhIG5vZGUub3V0cHV0Tm9kZS5pc091dHB1dFN0cnVjdE5vZGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0ZmxvdyArPSAnZnJhZ0NvbG9yID0gJztcblx0XHRcdFx0XHRcdFx0ZmxvdyArPSBgJHsgZmxvd1Nsb3REYXRhLnJlc3VsdCB9O2A7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc3RhZ2VEYXRhID0gc2hhZGVyc0RhdGFbIHNoYWRlclN0YWdlIF07XG5cblx0XHRcdHN0YWdlRGF0YS5leHRlbnNpb25zID0gdGhpcy5nZXRFeHRlbnNpb25zKCBzaGFkZXJTdGFnZSApO1xuXHRcdFx0c3RhZ2VEYXRhLnVuaWZvcm1zID0gdGhpcy5nZXRVbmlmb3Jtcyggc2hhZGVyU3RhZ2UgKTtcblx0XHRcdHN0YWdlRGF0YS5hdHRyaWJ1dGVzID0gdGhpcy5nZXRBdHRyaWJ1dGVzKCBzaGFkZXJTdGFnZSApO1xuXHRcdFx0c3RhZ2VEYXRhLnZhcnlpbmdzID0gdGhpcy5nZXRWYXJ5aW5ncyggc2hhZGVyU3RhZ2UgKTtcblx0XHRcdHN0YWdlRGF0YS52YXJzID0gdGhpcy5nZXRWYXJzKCBzaGFkZXJTdGFnZSApO1xuXHRcdFx0c3RhZ2VEYXRhLnN0cnVjdHMgPSB0aGlzLmdldFN0cnVjdHMoIHNoYWRlclN0YWdlICk7XG5cdFx0XHRzdGFnZURhdGEuY29kZXMgPSB0aGlzLmdldENvZGVzKCBzaGFkZXJTdGFnZSApO1xuXHRcdFx0c3RhZ2VEYXRhLnRyYW5zZm9ybXMgPSB0aGlzLmdldFRyYW5zZm9ybXMoIHNoYWRlclN0YWdlICk7XG5cdFx0XHRzdGFnZURhdGEuZmxvdyA9IGZsb3c7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubWF0ZXJpYWwgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmVydGV4U2hhZGVyID0gdGhpcy5fZ2V0R0xTTFZlcnRleENvZGUoIHNoYWRlcnNEYXRhLnZlcnRleCApO1xuXHRcdFx0dGhpcy5mcmFnbWVudFNoYWRlciA9IHRoaXMuX2dldEdMU0xGcmFnbWVudENvZGUoIHNoYWRlcnNEYXRhLmZyYWdtZW50ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVTaGFkZXIgPSB0aGlzLl9nZXRHTFNMVmVydGV4Q29kZSggc2hhZGVyc0RhdGEuY29tcHV0ZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgb25lIG9mIHRoZSBtb3JlIGltcG9ydGFudCBvbmVzIHNpbmNlIGl0J3MgcmVzcG9uc2libGVcblx0ICogZm9yIGdlbmVyYXRpbmcgYSBtYXRjaGluZyBiaW5kaW5nIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gdW5pZm9ybSBub2RlLlxuXHQgKlxuXHQgKiBUaGVzZSBiaW5kaW5ncyBhcmUgbGF0ZXIgdXNlZCBpbiB0aGUgcmVuZGVyZXIgdG8gY3JlYXRlIGJpbmQgZ3JvdXBzXG5cdCAqIGFuZCBsYXlvdXRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1VuaWZvcm1Ob2RlfSBub2RlIC0gVGhlIHVuaWZvcm0gbm9kZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgbm9kZSBkYXRhIHR5cGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gW25hbWU9bnVsbF0gLSBBbiBvcHRpb25hbCB1bmlmb3JtIG5hbWUuXG5cdCAqIEByZXR1cm4ge05vZGVVbmlmb3JtfSBUaGUgbm9kZSB1bmlmb3JtIG9iamVjdC5cblx0ICovXG5cdGdldFVuaWZvcm1Gcm9tTm9kZSggbm9kZSwgdHlwZSwgc2hhZGVyU3RhZ2UsIG5hbWUgPSBudWxsICkge1xuXG5cdFx0Y29uc3QgdW5pZm9ybU5vZGUgPSBzdXBlci5nZXRVbmlmb3JtRnJvbU5vZGUoIG5vZGUsIHR5cGUsIHNoYWRlclN0YWdlLCBuYW1lICk7XG5cdFx0Y29uc3Qgbm9kZURhdGEgPSB0aGlzLmdldERhdGFGcm9tTm9kZSggbm9kZSwgc2hhZGVyU3RhZ2UsIHRoaXMuZ2xvYmFsQ2FjaGUgKTtcblxuXHRcdGxldCB1bmlmb3JtR1BVID0gbm9kZURhdGEudW5pZm9ybUdQVTtcblxuXHRcdGlmICggdW5pZm9ybUdQVSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBncm91cCA9IG5vZGUuZ3JvdXBOb2RlO1xuXHRcdFx0Y29uc3QgZ3JvdXBOYW1lID0gZ3JvdXAubmFtZTtcblxuXHRcdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLmdldEJpbmRHcm91cEFycmF5KCBncm91cE5hbWUsIHNoYWRlclN0YWdlICk7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gJ3RleHR1cmUnICkge1xuXG5cdFx0XHRcdHVuaWZvcm1HUFUgPSBuZXcgTm9kZVNhbXBsZWRUZXh0dXJlKCB1bmlmb3JtTm9kZS5uYW1lLCB1bmlmb3JtTm9kZS5ub2RlLCBncm91cCApO1xuXHRcdFx0XHRiaW5kaW5ncy5wdXNoKCB1bmlmb3JtR1BVICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09ICdjdWJlVGV4dHVyZScgKSB7XG5cblx0XHRcdFx0dW5pZm9ybUdQVSA9IG5ldyBOb2RlU2FtcGxlZEN1YmVUZXh0dXJlKCB1bmlmb3JtTm9kZS5uYW1lLCB1bmlmb3JtTm9kZS5ub2RlLCBncm91cCApO1xuXHRcdFx0XHRiaW5kaW5ncy5wdXNoKCB1bmlmb3JtR1BVICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09ICd0ZXh0dXJlM0QnICkge1xuXG5cdFx0XHRcdHVuaWZvcm1HUFUgPSBuZXcgTm9kZVNhbXBsZWRUZXh0dXJlM0QoIHVuaWZvcm1Ob2RlLm5hbWUsIHVuaWZvcm1Ob2RlLm5vZGUsIGdyb3VwICk7XG5cdFx0XHRcdGJpbmRpbmdzLnB1c2goIHVuaWZvcm1HUFUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gJ2J1ZmZlcicgKSB7XG5cblx0XHRcdFx0bm9kZS5uYW1lID0gYE5vZGVCdWZmZXJfJHsgbm9kZS5pZCB9YDtcblx0XHRcdFx0dW5pZm9ybU5vZGUubmFtZSA9IGBidWZmZXIkeyBub2RlLmlkIH1gO1xuXG5cdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IG5ldyBOb2RlVW5pZm9ybUJ1ZmZlciggbm9kZSwgZ3JvdXAgKTtcblx0XHRcdFx0YnVmZmVyLm5hbWUgPSBub2RlLm5hbWU7XG5cblx0XHRcdFx0YmluZGluZ3MucHVzaCggYnVmZmVyICk7XG5cblx0XHRcdFx0dW5pZm9ybUdQVSA9IGJ1ZmZlcjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3Jtc1N0YWdlID0gdGhpcy51bmlmb3JtR3JvdXBzWyBzaGFkZXJTdGFnZSBdIHx8ICggdGhpcy51bmlmb3JtR3JvdXBzWyBzaGFkZXJTdGFnZSBdID0ge30gKTtcblxuXHRcdFx0XHRsZXQgdW5pZm9ybXNHcm91cCA9IHVuaWZvcm1zU3RhZ2VbIGdyb3VwTmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdW5pZm9ybXNHcm91cCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXNHcm91cCA9IG5ldyBOb2RlVW5pZm9ybXNHcm91cCggc2hhZGVyU3RhZ2UgKyAnXycgKyBncm91cE5hbWUsIGdyb3VwICk7XG5cdFx0XHRcdFx0Ly91bmlmb3Jtc0dyb3VwLnNldFZpc2liaWxpdHkoIGdwdVNoYWRlclN0YWdlTGliWyBzaGFkZXJTdGFnZSBdICk7XG5cblx0XHRcdFx0XHR1bmlmb3Jtc1N0YWdlWyBncm91cE5hbWUgXSA9IHVuaWZvcm1zR3JvdXA7XG5cblx0XHRcdFx0XHRiaW5kaW5ncy5wdXNoKCB1bmlmb3Jtc0dyb3VwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHVuaWZvcm1HUFUgPSB0aGlzLmdldE5vZGVVbmlmb3JtKCB1bmlmb3JtTm9kZSwgdHlwZSApO1xuXG5cdFx0XHRcdHVuaWZvcm1zR3JvdXAuYWRkVW5pZm9ybSggdW5pZm9ybUdQVSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG5vZGVEYXRhLnVuaWZvcm1HUFUgPSB1bmlmb3JtR1BVO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuaWZvcm1Ob2RlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBHTFNMTm9kZUJ1aWxkZXI7XG4iLCJsZXQgX3ZlY3RvcjIgPSBudWxsO1xubGV0IF9jb2xvcjQgPSBudWxsO1xuXG5pbXBvcnQgQ29sb3I0IGZyb20gJy4vQ29sb3I0LmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgY3JlYXRlQ2FudmFzRWxlbWVudCwgd2Fybk9uY2UgfSBmcm9tICcuLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgeyBSRVZJU0lPTiB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogTW9zdCBvZiB0aGUgcmVuZGVyaW5nIHJlbGF0ZWQgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gdGhlXG4gKiB7QGxpbmsgUmVuZGVyZXJ9IG1vZHVsZSBhbmQgcmVsYXRlZCBtYW5hZ2VtZW50IGNvbXBvbmVudHMuXG4gKiBTb21ldGltZXMgaXQgaXMgcmVxdWlyZWQgdGhvdWdoIHRvIGV4ZWN1dGUgY29tbWFuZHMgd2hpY2ggYXJlXG4gKiBzcGVjaWZpYyB0byB0aGUgY3VycmVudCAzRCBiYWNrZW5kICh3aGljaCBpcyBXZWJHUFUgb3IgV2ViR0wgMikuXG4gKiBUaGlzIGFic3RyYWN0IGJhc2UgY2xhc3MgZGVmaW5lcyBhbiBpbnRlcmZhY2UgdGhhdCBlbmNhcHN1bGF0ZXNcbiAqIGFsbCBiYWNrZW5kLXJlbGF0ZWQgbG9naWMuIERlcml2ZWQgY2xhc3NlcyBmb3IgZWFjaCBiYWNrZW5kIG11c3RcbiAqIGltcGxlbWVudCB0aGUgaW50ZXJmYWNlLlxuICpcbiAqIEBhYnN0cmFjdFxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQmFja2VuZCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYmFja2VuZC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMgLSBBbiBvYmplY3QgaG9sZGluZyBwYXJhbWV0ZXJzIGZvciB0aGUgYmFja2VuZC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzID0ge30gKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcGFyYW1ldGVycyBvZiB0aGUgYmFja2VuZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHBhcmFtZXRlcnMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgd2VhayBtYXAgaG9sZHMgYmFja2VuZC1zcGVjaWZpYyBkYXRhIG9mIG9iamVjdHNcblx0XHQgKiBsaWtlIHRleHR1cmVzLCBhdHRyaWJ1dGVzIG9yIHJlbmRlciB0YXJnZXRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1dlYWtNYXB9XG5cdFx0ICovXG5cdFx0dGhpcy5kYXRhID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSByZW5kZXJlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/UmVuZGVyZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucmVuZGVyZXIgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIGNhbnZhcyBlbGVtZW50IHRoZSByZW5kZXJlciBpcyBkcmF3aW5nIHRvLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez8oSFRNTENhbnZhc0VsZW1lbnR8T2Zmc2NyZWVuQ2FudmFzKX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kb21FbGVtZW50ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSB0aW1lc3RhbXAgcXVlcnkgcG9vbC5cbiAgIFx0XHQgKlxuICAgXHRcdCAqIEB0eXBlIHt7cmVuZGVyOiA/VGltZXN0YW1wUXVlcnlQb29sLCBjb21wdXRlOiA/VGltZXN0YW1wUXVlcnlQb29sfX1cblx0XHQgKi9cblx0XHR0aGlzLnRpbWVzdGFtcFF1ZXJ5UG9vbCA9IHtcblx0XHRcdCdyZW5kZXInOiBudWxsLFxuXHRcdFx0J2NvbXB1dGUnOiBudWxsXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBiYWNrZW5kIHNvIGl0IGlzIHJlYWR5IGZvciB1c2FnZS4gQ29uY3JldGUgYmFja2VuZHNcblx0ICogYXJlIHN1cHBvc2VkIHRvIGltcGxlbWVudCB0aGVpciByZW5kZXJpbmcgY29udGV4dCBjcmVhdGlvbiBhbmQgcmVsYXRlZFxuXHQgKiBvcGVyYXRpb25zIGluIHRoaXMgbWV0aG9kLlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGJhY2tlbmQgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG5cdCAqL1xuXHRhc3luYyBpbml0KCByZW5kZXJlciApIHtcblxuXHRcdHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGUgYmFja2VuZC5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEByZWFkb25seVxuXHQgKi9cblx0Z2V0IGNvb3JkaW5hdGVTeXN0ZW0oKSB7fVxuXG5cdC8vIHJlbmRlciBjb250ZXh0XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGV4ZWN1dGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSByZW5kZXIgY2FsbCBhbmRcblx0ICogY2FuIGJlIHVzZWQgYnkgdGhlIGJhY2tlbmQgdG8gcHJlcGFyZSB0aGUgc3RhdGUgZm9yIHVwY29taW5nXG5cdCAqIGRyYXcgY2FsbHMuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqL1xuXHRiZWdpblJlbmRlciggLypyZW5kZXJDb250ZXh0Ki8gKSB7fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBleGVjdXRlZCBhdCB0aGUgZW5kIG9mIGEgcmVuZGVyIGNhbGwgYW5kXG5cdCAqIGNhbiBiZSB1c2VkIGJ5IHRoZSBiYWNrZW5kIHRvIGZpbmFsaXplIHdvcmsgYWZ0ZXIgZHJhd1xuXHQgKiBjYWxscy5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICovXG5cdGZpbmlzaFJlbmRlciggLypyZW5kZXJDb250ZXh0Ki8gKSB7fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBleGVjdXRlZCBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgY29tcHV0ZSBjYWxsIGFuZFxuXHQgKiBjYW4gYmUgdXNlZCBieSB0aGUgYmFja2VuZCB0byBwcmVwYXJlIHRoZSBzdGF0ZSBmb3IgdXBjb21pbmdcblx0ICogY29tcHV0ZSB0YXNrcy5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7Tm9kZXxBcnJheTxOb2RlPn0gY29tcHV0ZUdyb3VwIC0gVGhlIGNvbXB1dGUgbm9kZShzKS5cblx0ICovXG5cdGJlZ2luQ29tcHV0ZSggLypjb21wdXRlR3JvdXAqLyApIHt9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGV4ZWN1dGVkIGF0IHRoZSBlbmQgb2YgYSBjb21wdXRlIGNhbGwgYW5kXG5cdCAqIGNhbiBiZSB1c2VkIGJ5IHRoZSBiYWNrZW5kIHRvIGZpbmFsaXplIHdvcmsgYWZ0ZXIgY29tcHV0ZVxuXHQgKiB0YXNrcy5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7Tm9kZXxBcnJheTxOb2RlPn0gY29tcHV0ZUdyb3VwIC0gVGhlIGNvbXB1dGUgbm9kZShzKS5cblx0ICovXG5cdGZpbmlzaENvbXB1dGUoIC8qY29tcHV0ZUdyb3VwKi8gKSB7fVxuXG5cdC8vIHJlbmRlciBvYmplY3RcblxuXHQvKipcblx0ICogRXhlY3V0ZXMgYSBkcmF3IGNvbW1hbmQgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0IHRvIGRyYXcuXG5cdCAqIEBwYXJhbSB7SW5mb30gaW5mbyAtIEhvbGRzIGEgc2VyaWVzIG9mIHN0YXRpc3RpY2FsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBHUFUgbWVtb3J5IGFuZCB0aGUgcmVuZGVyaW5nIHByb2Nlc3MuXG5cdCAqL1xuXHRkcmF3KCAvKnJlbmRlck9iamVjdCwgaW5mbyovICkgeyB9XG5cblx0Ly8gY29tcHV0ZSBub2RlXG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVzIGEgY29tcHV0ZSBjb21tYW5kIGZvciB0aGUgZ2l2ZW4gY29tcHV0ZSBub2RlLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtOb2RlfEFycmF5PE5vZGU+fSBjb21wdXRlR3JvdXAgLSBUaGUgZ3JvdXAgb2YgY29tcHV0ZSBub2RlcyBvZiBhIGNvbXB1dGUgY2FsbC4gQ2FuIGJlIGEgc2luZ2xlIGNvbXB1dGUgbm9kZS5cblx0ICogQHBhcmFtIHtOb2RlfSBjb21wdXRlTm9kZSAtIFRoZSBjb21wdXRlIG5vZGUuXG5cdCAqIEBwYXJhbSB7QXJyYXk8QmluZEdyb3VwPn0gYmluZGluZ3MgLSBUaGUgYmluZGluZ3MuXG5cdCAqIEBwYXJhbSB7Q29tcHV0ZVBpcGVsaW5lfSBjb21wdXRlUGlwZWxpbmUgLSBUaGUgY29tcHV0ZSBwaXBlbGluZS5cblx0ICovXG5cdGNvbXB1dGUoIC8qY29tcHV0ZUdyb3VwLCBjb21wdXRlTm9kZSwgY29tcHV0ZUJpbmRpbmdzLCBjb21wdXRlUGlwZWxpbmUqLyApIHsgfVxuXG5cdC8vIHByb2dyYW1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHNoYWRlciBwcm9ncmFtIGZyb20gdGhlIGdpdmVuIHByb2dyYW1tYWJsZSBzdGFnZS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7UHJvZ3JhbW1hYmxlU3RhZ2V9IHByb2dyYW0gLSBUaGUgcHJvZ3JhbW1hYmxlIHN0YWdlLlxuXHQgKi9cblx0Y3JlYXRlUHJvZ3JhbSggLypwcm9ncmFtKi8gKSB7IH1cblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIHNoYWRlciBwcm9ncmFtIG9mIHRoZSBnaXZlbiBwcm9ncmFtbWFibGUgc3RhZ2UuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge1Byb2dyYW1tYWJsZVN0YWdlfSBwcm9ncmFtIC0gVGhlIHByb2dyYW1tYWJsZSBzdGFnZS5cblx0ICovXG5cdGRlc3Ryb3lQcm9ncmFtKCAvKnByb2dyYW0qLyApIHsgfVxuXG5cdC8vIGJpbmRpbmdzXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYmluZGluZ3MgZnJvbSB0aGUgZ2l2ZW4gYmluZCBncm91cCBkZWZpbml0aW9uLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtCaW5kR3JvdXB9IGJpbmRHcm91cCAtIFRoZSBiaW5kIGdyb3VwLlxuXHQgKiBAcGFyYW0ge0FycmF5PEJpbmRHcm91cD59IGJpbmRpbmdzIC0gQXJyYXkgb2YgYmluZCBncm91cHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjYWNoZUluZGV4IC0gVGhlIGNhY2hlIGluZGV4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmVyc2lvbiAtIFRoZSB2ZXJzaW9uLlxuXHQgKi9cblx0Y3JlYXRlQmluZGluZ3MoIC8qYmluZEdyb3VwLCBiaW5kaW5ncywgY2FjaGVJbmRleCwgdmVyc2lvbiovICkgeyB9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGdpdmVuIGJpbmQgZ3JvdXAgZGVmaW5pdGlvbi5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7QmluZEdyb3VwfSBiaW5kR3JvdXAgLSBUaGUgYmluZCBncm91cC5cblx0ICogQHBhcmFtIHtBcnJheTxCaW5kR3JvdXA+fSBiaW5kaW5ncyAtIEFycmF5IG9mIGJpbmQgZ3JvdXBzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gY2FjaGVJbmRleCAtIFRoZSBjYWNoZSBpbmRleC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHZlcnNpb24gLSBUaGUgdmVyc2lvbi5cblx0ICovXG5cdHVwZGF0ZUJpbmRpbmdzKCAvKmJpbmRHcm91cCwgYmluZGluZ3MsIGNhY2hlSW5kZXgsIHZlcnNpb24qLyApIHsgfVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGEgYnVmZmVyIGJpbmRpbmcuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge0J1ZmZlcn0gYmluZGluZyAtIFRoZSBidWZmZXIgYmluZGluZyB0byB1cGRhdGUuXG5cdCAqL1xuXHR1cGRhdGVCaW5kaW5nKCAvKmJpbmRpbmcqLyApIHsgfVxuXG5cdC8vIHBpcGVsaW5lXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSByZW5kZXIgcGlwZWxpbmUgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0FycmF5PFByb21pc2U+fSBwcm9taXNlcyAtIEFuIGFycmF5IG9mIGNvbXBpbGF0aW9uIHByb21pc2VzIHdoaWNoIGFyZSB1c2VkIGluIGBjb21waWxlQXN5bmMoKWAuXG5cdCAqL1xuXHRjcmVhdGVSZW5kZXJQaXBlbGluZSggLypyZW5kZXJPYmplY3QsIHByb21pc2VzKi8gKSB7IH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGNvbXB1dGUgcGlwZWxpbmUgZm9yIHRoZSBnaXZlbiBjb21wdXRlIG5vZGUuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge0NvbXB1dGVQaXBlbGluZX0gY29tcHV0ZVBpcGVsaW5lIC0gVGhlIGNvbXB1dGUgcGlwZWxpbmUuXG5cdCAqIEBwYXJhbSB7QXJyYXk8QmluZEdyb3VwPn0gYmluZGluZ3MgLSBUaGUgYmluZGluZ3MuXG5cdCAqL1xuXHRjcmVhdGVDb21wdXRlUGlwZWxpbmUoIC8qY29tcHV0ZVBpcGVsaW5lLCBiaW5kaW5ncyovICkgeyB9XG5cblx0Ly8gY2FjaGUga2V5XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSByZW5kZXIgcGlwZWxpbmUgcmVxdWlyZXMgYW4gdXBkYXRlLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSByZW5kZXIgcGlwZWxpbmUgcmVxdWlyZXMgYW4gdXBkYXRlIG9yIG5vdC5cblx0ICovXG5cdG5lZWRzUmVuZGVyVXBkYXRlKCAvKnJlbmRlck9iamVjdCovICkgeyB9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBjYWNoZSBrZXkgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IHJlbmRlciBwaXBlbGluZXMuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNhY2hlIGtleS5cblx0ICovXG5cdGdldFJlbmRlckNhY2hlS2V5KCAvKnJlbmRlck9iamVjdCovICkgeyB9XG5cblx0Ly8gbm9kZSBidWlsZGVyXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBub2RlIGJ1aWxkZXIgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cblx0ICogQHJldHVybiB7Tm9kZUJ1aWxkZXJ9IFRoZSBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRjcmVhdGVOb2RlQnVpbGRlciggLypyZW5kZXJPYmplY3QsIHJlbmRlcmVyKi8gKSB7IH1cblxuXHQvLyB0ZXh0dXJlc1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgR1BVIHNhbXBsZXIgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gY3JlYXRlIHRoZSBzYW1wbGVyIGZvci5cblx0ICovXG5cdGNyZWF0ZVNhbXBsZXIoIC8qdGV4dHVyZSovICkgeyB9XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIHRoZSBHUFUgc2FtcGxlciBmb3IgdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBkZXN0cm95IHRoZSBzYW1wbGVyIGZvci5cblx0ICovXG5cdGRlc3Ryb3lTYW1wbGVyKCAvKnRleHR1cmUqLyApIHt9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBkZWZhdWx0IHRleHR1cmUgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIHRoYXQgY2FuIGJlIHVzZWRcblx0ICogYXMgYSBwbGFjZWhvbGRlciB1bnRpbCB0aGUgYWN0dWFsIHRleHR1cmUgaXMgcmVhZHkgZm9yIHVzYWdlLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gY3JlYXRlIGEgZGVmYXVsdCB0ZXh0dXJlIGZvci5cblx0ICovXG5cdGNyZWF0ZURlZmF1bHRUZXh0dXJlKCAvKnRleHR1cmUqLyApIHsgfVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIGEgdGV4dHVyZSBvbiB0aGUgR1BVIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZSBvYmplY3QuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyLlxuXHQgKi9cblx0Y3JlYXRlVGV4dHVyZSggLyp0ZXh0dXJlLCBvcHRpb25zPXt9Ki8gKSB7IH1cblxuXHQvKipcblx0ICogVXBsb2FkcyB0aGUgdXBkYXRlZCB0ZXh0dXJlIGRhdGEgdG8gdGhlIEdQVS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHR1cGRhdGVUZXh0dXJlKCAvKnRleHR1cmUsIG9wdGlvbnMgPSB7fSovICkgeyB9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBtaXBtYXBzIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKi9cblx0Z2VuZXJhdGVNaXBtYXBzKCAvKnRleHR1cmUqLyApIHsgfVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgR1BVIGRhdGEgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIG9iamVjdC5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKi9cblx0ZGVzdHJveVRleHR1cmUoIC8qdGV4dHVyZSovICkgeyB9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGV4dHVyZSBkYXRhIGFzIGEgdHlwZWQgYXJyYXkuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAYXN5bmNcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBjb3B5IG9yaWdpbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBjb3B5IG9yaWdpbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBjb3B5LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGZhY2VJbmRleCAtIFRoZSBmYWNlIGluZGV4LlxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPFR5cGVkQXJyYXk+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgdHlwZWQgYXJyYXkgd2hlbiB0aGUgY29weSBvcGVyYXRpb24gaGFzIGZpbmlzaGVkLlxuXHQgKi9cblx0YXN5bmMgY29weVRleHR1cmVUb0J1ZmZlciggLyp0ZXh0dXJlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBmYWNlSW5kZXgqLyApIHt9XG5cblx0LyoqXG5cdCAqIENvcGllcyBkYXRhIG9mIHRoZSBnaXZlbiBzb3VyY2UgdGV4dHVyZSB0byB0aGUgZ2l2ZW4gZGVzdGluYXRpb24gdGV4dHVyZS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gc3JjVGV4dHVyZSAtIFRoZSBzb3VyY2UgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtUZXh0dXJlfSBkc3RUZXh0dXJlIC0gVGhlIGRlc3RpbmF0aW9uIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7PyhCb3gzfEJveDIpfSBbc3JjUmVnaW9uPW51bGxdIC0gVGhlIHJlZ2lvbiBvZiB0aGUgc291cmNlIHRleHR1cmUgdG8gY29weS5cblx0ICogQHBhcmFtIHs/KFZlY3RvcjJ8VmVjdG9yMyl9IFtkc3RQb3NpdGlvbj1udWxsXSAtIFRoZSBkZXN0aW5hdGlvbiBwb3NpdGlvbiBvZiB0aGUgY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzcmNMZXZlbD0wXSAtIFRoZSBzb3VyY2UgbWlwIGxldmVsIHRvIGNvcHkgZnJvbS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkc3RMZXZlbD0wXSAtIFRoZSBkZXN0aW5hdGlvbiBtaXAgbGV2ZWwgdG8gY29weSB0by5cblx0ICovXG5cdGNvcHlUZXh0dXJlVG9UZXh0dXJlKCAvKnNyY1RleHR1cmUsIGRzdFRleHR1cmUsIHNyY1JlZ2lvbiA9IG51bGwsIGRzdFBvc2l0aW9uID0gbnVsbCwgc3JjTGV2ZWwgPSAwLCBkc3RMZXZlbCA9IDAqLyApIHt9XG5cblx0LyoqXG5cdCogQ29waWVzIHRoZSBjdXJyZW50IGJvdW5kIGZyYW1lYnVmZmVyIHRvIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHQqXG5cdCogQGFic3RyYWN0XG5cdCogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIGRlc3RpbmF0aW9uIHRleHR1cmUuXG5cdCogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQqIEBwYXJhbSB7VmVjdG9yNH0gcmVjdGFuZ2xlIC0gQSBmb3VyIGRpbWVuc2lvbmFsIHZlY3RvciBkZWZpbmluZyB0aGUgb3JpZ2luIGFuZCBkaW1lbnNpb24gb2YgdGhlIGNvcHkuXG5cdCovXG5cdGNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSggLyp0ZXh0dXJlLCByZW5kZXJDb250ZXh0LCByZWN0YW5nbGUqLyApIHt9XG5cblx0Ly8gYXR0cmlidXRlc1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBHUFUgYnVmZmVyIG9mIGEgc2hhZGVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICovXG5cdGNyZWF0ZUF0dHJpYnV0ZSggLyphdHRyaWJ1dGUqLyApIHsgfVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBHUFUgYnVmZmVyIG9mIGFuIGluZGV4ZWQgc2hhZGVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgaW5kZXhlZCBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0Y3JlYXRlSW5kZXhBdHRyaWJ1dGUoIC8qYXR0cmlidXRlKi8gKSB7IH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgR1BVIGJ1ZmZlciBvZiBhIHN0b3JhZ2UgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0Y3JlYXRlU3RvcmFnZUF0dHJpYnV0ZSggLyphdHRyaWJ1dGUqLyApIHsgfVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBHUFUgYnVmZmVyIG9mIGEgc2hhZGVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZSB0byB1cGRhdGUuXG5cdCAqL1xuXHR1cGRhdGVBdHRyaWJ1dGUoIC8qYXR0cmlidXRlKi8gKSB7IH1cblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIEdQVSBidWZmZXIgb2YgYSBzaGFkZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlIHRvIGRlc3Ryb3kuXG5cdCAqL1xuXHRkZXN0cm95QXR0cmlidXRlKCAvKmF0dHJpYnV0ZSovICkgeyB9XG5cblx0Ly8gY2FudmFzXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGJhY2tlbmQncyByZW5kZXJpbmcgY29udGV4dC5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlbmRlcmluZyBjb250ZXh0LlxuXHQgKi9cblx0Z2V0Q29udGV4dCgpIHsgfVxuXG5cdC8qKlxuXHQgKiBCYWNrZW5kcyBjYW4gdXNlIHRoaXMgbWV0aG9kIGlmIHRoZXkgaGF2ZSB0byBydW5cblx0ICogbG9naWMgd2hlbiB0aGUgcmVuZGVyZXIgZ2V0cyByZXNpemVkLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICovXG5cdHVwZGF0ZVNpemUoKSB7IH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgdmlld3BvcnQgd2l0aCB0aGUgdmFsdWVzIGZyb20gdGhlIGdpdmVuIHJlbmRlciBjb250ZXh0LlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKi9cblx0dXBkYXRlVmlld3BvcnQoIC8qcmVuZGVyQ29udGV4dCovICkge31cblxuXHQvLyB1dGlsc1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gM0Qgb2JqZWN0IGlzIGZ1bGx5IG9jY2x1ZGVkIGJ5IG90aGVyXG5cdCAqIDNEIG9iamVjdHMgaW4gdGhlIHNjZW5lLiBCYWNrZW5kcyBtdXN0IGltcGxlbWVudCB0aGlzIG1ldGhvZCBieSB1c2luZ1xuXHQgKiBhIE9jY2x1c2lvbiBRdWVyeSBBUEkuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QgdG8gdGVzdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgM0Qgb2JqZWN0IGlzIGZ1bGx5IG9jY2x1ZGVkIG9yIG5vdC5cblx0ICovXG5cdGlzT2NjbHVkZWQoIC8qcmVuZGVyQ29udGV4dCwgb2JqZWN0Ki8gKSB7fVxuXG5cdC8qKlxuXHQgKiBSZXNvbHZlcyB0aGUgdGltZSBzdGFtcCBmb3IgdGhlIGdpdmVuIHJlbmRlciBjb250ZXh0IGFuZCB0eXBlLlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZT0ncmVuZGVyJ10gLSBUaGUgdHlwZSBvZiB0aGUgdGltZSBzdGFtcC5cblx0ICogQHJldHVybiB7UHJvbWlzZTxudW1iZXI+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0aW1lIHN0YW1wLlxuXHQgKi9cblx0YXN5bmMgcmVzb2x2ZVRpbWVzdGFtcHNBc3luYyggdHlwZSA9ICdyZW5kZXInICkge1xuXG5cdFx0aWYgKCAhIHRoaXMudHJhY2tUaW1lc3RhbXAgKSB7XG5cblx0XHRcdHdhcm5PbmNlKCAnV2ViR1BVUmVuZGVyZXI6IFRpbWVzdGFtcCB0cmFja2luZyBpcyBkaXNhYmxlZC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRjb25zdCBxdWVyeVBvb2wgPSB0aGlzLnRpbWVzdGFtcFF1ZXJ5UG9vbFsgdHlwZSBdO1xuXHRcdGlmICggISBxdWVyeVBvb2wgKSB7XG5cblx0XHRcdHdhcm5PbmNlKCBgV2ViR1BVUmVuZGVyZXI6IE5vIHRpbWVzdGFtcCBxdWVyeSBwb29sIGZvciB0eXBlICcke3R5cGV9JyBmb3VuZC5gICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRjb25zdCBkdXJhdGlvbiA9IGF3YWl0IHF1ZXJ5UG9vbC5yZXNvbHZlUXVlcmllc0FzeW5jKCk7XG5cblx0XHR0aGlzLnJlbmRlcmVyLmluZm9bIHR5cGUgXS50aW1lc3RhbXAgPSBkdXJhdGlvbjtcblxuXHRcdHJldHVybiBkdXJhdGlvbjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhbiBiZSB1c2VkIHRvIHN5bmNocm9uaXplIENQVSBvcGVyYXRpb25zIHdpdGggR1BVIHRhc2tzLiBTbyB3aGVuIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCxcblx0ICogdGhlIENQVSB3YWl0cyBmb3IgdGhlIEdQVSB0byBjb21wbGV0ZSBpdHMgb3BlcmF0aW9uIChlLmcuIGEgY29tcHV0ZSB0YXNrKS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHN5bmNocm9uaXphdGlvbiBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICovXG5cdGFzeW5jIHdhaXRGb3JHUFUoKSB7fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyBhIHJlYWRiYWNrIG9wZXJhdGlvbiBieSBtb3ZpbmcgYnVmZmVyIGRhdGEgZnJvbVxuXHQgKiBhIHN0b3JhZ2UgYnVmZmVyIGF0dHJpYnV0ZSBmcm9tIHRoZSBHUFUgdG8gdGhlIENQVS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7U3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIHN0b3JhZ2UgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGJ1ZmZlciBkYXRhIHdoZW4gdGhlIGRhdGEgYXJlIHJlYWR5LlxuXHQgKi9cblx0YXN5bmMgZ2V0QXJyYXlCdWZmZXJBc3luYyggLyogYXR0cmlidXRlICovICkge31cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBmZWF0dXJlIGlzIHN1cHBvcnRlZCBieSB0aGUgYmFja2VuZC5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBmZWF0dXJlJ3MgbmFtZS5cblx0ICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2wgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZmVhdHVyZSBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHQgKi9cblx0YXN5bmMgaGFzRmVhdHVyZUFzeW5jKCAvKm5hbWUqLyApIHsgfVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICBieSB0aGUgYmFja2VuZC5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGZlYXR1cmUncyBuYW1lLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBmZWF0dXJlIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqL1xuXHRoYXNGZWF0dXJlKCAvKm5hbWUqLyApIHt9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG1heGltdW0gYW5pc290cm9weSB0ZXh0dXJlIGZpbHRlcmluZyB2YWx1ZS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIG1heGltdW0gYW5pc290cm9weSB0ZXh0dXJlIGZpbHRlcmluZyB2YWx1ZS5cblx0ICovXG5cdGdldE1heEFuaXNvdHJvcHkoKSB7fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBkcmF3aW5nIGJ1ZmZlciBzaXplLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgZHJhd2luZyBidWZmZXIgc2l6ZS5cblx0ICovXG5cdGdldERyYXdpbmdCdWZmZXJTaXplKCkge1xuXG5cdFx0X3ZlY3RvcjIgPSBfdmVjdG9yMiB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVuZGVyZXIuZ2V0RHJhd2luZ0J1ZmZlclNpemUoIF92ZWN0b3IyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBzY2lzc29yIHRlc3QuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGJvb2xlYW4gLSBXaGV0aGVyIHRoZSBzY2lzc29yIHRlc3Qgc2hvdWxkIGJlIGVuYWJsZWQgb3Igbm90LlxuXHQgKi9cblx0c2V0U2Npc3NvclRlc3QoIC8qYm9vbGVhbiovICkgeyB9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNsZWFyIGNvbG9yIGFuZCBhbHBoYSBpbnRvIGEgc2luZ2xlXG5cdCAqIGNvbG9yIG9iamVjdC5cblx0ICpcblx0ICogQHJldHVybiB7Q29sb3I0fSBUaGUgY2xlYXIgY29sb3IuXG5cdCAqL1xuXHRnZXRDbGVhckNvbG9yKCkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXG5cdFx0X2NvbG9yNCA9IF9jb2xvcjQgfHwgbmV3IENvbG9yNCgpO1xuXG5cdFx0cmVuZGVyZXIuZ2V0Q2xlYXJDb2xvciggX2NvbG9yNCApO1xuXG5cdFx0X2NvbG9yNC5nZXRSR0IoIF9jb2xvcjQgKTtcblxuXHRcdHJldHVybiBfY29sb3I0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgRE9NIGVsZW1lbnQuIElmIG5vIERPTSBlbGVtZW50IGV4aXN0cywgdGhlIGJhY2tlbmRcblx0ICogY3JlYXRlcyBhIG5ldyBvbmUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0hUTUxDYW52YXNFbGVtZW50fSBUaGUgRE9NIGVsZW1lbnQuXG5cdCAqL1xuXHRnZXREb21FbGVtZW50KCkge1xuXG5cdFx0bGV0IGRvbUVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQ7XG5cblx0XHRpZiAoIGRvbUVsZW1lbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdGRvbUVsZW1lbnQgPSAoIHRoaXMucGFyYW1ldGVycy5jYW52YXMgIT09IHVuZGVmaW5lZCApID8gdGhpcy5wYXJhbWV0ZXJzLmNhbnZhcyA6IGNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcblxuXHRcdFx0Ly8gT2Zmc2NyZWVuQ2FudmFzIGRvZXMgbm90IGhhdmUgc2V0QXR0cmlidXRlLCBzZWUgIzIyODExXG5cdFx0XHRpZiAoICdzZXRBdHRyaWJ1dGUnIGluIGRvbUVsZW1lbnQgKSBkb21FbGVtZW50LnNldEF0dHJpYnV0ZSggJ2RhdGEtZW5naW5lJywgYHRocmVlLmpzIHIke1JFVklTSU9OfSB3ZWJncHVgICk7XG5cblx0XHRcdHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZG9tRWxlbWVudDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgYSBkaWN0aW9uYXJ5IGZvciB0aGUgZ2l2ZW4gb2JqZWN0IGludG8gdGhlXG5cdCAqIGludGVybmFsIGRhdGEgc3RydWN0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IC0gVGhlIG9iamVjdC5cblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIC0gVGhlIGRpY3Rpb25hcnkgdG8gc2V0LlxuXHQgKi9cblx0c2V0KCBvYmplY3QsIHZhbHVlICkge1xuXG5cdFx0dGhpcy5kYXRhLnNldCggb2JqZWN0LCB2YWx1ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGljdGlvbmFyeSBmb3IgdGhlIGdpdmVuIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCAtIFRoZSBvYmplY3QuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIG9iamVjdCdzIGRpY3Rpb25hcnkuXG5cdCAqL1xuXHRnZXQoIG9iamVjdCApIHtcblxuXHRcdGxldCBtYXAgPSB0aGlzLmRhdGEuZ2V0KCBvYmplY3QgKTtcblxuXHRcdGlmICggbWFwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hcCA9IHt9O1xuXHRcdFx0dGhpcy5kYXRhLnNldCggb2JqZWN0LCBtYXAgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgYSBkaWN0aW9uYXJ5XG5cdCAqIHdpdGggZGF0YSBkZWZpbmVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IC0gVGhlIG9iamVjdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhIGRpY3Rpb25hcnkgZm9yIHRoZSBnaXZlbiBvYmplY3QgYXMgYmVlbiBkZWZpbmVkIG9yIG5vdC5cblx0ICovXG5cdGhhcyggb2JqZWN0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5oYXMoIG9iamVjdCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVsZXRlcyBhbiBvYmplY3QgZnJvbSB0aGUgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBUaGUgb2JqZWN0IHRvIGRlbGV0ZS5cblx0ICovXG5cdGRlbGV0ZSggb2JqZWN0ICkge1xuXG5cdFx0dGhpcy5kYXRhLmRlbGV0ZSggb2JqZWN0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyBpbnRlcm5hbCByZXNvdXJjZXMuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKi9cblx0ZGlzcG9zZSgpIHsgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhY2tlbmQ7XG4iLCJpbXBvcnQgeyBJbnRUeXBlIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzLmpzJztcblxubGV0IF9pZCA9IDA7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgaXMgaW50ZXJuYWxseSB1c2VkIGluIGNvbnRleHQgb2YgY29tcHV0ZSBzaGFkZXJzLlxuICogVGhpcyB0eXBlIG9mIHNoYWRlciBpcyBub3QgbmF0aXZlbHkgc3VwcG9ydGVkIGluIFdlYkdMIDIgYW5kXG4gKiB0aHVzIGltcGxlbWVudGVkIHZpYSBUcmFuc2Zvcm0gRmVlZGJhY2suIGBEdWFsQXR0cmlidXRlRGF0YWBcbiAqIG1hbmFnZXMgdGhlIHJlbGF0ZWQgZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBEdWFsQXR0cmlidXRlRGF0YSB7XG5cblx0Y29uc3RydWN0b3IoIGF0dHJpYnV0ZURhdGEsIGR1YWxCdWZmZXIgKSB7XG5cblx0XHR0aGlzLmJ1ZmZlcnMgPSBbIGF0dHJpYnV0ZURhdGEuYnVmZmVyR1BVLCBkdWFsQnVmZmVyIF07XG5cdFx0dGhpcy50eXBlID0gYXR0cmlidXRlRGF0YS50eXBlO1xuXHRcdHRoaXMuYnVmZmVyVHlwZSA9IGF0dHJpYnV0ZURhdGEuYnVmZmVyVHlwZTtcblx0XHR0aGlzLnBibyA9IGF0dHJpYnV0ZURhdGEucGJvO1xuXHRcdHRoaXMuYnl0ZUxlbmd0aCA9IGF0dHJpYnV0ZURhdGEuYnl0ZUxlbmd0aDtcblx0XHR0aGlzLmJ5dGVzUGVyRWxlbWVudCA9IGF0dHJpYnV0ZURhdGEuQllURVNfUEVSX0VMRU1FTlQ7XG5cdFx0dGhpcy52ZXJzaW9uID0gYXR0cmlidXRlRGF0YS52ZXJzaW9uO1xuXHRcdHRoaXMuaXNJbnRlZ2VyID0gYXR0cmlidXRlRGF0YS5pc0ludGVnZXI7XG5cdFx0dGhpcy5hY3RpdmVCdWZmZXJJbmRleCA9IDA7XG5cdFx0dGhpcy5iYXNlSWQgPSBhdHRyaWJ1dGVEYXRhLmlkO1xuXG5cdH1cblxuXG5cdGdldCBpZCgpIHtcblxuXHRcdHJldHVybiBgJHsgdGhpcy5iYXNlSWQgfXwkeyB0aGlzLmFjdGl2ZUJ1ZmZlckluZGV4IH1gO1xuXG5cdH1cblxuXHRnZXQgYnVmZmVyR1BVKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYnVmZmVyc1sgdGhpcy5hY3RpdmVCdWZmZXJJbmRleCBdO1xuXG5cdH1cblxuXHRnZXQgdHJhbnNmb3JtQnVmZmVyKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYnVmZmVyc1sgdGhpcy5hY3RpdmVCdWZmZXJJbmRleCBeIDEgXTtcblxuXHR9XG5cblx0c3dpdGNoQnVmZmVycygpIHtcblxuXHRcdHRoaXMuYWN0aXZlQnVmZmVySW5kZXggXj0gMTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIFdlYkdMIDIgYmFja2VuZCB1dGlsaXR5IG1vZHVsZSBmb3IgbWFuYWdpbmcgc2hhZGVyIGF0dHJpYnV0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgV2ViR0xBdHRyaWJ1dGVVdGlscyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdXRpbGl0eSBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR0xCYWNrZW5kfSBiYWNrZW5kIC0gVGhlIFdlYkdMIDIgYmFja2VuZC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBiYWNrZW5kICkge1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIFdlYkdMIDIgYmFja2VuZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHTEJhY2tlbmR9XG5cdFx0ICovXG5cdFx0dGhpcy5iYWNrZW5kID0gYmFja2VuZDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIEdQVSBidWZmZXIgZm9yIHRoZSBnaXZlbiBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7R0xlbnVtIH0gYnVmZmVyVHlwZSAtIEEgZmxhZyB0aGF0IGluZGljYXRlcyB0aGUgYnVmZmVyIHR5cGUgYW5kIHRodXMgYmluZGluZyBwb2ludCB0YXJnZXQuXG5cdCAqL1xuXHRjcmVhdGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdGNvbnN0IGJhY2tlbmQgPSB0aGlzLmJhY2tlbmQ7XG5cdFx0Y29uc3QgeyBnbCB9ID0gYmFja2VuZDtcblxuXHRcdGNvbnN0IGFycmF5ID0gYXR0cmlidXRlLmFycmF5O1xuXHRcdGNvbnN0IHVzYWdlID0gYXR0cmlidXRlLnVzYWdlIHx8IGdsLlNUQVRJQ19EUkFXO1xuXG5cdFx0Y29uc3QgYnVmZmVyQXR0cmlidXRlID0gYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgPyBhdHRyaWJ1dGUuZGF0YSA6IGF0dHJpYnV0ZTtcblx0XHRjb25zdCBidWZmZXJEYXRhID0gYmFja2VuZC5nZXQoIGJ1ZmZlckF0dHJpYnV0ZSApO1xuXG5cdFx0bGV0IGJ1ZmZlckdQVSA9IGJ1ZmZlckRhdGEuYnVmZmVyR1BVO1xuXG5cdFx0aWYgKCBidWZmZXJHUFUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YnVmZmVyR1BVID0gdGhpcy5fY3JlYXRlQnVmZmVyKCBnbCwgYnVmZmVyVHlwZSwgYXJyYXksIHVzYWdlICk7XG5cblx0XHRcdGJ1ZmZlckRhdGEuYnVmZmVyR1BVID0gYnVmZmVyR1BVO1xuXHRcdFx0YnVmZmVyRGF0YS5idWZmZXJUeXBlID0gYnVmZmVyVHlwZTtcblx0XHRcdGJ1ZmZlckRhdGEudmVyc2lvbiA9IGJ1ZmZlckF0dHJpYnV0ZS52ZXJzaW9uO1xuXG5cdFx0fVxuXG5cdFx0Ly9hdHRyaWJ1dGUub25VcGxvYWRDYWxsYmFjaygpO1xuXG5cdFx0bGV0IHR5cGU7XG5cblx0XHRpZiAoIGFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuRkxPQVQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5ICkge1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5pc0Zsb2F0MTZCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0dHlwZSA9IGdsLkhBTEZfRkxPQVQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dHlwZSA9IGdsLlVOU0lHTkVEX1NIT1JUO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5TSE9SVDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5VTlNJR05FRF9JTlQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5JTlQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLkJZVEU7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5VTlNJR05FRF9CWVRFO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLlVOU0lHTkVEX0JZVEU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTEJhY2tlbmQ6IFVuc3VwcG9ydGVkIGJ1ZmZlciBkYXRhIGZvcm1hdDogJyArIGFycmF5ICk7XG5cblx0XHR9XG5cblx0XHRsZXQgYXR0cmlidXRlRGF0YSA9IHtcblx0XHRcdGJ1ZmZlckdQVSxcblx0XHRcdGJ1ZmZlclR5cGUsXG5cdFx0XHR0eXBlLFxuXHRcdFx0Ynl0ZUxlbmd0aDogYXJyYXkuYnl0ZUxlbmd0aCxcblx0XHRcdGJ5dGVzUGVyRWxlbWVudDogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHR2ZXJzaW9uOiBhdHRyaWJ1dGUudmVyc2lvbixcblx0XHRcdHBibzogYXR0cmlidXRlLnBibyxcblx0XHRcdGlzSW50ZWdlcjogdHlwZSA9PT0gZ2wuSU5UIHx8IHR5cGUgPT09IGdsLlVOU0lHTkVEX0lOVCB8fCBhdHRyaWJ1dGUuZ3B1VHlwZSA9PT0gSW50VHlwZSxcblx0XHRcdGlkOiBfaWQgKytcblx0XHR9O1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNTdG9yYWdlQnVmZmVyQXR0cmlidXRlIHx8IGF0dHJpYnV0ZS5pc1N0b3JhZ2VJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdC8vIGNyZWF0ZSBidWZmZXIgZm9yIHRyYW5zZm9ybSBmZWVkYmFjayB1c2Vcblx0XHRcdGNvbnN0IGJ1ZmZlckdQVUR1YWwgPSB0aGlzLl9jcmVhdGVCdWZmZXIoIGdsLCBidWZmZXJUeXBlLCBhcnJheSwgdXNhZ2UgKTtcblx0XHRcdGF0dHJpYnV0ZURhdGEgPSBuZXcgRHVhbEF0dHJpYnV0ZURhdGEoIGF0dHJpYnV0ZURhdGEsIGJ1ZmZlckdQVUR1YWwgKTtcblxuXHRcdH1cblxuXHRcdGJhY2tlbmQuc2V0KCBhdHRyaWJ1dGUsIGF0dHJpYnV0ZURhdGEgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIEdQVSBidWZmZXIgb2YgdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICovXG5cdHVwZGF0ZUF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0Y29uc3QgYmFja2VuZCA9IHRoaXMuYmFja2VuZDtcblx0XHRjb25zdCB7IGdsIH0gPSBiYWNrZW5kO1xuXG5cdFx0Y29uc3QgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0Y29uc3QgYnVmZmVyQXR0cmlidXRlID0gYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgPyBhdHRyaWJ1dGUuZGF0YSA6IGF0dHJpYnV0ZTtcblx0XHRjb25zdCBidWZmZXJEYXRhID0gYmFja2VuZC5nZXQoIGJ1ZmZlckF0dHJpYnV0ZSApO1xuXHRcdGNvbnN0IGJ1ZmZlclR5cGUgPSBidWZmZXJEYXRhLmJ1ZmZlclR5cGU7XG5cdFx0Y29uc3QgdXBkYXRlUmFuZ2VzID0gYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgPyBhdHRyaWJ1dGUuZGF0YS51cGRhdGVSYW5nZXMgOiBhdHRyaWJ1dGUudXBkYXRlUmFuZ2VzO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyRGF0YS5idWZmZXJHUFUgKTtcblxuXHRcdGlmICggdXBkYXRlUmFuZ2VzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gTm90IHVzaW5nIHVwZGF0ZSByYW5nZXNcblxuXHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgMCwgYXJyYXkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHVwZGF0ZVJhbmdlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHJhbmdlID0gdXBkYXRlUmFuZ2VzWyBpIF07XG5cdFx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIHJhbmdlLnN0YXJ0ICogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdFx0YXJyYXksIHJhbmdlLnN0YXJ0LCByYW5nZS5jb3VudCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJ1ZmZlckF0dHJpYnV0ZS5jbGVhclVwZGF0ZVJhbmdlcygpO1xuXG5cdFx0fVxuXG5cdFx0Z2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgbnVsbCApO1xuXG5cdFx0YnVmZmVyRGF0YS52ZXJzaW9uID0gYnVmZmVyQXR0cmlidXRlLnZlcnNpb247XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgR1BVIGJ1ZmZlciBvZiB0aGUgZ2l2ZW4gYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0ZGVzdHJveUF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0Y29uc3QgYmFja2VuZCA9IHRoaXMuYmFja2VuZDtcblx0XHRjb25zdCB7IGdsIH0gPSBiYWNrZW5kO1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0YmFja2VuZC5kZWxldGUoIGF0dHJpYnV0ZS5kYXRhICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhdHRyaWJ1dGVEYXRhID0gYmFja2VuZC5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0Z2wuZGVsZXRlQnVmZmVyKCBhdHRyaWJ1dGVEYXRhLmJ1ZmZlckdQVSApO1xuXG5cdFx0YmFja2VuZC5kZWxldGUoIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgcGVyZm9ybXMgYSByZWFkYmFjayBvcGVyYXRpb24gYnkgbW92aW5nIGJ1ZmZlciBkYXRhIGZyb21cblx0ICogYSBzdG9yYWdlIGJ1ZmZlciBhdHRyaWJ1dGUgZnJvbSB0aGUgR1BVIHRvIHRoZSBDUFUuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcGFyYW0ge1N0b3JhZ2VCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBzdG9yYWdlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBidWZmZXIgZGF0YSB3aGVuIHRoZSBkYXRhIGFyZSByZWFkeS5cblx0ICovXG5cdGFzeW5jIGdldEFycmF5QnVmZmVyQXN5bmMoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGNvbnN0IGJhY2tlbmQgPSB0aGlzLmJhY2tlbmQ7XG5cdFx0Y29uc3QgeyBnbCB9ID0gYmFja2VuZDtcblxuXHRcdGNvbnN0IGJ1ZmZlckF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlID8gYXR0cmlidXRlLmRhdGEgOiBhdHRyaWJ1dGU7XG5cdFx0Y29uc3QgeyBidWZmZXJHUFUgfSA9IGJhY2tlbmQuZ2V0KCBidWZmZXJBdHRyaWJ1dGUgKTtcblxuXHRcdGNvbnN0IGFycmF5ID0gYXR0cmlidXRlLmFycmF5O1xuXHRcdGNvbnN0IGJ5dGVMZW5ndGggPSBhcnJheS5ieXRlTGVuZ3RoO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggZ2wuQ09QWV9SRUFEX0JVRkZFUiwgYnVmZmVyR1BVICk7XG5cblx0XHRjb25zdCB3cml0ZUJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggZ2wuQ09QWV9XUklURV9CVUZGRVIsIHdyaXRlQnVmZmVyICk7XG5cdFx0Z2wuYnVmZmVyRGF0YSggZ2wuQ09QWV9XUklURV9CVUZGRVIsIGJ5dGVMZW5ndGgsIGdsLlNUUkVBTV9SRUFEICk7XG5cblx0XHRnbC5jb3B5QnVmZmVyU3ViRGF0YSggZ2wuQ09QWV9SRUFEX0JVRkZFUiwgZ2wuQ09QWV9XUklURV9CVUZGRVIsIDAsIDAsIGJ5dGVMZW5ndGggKTtcblxuXHRcdGF3YWl0IGJhY2tlbmQudXRpbHMuX2NsaWVudFdhaXRBc3luYygpO1xuXG5cdFx0Y29uc3QgZHN0QnVmZmVyID0gbmV3IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3RvciggYXJyYXkubGVuZ3RoICk7XG5cblx0XHQvLyBFbnN1cmUgdGhlIGJ1ZmZlciBpcyBib3VuZCBiZWZvcmUgcmVhZGluZ1xuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLkNPUFlfV1JJVEVfQlVGRkVSLCB3cml0ZUJ1ZmZlciApO1xuXG5cdFx0Z2wuZ2V0QnVmZmVyU3ViRGF0YSggZ2wuQ09QWV9XUklURV9CVUZGRVIsIDAsIGRzdEJ1ZmZlciApO1xuXG5cdFx0Z2wuZGVsZXRlQnVmZmVyKCB3cml0ZUJ1ZmZlciApO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggZ2wuQ09QWV9SRUFEX0JVRkZFUiwgbnVsbCApO1xuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLkNPUFlfV1JJVEVfQlVGRkVSLCBudWxsICk7XG5cblx0XHRyZXR1cm4gZHN0QnVmZmVyLmJ1ZmZlcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBXZWJHTCBidWZmZXIgd2l0aCB0aGUgZ2l2ZW4gZGF0YS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtXZWJHTDJSZW5kZXJpbmdDb250ZXh0fSBnbCAtIFRoZSByZW5kZXJpbmcgY29udGV4dC5cblx0ICogQHBhcmFtIHtHTGVudW0gfSBidWZmZXJUeXBlIC0gQSBmbGFnIHRoYXQgaW5kaWNhdGVzIHRoZSBidWZmZXIgdHlwZSBhbmQgdGh1cyBiaW5kaW5nIHBvaW50IHRhcmdldC5cblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBhcnJheSAtIFRoZSBhcnJheSBvZiB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHBhcmFtIHtHTGVudW19IHVzYWdlIC0gVGhlIHVzYWdlLlxuXHQgKiBAcmV0dXJuIHtXZWJHTEJ1ZmZlcn0gVGhlIFdlYkdMIGJ1ZmZlci5cblx0ICovXG5cdF9jcmVhdGVCdWZmZXIoIGdsLCBidWZmZXJUeXBlLCBhcnJheSwgdXNhZ2UgKSB7XG5cblx0XHRjb25zdCBidWZmZXJHUFUgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGJ1ZmZlclR5cGUsIGJ1ZmZlckdQVSApO1xuXHRcdGdsLmJ1ZmZlckRhdGEoIGJ1ZmZlclR5cGUsIGFycmF5LCB1c2FnZSApO1xuXHRcdGdsLmJpbmRCdWZmZXIoIGJ1ZmZlclR5cGUsIG51bGwgKTtcblxuXHRcdHJldHVybiBidWZmZXJHUFU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYkdMQXR0cmlidXRlVXRpbHM7XG4iLCJpbXBvcnQge1xuXHRDdWxsRmFjZU5vbmUsIEN1bGxGYWNlQmFjaywgQ3VsbEZhY2VGcm9udCwgRG91YmxlU2lkZSwgQmFja1NpZGUsXG5cdE5vcm1hbEJsZW5kaW5nLCBOb0JsZW5kaW5nLCBDdXN0b21CbGVuZGluZywgQWRkRXF1YXRpb24sXG5cdEFkZGl0aXZlQmxlbmRpbmcsIFN1YnRyYWN0aXZlQmxlbmRpbmcsIE11bHRpcGx5QmxlbmRpbmcsIFN1YnRyYWN0RXF1YXRpb24sIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uLFxuXHRaZXJvRmFjdG9yLCBPbmVGYWN0b3IsIFNyY0NvbG9yRmFjdG9yLCBTcmNBbHBoYUZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgRHN0Q29sb3JGYWN0b3IsIERzdEFscGhhRmFjdG9yLFxuXHRPbmVNaW51c1NyY0NvbG9yRmFjdG9yLCBPbmVNaW51c1NyY0FscGhhRmFjdG9yLCBPbmVNaW51c0RzdENvbG9yRmFjdG9yLCBPbmVNaW51c0RzdEFscGhhRmFjdG9yLFxuXHROZXZlckRlcHRoLCBBbHdheXNEZXB0aCwgTGVzc0RlcHRoLCBMZXNzRXF1YWxEZXB0aCwgRXF1YWxEZXB0aCwgR3JlYXRlckVxdWFsRGVwdGgsIEdyZWF0ZXJEZXB0aCwgTm90RXF1YWxEZXB0aFxufSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gJy4uLy4uLy4uL21hdGgvVmVjdG9yNC5qcyc7XG5cbmxldCBlcXVhdGlvblRvR0wsIGZhY3RvclRvR0w7XG5cbi8qKlxuICogQSBXZWJHTCAyIGJhY2tlbmQgdXRpbGl0eSBtb2R1bGUgZm9yIG1hbmFnaW5nIHRoZSBXZWJHTCBzdGF0ZS5cbiAqXG4gKiBUaGUgbWFqb3IgZ29hbCBvZiB0aGlzIG1vZHVsZSBpcyB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBzdGF0ZSBjaGFuZ2VzXG4gKiBieSBjYWNoaW5nIHRoZSBXRWJHTCBzdGF0ZSB3aXRoIGEgc2VyaWVzIG9mIHZhcmlhYmxlcy4gSW4gdGhpcyB3YXksIHRoZVxuICogcmVuZGVyZXIgb25seSBleGVjdXRlcyBzdGF0ZSBjaGFuZ2UgY29tbWFuZHMgd2hlbiBuZWNlc3Nhcnkgd2hpY2hcbiAqIGltcHJvdmVzIHRoZSBvdmVyYWxsIHBlcmZvcm1hbmNlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFdlYkdMU3RhdGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHV0aWxpdHkgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMQmFja2VuZH0gYmFja2VuZCAtIFRoZSBXZWJHTCAyIGJhY2tlbmQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYmFja2VuZCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBXZWJHTCAyIGJhY2tlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2ViR0xCYWNrZW5kfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgcmVuZGVyaW5nIGNvbnRleHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2ViR0wyUmVuZGVyaW5nQ29udGV4dH1cblx0XHQgKi9cblx0XHR0aGlzLmdsID0gdGhpcy5iYWNrZW5kLmdsO1xuXG5cdFx0Ly8gQmVsb3cgcHJvcGVydGllcyBhcmUgaW50ZW5kZWQgdG8gY2FjaGVcblx0XHQvLyB0aGUgV2ViR0wgc3RhdGUgYW5kIGFyZSBub3QgZXhwbGljaXRseVxuXHRcdC8vIGRvY3VtZW50ZWQgZm9yIGNvbnZlbmllbmNlIHJlYXNvbnMuXG5cblx0XHR0aGlzLmVuYWJsZWQgPSB7fTtcblx0XHR0aGlzLmN1cnJlbnRGbGlwU2lkZWQgPSBudWxsO1xuXHRcdHRoaXMuY3VycmVudEN1bGxGYWNlID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSBmYWxzZTtcblx0XHR0aGlzLmN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50QmxlbmRTcmMgPSBudWxsO1xuXHRcdHRoaXMuY3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRCbGVuZERzdEFscGhhID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRDb2xvck1hc2sgPSBudWxsO1xuXHRcdHRoaXMuY3VycmVudERlcHRoRnVuYyA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50RGVwdGhNYXNrID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRTdGVuY2lsRnVuYyA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRTdGVuY2lsRmFpbCA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRTdGVuY2lsWlBhc3MgPSBudWxsO1xuXHRcdHRoaXMuY3VycmVudFN0ZW5jaWxNYXNrID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRMaW5lV2lkdGggPSBudWxsO1xuXHRcdHRoaXMuY3VycmVudENsaXBwaW5nUGxhbmVzID0gMDtcblxuXHRcdHRoaXMuY3VycmVudFZBTyA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50SW5kZXggPSBudWxsO1xuXG5cdFx0dGhpcy5jdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnMgPSB7fTtcblx0XHR0aGlzLmN1cnJlbnREcmF3YnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0XHR0aGlzLm1heFRleHR1cmVzID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIoIHRoaXMuZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMgKTtcblx0XHR0aGlzLmN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdFx0dGhpcy5jdXJyZW50Qm91bmRUZXh0dXJlcyA9IHt9O1xuXHRcdHRoaXMuY3VycmVudEJvdW5kQnVmZmVyQmFzZXMgPSB7fTtcblxuXG5cdFx0dGhpcy5faW5pdCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogSW5pdHMgdGhlIHN0YXRlIG9mIHRoZSB1dGlsaXR5LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2luaXQoKSB7XG5cblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cblx0XHQvLyBTdG9yZSBvbmx5IFdlYkdMIGNvbnN0YW50cyBoZXJlLlxuXG5cdFx0ZXF1YXRpb25Ub0dMID0ge1xuXHRcdFx0WyBBZGRFcXVhdGlvbiBdOiBnbC5GVU5DX0FERCxcblx0XHRcdFsgU3VidHJhY3RFcXVhdGlvbiBdOiBnbC5GVU5DX1NVQlRSQUNULFxuXHRcdFx0WyBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiBdOiBnbC5GVU5DX1JFVkVSU0VfU1VCVFJBQ1Rcblx0XHR9O1xuXG5cdFx0ZmFjdG9yVG9HTCA9IHtcblx0XHRcdFsgWmVyb0ZhY3RvciBdOiBnbC5aRVJPLFxuXHRcdFx0WyBPbmVGYWN0b3IgXTogZ2wuT05FLFxuXHRcdFx0WyBTcmNDb2xvckZhY3RvciBdOiBnbC5TUkNfQ09MT1IsXG5cdFx0XHRbIFNyY0FscGhhRmFjdG9yIF06IGdsLlNSQ19BTFBIQSxcblx0XHRcdFsgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciBdOiBnbC5TUkNfQUxQSEFfU0FUVVJBVEUsXG5cdFx0XHRbIERzdENvbG9yRmFjdG9yIF06IGdsLkRTVF9DT0xPUixcblx0XHRcdFsgRHN0QWxwaGFGYWN0b3IgXTogZ2wuRFNUX0FMUEhBLFxuXHRcdFx0WyBPbmVNaW51c1NyY0NvbG9yRmFjdG9yIF06IGdsLk9ORV9NSU5VU19TUkNfQ09MT1IsXG5cdFx0XHRbIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgXTogZ2wuT05FX01JTlVTX1NSQ19BTFBIQSxcblx0XHRcdFsgT25lTWludXNEc3RDb2xvckZhY3RvciBdOiBnbC5PTkVfTUlOVVNfRFNUX0NPTE9SLFxuXHRcdFx0WyBPbmVNaW51c0RzdEFscGhhRmFjdG9yIF06IGdsLk9ORV9NSU5VU19EU1RfQUxQSEFcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2Npc3NvclBhcmFtID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5TQ0lTU09SX0JPWCApO1xuXHRcdGNvbnN0IHZpZXdwb3J0UGFyYW0gPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLlZJRVdQT1JUICk7XG5cblx0XHR0aGlzLmN1cnJlbnRTY2lzc29yID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHNjaXNzb3JQYXJhbSApO1xuXHRcdHRoaXMuY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHZpZXdwb3J0UGFyYW0gKTtcblxuXHRcdHRoaXMuX3RlbXBWZWM0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgdGhlIGdpdmVuIFdlYkdMIGNhcGFiaWxpdHkuXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGNhY2hlcyB0aGUgY2FwYWJpbGl0eSBzdGF0ZSBzb1xuXHQgKiBgZ2wuZW5hYmxlKClgIGlzIG9ubHkgY2FsbGVkIHdoZW4gbmVjZXNzYXJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0dMZW51bX0gaWQgLSBUaGUgY2FwYWJpbGl0eSB0byBlbmFibGUuXG5cdCAqL1xuXHRlbmFibGUoIGlkICkge1xuXG5cdFx0Y29uc3QgeyBlbmFibGVkIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCBlbmFibGVkWyBpZCBdICE9PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLmdsLmVuYWJsZSggaWQgKTtcblx0XHRcdGVuYWJsZWRbIGlkIF0gPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGlzYWJsZXMgdGhlIGdpdmVuIFdlYkdMIGNhcGFiaWxpdHkuXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGNhY2hlcyB0aGUgY2FwYWJpbGl0eSBzdGF0ZSBzb1xuXHQgKiBgZ2wuZGlzYWJsZSgpYCBpcyBvbmx5IGNhbGxlZCB3aGVuIG5lY2Vzc2FyeS5cblx0ICpcblx0ICogQHBhcmFtIHtHTGVudW19IGlkIC0gVGhlIGNhcGFiaWxpdHkgdG8gZW5hYmxlLlxuXHQgKi9cblx0ZGlzYWJsZSggaWQgKSB7XG5cblx0XHRjb25zdCB7IGVuYWJsZWQgfSA9IHRoaXM7XG5cblx0XHRpZiAoIGVuYWJsZWRbIGlkIF0gIT09IGZhbHNlICkge1xuXG5cdFx0XHR0aGlzLmdsLmRpc2FibGUoIGlkICk7XG5cdFx0XHRlbmFibGVkWyBpZCBdID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTcGVjaWZpZXMgd2hldGhlciBwb2x5Z29ucyBhcmUgZnJvbnQtIG9yIGJhY2stZmFjaW5nXG5cdCAqIGJ5IHNldHRpbmcgdGhlIHdpbmRpbmcgb3JpZW50YXRpb24uXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGNhY2hlcyB0aGUgc3RhdGUgc28gYGdsLmZyb250RmFjZSgpYCBpcyBvbmx5XG5cdCAqIGNhbGxlZCB3aGVuIG5lY2Vzc2FyeS5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSBmbGlwU2lkZWQgLSBXaGV0aGVyIHRyaWFuZ2xlcyBmbGlwcGVkIHRoZWlyIHNpZGVzIG9yIG5vdC5cblx0ICovXG5cdHNldEZsaXBTaWRlZCggZmxpcFNpZGVkICkge1xuXG5cdFx0aWYgKCB0aGlzLmN1cnJlbnRGbGlwU2lkZWQgIT09IGZsaXBTaWRlZCApIHtcblxuXHRcdFx0Y29uc3QgeyBnbCB9ID0gdGhpcztcblxuXHRcdFx0aWYgKCBmbGlwU2lkZWQgKSB7XG5cblx0XHRcdFx0Z2wuZnJvbnRGYWNlKCBnbC5DVyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdsLmZyb250RmFjZSggZ2wuQ0NXICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5jdXJyZW50RmxpcFNpZGVkID0gZmxpcFNpZGVkO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IGZyb250LSBhbmQvb3IgYmFjay1mYWNpbmdcblx0ICogcG9seWdvbnMgY2FuIGJlIGN1bGxlZC5cblx0ICpcblx0ICogVGhpcyBtZXRob2QgY2FjaGVzIHRoZSBzdGF0ZSBzbyBgZ2wuY3VsbEZhY2UoKWAgaXMgb25seVxuXHQgKiBjYWxsZWQgd2hlbiBuZWNlc3NhcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjdWxsRmFjZSAtIERlZmluZXMgd2hpY2ggcG9seWdvbnMgYXJlIGNhbmRpZGF0ZXMgZm9yIGN1bGxpbmcuXG5cdCAqL1xuXHRzZXRDdWxsRmFjZSggY3VsbEZhY2UgKSB7XG5cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCBjdWxsRmFjZSAhPT0gQ3VsbEZhY2VOb25lICkge1xuXG5cdFx0XHR0aGlzLmVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cblx0XHRcdGlmICggY3VsbEZhY2UgIT09IHRoaXMuY3VycmVudEN1bGxGYWNlICkge1xuXG5cdFx0XHRcdGlmICggY3VsbEZhY2UgPT09IEN1bGxGYWNlQmFjayApIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCBnbC5CQUNLICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggY3VsbEZhY2UgPT09IEN1bGxGYWNlRnJvbnQgKSB7XG5cblx0XHRcdFx0XHRnbC5jdWxsRmFjZSggZ2wuRlJPTlQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIGdsLkZST05UX0FORF9CQUNLICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmRpc2FibGUoIGdsLkNVTExfRkFDRSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jdXJyZW50Q3VsbEZhY2UgPSBjdWxsRmFjZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNwZWNpZmllcyB0aGUgd2lkdGggb2YgbGluZSBwcmltaXRpdmVzLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5saW5lV2lkdGgoKWAgaXMgb25seVxuXHQgKiBjYWxsZWQgd2hlbiBuZWNlc3NhcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSBsaW5lIHdpZHRoLlxuXHQgKi9cblx0c2V0TGluZVdpZHRoKCB3aWR0aCApIHtcblxuXHRcdGNvbnN0IHsgY3VycmVudExpbmVXaWR0aCwgZ2wgfSA9IHRoaXM7XG5cblx0XHRpZiAoIHdpZHRoICE9PSBjdXJyZW50TGluZVdpZHRoICkge1xuXG5cdFx0XHRnbC5saW5lV2lkdGgoIHdpZHRoICk7XG5cblx0XHRcdHRoaXMuY3VycmVudExpbmVXaWR0aCA9IHdpZHRoO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgYmxlbmRpbmcuXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGNhY2hlcyB0aGUgc3RhdGUgc28gYGdsLmJsZW5kRXF1YXRpb24oKWAsIGBnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoKWAsXG5cdCAqIGBnbC5ibGVuZEZ1bmMoKWAgYW5kICBgZ2wuYmxlbmRGdW5jU2VwYXJhdGUoKWAgYXJlIG9ubHkgY2FsbGVkIHdoZW4gbmVjZXNzYXJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYmxlbmRpbmcgLSBUaGUgYmxlbmRpbmcgdHlwZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGJsZW5kRXF1YXRpb24gLSBUaGUgYmxlbmRpbmcgZXF1YXRpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBibGVuZFNyYyAtIE9ubHkgcmVsZXZhbnQgZm9yIGN1c3RvbSBibGVuZGluZy4gVGhlIFJHQiBzb3VyY2UgYmxlbmRpbmcgZmFjdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYmxlbmREc3QgLSBPbmx5IHJlbGV2YW50IGZvciBjdXN0b20gYmxlbmRpbmcuIFRoZSBSR0IgZGVzdGluYXRpb24gYmxlbmRpbmcgZmFjdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYmxlbmRFcXVhdGlvbkFscGhhIC0gT25seSByZWxldmFudCBmb3IgY3VzdG9tIGJsZW5kaW5nLiBUaGUgYmxlbmRpbmcgZXF1YXRpb24gZm9yIGFscGhhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYmxlbmRTcmNBbHBoYSAtIE9ubHkgcmVsZXZhbnQgZm9yIGN1c3RvbSBibGVuZGluZy4gVGhlIGFscGhhIHNvdXJjZSBibGVuZGluZyBmYWN0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBibGVuZERzdEFscGhhIC0gT25seSByZWxldmFudCBmb3IgY3VzdG9tIGJsZW5kaW5nLiBUaGUgYWxwaGEgZGVzdGluYXRpb24gYmxlbmRpbmcgZmFjdG9yLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHByZW11bHRpcGxpZWRBbHBoYSAtIFdoZXRoZXIgcHJlbXVsdGlwbGllZCBhbHBoYSBpcyBlbmFibGVkIG9yIG5vdC5cblx0ICovXG5cdHNldEJsZW5kaW5nKCBibGVuZGluZywgYmxlbmRFcXVhdGlvbiwgYmxlbmRTcmMsIGJsZW5kRHN0LCBibGVuZEVxdWF0aW9uQWxwaGEsIGJsZW5kU3JjQWxwaGEsIGJsZW5kRHN0QWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cblx0XHRpZiAoIGJsZW5kaW5nID09PSBOb0JsZW5kaW5nICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR0aGlzLmRpc2FibGUoIGdsLkJMRU5EICk7XG5cdFx0XHRcdHRoaXMuY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jdXJyZW50QmxlbmRpbmdFbmFibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0dGhpcy5lbmFibGUoIGdsLkJMRU5EICk7XG5cdFx0XHR0aGlzLmN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBibGVuZGluZyAhPT0gQ3VzdG9tQmxlbmRpbmcgKSB7XG5cblx0XHRcdGlmICggYmxlbmRpbmcgIT09IHRoaXMuY3VycmVudEJsZW5kaW5nIHx8IHByZW11bHRpcGxpZWRBbHBoYSAhPT0gdGhpcy5jdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgKSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLmN1cnJlbnRCbGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiB8fCB0aGlzLmN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgIT09IEFkZEVxdWF0aW9uICkge1xuXG5cdFx0XHRcdFx0Z2wuYmxlbmRFcXVhdGlvbiggZ2wuRlVOQ19BREQgKTtcblxuXHRcdFx0XHRcdHRoaXMuY3VycmVudEJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcblx0XHRcdFx0XHR0aGlzLmN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBBZGRFcXVhdGlvbjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBibGVuZGluZyApIHtcblxuXHRcdFx0XHRcdFx0Y2FzZSBOb3JtYWxCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEFkZGl0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggZ2wuT05FLCBnbC5PTkUgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgU3VidHJhY3RpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGdsLlpFUk8sIGdsLk9ORV9NSU5VU19TUkNfQ09MT1IsIGdsLlpFUk8sIGdsLk9ORSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBNdWx0aXBseUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZ2wuWkVSTywgZ2wuU1JDX0NPTE9SLCBnbC5aRVJPLCBnbC5TUkNfQUxQSEEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c3dpdGNoICggYmxlbmRpbmcgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIGdsLlNSQ19BTFBIQSwgZ2wuT05FICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5aRVJPLCBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SLCBnbC5aRVJPLCBnbC5PTkUgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCBnbC5aRVJPLCBnbC5TUkNfQ09MT1IgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5jdXJyZW50QmxlbmRTcmMgPSBudWxsO1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRCbGVuZERzdCA9IG51bGw7XG5cdFx0XHRcdHRoaXMuY3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRCbGVuZERzdEFscGhhID0gbnVsbDtcblxuXHRcdFx0XHR0aGlzLmN1cnJlbnRCbGVuZGluZyA9IGJsZW5kaW5nO1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBjdXN0b20gYmxlbmRpbmdcblxuXHRcdGJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYSB8fCBibGVuZEVxdWF0aW9uO1xuXHRcdGJsZW5kU3JjQWxwaGEgPSBibGVuZFNyY0FscGhhIHx8IGJsZW5kU3JjO1xuXHRcdGJsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhIHx8IGJsZW5kRHN0O1xuXG5cdFx0aWYgKCBibGVuZEVxdWF0aW9uICE9PSB0aGlzLmN1cnJlbnRCbGVuZEVxdWF0aW9uIHx8IGJsZW5kRXF1YXRpb25BbHBoYSAhPT0gdGhpcy5jdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoIGVxdWF0aW9uVG9HTFsgYmxlbmRFcXVhdGlvbiBdLCBlcXVhdGlvblRvR0xbIGJsZW5kRXF1YXRpb25BbHBoYSBdICk7XG5cblx0XHRcdHRoaXMuY3VycmVudEJsZW5kRXF1YXRpb24gPSBibGVuZEVxdWF0aW9uO1xuXHRcdFx0dGhpcy5jdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gYmxlbmRFcXVhdGlvbkFscGhhO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBibGVuZFNyYyAhPT0gdGhpcy5jdXJyZW50QmxlbmRTcmMgfHwgYmxlbmREc3QgIT09IHRoaXMuY3VycmVudEJsZW5kRHN0IHx8IGJsZW5kU3JjQWxwaGEgIT09IHRoaXMuY3VycmVudEJsZW5kU3JjQWxwaGEgfHwgYmxlbmREc3RBbHBoYSAhPT0gdGhpcy5jdXJyZW50QmxlbmREc3RBbHBoYSApIHtcblxuXHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGZhY3RvclRvR0xbIGJsZW5kU3JjIF0sIGZhY3RvclRvR0xbIGJsZW5kRHN0IF0sIGZhY3RvclRvR0xbIGJsZW5kU3JjQWxwaGEgXSwgZmFjdG9yVG9HTFsgYmxlbmREc3RBbHBoYSBdICk7XG5cblx0XHRcdHRoaXMuY3VycmVudEJsZW5kU3JjID0gYmxlbmRTcmM7XG5cdFx0XHR0aGlzLmN1cnJlbnRCbGVuZERzdCA9IGJsZW5kRHN0O1xuXHRcdFx0dGhpcy5jdXJyZW50QmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGE7XG5cdFx0XHR0aGlzLmN1cnJlbnRCbGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7XG5cdFx0dGhpcy5jdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBmYWxzZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNwZWNpZmllcyB3aGV0aGVyIGNvbG9ycyBjYW4gYmUgd3JpdHRlbiB3aGVuIHJlbmRlcmluZ1xuXHQgKiBpbnRvIGEgZnJhbWVidWZmZXIgb3Igbm90LlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5jb2xvck1hc2soKWAgaXMgb25seVxuXHQgKiBjYWxsZWQgd2hlbiBuZWNlc3NhcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gY29sb3JNYXNrIC0gVGhlIGNvbG9yIG1hc2suXG5cdCAqL1xuXHRzZXRDb2xvck1hc2soIGNvbG9yTWFzayApIHtcblxuXHRcdGlmICggdGhpcy5jdXJyZW50Q29sb3JNYXNrICE9PSBjb2xvck1hc2sgKSB7XG5cblx0XHRcdHRoaXMuZ2wuY29sb3JNYXNrKCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2sgKTtcblx0XHRcdHRoaXMuY3VycmVudENvbG9yTWFzayA9IGNvbG9yTWFzaztcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBkZXB0aCB0ZXN0IGlzIGVuYWJsZWQgb3Igbm90LlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGRlcHRoVGVzdCAtIFdoZXRoZXIgdGhlIGRlcHRoIHRlc3QgaXMgZW5hYmxlZCBvciBub3QuXG5cdCAqL1xuXHRzZXREZXB0aFRlc3QoIGRlcHRoVGVzdCApIHtcblxuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cblx0XHRpZiAoIGRlcHRoVGVzdCApIHtcblxuXHRcdFx0dGhpcy5lbmFibGUoIGdsLkRFUFRIX1RFU1QgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZGlzYWJsZSggZ2wuREVQVEhfVEVTVCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU3BlY2lmaWVzIHdoZXRoZXIgZGVwdGggdmFsdWVzIGNhbiBiZSB3cml0dGVuIHdoZW4gcmVuZGVyaW5nXG5cdCAqIGludG8gYSBmcmFtZWJ1ZmZlciBvciBub3QuXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGNhY2hlcyB0aGUgc3RhdGUgc28gYGdsLmRlcHRoTWFzaygpYCBpcyBvbmx5XG5cdCAqIGNhbGxlZCB3aGVuIG5lY2Vzc2FyeS5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSBkZXB0aE1hc2sgLSBUaGUgZGVwdGggbWFzay5cblx0ICovXG5cdHNldERlcHRoTWFzayggZGVwdGhNYXNrICkge1xuXG5cdFx0aWYgKCB0aGlzLmN1cnJlbnREZXB0aE1hc2sgIT09IGRlcHRoTWFzayApIHtcblxuXHRcdFx0dGhpcy5nbC5kZXB0aE1hc2soIGRlcHRoTWFzayApO1xuXHRcdFx0dGhpcy5jdXJyZW50RGVwdGhNYXNrID0gZGVwdGhNYXNrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU3BlY2lmaWVzIHRoZSBkZXB0aCBjb21wYXJlIGZ1bmN0aW9uLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5kZXB0aEZ1bmMoKWAgaXMgb25seVxuXHQgKiBjYWxsZWQgd2hlbiBuZWNlc3NhcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aEZ1bmMgLSBUaGUgZGVwdGggY29tcGFyZSBmdW5jdGlvbi5cblx0ICovXG5cdHNldERlcHRoRnVuYyggZGVwdGhGdW5jICkge1xuXG5cdFx0aWYgKCB0aGlzLmN1cnJlbnREZXB0aEZ1bmMgIT09IGRlcHRoRnVuYyApIHtcblxuXHRcdFx0Y29uc3QgeyBnbCB9ID0gdGhpcztcblxuXHRcdFx0c3dpdGNoICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdGNhc2UgTmV2ZXJEZXB0aDpcblxuXHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuTkVWRVIgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIEFsd2F5c0RlcHRoOlxuXG5cdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5BTFdBWVMgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIExlc3NEZXB0aDpcblxuXHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuTEVTUyApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgTGVzc0VxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkxFUVVBTCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuRVFVQUwgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIEdyZWF0ZXJFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5HRVFVQUwgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIEdyZWF0ZXJEZXB0aDpcblxuXHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuR1JFQVRFUiApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgTm90RXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuTk9URVFVQUwgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5MRVFVQUwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmN1cnJlbnREZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTcGVjaWZpZXMgdGhlIHNjaXNzb3IgYm94LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4LWNvb3JkaW5hdGUgb2YgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSB2aWV3cG9ydC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeS1jb29yZGluYXRlIG9mIHRoZSBsb3dlciBsZWZ0IGNvcm5lciBvZiB0aGUgdmlld3BvcnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgdmlld3BvcnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydC5cblx0ICpcblx0ICovXG5cdHNjaXNzb3IoIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRjb25zdCBzY2lzc29yID0gdGhpcy5fdGVtcFZlYzQuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRpZiAoIHRoaXMuY3VycmVudFNjaXNzb3IuZXF1YWxzKCBzY2lzc29yICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXG5cdFx0XHRnbC5zY2lzc29yKCBzY2lzc29yLngsIHNjaXNzb3IueSwgc2Npc3Nvci56LCBzY2lzc29yLncgKTtcblx0XHRcdHRoaXMuY3VycmVudFNjaXNzb3IuY29weSggc2Npc3NvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU3BlY2lmaWVzIHRoZSB2aWV3cG9ydC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgeC1jb29yZGluYXRlIG9mIHRoZSBsb3dlciBsZWZ0IGNvcm5lciBvZiB0aGUgdmlld3BvcnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHktY29vcmRpbmF0ZSBvZiB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIHZpZXdwb3J0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHZpZXdwb3J0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQuXG5cdCAqXG5cdCAqL1xuXHR2aWV3cG9ydCggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGNvbnN0IHZpZXdwb3J0ID0gdGhpcy5fdGVtcFZlYzQuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRpZiAoIHRoaXMuY3VycmVudFZpZXdwb3J0LmVxdWFscyggdmlld3BvcnQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cblx0XHRcdGdsLnZpZXdwb3J0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC56LCB2aWV3cG9ydC53ICk7XG5cdFx0XHR0aGlzLmN1cnJlbnRWaWV3cG9ydC5jb3B5KCB2aWV3cG9ydCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgc2Npc3NvciB0ZXN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGJvb2xlYW4gLSBXaGV0aGVyIHRoZSBzY2lzc29yIHRlc3Qgc2hvdWxkIGJlIGVuYWJsZWQgb3Igbm90LlxuXHQgKi9cblx0c2V0U2Npc3NvclRlc3QoIGJvb2xlYW4gKSB7XG5cblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cblx0XHRpZiAoIGJvb2xlYW4gKSB7XG5cblx0XHRcdGdsLmVuYWJsZSggZ2wuU0NJU1NPUl9URVNUICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRnbC5kaXNhYmxlKCBnbC5TQ0lTU09SX1RFU1QgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBzdGVuY2lsIHRlc3QgaXMgZW5hYmxlZCBvciBub3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RlbmNpbFRlc3QgLSBXaGV0aGVyIHRoZSBzdGVuY2lsIHRlc3QgaXMgZW5hYmxlZCBvciBub3QuXG5cdCAqL1xuXHRzZXRTdGVuY2lsVGVzdCggc3RlbmNpbFRlc3QgKSB7XG5cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0dGhpcy5lbmFibGUoIGdsLlNURU5DSUxfVEVTVCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5kaXNhYmxlKCBnbC5TVEVOQ0lMX1RFU1QgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNwZWNpZmllcyB3aGV0aGVyIHN0ZW5jaWwgdmFsdWVzIGNhbiBiZSB3cml0dGVuIHdoZW4gcmVuZGVyaW5nXG5cdCAqIGludG8gYSBmcmFtZWJ1ZmZlciBvciBub3QuXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGNhY2hlcyB0aGUgc3RhdGUgc28gYGdsLnN0ZW5jaWxNYXNrKClgIGlzIG9ubHlcblx0ICogY2FsbGVkIHdoZW4gbmVjZXNzYXJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHN0ZW5jaWxNYXNrIC0gVGhlIHN0ZW5jaWwgbWFzay5cblx0ICovXG5cdHNldFN0ZW5jaWxNYXNrKCBzdGVuY2lsTWFzayApIHtcblxuXHRcdGlmICggdGhpcy5jdXJyZW50U3RlbmNpbE1hc2sgIT09IHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHR0aGlzLmdsLnN0ZW5jaWxNYXNrKCBzdGVuY2lsTWFzayApO1xuXHRcdFx0dGhpcy5jdXJyZW50U3RlbmNpbE1hc2sgPSBzdGVuY2lsTWFzaztcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBzdGVuY2lsIHRlc3QgZnVuY3Rpb25zLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5zdGVuY2lsRnVuYygpYCBpcyBvbmx5XG5cdCAqIGNhbGxlZCB3aGVuIG5lY2Vzc2FyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHN0ZW5jaWxGdW5jIC0gVGhlIHN0ZW5jaWwgY29tcGFyZSBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHN0ZW5jaWxSZWYgLSBUaGUgcmVmZXJlbmNlIHZhbHVlIGZvciB0aGUgc3RlbmNpbCB0ZXN0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RlbmNpbE1hc2sgLSBBIGJpdC13aXNlIG1hc2sgdGhhdCBpcyB1c2VkIHRvIEFORCB0aGUgcmVmZXJlbmNlIHZhbHVlIGFuZCB0aGUgc3RvcmVkIHN0ZW5jaWwgdmFsdWUgd2hlbiB0aGUgdGVzdCBpcyBkb25lLlxuXHQgKi9cblx0c2V0U3RlbmNpbEZ1bmMoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApIHtcblxuXHRcdGlmICggdGhpcy5jdXJyZW50U3RlbmNpbEZ1bmMgIT09IHN0ZW5jaWxGdW5jIHx8XG5cdFx0XHQgdGhpcy5jdXJyZW50U3RlbmNpbFJlZiAhPT0gc3RlbmNpbFJlZiB8fFxuXHRcdFx0IHRoaXMuY3VycmVudFN0ZW5jaWxGdW5jTWFzayAhPT0gc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdHRoaXMuZ2wuc3RlbmNpbEZ1bmMoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApO1xuXG5cdFx0XHR0aGlzLmN1cnJlbnRTdGVuY2lsRnVuYyA9IHN0ZW5jaWxGdW5jO1xuXHRcdFx0dGhpcy5jdXJyZW50U3RlbmNpbFJlZiA9IHN0ZW5jaWxSZWY7XG5cdFx0XHR0aGlzLmN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBzdGVuY2lsTWFzaztcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBzdGVuY2lsIHRlc3Qgb3BlcmF0aW9uLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5zdGVuY2lsT3AoKWAgaXMgb25seVxuXHQgKiBjYWxsZWQgd2hlbiBuZWNlc3NhcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzdGVuY2lsRmFpbCAtIFRoZSBmdW5jdGlvbiB0byB1c2Ugd2hlbiB0aGUgc3RlbmNpbCB0ZXN0IGZhaWxzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RlbmNpbFpGYWlsIC0gVGhlIGZ1bmN0aW9uIHRvIHVzZSB3aGVuIHRoZSBzdGVuY2lsIHRlc3QgcGFzc2VzLCBidXQgdGhlIGRlcHRoIHRlc3QgZmFpbC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHN0ZW5jaWxaUGFzcyAtIFRoZSBmdW5jdGlvbiB0byB1c2Ugd2hlbiBib3RoIHRoZSBzdGVuY2lsIHRlc3QgYW5kIHRoZSBkZXB0aCB0ZXN0IHBhc3MsXG5cdCAqIG9yIHdoZW4gdGhlIHN0ZW5jaWwgdGVzdCBwYXNzZXMgYW5kIHRoZXJlIGlzIG5vIGRlcHRoIGJ1ZmZlciBvciBkZXB0aCB0ZXN0aW5nIGlzIGRpc2FibGVkLlxuXHQgKi9cblx0c2V0U3RlbmNpbE9wKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKSB7XG5cblx0XHRpZiAoIHRoaXMuY3VycmVudFN0ZW5jaWxGYWlsICE9PSBzdGVuY2lsRmFpbCB8fFxuXHRcdFx0IHRoaXMuY3VycmVudFN0ZW5jaWxaRmFpbCAhPT0gc3RlbmNpbFpGYWlsIHx8XG5cdFx0XHQgdGhpcy5jdXJyZW50U3RlbmNpbFpQYXNzICE9PSBzdGVuY2lsWlBhc3MgKSB7XG5cblx0XHRcdHRoaXMuZ2wuc3RlbmNpbE9wKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKTtcblxuXHRcdFx0dGhpcy5jdXJyZW50U3RlbmNpbEZhaWwgPSBzdGVuY2lsRmFpbDtcblx0XHRcdHRoaXMuY3VycmVudFN0ZW5jaWxaRmFpbCA9IHN0ZW5jaWxaRmFpbDtcblx0XHRcdHRoaXMuY3VycmVudFN0ZW5jaWxaUGFzcyA9IHN0ZW5jaWxaUGFzcztcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbmZpZ3VyZXMgdGhlIFdlYkdMIHN0YXRlIGZvciB0aGUgZ2l2ZW4gbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdGVyaWFsIC0gVGhlIG1hdGVyaWFsIHRvIGNvbmZpZ3VyZSB0aGUgc3RhdGUgZm9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZnJvbnRGYWNlQ1cgLSBXaGV0aGVyIHRoZSBmcm9udCBmYWNlcyBhcmUgY291bnRlci1jbG9ja3dpc2Ugb3Igbm90LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGFyZHdhcmVDbGlwcGluZ1BsYW5lcyAtIFRoZSBudW1iZXIgb2YgaGFyZHdhcmUgY2xpcHBpbmcgcGxhbmVzLlxuXHQgKi9cblx0c2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVywgaGFyZHdhcmVDbGlwcGluZ1BsYW5lcyApIHtcblxuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cblx0XHRtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlXG5cdFx0XHQ/IHRoaXMuZGlzYWJsZSggZ2wuQ1VMTF9GQUNFIClcblx0XHRcdDogdGhpcy5lbmFibGUoIGdsLkNVTExfRkFDRSApO1xuXG5cdFx0bGV0IGZsaXBTaWRlZCA9ICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKTtcblx0XHRpZiAoIGZyb250RmFjZUNXICkgZmxpcFNpZGVkID0gISBmbGlwU2lkZWQ7XG5cblx0XHR0aGlzLnNldEZsaXBTaWRlZCggZmxpcFNpZGVkICk7XG5cblx0XHQoIG1hdGVyaWFsLmJsZW5kaW5nID09PSBOb3JtYWxCbGVuZGluZyAmJiBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gZmFsc2UgKVxuXHRcdFx0PyB0aGlzLnNldEJsZW5kaW5nKCBOb0JsZW5kaW5nIClcblx0XHRcdDogdGhpcy5zZXRCbGVuZGluZyggbWF0ZXJpYWwuYmxlbmRpbmcsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb24sIG1hdGVyaWFsLmJsZW5kU3JjLCBtYXRlcmlhbC5ibGVuZERzdCwgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbkFscGhhLCBtYXRlcmlhbC5ibGVuZFNyY0FscGhhLCBtYXRlcmlhbC5ibGVuZERzdEFscGhhLCBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdHRoaXMuc2V0RGVwdGhGdW5jKCBtYXRlcmlhbC5kZXB0aEZ1bmMgKTtcblx0XHR0aGlzLnNldERlcHRoVGVzdCggbWF0ZXJpYWwuZGVwdGhUZXN0ICk7XG5cdFx0dGhpcy5zZXREZXB0aE1hc2soIG1hdGVyaWFsLmRlcHRoV3JpdGUgKTtcblx0XHR0aGlzLnNldENvbG9yTWFzayggbWF0ZXJpYWwuY29sb3JXcml0ZSApO1xuXG5cdFx0Y29uc3Qgc3RlbmNpbFdyaXRlID0gbWF0ZXJpYWwuc3RlbmNpbFdyaXRlO1xuXHRcdHRoaXMuc2V0U3RlbmNpbFRlc3QoIHN0ZW5jaWxXcml0ZSApO1xuXHRcdGlmICggc3RlbmNpbFdyaXRlICkge1xuXG5cdFx0XHR0aGlzLnNldFN0ZW5jaWxNYXNrKCBtYXRlcmlhbC5zdGVuY2lsV3JpdGVNYXNrICk7XG5cdFx0XHR0aGlzLnNldFN0ZW5jaWxGdW5jKCBtYXRlcmlhbC5zdGVuY2lsRnVuYywgbWF0ZXJpYWwuc3RlbmNpbFJlZiwgbWF0ZXJpYWwuc3RlbmNpbEZ1bmNNYXNrICk7XG5cdFx0XHR0aGlzLnNldFN0ZW5jaWxPcCggbWF0ZXJpYWwuc3RlbmNpbEZhaWwsIG1hdGVyaWFsLnN0ZW5jaWxaRmFpbCwgbWF0ZXJpYWwuc3RlbmNpbFpQYXNzICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldFBvbHlnb25PZmZzZXQoIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyApO1xuXG5cdFx0bWF0ZXJpYWwuYWxwaGFUb0NvdmVyYWdlID09PSB0cnVlICYmIHRoaXMuYmFja2VuZC5yZW5kZXJlci5zYW1wbGVzID4gMVxuXHRcdFx0PyB0aGlzLmVuYWJsZSggZ2wuU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFIClcblx0XHRcdDogdGhpcy5kaXNhYmxlKCBnbC5TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UgKTtcblxuXHRcdGlmICggaGFyZHdhcmVDbGlwcGluZ1BsYW5lcyA+IDAgKSB7XG5cblx0XHRcdGlmICggdGhpcy5jdXJyZW50Q2xpcHBpbmdQbGFuZXMgIT09IGhhcmR3YXJlQ2xpcHBpbmdQbGFuZXMgKSB7XG5cblx0XHRcdFx0Y29uc3QgQ0xJUF9ESVNUQU5DRTBfV0VCR0wgPSAweDMwMDA7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgODsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICggaSA8IGhhcmR3YXJlQ2xpcHBpbmdQbGFuZXMgKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuZW5hYmxlKCBDTElQX0RJU1RBTkNFMF9XRUJHTCArIGkgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuZGlzYWJsZSggQ0xJUF9ESVNUQU5DRTBfV0VCR0wgKyBpICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTcGVjaWZpZXMgdGhlIHBvbHlnb24gb2Zmc2V0LlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5wb2x5Z29uT2Zmc2V0KClgIGlzIG9ubHlcblx0ICogY2FsbGVkIHdoZW4gbmVjZXNzYXJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHBvbHlnb25PZmZzZXQgLSBXaGV0aGVyIHBvbHlnb24gb2Zmc2V0IGlzIGVuYWJsZWQgb3Igbm90LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZmFjdG9yIC0gVGhlIHNjYWxlIGZhY3RvciBmb3IgdGhlIHZhcmlhYmxlIGRlcHRoIG9mZnNldCBmb3IgZWFjaCBwb2x5Z29uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdW5pdHMgLSBUaGUgbXVsdGlwbGllciBieSB3aGljaCBhbiBpbXBsZW1lbnRhdGlvbi1zcGVjaWZpYyB2YWx1ZSBpcyBtdWx0aXBsaWVkIHdpdGggdG8gY3JlYXRlIGEgY29uc3RhbnQgZGVwdGggb2Zmc2V0LlxuXHQgKi9cblx0c2V0UG9seWdvbk9mZnNldCggcG9seWdvbk9mZnNldCwgZmFjdG9yLCB1bml0cyApIHtcblxuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cblx0XHRpZiAoIHBvbHlnb25PZmZzZXQgKSB7XG5cblx0XHRcdHRoaXMuZW5hYmxlKCBnbC5QT0xZR09OX09GRlNFVF9GSUxMICk7XG5cblx0XHRcdGlmICggdGhpcy5jdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciAhPT0gZmFjdG9yIHx8IHRoaXMuY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5pdHMgKSB7XG5cblx0XHRcdFx0Z2wucG9seWdvbk9mZnNldCggZmFjdG9yLCB1bml0cyApO1xuXG5cdFx0XHRcdHRoaXMuY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgPSBmYWN0b3I7XG5cdFx0XHRcdHRoaXMuY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IHVuaXRzO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmRpc2FibGUoIGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIHVzYWdlIG9mIHRoZSBnaXZlbiBXZWJHTCBwcm9ncmFtLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC51c2VQcm9ncmFtKClgIGlzIG9ubHlcblx0ICogY2FsbGVkIHdoZW4gbmVjZXNzYXJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMUHJvZ3JhbX0gcHJvZ3JhbSAtIFRoZSBXZWJHTCBwcm9ncmFtIHRvIHVzZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhIHByb2dyYW0gY2hhbmdlIGhhcyBiZWVuIGV4ZWN1dGVkIG9yIG5vdC5cblx0ICovXG5cdHVzZVByb2dyYW0oIHByb2dyYW0gKSB7XG5cblx0XHRpZiAoIHRoaXMuY3VycmVudFByb2dyYW0gIT09IHByb2dyYW0gKSB7XG5cblx0XHRcdHRoaXMuZ2wudXNlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXG5cdFx0XHR0aGlzLmN1cnJlbnRQcm9ncmFtID0gcHJvZ3JhbTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB2ZXJ0ZXggc3RhdGUgYnkgYmluZGluZyB0aGUgZ2l2ZW4gVkFPIGFuZCBlbGVtZW50IGJ1ZmZlci5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTFZlcnRleEFycmF5T2JqZWN0fSB2YW8gLSBUaGUgVkFPLlxuXHQgKiBAcGFyYW0ge1dlYkdMQnVmZmVyfSBpbmRleEJ1ZmZlciAtIFRoZSBpbmRleCBidWZmZXIuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYSB2ZXJ0ZXggc3RhdGUgaGFzIGJlZW4gY2hhbmdlZCBvciBub3QuXG5cdCAqL1xuXHRzZXRWZXJ0ZXhTdGF0ZSggdmFvLCBpbmRleEJ1ZmZlciA9IG51bGwgKSB7XG5cblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cblx0XHRpZiAoIHRoaXMuY3VycmVudFZBTyAhPT0gdmFvIHx8IHRoaXMuY3VycmVudEluZGV4ICE9PSBpbmRleEJ1ZmZlciApIHtcblxuXHRcdFx0Z2wuYmluZFZlcnRleEFycmF5KCB2YW8gKTtcblxuXHRcdFx0aWYgKCBpbmRleEJ1ZmZlciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRnbC5iaW5kQnVmZmVyKCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgaW5kZXhCdWZmZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmN1cnJlbnRWQU8gPSB2YW87XG5cdFx0XHR0aGlzLmN1cnJlbnRJbmRleCA9IGluZGV4QnVmZmVyO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlc2V0cyB0aGUgdmVydGV4IGFycmF5IHN0YXRlIGJ5IHJlc2V0dGluZyB0aGUgVkFPIGFuZCBlbGVtZW50IGJ1ZmZlci5cblx0ICovXG5cdHJlc2V0VmVydGV4U3RhdGUoKSB7XG5cblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cblx0XHRnbC5iaW5kVmVydGV4QXJyYXkoIG51bGwgKTtcblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCApO1xuXG5cdFx0dGhpcy5jdXJyZW50VkFPID0gbnVsbDtcblx0XHR0aGlzLmN1cnJlbnRJbmRleCA9IG51bGw7XG5cblx0fVxuXG5cdC8vIGZyYW1lYnVmZmVyXG5cblxuXHQvKipcblx0ICogQmluZHMgdGhlIGdpdmVuIGZyYW1lYnVmZmVyLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5iaW5kRnJhbWVidWZmZXIoKWAgaXMgb25seVxuXHQgKiBjYWxsZWQgd2hlbiBuZWNlc3NhcnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXQgLSBUaGUgYmluZGluZyBwb2ludCAodGFyZ2V0KS5cblx0ICogQHBhcmFtIHtXZWJHTEZyYW1lYnVmZmVyfSBmcmFtZWJ1ZmZlciAtIFRoZSBXZWJHTCBmcmFtZWJ1ZmZlciB0byBiaW5kLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGEgYmluZCBoYXMgYmVlbiBleGVjdXRlZCBvciBub3QuXG5cdCAqL1xuXHRiaW5kRnJhbWVidWZmZXIoIHRhcmdldCwgZnJhbWVidWZmZXIgKSB7XG5cblx0XHRjb25zdCB7IGdsLCBjdXJyZW50Qm91bmRGcmFtZWJ1ZmZlcnMgfSA9IHRoaXM7XG5cblx0XHRpZiAoIGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgdGFyZ2V0IF0gIT09IGZyYW1lYnVmZmVyICkge1xuXG5cdFx0XHRnbC5iaW5kRnJhbWVidWZmZXIoIHRhcmdldCwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0Y3VycmVudEJvdW5kRnJhbWVidWZmZXJzWyB0YXJnZXQgXSA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0XHQvLyBnbC5EUkFXX0ZSQU1FQlVGRkVSIGlzIGVxdWl2YWxlbnQgdG8gZ2wuRlJBTUVCVUZGRVJcblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IGdsLkRSQVdfRlJBTUVCVUZGRVIgKSB7XG5cblx0XHRcdFx0Y3VycmVudEJvdW5kRnJhbWVidWZmZXJzWyBnbC5GUkFNRUJVRkZFUiBdID0gZnJhbWVidWZmZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IGdsLkZSQU1FQlVGRkVSICkge1xuXG5cdFx0XHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgZ2wuRFJBV19GUkFNRUJVRkZFUiBdID0gZnJhbWVidWZmZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIGRyYXcgYnVmZmVycyB0byB3aGljaCBmcmFnbWVudCBjb2xvcnMgYXJlIHdyaXR0ZW4gaW50by5cblx0ICogQ29uZmlndXJlcyB0aGUgTVJUIHNldHVwIG9mIGN1c3RvbSBmcmFtZWJ1ZmZlcnMuXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGNhY2hlcyB0aGUgc3RhdGUgc28gYGdsLmRyYXdCdWZmZXJzKClgIGlzIG9ubHlcblx0ICogY2FsbGVkIHdoZW4gbmVjZXNzYXJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7V2ViR0xGcmFtZWJ1ZmZlcn0gZnJhbWVidWZmZXIgLSBUaGUgV2ViR0wgZnJhbWVidWZmZXIuXG5cdCAqL1xuXHRkcmF3QnVmZmVycyggcmVuZGVyQ29udGV4dCwgZnJhbWVidWZmZXIgKSB7XG5cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXG5cdFx0bGV0IGRyYXdCdWZmZXJzID0gW107XG5cblx0XHRsZXQgbmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdGlmICggcmVuZGVyQ29udGV4dC50ZXh0dXJlcyAhPT0gbnVsbCApIHtcblxuXHRcdFx0ZHJhd0J1ZmZlcnMgPSB0aGlzLmN1cnJlbnREcmF3YnVmZmVycy5nZXQoIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdGlmICggZHJhd0J1ZmZlcnMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRkcmF3QnVmZmVycyA9IFtdO1xuXHRcdFx0XHR0aGlzLmN1cnJlbnREcmF3YnVmZmVycy5zZXQoIGZyYW1lYnVmZmVyLCBkcmF3QnVmZmVycyApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJDb250ZXh0LnRleHR1cmVzO1xuXG5cdFx0XHRpZiAoIGRyYXdCdWZmZXJzLmxlbmd0aCAhPT0gdGV4dHVyZXMubGVuZ3RoIHx8IGRyYXdCdWZmZXJzWyAwIF0gIT09IGdsLkNPTE9SX0FUVEFDSE1FTlQwICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0ZXh0dXJlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGRyYXdCdWZmZXJzWyBpIF0gPSBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRyYXdCdWZmZXJzLmxlbmd0aCA9IHRleHR1cmVzLmxlbmd0aDtcblxuXHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBkcmF3QnVmZmVyc1sgMCBdICE9PSBnbC5CQUNLICkge1xuXG5cdFx0XHRcdGRyYXdCdWZmZXJzWyAwIF0gPSBnbC5CQUNLO1xuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBuZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0Z2wuZHJhd0J1ZmZlcnMoIGRyYXdCdWZmZXJzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cblx0Ly8gdGV4dHVyZVxuXG5cdC8qKlxuXHQgKiBNYWtlcyB0aGUgZ2l2ZW4gdGV4dHVyZSB1bml0IGFjdGl2ZS5cblx0ICpcblx0ICogVGhpcyBtZXRob2QgY2FjaGVzIHRoZSBzdGF0ZSBzbyBgZ2wuYWN0aXZlVGV4dHVyZSgpYCBpcyBvbmx5XG5cdCAqIGNhbGxlZCB3aGVuIG5lY2Vzc2FyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHdlYmdsU2xvdCAtIFRoZSB0ZXh0dXJlIHVuaXQgdG8gbWFrZSBhY3RpdmUuXG5cdCAqL1xuXHRhY3RpdmVUZXh0dXJlKCB3ZWJnbFNsb3QgKSB7XG5cblx0XHRjb25zdCB7IGdsLCBjdXJyZW50VGV4dHVyZVNsb3QsIG1heFRleHR1cmVzIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCB3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCApIHdlYmdsU2xvdCA9IGdsLlRFWFRVUkUwICsgbWF4VGV4dHVyZXMgLSAxO1xuXG5cdFx0aWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgIT09IHdlYmdsU2xvdCApIHtcblxuXHRcdFx0Z2wuYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICk7XG5cdFx0XHR0aGlzLmN1cnJlbnRUZXh0dXJlU2xvdCA9IHdlYmdsU2xvdDtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEJpbmRzIHRoZSBnaXZlbiBXZWJHTCB0ZXh0dXJlIHRvIGEgdGFyZ2V0LlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5iaW5kVGV4dHVyZSgpYCBpcyBvbmx5XG5cdCAqIGNhbGxlZCB3aGVuIG5lY2Vzc2FyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHdlYmdsVHlwZSAtIFRoZSBiaW5kaW5nIHBvaW50ICh0YXJnZXQpLlxuXHQgKiBAcGFyYW0ge1dlYkdMVGV4dHVyZX0gd2ViZ2xUZXh0dXJlIC0gVGhlIFdlYkdMIHRleHR1cmUgdG8gYmluZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHdlYmdsU2xvdCAtIFRoZSB0ZXh0dXJlLlxuXHQgKi9cblx0YmluZFRleHR1cmUoIHdlYmdsVHlwZSwgd2ViZ2xUZXh0dXJlLCB3ZWJnbFNsb3QgKSB7XG5cblx0XHRjb25zdCB7IGdsLCBjdXJyZW50VGV4dHVyZVNsb3QsIGN1cnJlbnRCb3VuZFRleHR1cmVzLCBtYXhUZXh0dXJlcyB9ID0gdGhpcztcblxuXHRcdGlmICggd2ViZ2xTbG90ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHdlYmdsU2xvdCA9IGdsLlRFWFRVUkUwICsgbWF4VGV4dHVyZXMgLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHdlYmdsU2xvdCA9IGN1cnJlbnRUZXh0dXJlU2xvdDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0bGV0IGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyB3ZWJnbFNsb3QgXTtcblxuXHRcdGlmICggYm91bmRUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJvdW5kVGV4dHVyZSA9IHsgdHlwZTogdW5kZWZpbmVkLCB0ZXh0dXJlOiB1bmRlZmluZWQgfTtcblx0XHRcdGN1cnJlbnRCb3VuZFRleHR1cmVzWyB3ZWJnbFNsb3QgXSA9IGJvdW5kVGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdGlmICggYm91bmRUZXh0dXJlLnR5cGUgIT09IHdlYmdsVHlwZSB8fCBib3VuZFRleHR1cmUudGV4dHVyZSAhPT0gd2ViZ2xUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRUZXh0dXJlU2xvdCAhPT0gd2ViZ2xTbG90ICkge1xuXG5cdFx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoIHdlYmdsU2xvdCApO1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRUZXh0dXJlU2xvdCA9IHdlYmdsU2xvdDtcblxuXHRcdFx0fVxuXG5cdFx0XHRnbC5iaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgKTtcblxuXHRcdFx0Ym91bmRUZXh0dXJlLnR5cGUgPSB3ZWJnbFR5cGU7XG5cdFx0XHRib3VuZFRleHR1cmUudGV4dHVyZSA9IHdlYmdsVGV4dHVyZTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEJpbmRzIGEgZ2l2ZW4gV2ViR0wgYnVmZmVyIHRvIGEgZ2l2ZW4gYmluZGluZyBwb2ludCAodGFyZ2V0KSBhdCBhIGdpdmVuIGluZGV4LlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5iaW5kQnVmZmVyQmFzZSgpYCBpcyBvbmx5XG5cdCAqIGNhbGxlZCB3aGVuIG5lY2Vzc2FyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHRhcmdldCAtIFRoZSB0YXJnZXQgZm9yIHRoZSBiaW5kIG9wZXJhdGlvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7V2ViR0xCdWZmZXJ9IGJ1ZmZlciAtIFRoZSBXZWJHTCBidWZmZXIuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYSBiaW5kIGhhcyBiZWVuIGV4ZWN1dGVkIG9yIG5vdC5cblx0ICovXG5cdGJpbmRCdWZmZXJCYXNlKCB0YXJnZXQsIGluZGV4LCBidWZmZXIgKSB7XG5cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3Qga2V5ID0gYCR7dGFyZ2V0fS0ke2luZGV4fWA7XG5cblx0XHRpZiAoIHRoaXMuY3VycmVudEJvdW5kQnVmZmVyQmFzZXNbIGtleSBdICE9PSBidWZmZXIgKSB7XG5cblx0XHRcdGdsLmJpbmRCdWZmZXJCYXNlKCB0YXJnZXQsIGluZGV4LCBidWZmZXIgKTtcblx0XHRcdHRoaXMuY3VycmVudEJvdW5kQnVmZmVyQmFzZXNbIGtleSBdID0gYnVmZmVyO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblxuXHQvKipcblx0ICogVW5iaW5kcyB0aGUgY3VycmVudCBib3VuZCB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBjYWNoZXMgdGhlIHN0YXRlIHNvIGBnbC5iaW5kVGV4dHVyZSgpYCBpcyBvbmx5XG5cdCAqIGNhbGxlZCB3aGVuIG5lY2Vzc2FyeS5cblx0ICovXG5cdHVuYmluZFRleHR1cmUoKSB7XG5cblx0XHRjb25zdCB7IGdsLCBjdXJyZW50VGV4dHVyZVNsb3QsIGN1cnJlbnRCb3VuZFRleHR1cmVzIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdO1xuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBib3VuZFRleHR1cmUudHlwZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRnbC5iaW5kVGV4dHVyZSggYm91bmRUZXh0dXJlLnR5cGUsIG51bGwgKTtcblxuXHRcdFx0Ym91bmRUZXh0dXJlLnR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0XHRib3VuZFRleHR1cmUudGV4dHVyZSA9IHVuZGVmaW5lZDtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViR0xTdGF0ZTtcbiIsImltcG9ydCB7IFJHQkFfQVNUQ180eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDVfRm9ybWF0LCBSR0JBX0FTVENfNng2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4NV9Gb3JtYXQsIFJHQkFfQVNUQ184eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDVfRm9ybWF0LCBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCwgUkdCX0VUQzFfRm9ybWF0LCBSR0JfRVRDMl9Gb3JtYXQsIFJHQkFfRVRDMl9FQUNfRm9ybWF0LCBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCwgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDFfRm9ybWF0LCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCwgRGVwdGhGb3JtYXQsIERlcHRoU3RlbmNpbEZvcm1hdCwgTHVtaW5hbmNlQWxwaGFGb3JtYXQsIEx1bWluYW5jZUZvcm1hdCwgUmVkRm9ybWF0LCBSR0JGb3JtYXQsIFJHQkFGb3JtYXQsIEFscGhhRm9ybWF0LCBSZWRJbnRlZ2VyRm9ybWF0LCBSR0Zvcm1hdCwgUkdJbnRlZ2VyRm9ybWF0LCBSR0JBSW50ZWdlckZvcm1hdCwgSGFsZkZsb2F0VHlwZSwgRmxvYXRUeXBlLCBVbnNpZ25lZEludFR5cGUsIEludFR5cGUsIFVuc2lnbmVkU2hvcnRUeXBlLCBTaG9ydFR5cGUsIEJ5dGVUeXBlLCBVbnNpZ25lZEludDI0OFR5cGUsIFVuc2lnbmVkSW50NTk5OVR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRTaG9ydDQ0NDRUeXBlLCBVbnNpZ25lZEJ5dGVUeXBlLCBSR0JBX0JQVENfRm9ybWF0LCBSRURfUkdUQzFfRm9ybWF0LCBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdCwgUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCwgU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQsIFNSR0JDb2xvclNwYWNlLCBOb0NvbG9yU3BhY2UgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIEEgV2ViR0wgMiBiYWNrZW5kIHV0aWxpdHkgbW9kdWxlIHdpdGggY29tbW9uIGhlbHBlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgV2ViR0xVdGlscyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdXRpbGl0eSBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR0xCYWNrZW5kfSBiYWNrZW5kIC0gVGhlIFdlYkdMIDIgYmFja2VuZC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBiYWNrZW5kICkge1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIFdlYkdMIDIgYmFja2VuZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHTEJhY2tlbmR9XG5cdFx0ICovXG5cdFx0dGhpcy5iYWNrZW5kID0gYmFja2VuZDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSByZW5kZXJpbmcgY29udGV4dC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHTDJSZW5kZXJpbmdDb250ZXh0fVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2wgPSB0aGlzLmJhY2tlbmQuZ2w7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIGJhY2tlbmQgbW9kdWxlIGhvbGRpbmcgZXh0ZW5zaW9uLXJlbGF0ZWRcblx0XHQgKiB1dGlsaXR5IGZ1bmN0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHTEV4dGVuc2lvbnN9XG5cdFx0ICovXG5cdFx0dGhpcy5leHRlbnNpb25zID0gYmFja2VuZC5leHRlbnNpb25zO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIHRocmVlLmpzIGNvbnN0YW50IGludG8gYSBXZWJHTCBjb25zdGFudC5cblx0ICogVGhlIG1ldGhvZCBjdXJyZW50bHkgc3VwcG9ydHMgdGhlIGNvbnZlcnNpb24gb2YgdGV4dHVyZSBmb3JtYXRzXG5cdCAqIGFuZCB0eXBlcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHAgLSBUaGUgdGhyZWUuanMgY29uc3RhbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbY29sb3JTcGFjZT1Ob0NvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLlxuXHQgKiBAcmV0dXJuIHs/bnVtYmVyfSBUaGUgY29ycmVzcG9uZGluZyBXZWJHTCBjb25zdGFudC5cblx0ICovXG5cdGNvbnZlcnQoIHAsIGNvbG9yU3BhY2UgPSBOb0NvbG9yU3BhY2UgKSB7XG5cblx0XHRjb25zdCB7IGdsLCBleHRlbnNpb25zIH0gPSB0aGlzO1xuXG5cdFx0bGV0IGV4dGVuc2lvbjtcblxuXHRcdGlmICggcCA9PT0gVW5zaWduZWRCeXRlVHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDQ0NDRUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQ7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0NTU1MVR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlRfNV81XzVfMTtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkSW50NTk5OVR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfSU5UXzVfOV85XzlfUkVWO1xuXG5cdFx0aWYgKCBwID09PSBCeXRlVHlwZSApIHJldHVybiBnbC5CWVRFO1xuXHRcdGlmICggcCA9PT0gU2hvcnRUeXBlICkgcmV0dXJuIGdsLlNIT1JUO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydFR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlQ7XG5cdFx0aWYgKCBwID09PSBJbnRUeXBlICkgcmV0dXJuIGdsLklOVDtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkSW50VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9JTlQ7XG5cdFx0aWYgKCBwID09PSBGbG9hdFR5cGUgKSByZXR1cm4gZ2wuRkxPQVQ7XG5cblx0XHRpZiAoIHAgPT09IEhhbGZGbG9hdFR5cGUgKSB7XG5cblx0XHRcdHJldHVybiBnbC5IQUxGX0ZMT0FUO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBBbHBoYUZvcm1hdCApIHJldHVybiBnbC5BTFBIQTtcblx0XHRpZiAoIHAgPT09IFJHQkZvcm1hdCApIHJldHVybiBnbC5SR0I7XG5cdFx0aWYgKCBwID09PSBSR0JBRm9ybWF0ICkgcmV0dXJuIGdsLlJHQkE7XG5cdFx0aWYgKCBwID09PSBMdW1pbmFuY2VGb3JtYXQgKSByZXR1cm4gZ2wuTFVNSU5BTkNFO1xuXHRcdGlmICggcCA9PT0gTHVtaW5hbmNlQWxwaGFGb3JtYXQgKSByZXR1cm4gZ2wuTFVNSU5BTkNFX0FMUEhBO1xuXHRcdGlmICggcCA9PT0gRGVwdGhGb3JtYXQgKSByZXR1cm4gZ2wuREVQVEhfQ09NUE9ORU5UO1xuXHRcdGlmICggcCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkgcmV0dXJuIGdsLkRFUFRIX1NURU5DSUw7XG5cblx0XHQvLyBXZWJHTDIgZm9ybWF0cy5cblxuXHRcdGlmICggcCA9PT0gUmVkRm9ybWF0ICkgcmV0dXJuIGdsLlJFRDtcblx0XHRpZiAoIHAgPT09IFJlZEludGVnZXJGb3JtYXQgKSByZXR1cm4gZ2wuUkVEX0lOVEVHRVI7XG5cdFx0aWYgKCBwID09PSBSR0Zvcm1hdCApIHJldHVybiBnbC5SRztcblx0XHRpZiAoIHAgPT09IFJHSW50ZWdlckZvcm1hdCApIHJldHVybiBnbC5SR19JTlRFR0VSO1xuXHRcdGlmICggcCA9PT0gUkdCQUludGVnZXJGb3JtYXQgKSByZXR1cm4gZ2wuUkdCQV9JTlRFR0VSO1xuXG5cdFx0Ly8gUzNUQ1xuXG5cdFx0aWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDNfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHtcblxuXHRcdFx0aWYgKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApIHtcblxuXHRcdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjX3NyZ2InICk7XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDNfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFBWUlRDXG5cblx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gRVRDXG5cblx0XHRpZiAoIHAgPT09IFJHQl9FVEMxX0Zvcm1hdCB8fCBwID09PSBSR0JfRVRDMl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9FVEMyX0VBQ19Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JfRVRDMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX0VUQzJfRm9ybWF0ICkgcmV0dXJuICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0VUQzIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0I4X0VUQzI7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9FVEMyX0VBQ19Gb3JtYXQgKSByZXR1cm4gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQThfRVRDMl9FQUM7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIEFTVENcblxuXHRcdGlmICggcCA9PT0gUkdCQV9BU1RDXzR4NF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzV4NF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzV4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ182eDVfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ182eDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ184eDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfOHg2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ180eDRfRm9ybWF0ICkgcmV0dXJuICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNHg0X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCApIHJldHVybiAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDRfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzV4NF9LSFI7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9BU1RDXzV4NV9Gb3JtYXQgKSByZXR1cm4gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ181eDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ182eDVfRm9ybWF0ICkgcmV0dXJuICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNng1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCApIHJldHVybiAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDZfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzZ4Nl9LSFI7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9BU1RDXzh4NV9Gb3JtYXQgKSByZXR1cm4gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ184eDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ184eDZfRm9ybWF0ICkgcmV0dXJuICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCApIHJldHVybiAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDhfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4OF9LSFI7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9BU1RDXzEweDVfRm9ybWF0ICkgcmV0dXJuICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDVfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDVfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCApIHJldHVybiAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg2X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgKSByZXR1cm4gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4OF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4OF9LSFI7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCApIHJldHVybiAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHgxMF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4MTBfS0hSO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgKSByZXR1cm4gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTBfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEwX0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ICkgcmV0dXJuICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEyX0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMl9LSFI7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIEJQVENcblxuXHRcdGlmICggcCA9PT0gUkdCQV9CUFRDX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9icHRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQlBUQ19Gb3JtYXQgKSByZXR1cm4gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9CUFRDX1VOT1JNX0VYVCA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQlBUQ19VTk9STV9FWFQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFJHVENcblxuXHRcdGlmICggcCA9PT0gUkVEX1JHVEMxX0Zvcm1hdCB8fCBwID09PSBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdCB8fCBwID09PSBSRURfR1JFRU5fUkdUQzJfRm9ybWF0IHx8IHAgPT09IFNJR05FRF9SRURfR1JFRU5fUkdUQzJfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2NvbXByZXNzaW9uX3JndGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9CUFRDX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SRURfUkdUQzFfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFNJR05FRF9SRURfUkdUQzFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NJR05FRF9SRURfUkdUQzFfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJFRF9HUkVFTl9SR1RDMl9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkVEX0dSRUVOX1JHVEMyX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TSUdORURfUkVEX0dSRUVOX1JHVEMyX0VYVDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRyZXR1cm4gZ2wuVU5TSUdORURfSU5UXzI0Xzg7XG5cblx0XHR9XG5cblx0XHQvLyBpZiBcInBcIiBjYW4ndCBiZSByZXNvbHZlZCwgYXNzdW1lIHRoZSB1c2VyIGRlZmluZXMgYSBXZWJHTCBjb25zdGFudCBhcyBhIHN0cmluZyAoZmFsbGJhY2svd29ya2Fyb3VuZCBmb3IgcGFja2VkIFJHQiBmb3JtYXRzKVxuXG5cdFx0cmV0dXJuICggZ2xbIHAgXSAhPT0gdW5kZWZpbmVkICkgPyBnbFsgcCBdIDogbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIHRvIHN5bmNocm9uaXplIHRoZSBDUFUgd2l0aCB0aGUgR1BVIGJ5IHdhaXRpbmcgdW50aWxcblx0ICogb25nb2luZyBHUFUgY29tbWFuZHMgaGF2ZSBiZWVuIGNvbXBsZXRlZC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgb25nb2luZyBHUFUgY29tbWFuZHMgaGF2ZSBiZWVuIGNvbXBsZXRlZC5cblx0ICovXG5cdF9jbGllbnRXYWl0QXN5bmMoKSB7XG5cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3Qgc3luYyA9IGdsLmZlbmNlU3luYyggZ2wuU1lOQ19HUFVfQ09NTUFORFNfQ09NUExFVEUsIDAgKTtcblxuXHRcdGdsLmZsdXNoKCk7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuXG5cdFx0XHRmdW5jdGlvbiB0ZXN0KCkge1xuXG5cdFx0XHRcdGNvbnN0IHJlcyA9IGdsLmNsaWVudFdhaXRTeW5jKCBzeW5jLCBnbC5TWU5DX0ZMVVNIX0NPTU1BTkRTX0JJVCwgMCApO1xuXG5cdFx0XHRcdGlmICggcmVzID09PSBnbC5XQUlUX0ZBSUxFRCApIHtcblxuXHRcdFx0XHRcdGdsLmRlbGV0ZVN5bmMoIHN5bmMgKTtcblxuXHRcdFx0XHRcdHJlamVjdCgpO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCByZXMgPT09IGdsLlRJTUVPVVRfRVhQSVJFRCApIHtcblxuXHRcdFx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSggdGVzdCApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z2wuZGVsZXRlU3luYyggc3luYyApO1xuXG5cdFx0XHRcdHJlc29sdmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXN0KCk7XG5cblx0XHR9ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYkdMVXRpbHM7XG4iLCJpbXBvcnQgeyBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcG1hcExpbmVhckZpbHRlciwgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciwgTmVhcmVzdEZpbHRlciwgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciwgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIsIEZsb2F0VHlwZSwgTWlycm9yZWRSZXBlYXRXcmFwcGluZywgQ2xhbXBUb0VkZ2VXcmFwcGluZywgUmVwZWF0V3JhcHBpbmcsIFNSR0JDb2xvclNwYWNlLCBOZXZlckNvbXBhcmUsIEFsd2F5c0NvbXBhcmUsIExlc3NDb21wYXJlLCBMZXNzRXF1YWxDb21wYXJlLCBFcXVhbENvbXBhcmUsIEdyZWF0ZXJFcXVhbENvbXBhcmUsIEdyZWF0ZXJDb21wYXJlLCBOb3RFcXVhbENvbXBhcmUgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMuanMnO1xuXG5sZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZSwgd3JhcHBpbmdUb0dMLCBmaWx0ZXJUb0dMLCBjb21wYXJlVG9HTDtcblxuLyoqXG4gKiBBIFdlYkdMIDIgYmFja2VuZCB1dGlsaXR5IG1vZHVsZSBmb3IgbWFuYWdpbmcgdGV4dHVyZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgV2ViR0xUZXh0dXJlVXRpbHMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHV0aWxpdHkgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMQmFja2VuZH0gYmFja2VuZCAtIFRoZSBXZWJHTCAyIGJhY2tlbmQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYmFja2VuZCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBXZWJHTCAyIGJhY2tlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2ViR0xCYWNrZW5kfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgcmVuZGVyaW5nIGNvbnRleHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2ViR0wyUmVuZGVyaW5nQ29udGV4dH1cblx0XHQgKi9cblx0XHR0aGlzLmdsID0gYmFja2VuZC5nbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgYmFja2VuZCBtb2R1bGUgaG9sZGluZyBleHRlbnNpb24tcmVsYXRlZFxuXHRcdCAqIHV0aWxpdHkgZnVuY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1dlYkdMRXh0ZW5zaW9uc31cblx0XHQgKi9cblx0XHR0aGlzLmV4dGVuc2lvbnMgPSBiYWNrZW5kLmV4dGVuc2lvbnM7XG5cblx0XHQvKipcblx0XHQgKiBBIGRpY3Rpb25hcnkgZm9yIG1hbmFnaW5nIGRlZmF1bHQgdGV4dHVyZXMuIFRoZSBrZXlcblx0XHQgKiBpcyB0aGUgYmluZGluZyBwb2ludCAodGFyZ2V0KSwgdGhlIHZhbHVlIHRoZSBXRWJHTCB0ZXh0dXJlIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8R0xlbnVtLFdlYkdMVGV4dHVyZT59XG5cdFx0ICovXG5cdFx0dGhpcy5kZWZhdWx0VGV4dHVyZXMgPSB7fTtcblxuXHRcdGlmICggaW5pdGlhbGl6ZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aGlzLl9pbml0KCk7XG5cblx0XHRcdGluaXRpYWxpemVkID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRzIHRoZSBzdGF0ZSBvZiB0aGUgdXRpbGl0eS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9pbml0KCkge1xuXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXG5cdFx0Ly8gU3RvcmUgb25seSBXZWJHTCBjb25zdGFudHMgaGVyZS5cblxuXHRcdHdyYXBwaW5nVG9HTCA9IHtcblx0XHRcdFsgUmVwZWF0V3JhcHBpbmcgXTogZ2wuUkVQRUFULFxuXHRcdFx0WyBDbGFtcFRvRWRnZVdyYXBwaW5nIF06IGdsLkNMQU1QX1RPX0VER0UsXG5cdFx0XHRbIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcgXTogZ2wuTUlSUk9SRURfUkVQRUFUXG5cdFx0fTtcblxuXHRcdGZpbHRlclRvR0wgPSB7XG5cdFx0XHRbIE5lYXJlc3RGaWx0ZXIgXTogZ2wuTkVBUkVTVCxcblx0XHRcdFsgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgXTogZ2wuTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCxcblx0XHRcdFsgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciBdOiBnbC5ORUFSRVNUX01JUE1BUF9MSU5FQVIsXG5cblx0XHRcdFsgTGluZWFyRmlsdGVyIF06IGdsLkxJTkVBUixcblx0XHRcdFsgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciBdOiBnbC5MSU5FQVJfTUlQTUFQX05FQVJFU1QsXG5cdFx0XHRbIExpbmVhck1pcG1hcExpbmVhckZpbHRlciBdOiBnbC5MSU5FQVJfTUlQTUFQX0xJTkVBUlxuXHRcdH07XG5cblx0XHRjb21wYXJlVG9HTCA9IHtcblx0XHRcdFsgTmV2ZXJDb21wYXJlIF06IGdsLk5FVkVSLFxuXHRcdFx0WyBBbHdheXNDb21wYXJlIF06IGdsLkFMV0FZUyxcblx0XHRcdFsgTGVzc0NvbXBhcmUgXTogZ2wuTEVTUyxcblx0XHRcdFsgTGVzc0VxdWFsQ29tcGFyZSBdOiBnbC5MRVFVQUwsXG5cdFx0XHRbIEVxdWFsQ29tcGFyZSBdOiBnbC5FUVVBTCxcblx0XHRcdFsgR3JlYXRlckVxdWFsQ29tcGFyZSBdOiBnbC5HRVFVQUwsXG5cdFx0XHRbIEdyZWF0ZXJDb21wYXJlIF06IGdsLkdSRUFURVIsXG5cdFx0XHRbIE5vdEVxdWFsQ29tcGFyZSBdOiBnbC5OT1RFUVVBTFxuXHRcdH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBuYXRpdmUgdGV4dHVyZSB0eXBlIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEByZXR1cm4ge0dMZW51bX0gVGhlIG5hdGl2ZSB0ZXh0dXJlIHR5cGUuXG5cdCAqL1xuXHRnZXRHTFRleHR1cmVUeXBlKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgeyBnbCB9ID0gdGhpcztcblxuXHRcdGxldCBnbFRleHR1cmVUeXBlO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzQ3ViZVRleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdGdsVGV4dHVyZVR5cGUgPSBnbC5URVhUVVJFX0NVQkVfTUFQO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgPT09IHRydWUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdGdsVGV4dHVyZVR5cGUgPSBnbC5URVhUVVJFXzJEX0FSUkFZO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgPT09IHRydWUgKSB7IC8vIFRPRE86IGlzQ29tcHJlc3NlZDNEVGV4dHVyZSwgd2FpdCBmb3IgIzI2NjQyXG5cblx0XHRcdGdsVGV4dHVyZVR5cGUgPSBnbC5URVhUVVJFXzNEO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Z2xUZXh0dXJlVHlwZSA9IGdsLlRFWFRVUkVfMkQ7XG5cblxuXHRcdH1cblxuXHRcdHJldHVybiBnbFRleHR1cmVUeXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbmF0aXZlIHRleHR1cmUgdHlwZSBmb3IgdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gaW50ZXJuYWxGb3JtYXROYW1lIC0gVGhlIGludGVybmFsIGZvcm1hdCBuYW1lLiBXaGVuIGBudWxsYCwgdGhlIGludGVybmFsIGZvcm1hdCBpcyBkZXJpdmVkIGZyb20gdGhlIHN1YnNlcXVlbnQgcGFyYW1ldGVycy5cblx0ICogQHBhcmFtIHtHTGVudW19IGdsRm9ybWF0IC0gVGhlIFdlYkdMIGZvcm1hdC5cblx0ICogQHBhcmFtIHtHTGVudW19IGdsVHlwZSAtIFRoZSBXZWJHTCB0eXBlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29sb3JTcGFjZSAtIFRoZSB0ZXh0dXJlJ3MgY29sb3Igc3BhY2UuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ZvcmNlTGluZWFyVHJhbnNmZXI9ZmFsc2VdIC0gV2hldGhlciB0byBmb3JjZSBhIGxpbmVhciB0cmFuc2ZlciBvciBub3QuXG5cdCAqIEByZXR1cm4ge0dMZW51bX0gVGhlIGludGVybmFsIGZvcm1hdC5cblx0ICovXG5cdGdldEludGVybmFsRm9ybWF0KCBpbnRlcm5hbEZvcm1hdE5hbWUsIGdsRm9ybWF0LCBnbFR5cGUsIGNvbG9yU3BhY2UsIGZvcmNlTGluZWFyVHJhbnNmZXIgPSBmYWxzZSApIHtcblxuXHRcdGNvbnN0IHsgZ2wsIGV4dGVuc2lvbnMgfSA9IHRoaXM7XG5cblx0XHRpZiAoIGludGVybmFsRm9ybWF0TmFtZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBnbFsgaW50ZXJuYWxGb3JtYXROYW1lIF0gIT09IHVuZGVmaW5lZCApIHJldHVybiBnbFsgaW50ZXJuYWxGb3JtYXROYW1lIF07XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gdXNlIG5vbi1leGlzdGluZyBXZWJHTCBpbnRlcm5hbCBmb3JtYXQgXFwnJyArIGludGVybmFsRm9ybWF0TmFtZSArICdcXCcnICk7XG5cblx0XHR9XG5cblx0XHRsZXQgaW50ZXJuYWxGb3JtYXQgPSBnbEZvcm1hdDtcblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IGdsLlJFRCApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLkZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SMzJGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLkhBTEZfRkxPQVQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlIxNkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfQllURSApIGludGVybmFsRm9ybWF0ID0gZ2wuUjg7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlIxNjtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlIzMlVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlI4STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5TSE9SVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUjE2STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlIzMkk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBnbC5SRURfSU5URUdFUiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlI4VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlIxNlVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0lOVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUjMyVUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuQllURSApIGludGVybmFsRm9ybWF0ID0gZ2wuUjhJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlNIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SMTZJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLklOVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUjMySTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IGdsLlJHICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuRkxPQVQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHMzJGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLkhBTEZfRkxPQVQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHMTZGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHODtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9TSE9SVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkcxNjtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHMzJVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SRzhJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlNIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SRzE2STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHMzJJO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gZ2wuUkdfSU5URUdFUiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHOFVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX1NIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SRzE2VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SRzMyVUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuQllURSApIGludGVybmFsRm9ybWF0ID0gZ2wuUkc4STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5TSE9SVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkcxNkk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SRzMySTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IGdsLlJHQiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLkZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0IzMkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuSEFMRl9GTE9BVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCMTZGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjg7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjE2O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0lOVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCMzJVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0I4STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5TSE9SVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCMTZJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLklOVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCMzJJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9ICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgJiYgZm9yY2VMaW5lYXJUcmFuc2ZlciA9PT0gZmFsc2UgKSA/IGdsLlNSR0I4IDogZ2wuUkdCODtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9TSE9SVF81XzZfNSApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCNTY1O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX1NIT1JUXzVfNV81XzEgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjVfQTE7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCNDtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9JTlRfNV85XzlfOV9SRVYgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjlfRTU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBnbC5SR0JfSU5URUdFUiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjhVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9TSE9SVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCMTZVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjMyVUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuQllURSApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCOEk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjE2STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjMySTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IGdsLlJHQkEgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5GTE9BVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCQTMyRjtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5IQUxGX0ZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBMTZGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkE4O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX1NIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBMTY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBMzJVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBOEk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkExNkk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBMzJJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9ICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgJiYgZm9yY2VMaW5lYXJUcmFuc2ZlciA9PT0gZmFsc2UgKSA/IGdsLlNSR0I4X0FMUEhBOCA6IGdsLlJHQkE4O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkE0O1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX1NIT1JUXzVfNV81XzEgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQjVfQTE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBnbC5SR0JBX0lOVEVHRVIgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBOFVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX1NIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBMTZVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkEzMlVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkE4STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5TSE9SVCApIGludGVybmFsRm9ybWF0ID0gZ2wuUkdCQTE2STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkEzMkk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBnbC5ERVBUSF9DT01QT05FTlQgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9TSE9SVCApIGludGVybmFsRm9ybWF0ID0gZ2wuREVQVEhfQ09NUE9ORU5UMTY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5ERVBUSF9DT01QT05FTlQyNDtcblx0XHRcdGlmICggZ2xUeXBlID09PSBnbC5GTE9BVCApIGludGVybmFsRm9ybWF0ID0gZ2wuREVQVEhfQ09NUE9ORU5UMzJGO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gZ2wuREVQVEhfU1RFTkNJTCApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0lOVF8yNF84ICkgaW50ZXJuYWxGb3JtYXQgPSBnbC5ERVBUSDI0X1NURU5DSUw4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpbnRlcm5hbEZvcm1hdCA9PT0gZ2wuUjE2RiB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gZ2wuUjMyRiB8fFxuXHRcdFx0aW50ZXJuYWxGb3JtYXQgPT09IGdsLlJHMTZGIHx8IGludGVybmFsRm9ybWF0ID09PSBnbC5SRzMyRiB8fFxuXHRcdFx0aW50ZXJuYWxGb3JtYXQgPT09IGdsLlJHQkExNkYgfHwgaW50ZXJuYWxGb3JtYXQgPT09IGdsLlJHQkEzMkYgKSB7XG5cblx0XHRcdGV4dGVuc2lvbnMuZ2V0KCAnRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBpbnRlcm5hbEZvcm1hdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHRleHR1cmUgcGFyYW1ldGVycyBmb3IgdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7R0xlbnVtfSB0ZXh0dXJlVHlwZSAtIFRoZSB0ZXh0dXJlIHR5cGUuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKi9cblx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIHRleHR1cmVUeXBlLCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgeyBnbCwgZXh0ZW5zaW9ucywgYmFja2VuZCB9ID0gdGhpcztcblxuXG5cdFx0Z2wucGl4ZWxTdG9yZWkoIGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRleHR1cmUuZmxpcFkgKTtcblx0XHRnbC5waXhlbFN0b3JlaSggZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTtcblx0XHRnbC5waXhlbFN0b3JlaSggZ2wuVU5QQUNLX0FMSUdOTUVOVCwgdGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTtcblx0XHRnbC5waXhlbFN0b3JlaSggZ2wuVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCwgZ2wuTk9ORSApO1xuXG5cdFx0Z2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIGdsLlRFWFRVUkVfV1JBUF9TLCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFMgXSApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBnbC5URVhUVVJFX1dSQVBfVCwgd3JhcHBpbmdUb0dMWyB0ZXh0dXJlLndyYXBUIF0gKTtcblxuXHRcdGlmICggdGV4dHVyZVR5cGUgPT09IGdsLlRFWFRVUkVfM0QgfHwgdGV4dHVyZVR5cGUgPT09IGdsLlRFWFRVUkVfMkRfQVJSQVkgKSB7XG5cblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBnbC5URVhUVVJFX1dSQVBfUiwgd3JhcHBpbmdUb0dMWyB0ZXh0dXJlLndyYXBSIF0gKTtcblxuXHRcdH1cblxuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBnbC5URVhUVVJFX01BR19GSUxURVIsIGZpbHRlclRvR0xbIHRleHR1cmUubWFnRmlsdGVyIF0gKTtcblxuXG5cdFx0Y29uc3QgaGFzTWlwbWFwcyA9IHRleHR1cmUubWlwbWFwcyAhPT0gdW5kZWZpbmVkICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwO1xuXG5cdFx0Ly8gZm9sbG93IFdlYkdQVSBiYWNrZW5kIG1hcHBpbmcgZm9yIHRleHR1cmUgZmlsdGVyaW5nXG5cdFx0Y29uc3QgbWluRmlsdGVyID0gdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhckZpbHRlciAmJiBoYXNNaXBtYXBzID8gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIDogdGV4dHVyZS5taW5GaWx0ZXI7XG5cblx0XHRnbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBmaWx0ZXJUb0dMWyBtaW5GaWx0ZXIgXSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmNvbXBhcmVGdW5jdGlvbiApIHtcblxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIGdsLlRFWFRVUkVfQ09NUEFSRV9NT0RFLCBnbC5DT01QQVJFX1JFRl9UT19URVhUVVJFICk7XG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgZ2wuVEVYVFVSRV9DT01QQVJFX0ZVTkMsIGNvbXBhcmVUb0dMWyB0ZXh0dXJlLmNvbXBhcmVGdW5jdGlvbiBdICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmUubWFnRmlsdGVyID09PSBOZWFyZXN0RmlsdGVyICkgcmV0dXJuO1xuXHRcdFx0aWYgKCB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyICkgcmV0dXJuO1xuXHRcdFx0aWYgKCB0ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmhhcyggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKSA9PT0gZmFsc2UgKSByZXR1cm47IC8vIHZlcmlmeSBleHRlbnNpb24gZm9yIFdlYkdMIDEgYW5kIFdlYkdMIDJcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmFuaXNvdHJvcHkgPiAxICkge1xuXG5cdFx0XHRcdGNvbnN0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApO1xuXHRcdFx0XHRnbC50ZXhQYXJhbWV0ZXJmKCB0ZXh0dXJlVHlwZSwgZXh0ZW5zaW9uLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBNYXRoLm1pbiggdGV4dHVyZS5hbmlzb3Ryb3B5LCBiYWNrZW5kLmdldE1heEFuaXNvdHJvcHkoKSApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBkZWZhdWx0IHRleHR1cmUgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIHRoYXQgY2FuIGJlIHVzZWRcblx0ICogYXMgYSBwbGFjZWhvbGRlciB1bnRpbCB0aGUgYWN0dWFsIHRleHR1cmUgaXMgcmVhZHkgZm9yIHVzYWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBjcmVhdGUgYSBkZWZhdWx0IHRleHR1cmUgZm9yLlxuXHQgKi9cblx0Y3JlYXRlRGVmYXVsdFRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHRjb25zdCB7IGdsLCBiYWNrZW5kLCBkZWZhdWx0VGV4dHVyZXMgfSA9IHRoaXM7XG5cblxuXHRcdGNvbnN0IGdsVGV4dHVyZVR5cGUgPSB0aGlzLmdldEdMVGV4dHVyZVR5cGUoIHRleHR1cmUgKTtcblxuXHRcdGxldCB0ZXh0dXJlR1BVID0gZGVmYXVsdFRleHR1cmVzWyBnbFRleHR1cmVUeXBlIF07XG5cblx0XHRpZiAoIHRleHR1cmVHUFUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZUdQVSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdFx0YmFja2VuZC5zdGF0ZS5iaW5kVGV4dHVyZSggZ2xUZXh0dXJlVHlwZSwgdGV4dHVyZUdQVSApO1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaSggZ2xUZXh0dXJlVHlwZSwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUICk7XG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKCBnbFRleHR1cmVUeXBlLCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QgKTtcblxuXHRcdFx0Ly8gZ2wudGV4SW1hZ2UyRCggZ2xUZXh0dXJlVHlwZSwgMCwgZ2wuUkdCQSwgMSwgMSwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgZGF0YSApO1xuXG5cdFx0XHRkZWZhdWx0VGV4dHVyZXNbIGdsVGV4dHVyZVR5cGUgXSA9IHRleHR1cmVHUFU7XG5cblx0XHR9XG5cblx0XHRiYWNrZW5kLnNldCggdGV4dHVyZSwge1xuXHRcdFx0dGV4dHVyZUdQVSxcblx0XHRcdGdsVGV4dHVyZVR5cGUsXG5cdFx0XHRpc0RlZmF1bHQ6IHRydWVcblx0XHR9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIGEgdGV4dHVyZSBvbiB0aGUgR1BVIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZSBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqIEByZXR1cm4ge3VuZGVmaW5lZH1cblx0ICovXG5cdGNyZWF0ZVRleHR1cmUoIHRleHR1cmUsIG9wdGlvbnMgKSB7XG5cblx0XHRjb25zdCB7IGdsLCBiYWNrZW5kIH0gPSB0aGlzO1xuXHRcdGNvbnN0IHsgbGV2ZWxzLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9ID0gb3B0aW9ucztcblxuXHRcdGNvbnN0IGdsRm9ybWF0ID0gYmFja2VuZC51dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0Y29uc3QgZ2xUeXBlID0gYmFja2VuZC51dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRjb25zdCBnbEludGVybmFsRm9ybWF0ID0gdGhpcy5nZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5jb2xvclNwYWNlLCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICk7XG5cblx0XHRjb25zdCB0ZXh0dXJlR1BVID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXHRcdGNvbnN0IGdsVGV4dHVyZVR5cGUgPSB0aGlzLmdldEdMVGV4dHVyZVR5cGUoIHRleHR1cmUgKTtcblxuXHRcdGJhY2tlbmQuc3RhdGUuYmluZFRleHR1cmUoIGdsVGV4dHVyZVR5cGUsIHRleHR1cmVHUFUgKTtcblxuXHRcdHRoaXMuc2V0VGV4dHVyZVBhcmFtZXRlcnMoIGdsVGV4dHVyZVR5cGUsIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdGdsLnRleFN0b3JhZ2UzRCggZ2wuVEVYVFVSRV8yRF9BUlJBWSwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB7XG5cblx0XHRcdGdsLnRleFN0b3JhZ2UzRCggZ2wuVEVYVFVSRV8zRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXG5cdFx0fSBlbHNlIGlmICggISB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkge1xuXG5cdFx0XHRnbC50ZXhTdG9yYWdlMkQoIGdsVGV4dHVyZVR5cGUsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0YmFja2VuZC5zZXQoIHRleHR1cmUsIHtcblx0XHRcdHRleHR1cmVHUFUsXG5cdFx0XHRnbFRleHR1cmVUeXBlLFxuXHRcdFx0Z2xGb3JtYXQsXG5cdFx0XHRnbFR5cGUsXG5cdFx0XHRnbEludGVybmFsRm9ybWF0XG5cdFx0fSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBsb2FkcyB0ZXh0dXJlIGJ1ZmZlciBkYXRhIHRvIHRoZSBHUFUgbWVtb3J5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMQnVmZmVyfSBidWZmZXIgLSBUaGUgYnVmZmVyIGRhdGEuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLFxuXHQgKi9cblx0Y29weUJ1ZmZlclRvVGV4dHVyZSggYnVmZmVyLCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgeyBnbCwgYmFja2VuZCB9ID0gdGhpcztcblxuXHRcdGNvbnN0IHsgdGV4dHVyZUdQVSwgZ2xUZXh0dXJlVHlwZSwgZ2xGb3JtYXQsIGdsVHlwZSB9ID0gYmFja2VuZC5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGV4dHVyZS5zb3VyY2UuZGF0YTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLlBJWEVMX1VOUEFDS19CVUZGRVIsIGJ1ZmZlciApO1xuXG5cdFx0YmFja2VuZC5zdGF0ZS5iaW5kVGV4dHVyZSggZ2xUZXh0dXJlVHlwZSwgdGV4dHVyZUdQVSApO1xuXG5cdFx0Z2wucGl4ZWxTdG9yZWkoIGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZhbHNlICk7XG5cdFx0Z2wucGl4ZWxTdG9yZWkoIGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgZmFsc2UgKTtcblx0XHRnbC50ZXhTdWJJbWFnZTJEKCBnbFRleHR1cmVUeXBlLCAwLCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCAwICk7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5QSVhFTF9VTlBBQ0tfQlVGRkVSLCBudWxsICk7XG5cblx0XHRiYWNrZW5kLnN0YXRlLnVuYmluZFRleHR1cmUoKTtcblx0XHQvLyBkZWJ1Z1xuXHRcdC8vIGNvbnN0IGZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblx0XHQvLyBnbC5iaW5kRnJhbWVidWZmZXIoIGdsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApO1xuXHRcdC8vIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsVGV4dHVyZVR5cGUsIHRleHR1cmVHUFUsIDAgKTtcblxuXHRcdC8vIGNvbnN0IHJlYWRvdXQgPSBuZXcgRmxvYXQzMkFycmF5KCB3aWR0aCAqIGhlaWdodCAqIDQgKTtcblxuXHRcdC8vIGNvbnN0IGFsdEZvcm1hdCA9IGdsLmdldFBhcmFtZXRlciggZ2wuSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9GT1JNQVQgKTtcblx0XHQvLyBjb25zdCBhbHRUeXBlID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5JTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX1RZUEUgKTtcblxuXHRcdC8vIGdsLnJlYWRQaXhlbHMoIDAsIDAsIHdpZHRoLCBoZWlnaHQsIGFsdEZvcm1hdCwgYWx0VHlwZSwgcmVhZG91dCApO1xuXHRcdC8vIGdsLmJpbmRGcmFtZWJ1ZmZlciggZ2wuRlJBTUVCVUZGRVIsIG51bGwgKTtcblx0XHQvLyBjb25zb2xlLmxvZyggcmVhZG91dCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBsb2FkcyB0aGUgdXBkYXRlZCB0ZXh0dXJlIGRhdGEgdG8gdGhlIEdQVS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uIHBhcmFtZXRlci5cblx0ICovXG5cdHVwZGF0ZVRleHR1cmUoIHRleHR1cmUsIG9wdGlvbnMgKSB7XG5cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gb3B0aW9ucztcblx0XHRjb25zdCB7IHRleHR1cmVHUFUsIGdsVGV4dHVyZVR5cGUsIGdsRm9ybWF0LCBnbFR5cGUsIGdsSW50ZXJuYWxGb3JtYXQgfSA9IHRoaXMuYmFja2VuZC5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgfHwgKCB0ZXh0dXJlR1BVID09PSB1bmRlZmluZWQgLyogdW5zdXBwb3J0ZWQgdGV4dHVyZSBmb3JtYXQgKi8gKSApXG5cdFx0XHRyZXR1cm47XG5cblx0XHRjb25zdCBnZXRJbWFnZSA9ICggc291cmNlICkgPT4ge1xuXG5cdFx0XHRpZiAoIHNvdXJjZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdHJldHVybiBzb3VyY2UuaW1hZ2UuZGF0YTtcblxuXHRcdFx0fSBlbHNlIGlmICggKCB0eXBlb2YgSFRNTEltYWdlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgc291cmNlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHx8XG5cdFx0XHRcdCggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBzb3VyY2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHx8XG5cdFx0XHRcdCggdHlwZW9mIEltYWdlQml0bWFwICE9PSAndW5kZWZpbmVkJyAmJiBzb3VyY2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApIHx8XG5cdFx0XHRcdHNvdXJjZSBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcyApIHtcblxuXHRcdFx0XHRyZXR1cm4gc291cmNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzb3VyY2UuZGF0YTtcblxuXHRcdH07XG5cblx0XHR0aGlzLmJhY2tlbmQuc3RhdGUuYmluZFRleHR1cmUoIGdsVGV4dHVyZVR5cGUsIHRleHR1cmVHUFUgKTtcblxuXHRcdHRoaXMuc2V0VGV4dHVyZVBhcmFtZXRlcnMoIGdsVGV4dHVyZVR5cGUsIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICkge1xuXG5cdFx0XHRjb25zdCBtaXBtYXBzID0gdGV4dHVyZS5taXBtYXBzO1xuXHRcdFx0Y29uc3QgaW1hZ2UgPSBvcHRpb25zLmltYWdlO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBtaXBtYXBzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBtaXBtYXAgPSBtaXBtYXBzWyBpIF07XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHtcblxuXG5cdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gZ2wuUkdCQSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnbEZvcm1hdCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0XHRnbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCggZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgMCwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnVwbG9hZFRleHR1cmUoKScgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Z2wudGV4U3ViSW1hZ2UzRCggZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgMCwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBnbEZvcm1hdCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0Z2wuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoIGdsLlRFWFRVUkVfMkQsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdVbnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0JyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ3ViZVRleHR1cmUgKSB7XG5cblx0XHRcdGNvbnN0IGltYWdlcyA9IG9wdGlvbnMuaW1hZ2VzO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGltYWdlID0gZ2V0SW1hZ2UoIGltYWdlc1sgaSBdICk7XG5cblx0XHRcdFx0Z2wudGV4U3ViSW1hZ2UyRCggZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgMCwgMCwgMCwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdGNvbnN0IGltYWdlID0gb3B0aW9ucy5pbWFnZTtcblxuXHRcdFx0Z2wudGV4U3ViSW1hZ2UzRCggZ2wuVEVYVFVSRV8yRF9BUlJBWSwgMCwgMCwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGgsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRjb25zdCBpbWFnZSA9IG9wdGlvbnMuaW1hZ2U7XG5cblx0XHRcdGdsLnRleFN1YkltYWdlM0QoIGdsLlRFWFRVUkVfM0QsIDAsIDAsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkge1xuXG5cdFx0XHR0ZXh0dXJlLnVwZGF0ZSgpO1xuXG5cdFx0XHRnbC50ZXhJbWFnZTJEKCBnbFRleHR1cmVUeXBlLCAwLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBvcHRpb25zLmltYWdlICk7XG5cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IGltYWdlID0gZ2V0SW1hZ2UoIG9wdGlvbnMuaW1hZ2UgKTtcblxuXHRcdFx0Z2wudGV4U3ViSW1hZ2UyRCggZ2xUZXh0dXJlVHlwZSwgMCwgMCwgMCwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBtaXBtYXBzIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqL1xuXHRnZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSB7XG5cblx0XHRjb25zdCB7IGdsLCBiYWNrZW5kIH0gPSB0aGlzO1xuXHRcdGNvbnN0IHsgdGV4dHVyZUdQVSwgZ2xUZXh0dXJlVHlwZSB9ID0gYmFja2VuZC5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGJhY2tlbmQuc3RhdGUuYmluZFRleHR1cmUoIGdsVGV4dHVyZVR5cGUsIHRleHR1cmVHUFUgKTtcblx0XHRnbC5nZW5lcmF0ZU1pcG1hcCggZ2xUZXh0dXJlVHlwZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVhbGxvY2F0ZXMgdGhlIHJlbmRlciBidWZmZXJzIG9mIHRoZSBnaXZlbiByZW5kZXIgdGFyZ2V0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlclRhcmdldH0gcmVuZGVyVGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQuXG5cdCAqL1xuXHRkZWFsbG9jYXRlUmVuZGVyQnVmZmVycyggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgeyBnbCwgYmFja2VuZCB9ID0gdGhpcztcblxuXHRcdC8vIHJlbW92ZSBmcmFtZWJ1ZmZlciByZWZlcmVuY2Vcblx0XHRpZiAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVyQ29udGV4dERhdGEgPSBiYWNrZW5kLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdHJlbmRlckNvbnRleHREYXRhLnJlbmRlckJ1ZmZlclN0b3JhZ2VTZXR1cCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCByZW5kZXJDb250ZXh0RGF0YS5mcmFtZWJ1ZmZlcnMgKSB7XG5cblx0XHRcdFx0Zm9yICggY29uc3QgY2FjaGVLZXkgaW4gcmVuZGVyQ29udGV4dERhdGEuZnJhbWVidWZmZXJzICkge1xuXG5cdFx0XHRcdFx0Z2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlckNvbnRleHREYXRhLmZyYW1lYnVmZmVyc1sgY2FjaGVLZXkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgcmVuZGVyQ29udGV4dERhdGEuZnJhbWVidWZmZXJzO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVuZGVyQ29udGV4dERhdGEuZGVwdGhSZW5kZXJidWZmZXIgKSB7XG5cblx0XHRcdFx0Z2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJDb250ZXh0RGF0YS5kZXB0aFJlbmRlcmJ1ZmZlciApO1xuXHRcdFx0XHRkZWxldGUgcmVuZGVyQ29udGV4dERhdGEuZGVwdGhSZW5kZXJidWZmZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZW5kZXJDb250ZXh0RGF0YS5zdGVuY2lsUmVuZGVyYnVmZmVyICkge1xuXG5cdFx0XHRcdGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlciggcmVuZGVyQ29udGV4dERhdGEuc3RlbmNpbFJlbmRlcmJ1ZmZlciApO1xuXHRcdFx0XHRkZWxldGUgcmVuZGVyQ29udGV4dERhdGEuc3RlbmNpbFJlbmRlcmJ1ZmZlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHJlbmRlckNvbnRleHREYXRhLm1zYWFGcmFtZUJ1ZmZlciApIHtcblxuXHRcdFx0XHRnbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyQ29udGV4dERhdGEubXNhYUZyYW1lQnVmZmVyICk7XG5cdFx0XHRcdGRlbGV0ZSByZW5kZXJDb250ZXh0RGF0YS5tc2FhRnJhbWVCdWZmZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZW5kZXJDb250ZXh0RGF0YS5tc2FhUmVuZGVyYnVmZmVycyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCByZW5kZXJDb250ZXh0RGF0YS5tc2FhUmVuZGVyYnVmZmVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRnbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlckNvbnRleHREYXRhLm1zYWFSZW5kZXJidWZmZXJzWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIHJlbmRlckNvbnRleHREYXRhLm1zYWFSZW5kZXJidWZmZXJzO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgR1BVIGRhdGEgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqL1xuXHRkZXN0cm95VGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IHsgZ2wsIGJhY2tlbmQgfSA9IHRoaXM7XG5cdFx0Y29uc3QgeyB0ZXh0dXJlR1BVLCByZW5kZXJUYXJnZXQgfSA9IGJhY2tlbmQuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHR0aGlzLmRlYWxsb2NhdGVSZW5kZXJCdWZmZXJzKCByZW5kZXJUYXJnZXQgKTtcblx0XHRnbC5kZWxldGVUZXh0dXJlKCB0ZXh0dXJlR1BVICk7XG5cblx0XHRiYWNrZW5kLmRlbGV0ZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIGRhdGEgb2YgdGhlIGdpdmVuIHNvdXJjZSB0ZXh0dXJlIHRvIHRoZSBnaXZlbiBkZXN0aW5hdGlvbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHNyY1RleHR1cmUgLSBUaGUgc291cmNlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gZHN0VGV4dHVyZSAtIFRoZSBkZXN0aW5hdGlvbiB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0gez8oQm94M3xCb3gyKX0gW3NyY1JlZ2lvbj1udWxsXSAtIFRoZSByZWdpb24gb2YgdGhlIHNvdXJjZSB0ZXh0dXJlIHRvIGNvcHkuXG5cdCAqIEBwYXJhbSB7PyhWZWN0b3IyfFZlY3RvcjMpfSBbZHN0UG9zaXRpb249bnVsbF0gLSBUaGUgZGVzdGluYXRpb24gcG9zaXRpb24gb2YgdGhlIGNvcHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbc3JjTGV2ZWw9MF0gLSBUaGUgc291cmNlIG1pcCBsZXZlbCB0byBjb3B5IGZyb20uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZHN0TGV2ZWw9MF0gLSBUaGUgZGVzdGluYXRpb24gbWlwIGxldmVsIHRvIGNvcHkgdG8uXG5cdCAqL1xuXHRjb3B5VGV4dHVyZVRvVGV4dHVyZSggc3JjVGV4dHVyZSwgZHN0VGV4dHVyZSwgc3JjUmVnaW9uID0gbnVsbCwgZHN0UG9zaXRpb24gPSBudWxsLCBzcmNMZXZlbCA9IDAsIGRzdExldmVsID0gMCApIHtcblxuXHRcdGNvbnN0IHsgZ2wsIGJhY2tlbmQgfSA9IHRoaXM7XG5cdFx0Y29uc3QgeyBzdGF0ZSB9ID0gdGhpcy5iYWNrZW5kO1xuXG5cdFx0Y29uc3QgeyB0ZXh0dXJlR1BVOiBkc3RUZXh0dXJlR1BVLCBnbFRleHR1cmVUeXBlLCBnbFR5cGUsIGdsRm9ybWF0IH0gPSBiYWNrZW5kLmdldCggZHN0VGV4dHVyZSApO1xuXG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIGdsVGV4dHVyZVR5cGUsIGRzdFRleHR1cmVHUFUgKTtcblxuXHRcdC8vIGdhdGhlciB0aGUgbmVjZXNzYXJ5IGRpbWVuc2lvbnMgdG8gY29weVxuXHRcdGxldCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgbWluWCwgbWluWSwgbWluWjtcblx0XHRsZXQgZHN0WCwgZHN0WSwgZHN0Wjtcblx0XHRjb25zdCBpbWFnZSA9IHNyY1RleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSA/IHNyY1RleHR1cmUubWlwbWFwc1sgZHN0TGV2ZWwgXSA6IHNyY1RleHR1cmUuaW1hZ2U7XG5cblx0XHRpZiAoIHNyY1JlZ2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0d2lkdGggPSBzcmNSZWdpb24ubWF4LnggLSBzcmNSZWdpb24ubWluLng7XG5cdFx0XHRoZWlnaHQgPSBzcmNSZWdpb24ubWF4LnkgLSBzcmNSZWdpb24ubWluLnk7XG5cdFx0XHRkZXB0aCA9IHNyY1JlZ2lvbi5pc0JveDMgPyBzcmNSZWdpb24ubWF4LnogLSBzcmNSZWdpb24ubWluLnogOiAxO1xuXHRcdFx0bWluWCA9IHNyY1JlZ2lvbi5taW4ueDtcblx0XHRcdG1pblkgPSBzcmNSZWdpb24ubWluLnk7XG5cdFx0XHRtaW5aID0gc3JjUmVnaW9uLmlzQm94MyA/IHNyY1JlZ2lvbi5taW4ueiA6IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBsZXZlbFNjYWxlID0gTWF0aC5wb3coIDIsIC0gc3JjTGV2ZWwgKTtcblx0XHRcdHdpZHRoID0gTWF0aC5mbG9vciggaW1hZ2Uud2lkdGggKiBsZXZlbFNjYWxlICk7XG5cdFx0XHRoZWlnaHQgPSBNYXRoLmZsb29yKCBpbWFnZS5oZWlnaHQgKiBsZXZlbFNjYWxlICk7XG5cblx0XHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0ZGVwdGggPSBpbWFnZS5kZXB0aDtcblxuXHRcdFx0fSBlbHNlIGlmICggc3JjVGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB7XG5cblx0XHRcdFx0ZGVwdGggPSBNYXRoLmZsb29yKCBpbWFnZS5kZXB0aCAqIGxldmVsU2NhbGUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkZXB0aCA9IDE7XG5cblx0XHRcdH1cblxuXHRcdFx0bWluWCA9IDA7XG5cdFx0XHRtaW5ZID0gMDtcblx0XHRcdG1pblogPSAwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkc3RQb3NpdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0ZHN0WCA9IGRzdFBvc2l0aW9uLng7XG5cdFx0XHRkc3RZID0gZHN0UG9zaXRpb24ueTtcblx0XHRcdGRzdFogPSBkc3RQb3NpdGlvbi56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZHN0WCA9IDA7XG5cdFx0XHRkc3RZID0gMDtcblx0XHRcdGRzdFogPSAwO1xuXG5cdFx0fVxuXG5cblx0XHRnbC5waXhlbFN0b3JlaSggZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZHN0VGV4dHVyZS5mbGlwWSApO1xuXHRcdGdsLnBpeGVsU3RvcmVpKCBnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsIGRzdFRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdGdsLnBpeGVsU3RvcmVpKCBnbC5VTlBBQ0tfQUxJR05NRU5ULCBkc3RUZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXG5cdFx0Ly8gdXNlZCBmb3IgY29weWluZyBkYXRhIGZyb20gY3B1XG5cdFx0Y29uc3QgY3VycmVudFVucGFja1Jvd0xlbiA9IGdsLmdldFBhcmFtZXRlciggZ2wuVU5QQUNLX1JPV19MRU5HVEggKTtcblx0XHRjb25zdCBjdXJyZW50VW5wYWNrSW1hZ2VIZWlnaHQgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLlVOUEFDS19JTUFHRV9IRUlHSFQgKTtcblx0XHRjb25zdCBjdXJyZW50VW5wYWNrU2tpcFBpeGVscyA9IGdsLmdldFBhcmFtZXRlciggZ2wuVU5QQUNLX1NLSVBfUElYRUxTICk7XG5cdFx0Y29uc3QgY3VycmVudFVucGFja1NraXBSb3dzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5VTlBBQ0tfU0tJUF9ST1dTICk7XG5cdFx0Y29uc3QgY3VycmVudFVucGFja1NraXBJbWFnZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLlVOUEFDS19TS0lQX0lNQUdFUyApO1xuXG5cdFx0Z2wucGl4ZWxTdG9yZWkoIGdsLlVOUEFDS19ST1dfTEVOR1RILCBpbWFnZS53aWR0aCApO1xuXHRcdGdsLnBpeGVsU3RvcmVpKCBnbC5VTlBBQ0tfSU1BR0VfSEVJR0hULCBpbWFnZS5oZWlnaHQgKTtcblx0XHRnbC5waXhlbFN0b3JlaSggZ2wuVU5QQUNLX1NLSVBfUElYRUxTLCBtaW5YICk7XG5cdFx0Z2wucGl4ZWxTdG9yZWkoIGdsLlVOUEFDS19TS0lQX1JPV1MsIG1pblkgKTtcblx0XHRnbC5waXhlbFN0b3JlaSggZ2wuVU5QQUNLX1NLSVBfSU1BR0VTLCBtaW5aICk7XG5cblx0XHQvLyBzZXQgdXAgdGhlIHNyYyB0ZXh0dXJlXG5cdFx0Y29uc3QgaXNEc3QzRCA9IGRzdFRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlIHx8IGRzdFRleHR1cmUuaXNEYXRhM0RUZXh0dXJlO1xuXHRcdGlmICggc3JjVGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgfHwgc3JjVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc3Qgc3JjVGV4dHVyZURhdGEgPSBiYWNrZW5kLmdldCggc3JjVGV4dHVyZSApO1xuXHRcdFx0Y29uc3QgZHN0VGV4dHVyZURhdGEgPSBiYWNrZW5kLmdldCggZHN0VGV4dHVyZSApO1xuXG5cdFx0XHRjb25zdCBzcmNSZW5kZXJDb250ZXh0RGF0YSA9IGJhY2tlbmQuZ2V0KCBzcmNUZXh0dXJlRGF0YS5yZW5kZXJUYXJnZXQgKTtcblx0XHRcdGNvbnN0IGRzdFJlbmRlckNvbnRleHREYXRhID0gYmFja2VuZC5nZXQoIGRzdFRleHR1cmVEYXRhLnJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRjb25zdCBzcmNGcmFtZWJ1ZmZlciA9IHNyY1JlbmRlckNvbnRleHREYXRhLmZyYW1lYnVmZmVyc1sgc3JjVGV4dHVyZURhdGEuY2FjaGVLZXkgXTtcblx0XHRcdGNvbnN0IGRzdEZyYW1lYnVmZmVyID0gZHN0UmVuZGVyQ29udGV4dERhdGEuZnJhbWVidWZmZXJzWyBkc3RUZXh0dXJlRGF0YS5jYWNoZUtleSBdO1xuXG5cdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLlJFQURfRlJBTUVCVUZGRVIsIHNyY0ZyYW1lYnVmZmVyICk7XG5cdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLkRSQVdfRlJBTUVCVUZGRVIsIGRzdEZyYW1lYnVmZmVyICk7XG5cblx0XHRcdGxldCBtYXNrID0gZ2wuQ09MT1JfQlVGRkVSX0JJVDtcblxuXHRcdFx0aWYgKCBzcmNUZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkgbWFzayA9IGdsLkRFUFRIX0JVRkZFUl9CSVQ7XG5cblx0XHRcdGdsLmJsaXRGcmFtZWJ1ZmZlciggbWluWCwgbWluWSwgd2lkdGgsIGhlaWdodCwgZHN0WCwgZHN0WSwgd2lkdGgsIGhlaWdodCwgbWFzaywgZ2wuTkVBUkVTVCApO1xuXG5cdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLlJFQURfRlJBTUVCVUZGRVIsIG51bGwgKTtcblx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggZ2wuRFJBV19GUkFNRUJVRkZFUiwgbnVsbCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBpc0RzdDNEICkge1xuXG5cdFx0XHRcdC8vIGNvcHkgZGF0YSBpbnRvIHRoZSAzZCB0ZXh0dXJlXG5cdFx0XHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlIHx8IHNyY1RleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0Z2wudGV4U3ViSW1hZ2UzRCggZ2xUZXh0dXJlVHlwZSwgZHN0TGV2ZWwsIGRzdFgsIGRzdFksIGRzdFosIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggZHN0VGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRnbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCggZ2xUZXh0dXJlVHlwZSwgZHN0TGV2ZWwsIGRzdFgsIGRzdFksIGRzdFosIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBnbEZvcm1hdCwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRnbC50ZXhTdWJJbWFnZTNEKCBnbFRleHR1cmVUeXBlLCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgZHN0Wiwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIGNvcHkgZGF0YSBpbnRvIHRoZSAyZCB0ZXh0dXJlXG5cdFx0XHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0Z2wudGV4U3ViSW1hZ2UyRCggZ2xUZXh0dXJlVHlwZSwgZHN0TGV2ZWwsIGRzdFgsIGRzdFksIHdpZHRoLCBoZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzcmNUZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRnbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggZ2xUZXh0dXJlVHlwZSwgZHN0TGV2ZWwsIGRzdFgsIGRzdFksIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGdsRm9ybWF0LCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGdsLnRleFN1YkltYWdlMkQoIGdsVGV4dHVyZVR5cGUsIGRzdExldmVsLCBkc3RYLCBkc3RZLCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gcmVzZXQgdmFsdWVzXG5cdFx0Z2wucGl4ZWxTdG9yZWkoIGdsLlVOUEFDS19ST1dfTEVOR1RILCBjdXJyZW50VW5wYWNrUm93TGVuICk7XG5cdFx0Z2wucGl4ZWxTdG9yZWkoIGdsLlVOUEFDS19JTUFHRV9IRUlHSFQsIGN1cnJlbnRVbnBhY2tJbWFnZUhlaWdodCApO1xuXHRcdGdsLnBpeGVsU3RvcmVpKCBnbC5VTlBBQ0tfU0tJUF9QSVhFTFMsIGN1cnJlbnRVbnBhY2tTa2lwUGl4ZWxzICk7XG5cdFx0Z2wucGl4ZWxTdG9yZWkoIGdsLlVOUEFDS19TS0lQX1JPV1MsIGN1cnJlbnRVbnBhY2tTa2lwUm93cyApO1xuXHRcdGdsLnBpeGVsU3RvcmVpKCBnbC5VTlBBQ0tfU0tJUF9JTUFHRVMsIGN1cnJlbnRVbnBhY2tTa2lwSW1hZ2VzICk7XG5cblx0XHQvLyBHZW5lcmF0ZSBtaXBtYXBzIG9ubHkgd2hlbiBjb3B5aW5nIGxldmVsIDBcblx0XHRpZiAoIGRzdExldmVsID09PSAwICYmIGRzdFRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICkge1xuXG5cdFx0XHRnbC5nZW5lcmF0ZU1pcG1hcCggZ2xUZXh0dXJlVHlwZSApO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdH1cblxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIGN1cnJlbnQgYm91bmQgZnJhbWVidWZmZXIgdG8gdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSBkZXN0aW5hdGlvbiB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gcmVjdGFuZ2xlIC0gQSBmb3VyIGRpbWVuc2lvbmFsIHZlY3RvciBkZWZpbmluZyB0aGUgb3JpZ2luIGFuZCBkaW1lbnNpb24gb2YgdGhlIGNvcHkuXG5cdCAqL1xuXHRjb3B5RnJhbWVidWZmZXJUb1RleHR1cmUoIHRleHR1cmUsIHJlbmRlckNvbnRleHQsIHJlY3RhbmdsZSApIHtcblxuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cdFx0Y29uc3QgeyBzdGF0ZSB9ID0gdGhpcy5iYWNrZW5kO1xuXG5cdFx0Y29uc3QgeyB0ZXh0dXJlR1BVIH0gPSB0aGlzLmJhY2tlbmQuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRjb25zdCB7IHgsIHksIHo6IHdpZHRoLCB3OiBoZWlnaHQgfSA9IHJlY3RhbmdsZTtcblxuXHRcdGNvbnN0IHJlcXVpcmVEcmF3RnJhbWVCdWZmZXIgPSB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlID09PSB0cnVlIHx8ICggcmVuZGVyQ29udGV4dC5yZW5kZXJUYXJnZXQgJiYgcmVuZGVyQ29udGV4dC5yZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgKTtcblxuXHRcdGNvbnN0IHNyY0hlaWdodCA9IHJlbmRlckNvbnRleHQucmVuZGVyVGFyZ2V0ID8gcmVuZGVyQ29udGV4dC5yZW5kZXJUYXJnZXQuaGVpZ2h0IDogdGhpcy5iYWNrZW5kLmdldERyYXdpbmdCdWZmZXJTaXplKCkueTtcblxuXHRcdGlmICggcmVxdWlyZURyYXdGcmFtZUJ1ZmZlciApIHtcblxuXHRcdFx0Y29uc3QgcGFydGlhbCA9ICggeCAhPT0gMCB8fCB5ICE9PSAwICk7XG5cdFx0XHRsZXQgbWFzaztcblx0XHRcdGxldCBhdHRhY2htZW50O1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuaXNEZXB0aFRleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0bWFzayA9IGdsLkRFUFRIX0JVRkZFUl9CSVQ7XG5cdFx0XHRcdGF0dGFjaG1lbnQgPSBnbC5ERVBUSF9BVFRBQ0hNRU5UO1xuXG5cdFx0XHRcdGlmICggcmVuZGVyQ29udGV4dC5zdGVuY2lsICkge1xuXG5cdFx0XHRcdFx0bWFzayB8PSBnbC5TVEVOQ0lMX0JVRkZFUl9CSVQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG1hc2sgPSBnbC5DT0xPUl9CVUZGRVJfQklUO1xuXHRcdFx0XHRhdHRhY2htZW50ID0gZ2wuQ09MT1JfQVRUQUNITUVOVDA7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwYXJ0aWFsICkge1xuXG5cdFx0XHRcdGNvbnN0IHJlbmRlclRhcmdldENvbnRleHREYXRhID0gdGhpcy5iYWNrZW5kLmdldCggcmVuZGVyQ29udGV4dC5yZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRjb25zdCBmYiA9IHJlbmRlclRhcmdldENvbnRleHREYXRhLmZyYW1lYnVmZmVyc1sgcmVuZGVyQ29udGV4dC5nZXRDYWNoZUtleSgpIF07XG5cdFx0XHRcdGNvbnN0IG1zYWFGcmFtZUJ1ZmZlciA9IHJlbmRlclRhcmdldENvbnRleHREYXRhLm1zYWFGcmFtZUJ1ZmZlcjtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLkRSQVdfRlJBTUVCVUZGRVIsIGZiICk7XG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggZ2wuUkVBRF9GUkFNRUJVRkZFUiwgbXNhYUZyYW1lQnVmZmVyICk7XG5cblx0XHRcdFx0Y29uc3QgZmxpcHBlZFkgPSBzcmNIZWlnaHQgLSB5IC0gaGVpZ2h0O1xuXG5cdFx0XHRcdGdsLmJsaXRGcmFtZWJ1ZmZlciggeCwgZmxpcHBlZFksIHggKyB3aWR0aCwgZmxpcHBlZFkgKyBoZWlnaHQsIHgsIGZsaXBwZWRZLCB4ICsgd2lkdGgsIGZsaXBwZWRZICsgaGVpZ2h0LCBtYXNrLCBnbC5ORUFSRVNUICk7XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBnbC5SRUFEX0ZSQU1FQlVGRkVSLCBmYiApO1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlR1BVICk7XG5cblx0XHRcdFx0Z2wuY29weVRleFN1YkltYWdlMkQoIGdsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIHgsIGZsaXBwZWRZLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IGZiID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLkRSQVdfRlJBTUVCVUZGRVIsIGZiICk7XG5cblx0XHRcdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIGdsLkRSQVdfRlJBTUVCVUZGRVIsIGF0dGFjaG1lbnQsIGdsLlRFWFRVUkVfMkQsIHRleHR1cmVHUFUsIDAgKTtcblx0XHRcdFx0Z2wuYmxpdEZyYW1lYnVmZmVyKCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCBtYXNrLCBnbC5ORUFSRVNUICk7XG5cblx0XHRcdFx0Z2wuZGVsZXRlRnJhbWVidWZmZXIoIGZiICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlR1BVICk7XG5cdFx0XHRnbC5jb3B5VGV4U3ViSW1hZ2UyRCggZ2wuVEVYVFVSRV8yRCwgMCwgMCwgMCwgeCwgc3JjSGVpZ2h0IC0gaGVpZ2h0IC0geSwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICkgdGhpcy5nZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKTtcblxuXHRcdHRoaXMuYmFja2VuZC5fc2V0RnJhbWVidWZmZXIoIHJlbmRlckNvbnRleHQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHVwUyBzdG9yYWdlIGZvciBpbnRlcm5hbCBkZXB0aC9zdGVuY2lsIGJ1ZmZlcnMgYW5kIGJpbmQgdG8gY29ycmVjdCBmcmFtZWJ1ZmZlci5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTFJlbmRlcmJ1ZmZlcn0gcmVuZGVyYnVmZmVyIC0gVGhlIHJlbmRlciBidWZmZXIuXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZXMgLSBUaGUgTVNBQSBzYW1wbGUgY291bnQuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VzZU11bHRpc2FtcGxlZFJUVD1mYWxzZV0gLSBXaGV0aGVyIHRvIHVzZSBXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUgb3Igbm90LlxuXHQgKi9cblx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJidWZmZXIsIHJlbmRlckNvbnRleHQsIHNhbXBsZXMsIHVzZU11bHRpc2FtcGxlZFJUVCA9IGZhbHNlICkge1xuXG5cdFx0Y29uc3QgeyBnbCB9ID0gdGhpcztcblx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSByZW5kZXJDb250ZXh0LnJlbmRlclRhcmdldDtcblxuXHRcdGNvbnN0IHsgZGVwdGhUZXh0dXJlLCBkZXB0aEJ1ZmZlciwgc3RlbmNpbEJ1ZmZlciwgd2lkdGgsIGhlaWdodCB9ID0gcmVuZGVyVGFyZ2V0O1xuXG5cdFx0Z2wuYmluZFJlbmRlcmJ1ZmZlciggZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdGlmICggZGVwdGhCdWZmZXIgJiYgISBzdGVuY2lsQnVmZmVyICkge1xuXG5cdFx0XHRsZXQgZ2xJbnRlcm5hbEZvcm1hdCA9IGdsLkRFUFRIX0NPTVBPTkVOVDI0O1xuXG5cdFx0XHRpZiAoIHVzZU11bHRpc2FtcGxlZFJUVCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zdCBtdWx0aXNhbXBsZWRSVFRFeHQgPSB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApO1xuXG5cdFx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGVFWFQoIGdsLlJFTkRFUkJVRkZFUiwgcmVuZGVyVGFyZ2V0LnNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggc2FtcGxlcyA+IDAgKSB7XG5cblx0XHRcdFx0aWYgKCBkZXB0aFRleHR1cmUgJiYgZGVwdGhUZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkZXB0aFRleHR1cmUudHlwZSA9PT0gZ2wuRkxPQVQgKSB7XG5cblx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnbC5ERVBUSF9DT01QT05FTlQzMkY7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggZ2wuUkVOREVSQlVGRkVSLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Z2wucmVuZGVyYnVmZmVyU3RvcmFnZSggZ2wuUkVOREVSQlVGRkVSLCBnbEludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIGdsLkZSQU1FQlVGRkVSLCBnbC5ERVBUSF9BVFRBQ0hNRU5ULCBnbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0fSBlbHNlIGlmICggZGVwdGhCdWZmZXIgJiYgc3RlbmNpbEJ1ZmZlciApIHtcblxuXHRcdFx0aWYgKCBzYW1wbGVzID4gMCApIHtcblxuXHRcdFx0XHRnbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIGdsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2wuREVQVEgyNF9TVEVOQ0lMOCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoIGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfU1RFTkNJTCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0Z2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIGdsLkZSQU1FQlVGRkVSLCBnbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsIGdsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRleHR1cmUgZGF0YSBhcyBhIHR5cGVkIGFycmF5LlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBjb3B5IG9yaWdpbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBjb3B5IG9yaWdpbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBjb3B5LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGZhY2VJbmRleCAtIFRoZSBmYWNlIGluZGV4LlxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPFR5cGVkQXJyYXk+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgdHlwZWQgYXJyYXkgd2hlbiB0aGUgY29weSBvcGVyYXRpb24gaGFzIGZpbmlzaGVkLlxuXHQgKi9cblx0YXN5bmMgY29weVRleHR1cmVUb0J1ZmZlciggdGV4dHVyZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgZmFjZUluZGV4ICkge1xuXG5cdFx0Y29uc3QgeyBiYWNrZW5kLCBnbCB9ID0gdGhpcztcblxuXHRcdGNvbnN0IHsgdGV4dHVyZUdQVSwgZ2xGb3JtYXQsIGdsVHlwZSB9ID0gdGhpcy5iYWNrZW5kLmdldCggdGV4dHVyZSApO1xuXG5cdFx0Y29uc3QgZmIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKCBnbC5SRUFEX0ZSQU1FQlVGRkVSLCBmYiApO1xuXG5cdFx0Y29uc3QgdGFyZ2V0ID0gdGV4dHVyZS5pc0N1YmVUZXh0dXJlID8gZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgZmFjZUluZGV4IDogZ2wuVEVYVFVSRV8yRDtcblxuXHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBnbC5SRUFEX0ZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgdGFyZ2V0LCB0ZXh0dXJlR1BVLCAwICk7XG5cblx0XHRjb25zdCB0eXBlZEFycmF5VHlwZSA9IHRoaXMuX2dldFR5cGVkQXJyYXlUeXBlKCBnbFR5cGUgKTtcblx0XHRjb25zdCBieXRlc1BlclRleGVsID0gdGhpcy5fZ2V0Qnl0ZXNQZXJUZXhlbCggZ2xUeXBlLCBnbEZvcm1hdCApO1xuXG5cdFx0Y29uc3QgZWxlbWVudENvdW50ID0gd2lkdGggKiBoZWlnaHQ7XG5cdFx0Y29uc3QgYnl0ZUxlbmd0aCA9IGVsZW1lbnRDb3VudCAqIGJ5dGVzUGVyVGV4ZWw7XG5cblx0XHRjb25zdCBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLlBJWEVMX1BBQ0tfQlVGRkVSLCBidWZmZXIgKTtcblx0XHRnbC5idWZmZXJEYXRhKCBnbC5QSVhFTF9QQUNLX0JVRkZFUiwgYnl0ZUxlbmd0aCwgZ2wuU1RSRUFNX1JFQUQgKTtcblx0XHRnbC5yZWFkUGl4ZWxzKCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCAwICk7XG5cdFx0Z2wuYmluZEJ1ZmZlciggZ2wuUElYRUxfUEFDS19CVUZGRVIsIG51bGwgKTtcblxuXHRcdGF3YWl0IGJhY2tlbmQudXRpbHMuX2NsaWVudFdhaXRBc3luYygpO1xuXG5cdFx0Y29uc3QgZHN0QnVmZmVyID0gbmV3IHR5cGVkQXJyYXlUeXBlKCBieXRlTGVuZ3RoIC8gdHlwZWRBcnJheVR5cGUuQllURVNfUEVSX0VMRU1FTlQgKTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLlBJWEVMX1BBQ0tfQlVGRkVSLCBidWZmZXIgKTtcblx0XHRnbC5nZXRCdWZmZXJTdWJEYXRhKCBnbC5QSVhFTF9QQUNLX0JVRkZFUiwgMCwgZHN0QnVmZmVyICk7XG5cdFx0Z2wuYmluZEJ1ZmZlciggZ2wuUElYRUxfUEFDS19CVUZGRVIsIG51bGwgKTtcblxuXHRcdGdsLmRlbGV0ZUZyYW1lYnVmZmVyKCBmYiApO1xuXG5cdFx0cmV0dXJuIGRzdEJ1ZmZlcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgdHlwZWQgYXJyYXkgdHlwZSBmb3IgdGhlIGdpdmVuIFdlYkdMIGRhdGEgdHlwZS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtHTGVudW19IGdsVHlwZSAtIFRoZSBXZWJHTCBkYXRhIHR5cGUuXG5cdCAqIEByZXR1cm4ge1R5cGVkQXJyYXkuY29uc3RydWN0b3J9IFRoZSB0eXBlZCBhcnJheSB0eXBlLlxuXHQgKi9cblx0X2dldFR5cGVkQXJyYXlUeXBlKCBnbFR5cGUgKSB7XG5cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSByZXR1cm4gVWludDhBcnJheTtcblxuXHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9TSE9SVF80XzRfNF80ICkgcmV0dXJuIFVpbnQxNkFycmF5O1xuXHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9TSE9SVF81XzVfNV8xICkgcmV0dXJuIFVpbnQxNkFycmF5O1xuXHRcdGlmICggZ2xUeXBlID09PSBnbC5VTlNJR05FRF9TSE9SVF81XzZfNSApIHJldHVybiBVaW50MTZBcnJheTtcblx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfU0hPUlQgKSByZXR1cm4gVWludDE2QXJyYXk7XG5cdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0lOVCApIHJldHVybiBVaW50MzJBcnJheTtcblxuXHRcdGlmICggZ2xUeXBlID09PSBnbC5IQUxGX0ZMT0FUICkgcmV0dXJuIFVpbnQxNkFycmF5O1xuXHRcdGlmICggZ2xUeXBlID09PSBnbC5GTE9BVCApIHJldHVybiBGbG9hdDMyQXJyYXk7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoIGBVbnN1cHBvcnRlZCBXZWJHTCB0eXBlOiAke2dsVHlwZX1gICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBieXRlcy1wZXItdGV4ZWwgdmFsdWUgZm9yIHRoZSBnaXZlbiBXZWJHTCBkYXRhIHR5cGUgYW5kIHRleHR1cmUgZm9ybWF0LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0dMZW51bX0gZ2xUeXBlIC0gVGhlIFdlYkdMIGRhdGEgdHlwZS5cblx0ICogQHBhcmFtIHtHTGVudW19IGdsRm9ybWF0IC0gVGhlIFdlYkdMIHRleHR1cmUgZm9ybWF0LlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBieXRlcy1wZXItdGV4ZWwuXG5cdCAqL1xuXHRfZ2V0Qnl0ZXNQZXJUZXhlbCggZ2xUeXBlLCBnbEZvcm1hdCApIHtcblxuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cblx0XHRsZXQgYnl0ZXNQZXJDb21wb25lbnQgPSAwO1xuXG5cdFx0aWYgKCBnbFR5cGUgPT09IGdsLlVOU0lHTkVEX0JZVEUgKSBieXRlc1BlckNvbXBvbmVudCA9IDE7XG5cblx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNCB8fFxuXHRcdFx0Z2xUeXBlID09PSBnbC5VTlNJR05FRF9TSE9SVF81XzVfNV8xIHx8XG5cdFx0XHRnbFR5cGUgPT09IGdsLlVOU0lHTkVEX1NIT1JUXzVfNl81IHx8XG5cdFx0XHRnbFR5cGUgPT09IGdsLlVOU0lHTkVEX1NIT1JUIHx8XG5cdFx0XHRnbFR5cGUgPT09IGdsLkhBTEZfRkxPQVQgKSBieXRlc1BlckNvbXBvbmVudCA9IDI7XG5cblx0XHRpZiAoIGdsVHlwZSA9PT0gZ2wuVU5TSUdORURfSU5UIHx8XG5cdFx0XHRnbFR5cGUgPT09IGdsLkZMT0FUICkgYnl0ZXNQZXJDb21wb25lbnQgPSA0O1xuXG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gZ2wuUkdCQSApIHJldHVybiBieXRlc1BlckNvbXBvbmVudCAqIDQ7XG5cdFx0aWYgKCBnbEZvcm1hdCA9PT0gZ2wuUkdCICkgcmV0dXJuIGJ5dGVzUGVyQ29tcG9uZW50ICogMztcblx0XHRpZiAoIGdsRm9ybWF0ID09PSBnbC5BTFBIQSApIHJldHVybiBieXRlc1BlckNvbXBvbmVudDtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViR0xUZXh0dXJlVXRpbHM7XG4iLCIvKipcbiAqIEEgV2ViR0wgMiBiYWNrZW5kIHV0aWxpdHkgbW9kdWxlIGZvciBtYW5hZ2luZyBleHRlbnNpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFdlYkdMRXh0ZW5zaW9ucyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdXRpbGl0eSBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR0xCYWNrZW5kfSBiYWNrZW5kIC0gVGhlIFdlYkdMIDIgYmFja2VuZC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBiYWNrZW5kICkge1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIFdlYkdMIDIgYmFja2VuZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHTEJhY2tlbmR9XG5cdFx0ICovXG5cdFx0dGhpcy5iYWNrZW5kID0gYmFja2VuZDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSByZW5kZXJpbmcgY29udGV4dC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHTDJSZW5kZXJpbmdDb250ZXh0fVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2wgPSB0aGlzLmJhY2tlbmQuZ2w7XG5cblx0XHQvKipcblx0XHQgKiBBIGxpc3Qgd2l0aCBhbGwgdGhlIHN1cHBvcnRlZCBXZWJHTCBleHRlbnNpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PHN0cmluZz59XG5cdFx0ICovXG5cdFx0dGhpcy5hdmFpbGFibGVFeHRlbnNpb25zID0gdGhpcy5nbC5nZXRTdXBwb3J0ZWRFeHRlbnNpb25zKCk7XG5cblx0XHQvKipcblx0XHQgKiBBIGRpY3Rpb25hcnkgd2l0aCByZXF1ZXN0ZWQgV2ViR0wgZXh0ZW5zaW9ucy5cblx0XHQgKiBUaGUga2V5IGlzIHRoZSBuYW1lIG9mIHRoZSBleHRlbnNpb24sIHRoZSB2YWx1ZVxuXHRcdCAqIHRoZSByZXF1ZXN0ZWQgZXh0ZW5zaW9uIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLE9iamVjdD59XG5cdFx0ICovXG5cdFx0dGhpcy5leHRlbnNpb25zID0ge307XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBleHRlbnNpb24gb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZXh0ZW5zaW9uIG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGV4dGVuc2lvbiBuYW1lLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBleHRlbnNpb24gb2JqZWN0LlxuXHQgKi9cblx0Z2V0KCBuYW1lICkge1xuXG5cdFx0bGV0IGV4dGVuc2lvbiA9IHRoaXMuZXh0ZW5zaW9uc1sgbmFtZSBdO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gdGhpcy5nbC5nZXRFeHRlbnNpb24oIG5hbWUgKTtcblxuXHRcdFx0dGhpcy5leHRlbnNpb25zWyBuYW1lIF0gPSBleHRlbnNpb247XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZXh0ZW5zaW9uO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHJlcXVlc3RlZCBleHRlbnNpb24gaXMgYXZhaWxhYmxlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBleHRlbnNpb24gbmFtZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gZXh0ZW5zaW9uIGlzIGF2YWlsYWJsZSBvciBub3QuXG5cdCAqL1xuXHRoYXMoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hdmFpbGFibGVFeHRlbnNpb25zLmluY2x1ZGVzKCBuYW1lICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYkdMRXh0ZW5zaW9ucztcbiIsIi8qKlxuICogQSBXZWJHTCAyIGJhY2tlbmQgdXRpbGl0eSBtb2R1bGUgZm9yIG1hbmFnaW5nIHRoZSBkZXZpY2UncyBjYXBhYmlsaXRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgV2ViR0xDYXBhYmlsaXRpZXMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHV0aWxpdHkgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMQmFja2VuZH0gYmFja2VuZCAtIFRoZSBXZWJHTCAyIGJhY2tlbmQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYmFja2VuZCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBXZWJHTCAyIGJhY2tlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2ViR0xCYWNrZW5kfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIHZhbHVlIGhvbGRzIHRoZSBjYWNoZWQgbWF4IGFuaXNvdHJvcHkgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5tYXhBbmlzb3Ryb3B5ID0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG1heGltdW0gYW5pc290cm9weSB0ZXh0dXJlIGZpbHRlcmluZyB2YWx1ZS4gVGhpcyB2YWx1ZVxuXHQgKiBkZXBlbmRzIG9uIHRoZSBkZXZpY2UgYW5kIGlzIHJlcG9ydGVkIGJ5IHRoZSBgRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljYFxuXHQgKiBXZWJHTCBleHRlbnNpb24uXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIG1heGltdW0gYW5pc290cm9weSB0ZXh0dXJlIGZpbHRlcmluZyB2YWx1ZS5cblx0ICovXG5cdGdldE1heEFuaXNvdHJvcHkoKSB7XG5cblx0XHRpZiAoIHRoaXMubWF4QW5pc290cm9weSAhPT0gbnVsbCApIHJldHVybiB0aGlzLm1heEFuaXNvdHJvcHk7XG5cblx0XHRjb25zdCBnbCA9IHRoaXMuYmFja2VuZC5nbDtcblx0XHRjb25zdCBleHRlbnNpb25zID0gdGhpcy5iYWNrZW5kLmV4dGVuc2lvbnM7XG5cblx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTtcblxuXHRcdFx0dGhpcy5tYXhBbmlzb3Ryb3B5ID0gZ2wuZ2V0UGFyYW1ldGVyKCBleHRlbnNpb24uTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLm1heEFuaXNvdHJvcHkgPSAwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubWF4QW5pc290cm9weTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViR0xDYXBhYmlsaXRpZXM7XG4iLCJleHBvcnQgY29uc3QgR0xGZWF0dXJlTmFtZSA9IHtcblxuXHQnV0VCR0xfbXVsdGlfZHJhdyc6ICdXRUJHTF9tdWx0aV9kcmF3Jyxcblx0J1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjJzogJ3RleHR1cmUtY29tcHJlc3Npb24tYXN0YycsXG5cdCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjJzogJ3RleHR1cmUtY29tcHJlc3Npb24tZXRjMicsXG5cdCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMSc6ICd0ZXh0dXJlLWNvbXByZXNzaW9uLWV0YzEnLFxuXHQnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJzogJ3RleHR1cmUtY29tcHJlc3Npb24tcHZydGMnLFxuXHQnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Yyc6ICd0ZXh0dXJlLWNvbXByZXNzaW9uLXB2cnRjJyxcblx0J1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJzogJ3RleHR1cmUtY29tcHJlc3Npb24tYmMnLFxuXHQnRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0Yyc6ICd0ZXh0dXJlLWNvbXByZXNzaW9uLWJwdGMnLFxuXHQnRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5X3dlYmdsMic6ICd0aW1lc3RhbXAtcXVlcnknLFxuXG59O1xuIiwiY2xhc3MgV2ViR0xCdWZmZXJSZW5kZXJlciB7XG5cblx0Y29uc3RydWN0b3IoIGJhY2tlbmQgKSB7XG5cblx0XHR0aGlzLmdsID0gYmFja2VuZC5nbDtcblx0XHR0aGlzLmV4dGVuc2lvbnMgPSBiYWNrZW5kLmV4dGVuc2lvbnM7XG5cdFx0dGhpcy5pbmZvID0gYmFja2VuZC5yZW5kZXJlci5pbmZvO1xuXHRcdHRoaXMubW9kZSA9IG51bGw7XG5cdFx0dGhpcy5pbmRleCA9IDA7XG5cdFx0dGhpcy50eXBlID0gbnVsbDtcblx0XHR0aGlzLm9iamVjdCA9IG51bGw7XG5cblx0fVxuXG5cdHJlbmRlciggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0Y29uc3QgeyBnbCwgbW9kZSwgb2JqZWN0LCB0eXBlLCBpbmZvLCBpbmRleCB9ID0gdGhpcztcblxuXHRcdGlmICggaW5kZXggIT09IDAgKSB7XG5cblx0XHRcdGdsLmRyYXdFbGVtZW50cyggbW9kZSwgY291bnQsIHR5cGUsIHN0YXJ0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRnbC5kcmF3QXJyYXlzKCBtb2RlLCBzdGFydCwgY291bnQgKTtcblxuXHRcdH1cblxuXHRcdGluZm8udXBkYXRlKCBvYmplY3QsIGNvdW50LCAxICk7XG5cblx0fVxuXG5cdHJlbmRlckluc3RhbmNlcyggc3RhcnQsIGNvdW50LCBwcmltY291bnQgKSB7XG5cblx0XHRjb25zdCB7IGdsLCBtb2RlLCB0eXBlLCBpbmRleCwgb2JqZWN0LCBpbmZvIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCBwcmltY291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHRpZiAoIGluZGV4ICE9PSAwICkge1xuXG5cdFx0XHRnbC5kcmF3RWxlbWVudHNJbnN0YW5jZWQoIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCwgcHJpbWNvdW50ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRnbC5kcmF3QXJyYXlzSW5zdGFuY2VkKCBtb2RlLCBzdGFydCwgY291bnQsIHByaW1jb3VudCApO1xuXG5cdFx0fVxuXG5cdFx0aW5mby51cGRhdGUoIG9iamVjdCwgY291bnQsIHByaW1jb3VudCApO1xuXG5cdH1cblxuXHRyZW5kZXJNdWx0aURyYXcoIHN0YXJ0cywgY291bnRzLCBkcmF3Q291bnQgKSB7XG5cblx0XHRjb25zdCB7IGV4dGVuc2lvbnMsIG1vZGUsIG9iamVjdCwgaW5mbyB9ID0gdGhpcztcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRyYXdDb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLnJlbmRlciggc3RhcnRzWyBpIF0sIGNvdW50c1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggdGhpcy5pbmRleCAhPT0gMCApIHtcblxuXHRcdFx0XHRleHRlbnNpb24ubXVsdGlEcmF3RWxlbWVudHNXRUJHTCggbW9kZSwgY291bnRzLCAwLCB0aGlzLnR5cGUsIHN0YXJ0cywgMCwgZHJhd0NvdW50ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZXh0ZW5zaW9uLm11bHRpRHJhd0FycmF5c1dFQkdMKCBtb2RlLCBzdGFydHMsIDAsIGNvdW50cywgMCwgZHJhd0NvdW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0ZWxlbWVudENvdW50ICs9IGNvdW50c1sgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGluZm8udXBkYXRlKCBvYmplY3QsIGVsZW1lbnRDb3VudCwgMSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMoIHN0YXJ0cywgY291bnRzLCBkcmF3Q291bnQsIHByaW1jb3VudCApIHtcblxuXHRcdGNvbnN0IHsgZXh0ZW5zaW9ucywgbW9kZSwgb2JqZWN0LCBpbmZvIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCBkcmF3Q291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX211bHRpX2RyYXcnICk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbiA9PT0gbnVsbCApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZHJhd0NvdW50OyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMucmVuZGVySW5zdGFuY2VzKCBzdGFydHNbIGkgXSwgY291bnRzWyBpIF0sIHByaW1jb3VudFsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggdGhpcy5pbmRleCAhPT0gMCApIHtcblxuXHRcdFx0XHRleHRlbnNpb24ubXVsdGlEcmF3RWxlbWVudHNJbnN0YW5jZWRXRUJHTCggbW9kZSwgY291bnRzLCAwLCB0aGlzLnR5cGUsIHN0YXJ0cywgMCwgcHJpbWNvdW50LCAwLCBkcmF3Q291bnQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRleHRlbnNpb24ubXVsdGlEcmF3QXJyYXlzSW5zdGFuY2VkV0VCR0woIG1vZGUsIHN0YXJ0cywgMCwgY291bnRzLCAwLCBwcmltY291bnQsIDAsIGRyYXdDb3VudCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCBlbGVtZW50Q291bnQgPSAwO1xuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZHJhd0NvdW50OyBpICsrICkge1xuXG5cdFx0XHRcdGVsZW1lbnRDb3VudCArPSBjb3VudHNbIGkgXSAqIHByaW1jb3VudFsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGluZm8udXBkYXRlKCBvYmplY3QsIGVsZW1lbnRDb3VudCwgMSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG59XG5cblxuZXhwb3J0IHsgV2ViR0xCdWZmZXJSZW5kZXJlciB9O1xuIiwiLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIG9mIGEgdGltZXN0YW1wIHF1ZXJ5IHBvb2wuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIFRpbWVzdGFtcFF1ZXJ5UG9vbCB7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgdGltZXN0YW1wIHF1ZXJ5IHBvb2wuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UXVlcmllcz0yNTZdIC0gTWF4aW11bSBudW1iZXIgb2YgcXVlcmllcyB0aGlzIHBvb2wgY2FuIGhvbGQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWF4UXVlcmllcyA9IDI1NiApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdG8gdHJhY2sgdGltZXN0YW1wcyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy50cmFja1RpbWVzdGFtcCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBNYXhpbXVtIG51bWJlciBvZiBxdWVyaWVzIHRoaXMgcG9vbCBjYW4gaG9sZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMjU2XG5cdFx0ICovXG5cdFx0dGhpcy5tYXhRdWVyaWVzID0gbWF4UXVlcmllcztcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBtYW55IHF1ZXJpZXMgYWxsb2NhdGVkIHNvIGZhci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuY3VycmVudFF1ZXJ5SW5kZXggPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVHJhY2tzIG9mZnNldHMgZm9yIGRpZmZlcmVudCBjb250ZXh0cy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtNYXA8c3RyaW5nLCBudW1iZXI+fVxuXHRcdCAqL1xuXHRcdHRoaXMucXVlcnlPZmZzZXRzID0gbmV3IE1hcCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgcG9vbCBoYXMgYmVlbiBkaXNwb3NlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNEaXNwb3NlZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVE9ET1xuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5sYXN0VmFsdWUgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVE9ET1xuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLnBlbmRpbmdSZXNvbHZlID0gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbGxvY2F0ZSBxdWVyaWVzIGZvciBhIHNwZWNpZmljIHJlbmRlckNvbnRleHQuXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcGFyYW0ge09iamVjdH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dCB0byBhbGxvY2F0ZSBxdWVyaWVzIGZvci5cblx0ICovXG5cdGFsbG9jYXRlUXVlcmllc0ZvckNvbnRleHQoIC8qIHJlbmRlckNvbnRleHQgKi8gKSB7fVxuXG5cdC8qKlxuXHQgKiBSZXNvbHZlIGFsbCB0aW1lc3RhbXBzIGFuZCByZXR1cm4gZGF0YSAob3IgcHJvY2VzcyB0aGVtKS5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBhc3luY1xuXHQgKiBAcmV0dXJucyB7UHJvbWlzZTxudW1iZXI+fG51bWJlcn0gVGhlIHJlc29sdmVkIHRpbWVzdGFtcCB2YWx1ZS5cblx0ICovXG5cdGFzeW5jIHJlc29sdmVRdWVyaWVzQXN5bmMoKSB7fVxuXG5cdC8qKlxuXHQgKiBEaXNwb3NlIG9mIHRoZSBxdWVyeSBwb29sLlxuXHQgKlxuXHQgKiBAYWJzdHJhY3Rcblx0ICovXG5cdGRpc3Bvc2UoKSB7fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRpbWVzdGFtcFF1ZXJ5UG9vbDtcbiIsImltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IFRpbWVzdGFtcFF1ZXJ5UG9vbCBmcm9tICcuLi8uLi9jb21tb24vVGltZXN0YW1wUXVlcnlQb29sLmpzJztcblxuLyoqXG4gKiBNYW5hZ2VzIGEgcG9vbCBvZiBXZWJHTCB0aW1lc3RhbXAgcXVlcmllcyBmb3IgcGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQuXG4gKiBIYW5kbGVzIGNyZWF0aW9uLCBleGVjdXRpb24sIGFuZCByZXNvbHV0aW9uIG9mIHRpbWVyIHF1ZXJpZXMgdXNpbmcgV2ViR0wgZXh0ZW5zaW9ucy5cbiAqXG4gKiBAYXVnbWVudHMgVGltZXN0YW1wUXVlcnlQb29sXG4gKi9cbmNsYXNzIFdlYkdMVGltZXN0YW1wUXVlcnlQb29sIGV4dGVuZHMgVGltZXN0YW1wUXVlcnlQb29sIHtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBXZWJHTCB0aW1lc3RhbXAgcXVlcnkgcG9vbC5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR8V2ViR0wyUmVuZGVyaW5nQ29udGV4dH0gZ2wgLSBUaGUgV2ViR0wgY29udGV4dC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBpZGVudGlmaWVyIGZvciB0aGlzIHF1ZXJ5IHBvb2wuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UXVlcmllcz0yMDQ4XSAtIE1heGltdW0gbnVtYmVyIG9mIHF1ZXJpZXMgdGhpcyBwb29sIGNhbiBob2xkLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGdsLCB0eXBlLCBtYXhRdWVyaWVzID0gMjA0OCApIHtcblxuXHRcdHN1cGVyKCBtYXhRdWVyaWVzICk7XG5cblx0XHR0aGlzLmdsID0gZ2w7XG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblxuXHRcdC8vIENoZWNrIGZvciB0aW1lciBxdWVyeSBleHRlbnNpb25zXG5cdFx0dGhpcy5leHQgPSBnbC5nZXRFeHRlbnNpb24oICdFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyJyApIHx8XG5cdFx0XHRcdCAgZ2wuZ2V0RXh0ZW5zaW9uKCAnRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5JyApO1xuXG5cdFx0aWYgKCAhIHRoaXMuZXh0ICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdFWFRfZGlzam9pbnRfdGltZXJfcXVlcnkgbm90IHN1cHBvcnRlZDsgdGltZXN0YW1wcyB3aWxsIGJlIGRpc2FibGVkLicgKTtcblx0XHRcdHRoaXMudHJhY2tUaW1lc3RhbXAgPSBmYWxzZTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBxdWVyeSBvYmplY3RzXG5cdFx0dGhpcy5xdWVyaWVzID0gW107XG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5tYXhRdWVyaWVzOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnF1ZXJpZXMucHVzaCggZ2wuY3JlYXRlUXVlcnkoKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hY3RpdmVRdWVyeSA9IG51bGw7XG5cdFx0dGhpcy5xdWVyeVN0YXRlcyA9IG5ldyBNYXAoKTsgLy8gVHJhY2sgc3RhdGUgb2YgZWFjaCBxdWVyeTogJ2luYWN0aXZlJywgJ3N0YXJ0ZWQnLCAnZW5kZWQnXG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbGxvY2F0ZXMgYSBwYWlyIG9mIHF1ZXJpZXMgZm9yIGEgZ2l2ZW4gcmVuZGVyIGNvbnRleHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0IHRvIGFsbG9jYXRlIHF1ZXJpZXMgZm9yLlxuXHQgKiBAcmV0dXJucyB7P251bWJlcn0gVGhlIGJhc2Ugb2Zmc2V0IGZvciB0aGUgYWxsb2NhdGVkIHF1ZXJpZXMsIG9yIG51bGwgaWYgYWxsb2NhdGlvbiBmYWlsZWQuXG5cdCAqL1xuXHRhbGxvY2F0ZVF1ZXJpZXNGb3JDb250ZXh0KCByZW5kZXJDb250ZXh0ICkge1xuXG5cdFx0aWYgKCAhIHRoaXMudHJhY2tUaW1lc3RhbXAgKSByZXR1cm4gbnVsbDtcblxuXHRcdC8vIENoZWNrIGlmIHdlIGhhdmUgZW5vdWdoIHNwYWNlIGZvciBhIG5ldyBxdWVyeSBwYWlyXG5cdFx0aWYgKCB0aGlzLmN1cnJlbnRRdWVyeUluZGV4ICsgMiA+IHRoaXMubWF4UXVlcmllcyApIHtcblxuXHRcdFx0d2Fybk9uY2UoIGBXZWJHUFVUaW1lc3RhbXBRdWVyeVBvb2wgWyR7IHRoaXMudHlwZSB9XTogTWF4aW11bSBudW1iZXIgb2YgcXVlcmllcyBleGNlZWRlZCwgd2hlbiB1c2luZyB0cmFja1RpbWVzdGFtcCBpdCBpcyBuZWNlc3NhcnkgdG8gcmVzb2x2ZXMgdGhlIHF1ZXJpZXMgdmlhIHJlbmRlcmVyLnJlc29sdmVUaW1lc3RhbXBzQXN5bmMoIFRIUkVFLlRpbWVzdGFtcFF1ZXJ5LiR7IHRoaXMudHlwZS50b1VwcGVyQ2FzZSgpIH0gKS5gICk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGJhc2VPZmZzZXQgPSB0aGlzLmN1cnJlbnRRdWVyeUluZGV4O1xuXHRcdHRoaXMuY3VycmVudFF1ZXJ5SW5kZXggKz0gMjtcblxuXHRcdC8vIEluaXRpYWxpemUgcXVlcnkgc3RhdGVzXG5cdFx0dGhpcy5xdWVyeVN0YXRlcy5zZXQoIGJhc2VPZmZzZXQsICdpbmFjdGl2ZScgKTtcblx0XHR0aGlzLnF1ZXJ5T2Zmc2V0cy5zZXQoIHJlbmRlckNvbnRleHQuaWQsIGJhc2VPZmZzZXQgKTtcblxuXHRcdHJldHVybiBiYXNlT2Zmc2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogQmVnaW5zIGEgdGltZXN0YW1wIHF1ZXJ5IGZvciB0aGUgc3BlY2lmaWVkIHJlbmRlciBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dCB0byBiZWdpbiB0aW1pbmcgZm9yLlxuXHQgKi9cblx0YmVnaW5RdWVyeSggcmVuZGVyQ29udGV4dCApIHtcblxuXHRcdGlmICggISB0aGlzLnRyYWNrVGltZXN0YW1wIHx8IHRoaXMuaXNEaXNwb3NlZCApIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYmFzZU9mZnNldCA9IHRoaXMucXVlcnlPZmZzZXRzLmdldCggcmVuZGVyQ29udGV4dC5pZCApO1xuXHRcdGlmICggYmFzZU9mZnNldCA9PSBudWxsICkge1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBEb24ndCBzdGFydCBhIG5ldyBxdWVyeSBpZiB0aGVyZSdzIGFuIGFjdGl2ZSBvbmVcblx0XHRpZiAoIHRoaXMuYWN0aXZlUXVlcnkgIT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHF1ZXJ5ID0gdGhpcy5xdWVyaWVzWyBiYXNlT2Zmc2V0IF07XG5cdFx0aWYgKCAhIHF1ZXJ5ICkge1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0cnkge1xuXG5cdFx0XHQvLyBPbmx5IGJlZ2luIGlmIHF1ZXJ5IGlzIGluYWN0aXZlXG5cdFx0XHRpZiAoIHRoaXMucXVlcnlTdGF0ZXMuZ2V0KCBiYXNlT2Zmc2V0ICkgPT09ICdpbmFjdGl2ZScgKSB7XG5cblx0XHRcdFx0dGhpcy5nbC5iZWdpblF1ZXJ5KCB0aGlzLmV4dC5USU1FX0VMQVBTRURfRVhULCBxdWVyeSApO1xuXHRcdFx0XHR0aGlzLmFjdGl2ZVF1ZXJ5ID0gYmFzZU9mZnNldDtcblx0XHRcdFx0dGhpcy5xdWVyeVN0YXRlcy5zZXQoIGJhc2VPZmZzZXQsICdzdGFydGVkJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdFcnJvciBpbiBiZWdpblF1ZXJ5OicsIGVycm9yICk7XG5cdFx0XHR0aGlzLmFjdGl2ZVF1ZXJ5ID0gbnVsbDtcblx0XHRcdHRoaXMucXVlcnlTdGF0ZXMuc2V0KCBiYXNlT2Zmc2V0LCAnaW5hY3RpdmUnICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFbmRzIHRoZSBhY3RpdmUgdGltZXN0YW1wIHF1ZXJ5IGZvciB0aGUgc3BlY2lmaWVkIHJlbmRlciBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dCB0byBlbmQgdGltaW5nIGZvci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHJlbmRlckNvbnRleHQuaWQgLSBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKi9cblx0ZW5kUXVlcnkoIHJlbmRlckNvbnRleHQgKSB7XG5cblx0XHRpZiAoICEgdGhpcy50cmFja1RpbWVzdGFtcCB8fCB0aGlzLmlzRGlzcG9zZWQgKSB7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGJhc2VPZmZzZXQgPSB0aGlzLnF1ZXJ5T2Zmc2V0cy5nZXQoIHJlbmRlckNvbnRleHQuaWQgKTtcblx0XHRpZiAoIGJhc2VPZmZzZXQgPT0gbnVsbCApIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gT25seSBlbmQgaWYgdGhpcyBpcyB0aGUgYWN0aXZlIHF1ZXJ5XG5cdFx0aWYgKCB0aGlzLmFjdGl2ZVF1ZXJ5ICE9PSBiYXNlT2Zmc2V0ICkge1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0cnkge1xuXG5cdFx0XHR0aGlzLmdsLmVuZFF1ZXJ5KCB0aGlzLmV4dC5USU1FX0VMQVBTRURfRVhUICk7XG5cdFx0XHR0aGlzLnF1ZXJ5U3RhdGVzLnNldCggYmFzZU9mZnNldCwgJ2VuZGVkJyApO1xuXHRcdFx0dGhpcy5hY3RpdmVRdWVyeSA9IG51bGw7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdFcnJvciBpbiBlbmRRdWVyeTonLCBlcnJvciApO1xuXHRcdFx0Ly8gUmVzZXQgc3RhdGUgb24gZXJyb3Jcblx0XHRcdHRoaXMucXVlcnlTdGF0ZXMuc2V0KCBiYXNlT2Zmc2V0LCAnaW5hY3RpdmUnICk7XG5cdFx0XHR0aGlzLmFjdGl2ZVF1ZXJ5ID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEFzeW5jaHJvbm91c2x5IHJlc29sdmVzIGFsbCBjb21wbGV0ZWQgcXVlcmllcyBhbmQgcmV0dXJucyB0aGUgdG90YWwgZHVyYXRpb24uXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcmV0dXJucyB7UHJvbWlzZTxudW1iZXI+fSBUaGUgdG90YWwgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLCBvciB0aGUgbGFzdCB2YWxpZCB2YWx1ZSBpZiByZXNvbHV0aW9uIGZhaWxzLlxuXHQgKi9cblx0YXN5bmMgcmVzb2x2ZVF1ZXJpZXNBc3luYygpIHtcblxuXHRcdGlmICggISB0aGlzLnRyYWNrVGltZXN0YW1wIHx8IHRoaXMucGVuZGluZ1Jlc29sdmUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmxhc3RWYWx1ZTtcblxuXHRcdH1cblxuXHRcdHRoaXMucGVuZGluZ1Jlc29sdmUgPSB0cnVlO1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Ly8gV2FpdCBmb3IgYWxsIGVuZGVkIHF1ZXJpZXMgdG8gY29tcGxldGVcblx0XHRcdGNvbnN0IHJlc29sdmVQcm9taXNlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBbIGJhc2VPZmZzZXQsIHN0YXRlIF0gb2YgdGhpcy5xdWVyeVN0YXRlcyApIHtcblxuXHRcdFx0XHRpZiAoIHN0YXRlID09PSAnZW5kZWQnICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJpZXNbIGJhc2VPZmZzZXQgXTtcblx0XHRcdFx0XHRyZXNvbHZlUHJvbWlzZXMucHVzaCggdGhpcy5yZXNvbHZlUXVlcnkoIHF1ZXJ5ICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCByZXNvbHZlUHJvbWlzZXMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLmxhc3RWYWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoIHJlc29sdmVQcm9taXNlcyApO1xuXHRcdFx0Y29uc3QgdG90YWxEdXJhdGlvbiA9IHJlc3VsdHMucmVkdWNlKCAoIGFjYywgdmFsICkgPT4gYWNjICsgdmFsLCAwICk7XG5cblx0XHRcdC8vIFN0b3JlIHRoZSBsYXN0IHZhbGlkIHJlc3VsdFxuXHRcdFx0dGhpcy5sYXN0VmFsdWUgPSB0b3RhbER1cmF0aW9uO1xuXG5cdFx0XHQvLyBSZXNldCBzdGF0ZXNcblx0XHRcdHRoaXMuY3VycmVudFF1ZXJ5SW5kZXggPSAwO1xuXHRcdFx0dGhpcy5xdWVyeU9mZnNldHMuY2xlYXIoKTtcblx0XHRcdHRoaXMucXVlcnlTdGF0ZXMuY2xlYXIoKTtcblx0XHRcdHRoaXMuYWN0aXZlUXVlcnkgPSBudWxsO1xuXG5cdFx0XHRyZXR1cm4gdG90YWxEdXJhdGlvbjtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ0Vycm9yIHJlc29sdmluZyBxdWVyaWVzOicsIGVycm9yICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5sYXN0VmFsdWU7XG5cblx0XHR9IGZpbmFsbHkge1xuXG5cdFx0XHR0aGlzLnBlbmRpbmdSZXNvbHZlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNvbHZlcyBhIHNpbmdsZSBxdWVyeSwgY2hlY2tpbmcgZm9yIGNvbXBsZXRpb24gYW5kIGRpc2pvaW50IG9wZXJhdGlvbi5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7V2ViR0xRdWVyeX0gcXVlcnkgLSBUaGUgcXVlcnkgb2JqZWN0IHRvIHJlc29sdmUuXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59IFRoZSBlbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuXHQgKi9cblx0YXN5bmMgcmVzb2x2ZVF1ZXJ5KCBxdWVyeSApIHtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlICkgPT4ge1xuXG5cdFx0XHRpZiAoIHRoaXMuaXNEaXNwb3NlZCApIHtcblxuXHRcdFx0XHRyZXNvbHZlKCB0aGlzLmxhc3RWYWx1ZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IHRpbWVvdXRJZDtcblx0XHRcdGxldCBpc1Jlc29sdmVkID0gZmFsc2U7XG5cblx0XHRcdGNvbnN0IGNsZWFudXAgPSAoKSA9PiB7XG5cblx0XHRcdFx0aWYgKCB0aW1lb3V0SWQgKSB7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXRJZCApO1xuXHRcdFx0XHRcdHRpbWVvdXRJZCA9IG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9O1xuXG5cdFx0XHRjb25zdCBmaW5hbGl6ZVJlc29sdXRpb24gPSAoIHZhbHVlICkgPT4ge1xuXG5cdFx0XHRcdGlmICggISBpc1Jlc29sdmVkICkge1xuXG5cdFx0XHRcdFx0aXNSZXNvbHZlZCA9IHRydWU7XG5cdFx0XHRcdFx0Y2xlYW51cCgpO1xuXHRcdFx0XHRcdHJlc29sdmUoIHZhbHVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9O1xuXG5cdFx0XHRjb25zdCBjaGVja1F1ZXJ5ID0gKCkgPT4ge1xuXG5cdFx0XHRcdGlmICggdGhpcy5pc0Rpc3Bvc2VkICkge1xuXG5cdFx0XHRcdFx0ZmluYWxpemVSZXNvbHV0aW9uKCB0aGlzLmxhc3RWYWx1ZSApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGlmIHRoZSBHUFUgdGltZXIgd2FzIGRpc2pvaW50IChpLmUuLCB0aW1pbmcgd2FzIHVucmVsaWFibGUpXG5cdFx0XHRcdFx0Y29uc3QgZGlzam9pbnQgPSB0aGlzLmdsLmdldFBhcmFtZXRlciggdGhpcy5leHQuR1BVX0RJU0pPSU5UX0VYVCApO1xuXHRcdFx0XHRcdGlmICggZGlzam9pbnQgKSB7XG5cblx0XHRcdFx0XHRcdGZpbmFsaXplUmVzb2x1dGlvbiggdGhpcy5sYXN0VmFsdWUgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IGF2YWlsYWJsZSA9IHRoaXMuZ2wuZ2V0UXVlcnlQYXJhbWV0ZXIoIHF1ZXJ5LCB0aGlzLmdsLlFVRVJZX1JFU1VMVF9BVkFJTEFCTEUgKTtcblx0XHRcdFx0XHRpZiAoICEgYXZhaWxhYmxlICkge1xuXG5cdFx0XHRcdFx0XHR0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCBjaGVja1F1ZXJ5LCAxICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBlbGFwc2VkID0gdGhpcy5nbC5nZXRRdWVyeVBhcmFtZXRlciggcXVlcnksIHRoaXMuZ2wuUVVFUllfUkVTVUxUICk7XG5cdFx0XHRcdFx0cmVzb2x2ZSggTnVtYmVyKCBlbGFwc2VkICkgLyAxZTYgKTsgLy8gQ29udmVydCBuYW5vc2Vjb25kcyB0byBtaWxsaXNlY29uZHNcblxuXHRcdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnRXJyb3IgY2hlY2tpbmcgcXVlcnk6JywgZXJyb3IgKTtcblx0XHRcdFx0XHRyZXNvbHZlKCB0aGlzLmxhc3RWYWx1ZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fTtcblxuXHRcdFx0Y2hlY2tRdWVyeSgpO1xuXG5cdFx0fSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVsZWFzZXMgYWxsIHJlc291cmNlcyBoZWxkIGJ5IHRoaXMgcXVlcnkgcG9vbC5cblx0ICogVGhpcyBpbmNsdWRlcyBkZWxldGluZyBhbGwgcXVlcnkgb2JqZWN0cyBhbmQgY2xlYXJpbmcgaW50ZXJuYWwgc3RhdGUuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0aWYgKCB0aGlzLmlzRGlzcG9zZWQgKSB7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG5cblx0XHRpZiAoICEgdGhpcy50cmFja1RpbWVzdGFtcCApIHJldHVybjtcblxuXHRcdGZvciAoIGNvbnN0IHF1ZXJ5IG9mIHRoaXMucXVlcmllcyApIHtcblxuXHRcdFx0dGhpcy5nbC5kZWxldGVRdWVyeSggcXVlcnkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMucXVlcmllcyA9IFtdO1xuXHRcdHRoaXMucXVlcnlTdGF0ZXMuY2xlYXIoKTtcblx0XHR0aGlzLnF1ZXJ5T2Zmc2V0cy5jbGVhcigpO1xuXHRcdHRoaXMubGFzdFZhbHVlID0gMDtcblx0XHR0aGlzLmFjdGl2ZVF1ZXJ5ID0gbnVsbDtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViR0xUaW1lc3RhbXBRdWVyeVBvb2w7XG4iLCJpbXBvcnQgR0xTTE5vZGVCdWlsZGVyIGZyb20gJy4vbm9kZXMvR0xTTE5vZGVCdWlsZGVyLmpzJztcbmltcG9ydCBCYWNrZW5kIGZyb20gJy4uL2NvbW1vbi9CYWNrZW5kLmpzJztcbmltcG9ydCB7IGdldENhY2hlS2V5IH0gZnJvbSAnLi4vY29tbW9uL1JlbmRlckNvbnRleHQuanMnO1xuXG5pbXBvcnQgV2ViR0xBdHRyaWJ1dGVVdGlscyBmcm9tICcuL3V0aWxzL1dlYkdMQXR0cmlidXRlVXRpbHMuanMnO1xuaW1wb3J0IFdlYkdMU3RhdGUgZnJvbSAnLi91dGlscy9XZWJHTFN0YXRlLmpzJztcbmltcG9ydCBXZWJHTFV0aWxzIGZyb20gJy4vdXRpbHMvV2ViR0xVdGlscy5qcyc7XG5pbXBvcnQgV2ViR0xUZXh0dXJlVXRpbHMgZnJvbSAnLi91dGlscy9XZWJHTFRleHR1cmVVdGlscy5qcyc7XG5pbXBvcnQgV2ViR0xFeHRlbnNpb25zIGZyb20gJy4vdXRpbHMvV2ViR0xFeHRlbnNpb25zLmpzJztcbmltcG9ydCBXZWJHTENhcGFiaWxpdGllcyBmcm9tICcuL3V0aWxzL1dlYkdMQ2FwYWJpbGl0aWVzLmpzJztcbmltcG9ydCB7IEdMRmVhdHVyZU5hbWUgfSBmcm9tICcuL3V0aWxzL1dlYkdMQ29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFdlYkdMQnVmZmVyUmVuZGVyZXIgfSBmcm9tICcuL1dlYkdMQnVmZmVyUmVuZGVyZXIuanMnO1xuXG5pbXBvcnQgeyB3YXJuT25jZSB9IGZyb20gJy4uLy4uL3V0aWxzLmpzJztcbmltcG9ydCB7IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgV2ViR0xUaW1lc3RhbXBRdWVyeVBvb2wgZnJvbSAnLi91dGlscy9XZWJHTFRpbWVzdGFtcFF1ZXJ5UG9vbC5qcyc7XG5cbi8qKlxuICogQSBiYWNrZW5kIGltcGxlbWVudGF0aW9uIHRhcmdldGluZyBXZWJHTCAyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgQmFja2VuZFxuICovXG5jbGFzcyBXZWJHTEJhY2tlbmQgZXh0ZW5kcyBCYWNrZW5kIHtcblxuXHQvKipcblx0ICogV2ViR0xCYWNrZW5kIG9wdGlvbnMuXG5cdCAqXG5cdCAqIEB0eXBlZGVmIHtPYmplY3R9IFdlYkdMQmFja2VuZH5PcHRpb25zXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2xvZ2FyaXRobWljRGVwdGhCdWZmZXI9ZmFsc2VdIC0gV2hldGhlciBsb2dhcml0aG1pYyBkZXB0aCBidWZmZXIgaXMgZW5hYmxlZCBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2FscGhhPXRydWVdIC0gV2hldGhlciB0aGUgZGVmYXVsdCBmcmFtZWJ1ZmZlciAod2hpY2ggcmVwcmVzZW50cyB0aGUgZmluYWwgY29udGVudHMgb2YgdGhlIGNhbnZhcykgc2hvdWxkIGJlIHRyYW5zcGFyZW50IG9yIG9wYXF1ZS5cblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbZGVwdGg9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyIHNob3VsZCBoYXZlIGEgZGVwdGggYnVmZmVyIG9yIG5vdC5cblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbc3RlbmNpbD1mYWxzZV0gLSBXaGV0aGVyIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyIHNob3VsZCBoYXZlIGEgc3RlbmNpbCBidWZmZXIgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IFthbnRpYWxpYXM9ZmFsc2VdIC0gV2hldGhlciBNU0FBIGFzIHRoZSBkZWZhdWx0IGFudGktYWxpYXNpbmcgc2hvdWxkIGJlIGVuYWJsZWQgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge251bWJlcn0gW3NhbXBsZXM9MF0gLSBXaGVuIGBhbnRpYWxpYXNgIGlzIGB0cnVlYCwgYDRgIHNhbXBsZXMgYXJlIHVzZWQgYnkgZGVmYXVsdC4gU2V0IHRoaXMgcGFyYW1ldGVyIHRvIGFueSBvdGhlciBpbnRlZ2VyIHZhbHVlIHRoYW4gMCB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHQuXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2ZvcmNlV2ViR0w9ZmFsc2VdIC0gSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHJlbmRlcmVyIHVzZXMgYSBXZWJHTCAyIGJhY2tlbmQgbm8gbWF0dGVyIGlmIFdlYkdQVSBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge1dlYkdMMlJlbmRlcmluZ0NvbnRleHR9IFtjb250ZXh0PXVuZGVmaW5lZF0gLSBBIFdlYkdMIDIgcmVuZGVyaW5nIGNvbnRleHQuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IFdlYkdQVSBiYWNrZW5kLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMQmFja2VuZH5PcHRpb25zfSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoIHBhcmFtZXRlcnMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNXZWJHTEJhY2tlbmQgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gYSBiYWNrZW5kIG1vZHVsZSBob2xkaW5nIHNoYWRlciBhdHRyaWJ1dGUtcmVsYXRlZFxuXHRcdCAqIHV0aWxpdHkgZnVuY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9XZWJHTEF0dHJpYnV0ZVV0aWxzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmF0dHJpYnV0ZVV0aWxzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgYmFja2VuZCBtb2R1bGUgaG9sZGluZyBleHRlbnNpb24tcmVsYXRlZFxuXHRcdCAqIHV0aWxpdHkgZnVuY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9XZWJHTEV4dGVuc2lvbnN9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZXh0ZW5zaW9ucyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIGJhY2tlbmQgbW9kdWxlIGhvbGRpbmcgY2FwYWJpbGl0eS1yZWxhdGVkXG5cdFx0ICogdXRpbGl0eSBmdW5jdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1dlYkdMQ2FwYWJpbGl0aWVzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNhcGFiaWxpdGllcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIGJhY2tlbmQgbW9kdWxlIGhvbGRpbmcgdGV4dHVyZS1yZWxhdGVkXG5cdFx0ICogdXRpbGl0eSBmdW5jdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1dlYkdMVGV4dHVyZVV0aWxzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmVVdGlscyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIGJhY2tlbmQgbW9kdWxlIGhvbGRpbmcgcmVuZGVyZXItcmVsYXRlZFxuXHRcdCAqIHV0aWxpdHkgZnVuY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9XZWJHTEJ1ZmZlclJlbmRlcmVyfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJ1ZmZlclJlbmRlcmVyID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSByZW5kZXJpbmcgY29udGV4dC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/V2ViR0wyUmVuZGVyaW5nQ29udGV4dH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5nbCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIGJhY2tlbmQgbW9kdWxlIGhvbGRpbmcgc3RhdGUtcmVsYXRlZFxuXHRcdCAqIHV0aWxpdHkgZnVuY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9XZWJHTFN0YXRlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnN0YXRlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgYmFja2VuZCBtb2R1bGUgaG9sZGluZyBjb21tb25cblx0XHQgKiB1dGlsaXR5IGZ1bmN0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/V2ViR0xVdGlsc31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy51dGlscyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBEaWN0aW9uYXJ5IGZvciBjYWNoaW5nIFZBT3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxXZWJHTFZlcnRleEFycmF5T2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnZhb0NhY2hlID0ge307XG5cblx0XHQvKipcblx0XHQgKiBEaWN0aW9uYXJ5IGZvciBjYWNoaW5nIHRyYW5zZm9ybSBmZWVkYmFjayBvYmplY3RzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsV2ViR0xUcmFuc2Zvcm1GZWVkYmFjaz59XG5cdFx0ICovXG5cdFx0dGhpcy50cmFuc2Zvcm1GZWVkYmFja0NhY2hlID0ge307XG5cblx0XHQvKipcblx0XHQgKiBDb250cm9scyBpZiBgZ2wuUkFTVEVSSVpFUl9ESVNDQVJEYCBzaG91bGQgYmUgZW5hYmxlZCBvciBub3QuXG5cdFx0ICogT25seSByZWxldmFudCB3aGVuIHVzaW5nIGNvbXB1dGUgc2hhZGVycy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNjYXJkID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgYEVYVF9kaXNqb2ludF90aW1lcl9xdWVyeV93ZWJnbDJgIGV4dGVuc2lvbi4gYG51bGxgIGlmIHRoZVxuXHRcdCAqIGRldmljZSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBleHRlbnNpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0VYVERpc2pvaW50VGltZXJRdWVyeVdlYkdMMn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNqb2ludCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQqIEEgcmVmZXJlbmNlIHRvIHRoZSBgS0hSX3BhcmFsbGVsX3NoYWRlcl9jb21waWxlYCBleHRlbnNpb24uIGBudWxsYCBpZiB0aGVcblx0XHQqIGRldmljZSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBleHRlbnNpb24uXG5cdFx0KlxuXHRcdCogQHR5cGUgez9LSFJQYXJhbGxlbFNoYWRlckNvbXBpbGV9XG5cdFx0KiBAZGVmYXVsdCBudWxsXG5cdFx0Ki9cblx0XHR0aGlzLnBhcmFsbGVsID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdG8gdHJhY2sgdGltZXN0YW1wcyB3aXRoIGEgVGltZXN0YW1wIFF1ZXJ5IEFQSSBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMudHJhY2tUaW1lc3RhbXAgPSAoIHBhcmFtZXRlcnMudHJhY2tUaW1lc3RhbXAgPT09IHRydWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHJlbmRlciBjb250ZXh0LlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7UmVuZGVyQ29udGV4dH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fY3VycmVudENvbnRleHQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSB1bmlxdWUgY29sbGVjdGlvbiBvZiBiaW5kaW5ncy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge1dlYWtTZXR9XG5cdFx0ICovXG5cdFx0dGhpcy5fa25vd25CaW5kaW5ncyA9IG5ldyBXZWFrU2V0KCk7XG5cblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGRldmljZSBzdXBwb3J0cyBmcmFtZWJ1ZmZlcnMgaW52YWxpZGF0aW9uIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0dGhpcy5fc3VwcG9ydHNJbnZhbGlkYXRlRnJhbWVidWZmZXIgPSB0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyA/IGZhbHNlIDogL09jdWx1c0Jyb3dzZXIvZy50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGFyZ2V0IGZyYW1lYnVmZmVyIHdoZW4gcmVuZGVyaW5nIHdpdGhcblx0XHQgKiB0aGUgV2ViWFIgZGV2aWNlIEFQSS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge1dlYkdMRnJhbWVidWZmZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX3hyRnJhbWVidWZmZXIgPSBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGJhY2tlbmQgc28gaXQgaXMgcmVhZHkgZm9yIHVzYWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cblx0ICovXG5cdGluaXQoIHJlbmRlcmVyICkge1xuXG5cdFx0c3VwZXIuaW5pdCggcmVuZGVyZXIgKTtcblxuXHRcdC8vXG5cblx0XHRjb25zdCBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzO1xuXG5cdFx0Y29uc3QgY29udGV4dEF0dHJpYnV0ZXMgPSB7XG5cdFx0XHRhbnRpYWxpYXM6IHJlbmRlcmVyLnNhbXBsZXMgPiAwLFxuXHRcdFx0YWxwaGE6IHRydWUsIC8vIGFsd2F5cyB0cnVlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG5cdFx0XHRkZXB0aDogcmVuZGVyZXIuZGVwdGgsXG5cdFx0XHRzdGVuY2lsOiByZW5kZXJlci5zdGVuY2lsXG5cdFx0fTtcblxuXHRcdGNvbnN0IGdsQ29udGV4dCA9ICggcGFyYW1ldGVycy5jb250ZXh0ICE9PSB1bmRlZmluZWQgKSA/IHBhcmFtZXRlcnMuY29udGV4dCA6IHJlbmRlcmVyLmRvbUVsZW1lbnQuZ2V0Q29udGV4dCggJ3dlYmdsMicsIGNvbnRleHRBdHRyaWJ1dGVzICk7XG5cblx0IFx0ZnVuY3Rpb24gb25Db250ZXh0TG9zdCggZXZlbnQgKSB7XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdGNvbnN0IGNvbnRleHRMb3NzSW5mbyA9IHtcblx0XHRcdFx0YXBpOiAnV2ViR0wnLFxuXHRcdFx0XHRtZXNzYWdlOiBldmVudC5zdGF0dXNNZXNzYWdlIHx8ICdVbmtub3duIHJlYXNvbicsXG5cdFx0XHRcdHJlYXNvbjogbnVsbCxcblx0XHRcdFx0b3JpZ2luYWxFdmVudDogZXZlbnRcblx0XHRcdH07XG5cblx0XHRcdHJlbmRlcmVyLm9uRGV2aWNlTG9zdCggY29udGV4dExvc3NJbmZvICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vbkNvbnRleHRMb3N0ID0gb25Db250ZXh0TG9zdDtcblxuXHRcdHJlbmRlcmVyLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXG5cdFx0dGhpcy5nbCA9IGdsQ29udGV4dDtcblxuXHRcdHRoaXMuZXh0ZW5zaW9ucyA9IG5ldyBXZWJHTEV4dGVuc2lvbnMoIHRoaXMgKTtcblx0XHR0aGlzLmNhcGFiaWxpdGllcyA9IG5ldyBXZWJHTENhcGFiaWxpdGllcyggdGhpcyApO1xuXHRcdHRoaXMuYXR0cmlidXRlVXRpbHMgPSBuZXcgV2ViR0xBdHRyaWJ1dGVVdGlscyggdGhpcyApO1xuXHRcdHRoaXMudGV4dHVyZVV0aWxzID0gbmV3IFdlYkdMVGV4dHVyZVV0aWxzKCB0aGlzICk7XG5cdFx0dGhpcy5idWZmZXJSZW5kZXJlciA9IG5ldyBXZWJHTEJ1ZmZlclJlbmRlcmVyKCB0aGlzICk7XG5cblx0XHR0aGlzLnN0YXRlID0gbmV3IFdlYkdMU3RhdGUoIHRoaXMgKTtcblx0XHR0aGlzLnV0aWxzID0gbmV3IFdlYkdMVXRpbHMoIHRoaXMgKTtcblxuXHRcdHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApO1xuXHRcdHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jbGlwX2N1bGxfZGlzdGFuY2UnICk7XG5cdFx0dGhpcy5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKTtcblx0XHR0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0JyApO1xuXHRcdHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICk7XG5cdFx0dGhpcy5leHRlbnNpb25zLmdldCggJ1dFQkdMX3JlbmRlcl9zaGFyZWRfZXhwb25lbnQnICk7XG5cdFx0dGhpcy5leHRlbnNpb25zLmdldCggJ1dFQkdMX211bHRpX2RyYXcnICk7XG5cblx0XHR0aGlzLmRpc2pvaW50ID0gdGhpcy5leHRlbnNpb25zLmdldCggJ0VYVF9kaXNqb2ludF90aW1lcl9xdWVyeV93ZWJnbDInICk7XG5cdFx0dGhpcy5wYXJhbGxlbCA9IHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdLSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGUnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgY29vcmRpbmF0ZSBzeXN0ZW0gb2YgdGhlIGJhY2tlbmQuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEByZWFkb25seVxuXHQgKi9cblx0Z2V0IGNvb3JkaW5hdGVTeXN0ZW0oKSB7XG5cblx0XHRyZXR1cm4gV2ViR0xDb29yZGluYXRlU3lzdGVtO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgcGVyZm9ybXMgYSByZWFkYmFjayBvcGVyYXRpb24gYnkgbW92aW5nIGJ1ZmZlciBkYXRhIGZyb21cblx0ICogYSBzdG9yYWdlIGJ1ZmZlciBhdHRyaWJ1dGUgZnJvbSB0aGUgR1BVIHRvIHRoZSBDUFUuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcGFyYW0ge1N0b3JhZ2VCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBzdG9yYWdlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBidWZmZXIgZGF0YSB3aGVuIHRoZSBkYXRhIGFyZSByZWFkeS5cblx0ICovXG5cdGFzeW5jIGdldEFycmF5QnVmZmVyQXN5bmMoIGF0dHJpYnV0ZSApIHtcblxuXHRcdHJldHVybiBhd2FpdCB0aGlzLmF0dHJpYnV0ZVV0aWxzLmdldEFycmF5QnVmZmVyQXN5bmMoIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2FuIGJlIHVzZWQgdG8gc3luY2hyb25pemUgQ1BVIG9wZXJhdGlvbnMgd2l0aCBHUFUgdGFza3MuIFNvIHdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLFxuXHQgKiB0aGUgQ1BVIHdhaXRzIGZvciB0aGUgR1BVIHRvIGNvbXBsZXRlIGl0cyBvcGVyYXRpb24gKGUuZy4gYSBjb21wdXRlIHRhc2spLlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzeW5jaHJvbml6YXRpb24gaGFzIGJlZW4gZmluaXNoZWQuXG5cdCAqL1xuXHRhc3luYyB3YWl0Rm9yR1BVKCkge1xuXG5cdFx0YXdhaXQgdGhpcy51dGlscy5fY2xpZW50V2FpdEFzeW5jKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFbnN1cmVzIHRoZSBiYWNrZW5kIGlzIFhSIGNvbXBhdGlibGUuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlIHdoZW4gdGhlIHJlbmRlcmVyIGlzIFhSIGNvbXBhdGlibGUuXG5cdCAqL1xuXHRhc3luYyBtYWtlWFJDb21wYXRpYmxlKCkge1xuXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcblxuXHRcdGlmICggYXR0cmlidXRlcy54ckNvbXBhdGlibGUgIT09IHRydWUgKSB7XG5cblx0XHRcdGF3YWl0IHRoaXMuZ2wubWFrZVhSQ29tcGF0aWJsZSgpO1xuXG5cdFx0fVxuXG5cdH1cblx0LyoqXG5cdCAqIFNldHMgdGhlIFhSIHJlbmRlcmluZyBkZXN0aW5hdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTEZyYW1lYnVmZmVyfSB4ckZyYW1lYnVmZmVyIC0gVGhlIFhSIGZyYW1lYnVmZmVyLlxuXHQgKi9cblx0c2V0WFJUYXJnZXQoIHhyRnJhbWVidWZmZXIgKSB7XG5cblx0XHR0aGlzLl94ckZyYW1lYnVmZmVyID0geHJGcmFtZWJ1ZmZlcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbmZpZ3VyZXMgdGhlIGdpdmVuIFhSIHJlbmRlciB0YXJnZXQgd2l0aCBleHRlcm5hbCB0ZXh0dXJlcy5cblx0ICpcblx0ICogVGhpcyBtZXRob2QgaXMgb25seSByZWxldmFudCB3aGVuIHVzaW5nIHRoZSBXZWJYUiBMYXllcnMgQVBJLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1hSUmVuZGVyVGFyZ2V0fSByZW5kZXJUYXJnZXQgLSBUaGUgWFIgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtXZWJHTFRleHR1cmV9IGNvbG9yVGV4dHVyZSAtIEEgbmF0aXZlIGNvbG9yIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7P1dlYkdMVGV4dHVyZX0gW2RlcHRoVGV4dHVyZT1udWxsXSAtIEEgbmF0aXZlIGRlcHRoIHRleHR1cmUuXG5cdCAqL1xuXHRzZXRYUlJlbmRlclRhcmdldFRleHR1cmVzKCByZW5kZXJUYXJnZXQsIGNvbG9yVGV4dHVyZSwgZGVwdGhUZXh0dXJlID0gbnVsbCApIHtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblxuXHRcdHRoaXMuc2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSwgeyB0ZXh0dXJlR1BVOiBjb2xvclRleHR1cmUsIGdsSW50ZXJuYWxGb3JtYXQ6IGdsLlJHQkE4IH0gKTsgLy8gc2VlICMyNDY5OCB3aHkgUkdCQTggYW5kIG5vdCBTUkdCOF9BTFBIQTggaXMgdXNlZFxuXG5cdFx0aWYgKCBkZXB0aFRleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciA/IGdsLkRFUFRIMjRfU1RFTkNJTDggOiBnbC5ERVBUSF9DT01QT05FTlQyNDtcblxuXHRcdFx0dGhpcy5zZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUsIHsgdGV4dHVyZUdQVTogZGVwdGhUZXh0dXJlLCBnbEludGVybmFsRm9ybWF0OiBnbEludGVybmFsRm9ybWF0IH0gKTtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0LmF1dG9BbGxvY2F0ZURlcHRoQnVmZmVyID0gZmFsc2U7XG5cblx0XHRcdC8vIFRoZSBtdWx0aXNhbXBsZV9yZW5kZXJfdG9fdGV4dHVyZSBleHRlbnNpb24gZG9lc24ndCB3b3JrIHByb3Blcmx5IGlmIHRoZXJlXG5cdFx0XHQvLyBhcmUgbWlkZnJhbWUgZmx1c2hlcyBhbmQgYW4gZXh0ZXJuYWwgZGVwdGggdGV4dHVyZS5cblx0XHRcdGlmICggdGhpcy5leHRlbnNpb25zLmhhcyggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTEJhY2tlbmQ6IFJlbmRlci10by10ZXh0dXJlIGV4dGVuc2lvbiB3YXMgZGlzYWJsZWQgYmVjYXVzZSBhbiBleHRlcm5hbCB0ZXh0dXJlIHdhcyBwcm92aWRlZCcgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogSW5pdHMgYSB0aW1lIHN0YW1wIHF1ZXJ5IGZvciB0aGUgZ2l2ZW4gcmVuZGVyIGNvbnRleHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICovXG5cdGluaXRUaW1lc3RhbXBRdWVyeSggcmVuZGVyQ29udGV4dCApIHtcblxuXHRcdGlmICggISB0aGlzLmRpc2pvaW50IHx8ICEgdGhpcy50cmFja1RpbWVzdGFtcCApIHJldHVybjtcblxuXHRcdGNvbnN0IHR5cGUgPSByZW5kZXJDb250ZXh0LmlzQ29tcHV0ZU5vZGUgPyAnY29tcHV0ZScgOiAncmVuZGVyJztcblxuXHRcdGlmICggISB0aGlzLnRpbWVzdGFtcFF1ZXJ5UG9vbFsgdHlwZSBdICkge1xuXG5cdFx0XHQvLyBUT0RPOiBWYXJpYWJsZSBtYXhRdWVyaWVzP1xuXHRcdFx0dGhpcy50aW1lc3RhbXBRdWVyeVBvb2xbIHR5cGUgXSA9IG5ldyBXZWJHTFRpbWVzdGFtcFF1ZXJ5UG9vbCggdGhpcy5nbCwgdHlwZSwgMjA0OCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGltZXN0YW1wUXVlcnlQb29sID0gdGhpcy50aW1lc3RhbXBRdWVyeVBvb2xbIHR5cGUgXTtcblxuXHRcdGNvbnN0IGJhc2VPZmZzZXQgPSB0aW1lc3RhbXBRdWVyeVBvb2wuYWxsb2NhdGVRdWVyaWVzRm9yQ29udGV4dCggcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0aWYgKCBiYXNlT2Zmc2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aW1lc3RhbXBRdWVyeVBvb2wuYmVnaW5RdWVyeSggcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyB0aW1lc3RhbXAgdXRpbHNcblxuXHQvKipcblx0ICogUHJlcGFyZXMgdGhlIHRpbWVzdGFtcCBidWZmZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICovXG5cdHByZXBhcmVUaW1lc3RhbXBCdWZmZXIoIHJlbmRlckNvbnRleHQgKSB7XG5cblx0XHRpZiAoICEgdGhpcy5kaXNqb2ludCB8fCAhIHRoaXMudHJhY2tUaW1lc3RhbXAgKSByZXR1cm47XG5cblx0XHRjb25zdCB0eXBlID0gcmVuZGVyQ29udGV4dC5pc0NvbXB1dGVOb2RlID8gJ2NvbXB1dGUnIDogJ3JlbmRlcic7XG5cdFx0Y29uc3QgdGltZXN0YW1wUXVlcnlQb29sID0gdGhpcy50aW1lc3RhbXBRdWVyeVBvb2xbIHR5cGUgXTtcblxuXHRcdHRpbWVzdGFtcFF1ZXJ5UG9vbC5lbmRRdWVyeSggcmVuZGVyQ29udGV4dCApO1xuXG5cdH1cblxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBiYWNrZW5kJ3MgcmVuZGVyaW5nIGNvbnRleHQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1dlYkdMMlJlbmRlcmluZ0NvbnRleHR9IFRoZSByZW5kZXJpbmcgY29udGV4dC5cblx0ICovXG5cdGdldENvbnRleHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGV4ZWN1dGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSByZW5kZXIgY2FsbCBhbmQgcHJlcGFyZXNcblx0ICogdGhlIFdlYkdMIHN0YXRlIGZvciB1cGNvbWluZyByZW5kZXIgY2FsbHNcblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKi9cblx0YmVnaW5SZW5kZXIoIHJlbmRlckNvbnRleHQgKSB7XG5cblx0XHRjb25zdCB7IHN0YXRlLCBnbCB9ID0gdGhpcztcblx0XHRjb25zdCByZW5kZXJDb250ZXh0RGF0YSA9IHRoaXMuZ2V0KCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCByZW5kZXJDb250ZXh0LnZpZXdwb3J0ICkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZVZpZXdwb3J0KCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRzdGF0ZS52aWV3cG9ydCggMCwgMCwgZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlckNvbnRleHQuc2Npc3NvciApIHtcblxuXHRcdFx0Y29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSByZW5kZXJDb250ZXh0LnNjaXNzb3JWYWx1ZTtcblxuXHRcdFx0c3RhdGUuc2Npc3NvciggeCwgcmVuZGVyQ29udGV4dC5oZWlnaHQgLSBoZWlnaHQgLSB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dGhpcy5pbml0VGltZXN0YW1wUXVlcnkoIHJlbmRlckNvbnRleHQgKTtcblxuXHRcdHJlbmRlckNvbnRleHREYXRhLnByZXZpb3VzQ29udGV4dCA9IHRoaXMuX2N1cnJlbnRDb250ZXh0O1xuXHRcdHRoaXMuX2N1cnJlbnRDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcblxuXHRcdHRoaXMuX3NldEZyYW1lYnVmZmVyKCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHR0aGlzLmNsZWFyKCByZW5kZXJDb250ZXh0LmNsZWFyQ29sb3IsIHJlbmRlckNvbnRleHQuY2xlYXJEZXB0aCwgcmVuZGVyQ29udGV4dC5jbGVhclN0ZW5jaWwsIHJlbmRlckNvbnRleHQsIGZhbHNlICk7XG5cblxuXHRcdGNvbnN0IG9jY2x1c2lvblF1ZXJ5Q291bnQgPSByZW5kZXJDb250ZXh0Lm9jY2x1c2lvblF1ZXJ5Q291bnQ7XG5cblx0XHRpZiAoIG9jY2x1c2lvblF1ZXJ5Q291bnQgPiAwICkge1xuXG5cdFx0XHQvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGFycmF5IG9mIG9iamVjdHMgd2l0aCBxdWVyaWVzLiBUaGUgcmVuZGVyQ29udGV4dERhdGEgcHJvcGVydHlcblx0XHRcdC8vIGNhbiBiZSBjaGFuZ2VkIGJ5IGFub3RoZXIgcmVuZGVyIHBhc3MgYmVmb3JlIHRoZSBhc3luYyByZWFkaW5nIG9mIGFsbCBwcmV2aW91cyBxdWVyaWVzIGNvbXBsZXRlXG5cdFx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50T2NjbHVzaW9uUXVlcmllcyA9IHJlbmRlckNvbnRleHREYXRhLm9jY2x1c2lvblF1ZXJpZXM7XG5cdFx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50T2NjbHVzaW9uUXVlcnlPYmplY3RzID0gcmVuZGVyQ29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlPYmplY3RzO1xuXG5cdFx0XHRyZW5kZXJDb250ZXh0RGF0YS5sYXN0T2NjbHVzaW9uT2JqZWN0ID0gbnVsbDtcblx0XHRcdHJlbmRlckNvbnRleHREYXRhLm9jY2x1c2lvblF1ZXJpZXMgPSBuZXcgQXJyYXkoIG9jY2x1c2lvblF1ZXJ5Q291bnQgKTtcblx0XHRcdHJlbmRlckNvbnRleHREYXRhLm9jY2x1c2lvblF1ZXJ5T2JqZWN0cyA9IG5ldyBBcnJheSggb2NjbHVzaW9uUXVlcnlDb3VudCApO1xuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlJbmRleCA9IDA7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBleGVjdXRlZCBhdCB0aGUgZW5kIG9mIGEgcmVuZGVyIGNhbGwgYW5kIGZpbmFsaXplcyB3b3JrXG5cdCAqIGFmdGVyIGRyYXcgY2FsbHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICovXG5cdGZpbmlzaFJlbmRlciggcmVuZGVyQ29udGV4dCApIHtcblxuXHRcdGNvbnN0IHsgZ2wsIHN0YXRlIH0gPSB0aGlzO1xuXHRcdGNvbnN0IHJlbmRlckNvbnRleHREYXRhID0gdGhpcy5nZXQoIHJlbmRlckNvbnRleHQgKTtcblx0XHRjb25zdCBwcmV2aW91c0NvbnRleHQgPSByZW5kZXJDb250ZXh0RGF0YS5wcmV2aW91c0NvbnRleHQ7XG5cblx0XHRzdGF0ZS5yZXNldFZlcnRleFN0YXRlKCk7XG5cblx0XHRjb25zdCBvY2NsdXNpb25RdWVyeUNvdW50ID0gcmVuZGVyQ29udGV4dC5vY2NsdXNpb25RdWVyeUNvdW50O1xuXG5cdFx0aWYgKCBvY2NsdXNpb25RdWVyeUNvdW50ID4gMCApIHtcblxuXHRcdFx0aWYgKCBvY2NsdXNpb25RdWVyeUNvdW50ID4gcmVuZGVyQ29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlJbmRleCApIHtcblxuXHRcdFx0XHRnbC5lbmRRdWVyeSggZ2wuQU5ZX1NBTVBMRVNfUEFTU0VEICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5yZXNvbHZlT2NjbHVkZWRBc3luYyggcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJDb250ZXh0LnRleHR1cmVzO1xuXG5cdFx0aWYgKCB0ZXh0dXJlcyAhPT0gbnVsbCApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmUgPSB0ZXh0dXJlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgKSB7XG5cblx0XHRcdFx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5fY3VycmVudENvbnRleHQgPSBwcmV2aW91c0NvbnRleHQ7XG5cblx0XHRpZiAoIHJlbmRlckNvbnRleHQudGV4dHVyZXMgIT09IG51bGwgJiYgcmVuZGVyQ29udGV4dC5yZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGNvbnN0IHJlbmRlclRhcmdldENvbnRleHREYXRhID0gdGhpcy5nZXQoIHJlbmRlckNvbnRleHQucmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGNvbnN0IHsgc2FtcGxlcyB9ID0gcmVuZGVyQ29udGV4dC5yZW5kZXJUYXJnZXQ7XG5cblx0XHRcdGlmICggc2FtcGxlcyA+IDAgJiYgdGhpcy5fdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJDb250ZXh0LnJlbmRlclRhcmdldCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zdCBmYiA9IHJlbmRlclRhcmdldENvbnRleHREYXRhLmZyYW1lYnVmZmVyc1sgcmVuZGVyQ29udGV4dC5nZXRDYWNoZUtleSgpIF07XG5cblx0XHRcdFx0Y29uc3QgbWFzayA9IGdsLkNPTE9SX0JVRkZFUl9CSVQ7XG5cblx0XHRcdFx0Y29uc3QgbXNhYUZyYW1lQnVmZmVyID0gcmVuZGVyVGFyZ2V0Q29udGV4dERhdGEubXNhYUZyYW1lQnVmZmVyO1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyQ29udGV4dC50ZXh0dXJlcztcblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLlJFQURfRlJBTUVCVUZGRVIsIG1zYWFGcmFtZUJ1ZmZlciApO1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLkRSQVdfRlJBTUVCVUZGRVIsIGZiICk7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Ly8gVE9ETyBBZGQgc3VwcG9ydCBmb3IgTVJUXG5cblx0XHRcdFx0XHRpZiAoIHJlbmRlckNvbnRleHQuc2Npc3NvciApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSByZW5kZXJDb250ZXh0LnNjaXNzb3JWYWx1ZTtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgdmlld1kgPSByZW5kZXJDb250ZXh0LmhlaWdodCAtIGhlaWdodCAtIHk7XG5cblx0XHRcdFx0XHRcdGdsLmJsaXRGcmFtZWJ1ZmZlciggeCwgdmlld1ksIHggKyB3aWR0aCwgdmlld1kgKyBoZWlnaHQsIHgsIHZpZXdZLCB4ICsgd2lkdGgsIHZpZXdZICsgaGVpZ2h0LCBtYXNrLCBnbC5ORUFSRVNUICk7XG5cblx0XHRcdFx0XHRcdGlmICggdGhpcy5fc3VwcG9ydHNJbnZhbGlkYXRlRnJhbWVidWZmZXIgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z2wuaW52YWxpZGF0ZVN1YkZyYW1lYnVmZmVyKCBnbC5SRUFEX0ZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRDb250ZXh0RGF0YS5pbnZhbGlkYXRpb25BcnJheSwgeCwgdmlld1ksIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Z2wuYmxpdEZyYW1lYnVmZmVyKCAwLCAwLCByZW5kZXJDb250ZXh0LndpZHRoLCByZW5kZXJDb250ZXh0LmhlaWdodCwgMCwgMCwgcmVuZGVyQ29udGV4dC53aWR0aCwgcmVuZGVyQ29udGV4dC5oZWlnaHQsIG1hc2ssIGdsLk5FQVJFU1QgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLl9zdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRnbC5pbnZhbGlkYXRlRnJhbWVidWZmZXIoIGdsLlJFQURfRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldENvbnRleHREYXRhLmludmFsaWRhdGlvbkFycmF5ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwcmV2aW91c0NvbnRleHQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3NldEZyYW1lYnVmZmVyKCBwcmV2aW91c0NvbnRleHQgKTtcblxuXHRcdFx0aWYgKCBwcmV2aW91c0NvbnRleHQudmlld3BvcnQgKSB7XG5cblx0XHRcdFx0dGhpcy51cGRhdGVWaWV3cG9ydCggcHJldmlvdXNDb250ZXh0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3RhdGUudmlld3BvcnQoIDAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLnByZXBhcmVUaW1lc3RhbXBCdWZmZXIoIHJlbmRlckNvbnRleHQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHByb2Nlc3NlcyB0aGUgcmVzdWx0IG9mIG9jY2x1c2lvbiBxdWVyaWVzIGFuZCB3cml0ZXMgaXRcblx0ICogaW50byByZW5kZXIgY29udGV4dCBkYXRhLlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKi9cblx0cmVzb2x2ZU9jY2x1ZGVkQXN5bmMoIHJlbmRlckNvbnRleHQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJDb250ZXh0RGF0YSA9IHRoaXMuZ2V0KCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHQvLyBoYW5kbGUgb2NjbHVzaW9uIHF1ZXJ5IHJlc3VsdHNcblxuXHRcdGNvbnN0IHsgY3VycmVudE9jY2x1c2lvblF1ZXJpZXMsIGN1cnJlbnRPY2NsdXNpb25RdWVyeU9iamVjdHMgfSA9IHJlbmRlckNvbnRleHREYXRhO1xuXG5cdFx0aWYgKCBjdXJyZW50T2NjbHVzaW9uUXVlcmllcyAmJiBjdXJyZW50T2NjbHVzaW9uUXVlcnlPYmplY3RzICkge1xuXG5cdFx0XHRjb25zdCBvY2NsdWRlZCA9IG5ldyBXZWFrU2V0KCk7XG5cdFx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXG5cdFx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50T2NjbHVzaW9uUXVlcnlPYmplY3RzID0gbnVsbDtcblx0XHRcdHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRPY2NsdXNpb25RdWVyaWVzID0gbnVsbDtcblxuXHRcdFx0Y29uc3QgY2hlY2sgPSAoKSA9PiB7XG5cblx0XHRcdFx0bGV0IGNvbXBsZXRlZCA9IDA7XG5cblx0XHRcdFx0Ly8gY2hlY2sgYWxsIHF1ZXJpZXMgYW5kIHJlcXVldWUgYXMgYXBwcm9wcmlhdGVcblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY3VycmVudE9jY2x1c2lvblF1ZXJpZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgcXVlcnkgPSBjdXJyZW50T2NjbHVzaW9uUXVlcmllc1sgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCBxdWVyeSA9PT0gbnVsbCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0aWYgKCBnbC5nZXRRdWVyeVBhcmFtZXRlciggcXVlcnksIGdsLlFVRVJZX1JFU1VMVF9BVkFJTEFCTEUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnbC5nZXRRdWVyeVBhcmFtZXRlciggcXVlcnksIGdsLlFVRVJZX1JFU1VMVCApID09PSAwICkgb2NjbHVkZWQuYWRkKCBjdXJyZW50T2NjbHVzaW9uUXVlcnlPYmplY3RzWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0Y3VycmVudE9jY2x1c2lvblF1ZXJpZXNbIGkgXSA9IG51bGw7XG5cdFx0XHRcdFx0XHRnbC5kZWxldGVRdWVyeSggcXVlcnkgKTtcblxuXHRcdFx0XHRcdFx0Y29tcGxldGVkICsrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA8IGN1cnJlbnRPY2NsdXNpb25RdWVyaWVzLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSggY2hlY2sgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmVuZGVyQ29udGV4dERhdGEub2NjbHVkZWQgPSBvY2NsdWRlZDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH07XG5cblx0XHRcdGNoZWNrKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gM0Qgb2JqZWN0IGlzIGZ1bGx5IG9jY2x1ZGVkIGJ5IG90aGVyXG5cdCAqIDNEIG9iamVjdHMgaW4gdGhlIHNjZW5lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QgdG8gdGVzdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgM0Qgb2JqZWN0IGlzIGZ1bGx5IG9jY2x1ZGVkIG9yIG5vdC5cblx0ICovXG5cdGlzT2NjbHVkZWQoIHJlbmRlckNvbnRleHQsIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IHJlbmRlckNvbnRleHREYXRhID0gdGhpcy5nZXQoIHJlbmRlckNvbnRleHQgKTtcblxuXHRcdHJldHVybiByZW5kZXJDb250ZXh0RGF0YS5vY2NsdWRlZCAmJiByZW5kZXJDb250ZXh0RGF0YS5vY2NsdWRlZC5oYXMoIG9iamVjdCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgdmlld3BvcnQgd2l0aCB0aGUgdmFsdWVzIGZyb20gdGhlIGdpdmVuIHJlbmRlciBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqL1xuXHR1cGRhdGVWaWV3cG9ydCggcmVuZGVyQ29udGV4dCApIHtcblxuXHRcdGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG5cdFx0Y29uc3QgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSByZW5kZXJDb250ZXh0LnZpZXdwb3J0VmFsdWU7XG5cblx0XHRzdGF0ZS52aWV3cG9ydCggeCwgcmVuZGVyQ29udGV4dC5oZWlnaHQgLSBoZWlnaHQgLSB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBzY2lzc29yIHRlc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gYm9vbGVhbiAtIFdoZXRoZXIgdGhlIHNjaXNzb3IgdGVzdCBzaG91bGQgYmUgZW5hYmxlZCBvciBub3QuXG5cdCAqL1xuXHRzZXRTY2lzc29yVGVzdCggYm9vbGVhbiApIHtcblxuXHRcdGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcblxuXHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBib29sZWFuICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjbGVhciBjb2xvciBhbmQgYWxwaGEgaW50byBhIHNpbmdsZVxuXHQgKiBjb2xvciBvYmplY3QuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0NvbG9yNH0gVGhlIGNsZWFyIGNvbG9yLlxuXHQgKi9cblx0Z2V0Q2xlYXJDb2xvcigpIHtcblxuXHRcdGNvbnN0IGNsZWFyQ29sb3IgPSBzdXBlci5nZXRDbGVhckNvbG9yKCk7XG5cblx0XHQvLyBTaW5jZSB0aGUgY2FudmFzIGlzIGFsd2F5cyBjcmVhdGVkIHdpdGggYWxwaGE6IHRydWUsXG5cdFx0Ly8gV2ViR0wgbXVzdCBhbHdheXMgcHJlbXVsdGlwbHkgdGhlIGNsZWFyIGNvbG9yLlxuXG5cdFx0Y2xlYXJDb2xvci5yICo9IGNsZWFyQ29sb3IuYTtcblx0XHRjbGVhckNvbG9yLmcgKj0gY2xlYXJDb2xvci5hO1xuXHRcdGNsZWFyQ29sb3IuYiAqPSBjbGVhckNvbG9yLmE7XG5cblx0XHRyZXR1cm4gY2xlYXJDb2xvcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBlcmZvcm1zIGEgY2xlYXIgb3BlcmF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbG9yIC0gV2hldGhlciB0aGUgY29sb3IgYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBkZXB0aCAtIFdoZXRoZXIgdGhlIGRlcHRoIGJ1ZmZlciBzaG91bGQgYmUgY2xlYXJlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RlbmNpbCAtIFdoZXRoZXIgdGhlIHN0ZW5jaWwgYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHs/T2JqZWN0fSBbZGVzY3JpcHRvcj1udWxsXSAtIFRoZSByZW5kZXIgY29udGV4dCBvZiB0aGUgY3VycmVudCBzZXQgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbc2V0RnJhbWVCdWZmZXI9dHJ1ZV0gLSBUT0RPLlxuXHQgKi9cblx0Y2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCwgZGVzY3JpcHRvciA9IG51bGwsIHNldEZyYW1lQnVmZmVyID0gdHJ1ZSApIHtcblxuXHRcdGNvbnN0IHsgZ2wsIHJlbmRlcmVyIH0gPSB0aGlzO1xuXG5cdFx0aWYgKCBkZXNjcmlwdG9yID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBjbGVhckNvbG9yID0gdGhpcy5nZXRDbGVhckNvbG9yKCk7XG5cblx0XHRcdGRlc2NyaXB0b3IgPSB7XG5cdFx0XHRcdHRleHR1cmVzOiBudWxsLFxuXHRcdFx0XHRjbGVhckNvbG9yVmFsdWU6IGNsZWFyQ29sb3Jcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0bGV0IGNsZWFyID0gMDtcblxuXHRcdGlmICggY29sb3IgKSBjbGVhciB8PSBnbC5DT0xPUl9CVUZGRVJfQklUO1xuXHRcdGlmICggZGVwdGggKSBjbGVhciB8PSBnbC5ERVBUSF9CVUZGRVJfQklUO1xuXHRcdGlmICggc3RlbmNpbCApIGNsZWFyIHw9IGdsLlNURU5DSUxfQlVGRkVSX0JJVDtcblxuXHRcdGlmICggY2xlYXIgIT09IDAgKSB7XG5cblx0XHRcdGxldCBjbGVhckNvbG9yO1xuXG5cdFx0XHRpZiAoIGRlc2NyaXB0b3IuY2xlYXJDb2xvclZhbHVlICkge1xuXG5cdFx0XHRcdGNsZWFyQ29sb3IgPSBkZXNjcmlwdG9yLmNsZWFyQ29sb3JWYWx1ZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjbGVhckNvbG9yID0gdGhpcy5nZXRDbGVhckNvbG9yKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY2xlYXJEZXB0aCA9IHJlbmRlcmVyLmdldENsZWFyRGVwdGgoKTtcblx0XHRcdGNvbnN0IGNsZWFyU3RlbmNpbCA9IHJlbmRlcmVyLmdldENsZWFyU3RlbmNpbCgpO1xuXG5cdFx0XHRpZiAoIGRlcHRoICkgdGhpcy5zdGF0ZS5zZXREZXB0aE1hc2soIHRydWUgKTtcblxuXHRcdFx0aWYgKCBkZXNjcmlwdG9yLnRleHR1cmVzID09PSBudWxsICkge1xuXG5cdFx0XHRcdGdsLmNsZWFyQ29sb3IoIGNsZWFyQ29sb3IuciwgY2xlYXJDb2xvci5nLCBjbGVhckNvbG9yLmIsIGNsZWFyQ29sb3IuYSApO1xuXHRcdFx0XHRnbC5jbGVhciggY2xlYXIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHNldEZyYW1lQnVmZmVyICkgdGhpcy5fc2V0RnJhbWVidWZmZXIoIGRlc2NyaXB0b3IgKTtcblxuXHRcdFx0XHRpZiAoIGNvbG9yICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZGVzY3JpcHRvci50ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0XHRnbC5jbGVhckJ1ZmZlcmZ2KCBnbC5DT0xPUiwgaSwgWyBjbGVhckNvbG9yLnIsIGNsZWFyQ29sb3IuZywgY2xlYXJDb2xvci5iLCBjbGVhckNvbG9yLmEgXSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGdsLmNsZWFyQnVmZmVyZnYoIGdsLkNPTE9SLCBpLCBbIDAsIDAsIDAsIDEgXSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGVwdGggJiYgc3RlbmNpbCApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyQnVmZmVyZmkoIGdsLkRFUFRIX1NURU5DSUwsIDAsIGNsZWFyRGVwdGgsIGNsZWFyU3RlbmNpbCApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGRlcHRoICkge1xuXG5cdFx0XHRcdFx0Z2wuY2xlYXJCdWZmZXJmdiggZ2wuREVQVEgsIDAsIFsgY2xlYXJEZXB0aCBdICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggc3RlbmNpbCApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyQnVmZmVyaXYoIGdsLlNURU5DSUwsIDAsIFsgY2xlYXJTdGVuY2lsIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGV4ZWN1dGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBjb21wdXRlIGNhbGwgYW5kXG5cdCAqIHByZXBhcmVzIHRoZSBzdGF0ZSBmb3IgdXBjb21pbmcgY29tcHV0ZSB0YXNrcy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfEFycmF5PE5vZGU+fSBjb21wdXRlR3JvdXAgLSBUaGUgY29tcHV0ZSBub2RlKHMpLlxuXHQgKi9cblx0YmVnaW5Db21wdXRlKCBjb21wdXRlR3JvdXAgKSB7XG5cblx0XHRjb25zdCB7IHN0YXRlLCBnbCB9ID0gdGhpcztcblxuXHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggZ2wuRlJBTUVCVUZGRVIsIG51bGwgKTtcblx0XHR0aGlzLmluaXRUaW1lc3RhbXBRdWVyeSggY29tcHV0ZUdyb3VwICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlcyBhIGNvbXB1dGUgY29tbWFuZCBmb3IgdGhlIGdpdmVuIGNvbXB1dGUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfEFycmF5PE5vZGU+fSBjb21wdXRlR3JvdXAgLSBUaGUgZ3JvdXAgb2YgY29tcHV0ZSBub2RlcyBvZiBhIGNvbXB1dGUgY2FsbC4gQ2FuIGJlIGEgc2luZ2xlIGNvbXB1dGUgbm9kZS5cblx0ICogQHBhcmFtIHtOb2RlfSBjb21wdXRlTm9kZSAtIFRoZSBjb21wdXRlIG5vZGUuXG5cdCAqIEBwYXJhbSB7QXJyYXk8QmluZEdyb3VwPn0gYmluZGluZ3MgLSBUaGUgYmluZGluZ3MuXG5cdCAqIEBwYXJhbSB7Q29tcHV0ZVBpcGVsaW5lfSBwaXBlbGluZSAtIFRoZSBjb21wdXRlIHBpcGVsaW5lLlxuXHQgKi9cblx0Y29tcHV0ZSggY29tcHV0ZUdyb3VwLCBjb21wdXRlTm9kZSwgYmluZGluZ3MsIHBpcGVsaW5lICkge1xuXG5cdFx0Y29uc3QgeyBzdGF0ZSwgZ2wgfSA9IHRoaXM7XG5cblx0XHRpZiAoIHRoaXMuZGlzY2FyZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIHJlcXVpcmVkIGhlcmUgdG8gaGFuZGxlIGFzeW5jIGJlaGF2aW91ciBvZiByZW5kZXIuY29tcHV0ZSgpXG5cdFx0XHRnbC5lbmFibGUoIGdsLlJBU1RFUklaRVJfRElTQ0FSRCApO1xuXHRcdFx0dGhpcy5kaXNjYXJkID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHsgcHJvZ3JhbUdQVSwgdHJhbnNmb3JtQnVmZmVycywgYXR0cmlidXRlcyB9ID0gdGhpcy5nZXQoIHBpcGVsaW5lICk7XG5cblx0XHRjb25zdCB2YW9LZXkgPSB0aGlzLl9nZXRWYW9LZXkoIGF0dHJpYnV0ZXMgKTtcblxuXHRcdGNvbnN0IHZhb0dQVSA9IHRoaXMudmFvQ2FjaGVbIHZhb0tleSBdO1xuXG5cdFx0aWYgKCB2YW9HUFUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5fY3JlYXRlVmFvKCBhdHRyaWJ1dGVzICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRzdGF0ZS5zZXRWZXJ0ZXhTdGF0ZSggdmFvR1BVICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS51c2VQcm9ncmFtKCBwcm9ncmFtR1BVICk7XG5cblx0XHR0aGlzLl9iaW5kVW5pZm9ybXMoIGJpbmRpbmdzICk7XG5cblx0XHRjb25zdCB0cmFuc2Zvcm1GZWVkYmFja0dQVSA9IHRoaXMuX2dldFRyYW5zZm9ybUZlZWRiYWNrKCB0cmFuc2Zvcm1CdWZmZXJzICk7XG5cblx0XHRnbC5iaW5kVHJhbnNmb3JtRmVlZGJhY2soIGdsLlRSQU5TRk9STV9GRUVEQkFDSywgdHJhbnNmb3JtRmVlZGJhY2tHUFUgKTtcblx0XHRnbC5iZWdpblRyYW5zZm9ybUZlZWRiYWNrKCBnbC5QT0lOVFMgKTtcblxuXHRcdGlmICggYXR0cmlidXRlc1sgMCBdLmlzU3RvcmFnZUluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Z2wuZHJhd0FycmF5c0luc3RhbmNlZCggZ2wuUE9JTlRTLCAwLCAxLCBjb21wdXRlTm9kZS5jb3VudCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Z2wuZHJhd0FycmF5cyggZ2wuUE9JTlRTLCAwLCBjb21wdXRlTm9kZS5jb3VudCApO1xuXG5cdFx0fVxuXG5cdFx0Z2wuZW5kVHJhbnNmb3JtRmVlZGJhY2soKTtcblx0XHRnbC5iaW5kVHJhbnNmb3JtRmVlZGJhY2soIGdsLlRSQU5TRk9STV9GRUVEQkFDSywgbnVsbCApO1xuXG5cdFx0Ly8gc3dpdGNoIGFjdGl2ZSBidWZmZXJzXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0cmFuc2Zvcm1CdWZmZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgZHVhbEF0dHJpYnV0ZURhdGEgPSB0cmFuc2Zvcm1CdWZmZXJzWyBpIF07XG5cblx0XHRcdGlmICggZHVhbEF0dHJpYnV0ZURhdGEucGJvICkge1xuXG5cdFx0XHRcdHRoaXMudGV4dHVyZVV0aWxzLmNvcHlCdWZmZXJUb1RleHR1cmUoIGR1YWxBdHRyaWJ1dGVEYXRhLnRyYW5zZm9ybUJ1ZmZlciwgZHVhbEF0dHJpYnV0ZURhdGEucGJvICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZHVhbEF0dHJpYnV0ZURhdGEuc3dpdGNoQnVmZmVycygpO1xuXG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBleGVjdXRlZCBhdCB0aGUgZW5kIG9mIGEgY29tcHV0ZSBjYWxsIGFuZFxuXHQgKiBmaW5hbGl6ZXMgd29yayBhZnRlciBjb21wdXRlIHRhc2tzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV8QXJyYXk8Tm9kZT59IGNvbXB1dGVHcm91cCAtIFRoZSBjb21wdXRlIG5vZGUocykuXG5cdCAqL1xuXHRmaW5pc2hDb21wdXRlKCBjb21wdXRlR3JvdXAgKSB7XG5cblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cblx0XHR0aGlzLmRpc2NhcmQgPSBmYWxzZTtcblxuXHRcdGdsLmRpc2FibGUoIGdsLlJBU1RFUklaRVJfRElTQ0FSRCApO1xuXG5cdFx0dGhpcy5wcmVwYXJlVGltZXN0YW1wQnVmZmVyKCBjb21wdXRlR3JvdXAgKTtcblxuXHRcdGlmICggdGhpcy5fY3VycmVudENvbnRleHQgKSB7XG5cblx0XHRcdHRoaXMuX3NldEZyYW1lYnVmZmVyKCB0aGlzLl9jdXJyZW50Q29udGV4dCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZXMgYSBkcmF3IGNvbW1hbmQgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QgdG8gZHJhdy5cblx0ICogQHBhcmFtIHtJbmZvfSBpbmZvIC0gSG9sZHMgYSBzZXJpZXMgb2Ygc3RhdGlzdGljYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIEdQVSBtZW1vcnkgYW5kIHRoZSByZW5kZXJpbmcgcHJvY2Vzcy5cblx0ICovXG5cdGRyYXcoIHJlbmRlck9iamVjdC8qLCBpbmZvKi8gKSB7XG5cblx0XHRjb25zdCB7IG9iamVjdCwgcGlwZWxpbmUsIG1hdGVyaWFsLCBjb250ZXh0LCBoYXJkd2FyZUNsaXBwaW5nUGxhbmVzIH0gPSByZW5kZXJPYmplY3Q7XG5cdFx0Y29uc3QgeyBwcm9ncmFtR1BVIH0gPSB0aGlzLmdldCggcGlwZWxpbmUgKTtcblxuXHRcdGNvbnN0IHsgZ2wsIHN0YXRlIH0gPSB0aGlzO1xuXG5cdFx0Y29uc3QgY29udGV4dERhdGEgPSB0aGlzLmdldCggY29udGV4dCApO1xuXG5cdFx0Y29uc3QgZHJhd1BhcmFtcyA9IHJlbmRlck9iamVjdC5nZXREcmF3UGFyYW1ldGVycygpO1xuXG5cdFx0aWYgKCBkcmF3UGFyYW1zID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0Ly9cblxuXHRcdHRoaXMuX2JpbmRVbmlmb3JtcyggcmVuZGVyT2JqZWN0LmdldEJpbmRpbmdzKCkgKTtcblxuXHRcdGNvbnN0IGZyb250RmFjZUNXID0gKCBvYmplY3QuaXNNZXNoICYmIG9iamVjdC5tYXRyaXhXb3JsZC5kZXRlcm1pbmFudCgpIDwgMCApO1xuXG5cdFx0c3RhdGUuc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVywgaGFyZHdhcmVDbGlwcGluZ1BsYW5lcyApO1xuXG5cdFx0c3RhdGUudXNlUHJvZ3JhbSggcHJvZ3JhbUdQVSApO1xuXG5cdFx0Ly8gdmVydGV4IHN0YXRlXG5cblx0XHRjb25zdCByZW5kZXJPYmplY3REYXRhID0gdGhpcy5nZXQoIHJlbmRlck9iamVjdCApO1xuXG5cdFx0bGV0IHZhb0dQVSA9IHJlbmRlck9iamVjdERhdGEuc3RhdGljVmFvO1xuXG5cdFx0aWYgKCB2YW9HUFUgPT09IHVuZGVmaW5lZCB8fCByZW5kZXJPYmplY3REYXRhLmdlb21ldHJ5SWQgIT09IHJlbmRlck9iamVjdC5nZW9tZXRyeS5pZCApIHtcblxuXHRcdFx0Y29uc3QgdmFvS2V5ID0gdGhpcy5fZ2V0VmFvS2V5KCByZW5kZXJPYmplY3QuZ2V0QXR0cmlidXRlcygpICk7XG5cblx0XHRcdHZhb0dQVSA9IHRoaXMudmFvQ2FjaGVbIHZhb0tleSBdO1xuXG5cdFx0XHRpZiAoIHZhb0dQVSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGxldCBzdGF0aWNWYW87XG5cblx0XHRcdFx0KCB7IHZhb0dQVSwgc3RhdGljVmFvIH0gPSB0aGlzLl9jcmVhdGVWYW8oIHJlbmRlck9iamVjdC5nZXRBdHRyaWJ1dGVzKCkgKSApO1xuXG5cdFx0XHRcdGlmICggc3RhdGljVmFvICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyT2JqZWN0RGF0YS5zdGF0aWNWYW8gPSB2YW9HUFU7XG5cdFx0XHRcdFx0cmVuZGVyT2JqZWN0RGF0YS5nZW9tZXRyeUlkID0gcmVuZGVyT2JqZWN0Lmdlb21ldHJ5LmlkO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaW5kZXggPSByZW5kZXJPYmplY3QuZ2V0SW5kZXgoKTtcblx0XHRjb25zdCBpbmRleEdQVSA9ICggaW5kZXggIT09IG51bGwgKSA/IHRoaXMuZ2V0KCBpbmRleCApLmJ1ZmZlckdQVSA6IG51bGw7XG5cblx0XHRzdGF0ZS5zZXRWZXJ0ZXhTdGF0ZSggdmFvR1BVLCBpbmRleEdQVSApO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGxhc3RPYmplY3QgPSBjb250ZXh0RGF0YS5sYXN0T2NjbHVzaW9uT2JqZWN0O1xuXG5cdFx0aWYgKCBsYXN0T2JqZWN0ICE9PSBvYmplY3QgJiYgbGFzdE9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIGxhc3RPYmplY3QgIT09IG51bGwgJiYgbGFzdE9iamVjdC5vY2NsdXNpb25UZXN0ID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGdsLmVuZFF1ZXJ5KCBnbC5BTllfU0FNUExFU19QQVNTRUQgKTtcblxuXHRcdFx0XHRjb250ZXh0RGF0YS5vY2NsdXNpb25RdWVyeUluZGV4ICsrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb2JqZWN0Lm9jY2x1c2lvblRlc3QgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y29uc3QgcXVlcnkgPSBnbC5jcmVhdGVRdWVyeSgpO1xuXG5cdFx0XHRcdGdsLmJlZ2luUXVlcnkoIGdsLkFOWV9TQU1QTEVTX1BBU1NFRCwgcXVlcnkgKTtcblxuXHRcdFx0XHRjb250ZXh0RGF0YS5vY2NsdXNpb25RdWVyaWVzWyBjb250ZXh0RGF0YS5vY2NsdXNpb25RdWVyeUluZGV4IF0gPSBxdWVyeTtcblx0XHRcdFx0Y29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlPYmplY3RzWyBjb250ZXh0RGF0YS5vY2NsdXNpb25RdWVyeUluZGV4IF0gPSBvYmplY3Q7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29udGV4dERhdGEubGFzdE9jY2x1c2lvbk9iamVjdCA9IG9iamVjdDtcblxuXHRcdH1cblxuXHRcdC8vXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLmJ1ZmZlclJlbmRlcmVyO1xuXG5cdFx0aWYgKCBvYmplY3QuaXNQb2ludHMgKSByZW5kZXJlci5tb2RlID0gZ2wuUE9JTlRTO1xuXHRcdGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lU2VnbWVudHMgKSByZW5kZXJlci5tb2RlID0gZ2wuTElORVM7XG5cdFx0ZWxzZSBpZiAoIG9iamVjdC5pc0xpbmUgKSByZW5kZXJlci5tb2RlID0gZ2wuTElORV9TVFJJUDtcblx0XHRlbHNlIGlmICggb2JqZWN0LmlzTGluZUxvb3AgKSByZW5kZXJlci5tb2RlID0gZ2wuTElORV9MT09QO1xuXHRcdGVsc2Uge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRzdGF0ZS5zZXRMaW5lV2lkdGgoIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCAqIHRoaXMucmVuZGVyZXIuZ2V0UGl4ZWxSYXRpbygpICk7XG5cdFx0XHRcdHJlbmRlcmVyLm1vZGUgPSBnbC5MSU5FUztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZW5kZXJlci5tb2RlID0gZ2wuVFJJQU5HTEVTO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgeyB2ZXJ0ZXhDb3VudCwgaW5zdGFuY2VDb3VudCB9ID0gZHJhd1BhcmFtcztcblx0XHRsZXQgeyBmaXJzdFZlcnRleCB9ID0gZHJhd1BhcmFtcztcblxuXHRcdHJlbmRlcmVyLm9iamVjdCA9IG9iamVjdDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGZpcnN0VmVydGV4ICo9IGluZGV4LmFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xuXG5cdFx0XHRjb25zdCBpbmRleERhdGEgPSB0aGlzLmdldCggaW5kZXggKTtcblxuXHRcdFx0cmVuZGVyZXIuaW5kZXggPSBpbmRleC5jb3VudDtcblx0XHRcdHJlbmRlcmVyLnR5cGUgPSBpbmRleERhdGEudHlwZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlcmVyLmluZGV4ID0gMDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGRyYXcgPSAoKSA9PiB7XG5cblx0XHRcdGlmICggb2JqZWN0LmlzQmF0Y2hlZE1lc2ggKSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuX211bHRpRHJhd0luc3RhbmNlcyAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdC8vIEBkZXByZWNhdGVkLCByMTc0XG5cdFx0XHRcdFx0d2Fybk9uY2UoICdUSFJFRS5XZWJHTEJhY2tlbmQ6IHJlbmRlck11bHRpRHJhd0luc3RhbmNlcyBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gcjE4NC4gQXBwZW5kIHRvIHJlbmRlck11bHRpRHJhdyBhcmd1bWVudHMgYW5kIHVzZSBpbmRpcmVjdGlvbi4nICk7XG5cdFx0XHRcdFx0cmVuZGVyZXIucmVuZGVyTXVsdGlEcmF3SW5zdGFuY2VzKCBvYmplY3QuX211bHRpRHJhd1N0YXJ0cywgb2JqZWN0Ll9tdWx0aURyYXdDb3VudHMsIG9iamVjdC5fbXVsdGlEcmF3Q291bnQsIG9iamVjdC5fbXVsdGlEcmF3SW5zdGFuY2VzICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggISB0aGlzLmhhc0ZlYXR1cmUoICdXRUJHTF9tdWx0aV9kcmF3JyApICkge1xuXG5cdFx0XHRcdFx0d2Fybk9uY2UoICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBXRUJHTF9tdWx0aV9kcmF3IG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5yZW5kZXJNdWx0aURyYXcoIG9iamVjdC5fbXVsdGlEcmF3U3RhcnRzLCBvYmplY3QuX211bHRpRHJhd0NvdW50cywgb2JqZWN0Ll9tdWx0aURyYXdDb3VudCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggaW5zdGFuY2VDb3VudCA+IDEgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIucmVuZGVySW5zdGFuY2VzKCBmaXJzdFZlcnRleCwgdmVydGV4Q291bnQsIGluc3RhbmNlQ291bnQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZW5kZXJlci5yZW5kZXIoIGZpcnN0VmVydGV4LCB2ZXJ0ZXhDb3VudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0aWYgKCByZW5kZXJPYmplY3QuY2FtZXJhLmlzQXJyYXlDYW1lcmEgJiYgcmVuZGVyT2JqZWN0LmNhbWVyYS5jYW1lcmFzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IGNhbWVyYURhdGEgPSB0aGlzLmdldCggcmVuZGVyT2JqZWN0LmNhbWVyYSApO1xuXHRcdFx0Y29uc3QgY2FtZXJhcyA9IHJlbmRlck9iamVjdC5jYW1lcmEuY2FtZXJhcztcblx0XHRcdGNvbnN0IGNhbWVyYUluZGV4ID0gcmVuZGVyT2JqZWN0LmdldEJpbmRpbmdHcm91cCggJ2NhbWVyYUluZGV4JyApLmJpbmRpbmdzWyAwIF07XG5cblx0XHRcdGlmICggY2FtZXJhRGF0YS5pbmRleGVzR1BVID09PSB1bmRlZmluZWQgfHwgY2FtZXJhRGF0YS5pbmRleGVzR1BVLmxlbmd0aCAhPT0gY2FtZXJhcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y29uc3QgZGF0YSA9IG5ldyBVaW50MzJBcnJheSggWyAwLCAwLCAwLCAwIF0gKTtcblx0XHRcdFx0Y29uc3QgaW5kZXhlc0dQVSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbGVuID0gY2FtZXJhcy5sZW5ndGg7IGkgPCBsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBidWZmZXJHUFUgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblxuXHRcdFx0XHRcdGRhdGFbIDAgXSA9IGk7XG5cblx0XHRcdFx0XHRnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgYnVmZmVyR1BVICk7XG5cdFx0XHRcdFx0Z2wuYnVmZmVyRGF0YSggZ2wuVU5JRk9STV9CVUZGRVIsIGRhdGEsIGdsLlNUQVRJQ19EUkFXICk7XG5cblx0XHRcdFx0XHRpbmRleGVzR1BVLnB1c2goIGJ1ZmZlckdQVSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYW1lcmFEYXRhLmluZGV4ZXNHUFUgPSBpbmRleGVzR1BVOyAvLyBUT0RPOiBDcmVhdGUgYSBnbG9iYWwgbGlicmFyeSBmb3IgdGhpc1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNhbWVyYUluZGV4RGF0YSA9IHRoaXMuZ2V0KCBjYW1lcmFJbmRleCApO1xuXHRcdFx0Y29uc3QgcGl4ZWxSYXRpbyA9IHRoaXMucmVuZGVyZXIuZ2V0UGl4ZWxSYXRpbygpO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGxlbiA9IGNhbWVyYXMubGVuZ3RoOyBpIDwgbGVuOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHN1YkNhbWVyYSA9IGNhbWVyYXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5sYXllcnMudGVzdCggc3ViQ2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdnAgPSBzdWJDYW1lcmEudmlld3BvcnQ7XG5cblx0XHRcdFx0XHRjb25zdCB4ID0gdnAueCAqIHBpeGVsUmF0aW87XG5cdFx0XHRcdFx0Y29uc3QgeSA9IHZwLnkgKiBwaXhlbFJhdGlvO1xuXHRcdFx0XHRcdGNvbnN0IHdpZHRoID0gdnAud2lkdGggKiBwaXhlbFJhdGlvO1xuXHRcdFx0XHRcdGNvbnN0IGhlaWdodCA9IHZwLmhlaWdodCAqIHBpeGVsUmF0aW87XG5cblx0XHRcdFx0XHRzdGF0ZS52aWV3cG9ydChcblx0XHRcdFx0XHRcdE1hdGguZmxvb3IoIHggKSxcblx0XHRcdFx0XHRcdE1hdGguZmxvb3IoIHJlbmRlck9iamVjdC5jb250ZXh0LmhlaWdodCAtIGhlaWdodCAtIHkgKSxcblx0XHRcdFx0XHRcdE1hdGguZmxvb3IoIHdpZHRoICksXG5cdFx0XHRcdFx0XHRNYXRoLmZsb29yKCBoZWlnaHQgKVxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRzdGF0ZS5iaW5kQnVmZmVyQmFzZSggZ2wuVU5JRk9STV9CVUZGRVIsIGNhbWVyYUluZGV4RGF0YS5pbmRleCwgY2FtZXJhRGF0YS5pbmRleGVzR1BVWyBpIF0gKTtcblxuXHRcdFx0XHRcdGRyYXcoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRyYXcoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEV4cGxhaW4gd2h5IGFsd2F5cyBudWxsIGlzIHJldHVybmVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlbmRlciBwaXBlbGluZSByZXF1aXJlcyBhbiB1cGRhdGUgb3Igbm90LlxuXHQgKi9cblx0bmVlZHNSZW5kZXJVcGRhdGUoIC8qcmVuZGVyT2JqZWN0Ki8gKSB7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeHBsYWluIHdoeSBubyBjYWNoZSBrZXkgaXMgY29tcHV0ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgY2FjaGUga2V5LlxuXHQgKi9cblx0Z2V0UmVuZGVyQ2FjaGVLZXkoIC8qcmVuZGVyT2JqZWN0Ki8gKSB7XG5cblx0XHRyZXR1cm4gJyc7XG5cblx0fVxuXG5cdC8vIHRleHR1cmVzXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBkZWZhdWx0IHRleHR1cmUgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIHRoYXQgY2FuIGJlIHVzZWRcblx0ICogYXMgYSBwbGFjZWhvbGRlciB1bnRpbCB0aGUgYWN0dWFsIHRleHR1cmUgaXMgcmVhZHkgZm9yIHVzYWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBjcmVhdGUgYSBkZWZhdWx0IHRleHR1cmUgZm9yLlxuXHQgKi9cblx0Y3JlYXRlRGVmYXVsdFRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVVdGlscy5jcmVhdGVEZWZhdWx0VGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyBhIHRleHR1cmUgb24gdGhlIEdQVSBmb3IgdGhlIGdpdmVuIHRleHR1cmUgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyLlxuXHQgKi9cblx0Y3JlYXRlVGV4dHVyZSggdGV4dHVyZSwgb3B0aW9ucyApIHtcblxuXHRcdHRoaXMudGV4dHVyZVV0aWxzLmNyZWF0ZVRleHR1cmUoIHRleHR1cmUsIG9wdGlvbnMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwbG9hZHMgdGhlIHVwZGF0ZWQgdGV4dHVyZSBkYXRhIHRvIHRoZSBHUFUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHR1cGRhdGVUZXh0dXJlKCB0ZXh0dXJlLCBvcHRpb25zICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlVXRpbHMudXBkYXRlVGV4dHVyZSggdGV4dHVyZSwgb3B0aW9ucyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIG1pcG1hcHMgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICovXG5cdGdlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApIHtcblxuXHRcdHRoaXMudGV4dHVyZVV0aWxzLmdlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIEdQVSBkYXRhIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZSBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKi9cblx0ZGVzdHJveVRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVVdGlscy5kZXN0cm95VGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0ZXh0dXJlIGRhdGEgYXMgYSB0eXBlZCBhcnJheS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlIHRvIGNvcHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgY29weSBvcmlnaW4uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgY29weSBvcmlnaW4uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIGNvcHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmYWNlSW5kZXggLSBUaGUgZmFjZSBpbmRleC5cblx0ICogQHJldHVybiB7UHJvbWlzZTxUeXBlZEFycmF5Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHR5cGVkIGFycmF5IHdoZW4gdGhlIGNvcHkgb3BlcmF0aW9uIGhhcyBmaW5pc2hlZC5cblx0ICovXG5cdGFzeW5jIGNvcHlUZXh0dXJlVG9CdWZmZXIoIHRleHR1cmUsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGZhY2VJbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLnRleHR1cmVVdGlscy5jb3B5VGV4dHVyZVRvQnVmZmVyKCB0ZXh0dXJlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBmYWNlSW5kZXggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGRvZXMgbm90aGluZyBzaW5jZSBXZWJHTCAyIGhhcyBubyBjb25jZXB0IG9mIHNhbXBsZXJzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBjcmVhdGUgdGhlIHNhbXBsZXIgZm9yLlxuXHQgKi9cblx0Y3JlYXRlU2FtcGxlciggLyp0ZXh0dXJlKi8gKSB7XG5cblx0XHQvL2NvbnNvbGUud2FybiggJ0Fic3RyYWN0IGNsYXNzLicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGRvZXMgbm90aGluZyBzaW5jZSBXZWJHTCAyIGhhcyBubyBjb25jZXB0IG9mIHNhbXBsZXJzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBkZXN0cm95IHRoZSBzYW1wbGVyIGZvci5cblx0ICovXG5cdGRlc3Ryb3lTYW1wbGVyKCAvKnRleHR1cmUqLyApIHt9XG5cblx0Ly8gbm9kZSBidWlsZGVyXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBub2RlIGJ1aWxkZXIgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gb2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QuXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKiBAcmV0dXJuIHtHTFNMTm9kZUJ1aWxkZXJ9IFRoZSBub2RlIGJ1aWxkZXIuXG5cdCAqL1xuXHRjcmVhdGVOb2RlQnVpbGRlciggb2JqZWN0LCByZW5kZXJlciApIHtcblxuXHRcdHJldHVybiBuZXcgR0xTTE5vZGVCdWlsZGVyKCBvYmplY3QsIHJlbmRlcmVyICk7XG5cblx0fVxuXG5cdC8vIHByb2dyYW1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHNoYWRlciBwcm9ncmFtIGZyb20gdGhlIGdpdmVuIHByb2dyYW1tYWJsZSBzdGFnZS5cblx0ICpcblx0ICogQHBhcmFtIHtQcm9ncmFtbWFibGVTdGFnZX0gcHJvZ3JhbSAtIFRoZSBwcm9ncmFtbWFibGUgc3RhZ2UuXG5cdCAqL1xuXHRjcmVhdGVQcm9ncmFtKCBwcm9ncmFtICkge1xuXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXHRcdGNvbnN0IHsgc3RhZ2UsIGNvZGUgfSA9IHByb2dyYW07XG5cblx0XHRjb25zdCBzaGFkZXIgPSBzdGFnZSA9PT0gJ2ZyYWdtZW50JyA/IGdsLmNyZWF0ZVNoYWRlciggZ2wuRlJBR01FTlRfU0hBREVSICkgOiBnbC5jcmVhdGVTaGFkZXIoIGdsLlZFUlRFWF9TSEFERVIgKTtcblxuXHRcdGdsLnNoYWRlclNvdXJjZSggc2hhZGVyLCBjb2RlICk7XG5cdFx0Z2wuY29tcGlsZVNoYWRlciggc2hhZGVyICk7XG5cblx0XHR0aGlzLnNldCggcHJvZ3JhbSwge1xuXHRcdFx0c2hhZGVyR1BVOiBzaGFkZXJcblx0XHR9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgc2hhZGVyIHByb2dyYW0gb2YgdGhlIGdpdmVuIHByb2dyYW1tYWJsZSBzdGFnZS5cblx0ICpcblx0ICogQHBhcmFtIHtQcm9ncmFtbWFibGVTdGFnZX0gcHJvZ3JhbSAtIFRoZSBwcm9ncmFtbWFibGUgc3RhZ2UuXG5cdCAqL1xuXHRkZXN0cm95UHJvZ3JhbSggcHJvZ3JhbSApIHtcblxuXHRcdHRoaXMuZGVsZXRlKCBwcm9ncmFtICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgcmVuZGVyIHBpcGVsaW5lIGZvciB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0FycmF5PFByb21pc2U+fSBwcm9taXNlcyAtIEFuIGFycmF5IG9mIGNvbXBpbGF0aW9uIHByb21pc2VzIHdoaWNoIGFyZSB1c2VkIGluIGBjb21waWxlQXN5bmMoKWAuXG5cdCAqL1xuXHRjcmVhdGVSZW5kZXJQaXBlbGluZSggcmVuZGVyT2JqZWN0LCBwcm9taXNlcyApIHtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblx0XHRjb25zdCBwaXBlbGluZSA9IHJlbmRlck9iamVjdC5waXBlbGluZTtcblxuXHRcdC8vIFByb2dyYW1cblxuXHRcdGNvbnN0IHsgZnJhZ21lbnRQcm9ncmFtLCB2ZXJ0ZXhQcm9ncmFtIH0gPSBwaXBlbGluZTtcblxuXHRcdGNvbnN0IHByb2dyYW1HUFUgPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cblx0XHRjb25zdCBmcmFnbWVudFNoYWRlciA9IHRoaXMuZ2V0KCBmcmFnbWVudFByb2dyYW0gKS5zaGFkZXJHUFU7XG5cdFx0Y29uc3QgdmVydGV4U2hhZGVyID0gdGhpcy5nZXQoIHZlcnRleFByb2dyYW0gKS5zaGFkZXJHUFU7XG5cblx0XHRnbC5hdHRhY2hTaGFkZXIoIHByb2dyYW1HUFUsIGZyYWdtZW50U2hhZGVyICk7XG5cdFx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtR1BVLCB2ZXJ0ZXhTaGFkZXIgKTtcblx0XHRnbC5saW5rUHJvZ3JhbSggcHJvZ3JhbUdQVSApO1xuXG5cdFx0dGhpcy5zZXQoIHBpcGVsaW5lLCB7XG5cdFx0XHRwcm9ncmFtR1BVLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHR2ZXJ0ZXhTaGFkZXJcblx0XHR9ICk7XG5cblx0XHRpZiAoIHByb21pc2VzICE9PSBudWxsICYmIHRoaXMucGFyYWxsZWwgKSB7XG5cblx0XHRcdGNvbnN0IHAgPSBuZXcgUHJvbWlzZSggKCByZXNvbHZlIC8qLCByZWplY3QqLyApID0+IHtcblxuXHRcdFx0XHRjb25zdCBwYXJhbGxlbCA9IHRoaXMucGFyYWxsZWw7XG5cdFx0XHRcdGNvbnN0IGNoZWNrU3RhdHVzID0gKCkgPT4ge1xuXG5cdFx0XHRcdFx0aWYgKCBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtR1BVLCBwYXJhbGxlbC5DT01QTEVUSU9OX1NUQVRVU19LSFIgKSApIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5fY29tcGxldGVDb21waWxlKCByZW5kZXJPYmplY3QsIHBpcGVsaW5lICk7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGNoZWNrU3RhdHVzICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRjaGVja1N0YXR1cygpO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHByb21pc2VzLnB1c2goIHAgKTtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fY29tcGxldGVDb21waWxlKCByZW5kZXJPYmplY3QsIHBpcGVsaW5lICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGb3JtYXRzIHRoZSBzb3VyY2UgY29kZSBvZiBlcnJvciBtZXNzYWdlcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyAtIFRoZSBjb2RlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZXJyb3JMaW5lIC0gVGhlIGVycm9yIGxpbmUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBjb2RlLlxuXHQgKi9cblx0X2hhbmRsZVNvdXJjZSggc3RyaW5nLCBlcnJvckxpbmUgKSB7XG5cblx0XHRjb25zdCBsaW5lcyA9IHN0cmluZy5zcGxpdCggJ1xcbicgKTtcblx0XHRjb25zdCBsaW5lczIgPSBbXTtcblxuXHRcdGNvbnN0IGZyb20gPSBNYXRoLm1heCggZXJyb3JMaW5lIC0gNiwgMCApO1xuXHRcdGNvbnN0IHRvID0gTWF0aC5taW4oIGVycm9yTGluZSArIDYsIGxpbmVzLmxlbmd0aCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSBmcm9tOyBpIDwgdG87IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGxpbmUgPSBpICsgMTtcblx0XHRcdGxpbmVzMi5wdXNoKCBgJHtsaW5lID09PSBlcnJvckxpbmUgPyAnPicgOiAnICd9ICR7bGluZX06ICR7bGluZXNbIGkgXX1gICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbGluZXMyLmpvaW4oICdcXG4nICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBzaGFkZXIgY29tcGlsYXRpb24gZXJyb3JzIGZyb20gdGhlIGluZm8gbG9nLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1dlYkdMMlJlbmRlcmluZ0NvbnRleHR9IGdsIC0gVGhlIHJlbmRlcmluZyBjb250ZXh0LlxuXHQgKiBAcGFyYW0ge1dlYkdMU2hhZGVyfSBzaGFkZXIgLSBUaGUgV2ViR0wgc2hhZGVyIG9iamVjdC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgc2hhZGVyIHR5cGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHNoYWRlciBlcnJvcnMuXG5cdCAqL1xuXHRfZ2V0U2hhZGVyRXJyb3JzKCBnbCwgc2hhZGVyLCB0eXBlICkge1xuXG5cdFx0Y29uc3Qgc3RhdHVzID0gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKCBzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTICk7XG5cdFx0Y29uc3QgZXJyb3JzID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggc2hhZGVyICkudHJpbSgpO1xuXG5cdFx0aWYgKCBzdGF0dXMgJiYgZXJyb3JzID09PSAnJyApIHJldHVybiAnJztcblxuXHRcdGNvbnN0IGVycm9yTWF0Y2hlcyA9IC9FUlJPUjogMDooXFxkKykvLmV4ZWMoIGVycm9ycyApO1xuXHRcdGlmICggZXJyb3JNYXRjaGVzICkge1xuXG5cdFx0XHRjb25zdCBlcnJvckxpbmUgPSBwYXJzZUludCggZXJyb3JNYXRjaGVzWyAxIF0gKTtcblx0XHRcdHJldHVybiB0eXBlLnRvVXBwZXJDYXNlKCkgKyAnXFxuXFxuJyArIGVycm9ycyArICdcXG5cXG4nICsgdGhpcy5faGFuZGxlU291cmNlKCBnbC5nZXRTaGFkZXJTb3VyY2UoIHNoYWRlciApLCBlcnJvckxpbmUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBlcnJvcnM7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBMb2dzIHNoYWRlciBjb21waWxhdGlvbiBlcnJvcnMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7V2ViR0xQcm9ncmFtfSBwcm9ncmFtR1BVIC0gVGhlIFdlYkdMIHByb2dyYW0uXG5cdCAqIEBwYXJhbSB7V2ViR0xTaGFkZXJ9IGdsRnJhZ21lbnRTaGFkZXIgLSBUaGUgZnJhZ21lbnQgc2hhZGVyIGFzIGEgbmF0aXZlIFdlYkdMIHNoYWRlciBvYmplY3QuXG5cdCAqIEBwYXJhbSB7V2ViR0xTaGFkZXJ9IGdsVmVydGV4U2hhZGVyIC0gVGhlIHZlcnRleCBzaGFkZXIgYXMgYSBuYXRpdmUgV2ViR0wgc2hhZGVyIG9iamVjdC5cblx0ICovXG5cdF9sb2dQcm9ncmFtRXJyb3IoIHByb2dyYW1HUFUsIGdsRnJhZ21lbnRTaGFkZXIsIGdsVmVydGV4U2hhZGVyICkge1xuXG5cdFx0aWYgKCB0aGlzLnJlbmRlcmVyLmRlYnVnLmNoZWNrU2hhZGVyRXJyb3JzICkge1xuXG5cdFx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1Mb2cgPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyggcHJvZ3JhbUdQVSApLnRyaW0oKTtcblxuXHRcdFx0aWYgKCBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtR1BVLCBnbC5MSU5LX1NUQVRVUyApID09PSBmYWxzZSApIHtcblxuXG5cdFx0XHRcdGlmICggdHlwZW9mIHRoaXMucmVuZGVyZXIuZGVidWcub25TaGFkZXJFcnJvciA9PT0gJ2Z1bmN0aW9uJyApIHtcblxuXHRcdFx0XHRcdHRoaXMucmVuZGVyZXIuZGVidWcub25TaGFkZXJFcnJvciggZ2wsIHByb2dyYW1HUFUsIGdsVmVydGV4U2hhZGVyLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGRlZmF1bHQgZXJyb3IgcmVwb3J0aW5nXG5cblx0XHRcdFx0XHRjb25zdCB2ZXJ0ZXhFcnJvcnMgPSB0aGlzLl9nZXRTaGFkZXJFcnJvcnMoIGdsLCBnbFZlcnRleFNoYWRlciwgJ3ZlcnRleCcgKTtcblx0XHRcdFx0XHRjb25zdCBmcmFnbWVudEVycm9ycyA9IHRoaXMuX2dldFNoYWRlckVycm9ycyggZ2wsIGdsRnJhZ21lbnRTaGFkZXIsICdmcmFnbWVudCcgKTtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdFx0XHQnVEhSRUUuV2ViR0xQcm9ncmFtOiBTaGFkZXIgRXJyb3IgJyArIGdsLmdldEVycm9yKCkgKyAnIC0gJyArXG5cdFx0XHRcdFx0XHQnVkFMSURBVEVfU1RBVFVTICcgKyBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtR1BVLCBnbC5WQUxJREFURV9TVEFUVVMgKSArICdcXG5cXG4nICtcblx0XHRcdFx0XHRcdCdQcm9ncmFtIEluZm8gTG9nOiAnICsgcHJvZ3JhbUxvZyArICdcXG4nICtcblx0XHRcdFx0XHRcdHZlcnRleEVycm9ycyArICdcXG4nICtcblx0XHRcdFx0XHRcdGZyYWdtZW50RXJyb3JzXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHByb2dyYW1Mb2cgIT09ICcnICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbTogUHJvZ3JhbSBJbmZvIExvZzonLCBwcm9ncmFtTG9nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXBsZXRlcyB0aGUgc2hhZGVyIHByb2dyYW0gc2V0dXAgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QuXG5cdCAqIEBwYXJhbSB7UmVuZGVyUGlwZWxpbmV9IHBpcGVsaW5lIC0gVGhlIHJlbmRlciBwaXBlbGluZS5cblx0ICovXG5cdF9jb21wbGV0ZUNvbXBpbGUoIHJlbmRlck9iamVjdCwgcGlwZWxpbmUgKSB7XG5cblx0XHRjb25zdCB7IHN0YXRlLCBnbCB9ID0gdGhpcztcblx0XHRjb25zdCBwaXBlbGluZURhdGEgPSB0aGlzLmdldCggcGlwZWxpbmUgKTtcblx0XHRjb25zdCB7IHByb2dyYW1HUFUsIGZyYWdtZW50U2hhZGVyLCB2ZXJ0ZXhTaGFkZXIgfSA9IHBpcGVsaW5lRGF0YTtcblxuXHRcdGlmICggZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbUdQVSwgZ2wuTElOS19TVEFUVVMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHRoaXMuX2xvZ1Byb2dyYW1FcnJvciggcHJvZ3JhbUdQVSwgZnJhZ21lbnRTaGFkZXIsIHZlcnRleFNoYWRlciApO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUudXNlUHJvZ3JhbSggcHJvZ3JhbUdQVSApO1xuXG5cdFx0Ly8gQmluZGluZ3NcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gcmVuZGVyT2JqZWN0LmdldEJpbmRpbmdzKCk7XG5cblx0XHR0aGlzLl9zZXR1cEJpbmRpbmdzKCBiaW5kaW5ncywgcHJvZ3JhbUdQVSApO1xuXG5cdFx0Ly9cblxuXHRcdHRoaXMuc2V0KCBwaXBlbGluZSwge1xuXHRcdFx0cHJvZ3JhbUdQVVxuXHRcdH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBjb21wdXRlIHBpcGVsaW5lIGZvciB0aGUgZ2l2ZW4gY29tcHV0ZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0NvbXB1dGVQaXBlbGluZX0gY29tcHV0ZVBpcGVsaW5lIC0gVGhlIGNvbXB1dGUgcGlwZWxpbmUuXG5cdCAqIEBwYXJhbSB7QXJyYXk8QmluZEdyb3VwPn0gYmluZGluZ3MgLSBUaGUgYmluZGluZ3MuXG5cdCAqL1xuXHRjcmVhdGVDb21wdXRlUGlwZWxpbmUoIGNvbXB1dGVQaXBlbGluZSwgYmluZGluZ3MgKSB7XG5cblx0XHRjb25zdCB7IHN0YXRlLCBnbCB9ID0gdGhpcztcblxuXHRcdC8vIFByb2dyYW1cblxuXHRcdGNvbnN0IGZyYWdtZW50UHJvZ3JhbSA9IHtcblx0XHRcdHN0YWdlOiAnZnJhZ21lbnQnLFxuXHRcdFx0Y29kZTogJyN2ZXJzaW9uIDMwMCBlc1xcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG52b2lkIG1haW4oKSB7fSdcblx0XHR9O1xuXG5cdFx0dGhpcy5jcmVhdGVQcm9ncmFtKCBmcmFnbWVudFByb2dyYW0gKTtcblxuXHRcdGNvbnN0IHsgY29tcHV0ZVByb2dyYW0gfSA9IGNvbXB1dGVQaXBlbGluZTtcblxuXHRcdGNvbnN0IHByb2dyYW1HUFUgPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cblx0XHRjb25zdCBmcmFnbWVudFNoYWRlciA9IHRoaXMuZ2V0KCBmcmFnbWVudFByb2dyYW0gKS5zaGFkZXJHUFU7XG5cdFx0Y29uc3QgdmVydGV4U2hhZGVyID0gdGhpcy5nZXQoIGNvbXB1dGVQcm9ncmFtICkuc2hhZGVyR1BVO1xuXG5cdFx0Y29uc3QgdHJhbnNmb3JtcyA9IGNvbXB1dGVQcm9ncmFtLnRyYW5zZm9ybXM7XG5cblx0XHRjb25zdCB0cmFuc2Zvcm1WYXJ5aW5nTmFtZXMgPSBbXTtcblx0XHRjb25zdCB0cmFuc2Zvcm1BdHRyaWJ1dGVOb2RlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHRyYW5zZm9ybSA9IHRyYW5zZm9ybXNbIGkgXTtcblxuXHRcdFx0dHJhbnNmb3JtVmFyeWluZ05hbWVzLnB1c2goIHRyYW5zZm9ybS52YXJ5aW5nTmFtZSApO1xuXHRcdFx0dHJhbnNmb3JtQXR0cmlidXRlTm9kZXMucHVzaCggdHJhbnNmb3JtLmF0dHJpYnV0ZU5vZGUgKTtcblxuXHRcdH1cblxuXHRcdGdsLmF0dGFjaFNoYWRlciggcHJvZ3JhbUdQVSwgZnJhZ21lbnRTaGFkZXIgKTtcblx0XHRnbC5hdHRhY2hTaGFkZXIoIHByb2dyYW1HUFUsIHZlcnRleFNoYWRlciApO1xuXG5cdFx0Z2wudHJhbnNmb3JtRmVlZGJhY2tWYXJ5aW5ncyhcblx0XHRcdHByb2dyYW1HUFUsXG5cdFx0XHR0cmFuc2Zvcm1WYXJ5aW5nTmFtZXMsXG5cdFx0XHRnbC5TRVBBUkFURV9BVFRSSUJTXG5cdFx0KTtcblxuXHRcdGdsLmxpbmtQcm9ncmFtKCBwcm9ncmFtR1BVICk7XG5cblx0XHRpZiAoIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW1HUFUsIGdsLkxJTktfU1RBVFVTICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aGlzLl9sb2dQcm9ncmFtRXJyb3IoIHByb2dyYW1HUFUsIGZyYWdtZW50U2hhZGVyLCB2ZXJ0ZXhTaGFkZXIgKTtcblxuXG5cdFx0fVxuXG5cdFx0c3RhdGUudXNlUHJvZ3JhbSggcHJvZ3JhbUdQVSApO1xuXG5cdFx0Ly8gQmluZGluZ3NcblxuXHRcdHRoaXMuX3NldHVwQmluZGluZ3MoIGJpbmRpbmdzLCBwcm9ncmFtR1BVICk7XG5cblx0XHRjb25zdCBhdHRyaWJ1dGVOb2RlcyA9IGNvbXB1dGVQcm9ncmFtLmF0dHJpYnV0ZXM7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IFtdO1xuXHRcdGNvbnN0IHRyYW5zZm9ybUJ1ZmZlcnMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGF0dHJpYnV0ZU5vZGVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlTm9kZXNbIGkgXS5ub2RlLmF0dHJpYnV0ZTtcblxuXHRcdFx0YXR0cmlidXRlcy5wdXNoKCBhdHRyaWJ1dGUgKTtcblxuXHRcdFx0aWYgKCAhIHRoaXMuaGFzKCBhdHRyaWJ1dGUgKSApIHRoaXMuYXR0cmlidXRlVXRpbHMuY3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGdsLkFSUkFZX0JVRkZFUiApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdHJhbnNmb3JtQXR0cmlidXRlTm9kZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSB0cmFuc2Zvcm1BdHRyaWJ1dGVOb2Rlc1sgaSBdLmF0dHJpYnV0ZTtcblxuXHRcdFx0aWYgKCAhIHRoaXMuaGFzKCBhdHRyaWJ1dGUgKSApIHRoaXMuYXR0cmlidXRlVXRpbHMuY3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGdsLkFSUkFZX0JVRkZFUiApO1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVEYXRhID0gdGhpcy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHR0cmFuc2Zvcm1CdWZmZXJzLnB1c2goIGF0dHJpYnV0ZURhdGEgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR0aGlzLnNldCggY29tcHV0ZVBpcGVsaW5lLCB7XG5cdFx0XHRwcm9ncmFtR1BVLFxuXHRcdFx0dHJhbnNmb3JtQnVmZmVycyxcblx0XHRcdGF0dHJpYnV0ZXNcblx0XHR9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGJpbmRpbmdzIGZyb20gdGhlIGdpdmVuIGJpbmQgZ3JvdXAgZGVmaW5pdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtCaW5kR3JvdXB9IGJpbmRHcm91cCAtIFRoZSBiaW5kIGdyb3VwLlxuXHQgKiBAcGFyYW0ge0FycmF5PEJpbmRHcm91cD59IGJpbmRpbmdzIC0gQXJyYXkgb2YgYmluZCBncm91cHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjYWNoZUluZGV4IC0gVGhlIGNhY2hlIGluZGV4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmVyc2lvbiAtIFRoZSB2ZXJzaW9uLlxuXHQgKi9cblx0Y3JlYXRlQmluZGluZ3MoIGJpbmRHcm91cCwgYmluZGluZ3MgLyosIGNhY2hlSW5kZXgsIHZlcnNpb24qLyApIHtcblxuXHRcdGlmICggdGhpcy5fa25vd25CaW5kaW5ncy5oYXMoIGJpbmRpbmdzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aGlzLl9rbm93bkJpbmRpbmdzLmFkZCggYmluZGluZ3MgKTtcblxuXHRcdFx0bGV0IHVuaWZvcm1CdWZmZXJzID0gMDtcblx0XHRcdGxldCB0ZXh0dXJlcyA9IDA7XG5cblx0XHRcdGZvciAoIGNvbnN0IGJpbmRHcm91cCBvZiBiaW5kaW5ncyApIHtcblxuXHRcdFx0XHR0aGlzLnNldCggYmluZEdyb3VwLCB7XG5cdFx0XHRcdFx0dGV4dHVyZXM6IHRleHR1cmVzLFxuXHRcdFx0XHRcdHVuaWZvcm1CdWZmZXJzOiB1bmlmb3JtQnVmZmVyc1xuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Zm9yICggY29uc3QgYmluZGluZyBvZiBiaW5kR3JvdXAuYmluZGluZ3MgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGJpbmRpbmcuaXNVbmlmb3JtQnVmZmVyICkgdW5pZm9ybUJ1ZmZlcnMgKys7XG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nLmlzU2FtcGxlZFRleHR1cmUgKSB0ZXh0dXJlcyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlQmluZGluZ3MoIGJpbmRHcm91cCwgYmluZGluZ3MgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGdpdmVuIGJpbmQgZ3JvdXAgZGVmaW5pdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtCaW5kR3JvdXB9IGJpbmRHcm91cCAtIFRoZSBiaW5kIGdyb3VwLlxuXHQgKiBAcGFyYW0ge0FycmF5PEJpbmRHcm91cD59IGJpbmRpbmdzIC0gQXJyYXkgb2YgYmluZCBncm91cHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjYWNoZUluZGV4IC0gVGhlIGNhY2hlIGluZGV4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmVyc2lvbiAtIFRoZSB2ZXJzaW9uLlxuXHQgKi9cblx0dXBkYXRlQmluZGluZ3MoIGJpbmRHcm91cCAvKiwgYmluZGluZ3MsIGNhY2hlSW5kZXgsIHZlcnNpb24qLyApIHtcblxuXHRcdGNvbnN0IHsgZ2wgfSA9IHRoaXM7XG5cblx0XHRjb25zdCBiaW5kR3JvdXBEYXRhID0gdGhpcy5nZXQoIGJpbmRHcm91cCApO1xuXG5cdFx0bGV0IGkgPSBiaW5kR3JvdXBEYXRhLnVuaWZvcm1CdWZmZXJzO1xuXHRcdGxldCB0ID0gYmluZEdyb3VwRGF0YS50ZXh0dXJlcztcblxuXHRcdGZvciAoIGNvbnN0IGJpbmRpbmcgb2YgYmluZEdyb3VwLmJpbmRpbmdzICkge1xuXG5cdFx0XHRpZiAoIGJpbmRpbmcuaXNVbmlmb3Jtc0dyb3VwIHx8IGJpbmRpbmcuaXNVbmlmb3JtQnVmZmVyICkge1xuXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBiaW5kaW5nLmJ1ZmZlcjtcblx0XHRcdFx0Y29uc3QgYnVmZmVyR1BVID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHRcdFx0Z2wuYmluZEJ1ZmZlciggZ2wuVU5JRk9STV9CVUZGRVIsIGJ1ZmZlckdQVSApO1xuXHRcdFx0XHRnbC5idWZmZXJEYXRhKCBnbC5VTklGT1JNX0JVRkZFUiwgZGF0YSwgZ2wuRFlOQU1JQ19EUkFXICk7XG5cblx0XHRcdFx0dGhpcy5zZXQoIGJpbmRpbmcsIHtcblx0XHRcdFx0XHRpbmRleDogaSArKyxcblx0XHRcdFx0XHRidWZmZXJHUFVcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBiaW5kaW5nLmlzU2FtcGxlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0Y29uc3QgeyB0ZXh0dXJlR1BVLCBnbFRleHR1cmVUeXBlIH0gPSB0aGlzLmdldCggYmluZGluZy50ZXh0dXJlICk7XG5cblx0XHRcdFx0dGhpcy5zZXQoIGJpbmRpbmcsIHtcblx0XHRcdFx0XHRpbmRleDogdCArKyxcblx0XHRcdFx0XHR0ZXh0dXJlR1BVLFxuXHRcdFx0XHRcdGdsVGV4dHVyZVR5cGVcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGEgYnVmZmVyIGJpbmRpbmcuXG5cdCAqXG5cdCAqICBAcGFyYW0ge0J1ZmZlcn0gYmluZGluZyAtIFRoZSBidWZmZXIgYmluZGluZyB0byB1cGRhdGUuXG5cdCAqL1xuXHR1cGRhdGVCaW5kaW5nKCBiaW5kaW5nICkge1xuXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xuXG5cdFx0aWYgKCBiaW5kaW5nLmlzVW5pZm9ybXNHcm91cCB8fCBiaW5kaW5nLmlzVW5pZm9ybUJ1ZmZlciApIHtcblxuXHRcdFx0Y29uc3QgYmluZGluZ0RhdGEgPSB0aGlzLmdldCggYmluZGluZyApO1xuXHRcdFx0Y29uc3QgYnVmZmVyR1BVID0gYmluZGluZ0RhdGEuYnVmZmVyR1BVO1xuXHRcdFx0Y29uc3QgZGF0YSA9IGJpbmRpbmcuYnVmZmVyO1xuXG5cdFx0XHRnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgYnVmZmVyR1BVICk7XG5cdFx0XHRnbC5idWZmZXJEYXRhKCBnbC5VTklGT1JNX0JVRkZFUiwgZGF0YSwgZ2wuRFlOQU1JQ19EUkFXICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGF0dHJpYnV0ZXNcblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgR1BVIGJ1ZmZlciBvZiBhbiBpbmRleGVkIHNoYWRlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgaW5kZXhlZCBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0Y3JlYXRlSW5kZXhBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblxuXHRcdHRoaXMuYXR0cmlidXRlVXRpbHMuY3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBHUFUgYnVmZmVyIG9mIGEgc2hhZGVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0Y3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzKCBhdHRyaWJ1dGUgKSApIHJldHVybjtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblxuXHRcdHRoaXMuYXR0cmlidXRlVXRpbHMuY3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGdsLkFSUkFZX0JVRkZFUiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgR1BVIGJ1ZmZlciBvZiBhIHN0b3JhZ2UgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRjcmVhdGVTdG9yYWdlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzKCBhdHRyaWJ1dGUgKSApIHJldHVybjtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblxuXHRcdHRoaXMuYXR0cmlidXRlVXRpbHMuY3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGdsLkFSUkFZX0JVRkZFUiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgR1BVIGJ1ZmZlciBvZiBhIHNoYWRlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZSB0byB1cGRhdGUuXG5cdCAqL1xuXHR1cGRhdGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdHRoaXMuYXR0cmlidXRlVXRpbHMudXBkYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIHRoZSBHUFUgYnVmZmVyIG9mIGEgc2hhZGVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlIHRvIGRlc3Ryb3kuXG5cdCAqL1xuXHRkZXN0cm95QXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHR0aGlzLmF0dHJpYnV0ZVV0aWxzLmRlc3Ryb3lBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBmZWF0dXJlIGlzIHN1cHBvcnRlZCAgYnkgdGhlIGJhY2tlbmQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGZlYXR1cmUncyBuYW1lLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBmZWF0dXJlIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqL1xuXHRoYXNGZWF0dXJlKCBuYW1lICkge1xuXG5cdFx0Y29uc3Qga2V5c01hdGNoaW5nID0gT2JqZWN0LmtleXMoIEdMRmVhdHVyZU5hbWUgKS5maWx0ZXIoIGtleSA9PiBHTEZlYXR1cmVOYW1lWyBrZXkgXSA9PT0gbmFtZSApO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGtleXNNYXRjaGluZy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9ucy5oYXMoIGtleXNNYXRjaGluZ1sgaSBdICkgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG1heGltdW0gYW5pc290cm9weSB0ZXh0dXJlIGZpbHRlcmluZyB2YWx1ZS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgbWF4aW11bSBhbmlzb3Ryb3B5IHRleHR1cmUgZmlsdGVyaW5nIHZhbHVlLlxuXHQgKi9cblx0Z2V0TWF4QW5pc290cm9weSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmNhcGFiaWxpdGllcy5nZXRNYXhBbmlzb3Ryb3B5KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgZGF0YSBvZiB0aGUgZ2l2ZW4gc291cmNlIHRleHR1cmUgdG8gdGhlIGdpdmVuIGRlc3RpbmF0aW9uIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gc3JjVGV4dHVyZSAtIFRoZSBzb3VyY2UgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtUZXh0dXJlfSBkc3RUZXh0dXJlIC0gVGhlIGRlc3RpbmF0aW9uIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7PyhCb3gzfEJveDIpfSBbc3JjUmVnaW9uPW51bGxdIC0gVGhlIHJlZ2lvbiBvZiB0aGUgc291cmNlIHRleHR1cmUgdG8gY29weS5cblx0ICogQHBhcmFtIHs/KFZlY3RvcjJ8VmVjdG9yMyl9IFtkc3RQb3NpdGlvbj1udWxsXSAtIFRoZSBkZXN0aW5hdGlvbiBwb3NpdGlvbiBvZiB0aGUgY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzcmNMZXZlbD0wXSAtIFRoZSBzb3VyY2UgbWlwIGxldmVsIHRvIGNvcHkgZnJvbS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkc3RMZXZlbD0wXSAtIFRoZSBkZXN0aW5hdGlvbiBtaXAgbGV2ZWwgdG8gY29weSB0by5cblx0ICovXG5cdGNvcHlUZXh0dXJlVG9UZXh0dXJlKCBzcmNUZXh0dXJlLCBkc3RUZXh0dXJlLCBzcmNSZWdpb24gPSBudWxsLCBkc3RQb3NpdGlvbiA9IG51bGwsIHNyY0xldmVsID0gMCwgZHN0TGV2ZWwgPSAwICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlVXRpbHMuY29weVRleHR1cmVUb1RleHR1cmUoIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIHNyY1JlZ2lvbiwgZHN0UG9zaXRpb24sIHNyY0xldmVsLCBkc3RMZXZlbCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIHRoZSBjdXJyZW50IGJvdW5kIGZyYW1lYnVmZmVyIHRvIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgZGVzdGluYXRpb24gdGV4dHVyZS5cblx0ICogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjR9IHJlY3RhbmdsZSAtIEEgZm91ciBkaW1lbnNpb25hbCB2ZWN0b3IgZGVmaW5pbmcgdGhlIG9yaWdpbiBhbmQgZGltZW5zaW9uIG9mIHRoZSBjb3B5LlxuXHQgKi9cblx0Y29weUZyYW1lYnVmZmVyVG9UZXh0dXJlKCB0ZXh0dXJlLCByZW5kZXJDb250ZXh0LCByZWN0YW5nbGUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVVdGlscy5jb3B5RnJhbWVidWZmZXJUb1RleHR1cmUoIHRleHR1cmUsIHJlbmRlckNvbnRleHQsIHJlY3RhbmdsZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29uZmlndXJlcyB0aGUgYWN0aXZlIGZyYW1lYnVmZmVyIGZyb20gdGhlIGdpdmVuIHJlbmRlciBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IGRlc2NyaXB0b3IgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqL1xuXHRfc2V0RnJhbWVidWZmZXIoIGRlc2NyaXB0b3IgKSB7XG5cblx0XHRjb25zdCB7IGdsLCBzdGF0ZSB9ID0gdGhpcztcblxuXHRcdGxldCBjdXJyZW50RnJhbWVCdWZmZXIgPSBudWxsO1xuXG5cdFx0aWYgKCBkZXNjcmlwdG9yLnRleHR1cmVzICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSBkZXNjcmlwdG9yLnJlbmRlclRhcmdldDtcblx0XHRcdGNvbnN0IHJlbmRlclRhcmdldENvbnRleHREYXRhID0gdGhpcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdFx0Y29uc3QgeyBzYW1wbGVzLCBkZXB0aEJ1ZmZlciwgc3RlbmNpbEJ1ZmZlciB9ID0gcmVuZGVyVGFyZ2V0O1xuXG5cdFx0XHRjb25zdCBpc0N1YmUgPSByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPT09IHRydWU7XG5cdFx0XHRjb25zdCBpc1JlbmRlclRhcmdldDNEID0gcmVuZGVyVGFyZ2V0LmlzUmVuZGVyVGFyZ2V0M0QgPT09IHRydWU7XG5cdFx0XHRjb25zdCBpc1JlbmRlclRhcmdldEFycmF5ID0gcmVuZGVyVGFyZ2V0LmlzUmVuZGVyVGFyZ2V0QXJyYXkgPT09IHRydWU7XG5cdFx0XHRjb25zdCBpc1hSUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPT09IHRydWU7XG5cdFx0XHRjb25zdCBoYXNFeHRlcm5hbFRleHR1cmVzID0gKCBpc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICYmIHJlbmRlclRhcmdldC5oYXNFeHRlcm5hbFRleHR1cmVzID09PSB0cnVlICk7XG5cblx0XHRcdGxldCBtc2FhRmIgPSByZW5kZXJUYXJnZXRDb250ZXh0RGF0YS5tc2FhRnJhbWVCdWZmZXI7XG5cdFx0XHRsZXQgZGVwdGhSZW5kZXJidWZmZXIgPSByZW5kZXJUYXJnZXRDb250ZXh0RGF0YS5kZXB0aFJlbmRlcmJ1ZmZlcjtcblx0XHRcdGNvbnN0IG11bHRpc2FtcGxlZFJUVEV4dCA9IHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICk7XG5cdFx0XHRjb25zdCB1c2VNdWx0aXNhbXBsZWRSVFQgPSB0aGlzLl91c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRjb25zdCBjYWNoZUtleSA9IGdldENhY2hlS2V5KCBkZXNjcmlwdG9yICk7XG5cblx0XHRcdGxldCBmYjtcblxuXHRcdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0Q29udGV4dERhdGEuY3ViZUZyYW1lYnVmZmVycyB8fCAoIHJlbmRlclRhcmdldENvbnRleHREYXRhLmN1YmVGcmFtZWJ1ZmZlcnMgPSB7fSApO1xuXG5cdFx0XHRcdGZiID0gcmVuZGVyVGFyZ2V0Q29udGV4dERhdGEuY3ViZUZyYW1lYnVmZmVyc1sgY2FjaGVLZXkgXTtcblxuXHRcdFx0fSBlbHNlIGlmICggaXNYUlJlbmRlclRhcmdldCAmJiBoYXNFeHRlcm5hbFRleHR1cmVzID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRmYiA9IHRoaXMuX3hyRnJhbWVidWZmZXI7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0Q29udGV4dERhdGEuZnJhbWVidWZmZXJzIHx8ICggcmVuZGVyVGFyZ2V0Q29udGV4dERhdGEuZnJhbWVidWZmZXJzID0ge30gKTtcblxuXHRcdFx0XHRmYiA9IHJlbmRlclRhcmdldENvbnRleHREYXRhLmZyYW1lYnVmZmVyc1sgY2FjaGVLZXkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGZiID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZmIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggZ2wuRlJBTUVCVUZGRVIsIGZiICk7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZXMgPSBkZXNjcmlwdG9yLnRleHR1cmVzO1xuXG5cdFx0XHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0Q29udGV4dERhdGEuY3ViZUZyYW1lYnVmZmVyc1sgY2FjaGVLZXkgXSA9IGZiO1xuXG5cdFx0XHRcdFx0Y29uc3QgeyB0ZXh0dXJlR1BVIH0gPSB0aGlzLmdldCggdGV4dHVyZXNbIDAgXSApO1xuXG5cdFx0XHRcdFx0Y29uc3QgY3ViZUZhY2UgPSB0aGlzLnJlbmRlcmVyLl9hY3RpdmVDdWJlRmFjZTtcblxuXHRcdFx0XHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGN1YmVGYWNlLCB0ZXh0dXJlR1BVLCAwICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldENvbnRleHREYXRhLmZyYW1lYnVmZmVyc1sgY2FjaGVLZXkgXSA9IGZiO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlID0gdGV4dHVyZXNbIGkgXTtcblx0XHRcdFx0XHRcdGNvbnN0IHRleHR1cmVEYXRhID0gdGhpcy5nZXQoIHRleHR1cmUgKTtcblx0XHRcdFx0XHRcdHRleHR1cmVEYXRhLnJlbmRlclRhcmdldCA9IGRlc2NyaXB0b3IucmVuZGVyVGFyZ2V0O1xuXHRcdFx0XHRcdFx0dGV4dHVyZURhdGEuY2FjaGVLZXkgPSBjYWNoZUtleTsgLy8gcmVxdWlyZWQgZm9yIGNvcHlUZXh0dXJlVG9UZXh0dXJlKClcblxuXHRcdFx0XHRcdFx0Y29uc3QgYXR0YWNobWVudCA9IGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaTtcblxuXHRcdFx0XHRcdFx0aWYgKCBpc1JlbmRlclRhcmdldDNEIHx8IGlzUmVuZGVyVGFyZ2V0QXJyYXkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgbGF5ZXIgPSB0aGlzLnJlbmRlcmVyLl9hY3RpdmVDdWJlRmFjZTtcblxuXHRcdFx0XHRcdFx0XHRnbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllciggZ2wuRlJBTUVCVUZGRVIsIGF0dGFjaG1lbnQsIHRleHR1cmVEYXRhLnRleHR1cmVHUFUsIDAsIGxheWVyICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQuZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCggZ2wuRlJBTUVCVUZGRVIsIGF0dGFjaG1lbnQsIGdsLlRFWFRVUkVfMkQsIHRleHR1cmVEYXRhLnRleHR1cmVHUFUsIDAsIHNhbXBsZXMgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIGdsLkZSQU1FQlVGRkVSLCBhdHRhY2htZW50LCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlRGF0YS50ZXh0dXJlR1BVLCAwICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzdGF0ZS5kcmF3QnVmZmVycyggZGVzY3JpcHRvciwgZmIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNYUlJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRjb25zdCByZW5kZXJidWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblx0XHRcdFx0XHR0aGlzLnRleHR1cmVVdGlscy5zZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlcmJ1ZmZlciwgZGVzY3JpcHRvciwgMCwgdXNlTXVsdGlzYW1wbGVkUlRUICk7XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0Q29udGV4dERhdGEueHJEZXB0aFJlbmRlcmJ1ZmZlciA9IHJlbmRlcmJ1ZmZlcjtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBkZXNjcmlwdG9yLmRlcHRoVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdGV4dHVyZURhdGEgPSB0aGlzLmdldCggZGVzY3JpcHRvci5kZXB0aFRleHR1cmUgKTtcblx0XHRcdFx0XHRcdGNvbnN0IGRlcHRoU3R5bGUgPSBzdGVuY2lsQnVmZmVyID8gZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogZ2wuREVQVEhfQVRUQUNITUVOVDtcblx0XHRcdFx0XHRcdHRleHR1cmVEYXRhLnJlbmRlclRhcmdldCA9IGRlc2NyaXB0b3IucmVuZGVyVGFyZ2V0O1xuXHRcdFx0XHRcdFx0dGV4dHVyZURhdGEuY2FjaGVLZXkgPSBjYWNoZUtleTsgLy8gcmVxdWlyZWQgZm9yIGNvcHlUZXh0dXJlVG9UZXh0dXJlKClcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQgKSB7XG5cblx0XHRcdFx0XHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LmZyYW1lYnVmZmVyVGV4dHVyZTJETXVsdGlzYW1wbGVFWFQoIGdsLkZSQU1FQlVGRkVSLCBkZXB0aFN0eWxlLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlRGF0YS50ZXh0dXJlR1BVLCAwLCBzYW1wbGVzICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIGdsLkZSQU1FQlVGRkVSLCBkZXB0aFN0eWxlLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlRGF0YS50ZXh0dXJlR1BVLCAwICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gcmViaW5kIGV4dGVybmFsIFhSIHRleHR1cmVzXG5cblx0XHRcdFx0aWYgKCBpc1hSUmVuZGVyVGFyZ2V0ICYmIGhhc0V4dGVybmFsVGV4dHVyZXMgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLkZSQU1FQlVGRkVSLCBmYiApO1xuXG5cdFx0XHRcdFx0Ly8gcmViaW5kIGNvbG9yXG5cblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlRGF0YSA9IHRoaXMuZ2V0KCBkZXNjcmlwdG9yLnRleHR1cmVzWyAwIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUICkge1xuXG5cdFx0XHRcdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQuZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCggZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlRGF0YS50ZXh0dXJlR1BVLCAwLCBzYW1wbGVzICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlRGF0YS50ZXh0dXJlR1BVLCAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyByZWJpbmQgZGVwdGhcblxuXHRcdFx0XHRcdGNvbnN0IGRlcHRoU3R5bGUgPSBzdGVuY2lsQnVmZmVyID8gZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogZ2wuREVQVEhfQVRUQUNITUVOVDtcblxuXHRcdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmF1dG9BbGxvY2F0ZURlcHRoQnVmZmVyID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCByZW5kZXJidWZmZXIgPSByZW5kZXJUYXJnZXRDb250ZXh0RGF0YS54ckRlcHRoUmVuZGVyYnVmZmVyO1xuXHRcdFx0XHRcdFx0Z2wuYmluZFJlbmRlcmJ1ZmZlciggZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblx0XHRcdFx0XHRcdGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCBnbC5GUkFNRUJVRkZFUiwgZGVwdGhTdHlsZSwgZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHRleHR1cmVEYXRhID0gdGhpcy5nZXQoIGRlc2NyaXB0b3IuZGVwdGhUZXh0dXJlICk7XG5cblx0XHRcdFx0XHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUICkge1xuXG5cdFx0XHRcdFx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5mcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUKCBnbC5GUkFNRUJVRkZFUiwgZGVwdGhTdHlsZSwgZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZURhdGEudGV4dHVyZUdQVSwgMCwgc2FtcGxlcyApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBnbC5GUkFNRUJVRkZFUiwgZGVwdGhTdHlsZSwgZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZURhdGEudGV4dHVyZUdQVSwgMCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2FtcGxlcyA+IDAgJiYgdXNlTXVsdGlzYW1wbGVkUlRUID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRpZiAoIG1zYWFGYiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgaW52YWxpZGF0aW9uQXJyYXkgPSBbXTtcblxuXHRcdFx0XHRcdG1zYWFGYiA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLkZSQU1FQlVGRkVSLCBtc2FhRmIgKTtcblxuXHRcdFx0XHRcdGNvbnN0IG1zYWFSZW5kZXJidWZmZXJzID0gW107XG5cblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlcyA9IGRlc2NyaXB0b3IudGV4dHVyZXM7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1zYWFSZW5kZXJidWZmZXJzWyBpIF0gPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblxuXHRcdFx0XHRcdFx0Z2wuYmluZFJlbmRlcmJ1ZmZlciggZ2wuUkVOREVSQlVGRkVSLCBtc2FhUmVuZGVyYnVmZmVyc1sgaSBdICk7XG5cblx0XHRcdFx0XHRcdGludmFsaWRhdGlvbkFycmF5LnB1c2goIGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGRlcHRoU3R5bGUgPSBzdGVuY2lsQnVmZmVyID8gZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogZ2wuREVQVEhfQVRUQUNITUVOVDtcblx0XHRcdFx0XHRcdFx0aW52YWxpZGF0aW9uQXJyYXkucHVzaCggZGVwdGhTdHlsZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNvbnN0IHRleHR1cmUgPSBkZXNjcmlwdG9yLnRleHR1cmVzWyBpIF07XG5cdFx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlRGF0YSA9IHRoaXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0XHRcdGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSggZ2wuUkVOREVSQlVGRkVSLCBzYW1wbGVzLCB0ZXh0dXJlRGF0YS5nbEludGVybmFsRm9ybWF0LCBkZXNjcmlwdG9yLndpZHRoLCBkZXNjcmlwdG9yLmhlaWdodCApO1xuXHRcdFx0XHRcdFx0Z2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIGdsLlJFTkRFUkJVRkZFUiwgbXNhYVJlbmRlcmJ1ZmZlcnNbIGkgXSApO1xuXG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZW5kZXJUYXJnZXRDb250ZXh0RGF0YS5tc2FhRnJhbWVCdWZmZXIgPSBtc2FhRmI7XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0Q29udGV4dERhdGEubXNhYVJlbmRlcmJ1ZmZlcnMgPSBtc2FhUmVuZGVyYnVmZmVycztcblxuXHRcdFx0XHRcdGlmICggZGVwdGhSZW5kZXJidWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0ZGVwdGhSZW5kZXJidWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblx0XHRcdFx0XHRcdHRoaXMudGV4dHVyZVV0aWxzLnNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggZGVwdGhSZW5kZXJidWZmZXIsIGRlc2NyaXB0b3IsIHNhbXBsZXMgKTtcblxuXHRcdFx0XHRcdFx0cmVuZGVyVGFyZ2V0Q29udGV4dERhdGEuZGVwdGhSZW5kZXJidWZmZXIgPSBkZXB0aFJlbmRlcmJ1ZmZlcjtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZGVwdGhTdHlsZSA9IHN0ZW5jaWxCdWZmZXIgPyBnbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgOiBnbC5ERVBUSF9BVFRBQ0hNRU5UO1xuXHRcdFx0XHRcdFx0aW52YWxpZGF0aW9uQXJyYXkucHVzaCggZGVwdGhTdHlsZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0Q29udGV4dERhdGEuaW52YWxpZGF0aW9uQXJyYXkgPSBpbnZhbGlkYXRpb25BcnJheTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VycmVudEZyYW1lQnVmZmVyID0gcmVuZGVyVGFyZ2V0Q29udGV4dERhdGEubXNhYUZyYW1lQnVmZmVyO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGN1cnJlbnRGcmFtZUJ1ZmZlciA9IGZiO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIGdsLkZSQU1FQlVGRkVSLCBjdXJyZW50RnJhbWVCdWZmZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBWQU8ga2V5IGZvciB0aGUgZ2l2ZW4gaW5kZXggYW5kIGF0dHJpYnV0ZXMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7QXJyYXk8QnVmZmVyQXR0cmlidXRlPn0gYXR0cmlidXRlcyAtIEFuIGFycmF5IG9mIGJ1ZmZlciBhdHRyaWJ1dGVzLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBWQU8ga2V5LlxuXHQgKi9cblx0X2dldFZhb0tleSggYXR0cmlidXRlcyApIHtcblxuXHRcdGxldCBrZXkgPSAnJztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBhdHRyaWJ1dGVEYXRhID0gdGhpcy5nZXQoIGF0dHJpYnV0ZXNbIGkgXSApO1xuXG5cdFx0XHRrZXkgKz0gJzonICsgYXR0cmlidXRlRGF0YS5pZDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBrZXk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgVkFPIGZyb20gdGhlIGluZGV4IGFuZCBhdHRyaWJ1dGVzLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5PEJ1ZmZlckF0dHJpYnV0ZT59IGF0dHJpYnV0ZXMgLSBBbiBhcnJheSBvZiBidWZmZXIgYXR0cmlidXRlcy5cblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgVkFPIGRhdGEuXG5cdCAqL1xuXHRfY3JlYXRlVmFvKCBhdHRyaWJ1dGVzICkge1xuXG5cdFx0Y29uc3QgeyBnbCB9ID0gdGhpcztcblxuXHRcdGNvbnN0IHZhb0dQVSA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XG5cdFx0bGV0IGtleSA9ICcnO1xuXG5cdFx0bGV0IHN0YXRpY1ZhbyA9IHRydWU7XG5cblx0XHRnbC5iaW5kVmVydGV4QXJyYXkoIHZhb0dQVSApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGkgXTtcblx0XHRcdGNvbnN0IGF0dHJpYnV0ZURhdGEgPSB0aGlzLmdldCggYXR0cmlidXRlICk7XG5cblx0XHRcdGtleSArPSAnOicgKyBhdHRyaWJ1dGVEYXRhLmlkO1xuXG5cdFx0XHRnbC5iaW5kQnVmZmVyKCBnbC5BUlJBWV9CVUZGRVIsIGF0dHJpYnV0ZURhdGEuYnVmZmVyR1BVICk7XG5cdFx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSggaSApO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5pc1N0b3JhZ2VCdWZmZXJBdHRyaWJ1dGUgfHwgYXR0cmlidXRlLmlzU3RvcmFnZUluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHN0YXRpY1ZhbyA9IGZhbHNlO1xuXG5cdFx0XHRsZXQgc3RyaWRlLCBvZmZzZXQ7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0c3RyaWRlID0gYXR0cmlidXRlLmRhdGEuc3RyaWRlICogYXR0cmlidXRlRGF0YS5ieXRlc1BlckVsZW1lbnQ7XG5cdFx0XHRcdG9mZnNldCA9IGF0dHJpYnV0ZS5vZmZzZXQgKiBhdHRyaWJ1dGVEYXRhLmJ5dGVzUGVyRWxlbWVudDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdHJpZGUgPSAwO1xuXHRcdFx0XHRvZmZzZXQgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXR0cmlidXRlRGF0YS5pc0ludGVnZXIgKSB7XG5cblx0XHRcdFx0Z2wudmVydGV4QXR0cmliSVBvaW50ZXIoIGksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlRGF0YS50eXBlLCBzdHJpZGUsIG9mZnNldCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoIGksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlRGF0YS50eXBlLCBhdHRyaWJ1dGUubm9ybWFsaXplZCwgc3RyaWRlLCBvZmZzZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSAmJiAhIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdGdsLnZlcnRleEF0dHJpYkRpdmlzb3IoIGksIGF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICYmIGF0dHJpYnV0ZS5kYXRhLmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgKSB7XG5cblx0XHRcdFx0Z2wudmVydGV4QXR0cmliRGl2aXNvciggaSwgYXR0cmlidXRlLmRhdGEubWVzaFBlckF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5BUlJBWV9CVUZGRVIsIG51bGwgKTtcblxuXHRcdHRoaXMudmFvQ2FjaGVbIGtleSBdID0gdmFvR1BVO1xuXG5cdFx0cmV0dXJuIHsgdmFvR1BVLCBzdGF0aWNWYW8gfTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSB0cmFuc2Zvcm0gZmVlZGJhY2sgZnJvbSB0aGUgZ2l2ZW4gdHJhbnNmb3JtIGJ1ZmZlcnMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7QXJyYXk8RHVhbEF0dHJpYnV0ZURhdGE+fSB0cmFuc2Zvcm1CdWZmZXJzIC0gVGhlIHRyYW5zZm9ybSBidWZmZXJzLlxuXHQgKiBAcmV0dXJuIHtXZWJHTFRyYW5zZm9ybUZlZWRiYWNrfSBUaGUgdHJhbnNmb3JtIGZlZWRiYWNrLlxuXHQgKi9cblx0X2dldFRyYW5zZm9ybUZlZWRiYWNrKCB0cmFuc2Zvcm1CdWZmZXJzICkge1xuXG5cdFx0bGV0IGtleSA9ICcnO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdHJhbnNmb3JtQnVmZmVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGtleSArPSAnOicgKyB0cmFuc2Zvcm1CdWZmZXJzWyBpIF0uaWQ7XG5cblx0XHR9XG5cblx0XHRsZXQgdHJhbnNmb3JtRmVlZGJhY2tHUFUgPSB0aGlzLnRyYW5zZm9ybUZlZWRiYWNrQ2FjaGVbIGtleSBdO1xuXG5cdFx0aWYgKCB0cmFuc2Zvcm1GZWVkYmFja0dQVSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gdHJhbnNmb3JtRmVlZGJhY2tHUFU7XG5cblx0XHR9XG5cblx0XHRjb25zdCB7IGdsIH0gPSB0aGlzO1xuXG5cdFx0dHJhbnNmb3JtRmVlZGJhY2tHUFUgPSBnbC5jcmVhdGVUcmFuc2Zvcm1GZWVkYmFjaygpO1xuXG5cdFx0Z2wuYmluZFRyYW5zZm9ybUZlZWRiYWNrKCBnbC5UUkFOU0ZPUk1fRkVFREJBQ0ssIHRyYW5zZm9ybUZlZWRiYWNrR1BVICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0cmFuc2Zvcm1CdWZmZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlRGF0YSA9IHRyYW5zZm9ybUJ1ZmZlcnNbIGkgXTtcblxuXHRcdFx0Z2wuYmluZEJ1ZmZlckJhc2UoIGdsLlRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVIsIGksIGF0dHJpYnV0ZURhdGEudHJhbnNmb3JtQnVmZmVyICk7XG5cblx0XHR9XG5cblx0XHRnbC5iaW5kVHJhbnNmb3JtRmVlZGJhY2soIGdsLlRSQU5TRk9STV9GRUVEQkFDSywgbnVsbCApO1xuXG5cdFx0dGhpcy50cmFuc2Zvcm1GZWVkYmFja0NhY2hlWyBrZXkgXSA9IHRyYW5zZm9ybUZlZWRiYWNrR1BVO1xuXG5cdFx0cmV0dXJuIHRyYW5zZm9ybUZlZWRiYWNrR1BVO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBnaXZlbiBiaW5kaW5ncy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheTxCaW5kR3JvdXA+fSBiaW5kaW5ncyAtIFRoZSBiaW5kaW5ncy5cblx0ICogQHBhcmFtIHtXZWJHTFByb2dyYW19IHByb2dyYW1HUFUgLSBUaGUgV2ViR0wgcHJvZ3JhbS5cblx0ICovXG5cdF9zZXR1cEJpbmRpbmdzKCBiaW5kaW5ncywgcHJvZ3JhbUdQVSApIHtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcblxuXHRcdGZvciAoIGNvbnN0IGJpbmRHcm91cCBvZiBiaW5kaW5ncyApIHtcblxuXHRcdFx0Zm9yICggY29uc3QgYmluZGluZyBvZiBiaW5kR3JvdXAuYmluZGluZ3MgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmluZGluZ0RhdGEgPSB0aGlzLmdldCggYmluZGluZyApO1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IGJpbmRpbmdEYXRhLmluZGV4O1xuXG5cdFx0XHRcdGlmICggYmluZGluZy5pc1VuaWZvcm1zR3JvdXAgfHwgYmluZGluZy5pc1VuaWZvcm1CdWZmZXIgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBsb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1CbG9ja0luZGV4KCBwcm9ncmFtR1BVLCBiaW5kaW5nLm5hbWUgKTtcblx0XHRcdFx0XHRnbC51bmlmb3JtQmxvY2tCaW5kaW5nKCBwcm9ncmFtR1BVLCBsb2NhdGlvbiwgaW5kZXggKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBiaW5kaW5nLmlzU2FtcGxlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBsb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbiggcHJvZ3JhbUdQVSwgYmluZGluZy5uYW1lICk7XG5cdFx0XHRcdFx0Z2wudW5pZm9ybTFpKCBsb2NhdGlvbiwgaW5kZXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEJpbmRzIHRoZSBnaXZlbiB1bmlmb3Jtcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheTxCaW5kR3JvdXA+fSBiaW5kaW5ncyAtIFRoZSBiaW5kaW5ncy5cblx0ICovXG5cdF9iaW5kVW5pZm9ybXMoIGJpbmRpbmdzICkge1xuXG5cdFx0Y29uc3QgeyBnbCwgc3RhdGUgfSA9IHRoaXM7XG5cblx0XHRmb3IgKCBjb25zdCBiaW5kR3JvdXAgb2YgYmluZGluZ3MgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IGJpbmRpbmcgb2YgYmluZEdyb3VwLmJpbmRpbmdzICkge1xuXG5cdFx0XHRcdGNvbnN0IGJpbmRpbmdEYXRhID0gdGhpcy5nZXQoIGJpbmRpbmcgKTtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBiaW5kaW5nRGF0YS5pbmRleDtcblxuXHRcdFx0XHRpZiAoIGJpbmRpbmcuaXNVbmlmb3Jtc0dyb3VwIHx8IGJpbmRpbmcuaXNVbmlmb3JtQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0Ly8gVE9ETyBVU0UgYmluZEJ1ZmZlclJhbmdlIHRvIGdyb3VwIG11bHRpcGxlIHVuaWZvcm0gYnVmZmVyc1xuXHRcdFx0XHRcdHN0YXRlLmJpbmRCdWZmZXJCYXNlKCBnbC5VTklGT1JNX0JVRkZFUiwgaW5kZXgsIGJpbmRpbmdEYXRhLmJ1ZmZlckdQVSApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGJpbmRpbmcuaXNTYW1wbGVkVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBiaW5kaW5nRGF0YS5nbFRleHR1cmVUeXBlLCBiaW5kaW5nRGF0YS50ZXh0dXJlR1BVLCBnbC5URVhUVVJFMCArIGluZGV4ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYFdFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZWAgZXh0ZW5zaW9uXG5cdCAqIHNob3VsZCBiZSB1c2VkIHdoZW4gTVNBQSBpcyBlbmFibGVkLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1JlbmRlclRhcmdldH0gcmVuZGVyVGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQgdGhhdCBzaG91bGQgYmUgbXVsdGlzYW1wbGVkLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRvIHVzZSB0aGUgYFdFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZWAgZXh0ZW5zaW9uIGZvciBNU0FBIG9yIG5vdC5cblx0ICovXG5cdF91c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHJldHVybiByZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgJiYgdGhpcy5leHRlbnNpb25zLmhhcyggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKSA9PT0gdHJ1ZSAmJiByZW5kZXJUYXJnZXQuYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgIT09IGZhbHNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgaW50ZXJuYWwgcmVzb3VyY2VzLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9sb3NlX2NvbnRleHQnICk7XG5cdFx0aWYgKCBleHRlbnNpb24gKSBleHRlbnNpb24ubG9zZUNvbnRleHQoKTtcblxuXHRcdHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0bG9zdCcsIHRoaXMuX29uQ29udGV4dExvc3QgKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViR0xCYWNrZW5kO1xuIiwiZXhwb3J0IGNvbnN0IEdQVVByaW1pdGl2ZVRvcG9sb2d5ID0ge1xuXHRQb2ludExpc3Q6ICdwb2ludC1saXN0Jyxcblx0TGluZUxpc3Q6ICdsaW5lLWxpc3QnLFxuXHRMaW5lU3RyaXA6ICdsaW5lLXN0cmlwJyxcblx0VHJpYW5nbGVMaXN0OiAndHJpYW5nbGUtbGlzdCcsXG5cdFRyaWFuZ2xlU3RyaXA6ICd0cmlhbmdsZS1zdHJpcCcsXG59O1xuXG5leHBvcnQgY29uc3QgR1BVQ29tcGFyZUZ1bmN0aW9uID0ge1xuXHROZXZlcjogJ25ldmVyJyxcblx0TGVzczogJ2xlc3MnLFxuXHRFcXVhbDogJ2VxdWFsJyxcblx0TGVzc0VxdWFsOiAnbGVzcy1lcXVhbCcsXG5cdEdyZWF0ZXI6ICdncmVhdGVyJyxcblx0Tm90RXF1YWw6ICdub3QtZXF1YWwnLFxuXHRHcmVhdGVyRXF1YWw6ICdncmVhdGVyLWVxdWFsJyxcblx0QWx3YXlzOiAnYWx3YXlzJ1xufTtcblxuZXhwb3J0IGNvbnN0IEdQVVN0b3JlT3AgPSB7XG5cdFN0b3JlOiAnc3RvcmUnLFxuXHREaXNjYXJkOiAnZGlzY2FyZCdcbn07XG5cbmV4cG9ydCBjb25zdCBHUFVMb2FkT3AgPSB7XG5cdExvYWQ6ICdsb2FkJyxcblx0Q2xlYXI6ICdjbGVhcidcbn07XG5cbmV4cG9ydCBjb25zdCBHUFVGcm9udEZhY2UgPSB7XG5cdENDVzogJ2NjdycsXG5cdENXOiAnY3cnXG59O1xuXG5leHBvcnQgY29uc3QgR1BVQ3VsbE1vZGUgPSB7XG5cdE5vbmU6ICdub25lJyxcblx0RnJvbnQ6ICdmcm9udCcsXG5cdEJhY2s6ICdiYWNrJ1xufTtcblxuZXhwb3J0IGNvbnN0IEdQVUluZGV4Rm9ybWF0ID0ge1xuXHRVaW50MTY6ICd1aW50MTYnLFxuXHRVaW50MzI6ICd1aW50MzInXG59O1xuXG5leHBvcnQgY29uc3QgR1BVVmVydGV4Rm9ybWF0ID0ge1xuXHRVaW50OHgyOiAndWludDh4MicsXG5cdFVpbnQ4eDQ6ICd1aW50OHg0Jyxcblx0U2ludDh4MjogJ3NpbnQ4eDInLFxuXHRTaW50OHg0OiAnc2ludDh4NCcsXG5cdFVub3JtOHgyOiAndW5vcm04eDInLFxuXHRVbm9ybTh4NDogJ3Vub3JtOHg0Jyxcblx0U25vcm04eDI6ICdzbm9ybTh4MicsXG5cdFNub3JtOHg0OiAnc25vcm04eDQnLFxuXHRVaW50MTZ4MjogJ3VpbnQxNngyJyxcblx0VWludDE2eDQ6ICd1aW50MTZ4NCcsXG5cdFNpbnQxNngyOiAnc2ludDE2eDInLFxuXHRTaW50MTZ4NDogJ3NpbnQxNng0Jyxcblx0VW5vcm0xNngyOiAndW5vcm0xNngyJyxcblx0VW5vcm0xNng0OiAndW5vcm0xNng0Jyxcblx0U25vcm0xNngyOiAnc25vcm0xNngyJyxcblx0U25vcm0xNng0OiAnc25vcm0xNng0Jyxcblx0RmxvYXQxNngyOiAnZmxvYXQxNngyJyxcblx0RmxvYXQxNng0OiAnZmxvYXQxNng0Jyxcblx0RmxvYXQzMjogJ2Zsb2F0MzInLFxuXHRGbG9hdDMyeDI6ICdmbG9hdDMyeDInLFxuXHRGbG9hdDMyeDM6ICdmbG9hdDMyeDMnLFxuXHRGbG9hdDMyeDQ6ICdmbG9hdDMyeDQnLFxuXHRVaW50MzI6ICd1aW50MzInLFxuXHRVaW50MzJ4MjogJ3VpbnQzMngyJyxcblx0VWludDMyeDM6ICd1aW50MzJ4MycsXG5cdFVpbnQzMng0OiAndWludDMyeDQnLFxuXHRTaW50MzI6ICdzaW50MzInLFxuXHRTaW50MzJ4MjogJ3NpbnQzMngyJyxcblx0U2ludDMyeDM6ICdzaW50MzJ4MycsXG5cdFNpbnQzMng0OiAnc2ludDMyeDQnXG59O1xuXG5leHBvcnQgY29uc3QgR1BVVGV4dHVyZUZvcm1hdCA9IHtcblxuXHQvLyA4LWJpdCBmb3JtYXRzXG5cblx0UjhVbm9ybTogJ3I4dW5vcm0nLFxuXHRSOFNub3JtOiAncjhzbm9ybScsXG5cdFI4VWludDogJ3I4dWludCcsXG5cdFI4U2ludDogJ3I4c2ludCcsXG5cblx0Ly8gMTYtYml0IGZvcm1hdHNcblxuXHRSMTZVaW50OiAncjE2dWludCcsXG5cdFIxNlNpbnQ6ICdyMTZzaW50Jyxcblx0UjE2RmxvYXQ6ICdyMTZmbG9hdCcsXG5cdFJHOFVub3JtOiAncmc4dW5vcm0nLFxuXHRSRzhTbm9ybTogJ3JnOHNub3JtJyxcblx0Ukc4VWludDogJ3JnOHVpbnQnLFxuXHRSRzhTaW50OiAncmc4c2ludCcsXG5cblx0Ly8gMzItYml0IGZvcm1hdHNcblxuXHRSMzJVaW50OiAncjMydWludCcsXG5cdFIzMlNpbnQ6ICdyMzJzaW50Jyxcblx0UjMyRmxvYXQ6ICdyMzJmbG9hdCcsXG5cdFJHMTZVaW50OiAncmcxNnVpbnQnLFxuXHRSRzE2U2ludDogJ3JnMTZzaW50Jyxcblx0UkcxNkZsb2F0OiAncmcxNmZsb2F0Jyxcblx0UkdCQThVbm9ybTogJ3JnYmE4dW5vcm0nLFxuXHRSR0JBOFVub3JtU1JHQjogJ3JnYmE4dW5vcm0tc3JnYicsXG5cdFJHQkE4U25vcm06ICdyZ2JhOHNub3JtJyxcblx0UkdCQThVaW50OiAncmdiYTh1aW50Jyxcblx0UkdCQThTaW50OiAncmdiYThzaW50Jyxcblx0QkdSQThVbm9ybTogJ2JncmE4dW5vcm0nLFxuXHRCR1JBOFVub3JtU1JHQjogJ2JncmE4dW5vcm0tc3JnYicsXG5cdC8vIFBhY2tlZCAzMi1iaXQgZm9ybWF0c1xuXHRSR0I5RTVVRmxvYXQ6ICdyZ2I5ZTV1ZmxvYXQnLFxuXHRSR0IxMEEyVW5vcm06ICdyZ2IxMGEydW5vcm0nLFxuXHRSRzExQjEwdUZsb2F0OiAncmdiMTBhMnVub3JtJyxcblxuXHQvLyA2NC1iaXQgZm9ybWF0c1xuXG5cdFJHMzJVaW50OiAncmczMnVpbnQnLFxuXHRSRzMyU2ludDogJ3JnMzJzaW50Jyxcblx0UkczMkZsb2F0OiAncmczMmZsb2F0Jyxcblx0UkdCQTE2VWludDogJ3JnYmExNnVpbnQnLFxuXHRSR0JBMTZTaW50OiAncmdiYTE2c2ludCcsXG5cdFJHQkExNkZsb2F0OiAncmdiYTE2ZmxvYXQnLFxuXG5cdC8vIDEyOC1iaXQgZm9ybWF0c1xuXG5cdFJHQkEzMlVpbnQ6ICdyZ2JhMzJ1aW50Jyxcblx0UkdCQTMyU2ludDogJ3JnYmEzMnNpbnQnLFxuXHRSR0JBMzJGbG9hdDogJ3JnYmEzMmZsb2F0JyxcblxuXHQvLyBEZXB0aCBhbmQgc3RlbmNpbCBmb3JtYXRzXG5cblx0U3RlbmNpbDg6ICdzdGVuY2lsOCcsXG5cdERlcHRoMTZVbm9ybTogJ2RlcHRoMTZ1bm9ybScsXG5cdERlcHRoMjRQbHVzOiAnZGVwdGgyNHBsdXMnLFxuXHREZXB0aDI0UGx1c1N0ZW5jaWw4OiAnZGVwdGgyNHBsdXMtc3RlbmNpbDgnLFxuXHREZXB0aDMyRmxvYXQ6ICdkZXB0aDMyZmxvYXQnLFxuXG5cdC8vICdkZXB0aDMyZmxvYXQtc3RlbmNpbDgnIGV4dGVuc2lvblxuXG5cdERlcHRoMzJGbG9hdFN0ZW5jaWw4OiAnZGVwdGgzMmZsb2F0LXN0ZW5jaWw4JyxcblxuXHQvLyBCQyBjb21wcmVzc2VkIGZvcm1hdHMgdXNhYmxlIGlmICd0ZXh0dXJlLWNvbXByZXNzaW9uLWJjJyBpcyBib3RoXG5cdC8vIHN1cHBvcnRlZCBieSB0aGUgZGV2aWNlL3VzZXIgYWdlbnQgYW5kIGVuYWJsZWQgaW4gcmVxdWVzdERldmljZS5cblxuXHRCQzFSR0JBVW5vcm06ICdiYzEtcmdiYS11bm9ybScsXG5cdEJDMVJHQkFVbm9ybVNSR0I6ICdiYzEtcmdiYS11bm9ybS1zcmdiJyxcblx0QkMyUkdCQVVub3JtOiAnYmMyLXJnYmEtdW5vcm0nLFxuXHRCQzJSR0JBVW5vcm1TUkdCOiAnYmMyLXJnYmEtdW5vcm0tc3JnYicsXG5cdEJDM1JHQkFVbm9ybTogJ2JjMy1yZ2JhLXVub3JtJyxcblx0QkMzUkdCQVVub3JtU1JHQjogJ2JjMy1yZ2JhLXVub3JtLXNyZ2InLFxuXHRCQzRSVW5vcm06ICdiYzQtci11bm9ybScsXG5cdEJDNFJTbm9ybTogJ2JjNC1yLXNub3JtJyxcblx0QkM1UkdVbm9ybTogJ2JjNS1yZy11bm9ybScsXG5cdEJDNVJHU25vcm06ICdiYzUtcmctc25vcm0nLFxuXHRCQzZIUkdCVUZsb2F0OiAnYmM2aC1yZ2ItdWZsb2F0Jyxcblx0QkM2SFJHQkZsb2F0OiAnYmM2aC1yZ2ItZmxvYXQnLFxuXHRCQzdSR0JBVW5vcm06ICdiYzctcmdiYS11bm9ybScsXG5cdEJDN1JHQkFVbm9ybVNSR0I6ICdiYzctcmdiYS1zcmdiJyxcblxuXHQvLyBFVEMyIGNvbXByZXNzZWQgZm9ybWF0cyB1c2FibGUgaWYgJ3RleHR1cmUtY29tcHJlc3Npb24tZXRjMicgaXMgYm90aFxuXHQvLyBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZS91c2VyIGFnZW50IGFuZCBlbmFibGVkIGluIHJlcXVlc3REZXZpY2UuXG5cblx0RVRDMlJHQjhVbm9ybTogJ2V0YzItcmdiOHVub3JtJyxcblx0RVRDMlJHQjhVbm9ybVNSR0I6ICdldGMyLXJnYjh1bm9ybS1zcmdiJyxcblx0RVRDMlJHQjhBMVVub3JtOiAnZXRjMi1yZ2I4YTF1bm9ybScsXG5cdEVUQzJSR0I4QTFVbm9ybVNSR0I6ICdldGMyLXJnYjhhMXVub3JtLXNyZ2InLFxuXHRFVEMyUkdCQThVbm9ybTogJ2V0YzItcmdiYTh1bm9ybScsXG5cdEVUQzJSR0JBOFVub3JtU1JHQjogJ2V0YzItcmdiYTh1bm9ybS1zcmdiJyxcblx0RUFDUjExVW5vcm06ICdlYWMtcjExdW5vcm0nLFxuXHRFQUNSMTFTbm9ybTogJ2VhYy1yMTFzbm9ybScsXG5cdEVBQ1JHMTFVbm9ybTogJ2VhYy1yZzExdW5vcm0nLFxuXHRFQUNSRzExU25vcm06ICdlYWMtcmcxMXNub3JtJyxcblxuXHQvLyBBU1RDIGNvbXByZXNzZWQgZm9ybWF0cyB1c2FibGUgaWYgJ3RleHR1cmUtY29tcHJlc3Npb24tYXN0YycgaXMgYm90aFxuXHQvLyBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZS91c2VyIGFnZW50IGFuZCBlbmFibGVkIGluIHJlcXVlc3REZXZpY2UuXG5cblx0QVNUQzR4NFVub3JtOiAnYXN0Yy00eDQtdW5vcm0nLFxuXHRBU1RDNHg0VW5vcm1TUkdCOiAnYXN0Yy00eDQtdW5vcm0tc3JnYicsXG5cdEFTVEM1eDRVbm9ybTogJ2FzdGMtNXg0LXVub3JtJyxcblx0QVNUQzV4NFVub3JtU1JHQjogJ2FzdGMtNXg0LXVub3JtLXNyZ2InLFxuXHRBU1RDNXg1VW5vcm06ICdhc3RjLTV4NS11bm9ybScsXG5cdEFTVEM1eDVVbm9ybVNSR0I6ICdhc3RjLTV4NS11bm9ybS1zcmdiJyxcblx0QVNUQzZ4NVVub3JtOiAnYXN0Yy02eDUtdW5vcm0nLFxuXHRBU1RDNng1VW5vcm1TUkdCOiAnYXN0Yy02eDUtdW5vcm0tc3JnYicsXG5cdEFTVEM2eDZVbm9ybTogJ2FzdGMtNng2LXVub3JtJyxcblx0QVNUQzZ4NlVub3JtU1JHQjogJ2FzdGMtNng2LXVub3JtLXNyZ2InLFxuXHRBU1RDOHg1VW5vcm06ICdhc3RjLTh4NS11bm9ybScsXG5cdEFTVEM4eDVVbm9ybVNSR0I6ICdhc3RjLTh4NS11bm9ybS1zcmdiJyxcblx0QVNUQzh4NlVub3JtOiAnYXN0Yy04eDYtdW5vcm0nLFxuXHRBU1RDOHg2VW5vcm1TUkdCOiAnYXN0Yy04eDYtdW5vcm0tc3JnYicsXG5cdEFTVEM4eDhVbm9ybTogJ2FzdGMtOHg4LXVub3JtJyxcblx0QVNUQzh4OFVub3JtU1JHQjogJ2FzdGMtOHg4LXVub3JtLXNyZ2InLFxuXHRBU1RDMTB4NVVub3JtOiAnYXN0Yy0xMHg1LXVub3JtJyxcblx0QVNUQzEweDVVbm9ybVNSR0I6ICdhc3RjLTEweDUtdW5vcm0tc3JnYicsXG5cdEFTVEMxMHg2VW5vcm06ICdhc3RjLTEweDYtdW5vcm0nLFxuXHRBU1RDMTB4NlVub3JtU1JHQjogJ2FzdGMtMTB4Ni11bm9ybS1zcmdiJyxcblx0QVNUQzEweDhVbm9ybTogJ2FzdGMtMTB4OC11bm9ybScsXG5cdEFTVEMxMHg4VW5vcm1TUkdCOiAnYXN0Yy0xMHg4LXVub3JtLXNyZ2InLFxuXHRBU1RDMTB4MTBVbm9ybTogJ2FzdGMtMTB4MTAtdW5vcm0nLFxuXHRBU1RDMTB4MTBVbm9ybVNSR0I6ICdhc3RjLTEweDEwLXVub3JtLXNyZ2InLFxuXHRBU1RDMTJ4MTBVbm9ybTogJ2FzdGMtMTJ4MTAtdW5vcm0nLFxuXHRBU1RDMTJ4MTBVbm9ybVNSR0I6ICdhc3RjLTEyeDEwLXVub3JtLXNyZ2InLFxuXHRBU1RDMTJ4MTJVbm9ybTogJ2FzdGMtMTJ4MTItdW5vcm0nLFxuXHRBU1RDMTJ4MTJVbm9ybVNSR0I6ICdhc3RjLTEyeDEyLXVub3JtLXNyZ2InLFxuXG59O1xuXG5leHBvcnQgY29uc3QgR1BVQWRkcmVzc01vZGUgPSB7XG5cdENsYW1wVG9FZGdlOiAnY2xhbXAtdG8tZWRnZScsXG5cdFJlcGVhdDogJ3JlcGVhdCcsXG5cdE1pcnJvclJlcGVhdDogJ21pcnJvci1yZXBlYXQnXG59O1xuXG5leHBvcnQgY29uc3QgR1BVRmlsdGVyTW9kZSA9IHtcblx0TGluZWFyOiAnbGluZWFyJyxcblx0TmVhcmVzdDogJ25lYXJlc3QnXG59O1xuXG5leHBvcnQgY29uc3QgR1BVQmxlbmRGYWN0b3IgPSB7XG5cdFplcm86ICd6ZXJvJyxcblx0T25lOiAnb25lJyxcblx0U3JjOiAnc3JjJyxcblx0T25lTWludXNTcmM6ICdvbmUtbWludXMtc3JjJyxcblx0U3JjQWxwaGE6ICdzcmMtYWxwaGEnLFxuXHRPbmVNaW51c1NyY0FscGhhOiAnb25lLW1pbnVzLXNyYy1hbHBoYScsXG5cdERzdDogJ2RzdCcsXG5cdE9uZU1pbnVzRHN0Q29sb3I6ICdvbmUtbWludXMtZHN0Jyxcblx0RHN0QWxwaGE6ICdkc3QtYWxwaGEnLFxuXHRPbmVNaW51c0RzdEFscGhhOiAnb25lLW1pbnVzLWRzdC1hbHBoYScsXG5cdFNyY0FscGhhU2F0dXJhdGVkOiAnc3JjLWFscGhhLXNhdHVyYXRlZCcsXG5cdENvbnN0YW50OiAnY29uc3RhbnQnLFxuXHRPbmVNaW51c0NvbnN0YW50OiAnb25lLW1pbnVzLWNvbnN0YW50J1xufTtcblxuZXhwb3J0IGNvbnN0IEdQVUJsZW5kT3BlcmF0aW9uID0ge1xuXHRBZGQ6ICdhZGQnLFxuXHRTdWJ0cmFjdDogJ3N1YnRyYWN0Jyxcblx0UmV2ZXJzZVN1YnRyYWN0OiAncmV2ZXJzZS1zdWJ0cmFjdCcsXG5cdE1pbjogJ21pbicsXG5cdE1heDogJ21heCdcbn07XG5cbmV4cG9ydCBjb25zdCBHUFVDb2xvcldyaXRlRmxhZ3MgPSB7XG5cdE5vbmU6IDAsXG5cdFJlZDogMHgxLFxuXHRHcmVlbjogMHgyLFxuXHRCbHVlOiAweDQsXG5cdEFscGhhOiAweDgsXG5cdEFsbDogMHhGXG59O1xuXG5leHBvcnQgY29uc3QgR1BVU3RlbmNpbE9wZXJhdGlvbiA9IHtcblx0S2VlcDogJ2tlZXAnLFxuXHRaZXJvOiAnemVybycsXG5cdFJlcGxhY2U6ICdyZXBsYWNlJyxcblx0SW52ZXJ0OiAnaW52ZXJ0Jyxcblx0SW5jcmVtZW50Q2xhbXA6ICdpbmNyZW1lbnQtY2xhbXAnLFxuXHREZWNyZW1lbnRDbGFtcDogJ2RlY3JlbWVudC1jbGFtcCcsXG5cdEluY3JlbWVudFdyYXA6ICdpbmNyZW1lbnQtd3JhcCcsXG5cdERlY3JlbWVudFdyYXA6ICdkZWNyZW1lbnQtd3JhcCdcbn07XG5cbmV4cG9ydCBjb25zdCBHUFVCdWZmZXJCaW5kaW5nVHlwZSA9IHtcblx0VW5pZm9ybTogJ3VuaWZvcm0nLFxuXHRTdG9yYWdlOiAnc3RvcmFnZScsXG5cdFJlYWRPbmx5U3RvcmFnZTogJ3JlYWQtb25seS1zdG9yYWdlJ1xufTtcblxuZXhwb3J0IGNvbnN0IEdQVVN0b3JhZ2VUZXh0dXJlQWNjZXNzID0ge1xuXHRXcml0ZU9ubHk6ICd3cml0ZS1vbmx5Jyxcblx0UmVhZE9ubHk6ICdyZWFkLW9ubHknLFxuXHRSZWFkV3JpdGU6ICdyZWFkLXdyaXRlJyxcbn07XG5cbmV4cG9ydCBjb25zdCBHUFVTYW1wbGVyQmluZGluZ1R5cGUgPSB7XG5cdEZpbHRlcmluZzogJ2ZpbHRlcmluZycsXG5cdE5vbkZpbHRlcmluZzogJ25vbi1maWx0ZXJpbmcnLFxuXHRDb21wYXJpc29uOiAnY29tcGFyaXNvbidcbn07XG5cbmV4cG9ydCBjb25zdCBHUFVUZXh0dXJlU2FtcGxlVHlwZSA9IHtcblx0RmxvYXQ6ICdmbG9hdCcsXG5cdFVuZmlsdGVyYWJsZUZsb2F0OiAndW5maWx0ZXJhYmxlLWZsb2F0Jyxcblx0RGVwdGg6ICdkZXB0aCcsXG5cdFNJbnQ6ICdzaW50Jyxcblx0VUludDogJ3VpbnQnXG59O1xuXG5leHBvcnQgY29uc3QgR1BVVGV4dHVyZURpbWVuc2lvbiA9IHtcblx0T25lRDogJzFkJyxcblx0VHdvRDogJzJkJyxcblx0VGhyZWVEOiAnM2QnXG59O1xuXG5leHBvcnQgY29uc3QgR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24gPSB7XG5cdE9uZUQ6ICcxZCcsXG5cdFR3b0Q6ICcyZCcsXG5cdFR3b0RBcnJheTogJzJkLWFycmF5Jyxcblx0Q3ViZTogJ2N1YmUnLFxuXHRDdWJlQXJyYXk6ICdjdWJlLWFycmF5Jyxcblx0VGhyZWVEOiAnM2QnXG59O1xuXG5leHBvcnQgY29uc3QgR1BVVGV4dHVyZUFzcGVjdCA9IHtcblx0QWxsOiAnYWxsJyxcblx0U3RlbmNpbE9ubHk6ICdzdGVuY2lsLW9ubHknLFxuXHREZXB0aE9ubHk6ICdkZXB0aC1vbmx5J1xufTtcblxuZXhwb3J0IGNvbnN0IEdQVUlucHV0U3RlcE1vZGUgPSB7XG5cdFZlcnRleDogJ3ZlcnRleCcsXG5cdEluc3RhbmNlOiAnaW5zdGFuY2UnXG59O1xuXG5leHBvcnQgY29uc3QgR1BVRmVhdHVyZU5hbWUgPSB7XG5cdERlcHRoQ2xpcENvbnRyb2w6ICdkZXB0aC1jbGlwLWNvbnRyb2wnLFxuXHREZXB0aDMyRmxvYXRTdGVuY2lsODogJ2RlcHRoMzJmbG9hdC1zdGVuY2lsOCcsXG5cdFRleHR1cmVDb21wcmVzc2lvbkJDOiAndGV4dHVyZS1jb21wcmVzc2lvbi1iYycsXG5cdFRleHR1cmVDb21wcmVzc2lvbkVUQzI6ICd0ZXh0dXJlLWNvbXByZXNzaW9uLWV0YzInLFxuXHRUZXh0dXJlQ29tcHJlc3Npb25BU1RDOiAndGV4dHVyZS1jb21wcmVzc2lvbi1hc3RjJyxcblx0VGltZXN0YW1wUXVlcnk6ICd0aW1lc3RhbXAtcXVlcnknLFxuXHRJbmRpcmVjdEZpcnN0SW5zdGFuY2U6ICdpbmRpcmVjdC1maXJzdC1pbnN0YW5jZScsXG5cdFNoYWRlckYxNjogJ3NoYWRlci1mMTYnLFxuXHRSRzExQjEwVUZsb2F0OiAncmcxMWIxMHVmbG9hdC1yZW5kZXJhYmxlJyxcblx0QkdSQThVTm9ybVN0b3JhZ2U6ICdiZ3JhOHVub3JtLXN0b3JhZ2UnLFxuXHRGbG9hdDMyRmlsdGVyYWJsZTogJ2Zsb2F0MzItZmlsdGVyYWJsZScsXG5cdENsaXBEaXN0YW5jZXM6ICdjbGlwLWRpc3RhbmNlcycsXG5cdER1YWxTb3VyY2VCbGVuZGluZzogJ2R1YWwtc291cmNlLWJsZW5kaW5nJyxcblx0U3ViZ3JvdXBzOiAnc3ViZ3JvdXBzJ1xufTtcbiIsImltcG9ydCBCaW5kaW5nIGZyb20gJy4vQmluZGluZy5qcyc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHNhbXBsZXIgYmluZGluZyB0eXBlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAYXVnbWVudHMgQmluZGluZ1xuICovXG5jbGFzcyBTYW1wbGVyIGV4dGVuZHMgQmluZGluZyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc2FtcGxlci5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgc2FtcGxlcnMncyBuYW1lLlxuXHQgKiBAcGFyYW0gez9UZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdGhpcyBiaW5kaW5nIGlzIHJlZmVycmluZyB0by5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB0ZXh0dXJlICkge1xuXG5cdFx0c3VwZXIoIG5hbWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRoZSBzYW1wbGVyIGlzIHJlZmVycmluZyB0by5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJpbmRpbmcncyB2ZXJzaW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnZlcnNpb24gPSB0ZXh0dXJlID8gdGV4dHVyZS52ZXJzaW9uIDogMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTYW1wbGVyID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2FtcGxlcjtcbiIsImltcG9ydCBTYW1wbGVyIGZyb20gJy4uL1NhbXBsZXIuanMnO1xuXG4vKipcbiAqIEEgc3BlY2lhbCBmb3JtIG9mIHNhbXBsZXIgYmluZGluZyB0eXBlLlxuICogSXQncyB0ZXh0dXJlIHZhbHVlIGlzIG1hbmFnZWQgYnkgYSBub2RlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFNhbXBsZXJcbiAqL1xuY2xhc3MgTm9kZVNhbXBsZXIgZXh0ZW5kcyBTYW1wbGVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlLWJhc2VkIHNhbXBsZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHNhbXBsZXJzJ3MgbmFtZS5cblx0ICogQHBhcmFtIHtUZXh0dXJlTm9kZX0gdGV4dHVyZU5vZGUgLSBUaGUgdGV4dHVyZSBub2RlLlxuXHQgKiBAcGFyYW0ge1VuaWZvcm1Hcm91cE5vZGV9IGdyb3VwTm9kZSAtIFRoZSB1bmlmb3JtIGdyb3VwIG5vZGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmFtZSwgdGV4dHVyZU5vZGUsIGdyb3VwTm9kZSApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB0ZXh0dXJlTm9kZSA/IHRleHR1cmVOb2RlLnZhbHVlIDogbnVsbCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHRleHR1cmUgbm9kZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtUZXh0dXJlTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmVOb2RlID0gdGV4dHVyZU5vZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdW5pZm9ybSBncm91cCBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1VuaWZvcm1Hcm91cE5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5ncm91cE5vZGUgPSBncm91cE5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSB0ZXh0dXJlIHZhbHVlIG9mIHRoaXMgc2FtcGxlci5cblx0ICovXG5cdHVwZGF0ZSgpIHtcblxuXHRcdHRoaXMudGV4dHVyZSA9IHRoaXMudGV4dHVyZU5vZGUudmFsdWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVTYW1wbGVyO1xuIiwiaW1wb3J0IEJ1ZmZlciBmcm9tICcuL0J1ZmZlci5qcyc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHN0b3JhZ2UgYnVmZmVyIGJpbmRpbmcgdHlwZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIEJ1ZmZlclxuICovXG5jbGFzcyBTdG9yYWdlQnVmZmVyIGV4dGVuZHMgQnVmZmVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB1bmlmb3JtIGJ1ZmZlci5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgYnVmZmVyJ3MgbmFtZS5cblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIGF0dHJpYnV0ZSApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCBhdHRyaWJ1dGUgPyBhdHRyaWJ1dGUuYXJyYXkgOiBudWxsICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtCdWZmZXJBdHRyaWJ1dGV9XG5cdFx0ICovXG5cdFx0dGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU3RvcmFnZUJ1ZmZlciA9IHRydWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0b3JhZ2VCdWZmZXI7XG4iLCJpbXBvcnQgU3RvcmFnZUJ1ZmZlciBmcm9tICcuLi9TdG9yYWdlQnVmZmVyLmpzJztcbmltcG9ydCB7IE5vZGVBY2Nlc3MgfSBmcm9tICcuLi8uLi8uLi9ub2Rlcy9jb3JlL2NvbnN0YW50cy5qcyc7XG5cbmxldCBfaWQgPSAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbCBmb3JtIG9mIHN0b3JhZ2UgYnVmZmVyIGJpbmRpbmcgdHlwZS5cbiAqIEl0J3MgYnVmZmVyIHZhbHVlIGlzIG1hbmFnZWQgYnkgYSBub2RlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIFN0b3JhZ2VCdWZmZXJcbiAqL1xuY2xhc3MgTm9kZVN0b3JhZ2VCdWZmZXIgZXh0ZW5kcyBTdG9yYWdlQnVmZmVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlLWJhc2VkIHN0b3JhZ2UgYnVmZmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0b3JhZ2VCdWZmZXJOb2RlfSBub2RlVW5pZm9ybSAtIFRoZSBzdG9yYWdlIGJ1ZmZlciBub2RlLlxuXHQgKiBAcGFyYW0ge1VuaWZvcm1Hcm91cE5vZGV9IGdyb3VwTm9kZSAtIFRoZSB1bmlmb3JtIGdyb3VwIG5vZGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggbm9kZVVuaWZvcm0sIGdyb3VwTm9kZSApIHtcblxuXHRcdHN1cGVyKCAnU3RvcmFnZUJ1ZmZlcl8nICsgX2lkICsrLCBub2RlVW5pZm9ybSA/IG5vZGVVbmlmb3JtLnZhbHVlIDogbnVsbCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vZGUgdW5pZm9ybS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtTdG9yYWdlQnVmZmVyTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGVVbmlmb3JtID0gbm9kZVVuaWZvcm07XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYWNjZXNzIHR5cGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuYWNjZXNzID0gbm9kZVVuaWZvcm0gPyBub2RlVW5pZm9ybS5hY2Nlc3MgOiBOb2RlQWNjZXNzLlJFQURfV1JJVEU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdW5pZm9ybSBncm91cCBub2RlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1VuaWZvcm1Hcm91cE5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5ncm91cE5vZGUgPSBncm91cE5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgc3RvcmFnZSBidWZmZXIuXG5cdCAqXG5cdCAqIEB0eXBlIHtCdWZmZXJBdHRyaWJ1dGV9XG5cdCAqL1xuXHRnZXQgYnVmZmVyKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9kZVVuaWZvcm0udmFsdWU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGVTdG9yYWdlQnVmZmVyO1xuIiwiaW1wb3J0IERhdGFNYXAgZnJvbSAnLi4vLi4vY29tbW9uL0RhdGFNYXAuanMnO1xuaW1wb3J0IHsgR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24sIEdQVUluZGV4Rm9ybWF0LCBHUFVGaWx0ZXJNb2RlLCBHUFVQcmltaXRpdmVUb3BvbG9neSwgR1BVTG9hZE9wLCBHUFVTdG9yZU9wIH0gZnJvbSAnLi9XZWJHUFVDb25zdGFudHMuanMnO1xuXG4vKipcbiAqIEEgV2ViR1BVIGJhY2tlbmQgdXRpbGl0eSBtb2R1bGUgdXNlZCBieSB7QGxpbmsgV2ViR1BVVGV4dHVyZVV0aWxzfS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBXZWJHUFVUZXh0dXJlUGFzc1V0aWxzIGV4dGVuZHMgRGF0YU1hcCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdXRpbGl0eSBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7R1BVRGV2aWNlfSBkZXZpY2UgLSBUaGUgV2ViR1BVIGRldmljZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBkZXZpY2UgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIFdlYkdQVSBkZXZpY2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7R1BVRGV2aWNlfVxuXHRcdCAqL1xuXHRcdHRoaXMuZGV2aWNlID0gZGV2aWNlO1xuXG5cdFx0Y29uc3QgbWlwbWFwVmVydGV4U291cmNlID0gYFxuc3RydWN0IFZhcnlzU3RydWN0IHtcblx0QGJ1aWx0aW4oIHBvc2l0aW9uICkgUG9zaXRpb246IHZlYzQ8ZjMyPixcblx0QGxvY2F0aW9uKCAwICkgdlRleCA6IHZlYzI8ZjMyPlxufTtcblxuQHZlcnRleFxuZm4gbWFpbiggQGJ1aWx0aW4oIHZlcnRleF9pbmRleCApIHZlcnRleEluZGV4IDogdTMyICkgLT4gVmFyeXNTdHJ1Y3Qge1xuXG5cdHZhciBWYXJ5cyA6IFZhcnlzU3RydWN0O1xuXG5cdHZhciBwb3MgPSBhcnJheTwgdmVjMjxmMzI+LCA0ID4oXG5cdFx0dmVjMjxmMzI+KCAtMS4wLCAgMS4wICksXG5cdFx0dmVjMjxmMzI+KCAgMS4wLCAgMS4wICksXG5cdFx0dmVjMjxmMzI+KCAtMS4wLCAtMS4wICksXG5cdFx0dmVjMjxmMzI+KCAgMS4wLCAtMS4wIClcblx0KTtcblxuXHR2YXIgdGV4ID0gYXJyYXk8IHZlYzI8ZjMyPiwgNCA+KFxuXHRcdHZlYzI8ZjMyPiggMC4wLCAwLjAgKSxcblx0XHR2ZWMyPGYzMj4oIDEuMCwgMC4wICksXG5cdFx0dmVjMjxmMzI+KCAwLjAsIDEuMCApLFxuXHRcdHZlYzI8ZjMyPiggMS4wLCAxLjAgKVxuXHQpO1xuXG5cdFZhcnlzLnZUZXggPSB0ZXhbIHZlcnRleEluZGV4IF07XG5cdFZhcnlzLlBvc2l0aW9uID0gdmVjNDxmMzI+KCBwb3NbIHZlcnRleEluZGV4IF0sIDAuMCwgMS4wICk7XG5cblx0cmV0dXJuIFZhcnlzO1xuXG59XG5gO1xuXG5cdFx0Y29uc3QgbWlwbWFwRnJhZ21lbnRTb3VyY2UgPSBgXG5AZ3JvdXAoIDAgKSBAYmluZGluZyggMCApXG52YXIgaW1nU2FtcGxlciA6IHNhbXBsZXI7XG5cbkBncm91cCggMCApIEBiaW5kaW5nKCAxIClcbnZhciBpbWcgOiB0ZXh0dXJlXzJkPGYzMj47XG5cbkBmcmFnbWVudFxuZm4gbWFpbiggQGxvY2F0aW9uKCAwICkgdlRleCA6IHZlYzI8ZjMyPiApIC0+IEBsb2NhdGlvbiggMCApIHZlYzQ8ZjMyPiB7XG5cblx0cmV0dXJuIHRleHR1cmVTYW1wbGUoIGltZywgaW1nU2FtcGxlciwgdlRleCApO1xuXG59XG5gO1xuXG5cdFx0Y29uc3QgZmxpcFlGcmFnbWVudFNvdXJjZSA9IGBcbkBncm91cCggMCApIEBiaW5kaW5nKCAwIClcbnZhciBpbWdTYW1wbGVyIDogc2FtcGxlcjtcblxuQGdyb3VwKCAwICkgQGJpbmRpbmcoIDEgKVxudmFyIGltZyA6IHRleHR1cmVfMmQ8ZjMyPjtcblxuQGZyYWdtZW50XG5mbiBtYWluKCBAbG9jYXRpb24oIDAgKSB2VGV4IDogdmVjMjxmMzI+ICkgLT4gQGxvY2F0aW9uKCAwICkgdmVjNDxmMzI+IHtcblxuXHRyZXR1cm4gdGV4dHVyZVNhbXBsZSggaW1nLCBpbWdTYW1wbGVyLCB2ZWMyKCB2VGV4LngsIDEuMCAtIHZUZXgueSApICk7XG5cbn1cbmA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbWlwbWFwIEdQVSBzYW1wbGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0dQVVNhbXBsZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5taXBtYXBTYW1wbGVyID0gZGV2aWNlLmNyZWF0ZVNhbXBsZXIoIHsgbWluRmlsdGVyOiBHUFVGaWx0ZXJNb2RlLkxpbmVhciB9ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZmxpcFkgR1BVIHNhbXBsZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7R1BVU2FtcGxlcn1cblx0XHQgKi9cblx0XHR0aGlzLmZsaXBZU2FtcGxlciA9IGRldmljZS5jcmVhdGVTYW1wbGVyKCB7IG1pbkZpbHRlcjogR1BVRmlsdGVyTW9kZS5OZWFyZXN0IH0gKTsgLy9AVE9ETz86IENvbnNpZGVyIHVzaW5nIHRleHR1cmVMb2FkKClcblxuXHRcdC8qKlxuXHRcdCAqIEEgY2FjaGUgZm9yIEdQVSByZW5kZXIgcGlwZWxpbmVzIHVzZWQgZm9yIGNvcHkvdHJhbnNmZXIgcGFzc2VzLlxuXHRcdCAqIEV2ZXJ5IHRleHR1cmUgZm9ybWF0IHJlcXVpcmVzIGEgdW5pcXVlIHBpcGVsaW5lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsR1BVUmVuZGVyUGlwZWxpbmU+fVxuXHRcdCAqL1xuXHRcdHRoaXMudHJhbnNmZXJQaXBlbGluZXMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgY2FjaGUgZm9yIEdQVSByZW5kZXIgcGlwZWxpbmVzIHVzZWQgZm9yIGZsaXBZIHBhc3Nlcy5cblx0XHQgKiBFdmVyeSB0ZXh0dXJlIGZvcm1hdCByZXF1aXJlcyBhIHVuaXF1ZSBwaXBlbGluZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLEdQVVJlbmRlclBpcGVsaW5lPn1cblx0XHQgKi9cblx0XHR0aGlzLmZsaXBZUGlwZWxpbmVzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbWlwbWFwIHZlcnRleCBzaGFkZXIgbW9kdWxlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0dQVVNoYWRlck1vZHVsZX1cblx0XHQgKi9cblx0XHR0aGlzLm1pcG1hcFZlcnRleFNoYWRlck1vZHVsZSA9IGRldmljZS5jcmVhdGVTaGFkZXJNb2R1bGUoIHtcblx0XHRcdGxhYmVsOiAnbWlwbWFwVmVydGV4Jyxcblx0XHRcdGNvZGU6IG1pcG1hcFZlcnRleFNvdXJjZVxuXHRcdH0gKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBtaXBtYXAgZnJhZ21lbnQgc2hhZGVyIG1vZHVsZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtHUFVTaGFkZXJNb2R1bGV9XG5cdFx0ICovXG5cdFx0dGhpcy5taXBtYXBGcmFnbWVudFNoYWRlck1vZHVsZSA9IGRldmljZS5jcmVhdGVTaGFkZXJNb2R1bGUoIHtcblx0XHRcdGxhYmVsOiAnbWlwbWFwRnJhZ21lbnQnLFxuXHRcdFx0Y29kZTogbWlwbWFwRnJhZ21lbnRTb3VyY2Vcblx0XHR9ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZmxpcFkgZnJhZ21lbnQgc2hhZGVyIG1vZHVsZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtHUFVTaGFkZXJNb2R1bGV9XG5cdFx0ICovXG5cdFx0dGhpcy5mbGlwWUZyYWdtZW50U2hhZGVyTW9kdWxlID0gZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSgge1xuXHRcdFx0bGFiZWw6ICdmbGlwWUZyYWdtZW50Jyxcblx0XHRcdGNvZGU6IGZsaXBZRnJhZ21lbnRTb3VyY2Vcblx0XHR9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcmVuZGVyIHBpcGVsaW5lIGZvciB0aGUgaW50ZXJuYWwgY29weSByZW5kZXIgcGFzcy4gVGhlIHBhc3Ncblx0ICogcmVxdWlyZXMgYSB1bmlxdWUgcmVuZGVyIHBpcGVsaW5lIGZvciBlYWNoIHRleHR1cmUgZm9ybWF0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gVGhlIEdQVSB0ZXh0dXJlIGZvcm1hdFxuXHQgKiBAcmV0dXJuIHtHUFVSZW5kZXJQaXBlbGluZX0gVGhlIEdQVSByZW5kZXIgcGlwZWxpbmUuXG5cdCAqL1xuXHRnZXRUcmFuc2ZlclBpcGVsaW5lKCBmb3JtYXQgKSB7XG5cblx0XHRsZXQgcGlwZWxpbmUgPSB0aGlzLnRyYW5zZmVyUGlwZWxpbmVzWyBmb3JtYXQgXTtcblxuXHRcdGlmICggcGlwZWxpbmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cGlwZWxpbmUgPSB0aGlzLmRldmljZS5jcmVhdGVSZW5kZXJQaXBlbGluZSgge1xuXHRcdFx0XHRsYWJlbDogYG1pcG1hcC0keyBmb3JtYXQgfWAsXG5cdFx0XHRcdHZlcnRleDoge1xuXHRcdFx0XHRcdG1vZHVsZTogdGhpcy5taXBtYXBWZXJ0ZXhTaGFkZXJNb2R1bGUsXG5cdFx0XHRcdFx0ZW50cnlQb2ludDogJ21haW4nXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZyYWdtZW50OiB7XG5cdFx0XHRcdFx0bW9kdWxlOiB0aGlzLm1pcG1hcEZyYWdtZW50U2hhZGVyTW9kdWxlLFxuXHRcdFx0XHRcdGVudHJ5UG9pbnQ6ICdtYWluJyxcblx0XHRcdFx0XHR0YXJnZXRzOiBbIHsgZm9ybWF0IH0gXVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRwcmltaXRpdmU6IHtcblx0XHRcdFx0XHR0b3BvbG9neTogR1BVUHJpbWl0aXZlVG9wb2xvZ3kuVHJpYW5nbGVTdHJpcCxcblx0XHRcdFx0XHRzdHJpcEluZGV4Rm9ybWF0OiBHUFVJbmRleEZvcm1hdC5VaW50MzJcblx0XHRcdFx0fSxcblx0XHRcdFx0bGF5b3V0OiAnYXV0bydcblx0XHRcdH0gKTtcblxuXHRcdFx0dGhpcy50cmFuc2ZlclBpcGVsaW5lc1sgZm9ybWF0IF0gPSBwaXBlbGluZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwaXBlbGluZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSByZW5kZXIgcGlwZWxpbmUgZm9yIHRoZSBmbGlwWSByZW5kZXIgcGFzcy4gVGhlIHBhc3Ncblx0ICogcmVxdWlyZXMgYSB1bmlxdWUgcmVuZGVyIHBpcGVsaW5lIGZvciBlYWNoIHRleHR1cmUgZm9ybWF0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gVGhlIEdQVSB0ZXh0dXJlIGZvcm1hdFxuXHQgKiBAcmV0dXJuIHtHUFVSZW5kZXJQaXBlbGluZX0gVGhlIEdQVSByZW5kZXIgcGlwZWxpbmUuXG5cdCAqL1xuXHRnZXRGbGlwWVBpcGVsaW5lKCBmb3JtYXQgKSB7XG5cblx0XHRsZXQgcGlwZWxpbmUgPSB0aGlzLmZsaXBZUGlwZWxpbmVzWyBmb3JtYXQgXTtcblxuXHRcdGlmICggcGlwZWxpbmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cGlwZWxpbmUgPSB0aGlzLmRldmljZS5jcmVhdGVSZW5kZXJQaXBlbGluZSgge1xuXHRcdFx0XHRsYWJlbDogYGZsaXBZLSR7IGZvcm1hdCB9YCxcblx0XHRcdFx0dmVydGV4OiB7XG5cdFx0XHRcdFx0bW9kdWxlOiB0aGlzLm1pcG1hcFZlcnRleFNoYWRlck1vZHVsZSxcblx0XHRcdFx0XHRlbnRyeVBvaW50OiAnbWFpbidcblx0XHRcdFx0fSxcblx0XHRcdFx0ZnJhZ21lbnQ6IHtcblx0XHRcdFx0XHRtb2R1bGU6IHRoaXMuZmxpcFlGcmFnbWVudFNoYWRlck1vZHVsZSxcblx0XHRcdFx0XHRlbnRyeVBvaW50OiAnbWFpbicsXG5cdFx0XHRcdFx0dGFyZ2V0czogWyB7IGZvcm1hdCB9IF1cblx0XHRcdFx0fSxcblx0XHRcdFx0cHJpbWl0aXZlOiB7XG5cdFx0XHRcdFx0dG9wb2xvZ3k6IEdQVVByaW1pdGl2ZVRvcG9sb2d5LlRyaWFuZ2xlU3RyaXAsXG5cdFx0XHRcdFx0c3RyaXBJbmRleEZvcm1hdDogR1BVSW5kZXhGb3JtYXQuVWludDMyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGxheW91dDogJ2F1dG8nXG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuZmxpcFlQaXBlbGluZXNbIGZvcm1hdCBdID0gcGlwZWxpbmU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcGlwZWxpbmU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGbGlwIHRoZSBjb250ZW50cyBvZiB0aGUgZ2l2ZW4gR1BVIHRleHR1cmUgYWxvbmcgaXRzIHZlcnRpY2FsIGF4aXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7R1BVVGV4dHVyZX0gdGV4dHVyZUdQVSAtIFRoZSBHUFUgdGV4dHVyZSBvYmplY3QuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0ZXh0dXJlR1BVRGVzY3JpcHRvciAtIFRoZSB0ZXh0dXJlIGRlc2NyaXB0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYmFzZUFycmF5TGF5ZXI9MF0gLSBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IGFycmF5IGxheWVyIGFjY2Vzc2libGUgdG8gdGhlIHRleHR1cmUgdmlldy5cblx0ICovXG5cdGZsaXBZKCB0ZXh0dXJlR1BVLCB0ZXh0dXJlR1BVRGVzY3JpcHRvciwgYmFzZUFycmF5TGF5ZXIgPSAwICkge1xuXG5cdFx0Y29uc3QgZm9ybWF0ID0gdGV4dHVyZUdQVURlc2NyaXB0b3IuZm9ybWF0O1xuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGV4dHVyZUdQVURlc2NyaXB0b3Iuc2l6ZTtcblxuXHRcdGNvbnN0IHRyYW5zZmVyUGlwZWxpbmUgPSB0aGlzLmdldFRyYW5zZmVyUGlwZWxpbmUoIGZvcm1hdCApO1xuXHRcdGNvbnN0IGZsaXBZUGlwZWxpbmUgPSB0aGlzLmdldEZsaXBZUGlwZWxpbmUoIGZvcm1hdCApO1xuXG5cdFx0Y29uc3QgdGVtcFRleHR1cmUgPSB0aGlzLmRldmljZS5jcmVhdGVUZXh0dXJlKCB7XG5cdFx0XHRzaXplOiB7IHdpZHRoLCBoZWlnaHQsIGRlcHRoT3JBcnJheUxheWVyczogMSB9LFxuXHRcdFx0Zm9ybWF0LFxuXHRcdFx0dXNhZ2U6IEdQVVRleHR1cmVVc2FnZS5SRU5ERVJfQVRUQUNITUVOVCB8IEdQVVRleHR1cmVVc2FnZS5URVhUVVJFX0JJTkRJTkdcblx0XHR9ICk7XG5cblx0XHRjb25zdCBzcmNWaWV3ID0gdGV4dHVyZUdQVS5jcmVhdGVWaWV3KCB7XG5cdFx0XHRiYXNlTWlwTGV2ZWw6IDAsXG5cdFx0XHRtaXBMZXZlbENvdW50OiAxLFxuXHRcdFx0ZGltZW5zaW9uOiBHUFVUZXh0dXJlVmlld0RpbWVuc2lvbi5Ud29ELFxuXHRcdFx0YmFzZUFycmF5TGF5ZXJcblx0XHR9ICk7XG5cblx0XHRjb25zdCBkc3RWaWV3ID0gdGVtcFRleHR1cmUuY3JlYXRlVmlldygge1xuXHRcdFx0YmFzZU1pcExldmVsOiAwLFxuXHRcdFx0bWlwTGV2ZWxDb3VudDogMSxcblx0XHRcdGRpbWVuc2lvbjogR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24uVHdvRCxcblx0XHRcdGJhc2VBcnJheUxheWVyOiAwXG5cdFx0fSApO1xuXG5cdFx0Y29uc3QgY29tbWFuZEVuY29kZXIgPSB0aGlzLmRldmljZS5jcmVhdGVDb21tYW5kRW5jb2Rlcigge30gKTtcblxuXHRcdGNvbnN0IHBhc3MgPSAoIHBpcGVsaW5lLCBzb3VyY2VWaWV3LCBkZXN0aW5hdGlvblZpZXcgKSA9PiB7XG5cblx0XHRcdGNvbnN0IGJpbmRHcm91cExheW91dCA9IHBpcGVsaW5lLmdldEJpbmRHcm91cExheW91dCggMCApOyAvLyBAVE9ETzogQ29uc2lkZXIgbWFraW5nIHRoaXMgc3RhdGljLlxuXG5cdFx0XHRjb25zdCBiaW5kR3JvdXAgPSB0aGlzLmRldmljZS5jcmVhdGVCaW5kR3JvdXAoIHtcblx0XHRcdFx0bGF5b3V0OiBiaW5kR3JvdXBMYXlvdXQsXG5cdFx0XHRcdGVudHJpZXM6IFsge1xuXHRcdFx0XHRcdGJpbmRpbmc6IDAsXG5cdFx0XHRcdFx0cmVzb3VyY2U6IHRoaXMuZmxpcFlTYW1wbGVyXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRiaW5kaW5nOiAxLFxuXHRcdFx0XHRcdHJlc291cmNlOiBzb3VyY2VWaWV3XG5cdFx0XHRcdH0gXVxuXHRcdFx0fSApO1xuXG5cdFx0XHRjb25zdCBwYXNzRW5jb2RlciA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcygge1xuXHRcdFx0XHRjb2xvckF0dGFjaG1lbnRzOiBbIHtcblx0XHRcdFx0XHR2aWV3OiBkZXN0aW5hdGlvblZpZXcsXG5cdFx0XHRcdFx0bG9hZE9wOiBHUFVMb2FkT3AuQ2xlYXIsXG5cdFx0XHRcdFx0c3RvcmVPcDogR1BVU3RvcmVPcC5TdG9yZSxcblx0XHRcdFx0XHRjbGVhclZhbHVlOiBbIDAsIDAsIDAsIDAgXVxuXHRcdFx0XHR9IF1cblx0XHRcdH0gKTtcblxuXHRcdFx0cGFzc0VuY29kZXIuc2V0UGlwZWxpbmUoIHBpcGVsaW5lICk7XG5cdFx0XHRwYXNzRW5jb2Rlci5zZXRCaW5kR3JvdXAoIDAsIGJpbmRHcm91cCApO1xuXHRcdFx0cGFzc0VuY29kZXIuZHJhdyggNCwgMSwgMCwgMCApO1xuXHRcdFx0cGFzc0VuY29kZXIuZW5kKCk7XG5cblx0XHR9O1xuXG5cdFx0cGFzcyggdHJhbnNmZXJQaXBlbGluZSwgc3JjVmlldywgZHN0VmlldyApO1xuXHRcdHBhc3MoIGZsaXBZUGlwZWxpbmUsIGRzdFZpZXcsIHNyY1ZpZXcgKTtcblxuXHRcdHRoaXMuZGV2aWNlLnF1ZXVlLnN1Ym1pdCggWyBjb21tYW5kRW5jb2Rlci5maW5pc2goKSBdICk7XG5cblx0XHR0ZW1wVGV4dHVyZS5kZXN0cm95KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgbWlwbWFwcyBmb3IgdGhlIGdpdmVuIEdQVSB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0dQVVRleHR1cmV9IHRleHR1cmVHUFUgLSBUaGUgR1BVIHRleHR1cmUgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGV4dHVyZUdQVURlc2NyaXB0b3IgLSBUaGUgdGV4dHVyZSBkZXNjcmlwdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Jhc2VBcnJheUxheWVyPTBdIC0gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBhcnJheSBsYXllciBhY2Nlc3NpYmxlIHRvIHRoZSB0ZXh0dXJlIHZpZXcuXG5cdCAqL1xuXHRnZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmVHUFUsIHRleHR1cmVHUFVEZXNjcmlwdG9yLCBiYXNlQXJyYXlMYXllciA9IDAgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlRGF0YSA9IHRoaXMuZ2V0KCB0ZXh0dXJlR1BVICk7XG5cblx0XHRpZiAoIHRleHR1cmVEYXRhLnVzZUNvdW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRleHR1cmVEYXRhLnVzZUNvdW50ID0gMDtcblx0XHRcdHRleHR1cmVEYXRhLmxheWVycyA9IFtdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcGFzc2VzID0gdGV4dHVyZURhdGEubGF5ZXJzWyBiYXNlQXJyYXlMYXllciBdIHx8IHRoaXMuX21pcG1hcENyZWF0ZUJ1bmRsZXMoIHRleHR1cmVHUFUsIHRleHR1cmVHUFVEZXNjcmlwdG9yLCBiYXNlQXJyYXlMYXllciApO1xuXG5cdFx0Y29uc3QgY29tbWFuZEVuY29kZXIgPSB0aGlzLmRldmljZS5jcmVhdGVDb21tYW5kRW5jb2Rlcigge30gKTtcblxuXHRcdHRoaXMuX21pcG1hcFJ1bkJ1bmRsZXMoIGNvbW1hbmRFbmNvZGVyLCBwYXNzZXMgKTtcblxuXHRcdHRoaXMuZGV2aWNlLnF1ZXVlLnN1Ym1pdCggWyBjb21tYW5kRW5jb2Rlci5maW5pc2goKSBdICk7XG5cblx0XHRpZiAoIHRleHR1cmVEYXRhLnVzZUNvdW50ICE9PSAwICkgdGV4dHVyZURhdGEubGF5ZXJzWyBiYXNlQXJyYXlMYXllciBdID0gcGFzc2VzO1xuXG5cdFx0dGV4dHVyZURhdGEudXNlQ291bnQgKys7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTaW5jZSBtdWx0aXBsZSBjb3B5IHJlbmRlciBwYXNzZXMgYXJlIHJlcXVpcmVkIHRvIGdlbmVyYXRlIG1pcG1hcHMsIHRoZSBwYXNzZXNcblx0ICogYXJlIG1hbmFnZWQgYXMgcmVuZGVyIGJ1bmRsZXMgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtHUFVUZXh0dXJlfSB0ZXh0dXJlR1BVIC0gVGhlIEdQVSB0ZXh0dXJlIG9iamVjdC5cblx0ICogQHBhcmFtIHtPYmplY3R9IHRleHR1cmVHUFVEZXNjcmlwdG9yIC0gVGhlIHRleHR1cmUgZGVzY3JpcHRvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGJhc2VBcnJheUxheWVyIC0gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBhcnJheSBsYXllciBhY2Nlc3NpYmxlIHRvIHRoZSB0ZXh0dXJlIHZpZXcuXG5cdCAqIEByZXR1cm4ge0FycmF5PE9iamVjdD59IEFuIGFycmF5IG9mIHJlbmRlciBidW5kbGVzLlxuXHQgKi9cblx0X21pcG1hcENyZWF0ZUJ1bmRsZXMoIHRleHR1cmVHUFUsIHRleHR1cmVHUFVEZXNjcmlwdG9yLCBiYXNlQXJyYXlMYXllciApIHtcblxuXHRcdGNvbnN0IHBpcGVsaW5lID0gdGhpcy5nZXRUcmFuc2ZlclBpcGVsaW5lKCB0ZXh0dXJlR1BVRGVzY3JpcHRvci5mb3JtYXQgKTtcblxuXHRcdGNvbnN0IGJpbmRHcm91cExheW91dCA9IHBpcGVsaW5lLmdldEJpbmRHcm91cExheW91dCggMCApOyAvLyBAVE9ETzogQ29uc2lkZXIgbWFraW5nIHRoaXMgc3RhdGljLlxuXG5cdFx0bGV0IHNyY1ZpZXcgPSB0ZXh0dXJlR1BVLmNyZWF0ZVZpZXcoIHtcblx0XHRcdGJhc2VNaXBMZXZlbDogMCxcblx0XHRcdG1pcExldmVsQ291bnQ6IDEsXG5cdFx0XHRkaW1lbnNpb246IEdQVVRleHR1cmVWaWV3RGltZW5zaW9uLlR3b0QsXG5cdFx0XHRiYXNlQXJyYXlMYXllclxuXHRcdH0gKTtcblxuXHRcdGNvbnN0IHBhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDwgdGV4dHVyZUdQVURlc2NyaXB0b3IubWlwTGV2ZWxDb3VudDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYmluZEdyb3VwID0gdGhpcy5kZXZpY2UuY3JlYXRlQmluZEdyb3VwKCB7XG5cdFx0XHRcdGxheW91dDogYmluZEdyb3VwTGF5b3V0LFxuXHRcdFx0XHRlbnRyaWVzOiBbIHtcblx0XHRcdFx0XHRiaW5kaW5nOiAwLFxuXHRcdFx0XHRcdHJlc291cmNlOiB0aGlzLm1pcG1hcFNhbXBsZXJcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGJpbmRpbmc6IDEsXG5cdFx0XHRcdFx0cmVzb3VyY2U6IHNyY1ZpZXdcblx0XHRcdFx0fSBdXG5cdFx0XHR9ICk7XG5cblx0XHRcdGNvbnN0IGRzdFZpZXcgPSB0ZXh0dXJlR1BVLmNyZWF0ZVZpZXcoIHtcblx0XHRcdFx0YmFzZU1pcExldmVsOiBpLFxuXHRcdFx0XHRtaXBMZXZlbENvdW50OiAxLFxuXHRcdFx0XHRkaW1lbnNpb246IEdQVVRleHR1cmVWaWV3RGltZW5zaW9uLlR3b0QsXG5cdFx0XHRcdGJhc2VBcnJheUxheWVyXG5cdFx0XHR9ICk7XG5cblx0XHRcdGNvbnN0IHBhc3NEZXNjcmlwdG9yID0ge1xuXHRcdFx0XHRjb2xvckF0dGFjaG1lbnRzOiBbIHtcblx0XHRcdFx0XHR2aWV3OiBkc3RWaWV3LFxuXHRcdFx0XHRcdGxvYWRPcDogR1BVTG9hZE9wLkNsZWFyLFxuXHRcdFx0XHRcdHN0b3JlT3A6IEdQVVN0b3JlT3AuU3RvcmUsXG5cdFx0XHRcdFx0Y2xlYXJWYWx1ZTogWyAwLCAwLCAwLCAwIF1cblx0XHRcdFx0fSBdXG5cdFx0XHR9O1xuXG5cdFx0XHRjb25zdCBwYXNzRW5jb2RlciA9IHRoaXMuZGV2aWNlLmNyZWF0ZVJlbmRlckJ1bmRsZUVuY29kZXIoIHtcblx0XHRcdFx0Y29sb3JGb3JtYXRzOiBbIHRleHR1cmVHUFVEZXNjcmlwdG9yLmZvcm1hdCBdXG5cdFx0XHR9ICk7XG5cblx0XHRcdHBhc3NFbmNvZGVyLnNldFBpcGVsaW5lKCBwaXBlbGluZSApO1xuXHRcdFx0cGFzc0VuY29kZXIuc2V0QmluZEdyb3VwKCAwLCBiaW5kR3JvdXAgKTtcblx0XHRcdHBhc3NFbmNvZGVyLmRyYXcoIDQsIDEsIDAsIDAgKTtcblxuXHRcdFx0cGFzc2VzLnB1c2goIHtcblx0XHRcdFx0cmVuZGVyQnVuZGxlczogWyBwYXNzRW5jb2Rlci5maW5pc2goKSBdLFxuXHRcdFx0XHRwYXNzRGVzY3JpcHRvclxuXHRcdFx0fSApO1xuXG5cdFx0XHRzcmNWaWV3ID0gZHN0VmlldztcblxuXHRcdH1cblxuXHRcdHJldHVybiBwYXNzZXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeGVjdXRlcyB0aGUgcmVuZGVyIGJ1bmRsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7R1BVQ29tbWFuZEVuY29kZXJ9IGNvbW1hbmRFbmNvZGVyIC0gVGhlIEdQVSBjb21tYW5kIGVuY29kZXIuXG5cdCAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gcGFzc2VzIC0gQW4gYXJyYXkgb2YgcmVuZGVyIGJ1bmRsZXMuXG5cdCAqL1xuXHRfbWlwbWFwUnVuQnVuZGxlcyggY29tbWFuZEVuY29kZXIsIHBhc3NlcyApIHtcblxuXHRcdGNvbnN0IGxldmVscyA9IHBhc3Nlcy5sZW5ndGg7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBsZXZlbHM7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBhc3MgPSBwYXNzZXNbIGkgXTtcblxuXHRcdFx0Y29uc3QgcGFzc0VuY29kZXIgPSBjb21tYW5kRW5jb2Rlci5iZWdpblJlbmRlclBhc3MoIHBhc3MucGFzc0Rlc2NyaXB0b3IgKTtcblxuXHRcdFx0cGFzc0VuY29kZXIuZXhlY3V0ZUJ1bmRsZXMoIHBhc3MucmVuZGVyQnVuZGxlcyApO1xuXG5cdFx0XHRwYXNzRW5jb2Rlci5lbmQoKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViR1BVVGV4dHVyZVBhc3NVdGlscztcbiIsImltcG9ydCB7XG5cdEdQVVRleHR1cmVGb3JtYXQsIEdQVUFkZHJlc3NNb2RlLCBHUFVGaWx0ZXJNb2RlLCBHUFVUZXh0dXJlRGltZW5zaW9uLCBHUFVGZWF0dXJlTmFtZVxufSBmcm9tICcuL1dlYkdQVUNvbnN0YW50cy5qcyc7XG5cbmltcG9ydCBXZWJHUFVUZXh0dXJlUGFzc1V0aWxzIGZyb20gJy4vV2ViR1BVVGV4dHVyZVBhc3NVdGlscy5qcyc7XG5cbmltcG9ydCB7XG5cdEJ5dGVUeXBlLCBTaG9ydFR5cGUsXG5cdE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLFxuXHRSZXBlYXRXcmFwcGluZywgTWlycm9yZWRSZXBlYXRXcmFwcGluZyxcblx0UkdCX0VUQzJfRm9ybWF0LCBSR0JBX0VUQzJfRUFDX0Zvcm1hdCxcblx0UkdCQUZvcm1hdCwgUkdCRm9ybWF0LCBSZWRGb3JtYXQsIFJHRm9ybWF0LCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDVfRm9ybWF0LCBVbnNpZ25lZEJ5dGVUeXBlLCBGbG9hdFR5cGUsIEhhbGZGbG9hdFR5cGUsIFNSR0JDb2xvclNwYWNlLCBEZXB0aEZvcm1hdCwgRGVwdGhTdGVuY2lsRm9ybWF0LFxuXHRSR0JBX0FTVENfNHg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDVfRm9ybWF0LCBSR0JBX0FTVENfNng1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDVfRm9ybWF0LCBSR0JBX0FTVENfOHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4OF9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCxcblx0UkdCQV9BU1RDXzEweDZfRm9ybWF0LCBSR0JBX0FTVENfMTB4OF9Gb3JtYXQsIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQsIFVuc2lnbmVkSW50VHlwZSwgVW5zaWduZWRTaG9ydFR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSwgVW5zaWduZWRJbnQ1OTk5VHlwZSxcblx0TmV2ZXJDb21wYXJlLCBBbHdheXNDb21wYXJlLCBMZXNzQ29tcGFyZSwgTGVzc0VxdWFsQ29tcGFyZSwgRXF1YWxDb21wYXJlLCBHcmVhdGVyRXF1YWxDb21wYXJlLCBHcmVhdGVyQ29tcGFyZSwgTm90RXF1YWxDb21wYXJlLCBJbnRUeXBlLCBSZWRJbnRlZ2VyRm9ybWF0LCBSR0ludGVnZXJGb3JtYXQsIFJHQkFJbnRlZ2VyRm9ybWF0LFxuXHRDdWJlUmVmbGVjdGlvbk1hcHBpbmcsIEN1YmVSZWZyYWN0aW9uTWFwcGluZywgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nXG59IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBDdWJlVGV4dHVyZSB9IGZyb20gJy4uLy4uLy4uL3RleHR1cmVzL0N1YmVUZXh0dXJlLmpzJztcbmltcG9ydCB7IERlcHRoVGV4dHVyZSB9IGZyb20gJy4uLy4uLy4uL3RleHR1cmVzL0RlcHRoVGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vLi4vLi4vdGV4dHVyZXMvVGV4dHVyZS5qcyc7XG5cbmNvbnN0IF9jb21wYXJlVG9XZWJHUFUgPSB7XG5cdFsgTmV2ZXJDb21wYXJlIF06ICduZXZlcicsXG5cdFsgTGVzc0NvbXBhcmUgXTogJ2xlc3MnLFxuXHRbIEVxdWFsQ29tcGFyZSBdOiAnZXF1YWwnLFxuXHRbIExlc3NFcXVhbENvbXBhcmUgXTogJ2xlc3MtZXF1YWwnLFxuXHRbIEdyZWF0ZXJDb21wYXJlIF06ICdncmVhdGVyJyxcblx0WyBHcmVhdGVyRXF1YWxDb21wYXJlIF06ICdncmVhdGVyLWVxdWFsJyxcblx0WyBBbHdheXNDb21wYXJlIF06ICdhbHdheXMnLFxuXHRbIE5vdEVxdWFsQ29tcGFyZSBdOiAnbm90LWVxdWFsJ1xufTtcblxuY29uc3QgX2ZsaXBNYXAgPSBbIDAsIDEsIDMsIDIsIDQsIDUgXTtcblxuLyoqXG4gKiBBIFdlYkdQVSBiYWNrZW5kIHV0aWxpdHkgbW9kdWxlIGZvciBtYW5hZ2luZyB0ZXh0dXJlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBXZWJHUFVUZXh0dXJlVXRpbHMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHV0aWxpdHkgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdQVUJhY2tlbmR9IGJhY2tlbmQgLSBUaGUgV2ViR1BVIGJhY2tlbmQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYmFja2VuZCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBXZWJHUFUgYmFja2VuZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHUFVCYWNrZW5kfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgcGFzcyB1dGlscy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/V2ViR1BVVGV4dHVyZVBhc3NVdGlsc31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fcGFzc1V0aWxzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSBmb3IgbWFuYWdpbmcgZGVmYXVsdCB0ZXh0dXJlcy4gVGhlIGtleVxuXHRcdCAqIGlzIHRoZSB0ZXh0dXJlIGZvcm1hdCwgdGhlIHZhbHVlIHRoZSB0ZXh0dXJlIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLFRleHR1cmU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZGVmYXVsdFRleHR1cmUgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSBmb3IgbWFuYWdpbmcgZGVmYXVsdCBjdWJlIHRleHR1cmVzLiBUaGUga2V5XG5cdFx0ICogaXMgdGhlIHRleHR1cmUgZm9ybWF0LCB0aGUgdmFsdWUgdGhlIHRleHR1cmUgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsQ3ViZVRleHR1cmU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZGVmYXVsdEN1YmVUZXh0dXJlID0ge307XG5cblx0XHQvKipcblx0XHQgKiBBIGRlZmF1bHQgdmlkZW8gZnJhbWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1ZpZGVvRnJhbWV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZGVmYXVsdFZpZGVvRnJhbWUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgY29sb3IgYXR0YWNobWVudCBvZiB0aGUgZGVmYXVsdCBmcmFtZWJ1ZmZlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/R1BVVGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jb2xvckJ1ZmZlciA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIHRoZSBkZXB0aCBhdHRhY2htZW50IG9mIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0RlcHRoVGV4dHVyZX1cblx0XHQgKi9cblx0XHR0aGlzLmRlcHRoVGV4dHVyZSA9IG5ldyBEZXB0aFRleHR1cmUoKTtcblx0XHR0aGlzLmRlcHRoVGV4dHVyZS5uYW1lID0gJ2RlcHRoQnVmZmVyJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBHUFUgc2FtcGxlciBmb3IgdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSB0aGUgc2FtcGxlciBmb3IuXG5cdCAqL1xuXHRjcmVhdGVTYW1wbGVyKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgYmFja2VuZCA9IHRoaXMuYmFja2VuZDtcblx0XHRjb25zdCBkZXZpY2UgPSBiYWNrZW5kLmRldmljZTtcblxuXHRcdGNvbnN0IHRleHR1cmVHUFUgPSBiYWNrZW5kLmdldCggdGV4dHVyZSApO1xuXG5cdFx0Y29uc3Qgc2FtcGxlckRlc2NyaXB0b3JHUFUgPSB7XG5cdFx0XHRhZGRyZXNzTW9kZVU6IHRoaXMuX2NvbnZlcnRBZGRyZXNzTW9kZSggdGV4dHVyZS53cmFwUyApLFxuXHRcdFx0YWRkcmVzc01vZGVWOiB0aGlzLl9jb252ZXJ0QWRkcmVzc01vZGUoIHRleHR1cmUud3JhcFQgKSxcblx0XHRcdGFkZHJlc3NNb2RlVzogdGhpcy5fY29udmVydEFkZHJlc3NNb2RlKCB0ZXh0dXJlLndyYXBSICksXG5cdFx0XHRtYWdGaWx0ZXI6IHRoaXMuX2NvbnZlcnRGaWx0ZXJNb2RlKCB0ZXh0dXJlLm1hZ0ZpbHRlciApLFxuXHRcdFx0bWluRmlsdGVyOiB0aGlzLl9jb252ZXJ0RmlsdGVyTW9kZSggdGV4dHVyZS5taW5GaWx0ZXIgKSxcblx0XHRcdG1pcG1hcEZpbHRlcjogdGhpcy5fY29udmVydEZpbHRlck1vZGUoIHRleHR1cmUubWluRmlsdGVyICksXG5cdFx0XHRtYXhBbmlzb3Ryb3B5OiAxXG5cdFx0fTtcblxuXHRcdC8vIGFuaXNvdHJvcHkgY2FuIG9ubHkgYmUgdXNlZCB3aGVuIGFsbCBmaWx0ZXIgbW9kZXMgYXJlIHNldCB0byBsaW5lYXIuXG5cblx0XHRpZiAoIHNhbXBsZXJEZXNjcmlwdG9yR1BVLm1hZ0ZpbHRlciA9PT0gR1BVRmlsdGVyTW9kZS5MaW5lYXIgJiYgc2FtcGxlckRlc2NyaXB0b3JHUFUubWluRmlsdGVyID09PSBHUFVGaWx0ZXJNb2RlLkxpbmVhciAmJiBzYW1wbGVyRGVzY3JpcHRvckdQVS5taXBtYXBGaWx0ZXIgPT09IEdQVUZpbHRlck1vZGUuTGluZWFyICkge1xuXG5cdFx0XHRzYW1wbGVyRGVzY3JpcHRvckdQVS5tYXhBbmlzb3Ryb3B5ID0gdGV4dHVyZS5hbmlzb3Ryb3B5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlICYmIHRleHR1cmUuY29tcGFyZUZ1bmN0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRzYW1wbGVyRGVzY3JpcHRvckdQVS5jb21wYXJlID0gX2NvbXBhcmVUb1dlYkdQVVsgdGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gXTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVHUFUuc2FtcGxlciA9IGRldmljZS5jcmVhdGVTYW1wbGVyKCBzYW1wbGVyRGVzY3JpcHRvckdQVSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGRlZmF1bHQgdGV4dHVyZSBmb3IgdGhlIGdpdmVuIHRleHR1cmUgdGhhdCBjYW4gYmUgdXNlZFxuXHQgKiBhcyBhIHBsYWNlaG9sZGVyIHVudGlsIHRoZSBhY3R1YWwgdGV4dHVyZSBpcyByZWFkeSBmb3IgdXNhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSBhIGRlZmF1bHQgdGV4dHVyZSBmb3IuXG5cdCAqL1xuXHRjcmVhdGVEZWZhdWx0VGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGxldCB0ZXh0dXJlR1BVO1xuXG5cdFx0Y29uc3QgZm9ybWF0ID0gZ2V0Rm9ybWF0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNDdWJlVGV4dHVyZSApIHtcblxuXHRcdFx0dGV4dHVyZUdQVSA9IHRoaXMuX2dldERlZmF1bHRDdWJlVGV4dHVyZUdQVSggZm9ybWF0ICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkge1xuXG5cdFx0XHR0aGlzLmJhY2tlbmQuZ2V0KCB0ZXh0dXJlICkuZXh0ZXJuYWxUZXh0dXJlID0gdGhpcy5fZ2V0RGVmYXVsdFZpZGVvRnJhbWUoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRleHR1cmVHUFUgPSB0aGlzLl9nZXREZWZhdWx0VGV4dHVyZUdQVSggZm9ybWF0ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJhY2tlbmQuZ2V0KCB0ZXh0dXJlICkudGV4dHVyZSA9IHRleHR1cmVHUFU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIGEgdGV4dHVyZSBvbiB0aGUgR1BVIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZSBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjcmVhdGVUZXh0dXJlKCB0ZXh0dXJlLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRjb25zdCBiYWNrZW5kID0gdGhpcy5iYWNrZW5kO1xuXHRcdGNvbnN0IHRleHR1cmVEYXRhID0gYmFja2VuZC5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZURhdGEuaW5pdGlhbGl6ZWQgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1dlYkdQVVRleHR1cmVVdGlsczogVGV4dHVyZSBhbHJlYWR5IGluaXRpYWxpemVkLicgKTtcblxuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy5uZWVkc01pcG1hcHMgPT09IHVuZGVmaW5lZCApIG9wdGlvbnMubmVlZHNNaXBtYXBzID0gZmFsc2U7XG5cdFx0aWYgKCBvcHRpb25zLmxldmVscyA9PT0gdW5kZWZpbmVkICkgb3B0aW9ucy5sZXZlbHMgPSAxO1xuXHRcdGlmICggb3B0aW9ucy5kZXB0aCA9PT0gdW5kZWZpbmVkICkgb3B0aW9ucy5kZXB0aCA9IDE7XG5cblx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBsZXZlbHMgfSA9IG9wdGlvbnM7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNGcmFtZWJ1ZmZlclRleHR1cmUgKSB7XG5cblx0XHRcdGlmICggb3B0aW9ucy5yZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5mb3JtYXQgPSB0aGlzLmJhY2tlbmQudXRpbHMuZ2V0Q3VycmVudENvbG9yRm9ybWF0KCBvcHRpb25zLnJlbmRlclRhcmdldCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG9wdGlvbnMuZm9ybWF0ID0gdGhpcy5iYWNrZW5kLnV0aWxzLmdldFByZWZlcnJlZENhbnZhc0Zvcm1hdCgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oIHRleHR1cmUgKTtcblx0XHRjb25zdCBmb3JtYXQgPSB0ZXh0dXJlLmludGVybmFsRm9ybWF0IHx8IG9wdGlvbnMuZm9ybWF0IHx8IGdldEZvcm1hdCggdGV4dHVyZSwgYmFja2VuZC5kZXZpY2UgKTtcblxuXHRcdHRleHR1cmVEYXRhLmZvcm1hdCA9IGZvcm1hdDtcblxuXHRcdGNvbnN0IHsgc2FtcGxlcywgcHJpbWFyeVNhbXBsZXMsIGlzTVNBQSB9ID0gYmFja2VuZC51dGlscy5nZXRUZXh0dXJlU2FtcGxlRGF0YSggdGV4dHVyZSApO1xuXG5cdFx0bGV0IHVzYWdlID0gR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyB8IEdQVVRleHR1cmVVc2FnZS5DT1BZX0RTVCB8IEdQVVRleHR1cmVVc2FnZS5DT1BZX1NSQztcblxuXHRcdGlmICggdGV4dHVyZS5pc1N0b3JhZ2VUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHR1c2FnZSB8PSBHUFVUZXh0dXJlVXNhZ2UuU1RPUkFHRV9CSU5ESU5HO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgIT09IHRydWUgJiYgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgIT09IHRydWUgKSB7XG5cblx0XHRcdHVzYWdlIHw9IEdQVVRleHR1cmVVc2FnZS5SRU5ERVJfQVRUQUNITUVOVDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHRleHR1cmVEZXNjcmlwdG9yR1BVID0ge1xuXHRcdFx0bGFiZWw6IHRleHR1cmUubmFtZSxcblx0XHRcdHNpemU6IHtcblx0XHRcdFx0d2lkdGg6IHdpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRcdFx0ZGVwdGhPckFycmF5TGF5ZXJzOiBkZXB0aCxcblx0XHRcdH0sXG5cdFx0XHRtaXBMZXZlbENvdW50OiBsZXZlbHMsXG5cdFx0XHRzYW1wbGVDb3VudDogcHJpbWFyeVNhbXBsZXMsXG5cdFx0XHRkaW1lbnNpb246IGRpbWVuc2lvbixcblx0XHRcdGZvcm1hdDogZm9ybWF0LFxuXHRcdFx0dXNhZ2U6IHVzYWdlXG5cdFx0fTtcblxuXHRcdC8vIHRleHR1cmUgY3JlYXRpb25cblxuXHRcdGlmICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc3QgdmlkZW8gPSB0ZXh0dXJlLnNvdXJjZS5kYXRhO1xuXHRcdFx0Y29uc3QgdmlkZW9GcmFtZSA9IG5ldyBWaWRlb0ZyYW1lKCB2aWRlbyApO1xuXG5cdFx0XHR0ZXh0dXJlRGVzY3JpcHRvckdQVS5zaXplLndpZHRoID0gdmlkZW9GcmFtZS5kaXNwbGF5V2lkdGg7XG5cdFx0XHR0ZXh0dXJlRGVzY3JpcHRvckdQVS5zaXplLmhlaWdodCA9IHZpZGVvRnJhbWUuZGlzcGxheUhlaWdodDtcblxuXHRcdFx0dmlkZW9GcmFtZS5jbG9zZSgpO1xuXG5cdFx0XHR0ZXh0dXJlRGF0YS5leHRlcm5hbFRleHR1cmUgPSB2aWRlbztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggZm9ybWF0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnV2ViR1BVUmVuZGVyZXI6IFRleHR1cmUgZm9ybWF0IG5vdCBzdXBwb3J0ZWQuJyApO1xuXG5cdFx0XHRcdHRoaXMuY3JlYXRlRGVmYXVsdFRleHR1cmUoIHRleHR1cmUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmVEYXRhLnRleHR1cmUgPSBiYWNrZW5kLmRldmljZS5jcmVhdGVUZXh0dXJlKCB0ZXh0dXJlRGVzY3JpcHRvckdQVSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc01TQUEgKSB7XG5cblx0XHRcdGNvbnN0IG1zYWFUZXh0dXJlRGVzY3JpcHRvckdQVSA9IE9iamVjdC5hc3NpZ24oIHt9LCB0ZXh0dXJlRGVzY3JpcHRvckdQVSApO1xuXG5cdFx0XHRtc2FhVGV4dHVyZURlc2NyaXB0b3JHUFUubGFiZWwgPSBtc2FhVGV4dHVyZURlc2NyaXB0b3JHUFUubGFiZWwgKyAnLW1zYWEnO1xuXHRcdFx0bXNhYVRleHR1cmVEZXNjcmlwdG9yR1BVLnNhbXBsZUNvdW50ID0gc2FtcGxlcztcblxuXHRcdFx0dGV4dHVyZURhdGEubXNhYVRleHR1cmUgPSBiYWNrZW5kLmRldmljZS5jcmVhdGVUZXh0dXJlKCBtc2FhVGV4dHVyZURlc2NyaXB0b3JHUFUgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVEYXRhLmluaXRpYWxpemVkID0gdHJ1ZTtcblxuXHRcdHRleHR1cmVEYXRhLnRleHR1cmVEZXNjcmlwdG9yR1BVID0gdGV4dHVyZURlc2NyaXB0b3JHUFU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgR1BVIGRhdGEgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqL1xuXHRkZXN0cm95VGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IGJhY2tlbmQgPSB0aGlzLmJhY2tlbmQ7XG5cdFx0Y29uc3QgdGV4dHVyZURhdGEgPSBiYWNrZW5kLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlRGF0YS50ZXh0dXJlICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlRGF0YS50ZXh0dXJlLmRlc3Ryb3koKTtcblxuXHRcdGlmICggdGV4dHVyZURhdGEubXNhYVRleHR1cmUgIT09IHVuZGVmaW5lZCApIHRleHR1cmVEYXRhLm1zYWFUZXh0dXJlLmRlc3Ryb3koKTtcblxuXHRcdGJhY2tlbmQuZGVsZXRlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgR1BVIHNhbXBsZXIgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBkZXN0cm95IHRoZSBzYW1wbGVyIGZvci5cblx0ICovXG5cdGRlc3Ryb3lTYW1wbGVyKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgYmFja2VuZCA9IHRoaXMuYmFja2VuZDtcblx0XHRjb25zdCB0ZXh0dXJlRGF0YSA9IGJhY2tlbmQuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRkZWxldGUgdGV4dHVyZURhdGEuc2FtcGxlcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBtaXBtYXBzIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqL1xuXHRnZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlRGF0YSA9IHRoaXMuYmFja2VuZC5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc0N1YmVUZXh0dXJlICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuX2dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZURhdGEudGV4dHVyZSwgdGV4dHVyZURhdGEudGV4dHVyZURlc2NyaXB0b3JHUFUsIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgZGVwdGggPSB0ZXh0dXJlLmltYWdlLmRlcHRoIHx8IDE7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRlcHRoOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuX2dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZURhdGEudGV4dHVyZSwgdGV4dHVyZURhdGEudGV4dHVyZURlc2NyaXB0b3JHUFUsIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY29sb3IgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgY29sb3Jcblx0ICogYXR0YWNobWVudCBvZiB0aGUgZGVmYXVsdCBmcmFtZWJ1ZmZlci5cblx0ICpcblx0ICogQHJldHVybiB7R1BVVGV4dHVyZX0gVGhlIGNvbG9yIGJ1ZmZlci5cblx0ICovXG5cdGdldENvbG9yQnVmZmVyKCkge1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yQnVmZmVyICkgdGhpcy5jb2xvckJ1ZmZlci5kZXN0cm95KCk7XG5cblx0XHRjb25zdCBiYWNrZW5kID0gdGhpcy5iYWNrZW5kO1xuXHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gYmFja2VuZC5nZXREcmF3aW5nQnVmZmVyU2l6ZSgpO1xuXG5cdFx0dGhpcy5jb2xvckJ1ZmZlciA9IGJhY2tlbmQuZGV2aWNlLmNyZWF0ZVRleHR1cmUoIHtcblx0XHRcdGxhYmVsOiAnY29sb3JCdWZmZXInLFxuXHRcdFx0c2l6ZToge1xuXHRcdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0XHRkZXB0aE9yQXJyYXlMYXllcnM6IDFcblx0XHRcdH0sXG5cdFx0XHRzYW1wbGVDb3VudDogYmFja2VuZC51dGlscy5nZXRTYW1wbGVDb3VudCggYmFja2VuZC5yZW5kZXJlci5zYW1wbGVzICksXG5cdFx0XHRmb3JtYXQ6IGJhY2tlbmQudXRpbHMuZ2V0UHJlZmVycmVkQ2FudmFzRm9ybWF0KCksXG5cdFx0XHR1c2FnZTogR1BVVGV4dHVyZVVzYWdlLlJFTkRFUl9BVFRBQ0hNRU5UIHwgR1BVVGV4dHVyZVVzYWdlLkNPUFlfU1JDXG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29sb3JCdWZmZXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBkZXB0aCBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBkZXB0aFxuXHQgKiBhdHRhY2htZW50IG9mIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZXB0aD10cnVlXSAtIFdoZXRoZXIgZGVwdGggaXMgZW5hYmxlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N0ZW5jaWw9ZmFsc2VdIC0gIFdoZXRoZXIgc3RlbmNpbCBpcyBlbmFibGVkIG9yIG5vdC5cblx0ICogQHJldHVybiB7R1BVVGV4dHVyZX0gVGhlIGRlcHRoIGJ1ZmZlci5cblx0ICovXG5cdGdldERlcHRoQnVmZmVyKCBkZXB0aCA9IHRydWUsIHN0ZW5jaWwgPSBmYWxzZSApIHtcblxuXHRcdGNvbnN0IGJhY2tlbmQgPSB0aGlzLmJhY2tlbmQ7XG5cdFx0Y29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBiYWNrZW5kLmdldERyYXdpbmdCdWZmZXJTaXplKCk7XG5cblx0XHRjb25zdCBkZXB0aFRleHR1cmUgPSB0aGlzLmRlcHRoVGV4dHVyZTtcblx0XHRjb25zdCBkZXB0aFRleHR1cmVHUFUgPSBiYWNrZW5kLmdldCggZGVwdGhUZXh0dXJlICkudGV4dHVyZTtcblxuXHRcdGxldCBmb3JtYXQsIHR5cGU7XG5cblx0XHRpZiAoIHN0ZW5jaWwgKSB7XG5cblx0XHRcdGZvcm1hdCA9IERlcHRoU3RlbmNpbEZvcm1hdDtcblx0XHRcdHR5cGUgPSBVbnNpZ25lZEludDI0OFR5cGU7XG5cblx0XHR9IGVsc2UgaWYgKCBkZXB0aCApIHtcblxuXHRcdFx0Zm9ybWF0ID0gRGVwdGhGb3JtYXQ7XG5cdFx0XHR0eXBlID0gVW5zaWduZWRJbnRUeXBlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkZXB0aFRleHR1cmVHUFUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBkZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGggPT09IHdpZHRoICYmIGRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgPT09IGhlaWdodCAmJiBkZXB0aFRleHR1cmUuZm9ybWF0ID09PSBmb3JtYXQgJiYgZGVwdGhUZXh0dXJlLnR5cGUgPT09IHR5cGUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGRlcHRoVGV4dHVyZUdQVTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRlc3Ryb3lUZXh0dXJlKCBkZXB0aFRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdGRlcHRoVGV4dHVyZS5uYW1lID0gJ2RlcHRoQnVmZmVyJztcblx0XHRkZXB0aFRleHR1cmUuZm9ybWF0ID0gZm9ybWF0O1xuXHRcdGRlcHRoVGV4dHVyZS50eXBlID0gdHlwZTtcblx0XHRkZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGggPSB3aWR0aDtcblx0XHRkZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dGhpcy5jcmVhdGVUZXh0dXJlKCBkZXB0aFRleHR1cmUsIHsgd2lkdGgsIGhlaWdodCB9ICk7XG5cblx0XHRyZXR1cm4gYmFja2VuZC5nZXQoIGRlcHRoVGV4dHVyZSApLnRleHR1cmU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGxvYWRzIHRoZSB1cGRhdGVkIHRleHR1cmUgZGF0YSB0byB0aGUgR1BVLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyLlxuXHQgKi9cblx0dXBkYXRlVGV4dHVyZSggdGV4dHVyZSwgb3B0aW9ucyApIHtcblxuXHRcdGNvbnN0IHRleHR1cmVEYXRhID0gdGhpcy5iYWNrZW5kLmdldCggdGV4dHVyZSApO1xuXG5cdFx0Y29uc3QgeyB0ZXh0dXJlRGVzY3JpcHRvckdQVSB9ID0gdGV4dHVyZURhdGE7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlIHx8ICggdGV4dHVyZURlc2NyaXB0b3JHUFUgPT09IHVuZGVmaW5lZCAvKiB1bnN1cHBvcnRlZCB0ZXh0dXJlIGZvcm1hdCAqLyApIClcblx0XHRcdHJldHVybjtcblxuXHRcdC8vIHRyYW5zZmVyIHRleHR1cmUgZGF0YVxuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdHRoaXMuX2NvcHlCdWZmZXJUb1RleHR1cmUoIG9wdGlvbnMuaW1hZ2UsIHRleHR1cmVEYXRhLnRleHR1cmUsIHRleHR1cmVEZXNjcmlwdG9yR1BVLCAwLCB0ZXh0dXJlLmZsaXBZICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5pbWFnZS5kZXB0aDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLl9jb3B5QnVmZmVyVG9UZXh0dXJlKCBvcHRpb25zLmltYWdlLCB0ZXh0dXJlRGF0YS50ZXh0dXJlLCB0ZXh0dXJlRGVzY3JpcHRvckdQVSwgaSwgdGV4dHVyZS5mbGlwWSwgaSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdHRoaXMuX2NvcHlDb21wcmVzc2VkQnVmZmVyVG9UZXh0dXJlKCB0ZXh0dXJlLm1pcG1hcHMsIHRleHR1cmVEYXRhLnRleHR1cmUsIHRleHR1cmVEZXNjcmlwdG9yR1BVICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ3ViZVRleHR1cmUgKSB7XG5cblx0XHRcdHRoaXMuX2NvcHlDdWJlTWFwVG9UZXh0dXJlKCBvcHRpb25zLmltYWdlcywgdGV4dHVyZURhdGEudGV4dHVyZSwgdGV4dHVyZURlc2NyaXB0b3JHUFUsIHRleHR1cmUuZmxpcFkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKSB7XG5cblx0XHRcdGNvbnN0IHZpZGVvID0gdGV4dHVyZS5zb3VyY2UuZGF0YTtcblxuXHRcdFx0dGV4dHVyZURhdGEuZXh0ZXJuYWxUZXh0dXJlID0gdmlkZW87XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLl9jb3B5SW1hZ2VUb1RleHR1cmUoIG9wdGlvbnMuaW1hZ2UsIHRleHR1cmVEYXRhLnRleHR1cmUsIHRleHR1cmVEZXNjcmlwdG9yR1BVLCAwLCB0ZXh0dXJlLmZsaXBZICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dGV4dHVyZURhdGEudmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGV4dHVyZSBkYXRhIGFzIGEgdHlwZWQgYXJyYXkuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBjb3B5LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGNvcHkgb3JpZ2luLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIGNvcHkgb3JpZ2luLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIGNvcHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSBjb3B5LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZmFjZUluZGV4IC0gVGhlIGZhY2UgaW5kZXguXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8VHlwZWRBcnJheT59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSB0eXBlZCBhcnJheSB3aGVuIHRoZSBjb3B5IG9wZXJhdGlvbiBoYXMgZmluaXNoZWQuXG5cdCAqL1xuXHRhc3luYyBjb3B5VGV4dHVyZVRvQnVmZmVyKCB0ZXh0dXJlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBmYWNlSW5kZXggKSB7XG5cblx0XHRjb25zdCBkZXZpY2UgPSB0aGlzLmJhY2tlbmQuZGV2aWNlO1xuXG5cdFx0Y29uc3QgdGV4dHVyZURhdGEgPSB0aGlzLmJhY2tlbmQuZ2V0KCB0ZXh0dXJlICk7XG5cdFx0Y29uc3QgdGV4dHVyZUdQVSA9IHRleHR1cmVEYXRhLnRleHR1cmU7XG5cdFx0Y29uc3QgZm9ybWF0ID0gdGV4dHVyZURhdGEudGV4dHVyZURlc2NyaXB0b3JHUFUuZm9ybWF0O1xuXHRcdGNvbnN0IGJ5dGVzUGVyVGV4ZWwgPSB0aGlzLl9nZXRCeXRlc1BlclRleGVsKCBmb3JtYXQgKTtcblxuXHRcdGxldCBieXRlc1BlclJvdyA9IHdpZHRoICogYnl0ZXNQZXJUZXhlbDtcblx0XHRieXRlc1BlclJvdyA9IE1hdGguY2VpbCggYnl0ZXNQZXJSb3cgLyAyNTYgKSAqIDI1NjsgLy8gQWxpZ24gdG8gMjU2IGJ5dGVzXG5cblx0XHRjb25zdCByZWFkQnVmZmVyID0gZGV2aWNlLmNyZWF0ZUJ1ZmZlcihcblx0XHRcdHtcblx0XHRcdFx0c2l6ZTogd2lkdGggKiBoZWlnaHQgKiBieXRlc1BlclRleGVsLFxuXHRcdFx0XHR1c2FnZTogR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QgfCBHUFVCdWZmZXJVc2FnZS5NQVBfUkVBRFxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRjb25zdCBlbmNvZGVyID0gZGV2aWNlLmNyZWF0ZUNvbW1hbmRFbmNvZGVyKCk7XG5cblx0XHRlbmNvZGVyLmNvcHlUZXh0dXJlVG9CdWZmZXIoXG5cdFx0XHR7XG5cdFx0XHRcdHRleHR1cmU6IHRleHR1cmVHUFUsXG5cdFx0XHRcdG9yaWdpbjogeyB4LCB5LCB6OiBmYWNlSW5kZXggfSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGJ1ZmZlcjogcmVhZEJ1ZmZlcixcblx0XHRcdFx0Ynl0ZXNQZXJSb3c6IGJ5dGVzUGVyUm93XG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRcdGhlaWdodDogaGVpZ2h0XG5cdFx0XHR9XG5cblx0XHQpO1xuXG5cdFx0Y29uc3QgdHlwZWRBcnJheVR5cGUgPSB0aGlzLl9nZXRUeXBlZEFycmF5VHlwZSggZm9ybWF0ICk7XG5cblx0XHRkZXZpY2UucXVldWUuc3VibWl0KCBbIGVuY29kZXIuZmluaXNoKCkgXSApO1xuXG5cdFx0YXdhaXQgcmVhZEJ1ZmZlci5tYXBBc3luYyggR1BVTWFwTW9kZS5SRUFEICk7XG5cblx0XHRjb25zdCBidWZmZXIgPSByZWFkQnVmZmVyLmdldE1hcHBlZFJhbmdlKCk7XG5cblx0XHRyZXR1cm4gbmV3IHR5cGVkQXJyYXlUeXBlKCBidWZmZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiB0ZXh0dXJlIGlzIGFuIGVudmlyb25tZW50IG1hcC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIHRleHR1cmUgaXMgYW4gZW52aXJvbm1lbnQgbWFwIG9yIG5vdC5cblx0ICovXG5cdF9pc0Vudmlyb25tZW50VGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IG1hcHBpbmcgPSB0ZXh0dXJlLm1hcHBpbmc7XG5cblx0XHRyZXR1cm4gKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApIHx8ICggbWFwcGluZyA9PT0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIHx8IG1hcHBpbmcgPT09IEN1YmVSZWZyYWN0aW9uTWFwcGluZyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGVmYXVsdCBHUFUgdGV4dHVyZSBmb3IgdGhlIGdpdmVuIGZvcm1hdC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCAtIFRoZSBHUFUgZm9ybWF0LlxuXHQgKiBAcmV0dXJuIHtHUFVUZXh0dXJlfSBUaGUgR1BVIHRleHR1cmUuXG5cdCAqL1xuXHRfZ2V0RGVmYXVsdFRleHR1cmVHUFUoIGZvcm1hdCApIHtcblxuXHRcdGxldCBkZWZhdWx0VGV4dHVyZSA9IHRoaXMuZGVmYXVsdFRleHR1cmVbIGZvcm1hdCBdO1xuXG5cdFx0aWYgKCBkZWZhdWx0VGV4dHVyZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblx0XHRcdHRleHR1cmUubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHRcdFx0dGhpcy5jcmVhdGVUZXh0dXJlKCB0ZXh0dXJlLCB7IHdpZHRoOiAxLCBoZWlnaHQ6IDEsIGZvcm1hdCB9ICk7XG5cblx0XHRcdHRoaXMuZGVmYXVsdFRleHR1cmVbIGZvcm1hdCBdID0gZGVmYXVsdFRleHR1cmUgPSB0ZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYmFja2VuZC5nZXQoIGRlZmF1bHRUZXh0dXJlICkudGV4dHVyZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRlZmF1bHQgR1BVIGN1YmUgdGV4dHVyZSBmb3IgdGhlIGdpdmVuIGZvcm1hdC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCAtIFRoZSBHUFUgZm9ybWF0LlxuXHQgKiBAcmV0dXJuIHtHUFVUZXh0dXJlfSBUaGUgR1BVIHRleHR1cmUuXG5cdCAqL1xuXHRfZ2V0RGVmYXVsdEN1YmVUZXh0dXJlR1BVKCBmb3JtYXQgKSB7XG5cblx0XHRsZXQgZGVmYXVsdEN1YmVUZXh0dXJlID0gdGhpcy5kZWZhdWx0VGV4dHVyZVsgZm9ybWF0IF07XG5cblx0XHRpZiAoIGRlZmF1bHRDdWJlVGV4dHVyZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCk7XG5cdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cdFx0XHR0ZXh0dXJlLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cblx0XHRcdHRoaXMuY3JlYXRlVGV4dHVyZSggdGV4dHVyZSwgeyB3aWR0aDogMSwgaGVpZ2h0OiAxLCBkZXB0aDogNiB9ICk7XG5cblx0XHRcdHRoaXMuZGVmYXVsdEN1YmVUZXh0dXJlWyBmb3JtYXQgXSA9IGRlZmF1bHRDdWJlVGV4dHVyZSA9IHRleHR1cmU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5iYWNrZW5kLmdldCggZGVmYXVsdEN1YmVUZXh0dXJlICkudGV4dHVyZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRlZmF1bHQgdmlkZW8gZnJhbWUgdXNlZCBhcyBkZWZhdWx0IGRhdGEgaW4gY29udGV4dCBvZiB2aWRlbyB0ZXh0dXJlcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHJldHVybiB7VmlkZW9GcmFtZX0gVGhlIHZpZGVvIGZyYW1lLlxuXHQgKi9cblx0X2dldERlZmF1bHRWaWRlb0ZyYW1lKCkge1xuXG5cdFx0bGV0IGRlZmF1bHRWaWRlb0ZyYW1lID0gdGhpcy5kZWZhdWx0VmlkZW9GcmFtZTtcblxuXHRcdGlmICggZGVmYXVsdFZpZGVvRnJhbWUgPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IGluaXQgPSB7XG5cdFx0XHRcdHRpbWVzdGFtcDogMCxcblx0XHRcdFx0Y29kZWRXaWR0aDogMSxcblx0XHRcdFx0Y29kZWRIZWlnaHQ6IDEsXG5cdFx0XHRcdGZvcm1hdDogJ1JHQkEnLFxuXHRcdFx0fTtcblxuXHRcdFx0dGhpcy5kZWZhdWx0VmlkZW9GcmFtZSA9IGRlZmF1bHRWaWRlb0ZyYW1lID0gbmV3IFZpZGVvRnJhbWUoIG5ldyBVaW50OEFycmF5KCBbIDAsIDAsIDAsIDB4ZmYgXSApLCBpbml0ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmYXVsdFZpZGVvRnJhbWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGxvYWRzIGN1YmUgdGV4dHVyZSBpbWFnZSBkYXRhIHRvIHRoZSBHUFUgbWVtb3J5LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBpbWFnZXMgLSBUaGUgY3ViZSBpbWFnZSBkYXRhLlxuXHQgKiBAcGFyYW0ge0dQVVRleHR1cmV9IHRleHR1cmVHUFUgLSBUaGUgR1BVIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0ZXh0dXJlRGVzY3JpcHRvckdQVSAtIFRoZSBHUFUgdGV4dHVyZSBkZXNjcmlwdG9yLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGZsaXBZIC0gV2hldGhlciB0byBmbGlwIHRleHR1cmUgZGF0YSBhbG9uZyB0aGVpciB2ZXJ0aWNhbCBheGlzIG9yIG5vdC5cblx0ICovXG5cdF9jb3B5Q3ViZU1hcFRvVGV4dHVyZSggaW1hZ2VzLCB0ZXh0dXJlR1BVLCB0ZXh0dXJlRGVzY3JpcHRvckdQVSwgZmxpcFkgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBpbWFnZSA9IGltYWdlc1sgaSBdO1xuXG5cdFx0XHRjb25zdCBmbGlwSW5kZXggPSBmbGlwWSA9PT0gdHJ1ZSA/IF9mbGlwTWFwWyBpIF0gOiBpO1xuXG5cdFx0XHRpZiAoIGltYWdlLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0dGhpcy5fY29weUJ1ZmZlclRvVGV4dHVyZSggaW1hZ2UuaW1hZ2UsIHRleHR1cmVHUFUsIHRleHR1cmVEZXNjcmlwdG9yR1BVLCBmbGlwSW5kZXgsIGZsaXBZICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5fY29weUltYWdlVG9UZXh0dXJlKCBpbWFnZSwgdGV4dHVyZUdQVSwgdGV4dHVyZURlc2NyaXB0b3JHUFUsIGZsaXBJbmRleCwgZmxpcFkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVXBsb2FkcyB0ZXh0dXJlIGltYWdlIGRhdGEgdG8gdGhlIEdQVSBtZW1vcnkuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudHxJbWFnZUJpdG1hcHxIVE1MQ2FudmFzRWxlbWVudH0gaW1hZ2UgLSBUaGUgaW1hZ2UgZGF0YS5cblx0ICogQHBhcmFtIHtHUFVUZXh0dXJlfSB0ZXh0dXJlR1BVIC0gVGhlIEdQVSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGV4dHVyZURlc2NyaXB0b3JHUFUgLSBUaGUgR1BVIHRleHR1cmUgZGVzY3JpcHRvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG9yaWdpbkRlcHRoIC0gVGhlIG9yaWdpbiBkZXB0aC5cblx0ICogQHBhcmFtIHtib29sZWFufSBmbGlwWSAtIFdoZXRoZXIgdG8gZmxpcCB0ZXh0dXJlIGRhdGEgYWxvbmcgdGhlaXIgdmVydGljYWwgYXhpcyBvciBub3QuXG5cdCAqL1xuXHRfY29weUltYWdlVG9UZXh0dXJlKCBpbWFnZSwgdGV4dHVyZUdQVSwgdGV4dHVyZURlc2NyaXB0b3JHUFUsIG9yaWdpbkRlcHRoLCBmbGlwWSApIHtcblxuXHRcdGNvbnN0IGRldmljZSA9IHRoaXMuYmFja2VuZC5kZXZpY2U7XG5cblx0XHRkZXZpY2UucXVldWUuY29weUV4dGVybmFsSW1hZ2VUb1RleHR1cmUoXG5cdFx0XHR7XG5cdFx0XHRcdHNvdXJjZTogaW1hZ2UsXG5cdFx0XHRcdGZsaXBZOiBmbGlwWVxuXHRcdFx0fSwge1xuXHRcdFx0XHR0ZXh0dXJlOiB0ZXh0dXJlR1BVLFxuXHRcdFx0XHRtaXBMZXZlbDogMCxcblx0XHRcdFx0b3JpZ2luOiB7IHg6IDAsIHk6IDAsIHo6IG9yaWdpbkRlcHRoIH1cblx0XHRcdH0sIHtcblx0XHRcdFx0d2lkdGg6IGltYWdlLndpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodCxcblx0XHRcdFx0ZGVwdGhPckFycmF5TGF5ZXJzOiAxXG5cdFx0XHR9XG5cdFx0KTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHBhc3MgdXRpbHMgc2luZ2xldG9uLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcmV0dXJuIHtXZWJHUFVUZXh0dXJlUGFzc1V0aWxzfSBUaGUgdXRpbHMgaW5zdGFuY2UuXG5cdCAqL1xuXHRfZ2V0UGFzc1V0aWxzKCkge1xuXG5cdFx0bGV0IHBhc3NVdGlscyA9IHRoaXMuX3Bhc3NVdGlscztcblxuXHRcdGlmICggcGFzc1V0aWxzID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9wYXNzVXRpbHMgPSBwYXNzVXRpbHMgPSBuZXcgV2ViR1BVVGV4dHVyZVBhc3NVdGlscyggdGhpcy5iYWNrZW5kLmRldmljZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBhc3NVdGlscztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBtaXBtYXBzIGZvciB0aGUgZ2l2ZW4gR1BVIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7R1BVVGV4dHVyZX0gdGV4dHVyZUdQVSAtIFRoZSBHUFUgdGV4dHVyZSBvYmplY3QuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0ZXh0dXJlRGVzY3JpcHRvckdQVSAtIFRoZSB0ZXh0dXJlIGRlc2NyaXB0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYmFzZUFycmF5TGF5ZXI9MF0gLSBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IGFycmF5IGxheWVyIGFjY2Vzc2libGUgdG8gdGhlIHRleHR1cmUgdmlldy5cblx0ICovXG5cdF9nZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmVHUFUsIHRleHR1cmVEZXNjcmlwdG9yR1BVLCBiYXNlQXJyYXlMYXllciA9IDAgKSB7XG5cblx0XHR0aGlzLl9nZXRQYXNzVXRpbHMoKS5nZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmVHUFUsIHRleHR1cmVEZXNjcmlwdG9yR1BVLCBiYXNlQXJyYXlMYXllciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRmxpcCB0aGUgY29udGVudHMgb2YgdGhlIGdpdmVuIEdQVSB0ZXh0dXJlIGFsb25nIGl0cyB2ZXJ0aWNhbCBheGlzLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0dQVVRleHR1cmV9IHRleHR1cmVHUFUgLSBUaGUgR1BVIHRleHR1cmUgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGV4dHVyZURlc2NyaXB0b3JHUFUgLSBUaGUgdGV4dHVyZSBkZXNjcmlwdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29yaWdpbkRlcHRoPTBdIC0gVGhlIG9yaWdpbiBkZXB0aC5cblx0ICovXG5cdF9mbGlwWSggdGV4dHVyZUdQVSwgdGV4dHVyZURlc2NyaXB0b3JHUFUsIG9yaWdpbkRlcHRoID0gMCApIHtcblxuXHRcdHRoaXMuX2dldFBhc3NVdGlscygpLmZsaXBZKCB0ZXh0dXJlR1BVLCB0ZXh0dXJlRGVzY3JpcHRvckdQVSwgb3JpZ2luRGVwdGggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwbG9hZHMgdGV4dHVyZSBidWZmZXIgZGF0YSB0byB0aGUgR1BVIG1lbW9yeS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtPYmplY3R9IGltYWdlIC0gQW4gb2JqZWN0IGRlZmluaW5nIHRoZSBpbWFnZSBidWZmZXIgZGF0YS5cblx0ICogQHBhcmFtIHtHUFVUZXh0dXJlfSB0ZXh0dXJlR1BVIC0gVGhlIEdQVSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGV4dHVyZURlc2NyaXB0b3JHUFUgLSBUaGUgR1BVIHRleHR1cmUgZGVzY3JpcHRvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG9yaWdpbkRlcHRoIC0gVGhlIG9yaWdpbiBkZXB0aC5cblx0ICogQHBhcmFtIHtib29sZWFufSBmbGlwWSAtIFdoZXRoZXIgdG8gZmxpcCB0ZXh0dXJlIGRhdGEgYWxvbmcgdGhlaXIgdmVydGljYWwgYXhpcyBvciBub3QuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MF0gLSBUT0RPLlxuXHQgKi9cblx0X2NvcHlCdWZmZXJUb1RleHR1cmUoIGltYWdlLCB0ZXh0dXJlR1BVLCB0ZXh0dXJlRGVzY3JpcHRvckdQVSwgb3JpZ2luRGVwdGgsIGZsaXBZLCBkZXB0aCA9IDAgKSB7XG5cblx0XHQvLyBAVE9ETzogQ29uc2lkZXIgdG8gdXNlIEdQVUNvbW1hbmRFbmNvZGVyLmNvcHlCdWZmZXJUb1RleHR1cmUoKVxuXHRcdC8vIEBUT0RPOiBDb25zaWRlciB0byBzdXBwb3J0IHZhbGlkIGJ1ZmZlciBsYXlvdXRzIHdpdGggb3RoZXIgZm9ybWF0cyBsaWtlIFJHQlxuXG5cdFx0Y29uc3QgZGV2aWNlID0gdGhpcy5iYWNrZW5kLmRldmljZTtcblxuXHRcdGNvbnN0IGRhdGEgPSBpbWFnZS5kYXRhO1xuXG5cdFx0Y29uc3QgYnl0ZXNQZXJUZXhlbCA9IHRoaXMuX2dldEJ5dGVzUGVyVGV4ZWwoIHRleHR1cmVEZXNjcmlwdG9yR1BVLmZvcm1hdCApO1xuXHRcdGNvbnN0IGJ5dGVzUGVyUm93ID0gaW1hZ2Uud2lkdGggKiBieXRlc1BlclRleGVsO1xuXG5cdFx0ZGV2aWNlLnF1ZXVlLndyaXRlVGV4dHVyZShcblx0XHRcdHtcblx0XHRcdFx0dGV4dHVyZTogdGV4dHVyZUdQVSxcblx0XHRcdFx0bWlwTGV2ZWw6IDAsXG5cdFx0XHRcdG9yaWdpbjogeyB4OiAwLCB5OiAwLCB6OiBvcmlnaW5EZXB0aCB9XG5cdFx0XHR9LFxuXHRcdFx0ZGF0YSxcblx0XHRcdHtcblx0XHRcdFx0b2Zmc2V0OiBpbWFnZS53aWR0aCAqIGltYWdlLmhlaWdodCAqIGJ5dGVzUGVyVGV4ZWwgKiBkZXB0aCxcblx0XHRcdFx0Ynl0ZXNQZXJSb3dcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpZHRoOiBpbWFnZS53aWR0aCxcblx0XHRcdFx0aGVpZ2h0OiBpbWFnZS5oZWlnaHQsXG5cdFx0XHRcdGRlcHRoT3JBcnJheUxheWVyczogMVxuXHRcdFx0fSApO1xuXG5cdFx0aWYgKCBmbGlwWSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5fZmxpcFkoIHRleHR1cmVHUFUsIHRleHR1cmVEZXNjcmlwdG9yR1BVLCBvcmlnaW5EZXB0aCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVXBsb2FkcyBjb21wcmVzc2VkIHRleHR1cmUgZGF0YSB0byB0aGUgR1BVIG1lbW9yeS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBtaXBtYXBzIC0gQW4gYXJyYXkgd2l0aCBtaXBtYXAgZGF0YS5cblx0ICogQHBhcmFtIHtHUFVUZXh0dXJlfSB0ZXh0dXJlR1BVIC0gVGhlIEdQVSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGV4dHVyZURlc2NyaXB0b3JHUFUgLSBUaGUgR1BVIHRleHR1cmUgZGVzY3JpcHRvci5cblx0ICovXG5cdF9jb3B5Q29tcHJlc3NlZEJ1ZmZlclRvVGV4dHVyZSggbWlwbWFwcywgdGV4dHVyZUdQVSwgdGV4dHVyZURlc2NyaXB0b3JHUFUgKSB7XG5cblx0XHQvLyBAVE9ETzogQ29uc2lkZXIgdG8gdXNlIEdQVUNvbW1hbmRFbmNvZGVyLmNvcHlCdWZmZXJUb1RleHR1cmUoKVxuXG5cdFx0Y29uc3QgZGV2aWNlID0gdGhpcy5iYWNrZW5kLmRldmljZTtcblxuXHRcdGNvbnN0IGJsb2NrRGF0YSA9IHRoaXMuX2dldEJsb2NrRGF0YSggdGV4dHVyZURlc2NyaXB0b3JHUFUuZm9ybWF0ICk7XG5cdFx0Y29uc3QgaXNUZXh0dXJlQXJyYXkgPSB0ZXh0dXJlRGVzY3JpcHRvckdQVS5zaXplLmRlcHRoT3JBcnJheUxheWVycyA+IDE7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBtaXBtYXBzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXG5cdFx0XHRjb25zdCB3aWR0aCA9IG1pcG1hcC53aWR0aDtcblx0XHRcdGNvbnN0IGhlaWdodCA9IG1pcG1hcC5oZWlnaHQ7XG5cdFx0XHRjb25zdCBkZXB0aCA9IGlzVGV4dHVyZUFycmF5ID8gdGV4dHVyZURlc2NyaXB0b3JHUFUuc2l6ZS5kZXB0aE9yQXJyYXlMYXllcnMgOiAxO1xuXG5cdFx0XHRjb25zdCBieXRlc1BlclJvdyA9IE1hdGguY2VpbCggd2lkdGggLyBibG9ja0RhdGEud2lkdGggKSAqIGJsb2NrRGF0YS5ieXRlTGVuZ3RoO1xuXHRcdFx0Y29uc3QgYnl0ZXNQZXJJbWFnZSA9IGJ5dGVzUGVyUm93ICogTWF0aC5jZWlsKCBoZWlnaHQgLyBibG9ja0RhdGEuaGVpZ2h0ICk7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IGRlcHRoOyBqICsrICkge1xuXG5cdFx0XHRcdGRldmljZS5xdWV1ZS53cml0ZVRleHR1cmUoXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGV4dHVyZTogdGV4dHVyZUdQVSxcblx0XHRcdFx0XHRcdG1pcExldmVsOiBpLFxuXHRcdFx0XHRcdFx0b3JpZ2luOiB7IHg6IDAsIHk6IDAsIHo6IGogfVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0bWlwbWFwLmRhdGEsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0b2Zmc2V0OiBqICogYnl0ZXNQZXJJbWFnZSxcblx0XHRcdFx0XHRcdGJ5dGVzUGVyUm93LFxuXHRcdFx0XHRcdFx0cm93c1BlckltYWdlOiBNYXRoLmNlaWwoIGhlaWdodCAvIGJsb2NrRGF0YS5oZWlnaHQgKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0d2lkdGg6IE1hdGguY2VpbCggd2lkdGggLyBibG9ja0RhdGEud2lkdGggKSAqIGJsb2NrRGF0YS53aWR0aCxcblx0XHRcdFx0XHRcdGhlaWdodDogTWF0aC5jZWlsKCBoZWlnaHQgLyBibG9ja0RhdGEuaGVpZ2h0ICkgKiBibG9ja0RhdGEuaGVpZ2h0LFxuXHRcdFx0XHRcdFx0ZGVwdGhPckFycmF5TGF5ZXJzOiAxXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBvbmx5IHJlbGV2YW50IGZvciBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0cy4gSXQgcmV0dXJucyBhIGJsb2NrXG5cdCAqIGRhdGEgZGVzY3JpcHRvciBmb3IgdGhlIGdpdmVuIEdQVSBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gVGhlIEdQVSBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0LlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBibG9jayBkYXRhIGRlc2NyaXB0b3IuXG5cdCAqL1xuXHRfZ2V0QmxvY2tEYXRhKCBmb3JtYXQgKSB7XG5cblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5CQzFSR0JBVW5vcm0gfHwgZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJDMVJHQkFVbm9ybVNSR0IgKSByZXR1cm4geyBieXRlTGVuZ3RoOiA4LCB3aWR0aDogNCwgaGVpZ2h0OiA0IH07IC8vIERYVDFcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5CQzJSR0JBVW5vcm0gfHwgZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJDMlJHQkFVbm9ybVNSR0IgKSByZXR1cm4geyBieXRlTGVuZ3RoOiAxNiwgd2lkdGg6IDQsIGhlaWdodDogNCB9OyAvLyBEWFQzXG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQkMzUkdCQVVub3JtIHx8IGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5CQzNSR0JBVW5vcm1TUkdCICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogMTYsIHdpZHRoOiA0LCBoZWlnaHQ6IDQgfTsgLy8gRFhUNVxuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJDNFJVbm9ybSB8fCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQkM0UlNub3JtICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogOCwgd2lkdGg6IDQsIGhlaWdodDogNCB9OyAvLyBSR1RDMVxuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJDNVJHVW5vcm0gfHwgZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJDNVJHU25vcm0gKSByZXR1cm4geyBieXRlTGVuZ3RoOiAxNiwgd2lkdGg6IDQsIGhlaWdodDogNCB9OyAvLyBSR1RDMlxuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJDNkhSR0JVRmxvYXQgfHwgZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJDNkhSR0JGbG9hdCApIHJldHVybiB7IGJ5dGVMZW5ndGg6IDE2LCB3aWR0aDogNCwgaGVpZ2h0OiA0IH07IC8vIEJQVEMgKGZsb2F0KVxuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJDN1JHQkFVbm9ybSB8fCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQkM3UkdCQVVub3JtU1JHQiApIHJldHVybiB7IGJ5dGVMZW5ndGg6IDE2LCB3aWR0aDogNCwgaGVpZ2h0OiA0IH07IC8vIEJQVEMgKHVub3JtKVxuXG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuRVRDMlJHQjhVbm9ybSB8fCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuRVRDMlJHQjhVbm9ybVNSR0IgKSByZXR1cm4geyBieXRlTGVuZ3RoOiA4LCB3aWR0aDogNCwgaGVpZ2h0OiA0IH07XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuRVRDMlJHQjhBMVVub3JtIHx8IGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5FVEMyUkdCOEExVW5vcm1TUkdCICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogOCwgd2lkdGg6IDQsIGhlaWdodDogNCB9O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkVUQzJSR0JBOFVub3JtIHx8IGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5FVEMyUkdCQThVbm9ybVNSR0IgKSByZXR1cm4geyBieXRlTGVuZ3RoOiAxNiwgd2lkdGg6IDQsIGhlaWdodDogNCB9O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkVBQ1IxMVVub3JtICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogOCwgd2lkdGg6IDQsIGhlaWdodDogNCB9O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkVBQ1IxMVNub3JtICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogOCwgd2lkdGg6IDQsIGhlaWdodDogNCB9O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkVBQ1JHMTFVbm9ybSApIHJldHVybiB7IGJ5dGVMZW5ndGg6IDE2LCB3aWR0aDogNCwgaGVpZ2h0OiA0IH07XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuRUFDUkcxMVNub3JtICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogMTYsIHdpZHRoOiA0LCBoZWlnaHQ6IDQgfTtcblxuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkFTVEM0eDRVbm9ybSB8fCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzR4NFVub3JtU1JHQiApIHJldHVybiB7IGJ5dGVMZW5ndGg6IDE2LCB3aWR0aDogNCwgaGVpZ2h0OiA0IH07XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzV4NFVub3JtIHx8IGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5BU1RDNXg0VW5vcm1TUkdCICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogMTYsIHdpZHRoOiA1LCBoZWlnaHQ6IDQgfTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5BU1RDNXg1VW5vcm0gfHwgZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkFTVEM1eDVVbm9ybVNSR0IgKSByZXR1cm4geyBieXRlTGVuZ3RoOiAxNiwgd2lkdGg6IDUsIGhlaWdodDogNSB9O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkFTVEM2eDVVbm9ybSB8fCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzZ4NVVub3JtU1JHQiApIHJldHVybiB7IGJ5dGVMZW5ndGg6IDE2LCB3aWR0aDogNiwgaGVpZ2h0OiA1IH07XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzZ4NlVub3JtIHx8IGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5BU1RDNng2VW5vcm1TUkdCICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogMTYsIHdpZHRoOiA2LCBoZWlnaHQ6IDYgfTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5BU1RDOHg1VW5vcm0gfHwgZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkFTVEM4eDVVbm9ybVNSR0IgKSByZXR1cm4geyBieXRlTGVuZ3RoOiAxNiwgd2lkdGg6IDgsIGhlaWdodDogNSB9O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkFTVEM4eDZVbm9ybSB8fCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzh4NlVub3JtU1JHQiApIHJldHVybiB7IGJ5dGVMZW5ndGg6IDE2LCB3aWR0aDogOCwgaGVpZ2h0OiA2IH07XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzh4OFVub3JtIHx8IGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5BU1RDOHg4VW5vcm1TUkdCICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogMTYsIHdpZHRoOiA4LCBoZWlnaHQ6IDggfTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5BU1RDMTB4NVVub3JtIHx8IGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5BU1RDMTB4NVVub3JtU1JHQiApIHJldHVybiB7IGJ5dGVMZW5ndGg6IDE2LCB3aWR0aDogMTAsIGhlaWdodDogNSB9O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkFTVEMxMHg2VW5vcm0gfHwgZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkFTVEMxMHg2VW5vcm1TUkdCICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogMTYsIHdpZHRoOiAxMCwgaGVpZ2h0OiA2IH07XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzEweDhVbm9ybSB8fCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzEweDhVbm9ybVNSR0IgKSByZXR1cm4geyBieXRlTGVuZ3RoOiAxNiwgd2lkdGg6IDEwLCBoZWlnaHQ6IDggfTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5BU1RDMTB4MTBVbm9ybSB8fCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzEweDEwVW5vcm1TUkdCICkgcmV0dXJuIHsgYnl0ZUxlbmd0aDogMTYsIHdpZHRoOiAxMCwgaGVpZ2h0OiAxMCB9O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkFTVEMxMngxMFVub3JtIHx8IGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5BU1RDMTJ4MTBVbm9ybVNSR0IgKSByZXR1cm4geyBieXRlTGVuZ3RoOiAxNiwgd2lkdGg6IDEyLCBoZWlnaHQ6IDEwIH07XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQVNUQzEyeDEyVW5vcm0gfHwgZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkFTVEMxMngxMlVub3JtU1JHQiApIHJldHVybiB7IGJ5dGVMZW5ndGg6IDE2LCB3aWR0aDogMTIsIGhlaWdodDogMTIgfTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIHRoZSB0aHJlZS5qcyB1diB3cmFwcGluZyBjb25zdGFudHMgdG8gR1BVIGFkZHJlc3MgbW9kZSBjb25zdGFudHMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSB0aHJlZS5qcyBjb25zdGFudCBkZWZpbmluZyBhIHV2IHdyYXBwaW5nIG1vZGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEdQVSBhZGRyZXNzIG1vZGUuXG5cdCAqL1xuXHRfY29udmVydEFkZHJlc3NNb2RlKCB2YWx1ZSApIHtcblxuXHRcdGxldCBhZGRyZXNzTW9kZSA9IEdQVUFkZHJlc3NNb2RlLkNsYW1wVG9FZGdlO1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gUmVwZWF0V3JhcHBpbmcgKSB7XG5cblx0XHRcdGFkZHJlc3NNb2RlID0gR1BVQWRkcmVzc01vZGUuUmVwZWF0O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcgKSB7XG5cblx0XHRcdGFkZHJlc3NNb2RlID0gR1BVQWRkcmVzc01vZGUuTWlycm9yUmVwZWF0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFkZHJlc3NNb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIHRocmVlLmpzIGZpbHRlciBjb25zdGFudHMgdG8gR1BVIGZpbHRlciBjb25zdGFudHMuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSB0aHJlZS5qcyBjb25zdGFudCBkZWZpbmluZyBhIGZpbHRlciBtb2RlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHUFUgZmlsdGVyIG1vZGUuXG5cdCAqL1xuXHRfY29udmVydEZpbHRlck1vZGUoIHZhbHVlICkge1xuXG5cdFx0bGV0IGZpbHRlck1vZGUgPSBHUFVGaWx0ZXJNb2RlLkxpbmVhcjtcblxuXHRcdGlmICggdmFsdWUgPT09IE5lYXJlc3RGaWx0ZXIgfHwgdmFsdWUgPT09IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIHx8IHZhbHVlID09PSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyICkge1xuXG5cdFx0XHRmaWx0ZXJNb2RlID0gR1BVRmlsdGVyTW9kZS5OZWFyZXN0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpbHRlck1vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBieXRlcy1wZXItdGV4ZWwgdmFsdWUgZm9yIHRoZSBnaXZlbiBHUFUgdGV4dHVyZSBmb3JtYXQuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgLSBUaGUgR1BVIHRleHR1cmUgZm9ybWF0LlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBieXRlcy1wZXItdGV4ZWwuXG5cdCAqL1xuXHRfZ2V0Qnl0ZXNQZXJUZXhlbCggZm9ybWF0ICkge1xuXG5cdFx0Ly8gOC1iaXQgZm9ybWF0c1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlI4VW5vcm0gfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SOFNub3JtIHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUjhVaW50IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUjhTaW50ICkgcmV0dXJuIDE7XG5cblx0XHQvLyAxNi1iaXQgZm9ybWF0c1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlIxNlVpbnQgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SMTZTaW50IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUjE2RmxvYXQgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SRzhVbm9ybSB8fFxuXHRcdFx0Zm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHOFNub3JtIHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkc4VWludCB8fFxuXHRcdFx0Zm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHOFNpbnQgKSByZXR1cm4gMjtcblxuXHRcdC8vIDMyLWJpdCBmb3JtYXRzXG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUjMyVWludCB8fFxuXHRcdFx0Zm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlIzMlNpbnQgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SMzJGbG9hdCB8fFxuXHRcdFx0Zm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHMTZVaW50IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkcxNlNpbnQgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SRzE2RmxvYXQgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SR0JBOFVub3JtIHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQThVbm9ybVNSR0IgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SR0JBOFNub3JtIHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQThVaW50IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQThTaW50IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuQkdSQThVbm9ybSB8fFxuXHRcdFx0Zm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJHUkE4VW5vcm1TUkdCIHx8XG5cdFx0XHQvLyBQYWNrZWQgMzItYml0IGZvcm1hdHNcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SR0I5RTVVRmxvYXQgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SR0IxMEEyVW5vcm0gfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SRzExQjEwVUZsb2F0IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuRGVwdGgzMkZsb2F0IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuRGVwdGgyNFBsdXMgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5EZXB0aDI0UGx1c1N0ZW5jaWw4IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuRGVwdGgzMkZsb2F0U3RlbmNpbDggKSByZXR1cm4gNDtcblxuXHRcdC8vIDY0LWJpdCBmb3JtYXRzXG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkczMlVpbnQgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SRzMyU2ludCB8fFxuXHRcdFx0Zm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHMzJGbG9hdCB8fFxuXHRcdFx0Zm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHQkExNlVpbnQgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SR0JBMTZTaW50IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQTE2RmxvYXQgKSByZXR1cm4gODtcblxuXHRcdC8vIDEyOC1iaXQgZm9ybWF0c1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHQkEzMlVpbnQgfHxcblx0XHRcdGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SR0JBMzJTaW50IHx8XG5cdFx0XHRmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQTMyRmxvYXQgKSByZXR1cm4gMTY7XG5cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgdHlwZWQgYXJyYXkgdHlwZSBmb3IgdGhlIGdpdmVuIEdQVSB0ZXh0dXJlIGZvcm1hdC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdCAtIFRoZSBHUFUgdGV4dHVyZSBmb3JtYXQuXG5cdCAqIEByZXR1cm4ge1R5cGVkQXJyYXkuY29uc3RydWN0b3J9IFRoZSB0eXBlZCBhcnJheSB0eXBlLlxuXHQgKi9cblx0X2dldFR5cGVkQXJyYXlUeXBlKCBmb3JtYXQgKSB7XG5cblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SOFVpbnQgKSByZXR1cm4gVWludDhBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SOFNpbnQgKSByZXR1cm4gSW50OEFycmF5O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlI4VW5vcm0gKSByZXR1cm4gVWludDhBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SOFNub3JtICkgcmV0dXJuIEludDhBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SRzhVaW50ICkgcmV0dXJuIFVpbnQ4QXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkc4U2ludCApIHJldHVybiBJbnQ4QXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkc4VW5vcm0gKSByZXR1cm4gVWludDhBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SRzhTbm9ybSApIHJldHVybiBJbnQ4QXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQThVaW50ICkgcmV0dXJuIFVpbnQ4QXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQThTaW50ICkgcmV0dXJuIEludDhBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SR0JBOFVub3JtICkgcmV0dXJuIFVpbnQ4QXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQThTbm9ybSApIHJldHVybiBJbnQ4QXJyYXk7XG5cblxuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlIxNlVpbnQgKSByZXR1cm4gVWludDE2QXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUjE2U2ludCApIHJldHVybiBJbnQxNkFycmF5O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHMTZVaW50ICkgcmV0dXJuIFVpbnQxNkFycmF5O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHMTZTaW50ICkgcmV0dXJuIEludDE2QXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQTE2VWludCApIHJldHVybiBVaW50MTZBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SR0JBMTZTaW50ICkgcmV0dXJuIEludDE2QXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUjE2RmxvYXQgKSByZXR1cm4gVWludDE2QXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkcxNkZsb2F0ICkgcmV0dXJuIFVpbnQxNkFycmF5O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHQkExNkZsb2F0ICkgcmV0dXJuIFVpbnQxNkFycmF5O1xuXG5cblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SMzJVaW50ICkgcmV0dXJuIFVpbnQzMkFycmF5O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlIzMlNpbnQgKSByZXR1cm4gSW50MzJBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SMzJGbG9hdCApIHJldHVybiBGbG9hdDMyQXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkczMlVpbnQgKSByZXR1cm4gVWludDMyQXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkczMlNpbnQgKSByZXR1cm4gSW50MzJBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SRzMyRmxvYXQgKSByZXR1cm4gRmxvYXQzMkFycmF5O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHQkEzMlVpbnQgKSByZXR1cm4gVWludDMyQXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkdCQTMyU2ludCApIHJldHVybiBJbnQzMkFycmF5O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHQkEzMkZsb2F0ICkgcmV0dXJuIEZsb2F0MzJBcnJheTtcblxuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkJHUkE4VW5vcm0gKSByZXR1cm4gVWludDhBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5CR1JBOFVub3JtU1JHQiApIHJldHVybiBVaW50OEFycmF5O1xuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LlJHQjEwQTJVbm9ybSApIHJldHVybiBVaW50MzJBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5SR0I5RTVVRmxvYXQgKSByZXR1cm4gVWludDMyQXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuUkcxMUIxMFVGbG9hdCApIHJldHVybiBVaW50MzJBcnJheTtcblxuXHRcdGlmICggZm9ybWF0ID09PSBHUFVUZXh0dXJlRm9ybWF0LkRlcHRoMzJGbG9hdCApIHJldHVybiBGbG9hdDMyQXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuRGVwdGgyNFBsdXMgKSByZXR1cm4gVWludDMyQXJyYXk7XG5cdFx0aWYgKCBmb3JtYXQgPT09IEdQVVRleHR1cmVGb3JtYXQuRGVwdGgyNFBsdXNTdGVuY2lsOCApIHJldHVybiBVaW50MzJBcnJheTtcblx0XHRpZiAoIGZvcm1hdCA9PT0gR1BVVGV4dHVyZUZvcm1hdC5EZXB0aDMyRmxvYXRTdGVuY2lsOCApIHJldHVybiBGbG9hdDMyQXJyYXk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBHUFUgZGltZW5zaW9ucyBmb3IgdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHUFUgZGltZW5zaW9uLlxuXHQgKi9cblx0X2dldERpbWVuc2lvbiggdGV4dHVyZSApIHtcblxuXHRcdGxldCBkaW1lbnNpb247XG5cblx0XHRpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRkaW1lbnNpb24gPSBHUFVUZXh0dXJlRGltZW5zaW9uLlRocmVlRDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpbWVuc2lvbiA9IEdQVVRleHR1cmVEaW1lbnNpb24uVHdvRDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkaW1lbnNpb247XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgR1BVIGZvcm1hdCBmb3IgdGhlIGdpdmVuIHRleHR1cmUuXG4gKlxuICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG4gKiBAcGFyYW0gez9HUFVEZXZpY2V9IFtkZXZpY2U9bnVsbF0gLSBUaGUgR1BVIGRldmljZSB3aGljaCBpcyB1c2VkIGZvciBmZWF0dXJlIGRldGVjdGlvbi5cbiAqIEl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gYXBwbHkgdGhlIGRldmljZSBmb3IgbW9zdCBmb3JtYXRzLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgR1BVIGZvcm1hdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1hdCggdGV4dHVyZSwgZGV2aWNlID0gbnVsbCApIHtcblxuXHRjb25zdCBmb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDtcblx0Y29uc3QgdHlwZSA9IHRleHR1cmUudHlwZTtcblx0Y29uc3QgY29sb3JTcGFjZSA9IHRleHR1cmUuY29sb3JTcGFjZTtcblxuXHRsZXQgZm9ybWF0R1BVO1xuXG5cdGlmICggdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlID09PSB0cnVlIHx8IHRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0c3dpdGNoICggZm9ybWF0ICkge1xuXG5cdFx0XHRjYXNlIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdDpcblx0XHRcdFx0Zm9ybWF0R1BVID0gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gR1BVVGV4dHVyZUZvcm1hdC5CQzFSR0JBVW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5CQzFSR0JBVW5vcm07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdDpcblx0XHRcdFx0Zm9ybWF0R1BVID0gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gR1BVVGV4dHVyZUZvcm1hdC5CQzJSR0JBVW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5CQzJSR0JBVW5vcm07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdDpcblx0XHRcdFx0Zm9ybWF0R1BVID0gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gR1BVVGV4dHVyZUZvcm1hdC5CQzNSR0JBVW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5CQzNSR0JBVW5vcm07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFJHQl9FVEMyX0Zvcm1hdDpcblx0XHRcdFx0Zm9ybWF0R1BVID0gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gR1BVVGV4dHVyZUZvcm1hdC5FVEMyUkdCOFVub3JtU1JHQiA6IEdQVVRleHR1cmVGb3JtYXQuRVRDMlJHQjhVbm9ybTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgUkdCQV9FVEMyX0VBQ19Gb3JtYXQ6XG5cdFx0XHRcdGZvcm1hdEdQVSA9ICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IEdQVVRleHR1cmVGb3JtYXQuRVRDMlJHQkE4VW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5FVEMyUkdCQThVbm9ybTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgUkdCQV9BU1RDXzR4NF9Gb3JtYXQ6XG5cdFx0XHRcdGZvcm1hdEdQVSA9ICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IEdQVVRleHR1cmVGb3JtYXQuQVNUQzR4NFVub3JtU1JHQiA6IEdQVVRleHR1cmVGb3JtYXQuQVNUQzR4NFVub3JtO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSR0JBX0FTVENfNXg0X0Zvcm1hdDpcblx0XHRcdFx0Zm9ybWF0R1BVID0gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gR1BVVGV4dHVyZUZvcm1hdC5BU1RDNXg0VW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5BU1RDNXg0VW5vcm07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFJHQkFfQVNUQ181eDVfRm9ybWF0OlxuXHRcdFx0XHRmb3JtYXRHUFUgPSAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBHUFVUZXh0dXJlRm9ybWF0LkFTVEM1eDVVbm9ybVNSR0IgOiBHUFVUZXh0dXJlRm9ybWF0LkFTVEM1eDVVbm9ybTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQ6XG5cdFx0XHRcdGZvcm1hdEdQVSA9ICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IEdQVVRleHR1cmVGb3JtYXQuQVNUQzZ4NVVub3JtU1JHQiA6IEdQVVRleHR1cmVGb3JtYXQuQVNUQzZ4NVVub3JtO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSR0JBX0FTVENfNng2X0Zvcm1hdDpcblx0XHRcdFx0Zm9ybWF0R1BVID0gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gR1BVVGV4dHVyZUZvcm1hdC5BU1RDNng2VW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5BU1RDNng2VW5vcm07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFJHQkFfQVNUQ184eDVfRm9ybWF0OlxuXHRcdFx0XHRmb3JtYXRHUFUgPSAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBHUFVUZXh0dXJlRm9ybWF0LkFTVEM4eDVVbm9ybVNSR0IgOiBHUFVUZXh0dXJlRm9ybWF0LkFTVEM4eDVVbm9ybTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQ6XG5cdFx0XHRcdGZvcm1hdEdQVSA9ICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IEdQVVRleHR1cmVGb3JtYXQuQVNUQzh4NlVub3JtU1JHQiA6IEdQVVRleHR1cmVGb3JtYXQuQVNUQzh4NlVub3JtO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSR0JBX0FTVENfOHg4X0Zvcm1hdDpcblx0XHRcdFx0Zm9ybWF0R1BVID0gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gR1BVVGV4dHVyZUZvcm1hdC5BU1RDOHg4VW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5BU1RDOHg4VW5vcm07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdDpcblx0XHRcdFx0Zm9ybWF0R1BVID0gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gR1BVVGV4dHVyZUZvcm1hdC5BU1RDMTB4NVVub3JtU1JHQiA6IEdQVVRleHR1cmVGb3JtYXQuQVNUQzEweDVVbm9ybTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgUkdCQV9BU1RDXzEweDZfRm9ybWF0OlxuXHRcdFx0XHRmb3JtYXRHUFUgPSAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBHUFVUZXh0dXJlRm9ybWF0LkFTVEMxMHg2VW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5BU1RDMTB4NlVub3JtO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQ6XG5cdFx0XHRcdGZvcm1hdEdQVSA9ICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IEdQVVRleHR1cmVGb3JtYXQuQVNUQzEweDhVbm9ybVNSR0IgOiBHUFVUZXh0dXJlRm9ybWF0LkFTVEMxMHg4VW5vcm07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQ6XG5cdFx0XHRcdGZvcm1hdEdQVSA9ICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IEdQVVRleHR1cmVGb3JtYXQuQVNUQzEweDEwVW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5BU1RDMTB4MTBVbm9ybTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdDpcblx0XHRcdFx0Zm9ybWF0R1BVID0gKCBjb2xvclNwYWNlID09PSBTUkdCQ29sb3JTcGFjZSApID8gR1BVVGV4dHVyZUZvcm1hdC5BU1RDMTJ4MTBVbm9ybVNSR0IgOiBHUFVUZXh0dXJlRm9ybWF0LkFTVEMxMngxMFVub3JtO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0OlxuXHRcdFx0XHRmb3JtYXRHUFUgPSAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBHUFVUZXh0dXJlRm9ybWF0LkFTVEMxMngxMlVub3JtU1JHQiA6IEdQVVRleHR1cmVGb3JtYXQuQVNUQzEyeDEyVW5vcm07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFJHQkFGb3JtYXQ6XG5cdFx0XHRcdGZvcm1hdEdQVSA9ICggY29sb3JTcGFjZSA9PT0gU1JHQkNvbG9yU3BhY2UgKSA/IEdQVVRleHR1cmVGb3JtYXQuUkdCQThVbm9ybVNSR0IgOiBHUFVUZXh0dXJlRm9ybWF0LlJHQkE4VW5vcm07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnV2ViR1BVUmVuZGVyZXI6IFVuc3VwcG9ydGVkIHRleHR1cmUgZm9ybWF0LicsIGZvcm1hdCApO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRzd2l0Y2ggKCBmb3JtYXQgKSB7XG5cblx0XHRcdGNhc2UgUkdCQUZvcm1hdDpcblxuXHRcdFx0XHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSBCeXRlVHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkdCQThTbm9ybTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBTaG9ydFR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSBHUFVUZXh0dXJlRm9ybWF0LlJHQkExNlNpbnQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgVW5zaWduZWRTaG9ydFR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSBHUFVUZXh0dXJlRm9ybWF0LlJHQkExNlVpbnQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFVuc2lnbmVkSW50VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkdCQTMyVWludDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBJbnRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5SR0JBMzJTaW50O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFVuc2lnbmVkQnl0ZVR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSAoIGNvbG9yU3BhY2UgPT09IFNSR0JDb2xvclNwYWNlICkgPyBHUFVUZXh0dXJlRm9ybWF0LlJHQkE4VW5vcm1TUkdCIDogR1BVVGV4dHVyZUZvcm1hdC5SR0JBOFVub3JtO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIEhhbGZGbG9hdFR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSBHUFVUZXh0dXJlRm9ybWF0LlJHQkExNkZsb2F0O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIEZsb2F0VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkdCQTMyRmxvYXQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnV2ViR1BVUmVuZGVyZXI6IFVuc3VwcG9ydGVkIHRleHR1cmUgdHlwZSB3aXRoIFJHQkFGb3JtYXQuJywgdHlwZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSR0JGb3JtYXQ6XG5cblx0XHRcdFx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgVW5zaWduZWRJbnQ1OTk5VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkdCOUU1VUZsb2F0O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1dlYkdQVVJlbmRlcmVyOiBVbnN1cHBvcnRlZCB0ZXh0dXJlIHR5cGUgd2l0aCBSR0JGb3JtYXQuJywgdHlwZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSZWRGb3JtYXQ6XG5cblx0XHRcdFx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgQnl0ZVR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSBHUFVUZXh0dXJlRm9ybWF0LlI4U25vcm07XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgU2hvcnRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5SMTZTaW50O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFVuc2lnbmVkU2hvcnRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5SMTZVaW50O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFVuc2lnbmVkSW50VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUjMyVWludDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBJbnRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5SMzJTaW50O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFVuc2lnbmVkQnl0ZVR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSBHUFVUZXh0dXJlRm9ybWF0LlI4VW5vcm07XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgSGFsZkZsb2F0VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUjE2RmxvYXQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgRmxvYXRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5SMzJGbG9hdDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdXZWJHUFVSZW5kZXJlcjogVW5zdXBwb3J0ZWQgdGV4dHVyZSB0eXBlIHdpdGggUmVkRm9ybWF0LicsIHR5cGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgUkdGb3JtYXQ6XG5cblx0XHRcdFx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgQnl0ZVR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSBHUFVUZXh0dXJlRm9ybWF0LlJHOFNub3JtO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFNob3J0VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkcxNlNpbnQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgVW5zaWduZWRTaG9ydFR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSBHUFVUZXh0dXJlRm9ybWF0LlJHMTZVaW50O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFVuc2lnbmVkSW50VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkczMlVpbnQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgSW50VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkczMlNpbnQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgVW5zaWduZWRCeXRlVHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkc4VW5vcm07XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgSGFsZkZsb2F0VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkcxNkZsb2F0O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIEZsb2F0VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkczMkZsb2F0O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1dlYkdQVVJlbmRlcmVyOiBVbnN1cHBvcnRlZCB0ZXh0dXJlIHR5cGUgd2l0aCBSR0Zvcm1hdC4nLCB0eXBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIERlcHRoRm9ybWF0OlxuXG5cdFx0XHRcdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlIFVuc2lnbmVkU2hvcnRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5EZXB0aDE2VW5vcm07XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgVW5zaWduZWRJbnRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5EZXB0aDI0UGx1cztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBGbG9hdFR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSBHUFVUZXh0dXJlRm9ybWF0LkRlcHRoMzJGbG9hdDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdXZWJHUFVSZW5kZXJlcjogVW5zdXBwb3J0ZWQgdGV4dHVyZSB0eXBlIHdpdGggRGVwdGhGb3JtYXQuJywgdHlwZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBEZXB0aFN0ZW5jaWxGb3JtYXQ6XG5cblx0XHRcdFx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgVW5zaWduZWRJbnQyNDhUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5EZXB0aDI0UGx1c1N0ZW5jaWw4O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIEZsb2F0VHlwZTpcblxuXHRcdFx0XHRcdFx0aWYgKCBkZXZpY2UgJiYgZGV2aWNlLmZlYXR1cmVzLmhhcyggR1BVRmVhdHVyZU5hbWUuRGVwdGgzMkZsb2F0U3RlbmNpbDggKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1dlYkdQVVJlbmRlcmVyOiBEZXB0aCB0ZXh0dXJlcyB3aXRoIERlcHRoU3RlbmNpbEZvcm1hdCArIEZsb2F0VHlwZSBjYW4gb25seSBiZSB1c2VkIHdpdGggdGhlIFwiZGVwdGgzMmZsb2F0LXN0ZW5jaWw4XCIgR1BVIGZlYXR1cmUuJyApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuRGVwdGgzMkZsb2F0U3RlbmNpbDg7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdXZWJHUFVSZW5kZXJlcjogVW5zdXBwb3J0ZWQgdGV4dHVyZSB0eXBlIHdpdGggRGVwdGhTdGVuY2lsRm9ybWF0LicsIHR5cGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgUmVkSW50ZWdlckZvcm1hdDpcblxuXHRcdFx0XHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSBJbnRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5SMzJTaW50O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFVuc2lnbmVkSW50VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUjMyVWludDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdXZWJHUFVSZW5kZXJlcjogVW5zdXBwb3J0ZWQgdGV4dHVyZSB0eXBlIHdpdGggUmVkSW50ZWdlckZvcm1hdC4nLCB0eXBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFJHSW50ZWdlckZvcm1hdDpcblxuXHRcdFx0XHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSBJbnRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5SRzMyU2ludDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBVbnNpZ25lZEludFR5cGU6XG5cdFx0XHRcdFx0XHRmb3JtYXRHUFUgPSBHUFVUZXh0dXJlRm9ybWF0LlJHMzJVaW50O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1dlYkdQVVJlbmRlcmVyOiBVbnN1cHBvcnRlZCB0ZXh0dXJlIHR5cGUgd2l0aCBSR0ludGVnZXJGb3JtYXQuJywgdHlwZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSR0JBSW50ZWdlckZvcm1hdDpcblxuXHRcdFx0XHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSBJbnRUeXBlOlxuXHRcdFx0XHRcdFx0Zm9ybWF0R1BVID0gR1BVVGV4dHVyZUZvcm1hdC5SR0JBMzJTaW50O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFVuc2lnbmVkSW50VHlwZTpcblx0XHRcdFx0XHRcdGZvcm1hdEdQVSA9IEdQVVRleHR1cmVGb3JtYXQuUkdCQTMyVWludDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdXZWJHUFVSZW5kZXJlcjogVW5zdXBwb3J0ZWQgdGV4dHVyZSB0eXBlIHdpdGggUkdCQUludGVnZXJGb3JtYXQuJywgdHlwZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1dlYkdQVVJlbmRlcmVyOiBVbnN1cHBvcnRlZCB0ZXh0dXJlIGZvcm1hdC4nLCBmb3JtYXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGZvcm1hdEdQVTtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBXZWJHUFVUZXh0dXJlVXRpbHM7XG4iLCJpbXBvcnQgTm9kZUZ1bmN0aW9uIGZyb20gJy4uLy4uLy4uL25vZGVzL2NvcmUvTm9kZUZ1bmN0aW9uLmpzJztcbmltcG9ydCBOb2RlRnVuY3Rpb25JbnB1dCBmcm9tICcuLi8uLi8uLi9ub2Rlcy9jb3JlL05vZGVGdW5jdGlvbklucHV0LmpzJztcblxuY29uc3QgZGVjbGFyYXRpb25SZWdleHAgPSAvXltmbl0qXFxzKihbYS16XzAtOV0rKT9cXHMqXFwoKFtcXHNcXFNdKj8pXFwpXFxzKltcXC1cXD5dKlxccyooW2Etel8wLTldKyg/OjxbXFxzXFxTXSs/Pik/KS9pO1xuY29uc3QgcHJvcGVydGllc1JlZ2V4cCA9IC8oW2Etel8wLTldKylcXHMqOlxccyooW2Etel8wLTldKyg/OjxbXFxzXFxTXSs/Pik/KS9pZztcblxuY29uc3Qgd2dzbFR5cGVMaWIgPSB7XG5cdCdmMzInOiAnZmxvYXQnLFxuXHQnaTMyJzogJ2ludCcsXG5cdCd1MzInOiAndWludCcsXG5cdCdib29sJzogJ2Jvb2wnLFxuXG5cdCd2ZWMyPGYzMj4nOiAndmVjMicsXG4gXHQndmVjMjxpMzI+JzogJ2l2ZWMyJyxcbiBcdCd2ZWMyPHUzMj4nOiAndXZlYzInLFxuIFx0J3ZlYzI8Ym9vbD4nOiAnYnZlYzInLFxuXG5cdCd2ZWMyZic6ICd2ZWMyJyxcblx0J3ZlYzJpJzogJ2l2ZWMyJyxcblx0J3ZlYzJ1JzogJ3V2ZWMyJyxcblx0J3ZlYzJiJzogJ2J2ZWMyJyxcblxuXHQndmVjMzxmMzI+JzogJ3ZlYzMnLFxuXHQndmVjMzxpMzI+JzogJ2l2ZWMzJyxcblx0J3ZlYzM8dTMyPic6ICd1dmVjMycsXG5cdCd2ZWMzPGJvb2w+JzogJ2J2ZWMzJyxcblxuXHQndmVjM2YnOiAndmVjMycsXG5cdCd2ZWMzaSc6ICdpdmVjMycsXG5cdCd2ZWMzdSc6ICd1dmVjMycsXG5cdCd2ZWMzYic6ICdidmVjMycsXG5cblx0J3ZlYzQ8ZjMyPic6ICd2ZWM0Jyxcblx0J3ZlYzQ8aTMyPic6ICdpdmVjNCcsXG5cdCd2ZWM0PHUzMj4nOiAndXZlYzQnLFxuXHQndmVjNDxib29sPic6ICdidmVjNCcsXG5cblx0J3ZlYzRmJzogJ3ZlYzQnLFxuXHQndmVjNGknOiAnaXZlYzQnLFxuXHQndmVjNHUnOiAndXZlYzQnLFxuXHQndmVjNGInOiAnYnZlYzQnLFxuXG5cdCdtYXQyeDI8ZjMyPic6ICdtYXQyJyxcblx0J21hdDJ4MmYnOiAnbWF0MicsXG5cblx0J21hdDN4MzxmMzI+JzogJ21hdDMnLFxuXHQnbWF0M3gzZic6ICdtYXQzJyxcblxuXHQnbWF0NHg0PGYzMj4nOiAnbWF0NCcsXG5cdCdtYXQ0eDRmJzogJ21hdDQnLFxuXG5cdCdzYW1wbGVyJzogJ3NhbXBsZXInLFxuXG5cdCd0ZXh0dXJlXzFkJzogJ3RleHR1cmUnLFxuXG5cdCd0ZXh0dXJlXzJkJzogJ3RleHR1cmUnLFxuXHQndGV4dHVyZV8yZF9hcnJheSc6ICd0ZXh0dXJlJyxcblx0J3RleHR1cmVfbXVsdGlzYW1wbGVkXzJkJzogJ2N1YmVUZXh0dXJlJyxcblxuXHQndGV4dHVyZV9kZXB0aF8yZCc6ICdkZXB0aFRleHR1cmUnLFxuXHQndGV4dHVyZV9kZXB0aF9tdWx0aXNhbXBsZWRfMmQnOiAnZGVwdGhUZXh0dXJlJyxcblxuXHQndGV4dHVyZV8zZCc6ICd0ZXh0dXJlM0QnLFxuXG5cdCd0ZXh0dXJlX2N1YmUnOiAnY3ViZVRleHR1cmUnLFxuXHQndGV4dHVyZV9jdWJlX2FycmF5JzogJ2N1YmVUZXh0dXJlJyxcblxuXHQndGV4dHVyZV9zdG9yYWdlXzFkJzogJ3N0b3JhZ2VUZXh0dXJlJyxcblx0J3RleHR1cmVfc3RvcmFnZV8yZCc6ICdzdG9yYWdlVGV4dHVyZScsXG5cdCd0ZXh0dXJlX3N0b3JhZ2VfMmRfYXJyYXknOiAnc3RvcmFnZVRleHR1cmUnLFxuXHQndGV4dHVyZV9zdG9yYWdlXzNkJzogJ3N0b3JhZ2VUZXh0dXJlJ1xuXG59O1xuXG5jb25zdCBwYXJzZSA9ICggc291cmNlICkgPT4ge1xuXG5cdHNvdXJjZSA9IHNvdXJjZS50cmltKCk7XG5cblx0Y29uc3QgZGVjbGFyYXRpb24gPSBzb3VyY2UubWF0Y2goIGRlY2xhcmF0aW9uUmVnZXhwICk7XG5cblx0aWYgKCBkZWNsYXJhdGlvbiAhPT0gbnVsbCAmJiBkZWNsYXJhdGlvbi5sZW5ndGggPT09IDQgKSB7XG5cblx0XHRjb25zdCBpbnB1dHNDb2RlID0gZGVjbGFyYXRpb25bIDIgXTtcblx0XHRjb25zdCBwcm9wc01hdGNoZXMgPSBbXTtcblx0XHRsZXQgbWF0Y2ggPSBudWxsO1xuXG5cdFx0d2hpbGUgKCAoIG1hdGNoID0gcHJvcGVydGllc1JlZ2V4cC5leGVjKCBpbnB1dHNDb2RlICkgKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0cHJvcHNNYXRjaGVzLnB1c2goIHsgbmFtZTogbWF0Y2hbIDEgXSwgdHlwZTogbWF0Y2hbIDIgXSB9ICk7XG5cblx0XHR9XG5cblx0XHQvLyBQcm9jZXNzIG1hdGNoZXMgdG8gY29ycmVjdGx5IHBhaXIgbmFtZXMgYW5kIHR5cGVzXG5cdFx0Y29uc3QgaW5wdXRzID0gW107XG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvcHNNYXRjaGVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgeyBuYW1lLCB0eXBlIH0gPSBwcm9wc01hdGNoZXNbIGkgXTtcblxuXHRcdFx0bGV0IHJlc29sdmVkVHlwZSA9IHR5cGU7XG5cblx0XHRcdGlmICggcmVzb2x2ZWRUeXBlLnN0YXJ0c1dpdGgoICdwdHInICkgKSB7XG5cblx0XHRcdFx0cmVzb2x2ZWRUeXBlID0gJ3BvaW50ZXInO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggcmVzb2x2ZWRUeXBlLnN0YXJ0c1dpdGgoICd0ZXh0dXJlJyApICkge1xuXG5cdFx0XHRcdFx0cmVzb2x2ZWRUeXBlID0gdHlwZS5zcGxpdCggJzwnIClbIDAgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzb2x2ZWRUeXBlID0gd2dzbFR5cGVMaWJbIHJlc29sdmVkVHlwZSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlucHV0cy5wdXNoKCBuZXcgTm9kZUZ1bmN0aW9uSW5wdXQoIHJlc29sdmVkVHlwZSwgbmFtZSApICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBibG9ja0NvZGUgPSBzb3VyY2Uuc3Vic3RyaW5nKCBkZWNsYXJhdGlvblsgMCBdLmxlbmd0aCApO1xuXHRcdGNvbnN0IG91dHB1dFR5cGUgPSBkZWNsYXJhdGlvblsgMyBdIHx8ICd2b2lkJztcblxuXHRcdGNvbnN0IG5hbWUgPSBkZWNsYXJhdGlvblsgMSBdICE9PSB1bmRlZmluZWQgPyBkZWNsYXJhdGlvblsgMSBdIDogJyc7XG5cdFx0Y29uc3QgdHlwZSA9IHdnc2xUeXBlTGliWyBvdXRwdXRUeXBlIF0gfHwgb3V0cHV0VHlwZTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlLFxuXHRcdFx0aW5wdXRzLFxuXHRcdFx0bmFtZSxcblx0XHRcdGlucHV0c0NvZGUsXG5cdFx0XHRibG9ja0NvZGUsXG5cdFx0XHRvdXRwdXRUeXBlXG5cdFx0fTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnRnVuY3Rpb25Ob2RlOiBGdW5jdGlvbiBpcyBub3QgYSBXR1NMIGNvZGUuJyApO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBXU0wgbm9kZSBmdW5jdGlvbi5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZUZ1bmN0aW9uXG4gKi9cbmNsYXNzIFdHU0xOb2RlRnVuY3Rpb24gZXh0ZW5kcyBOb2RlRnVuY3Rpb24ge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IFdHU0wgbm9kZSBmdW5jdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSAtIFRoZSBXR1NMIHNvdXJjZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzb3VyY2UgKSB7XG5cblx0XHRjb25zdCB7IHR5cGUsIGlucHV0cywgbmFtZSwgaW5wdXRzQ29kZSwgYmxvY2tDb2RlLCBvdXRwdXRUeXBlIH0gPSBwYXJzZSggc291cmNlICk7XG5cblx0XHRzdXBlciggdHlwZSwgaW5wdXRzLCBuYW1lICk7XG5cblx0XHR0aGlzLmlucHV0c0NvZGUgPSBpbnB1dHNDb2RlO1xuXHRcdHRoaXMuYmxvY2tDb2RlID0gYmxvY2tDb2RlO1xuXHRcdHRoaXMub3V0cHV0VHlwZSA9IG91dHB1dFR5cGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBXR1NMIGNvZGUgb2YgdGhlIG5vZGUgZnVuY3Rpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT10aGlzLm5hbWVdIC0gVGhlIGZ1bmN0aW9uJ3MgbmFtZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgc2hhZGVyIGNvZGUuXG5cdCAqL1xuXHRnZXRDb2RlKCBuYW1lID0gdGhpcy5uYW1lICkge1xuXG5cdFx0Y29uc3Qgb3V0cHV0VHlwZSA9IHRoaXMub3V0cHV0VHlwZSAhPT0gJ3ZvaWQnID8gJy0+ICcgKyB0aGlzLm91dHB1dFR5cGUgOiAnJztcblxuXHRcdHJldHVybiBgZm4gJHsgbmFtZSB9ICggJHsgdGhpcy5pbnB1dHNDb2RlLnRyaW0oKSB9ICkgJHsgb3V0cHV0VHlwZSB9YCArIHRoaXMuYmxvY2tDb2RlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBXR1NMTm9kZUZ1bmN0aW9uO1xuIiwiaW1wb3J0IE5vZGVQYXJzZXIgZnJvbSAnLi4vLi4vLi4vbm9kZXMvY29yZS9Ob2RlUGFyc2VyLmpzJztcbmltcG9ydCBXR1NMTm9kZUZ1bmN0aW9uIGZyb20gJy4vV0dTTE5vZGVGdW5jdGlvbi5qcyc7XG5cbi8qKlxuICogQSBXR1NMIG5vZGUgcGFyc2VyLlxuICpcbiAqIEBhdWdtZW50cyBOb2RlUGFyc2VyXG4gKi9cbmNsYXNzIFdHU0xOb2RlUGFyc2VyIGV4dGVuZHMgTm9kZVBhcnNlciB7XG5cblx0LyoqXG5cdCAqIFRoZSBtZXRob2QgcGFyc2VzIHRoZSBnaXZlbiBXR1NMIGNvZGUgYW4gcmV0dXJucyBhIG5vZGUgZnVuY3Rpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgLSBUaGUgV0dTTCBjb2RlLlxuXHQgKiBAcmV0dXJuIHtXR1NMTm9kZUZ1bmN0aW9ufSBBIG5vZGUgZnVuY3Rpb24uXG5cdCAqL1xuXHRwYXJzZUZ1bmN0aW9uKCBzb3VyY2UgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFdHU0xOb2RlRnVuY3Rpb24oIHNvdXJjZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBXR1NMTm9kZVBhcnNlcjtcbiIsImltcG9ydCBOb2RlVW5pZm9ybXNHcm91cCBmcm9tICcuLi8uLi9jb21tb24vbm9kZXMvTm9kZVVuaWZvcm1zR3JvdXAuanMnO1xuXG5pbXBvcnQgTm9kZVNhbXBsZXIgZnJvbSAnLi4vLi4vY29tbW9uL25vZGVzL05vZGVTYW1wbGVyLmpzJztcbmltcG9ydCB7IE5vZGVTYW1wbGVkVGV4dHVyZSwgTm9kZVNhbXBsZWRDdWJlVGV4dHVyZSwgTm9kZVNhbXBsZWRUZXh0dXJlM0QgfSBmcm9tICcuLi8uLi9jb21tb24vbm9kZXMvTm9kZVNhbXBsZWRUZXh0dXJlLmpzJztcblxuaW1wb3J0IE5vZGVVbmlmb3JtQnVmZmVyIGZyb20gJy4uLy4uL2NvbW1vbi9ub2Rlcy9Ob2RlVW5pZm9ybUJ1ZmZlci5qcyc7XG5pbXBvcnQgTm9kZVN0b3JhZ2VCdWZmZXIgZnJvbSAnLi4vLi4vY29tbW9uL25vZGVzL05vZGVTdG9yYWdlQnVmZmVyLmpzJztcblxuaW1wb3J0IHsgTm9kZUJ1aWxkZXIsIENvZGVOb2RlIH0gZnJvbSAnLi4vLi4vLi4vbm9kZXMvTm9kZXMuanMnO1xuXG5pbXBvcnQgeyBnZXRGb3JtYXQgfSBmcm9tICcuLi91dGlscy9XZWJHUFVUZXh0dXJlVXRpbHMuanMnO1xuXG5pbXBvcnQgV0dTTE5vZGVQYXJzZXIgZnJvbSAnLi9XR1NMTm9kZVBhcnNlci5qcyc7XG5pbXBvcnQgeyBOb2RlQWNjZXNzIH0gZnJvbSAnLi4vLi4vLi4vbm9kZXMvY29yZS9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQgVmFyTm9kZSBmcm9tICcuLi8uLi8uLi9ub2Rlcy9jb3JlL1Zhck5vZGUuanMnO1xuaW1wb3J0IEV4cHJlc3Npb25Ob2RlIGZyb20gJy4uLy4uLy4uL25vZGVzL2NvZGUvRXhwcmVzc2lvbk5vZGUuanMnO1xuXG5pbXBvcnQgeyBOb0NvbG9yU3BhY2UsIEZsb2F0VHlwZSwgUmVwZWF0V3JhcHBpbmcsIENsYW1wVG9FZGdlV3JhcHBpbmcsIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsIE5lYXJlc3RGaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMuanMnO1xuXG4vLyBHUFVTaGFkZXJTdGFnZSBpcyBub3QgZGVmaW5lZCBpbiBicm93c2VycyBub3Qgc3VwcG9ydGluZyBXZWJHUFVcbmNvbnN0IEdQVVNoYWRlclN0YWdlID0gKCB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgKSA/IHNlbGYuR1BVU2hhZGVyU3RhZ2UgOiB7IFZFUlRFWDogMSwgRlJBR01FTlQ6IDIsIENPTVBVVEU6IDQgfTtcblxuY29uc3QgYWNjZXNzTmFtZXMgPSB7XG5cdFsgTm9kZUFjY2Vzcy5SRUFEX09OTFkgXTogJ3JlYWQnLFxuXHRbIE5vZGVBY2Nlc3MuV1JJVEVfT05MWSBdOiAnd3JpdGUnLFxuXHRbIE5vZGVBY2Nlc3MuUkVBRF9XUklURSBdOiAncmVhZF93cml0ZSdcbn07XG5cbmNvbnN0IHdyYXBOYW1lcyA9IHtcblx0WyBSZXBlYXRXcmFwcGluZyBdOiAncmVwZWF0Jyxcblx0WyBDbGFtcFRvRWRnZVdyYXBwaW5nIF06ICdjbGFtcCcsXG5cdFsgTWlycm9yZWRSZXBlYXRXcmFwcGluZyBdOiAnbWlycm9yJ1xufTtcblxuY29uc3QgZ3B1U2hhZGVyU3RhZ2VMaWIgPSB7XG5cdCd2ZXJ0ZXgnOiBHUFVTaGFkZXJTdGFnZSA/IEdQVVNoYWRlclN0YWdlLlZFUlRFWCA6IDEsXG5cdCdmcmFnbWVudCc6IEdQVVNoYWRlclN0YWdlID8gR1BVU2hhZGVyU3RhZ2UuRlJBR01FTlQgOiAyLFxuXHQnY29tcHV0ZSc6IEdQVVNoYWRlclN0YWdlID8gR1BVU2hhZGVyU3RhZ2UuQ09NUFVURSA6IDRcbn07XG5cbmNvbnN0IHN1cHBvcnRzID0ge1xuXHRpbnN0YW5jZTogdHJ1ZSxcblx0c3dpenpsZUFzc2lnbjogZmFsc2UsXG5cdHN0b3JhZ2VCdWZmZXI6IHRydWVcbn07XG5cbmNvbnN0IHdnc2xGbk9wTGliID0ge1xuXHQnXl4nOiAndHNsX3hvcidcbn07XG5cbmNvbnN0IHdnc2xUeXBlTGliID0ge1xuXHRmbG9hdDogJ2YzMicsXG5cdGludDogJ2kzMicsXG5cdHVpbnQ6ICd1MzInLFxuXHRib29sOiAnYm9vbCcsXG5cdGNvbG9yOiAndmVjMzxmMzI+JyxcblxuXHR2ZWMyOiAndmVjMjxmMzI+Jyxcblx0aXZlYzI6ICd2ZWMyPGkzMj4nLFxuXHR1dmVjMjogJ3ZlYzI8dTMyPicsXG5cdGJ2ZWMyOiAndmVjMjxib29sPicsXG5cblx0dmVjMzogJ3ZlYzM8ZjMyPicsXG5cdGl2ZWMzOiAndmVjMzxpMzI+Jyxcblx0dXZlYzM6ICd2ZWMzPHUzMj4nLFxuXHRidmVjMzogJ3ZlYzM8Ym9vbD4nLFxuXG5cdHZlYzQ6ICd2ZWM0PGYzMj4nLFxuXHRpdmVjNDogJ3ZlYzQ8aTMyPicsXG5cdHV2ZWM0OiAndmVjNDx1MzI+Jyxcblx0YnZlYzQ6ICd2ZWM0PGJvb2w+JyxcblxuXHRtYXQyOiAnbWF0MngyPGYzMj4nLFxuXHRtYXQzOiAnbWF0M3gzPGYzMj4nLFxuXHRtYXQ0OiAnbWF0NHg0PGYzMj4nXG59O1xuXG5jb25zdCB3Z3NsQ29kZUNhY2hlID0ge307XG5cbmNvbnN0IHdnc2xQb2x5ZmlsbCA9IHtcblx0dHNsX3hvcjogbmV3IENvZGVOb2RlKCAnZm4gdHNsX3hvciggYSA6IGJvb2wsIGIgOiBib29sICkgLT4gYm9vbCB7IHJldHVybiAoIGEgfHwgYiApICYmICEoIGEgJiYgYiApOyB9JyApLFxuXHRtb2RfZmxvYXQ6IG5ldyBDb2RlTm9kZSggJ2ZuIHRzbF9tb2RfZmxvYXQoIHggOiBmMzIsIHkgOiBmMzIgKSAtPiBmMzIgeyByZXR1cm4geCAtIHkgKiBmbG9vciggeCAvIHkgKTsgfScgKSxcblx0bW9kX3ZlYzI6IG5ldyBDb2RlTm9kZSggJ2ZuIHRzbF9tb2RfdmVjMiggeCA6IHZlYzJmLCB5IDogdmVjMmYgKSAtPiB2ZWMyZiB7IHJldHVybiB4IC0geSAqIGZsb29yKCB4IC8geSApOyB9JyApLFxuXHRtb2RfdmVjMzogbmV3IENvZGVOb2RlKCAnZm4gdHNsX21vZF92ZWMzKCB4IDogdmVjM2YsIHkgOiB2ZWMzZiApIC0+IHZlYzNmIHsgcmV0dXJuIHggLSB5ICogZmxvb3IoIHggLyB5ICk7IH0nICksXG5cdG1vZF92ZWM0OiBuZXcgQ29kZU5vZGUoICdmbiB0c2xfbW9kX3ZlYzQoIHggOiB2ZWM0ZiwgeSA6IHZlYzRmICkgLT4gdmVjNGYgeyByZXR1cm4geCAtIHkgKiBmbG9vciggeCAvIHkgKTsgfScgKSxcblx0ZXF1YWxzX2Jvb2w6IG5ldyBDb2RlTm9kZSggJ2ZuIHRzbF9lcXVhbHNfYm9vbCggYSA6IGJvb2wsIGIgOiBib29sICkgLT4gYm9vbCB7IHJldHVybiBhID09IGI7IH0nICksXG5cdGVxdWFsc19idmVjMjogbmV3IENvZGVOb2RlKCAnZm4gdHNsX2VxdWFsc19idmVjMiggYSA6IHZlYzJmLCBiIDogdmVjMmYgKSAtPiB2ZWMyPGJvb2w+IHsgcmV0dXJuIHZlYzI8Ym9vbD4oIGEueCA9PSBiLngsIGEueSA9PSBiLnkgKTsgfScgKSxcblx0ZXF1YWxzX2J2ZWMzOiBuZXcgQ29kZU5vZGUoICdmbiB0c2xfZXF1YWxzX2J2ZWMzKCBhIDogdmVjM2YsIGIgOiB2ZWMzZiApIC0+IHZlYzM8Ym9vbD4geyByZXR1cm4gdmVjMzxib29sPiggYS54ID09IGIueCwgYS55ID09IGIueSwgYS56ID09IGIueiApOyB9JyApLFxuXHRlcXVhbHNfYnZlYzQ6IG5ldyBDb2RlTm9kZSggJ2ZuIHRzbF9lcXVhbHNfYnZlYzQoIGEgOiB2ZWM0ZiwgYiA6IHZlYzRmICkgLT4gdmVjNDxib29sPiB7IHJldHVybiB2ZWM0PGJvb2w+KCBhLnggPT0gYi54LCBhLnkgPT0gYi55LCBhLnogPT0gYi56LCBhLncgPT0gYi53ICk7IH0nICksXG5cdHJlcGVhdFdyYXBwaW5nX2Zsb2F0OiBuZXcgQ29kZU5vZGUoICdmbiB0c2xfcmVwZWF0V3JhcHBpbmdfZmxvYXQoIGNvb3JkOiBmMzIgKSAtPiBmMzIgeyByZXR1cm4gZnJhY3QoIGNvb3JkICk7IH0nICksXG5cdG1pcnJvcldyYXBwaW5nX2Zsb2F0OiBuZXcgQ29kZU5vZGUoICdmbiB0c2xfbWlycm9yV3JhcHBpbmdfZmxvYXQoIGNvb3JkOiBmMzIgKSAtPiBmMzIgeyBsZXQgbWlycm9yZWQgPSBmcmFjdCggY29vcmQgKiAwLjUgKSAqIDIuMDsgcmV0dXJuIDEuMCAtIGFicyggMS4wIC0gbWlycm9yZWQgKTsgfScgKSxcblx0Y2xhbXBXcmFwcGluZ19mbG9hdDogbmV3IENvZGVOb2RlKCAnZm4gdHNsX2NsYW1wV3JhcHBpbmdfZmxvYXQoIGNvb3JkOiBmMzIgKSAtPiBmMzIgeyByZXR1cm4gY2xhbXAoIGNvb3JkLCAwLjAsIDEuMCApOyB9JyApLFxuXHRiaXF1YWRyYXRpY1RleHR1cmU6IG5ldyBDb2RlTm9kZSggLyogd2dzbCAqL2BcbmZuIHRzbF9iaXF1YWRyYXRpY1RleHR1cmUoIG1hcCA6IHRleHR1cmVfMmQ8ZjMyPiwgY29vcmQgOiB2ZWMyZiwgaVJlcyA6IHZlYzJ1LCBsZXZlbCA6IHUzMiApIC0+IHZlYzRmIHtcblxuXHRsZXQgcmVzID0gdmVjMmYoIGlSZXMgKTtcblxuXHRsZXQgdXZTY2FsZWQgPSBjb29yZCAqIHJlcztcblx0bGV0IHV2V3JhcHBpbmcgPSAoICggdXZTY2FsZWQgJSByZXMgKSArIHJlcyApICUgcmVzO1xuXG5cdC8vIGh0dHBzOi8vd3d3LnNoYWRlcnRveS5jb20vdmlldy9XdHlYUnlcblxuXHRsZXQgdXYgPSB1dldyYXBwaW5nIC0gMC41O1xuXHRsZXQgaXV2ID0gZmxvb3IoIHV2ICk7XG5cdGxldCBmID0gZnJhY3QoIHV2ICk7XG5cblx0bGV0IHJnMSA9IHRleHR1cmVMb2FkKCBtYXAsIHZlYzJ1KCBpdXYgKyB2ZWMyKCAwLjUsIDAuNSApICkgJSBpUmVzLCBsZXZlbCApO1xuXHRsZXQgcmcyID0gdGV4dHVyZUxvYWQoIG1hcCwgdmVjMnUoIGl1diArIHZlYzIoIDEuNSwgMC41ICkgKSAlIGlSZXMsIGxldmVsICk7XG5cdGxldCByZzMgPSB0ZXh0dXJlTG9hZCggbWFwLCB2ZWMydSggaXV2ICsgdmVjMiggMC41LCAxLjUgKSApICUgaVJlcywgbGV2ZWwgKTtcblx0bGV0IHJnNCA9IHRleHR1cmVMb2FkKCBtYXAsIHZlYzJ1KCBpdXYgKyB2ZWMyKCAxLjUsIDEuNSApICkgJSBpUmVzLCBsZXZlbCApO1xuXG5cdHJldHVybiBtaXgoIG1peCggcmcxLCByZzIsIGYueCApLCBtaXgoIHJnMywgcmc0LCBmLnggKSwgZi55ICk7XG5cbn1cbmAgKVxufTtcblxuY29uc3Qgd2dzbE1ldGhvZHMgPSB7XG5cdGRGZHg6ICdkcGR4Jyxcblx0ZEZkeTogJy0gZHBkeScsXG5cdG1vZF9mbG9hdDogJ3RzbF9tb2RfZmxvYXQnLFxuXHRtb2RfdmVjMjogJ3RzbF9tb2RfdmVjMicsXG5cdG1vZF92ZWMzOiAndHNsX21vZF92ZWMzJyxcblx0bW9kX3ZlYzQ6ICd0c2xfbW9kX3ZlYzQnLFxuXHRlcXVhbHNfYm9vbDogJ3RzbF9lcXVhbHNfYm9vbCcsXG5cdGVxdWFsc19idmVjMjogJ3RzbF9lcXVhbHNfYnZlYzInLFxuXHRlcXVhbHNfYnZlYzM6ICd0c2xfZXF1YWxzX2J2ZWMzJyxcblx0ZXF1YWxzX2J2ZWM0OiAndHNsX2VxdWFsc19idmVjNCcsXG5cdGludmVyc2VzcXJ0OiAnaW52ZXJzZVNxcnQnLFxuXHRiaXRjYXN0OiAnYml0Y2FzdDxmMzI+J1xufTtcblxuLy8gV2ViR1BVIGlzc3VlOiBkb2VzIG5vdCBzdXBwb3J0IHBvdygpIHdpdGggbmVnYXRpdmUgYmFzZSBvbiBXaW5kb3dzXG5cbmlmICggdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL1dpbmRvd3MvZy50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICkgKSB7XG5cblx0d2dzbFBvbHlmaWxsLnBvd19mbG9hdCA9IG5ldyBDb2RlTm9kZSggJ2ZuIHRzbF9wb3dfZmxvYXQoIGEgOiBmMzIsIGIgOiBmMzIgKSAtPiBmMzIgeyByZXR1cm4gc2VsZWN0KCAtcG93KCAtYSwgYiApLCBwb3coIGEsIGIgKSwgYSA+IDAuMCApOyB9JyApO1xuXHR3Z3NsUG9seWZpbGwucG93X3ZlYzIgPSBuZXcgQ29kZU5vZGUoICdmbiB0c2xfcG93X3ZlYzIoIGEgOiB2ZWMyZiwgYiA6IHZlYzJmICkgLT4gdmVjMmYgeyByZXR1cm4gdmVjMmYoIHRzbF9wb3dfZmxvYXQoIGEueCwgYi54ICksIHRzbF9wb3dfZmxvYXQoIGEueSwgYi55ICkgKTsgfScsIFsgd2dzbFBvbHlmaWxsLnBvd19mbG9hdCBdICk7XG5cdHdnc2xQb2x5ZmlsbC5wb3dfdmVjMyA9IG5ldyBDb2RlTm9kZSggJ2ZuIHRzbF9wb3dfdmVjMyggYSA6IHZlYzNmLCBiIDogdmVjM2YgKSAtPiB2ZWMzZiB7IHJldHVybiB2ZWMzZiggdHNsX3Bvd19mbG9hdCggYS54LCBiLnggKSwgdHNsX3Bvd19mbG9hdCggYS55LCBiLnkgKSwgdHNsX3Bvd19mbG9hdCggYS56LCBiLnogKSApOyB9JywgWyB3Z3NsUG9seWZpbGwucG93X2Zsb2F0IF0gKTtcblx0d2dzbFBvbHlmaWxsLnBvd192ZWM0ID0gbmV3IENvZGVOb2RlKCAnZm4gdHNsX3Bvd192ZWM0KCBhIDogdmVjNGYsIGIgOiB2ZWM0ZiApIC0+IHZlYzRmIHsgcmV0dXJuIHZlYzRmKCB0c2xfcG93X2Zsb2F0KCBhLngsIGIueCApLCB0c2xfcG93X2Zsb2F0KCBhLnksIGIueSApLCB0c2xfcG93X2Zsb2F0KCBhLnosIGIueiApLCB0c2xfcG93X2Zsb2F0KCBhLncsIGIudyApICk7IH0nLCBbIHdnc2xQb2x5ZmlsbC5wb3dfZmxvYXQgXSApO1xuXG5cdHdnc2xNZXRob2RzLnBvd19mbG9hdCA9ICd0c2xfcG93X2Zsb2F0Jztcblx0d2dzbE1ldGhvZHMucG93X3ZlYzIgPSAndHNsX3Bvd192ZWMyJztcblx0d2dzbE1ldGhvZHMucG93X3ZlYzMgPSAndHNsX3Bvd192ZWMzJztcblx0d2dzbE1ldGhvZHMucG93X3ZlYzQgPSAndHNsX3Bvd192ZWM0JztcblxufVxuXG4vL1xuXG5sZXQgZGlhZ25vc3RpY3MgPSAnJztcblxuaWYgKCAoIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9GaXJlZm94fERlbm8vZy50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICkgKSAhPT0gdHJ1ZSApIHtcblxuXHRkaWFnbm9zdGljcyArPSAnZGlhZ25vc3RpYyggb2ZmLCBkZXJpdmF0aXZlX3VuaWZvcm1pdHkgKTtcXG4nO1xuXG59XG5cbi8qKlxuICogQSBub2RlIGJ1aWxkZXIgdGFyZ2V0aW5nIFdHU0wuXG4gKlxuICogVGhpcyBtb2R1bGUgZ2VuZXJhdGVzIFdHU0wgc2hhZGVyIGNvZGUgZnJvbSBub2RlIG1hdGVyaWFscyBhbmQgYWxzb1xuICogZ2VuZXJhdGVzIHRoZSByZXNwZWN0aXZlIGJpbmRpbmdzIGFuZCB2ZXJ0ZXggYnVmZmVyIGRlZmluaXRpb25zLiBUaGVzZVxuICogZGF0YSBhcmUgbGF0ZXIgdXNlZCBieSB0aGUgcmVuZGVyZXIgdG8gY3JlYXRlIHJlbmRlciBhbmQgY29tcHV0ZSBwaXBlbGluZXNcbiAqIGZvciByZW5kZXIgb2JqZWN0cy5cbiAqXG4gKiBAYXVnbWVudHMgTm9kZUJ1aWxkZXJcbiAqL1xuY2xhc3MgV0dTTE5vZGVCdWlsZGVyIGV4dGVuZHMgTm9kZUJ1aWxkZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IFdHU0wgbm9kZSBidWlsZGVyIHJlbmRlcmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIHJlbmRlcmVyICkge1xuXG5cdFx0c3VwZXIoIG9iamVjdCwgcmVuZGVyZXIsIG5ldyBXR1NMTm9kZVBhcnNlcigpICk7XG5cblx0XHQvKipcblx0XHQgKiBBIGRpY3Rpb25hcnkgdGhhdCBob2xkcyBmb3IgZWFjaCBzaGFkZXIgc3RhZ2UgKCd2ZXJ0ZXgnLCAnZnJhZ21lbnQnLCAnY29tcHV0ZScpXG5cdFx0ICogYW5vdGhlciBkaWN0aW9uYXJ5IHdoaWNoIG1hbmFnZXMgVUJPcyBwZXIgZ3JvdXAgKCdyZW5kZXInLCdmcmFtZScsJ29iamVjdCcpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsT2JqZWN0PHN0cmluZyxOb2RlVW5pZm9ybXNHcm91cD4+fVxuXHRcdCAqL1xuXHRcdHRoaXMudW5pZm9ybUdyb3VwcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQSBkaWN0aW9uYXJ5IHRoYXQgaG9sZHMgZm9yIGVhY2ggc2hhZGVyIHN0YWdlIGEgTWFwIG9mIGJ1aWx0aW5zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsTWFwPHN0cmluZyxPYmplY3Q+Pn1cblx0XHQgKi9cblx0XHR0aGlzLmJ1aWx0aW5zID0ge307XG5cblx0XHQvKipcblx0XHQgKiBBIGRpY3Rpb25hcnkgdGhhdCBob2xkcyBmb3IgZWFjaCBzaGFkZXIgc3RhZ2UgYSBTZXQgb2YgZGlyZWN0aXZlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLFNldDxzdHJpbmc+Pn1cblx0XHQgKi9cblx0XHR0aGlzLmRpcmVjdGl2ZXMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgbWFwIGZvciBtYW5hZ2luZyBzY29wZSBhcnJheXMuIE9ubHkgcmVsZXZhbnQgZm9yIHdoZW4gdXNpbmdcblx0XHQgKiB7QGxpbmsgV29ya2dyb3VwSW5mb05vZGV9IGluIGNvbnRleHQgb2YgY29tcHV0ZSBzaGFkZXJzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hcDxzdHJpbmcsT2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLnNjb3BlZEFycmF5cyA9IG5ldyBNYXAoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gdGV4dHVyZSByZXF1aXJlcyBhIG1hbnVhbCBjb252ZXJzaW9uIHRvIHRoZSB3b3JraW5nIGNvbG9yIHNwYWNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBjaGVjay5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gdGV4dHVyZSByZXF1aXJlcyBhIGNvbnZlcnNpb24gdG8gd29ya2luZyBjb2xvciBzcGFjZSBvciBub3QuXG5cdCAqL1xuXHRuZWVkc1RvV29ya2luZ0NvbG9yU3BhY2UoIHRleHR1cmUgKSB7XG5cblx0XHRyZXR1cm4gdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSAmJiB0ZXh0dXJlLmNvbG9yU3BhY2UgIT09IE5vQ29sb3JTcGFjZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgV0dTTCBzbmlwcGV0IGZvciBzYW1wbGVkIHRleHR1cmVzLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVQcm9wZXJ0eSAtIFRoZSBuYW1lIG9mIHRoZSB0ZXh0dXJlIHVuaWZvcm0gaW4gdGhlIHNoYWRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHV2U25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0ZXh0dXJlIGNvb3JkaW5hdGVzIHVzZWQgZm9yIHNhbXBsaW5nLlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IGRlcHRoU25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyAwLWJhc2VkIHRleHR1cmUgYXJyYXkgaW5kZXggdG8gc2FtcGxlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3NoYWRlclN0YWdlPXRoaXMuc2hhZGVyU3RhZ2VdIC0gVGhlIHNoYWRlciBzdGFnZSB0aGlzIGNvZGUgc25pcHBldCBpcyBnZW5lcmF0ZWQgZm9yLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBXR1NMIHNuaXBwZXQuXG5cdCAqL1xuXHRfZ2VuZXJhdGVUZXh0dXJlU2FtcGxlKCB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgZGVwdGhTbmlwcGV0LCBzaGFkZXJTdGFnZSA9IHRoaXMuc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRpZiAoIHNoYWRlclN0YWdlID09PSAnZnJhZ21lbnQnICkge1xuXG5cdFx0XHRpZiAoIGRlcHRoU25pcHBldCApIHtcblxuXHRcdFx0XHRyZXR1cm4gYHRleHR1cmVTYW1wbGUoICR7IHRleHR1cmVQcm9wZXJ0eSB9LCAkeyB0ZXh0dXJlUHJvcGVydHkgfV9zYW1wbGVyLCAkeyB1dlNuaXBwZXQgfSwgJHsgZGVwdGhTbmlwcGV0IH0gKWA7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIGB0ZXh0dXJlU2FtcGxlKCAkeyB0ZXh0dXJlUHJvcGVydHkgfSwgJHsgdGV4dHVyZVByb3BlcnR5IH1fc2FtcGxlciwgJHsgdXZTbmlwcGV0IH0gKWA7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuaXNGaWx0ZXJlZFRleHR1cmUoIHRleHR1cmUgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2VuZXJhdGVGaWx0ZXJlZFRleHR1cmUoIHRleHR1cmUsIHRleHR1cmVQcm9wZXJ0eSwgdXZTbmlwcGV0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZW5lcmF0ZVRleHR1cmVMb2QoIHRleHR1cmUsIHRleHR1cmVQcm9wZXJ0eSwgdXZTbmlwcGV0LCBkZXB0aFNuaXBwZXQsICcwJyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSBXR1NMIHNuaXBwZXQgd2hlbiBzYW1wbGluZyB2aWRlbyB0ZXh0dXJlcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVQcm9wZXJ0eSAtIFRoZSBuYW1lIG9mIHRoZSB2aWRlbyB0ZXh0dXJlIHVuaWZvcm0gaW4gdGhlIHNoYWRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHV2U25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0ZXh0dXJlIGNvb3JkaW5hdGVzIHVzZWQgZm9yIHNhbXBsaW5nLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3NoYWRlclN0YWdlPXRoaXMuc2hhZGVyU3RhZ2VdIC0gVGhlIHNoYWRlciBzdGFnZSB0aGlzIGNvZGUgc25pcHBldCBpcyBnZW5lcmF0ZWQgZm9yLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBXR1NMIHNuaXBwZXQuXG5cdCAqL1xuXHRfZ2VuZXJhdGVWaWRlb1NhbXBsZSggdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIHNoYWRlclN0YWdlID0gdGhpcy5zaGFkZXJTdGFnZSApIHtcblxuXHRcdGlmICggc2hhZGVyU3RhZ2UgPT09ICdmcmFnbWVudCcgKSB7XG5cblx0XHRcdHJldHVybiBgdGV4dHVyZVNhbXBsZUJhc2VDbGFtcFRvRWRnZSggJHsgdGV4dHVyZVByb3BlcnR5IH0sICR7IHRleHR1cmVQcm9wZXJ0eSB9X3NhbXBsZXIsIHZlYzI8ZjMyPiggJHsgdXZTbmlwcGV0IH0ueCwgMS4wIC0gJHsgdXZTbmlwcGV0IH0ueSApIClgO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggYFdlYkdQVVJlbmRlcmVyOiBUSFJFRS5WaWRlb1RleHR1cmUgZG9lcyBub3Qgc3VwcG9ydCAkeyBzaGFkZXJTdGFnZSB9IHNoYWRlci5gICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIFdHU0wgc25pcHBldCB3aGVuIHNhbXBsaW5nIHRleHR1cmVzIHdpdGggZXhwbGljaXQgbWlwIGxldmVsLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVQcm9wZXJ0eSAtIFRoZSBuYW1lIG9mIHRoZSB0ZXh0dXJlIHVuaWZvcm0gaW4gdGhlIHNoYWRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHV2U25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0ZXh0dXJlIGNvb3JkaW5hdGVzIHVzZWQgZm9yIHNhbXBsaW5nLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWxTbmlwcGV0IC0gQSBXR1NMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIHRoZSBtaXAgbGV2ZWwsIHdpdGggbGV2ZWwgMCBjb250YWluaW5nIGEgZnVsbCBzaXplIHZlcnNpb24gb2YgdGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gZGVwdGhTbmlwcGV0IC0gQSBXR1NMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIDAtYmFzZWQgdGV4dHVyZSBhcnJheSBpbmRleCB0byBzYW1wbGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbc2hhZGVyU3RhZ2U9dGhpcy5zaGFkZXJTdGFnZV0gLSBUaGUgc2hhZGVyIHN0YWdlIHRoaXMgY29kZSBzbmlwcGV0IGlzIGdlbmVyYXRlZCBmb3IuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFdHU0wgc25pcHBldC5cblx0ICovXG5cdF9nZW5lcmF0ZVRleHR1cmVTYW1wbGVMZXZlbCggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGxldmVsU25pcHBldCwgZGVwdGhTbmlwcGV0LCBzaGFkZXJTdGFnZSA9IHRoaXMuc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRpZiAoICggc2hhZGVyU3RhZ2UgPT09ICdmcmFnbWVudCcgfHwgc2hhZGVyU3RhZ2UgPT09ICdjb21wdXRlJyApICYmIHRoaXMuaXNVbmZpbHRlcmFibGUoIHRleHR1cmUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHJldHVybiBgdGV4dHVyZVNhbXBsZUxldmVsKCAkeyB0ZXh0dXJlUHJvcGVydHkgfSwgJHsgdGV4dHVyZVByb3BlcnR5IH1fc2FtcGxlciwgJHsgdXZTbmlwcGV0IH0sICR7IGxldmVsU25pcHBldCB9IClgO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5pc0ZpbHRlcmVkVGV4dHVyZSggdGV4dHVyZSApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZW5lcmF0ZUZpbHRlcmVkVGV4dHVyZSggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGxldmVsU25pcHBldCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2VuZXJhdGVUZXh0dXJlTG9kKCB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgZGVwdGhTbmlwcGV0LCBsZXZlbFNuaXBwZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIHdyYXAgZnVuY3Rpb24gdXNlZCBpbiBjb250ZXh0IG9mIHRleHR1cmVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBnZW5lcmF0ZSB0aGUgZnVuY3Rpb24gZm9yLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgZnVuY3Rpb24uXG5cdCAqL1xuXHRnZW5lcmF0ZVdyYXBGdW5jdGlvbiggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IGZ1bmN0aW9uTmFtZSA9IGB0c2xfY29vcmRfJHsgd3JhcE5hbWVzWyB0ZXh0dXJlLndyYXBTIF0gfVNfJHsgd3JhcE5hbWVzWyB0ZXh0dXJlLndyYXBUIF0gfV8ke3RleHR1cmUuaXNEYXRhM0RUZXh0dXJlID8gJzNkJyA6ICcyZCd9VGA7XG5cblx0XHRsZXQgbm9kZUNvZGUgPSB3Z3NsQ29kZUNhY2hlWyBmdW5jdGlvbk5hbWUgXTtcblxuXHRcdGlmICggbm9kZUNvZGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgaW5jbHVkZXMgPSBbXTtcblxuXHRcdFx0Ly8gRm9yIDNEIHRleHR1cmVzLCB1c2UgdmVjM2Y7IGZvciB0ZXh0dXJlIGFycmF5cywga2VlcCB2ZWMyZiBzaW5jZSBhcnJheSBpbmRleCBpcyBzZXBhcmF0ZVxuXHRcdFx0Y29uc3QgY29vcmRUeXBlID0gdGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgPyAndmVjM2YnIDogJ3ZlYzJmJztcblx0XHRcdGxldCBjb2RlID0gYGZuICR7ZnVuY3Rpb25OYW1lfSggY29vcmQgOiAke2Nvb3JkVHlwZX0gKSAtPiAke2Nvb3JkVHlwZX0ge1xcblxcblxcdHJldHVybiAke2Nvb3JkVHlwZX0oXFxuYDtcblxuXHRcdFx0Y29uc3QgYWRkV3JhcFNuaXBwZXQgPSAoIHdyYXAsIGF4aXMgKSA9PiB7XG5cblx0XHRcdFx0aWYgKCB3cmFwID09PSBSZXBlYXRXcmFwcGluZyApIHtcblxuXHRcdFx0XHRcdGluY2x1ZGVzLnB1c2goIHdnc2xQb2x5ZmlsbC5yZXBlYXRXcmFwcGluZ19mbG9hdCApO1xuXG5cdFx0XHRcdFx0Y29kZSArPSBgXFx0XFx0dHNsX3JlcGVhdFdyYXBwaW5nX2Zsb2F0KCBjb29yZC4keyBheGlzIH0gKWA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggd3JhcCA9PT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyApIHtcblxuXHRcdFx0XHRcdGluY2x1ZGVzLnB1c2goIHdnc2xQb2x5ZmlsbC5jbGFtcFdyYXBwaW5nX2Zsb2F0ICk7XG5cblx0XHRcdFx0XHRjb2RlICs9IGBcXHRcXHR0c2xfY2xhbXBXcmFwcGluZ19mbG9hdCggY29vcmQuJHsgYXhpcyB9IClgO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHdyYXAgPT09IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcgKSB7XG5cblx0XHRcdFx0XHRpbmNsdWRlcy5wdXNoKCB3Z3NsUG9seWZpbGwubWlycm9yV3JhcHBpbmdfZmxvYXQgKTtcblxuXHRcdFx0XHRcdGNvZGUgKz0gYFxcdFxcdHRzbF9taXJyb3JXcmFwcGluZ19mbG9hdCggY29vcmQuJHsgYXhpcyB9IClgO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb2RlICs9IGBcXHRcXHRjb29yZC4keyBheGlzIH1gO1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCBgV2ViR1BVUmVuZGVyZXI6IFVuc3VwcG9ydGVkIHRleHR1cmUgd3JhcCB0eXBlIFwiJHsgd3JhcCB9XCIgZm9yIHZlcnRleCBzaGFkZXIuYCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fTtcblxuXHRcdFx0YWRkV3JhcFNuaXBwZXQoIHRleHR1cmUud3JhcFMsICd4JyApO1xuXG5cdFx0XHRjb2RlICs9ICcsXFxuJztcblxuXHRcdFx0YWRkV3JhcFNuaXBwZXQoIHRleHR1cmUud3JhcFQsICd5JyApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRcdGNvZGUgKz0gJyxcXG4nO1xuXHRcdFx0XHRhZGRXcmFwU25pcHBldCggdGV4dHVyZS53cmFwUiwgJ3onICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29kZSArPSAnXFxuXFx0KTtcXG5cXG59XFxuJztcblxuXHRcdFx0d2dzbENvZGVDYWNoZVsgZnVuY3Rpb25OYW1lIF0gPSBub2RlQ29kZSA9IG5ldyBDb2RlTm9kZSggY29kZSwgaW5jbHVkZXMgKTtcblxuXHRcdH1cblxuXHRcdG5vZGVDb2RlLmJ1aWxkKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb25OYW1lO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSBhcnJheSBkZWNsYXJhdGlvbiBzdHJpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUuXG5cdCAqIEBwYXJhbSB7P251bWJlcn0gW2NvdW50XSAtIFRoZSBjb3VudC5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIHZhbHVlIGFzIGEgc2hhZGVyIHN0cmluZy5cblx0ICovXG5cdGdlbmVyYXRlQXJyYXlEZWNsYXJhdGlvbiggdHlwZSwgY291bnQgKSB7XG5cblx0XHRyZXR1cm4gYGFycmF5PCAkeyB0aGlzLmdldFR5cGUoIHR5cGUgKSB9LCAkeyBjb3VudCB9ID5gO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgV0dTTCB2YXJpYWJsZSB0aGF0IGhvbGRzIHRoZSB0ZXh0dXJlIGRpbWVuc2lvbiBvZiB0aGUgZ2l2ZW4gdGV4dHVyZS5cblx0ICogSXQgYWxzbyByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0aGUgbnVtYmVyIG9mIGxheWVycyAoZWxlbWVudHMpIG9mIGFuIGFycmF5ZWRcblx0ICogdGV4dHVyZSBhcyB3ZWxsIGFzIHRoZSBjdWJlIGZhY2UgY291bnQgb2YgY3ViZSB0ZXh0dXJlcy5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gZ2VuZXJhdGUgdGhlIGZ1bmN0aW9uIGZvci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVQcm9wZXJ0eSAtIFRoZSBuYW1lIG9mIHRoZSB2aWRlbyB0ZXh0dXJlIHVuaWZvcm0gaW4gdGhlIHNoYWRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGxldmVsU25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgbWlwIGxldmVsLCB3aXRoIGxldmVsIDAgY29udGFpbmluZyBhIGZ1bGwgc2l6ZSB2ZXJzaW9uIG9mIHRoZSB0ZXh0dXJlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBkaW1lbnNpb24gdmFyaWFibGUuXG5cdCAqL1xuXHRnZW5lcmF0ZVRleHR1cmVEaW1lbnNpb24oIHRleHR1cmUsIHRleHR1cmVQcm9wZXJ0eSwgbGV2ZWxTbmlwcGV0ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZURhdGEgPSB0aGlzLmdldERhdGFGcm9tTm9kZSggdGV4dHVyZSwgdGhpcy5zaGFkZXJTdGFnZSwgdGhpcy5nbG9iYWxDYWNoZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlRGF0YS5kaW1lbnNpb25zU25pcHBldCA9PT0gdW5kZWZpbmVkICkgdGV4dHVyZURhdGEuZGltZW5zaW9uc1NuaXBwZXQgPSB7fTtcblxuXHRcdGxldCB0ZXh0dXJlRGltZW5zaW9uTm9kZSA9IHRleHR1cmVEYXRhLmRpbWVuc2lvbnNTbmlwcGV0WyBsZXZlbFNuaXBwZXQgXTtcblxuXHRcdGlmICggdGV4dHVyZURhdGEuZGltZW5zaW9uc1NuaXBwZXRbIGxldmVsU25pcHBldCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxldCB0ZXh0dXJlRGltZW5zaW9uc1BhcmFtcztcblx0XHRcdGxldCBkaW1lbnNpb25UeXBlO1xuXG5cdFx0XHRjb25zdCB7IHByaW1hcnlTYW1wbGVzIH0gPSB0aGlzLnJlbmRlcmVyLmJhY2tlbmQudXRpbHMuZ2V0VGV4dHVyZVNhbXBsZURhdGEoIHRleHR1cmUgKTtcblx0XHRcdGNvbnN0IGlzTXVsdGlzYW1wbGVkID0gcHJpbWFyeVNhbXBsZXMgPiAxO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRcdGRpbWVuc2lvblR5cGUgPSAndmVjMzx1MzI+JztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBSZWd1bGFyIDJEIHRleHR1cmVzLCBkZXB0aCB0ZXh0dXJlcywgZXRjLlxuXHRcdFx0XHRkaW1lbnNpb25UeXBlID0gJ3ZlYzI8dTMyPic7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gQnVpbGQgcGFyYW1ldGVycyBzdHJpbmcgYmFzZWQgb24gdGV4dHVyZSB0eXBlIGFuZCBtdWx0aXNhbXBsaW5nXG5cdFx0XHRpZiAoIGlzTXVsdGlzYW1wbGVkIHx8IHRleHR1cmUuaXNWaWRlb1RleHR1cmUgfHwgdGV4dHVyZS5pc1N0b3JhZ2VUZXh0dXJlICkge1xuXG5cdFx0XHRcdHRleHR1cmVEaW1lbnNpb25zUGFyYW1zID0gdGV4dHVyZVByb3BlcnR5O1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRleHR1cmVEaW1lbnNpb25zUGFyYW1zID0gYCR7dGV4dHVyZVByb3BlcnR5fSR7bGV2ZWxTbmlwcGV0ID8gYCwgdTMyKCAkeyBsZXZlbFNuaXBwZXQgfSApYCA6ICcnfWA7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZURpbWVuc2lvbk5vZGUgPSBuZXcgVmFyTm9kZSggbmV3IEV4cHJlc3Npb25Ob2RlKCBgdGV4dHVyZURpbWVuc2lvbnMoICR7IHRleHR1cmVEaW1lbnNpb25zUGFyYW1zIH0gKWAsIGRpbWVuc2lvblR5cGUgKSApO1xuXG5cdFx0XHR0ZXh0dXJlRGF0YS5kaW1lbnNpb25zU25pcHBldFsgbGV2ZWxTbmlwcGV0IF0gPSB0ZXh0dXJlRGltZW5zaW9uTm9kZTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlRGF0YS5hcnJheUxheWVyQ291bnQgPSBuZXcgVmFyTm9kZShcblx0XHRcdFx0XHRuZXcgRXhwcmVzc2lvbk5vZGUoXG5cdFx0XHRcdFx0XHRgdGV4dHVyZU51bUxheWVycygke3RleHR1cmVQcm9wZXJ0eX0pYCxcblx0XHRcdFx0XHRcdCd1MzInXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBjdWJlIHRleHR1cmVzLCB3ZSBrbm93IGl0J3MgYWx3YXlzIDYgZmFjZXNcblx0XHRcdGlmICggdGV4dHVyZS5pc1RleHR1cmVDdWJlICkge1xuXG5cdFx0XHRcdHRleHR1cmVEYXRhLmN1YmVGYWNlQ291bnQgPSBuZXcgVmFyTm9kZShcblx0XHRcdFx0XHRuZXcgRXhwcmVzc2lvbk5vZGUoICc2dScsICd1MzInIClcblx0XHRcdFx0KTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmVEaW1lbnNpb25Ob2RlLmJ1aWxkKCB0aGlzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIFdHU0wgc25pcHBldCBmb3IgYSBtYW51YWwgZmlsdGVyZWQgdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0dXJlUHJvcGVydHkgLSBUaGUgbmFtZSBvZiB0aGUgdGV4dHVyZSB1bmlmb3JtIGluIHRoZSBzaGFkZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1dlNuaXBwZXQgLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGV4dHVyZSBjb29yZGluYXRlcyB1c2VkIGZvciBzYW1wbGluZy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGxldmVsU25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgbWlwIGxldmVsLCB3aXRoIGxldmVsIDAgY29udGFpbmluZyBhIGZ1bGwgc2l6ZSB2ZXJzaW9uIG9mIHRoZSB0ZXh0dXJlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBXR1NMIHNuaXBwZXQuXG5cdCAqL1xuXHRnZW5lcmF0ZUZpbHRlcmVkVGV4dHVyZSggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGxldmVsU25pcHBldCA9ICcwdScgKSB7XG5cblx0XHR0aGlzLl9pbmNsdWRlKCAnYmlxdWFkcmF0aWNUZXh0dXJlJyApO1xuXG5cdFx0Y29uc3Qgd3JhcEZ1bmN0aW9uID0gdGhpcy5nZW5lcmF0ZVdyYXBGdW5jdGlvbiggdGV4dHVyZSApO1xuXHRcdGNvbnN0IHRleHR1cmVEaW1lbnNpb24gPSB0aGlzLmdlbmVyYXRlVGV4dHVyZURpbWVuc2lvbiggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCBsZXZlbFNuaXBwZXQgKTtcblxuXHRcdHJldHVybiBgdHNsX2JpcXVhZHJhdGljVGV4dHVyZSggJHsgdGV4dHVyZVByb3BlcnR5IH0sICR7IHdyYXBGdW5jdGlvbiB9KCAkeyB1dlNuaXBwZXQgfSApLCAkeyB0ZXh0dXJlRGltZW5zaW9uIH0sIHUzMiggJHsgbGV2ZWxTbmlwcGV0IH0gKSApYDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgV0dTTCBzbmlwcGV0IGZvciBhIHRleHR1cmUgbG9va3VwIHdpdGggZXhwbGljaXQgbGV2ZWwtb2YtZGV0YWlsLlxuXHQgKiBTaW5jZSBpdCdzIGEgbG9va3VwLCBubyBzYW1wbGluZyBvciBmaWx0ZXJpbmcgaXMgYXBwbGllZC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0dXJlUHJvcGVydHkgLSBUaGUgbmFtZSBvZiB0aGUgdGV4dHVyZSB1bmlmb3JtIGluIHRoZSBzaGFkZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1dlNuaXBwZXQgLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGV4dHVyZSBjb29yZGluYXRlcyB1c2VkIGZvciBzYW1wbGluZy5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBkZXB0aFNuaXBwZXQgLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgMC1iYXNlZCB0ZXh0dXJlIGFycmF5IGluZGV4IHRvIHNhbXBsZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtsZXZlbFNuaXBwZXQ9JzB1J10gLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGhlIG1pcCBsZXZlbCwgd2l0aCBsZXZlbCAwIGNvbnRhaW5pbmcgYSBmdWxsIHNpemUgdmVyc2lvbiBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgV0dTTCBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlTG9kKCB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgZGVwdGhTbmlwcGV0LCBsZXZlbFNuaXBwZXQgPSAnMHUnICkge1xuXG5cdFx0Y29uc3Qgd3JhcEZ1bmN0aW9uID0gdGhpcy5nZW5lcmF0ZVdyYXBGdW5jdGlvbiggdGV4dHVyZSApO1xuXHRcdGNvbnN0IHRleHR1cmVEaW1lbnNpb24gPSB0aGlzLmdlbmVyYXRlVGV4dHVyZURpbWVuc2lvbiggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCBsZXZlbFNuaXBwZXQgKTtcblxuXHRcdGNvbnN0IHZlY1R5cGUgPSB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSA/ICd2ZWMzJyA6ICd2ZWMyJztcblx0XHRjb25zdCBjb29yZFNuaXBwZXQgPSBgJHt2ZWNUeXBlfTx1MzI+KCR7d3JhcEZ1bmN0aW9ufSgke3V2U25pcHBldH0pICogJHt2ZWNUeXBlfTxmMzI+KCR7dGV4dHVyZURpbWVuc2lvbn0pKWA7XG5cblx0XHRyZXR1cm4gdGhpcy5nZW5lcmF0ZVRleHR1cmVMb2FkKCB0ZXh0dXJlLCB0ZXh0dXJlUHJvcGVydHksIGNvb3JkU25pcHBldCwgZGVwdGhTbmlwcGV0LCBsZXZlbFNuaXBwZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgV0dTTCBzbmlwcGV0IHRoYXQgcmVhZHMgYSBzaW5nbGUgdGV4ZWwgZnJvbSBhIHRleHR1cmUgd2l0aG91dCBzYW1wbGluZyBvciBmaWx0ZXJpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHRleHR1cmUgdW5pZm9ybSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXZJbmRleFNuaXBwZXQgLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGV4dHVyZSBjb29yZGluYXRlcyB1c2VkIGZvciBzYW1wbGluZy5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBkZXB0aFNuaXBwZXQgLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgMC1iYXNlZCB0ZXh0dXJlIGFycmF5IGluZGV4IHRvIHNhbXBsZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtsZXZlbFNuaXBwZXQ9JzB1J10gLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGhlIG1pcCBsZXZlbCwgd2l0aCBsZXZlbCAwIGNvbnRhaW5pbmcgYSBmdWxsIHNpemUgdmVyc2lvbiBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgV0dTTCBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlTG9hZCggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dkluZGV4U25pcHBldCwgZGVwdGhTbmlwcGV0LCBsZXZlbFNuaXBwZXQgPSAnMHUnICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlID09PSB0cnVlIHx8IHRleHR1cmUuaXNTdG9yYWdlVGV4dHVyZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0cmV0dXJuIGB0ZXh0dXJlTG9hZCggJHsgdGV4dHVyZVByb3BlcnR5IH0sICR7IHV2SW5kZXhTbmlwcGV0IH0gKWA7XG5cblx0XHR9IGVsc2UgaWYgKCBkZXB0aFNuaXBwZXQgKSB7XG5cblx0XHRcdHJldHVybiBgdGV4dHVyZUxvYWQoICR7IHRleHR1cmVQcm9wZXJ0eSB9LCAkeyB1dkluZGV4U25pcHBldCB9LCAkeyBkZXB0aFNuaXBwZXQgfSwgdTMyKCAkeyBsZXZlbFNuaXBwZXQgfSApIClgO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIGB0ZXh0dXJlTG9hZCggJHsgdGV4dHVyZVByb3BlcnR5IH0sICR7IHV2SW5kZXhTbmlwcGV0IH0sIHUzMiggJHsgbGV2ZWxTbmlwcGV0IH0gKSApYDtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgV0dTTCBzbmlwcGV0IHRoYXQgd3JpdGVzIGEgc2luZ2xlIHRleGVsIHRvIGEgdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0dXJlUHJvcGVydHkgLSBUaGUgbmFtZSBvZiB0aGUgdGV4dHVyZSB1bmlmb3JtIGluIHRoZSBzaGFkZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1dkluZGV4U25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0ZXh0dXJlIGNvb3JkaW5hdGVzIHVzZWQgZm9yIHNhbXBsaW5nLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVTbmlwcGV0IC0gQSBXR1NMIHNuaXBwZXQgdGhhdCByZXByZXNlbnQgdGhlIG5ldyB0ZXhlbCB2YWx1ZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgV0dTTCBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlU3RvcmUoIHRleHR1cmUsIHRleHR1cmVQcm9wZXJ0eSwgdXZJbmRleFNuaXBwZXQsIHZhbHVlU25pcHBldCApIHtcblxuXHRcdHJldHVybiBgdGV4dHVyZVN0b3JlKCAkeyB0ZXh0dXJlUHJvcGVydHkgfSwgJHsgdXZJbmRleFNuaXBwZXQgfSwgJHsgdmFsdWVTbmlwcGV0IH0gKWA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgc2FtcGxlZCB2YWx1ZXMgb2YgdGhlIGdpdmVuIHRleHR1cmUgc2hvdWxkIGJlIGNvbXBhcmVkIGFnYWluc3QgYSByZWZlcmVuY2UgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzYW1wbGVkIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gdGV4dHVyZSBzaG91bGQgYmUgY29tcGFyZWQgYWdhaW5zdCBhIHJlZmVyZW5jZSB2YWx1ZSBvciBub3QuXG5cdCAqL1xuXHRpc1NhbXBsZUNvbXBhcmUoIHRleHR1cmUgKSB7XG5cblx0XHRyZXR1cm4gdGV4dHVyZS5pc0RlcHRoVGV4dHVyZSA9PT0gdHJ1ZSAmJiB0ZXh0dXJlLmNvbXBhcmVGdW5jdGlvbiAhPT0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiB0ZXh0dXJlIGlzIHVuZmlsdGVyYWJsZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIHRleHR1cmUgaXMgdW5maWx0ZXJhYmxlIG9yIG5vdC5cblx0ICovXG5cdGlzVW5maWx0ZXJhYmxlKCB0ZXh0dXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50VHlwZUZyb21UZXh0dXJlKCB0ZXh0dXJlICkgIT09ICdmbG9hdCcgfHxcblx0XHRcdCggISB0aGlzLmlzQXZhaWxhYmxlKCAnZmxvYXQzMkZpbHRlcmFibGUnICkgJiYgdGV4dHVyZS5pc0RhdGFUZXh0dXJlID09PSB0cnVlICYmIHRleHR1cmUudHlwZSA9PT0gRmxvYXRUeXBlICkgfHxcblx0XHRcdCggdGhpcy5pc1NhbXBsZUNvbXBhcmUoIHRleHR1cmUgKSA9PT0gZmFsc2UgJiYgdGV4dHVyZS5taW5GaWx0ZXIgPT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5tYWdGaWx0ZXIgPT09IE5lYXJlc3RGaWx0ZXIgKSB8fFxuXHRcdFx0dGhpcy5yZW5kZXJlci5iYWNrZW5kLnV0aWxzLmdldFRleHR1cmVTYW1wbGVEYXRhKCB0ZXh0dXJlICkucHJpbWFyeVNhbXBsZXMgPiAxO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSBXR1NMIHNuaXBwZXQgZm9yIHNhbXBsaW5nL2xvYWRpbmcgdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHRleHR1cmUgdW5pZm9ybSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXZTbmlwcGV0IC0gQSBXR1NMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIHRleHR1cmUgY29vcmRpbmF0ZXMgdXNlZCBmb3Igc2FtcGxpbmcuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gZGVwdGhTbmlwcGV0IC0gQSBXR1NMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIDAtYmFzZWQgdGV4dHVyZSBhcnJheSBpbmRleCB0byBzYW1wbGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbc2hhZGVyU3RhZ2U9dGhpcy5zaGFkZXJTdGFnZV0gLSBUaGUgc2hhZGVyIHN0YWdlIHRoaXMgY29kZSBzbmlwcGV0IGlzIGdlbmVyYXRlZCBmb3IuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFdHU0wgc25pcHBldC5cblx0ICovXG5cdGdlbmVyYXRlVGV4dHVyZSggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGRlcHRoU25pcHBldCwgc2hhZGVyU3RhZ2UgPSB0aGlzLnNoYWRlclN0YWdlICkge1xuXG5cdFx0bGV0IHNuaXBwZXQgPSBudWxsO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRzbmlwcGV0ID0gdGhpcy5fZ2VuZXJhdGVWaWRlb1NhbXBsZSggdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIHNoYWRlclN0YWdlICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLmlzVW5maWx0ZXJhYmxlKCB0ZXh0dXJlICkgKSB7XG5cblx0XHRcdHNuaXBwZXQgPSB0aGlzLmdlbmVyYXRlVGV4dHVyZUxvZCggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGRlcHRoU25pcHBldCwgJzAnLCBzaGFkZXJTdGFnZSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c25pcHBldCA9IHRoaXMuX2dlbmVyYXRlVGV4dHVyZVNhbXBsZSggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGRlcHRoU25pcHBldCwgc2hhZGVyU3RhZ2UgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzbmlwcGV0O1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSBXR1NMIHNuaXBwZXQgZm9yIHNhbXBsaW5nL2xvYWRpbmcgdGhlIGdpdmVuIHRleHR1cmUgdXNpbmcgZXhwbGljaXQgZ3JhZGllbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVQcm9wZXJ0eSAtIFRoZSBuYW1lIG9mIHRoZSB0ZXh0dXJlIHVuaWZvcm0gaW4gdGhlIHNoYWRlci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHV2U25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0ZXh0dXJlIGNvb3JkaW5hdGVzIHVzZWQgZm9yIHNhbXBsaW5nLlxuXHQgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGdyYWRTbmlwcGV0IC0gQW4gYXJyYXkgaG9sZGluZyBib3RoIGdyYWRpZW50IFdHU0wgc25pcHBldHMuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gZGVwdGhTbmlwcGV0IC0gQSBXR1NMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIDAtYmFzZWQgdGV4dHVyZSBhcnJheSBpbmRleCB0byBzYW1wbGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbc2hhZGVyU3RhZ2U9dGhpcy5zaGFkZXJTdGFnZV0gLSBUaGUgc2hhZGVyIHN0YWdlIHRoaXMgY29kZSBzbmlwcGV0IGlzIGdlbmVyYXRlZCBmb3IuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFdHU0wgc25pcHBldC5cblx0ICovXG5cdGdlbmVyYXRlVGV4dHVyZUdyYWQoIHRleHR1cmUsIHRleHR1cmVQcm9wZXJ0eSwgdXZTbmlwcGV0LCBncmFkU25pcHBldCwgZGVwdGhTbmlwcGV0LCBzaGFkZXJTdGFnZSA9IHRoaXMuc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRpZiAoIHNoYWRlclN0YWdlID09PSAnZnJhZ21lbnQnICkge1xuXG5cdFx0XHQvLyBUT0RPIGhhbmRsZSBpMzIgb3IgdTMyIC0tPiB1dlNuaXBwZXQsIGFycmF5X2luZGV4OiBBLCBkZHgsIGRkeVxuXHRcdFx0cmV0dXJuIGB0ZXh0dXJlU2FtcGxlR3JhZCggJHsgdGV4dHVyZVByb3BlcnR5IH0sICR7IHRleHR1cmVQcm9wZXJ0eSB9X3NhbXBsZXIsICR7IHV2U25pcHBldCB9LCAgJHsgZ3JhZFNuaXBwZXRbIDAgXSB9LCAkeyBncmFkU25pcHBldFsgMSBdIH0gKWA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCBgV2ViR1BVUmVuZGVyZXI6IFRIUkVFLlRleHR1cmVOb2RlLmdyYWRpZW50KCkgZG9lcyBub3Qgc3VwcG9ydCAkeyBzaGFkZXJTdGFnZSB9IHNoYWRlci5gICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIFdHU0wgc25pcHBldCBmb3Igc2FtcGxpbmcgYSBkZXB0aCB0ZXh0dXJlIGFuZCBjb21wYXJpbmcgdGhlIHNhbXBsZWQgZGVwdGggdmFsdWVzXG5cdCAqIGFnYWluc3QgYSByZWZlcmVuY2UgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHRleHR1cmUgdW5pZm9ybSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXZTbmlwcGV0IC0gQSBXR1NMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIHRleHR1cmUgY29vcmRpbmF0ZXMgdXNlZCBmb3Igc2FtcGxpbmcuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjb21wYXJlU25pcHBldCAtICBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGhlIHJlZmVyZW5jZSB2YWx1ZS5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBkZXB0aFNuaXBwZXQgLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgMC1iYXNlZCB0ZXh0dXJlIGFycmF5IGluZGV4IHRvIHNhbXBsZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtzaGFkZXJTdGFnZT10aGlzLnNoYWRlclN0YWdlXSAtIFRoZSBzaGFkZXIgc3RhZ2UgdGhpcyBjb2RlIHNuaXBwZXQgaXMgZ2VuZXJhdGVkIGZvci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgV0dTTCBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlQ29tcGFyZSggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGNvbXBhcmVTbmlwcGV0LCBkZXB0aFNuaXBwZXQsIHNoYWRlclN0YWdlID0gdGhpcy5zaGFkZXJTdGFnZSApIHtcblxuXHRcdGlmICggc2hhZGVyU3RhZ2UgPT09ICdmcmFnbWVudCcgKSB7XG5cblx0XHRcdHJldHVybiBgdGV4dHVyZVNhbXBsZUNvbXBhcmUoICR7IHRleHR1cmVQcm9wZXJ0eSB9LCAkeyB0ZXh0dXJlUHJvcGVydHkgfV9zYW1wbGVyLCAkeyB1dlNuaXBwZXQgfSwgJHsgY29tcGFyZVNuaXBwZXQgfSApYDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoIGBXZWJHUFVSZW5kZXJlcjogVEhSRUUuRGVwdGhUZXh0dXJlLmNvbXBhcmVGdW5jdGlvbigpIGRvZXMgbm90IHN1cHBvcnQgJHsgc2hhZGVyU3RhZ2UgfSBzaGFkZXIuYCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIHRoZSBXR1NMIHNuaXBwZXQgd2hlbiBzYW1wbGluZyB0ZXh0dXJlcyB3aXRoIGV4cGxpY2l0IG1pcCBsZXZlbC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0dXJlUHJvcGVydHkgLSBUaGUgbmFtZSBvZiB0aGUgdGV4dHVyZSB1bmlmb3JtIGluIHRoZSBzaGFkZXIuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1dlNuaXBwZXQgLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgdGV4dHVyZSBjb29yZGluYXRlcyB1c2VkIGZvciBzYW1wbGluZy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGxldmVsU25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgbWlwIGxldmVsLCB3aXRoIGxldmVsIDAgY29udGFpbmluZyBhIGZ1bGwgc2l6ZSB2ZXJzaW9uIG9mIHRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0gez9zdHJpbmd9IGRlcHRoU25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyAwLWJhc2VkIHRleHR1cmUgYXJyYXkgaW5kZXggdG8gc2FtcGxlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3NoYWRlclN0YWdlPXRoaXMuc2hhZGVyU3RhZ2VdIC0gVGhlIHNoYWRlciBzdGFnZSB0aGlzIGNvZGUgc25pcHBldCBpcyBnZW5lcmF0ZWQgZm9yLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBXR1NMIHNuaXBwZXQuXG5cdCAqL1xuXHRnZW5lcmF0ZVRleHR1cmVMZXZlbCggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGxldmVsU25pcHBldCwgZGVwdGhTbmlwcGV0LCBzaGFkZXJTdGFnZSA9IHRoaXMuc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRsZXQgc25pcHBldCA9IG51bGw7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgPT09IHRydWUgKSB7XG5cblx0XHRcdHNuaXBwZXQgPSB0aGlzLl9nZW5lcmF0ZVZpZGVvU2FtcGxlKCB0ZXh0dXJlUHJvcGVydHksIHV2U25pcHBldCwgc2hhZGVyU3RhZ2UgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHNuaXBwZXQgPSB0aGlzLl9nZW5lcmF0ZVRleHR1cmVTYW1wbGVMZXZlbCggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGxldmVsU25pcHBldCwgZGVwdGhTbmlwcGV0LCBzaGFkZXJTdGFnZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNuaXBwZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIFdHU0wgc25pcHBldCB3aGVuIHNhbXBsaW5nIHRleHR1cmVzIHdpdGggYSBiaWFzIHRvIHRoZSBtaXAgbGV2ZWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dHVyZVByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHRleHR1cmUgdW5pZm9ybSBpbiB0aGUgc2hhZGVyLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXZTbmlwcGV0IC0gQSBXR1NMIHNuaXBwZXQgdGhhdCByZXByZXNlbnRzIHRleHR1cmUgY29vcmRpbmF0ZXMgdXNlZCBmb3Igc2FtcGxpbmcuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBiaWFzU25pcHBldCAtIEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgYmlhcyB0byBhcHBseSB0byB0aGUgbWlwIGxldmVsIGJlZm9yZSBzYW1wbGluZy5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBkZXB0aFNuaXBwZXQgLSBBIFdHU0wgc25pcHBldCB0aGF0IHJlcHJlc2VudHMgMC1iYXNlZCB0ZXh0dXJlIGFycmF5IGluZGV4IHRvIHNhbXBsZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtzaGFkZXJTdGFnZT10aGlzLnNoYWRlclN0YWdlXSAtIFRoZSBzaGFkZXIgc3RhZ2UgdGhpcyBjb2RlIHNuaXBwZXQgaXMgZ2VuZXJhdGVkIGZvci5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgV0dTTCBzbmlwcGV0LlxuXHQgKi9cblx0Z2VuZXJhdGVUZXh0dXJlQmlhcyggdGV4dHVyZSwgdGV4dHVyZVByb3BlcnR5LCB1dlNuaXBwZXQsIGJpYXNTbmlwcGV0LCBkZXB0aFNuaXBwZXQsIHNoYWRlclN0YWdlID0gdGhpcy5zaGFkZXJTdGFnZSApIHtcblxuXHRcdGlmICggc2hhZGVyU3RhZ2UgPT09ICdmcmFnbWVudCcgKSB7XG5cblx0XHRcdHJldHVybiBgdGV4dHVyZVNhbXBsZUJpYXMoICR7IHRleHR1cmVQcm9wZXJ0eSB9LCAkeyB0ZXh0dXJlUHJvcGVydHkgfV9zYW1wbGVyLCAkeyB1dlNuaXBwZXQgfSwgJHsgYmlhc1NuaXBwZXQgfSApYDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoIGBXZWJHUFVSZW5kZXJlcjogVEhSRUUuVGV4dHVyZU5vZGUuYmlhc05vZGUgZG9lcyBub3Qgc3VwcG9ydCAkeyBzaGFkZXJTdGFnZSB9IHNoYWRlci5gICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgcHJvcGVydHkgbmFtZSBvZiB0aGUgZ2l2ZW4gbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIG5vZGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbc2hhZGVyU3RhZ2U9dGhpcy5zaGFkZXJTdGFnZV0gLSBUaGUgc2hhZGVyIHN0YWdlIHRoaXMgY29kZSBzbmlwcGV0IGlzIGdlbmVyYXRlZCBmb3IuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHByb3BlcnR5IG5hbWUuXG5cdCAqL1xuXHRnZXRQcm9wZXJ0eU5hbWUoIG5vZGUsIHNoYWRlclN0YWdlID0gdGhpcy5zaGFkZXJTdGFnZSApIHtcblxuXHRcdGlmICggbm9kZS5pc05vZGVWYXJ5aW5nID09PSB0cnVlICYmIG5vZGUubmVlZHNJbnRlcnBvbGF0aW9uID09PSB0cnVlICkge1xuXG5cdFx0XHRpZiAoIHNoYWRlclN0YWdlID09PSAndmVydGV4JyApIHtcblxuXHRcdFx0XHRyZXR1cm4gYHZhcnlpbmdzLiR7IG5vZGUubmFtZSB9YDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbm9kZS5pc05vZGVVbmlmb3JtID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCBuYW1lID0gbm9kZS5uYW1lO1xuXHRcdFx0Y29uc3QgdHlwZSA9IG5vZGUudHlwZTtcblxuXHRcdFx0aWYgKCB0eXBlID09PSAndGV4dHVyZScgfHwgdHlwZSA9PT0gJ2N1YmVUZXh0dXJlJyB8fCB0eXBlID09PSAnc3RvcmFnZVRleHR1cmUnIHx8IHR5cGUgPT09ICd0ZXh0dXJlM0QnICkge1xuXG5cdFx0XHRcdHJldHVybiBuYW1lO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSAnYnVmZmVyJyB8fCB0eXBlID09PSAnc3RvcmFnZUJ1ZmZlcicgfHwgdHlwZSA9PT0gJ2luZGlyZWN0U3RvcmFnZUJ1ZmZlcicgKSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLmlzQ3VzdG9tU3RydWN0KCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbmFtZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG5hbWUgKyAnLnZhbHVlJztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbm9kZS5ncm91cE5vZGUubmFtZSArICcuJyArIG5hbWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBzdXBlci5nZXRQcm9wZXJ0eU5hbWUoIG5vZGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG91dHB1dCBzdHJ1Y3QgbmFtZS5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvZiB0aGUgb3V0cHV0IHN0cnVjdC5cblx0ICovXG5cdGdldE91dHB1dFN0cnVjdE5hbWUoKSB7XG5cblx0XHRyZXR1cm4gJ291dHB1dCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBuYXRpdmUgc2hhZGVyIG9wZXJhdG9yIG5hbWUgZm9yIGEgZ2l2ZW4gZ2VuZXJpYyBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gb3AgLSBUaGUgb3BlcmF0b3IgbmFtZSB0byByZXNvbHZlLlxuXHQgKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgcmVzb2x2ZWQgb3BlcmF0b3IgbmFtZS5cblx0ICovXG5cdGdldEZ1bmN0aW9uT3BlcmF0b3IoIG9wICkge1xuXG5cdFx0Y29uc3QgZm5PcCA9IHdnc2xGbk9wTGliWyBvcCBdO1xuXG5cdFx0aWYgKCBmbk9wICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuX2luY2x1ZGUoIGZuT3AgKTtcblxuXHRcdFx0cmV0dXJuIGZuT3A7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG5vZGUgYWNjZXNzIGZvciB0aGUgZ2l2ZW4gbm9kZSBhbmQgc2hhZGVyIHN0YWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0b3JhZ2VUZXh0dXJlTm9kZXxTdG9yYWdlQnVmZmVyTm9kZX0gbm9kZSAtIFRoZSBzdG9yYWdlIG5vZGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5vZGUgYWNjZXNzLlxuXHQgKi9cblx0Z2V0Tm9kZUFjY2Vzcyggbm9kZSwgc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRpZiAoIHNoYWRlclN0YWdlICE9PSAnY29tcHV0ZScgKVxuXHRcdFx0cmV0dXJuIE5vZGVBY2Nlc3MuUkVBRF9PTkxZO1xuXG5cdFx0cmV0dXJuIG5vZGUuYWNjZXNzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBBIFdHU0wgc25pcHBldCByZXByZXNlbnRpbmcgdGhlIHN0b3JhZ2UgYWNjZXNzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0b3JhZ2VUZXh0dXJlTm9kZXxTdG9yYWdlQnVmZmVyTm9kZX0gbm9kZSAtIFRoZSBzdG9yYWdlIG5vZGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFdHU0wgc25pcHBldCByZXByZXNlbnRpbmcgdGhlIHN0b3JhZ2UgYWNjZXNzLlxuXHQgKi9cblx0Z2V0U3RvcmFnZUFjY2Vzcyggbm9kZSwgc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRyZXR1cm4gYWNjZXNzTmFtZXNbIHRoaXMuZ2V0Tm9kZUFjY2Vzcyggbm9kZSwgc2hhZGVyU3RhZ2UgKSBdO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgaXMgb25lIG9mIHRoZSBtb3JlIGltcG9ydGFudCBvbmVzIHNpbmNlIGl0J3MgcmVzcG9uc2libGVcblx0ICogZm9yIGdlbmVyYXRpbmcgYSBtYXRjaGluZyBiaW5kaW5nIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gdW5pZm9ybSBub2RlLlxuXHQgKlxuXHQgKiBUaGVzZSBiaW5kaW5ncyBhcmUgbGF0ZXIgdXNlZCBpbiB0aGUgcmVuZGVyZXIgdG8gY3JlYXRlIGJpbmQgZ3JvdXBzXG5cdCAqIGFuZCBsYXlvdXRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1VuaWZvcm1Ob2RlfSBub2RlIC0gVGhlIHVuaWZvcm0gbm9kZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgbm9kZSBkYXRhIHR5cGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEBwYXJhbSB7P3N0cmluZ30gW25hbWU9bnVsbF0gLSBBbiBvcHRpb25hbCB1bmlmb3JtIG5hbWUuXG5cdCAqIEByZXR1cm4ge05vZGVVbmlmb3JtfSBUaGUgbm9kZSB1bmlmb3JtIG9iamVjdC5cblx0ICovXG5cdGdldFVuaWZvcm1Gcm9tTm9kZSggbm9kZSwgdHlwZSwgc2hhZGVyU3RhZ2UsIG5hbWUgPSBudWxsICkge1xuXG5cdFx0Y29uc3QgdW5pZm9ybU5vZGUgPSBzdXBlci5nZXRVbmlmb3JtRnJvbU5vZGUoIG5vZGUsIHR5cGUsIHNoYWRlclN0YWdlLCBuYW1lICk7XG5cdFx0Y29uc3Qgbm9kZURhdGEgPSB0aGlzLmdldERhdGFGcm9tTm9kZSggbm9kZSwgc2hhZGVyU3RhZ2UsIHRoaXMuZ2xvYmFsQ2FjaGUgKTtcblxuXHRcdGlmICggbm9kZURhdGEudW5pZm9ybUdQVSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsZXQgdW5pZm9ybUdQVTtcblxuXHRcdFx0Y29uc3QgZ3JvdXAgPSBub2RlLmdyb3VwTm9kZTtcblx0XHRcdGNvbnN0IGdyb3VwTmFtZSA9IGdyb3VwLm5hbWU7XG5cblx0XHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5nZXRCaW5kR3JvdXBBcnJheSggZ3JvdXBOYW1lLCBzaGFkZXJTdGFnZSApO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09ICd0ZXh0dXJlJyB8fCB0eXBlID09PSAnY3ViZVRleHR1cmUnIHx8IHR5cGUgPT09ICdzdG9yYWdlVGV4dHVyZScgfHwgdHlwZSA9PT0gJ3RleHR1cmUzRCcgKSB7XG5cblx0XHRcdFx0bGV0IHRleHR1cmUgPSBudWxsO1xuXG5cdFx0XHRcdGNvbnN0IGFjY2VzcyA9IHRoaXMuZ2V0Tm9kZUFjY2Vzcyggbm9kZSwgc2hhZGVyU3RhZ2UgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09ICd0ZXh0dXJlJyB8fCB0eXBlID09PSAnc3RvcmFnZVRleHR1cmUnICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBOb2RlU2FtcGxlZFRleHR1cmUoIHVuaWZvcm1Ob2RlLm5hbWUsIHVuaWZvcm1Ob2RlLm5vZGUsIGdyb3VwLCBhY2Nlc3MgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSAnY3ViZVRleHR1cmUnICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBOb2RlU2FtcGxlZEN1YmVUZXh0dXJlKCB1bmlmb3JtTm9kZS5uYW1lLCB1bmlmb3JtTm9kZS5ub2RlLCBncm91cCwgYWNjZXNzICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gJ3RleHR1cmUzRCcgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IE5vZGVTYW1wbGVkVGV4dHVyZTNEKCB1bmlmb3JtTm9kZS5uYW1lLCB1bmlmb3JtTm9kZS5ub2RlLCBncm91cCwgYWNjZXNzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUuc3RvcmUgPSBub2RlLmlzU3RvcmFnZVRleHR1cmVOb2RlID09PSB0cnVlO1xuXHRcdFx0XHR0ZXh0dXJlLnNldFZpc2liaWxpdHkoIGdwdVNoYWRlclN0YWdlTGliWyBzaGFkZXJTdGFnZSBdICk7XG5cblx0XHRcdFx0aWYgKCAoIHNoYWRlclN0YWdlID09PSAnZnJhZ21lbnQnIHx8IHNoYWRlclN0YWdlID09PSAnY29tcHV0ZScgKSAmJiB0aGlzLmlzVW5maWx0ZXJhYmxlKCBub2RlLnZhbHVlICkgPT09IGZhbHNlICYmIHRleHR1cmUuc3RvcmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0Y29uc3Qgc2FtcGxlciA9IG5ldyBOb2RlU2FtcGxlciggYCR7IHVuaWZvcm1Ob2RlLm5hbWUgfV9zYW1wbGVyYCwgdW5pZm9ybU5vZGUubm9kZSwgZ3JvdXAgKTtcblx0XHRcdFx0XHRzYW1wbGVyLnNldFZpc2liaWxpdHkoIGdwdVNoYWRlclN0YWdlTGliWyBzaGFkZXJTdGFnZSBdICk7XG5cblx0XHRcdFx0XHRiaW5kaW5ncy5wdXNoKCBzYW1wbGVyLCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0XHR1bmlmb3JtR1BVID0gWyBzYW1wbGVyLCB0ZXh0dXJlIF07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGJpbmRpbmdzLnB1c2goIHRleHR1cmUgKTtcblxuXHRcdFx0XHRcdHVuaWZvcm1HUFUgPSBbIHRleHR1cmUgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09ICdidWZmZXInIHx8IHR5cGUgPT09ICdzdG9yYWdlQnVmZmVyJyB8fCB0eXBlID09PSAnaW5kaXJlY3RTdG9yYWdlQnVmZmVyJyApIHtcblxuXHRcdFx0XHRjb25zdCBidWZmZXJDbGFzcyA9IHR5cGUgPT09ICdidWZmZXInID8gTm9kZVVuaWZvcm1CdWZmZXIgOiBOb2RlU3RvcmFnZUJ1ZmZlcjtcblxuXHRcdFx0XHRjb25zdCBidWZmZXIgPSBuZXcgYnVmZmVyQ2xhc3MoIG5vZGUsIGdyb3VwICk7XG5cdFx0XHRcdGJ1ZmZlci5zZXRWaXNpYmlsaXR5KCBncHVTaGFkZXJTdGFnZUxpYlsgc2hhZGVyU3RhZ2UgXSApO1xuXG5cdFx0XHRcdGJpbmRpbmdzLnB1c2goIGJ1ZmZlciApO1xuXG5cdFx0XHRcdHVuaWZvcm1HUFUgPSBidWZmZXI7XG5cblx0XHRcdFx0dW5pZm9ybU5vZGUubmFtZSA9IG5hbWUgPyBuYW1lIDogJ05vZGVCdWZmZXJfJyArIHVuaWZvcm1Ob2RlLmlkO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zU3RhZ2UgPSB0aGlzLnVuaWZvcm1Hcm91cHNbIHNoYWRlclN0YWdlIF0gfHwgKCB0aGlzLnVuaWZvcm1Hcm91cHNbIHNoYWRlclN0YWdlIF0gPSB7fSApO1xuXG5cdFx0XHRcdGxldCB1bmlmb3Jtc0dyb3VwID0gdW5pZm9ybXNTdGFnZVsgZ3JvdXBOYW1lIF07XG5cblx0XHRcdFx0aWYgKCB1bmlmb3Jtc0dyb3VwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR1bmlmb3Jtc0dyb3VwID0gbmV3IE5vZGVVbmlmb3Jtc0dyb3VwKCBncm91cE5hbWUsIGdyb3VwICk7XG5cdFx0XHRcdFx0dW5pZm9ybXNHcm91cC5zZXRWaXNpYmlsaXR5KCBncHVTaGFkZXJTdGFnZUxpYlsgc2hhZGVyU3RhZ2UgXSApO1xuXG5cdFx0XHRcdFx0dW5pZm9ybXNTdGFnZVsgZ3JvdXBOYW1lIF0gPSB1bmlmb3Jtc0dyb3VwO1xuXG5cdFx0XHRcdFx0YmluZGluZ3MucHVzaCggdW5pZm9ybXNHcm91cCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR1bmlmb3JtR1BVID0gdGhpcy5nZXROb2RlVW5pZm9ybSggdW5pZm9ybU5vZGUsIHR5cGUgKTtcblxuXHRcdFx0XHR1bmlmb3Jtc0dyb3VwLmFkZFVuaWZvcm0oIHVuaWZvcm1HUFUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRub2RlRGF0YS51bmlmb3JtR1BVID0gdW5pZm9ybUdQVTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1bmlmb3JtTm9kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSB1c2VkIHdoZW5ldmVyIGJ1aWx0aW5zIGFyZSByZXF1aXJlZCBpbiBub2Rlcy5cblx0ICogVGhlIGludGVybmFsIGJ1aWx0aW5zIGRhdGEgc3RydWN0dXJlIHdpbGwgbWFrZSBzdXJlIGJ1aWx0aW5zIGFyZVxuXHQgKiBkZWZpbmVkIGluIHRoZSBXR1NMIHNvdXJjZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgYnVpbHRpbiBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgLSBUaGUgcHJvcGVydHkgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgbm9kZSBkYXRhIHR5cGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbc2hhZGVyU3RhZ2U9dGhpcy5zaGFkZXJTdGFnZV0gLSBUaGUgc2hhZGVyIHN0YWdlIHRoaXMgY29kZSBzbmlwcGV0IGlzIGdlbmVyYXRlZCBmb3IuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHByb3BlcnR5IG5hbWUuXG5cdCAqL1xuXHRnZXRCdWlsdGluKCBuYW1lLCBwcm9wZXJ0eSwgdHlwZSwgc2hhZGVyU3RhZ2UgPSB0aGlzLnNoYWRlclN0YWdlICkge1xuXG5cdFx0Y29uc3QgbWFwID0gdGhpcy5idWlsdGluc1sgc2hhZGVyU3RhZ2UgXSB8fCAoIHRoaXMuYnVpbHRpbnNbIHNoYWRlclN0YWdlIF0gPSBuZXcgTWFwKCkgKTtcblxuXHRcdGlmICggbWFwLmhhcyggbmFtZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0bWFwLnNldCggbmFtZSwge1xuXHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRwcm9wZXJ0eSxcblx0XHRcdFx0dHlwZVxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb3BlcnR5O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGJ1aWx0aW4gaXMgZGVmaW5lZCBpbiB0aGUgZ2l2ZW4gc2hhZGVyIHN0YWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBidWlsdGluIG5hbWUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbc2hhZGVyU3RhZ2U9dGhpcy5zaGFkZXJTdGFnZV0gLSBUaGUgc2hhZGVyIHN0YWdlIHRoaXMgY29kZSBzbmlwcGV0IGlzIGdlbmVyYXRlZCBmb3IuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGJ1aWx0aW4gaXMgZGVmaW5lZCBpbiB0aGUgZ2l2ZW4gc2hhZGVyIHN0YWdlIG9yIG5vdC5cblx0ICovXG5cdGhhc0J1aWx0aW4oIG5hbWUsIHNoYWRlclN0YWdlID0gdGhpcy5zaGFkZXJTdGFnZSApIHtcblxuXHRcdHJldHVybiAoIHRoaXMuYnVpbHRpbnNbIHNoYWRlclN0YWdlIF0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmJ1aWx0aW5zWyBzaGFkZXJTdGFnZSBdLmhhcyggbmFtZSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2ZXJ0ZXggaW5kZXggYnVpbHRpbi5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgdmVydGV4IGluZGV4LlxuXHQgKi9cblx0Z2V0VmVydGV4SW5kZXgoKSB7XG5cblx0XHRpZiAoIHRoaXMuc2hhZGVyU3RhZ2UgPT09ICd2ZXJ0ZXgnICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRCdWlsdGluKCAndmVydGV4X2luZGV4JywgJ3ZlcnRleEluZGV4JywgJ3UzMicsICdhdHRyaWJ1dGUnICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gJ3ZlcnRleEluZGV4JztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEJ1aWxkcyB0aGUgZ2l2ZW4gc2hhZGVyIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U2hhZGVyTm9kZUludGVybmFsfSBzaGFkZXJOb2RlIC0gVGhlIHNoYWRlciBub2RlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBXR1NMIGZ1bmN0aW9uIGNvZGUuXG5cdCAqL1xuXHRidWlsZEZ1bmN0aW9uQ29kZSggc2hhZGVyTm9kZSApIHtcblxuXHRcdGNvbnN0IGxheW91dCA9IHNoYWRlck5vZGUubGF5b3V0O1xuXHRcdGNvbnN0IGZsb3dEYXRhID0gdGhpcy5mbG93U2hhZGVyTm9kZSggc2hhZGVyTm9kZSApO1xuXG5cdFx0Y29uc3QgcGFyYW1ldGVycyA9IFtdO1xuXG5cdFx0Zm9yICggY29uc3QgaW5wdXQgb2YgbGF5b3V0LmlucHV0cyApIHtcblxuXHRcdFx0cGFyYW1ldGVycy5wdXNoKCBpbnB1dC5uYW1lICsgJyA6ICcgKyB0aGlzLmdldFR5cGUoIGlucHV0LnR5cGUgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGxldCBjb2RlID0gYGZuICR7IGxheW91dC5uYW1lIH0oICR7IHBhcmFtZXRlcnMuam9pbiggJywgJyApIH0gKSAtPiAkeyB0aGlzLmdldFR5cGUoIGxheW91dC50eXBlICkgfSB7XG4keyBmbG93RGF0YS52YXJzIH1cbiR7IGZsb3dEYXRhLmNvZGUgfVxuYDtcblxuXHRcdGlmICggZmxvd0RhdGEucmVzdWx0ICkge1xuXG5cdFx0XHRjb2RlICs9IGBcXHRyZXR1cm4gJHsgZmxvd0RhdGEucmVzdWx0IH07XFxuYDtcblxuXHRcdH1cblxuXHRcdGNvZGUgKz0gJ1xcbn1cXG4nO1xuXG5cdFx0Ly9cblxuXHRcdHJldHVybiBjb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5zdGFuY2UgaW5kZXggYnVpbHRpbi5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgaW5zdGFuY2UgaW5kZXguXG5cdCAqL1xuXHRnZXRJbnN0YW5jZUluZGV4KCkge1xuXG5cdFx0aWYgKCB0aGlzLnNoYWRlclN0YWdlID09PSAndmVydGV4JyApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0QnVpbHRpbiggJ2luc3RhbmNlX2luZGV4JywgJ2luc3RhbmNlSW5kZXgnLCAndTMyJywgJ2F0dHJpYnV0ZScgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiAnaW5zdGFuY2VJbmRleCc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnZvY2F0aW9uIGxvY2FsIGluZGV4IGJ1aWx0aW4uXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGludm9jYXRpb24gbG9jYWwgaW5kZXguXG5cdCAqL1xuXHRnZXRJbnZvY2F0aW9uTG9jYWxJbmRleCgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdldEJ1aWx0aW4oICdsb2NhbF9pbnZvY2F0aW9uX2luZGV4JywgJ2ludm9jYXRpb25Mb2NhbEluZGV4JywgJ3UzMicsICdhdHRyaWJ1dGUnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzdWJncm91cCBzaXplIGJ1aWx0aW4uXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN1Ymdyb3VwIHNpemUuXG5cdCAqL1xuXHRnZXRTdWJncm91cFNpemUoKSB7XG5cblx0XHR0aGlzLmVuYWJsZVN1Ykdyb3VwcygpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0QnVpbHRpbiggJ3N1Ymdyb3VwX3NpemUnLCAnc3ViZ3JvdXBTaXplJywgJ3UzMicsICdhdHRyaWJ1dGUnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnZvY2F0aW9uIHN1Ymdyb3VwIGluZGV4IGJ1aWx0aW4uXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGludm9jYXRpb24gc3ViZ3JvdXAgaW5kZXguXG5cdCAqL1xuXHRnZXRJbnZvY2F0aW9uU3ViZ3JvdXBJbmRleCgpIHtcblxuXHRcdHRoaXMuZW5hYmxlU3ViR3JvdXBzKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRCdWlsdGluKCAnc3ViZ3JvdXBfaW52b2NhdGlvbl9pZCcsICdpbnZvY2F0aW9uU3ViZ3JvdXBJbmRleCcsICd1MzInLCAnYXR0cmlidXRlJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc3ViZ3JvdXAgaW5kZXggYnVpbHRpbi5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3ViZ3JvdXAgaW5kZXguXG5cdCAqL1xuXHRnZXRTdWJncm91cEluZGV4KCkge1xuXG5cdFx0dGhpcy5lbmFibGVTdWJHcm91cHMoKTtcblxuXHRcdHJldHVybiB0aGlzLmdldEJ1aWx0aW4oICdzdWJncm91cF9pZCcsICdzdWJncm91cEluZGV4JywgJ3UzMicsICdhdHRyaWJ1dGUnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBPdmVyd3JpdHRlbiBhcyBhIE5PUCBzaW5jZSB0aGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGhlIFdlYkdMIDIgYmFja2VuZC5cblx0ICpcblx0ICogQHJldHVybiB7bnVsbH0gTnVsbC5cblx0ICovXG5cdGdldERyYXdJbmRleCgpIHtcblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZnJvbnQgZmFjaW5nIGJ1aWx0aW4uXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZyb250IGZhY2luZyBidWlsdGluLlxuXHQgKi9cblx0Z2V0RnJvbnRGYWNpbmcoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRCdWlsdGluKCAnZnJvbnRfZmFjaW5nJywgJ2lzRnJvbnQnLCAnYm9vbCcgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGZyYWcgY29vcmQgYnVpbHRpbi5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZnJhZyBjb29yZCBidWlsdGluLlxuXHQgKi9cblx0Z2V0RnJhZ0Nvb3JkKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0QnVpbHRpbiggJ3Bvc2l0aW9uJywgJ2ZyYWdDb29yZCcsICd2ZWM0PGYzMj4nICkgKyAnLnh5JztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGZyYWcgZGVwdGggYnVpbHRpbi5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZnJhZyBkZXB0aCBidWlsdGluLlxuXHQgKi9cblx0Z2V0RnJhZ0RlcHRoKCkge1xuXG5cdFx0cmV0dXJuICdvdXRwdXQuJyArIHRoaXMuZ2V0QnVpbHRpbiggJ2ZyYWdfZGVwdGgnLCAnZGVwdGgnLCAnZjMyJywgJ291dHB1dCcgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNsaXAgZGlzdGFuY2VzIGJ1aWx0aW4uXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNsaXAgZGlzdGFuY2VzIGJ1aWx0aW4uXG5cdCAqL1xuXHRnZXRDbGlwRGlzdGFuY2UoKSB7XG5cblx0XHRyZXR1cm4gJ3ZhcnlpbmdzLmh3X2NsaXBfZGlzdGFuY2VzJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZXRoZXIgdG8gZmxpcCB0ZXh0dXJlIGRhdGEgYWxvbmcgaXRzIHZlcnRpY2FsIGF4aXMgb3Igbm90LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIGFsd2F5cyBgZmFsc2VgIGluIGNvbnRleHQgb2YgV0dTTC5cblx0ICovXG5cdGlzRmxpcFkoKSB7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFbmFibGVzIHRoZSBnaXZlbiBkaXJlY3RpdmUgZm9yIHRoZSBnaXZlbiBzaGFkZXIgc3RhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGRpcmVjdGl2ZSBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3NoYWRlclN0YWdlPXRoaXMuc2hhZGVyU3RhZ2VdIC0gVGhlIHNoYWRlciBzdGFnZSB0byBlbmFibGUgdGhlIGRpcmVjdGl2ZSBmb3IuXG5cdCAqL1xuXHRlbmFibGVEaXJlY3RpdmUoIG5hbWUsIHNoYWRlclN0YWdlID0gdGhpcy5zaGFkZXJTdGFnZSApIHtcblxuXHRcdGNvbnN0IHN0YWdlID0gdGhpcy5kaXJlY3RpdmVzWyBzaGFkZXJTdGFnZSBdIHx8ICggdGhpcy5kaXJlY3RpdmVzWyBzaGFkZXJTdGFnZSBdID0gbmV3IFNldCgpICk7XG5cdFx0c3RhZ2UuYWRkKCBuYW1lICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBkaXJlY3RpdmVzIG9mIHRoZSBnaXZlbiBzaGFkZXIgc3RhZ2UgYXMgYSBXR1NMIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNoYWRlclN0YWdlIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBBIFdHU0wgc25pcHBldCB0aGF0IGVuYWJsZXMgdGhlIGRpcmVjdGl2ZXMgb2YgdGhlIGdpdmVuIHN0YWdlLlxuXHQgKi9cblx0Z2V0RGlyZWN0aXZlcyggc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRjb25zdCBzbmlwcGV0cyA9IFtdO1xuXHRcdGNvbnN0IGRpcmVjdGl2ZXMgPSB0aGlzLmRpcmVjdGl2ZXNbIHNoYWRlclN0YWdlIF07XG5cblx0XHRpZiAoIGRpcmVjdGl2ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggY29uc3QgZGlyZWN0aXZlIG9mIGRpcmVjdGl2ZXMgKSB7XG5cblx0XHRcdFx0c25pcHBldHMucHVzaCggYGVuYWJsZSAke2RpcmVjdGl2ZX07YCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldHMuam9pbiggJ1xcbicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgdGhlICdzdWJncm91cHMnIGRpcmVjdGl2ZS5cblx0ICovXG5cdGVuYWJsZVN1Ykdyb3VwcygpIHtcblxuXHRcdHRoaXMuZW5hYmxlRGlyZWN0aXZlKCAnc3ViZ3JvdXBzJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRW5hYmxlcyB0aGUgJ3N1Ymdyb3Vwcy1mMTYnIGRpcmVjdGl2ZS5cblx0ICovXG5cdGVuYWJsZVN1Ymdyb3Vwc0YxNigpIHtcblxuXHRcdHRoaXMuZW5hYmxlRGlyZWN0aXZlKCAnc3ViZ3JvdXBzLWYxNicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgdGhlICdjbGlwX2Rpc3RhbmNlcycgZGlyZWN0aXZlLlxuXHQgKi9cblx0ZW5hYmxlQ2xpcERpc3RhbmNlcygpIHtcblxuXHRcdHRoaXMuZW5hYmxlRGlyZWN0aXZlKCAnY2xpcF9kaXN0YW5jZXMnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFbmFibGVzIHRoZSAnZjE2JyBkaXJlY3RpdmUuXG5cdCAqL1xuXHRlbmFibGVTaGFkZXJGMTYoKSB7XG5cblx0XHR0aGlzLmVuYWJsZURpcmVjdGl2ZSggJ2YxNicgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgdGhlICdkdWFsX3NvdXJjZV9ibGVuZGluZycgZGlyZWN0aXZlLlxuXHQgKi9cblx0ZW5hYmxlRHVhbFNvdXJjZUJsZW5kaW5nKCkge1xuXG5cdFx0dGhpcy5lbmFibGVEaXJlY3RpdmUoICdkdWFsX3NvdXJjZV9ibGVuZGluZycgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEVuYWJsZXMgaGFyZHdhcmUgY2xpcHBpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwbGFuZUNvdW50IC0gVGhlIGNsaXBwaW5nIHBsYW5lIGNvdW50LlxuXHQgKi9cblx0ZW5hYmxlSGFyZHdhcmVDbGlwcGluZyggcGxhbmVDb3VudCApIHtcblxuXHRcdHRoaXMuZW5hYmxlQ2xpcERpc3RhbmNlcygpO1xuXHRcdHRoaXMuZ2V0QnVpbHRpbiggJ2NsaXBfZGlzdGFuY2VzJywgJ2h3X2NsaXBfZGlzdGFuY2VzJywgYGFycmF5PGYzMiwgJHsgcGxhbmVDb3VudCB9ID5gLCAndmVydGV4JyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYnVpbHRpbnMgb2YgdGhlIGdpdmVuIHNoYWRlciBzdGFnZSBhcyBhIFdHU0wgc3RyaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEEgV0dTTCBzbmlwcGV0IHRoYXQgcmVwcmVzZW50cyB0aGUgYnVpbHRpbnMgb2YgdGhlIGdpdmVuIHN0YWdlLlxuXHQgKi9cblx0Z2V0QnVpbHRpbnMoIHNoYWRlclN0YWdlICkge1xuXG5cdFx0Y29uc3Qgc25pcHBldHMgPSBbXTtcblx0XHRjb25zdCBidWlsdGlucyA9IHRoaXMuYnVpbHRpbnNbIHNoYWRlclN0YWdlIF07XG5cblx0XHRpZiAoIGJ1aWx0aW5zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IHsgbmFtZSwgcHJvcGVydHksIHR5cGUgfSBvZiBidWlsdGlucy52YWx1ZXMoKSApIHtcblxuXHRcdFx0XHRzbmlwcGV0cy5wdXNoKCBgQGJ1aWx0aW4oICR7bmFtZX0gKSAke3Byb3BlcnR5fSA6ICR7dHlwZX1gICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBzbmlwcGV0cy5qb2luKCAnLFxcblxcdCcgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSB1c2VkIHdoZW4gYSBuZXcgc2NvcGVkIGJ1ZmZlciBpcyB1c2VkIGluIGNvbnRleHQgb2Zcblx0ICogY29tcHV0ZSBzaGFkZXJzLiBJdCBhZGRzIHRoZSBhcnJheSB0byB0aGUgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggaXNcblx0ICogbGF0ZXIgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVzcGVjdGl2ZSBXR1NMLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBhcnJheSBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGUgLSBUaGUgc2NvcGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBidWZmZXJUeXBlIC0gVGhlIGJ1ZmZlciB0eXBlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYnVmZmVyQ291bnQgLSBUaGUgYnVmZmVyIGNvdW50LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBhcnJheSBuYW1lLlxuXHQgKi9cblx0Z2V0U2NvcGVkQXJyYXkoIG5hbWUsIHNjb3BlLCBidWZmZXJUeXBlLCBidWZmZXJDb3VudCApIHtcblxuXHRcdGlmICggdGhpcy5zY29wZWRBcnJheXMuaGFzKCBuYW1lICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aGlzLnNjb3BlZEFycmF5cy5zZXQoIG5hbWUsIHtcblx0XHRcdFx0bmFtZSxcblx0XHRcdFx0c2NvcGUsXG5cdFx0XHRcdGJ1ZmZlclR5cGUsXG5cdFx0XHRcdGJ1ZmZlckNvdW50XG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmFtZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHNjb3BlZCBhcnJheXMgb2YgdGhlIGdpdmVuIHNoYWRlciBzdGFnZSBhcyBhIFdHU0wgc3RyaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfSBUaGUgV0dTTCBzbmlwcGV0IHRoYXQgZGVmaW5lcyB0aGUgc2NvcGVkIGFycmF5cy5cblx0ICogUmV0dXJucyBgdW5kZWZpbmVkYCB3aGVuIHVzZWQgaW4gdGhlIHZlcnRleCBvciBmcmFnbWVudCBzdGFnZS5cblx0ICovXG5cdGdldFNjb3BlZEFycmF5cyggc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRpZiAoIHNoYWRlclN0YWdlICE9PSAnY29tcHV0ZScgKSB7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHNuaXBwZXRzID0gW107XG5cblx0XHRmb3IgKCBjb25zdCB7IG5hbWUsIHNjb3BlLCBidWZmZXJUeXBlLCBidWZmZXJDb3VudCB9IG9mIHRoaXMuc2NvcGVkQXJyYXlzLnZhbHVlcygpICkge1xuXG5cdFx0XHRjb25zdCB0eXBlID0gdGhpcy5nZXRUeXBlKCBidWZmZXJUeXBlICk7XG5cblx0XHRcdHNuaXBwZXRzLnB1c2goIGB2YXI8JHtzY29wZX0+ICR7bmFtZX06IGFycmF5PCAke3R5cGV9LCAke2J1ZmZlckNvdW50fSA+O2AgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzbmlwcGV0cy5qb2luKCAnXFxuJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2hhZGVyIGF0dHJpYnV0ZXMgb2YgdGhlIGdpdmVuIHNoYWRlciBzdGFnZSBhcyBhIFdHU0wgc3RyaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2hhZGVyU3RhZ2UgLSBUaGUgc2hhZGVyIHN0YWdlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBXR1NMIHNuaXBwZXQgdGhhdCBkZWZpbmVzIHRoZSBzaGFkZXIgYXR0cmlidXRlcy5cblx0ICovXG5cdGdldEF0dHJpYnV0ZXMoIHNoYWRlclN0YWdlICkge1xuXG5cdFx0Y29uc3Qgc25pcHBldHMgPSBbXTtcblxuXHRcdGlmICggc2hhZGVyU3RhZ2UgPT09ICdjb21wdXRlJyApIHtcblxuXHRcdFx0dGhpcy5nZXRCdWlsdGluKCAnZ2xvYmFsX2ludm9jYXRpb25faWQnLCAnZ2xvYmFsSWQnLCAndmVjMzx1MzI+JywgJ2F0dHJpYnV0ZScgKTtcblx0XHRcdHRoaXMuZ2V0QnVpbHRpbiggJ3dvcmtncm91cF9pZCcsICd3b3JrZ3JvdXBJZCcsICd2ZWMzPHUzMj4nLCAnYXR0cmlidXRlJyApO1xuXHRcdFx0dGhpcy5nZXRCdWlsdGluKCAnbG9jYWxfaW52b2NhdGlvbl9pZCcsICdsb2NhbElkJywgJ3ZlYzM8dTMyPicsICdhdHRyaWJ1dGUnICk7XG5cdFx0XHR0aGlzLmdldEJ1aWx0aW4oICdudW1fd29ya2dyb3VwcycsICdudW1Xb3JrZ3JvdXBzJywgJ3ZlYzM8dTMyPicsICdhdHRyaWJ1dGUnICk7XG5cblx0XHRcdGlmICggdGhpcy5yZW5kZXJlci5oYXNGZWF0dXJlKCAnc3ViZ3JvdXBzJyApICkge1xuXG5cdFx0XHRcdHRoaXMuZW5hYmxlRGlyZWN0aXZlKCAnc3ViZ3JvdXBzJywgc2hhZGVyU3RhZ2UgKTtcblx0XHRcdFx0dGhpcy5nZXRCdWlsdGluKCAnc3ViZ3JvdXBfc2l6ZScsICdzdWJncm91cFNpemUnLCAndTMyJywgJ2F0dHJpYnV0ZScgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBzaGFkZXJTdGFnZSA9PT0gJ3ZlcnRleCcgfHwgc2hhZGVyU3RhZ2UgPT09ICdjb21wdXRlJyApIHtcblxuXHRcdFx0Y29uc3QgYnVpbHRpbnMgPSB0aGlzLmdldEJ1aWx0aW5zKCAnYXR0cmlidXRlJyApO1xuXG5cdFx0XHRpZiAoIGJ1aWx0aW5zICkgc25pcHBldHMucHVzaCggYnVpbHRpbnMgKTtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuZ2V0QXR0cmlidXRlc0FycmF5KCk7XG5cblx0XHRcdGZvciAoIGxldCBpbmRleCA9IDAsIGxlbmd0aCA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgaW5kZXggXTtcblx0XHRcdFx0Y29uc3QgbmFtZSA9IGF0dHJpYnV0ZS5uYW1lO1xuXHRcdFx0XHRjb25zdCB0eXBlID0gdGhpcy5nZXRUeXBlKCBhdHRyaWJ1dGUudHlwZSApO1xuXG5cdFx0XHRcdHNuaXBwZXRzLnB1c2goIGBAbG9jYXRpb24oICR7aW5kZXh9ICkgJHsgbmFtZSB9IDogJHsgdHlwZSB9YCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc25pcHBldHMuam9pbiggJyxcXG5cXHQnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBtZW1iZXJzIG9mIHRoZSBnaXZlbiBzdHJ1Y3QgdHlwZSBub2RlIGFzIGEgV0dTTCBzdHJpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RydWN0VHlwZU5vZGV9IHN0cnVjdCAtIFRoZSBzdHJ1Y3QgdHlwZSBub2RlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBXR1NMIHNuaXBwZXQgdGhhdCBkZWZpbmVzIHRoZSBzdHJ1Y3QgbWVtYmVycy5cblx0ICovXG5cdGdldFN0cnVjdE1lbWJlcnMoIHN0cnVjdCApIHtcblxuXHRcdGNvbnN0IHNuaXBwZXRzID0gW107XG5cblx0XHRmb3IgKCBjb25zdCBtZW1iZXIgb2Ygc3RydWN0Lm1lbWJlcnMgKSB7XG5cblx0XHRcdGNvbnN0IHByZWZpeCA9IHN0cnVjdC5vdXRwdXQgPyAnQGxvY2F0aW9uKCAnICsgbWVtYmVyLmluZGV4ICsgJyApICcgOiAnJztcblxuXHRcdFx0bGV0IHR5cGUgPSB0aGlzLmdldFR5cGUoIG1lbWJlci50eXBlICk7XG5cblx0XHRcdGlmICggbWVtYmVyLmF0b21pYyApIHtcblxuXHRcdFx0XHR0eXBlID0gJ2F0b21pYzwgJyArIHR5cGUgKyAnID4nO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNuaXBwZXRzLnB1c2goIGBcXHQkeyBwcmVmaXggKyBtZW1iZXIubmFtZSB9IDogJHsgdHlwZSB9YCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzdHJ1Y3Qub3V0cHV0ICkge1xuXG5cdFx0XHRzbmlwcGV0cy5wdXNoKCBgXFx0JHsgdGhpcy5nZXRCdWlsdGlucyggJ291dHB1dCcgKSB9YCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNuaXBwZXRzLmpvaW4oICcsXFxuJyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc3RydWN0cyBvZiB0aGUgZ2l2ZW4gc2hhZGVyIHN0YWdlIGFzIGEgV0dTTCBzdHJpbmcuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzaGFkZXJTdGFnZSAtIFRoZSBzaGFkZXIgc3RhZ2UuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFdHU0wgc25pcHBldCB0aGF0IGRlZmluZXMgdGhlIHN0cnVjdHMuXG5cdCAqL1xuXHRnZXRTdHJ1Y3RzKCBzaGFkZXJTdGFnZSApIHtcblxuXHRcdGxldCByZXN1bHQgPSAnJztcblxuXHRcdGNvbnN0IHN0cnVjdHMgPSB0aGlzLnN0cnVjdHNbIHNoYWRlclN0YWdlIF07XG5cblx0XHRpZiAoIHN0cnVjdHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Y29uc3Qgc25pcHBldHMgPSBbXTtcblxuXHRcdFx0Zm9yICggY29uc3Qgc3RydWN0IG9mIHN0cnVjdHMgKSB7XG5cblx0XHRcdFx0bGV0IHNuaXBwZXQgPSBgc3RydWN0ICR7IHN0cnVjdC5uYW1lIH0ge1xcbmA7XG5cdFx0XHRcdHNuaXBwZXQgKz0gdGhpcy5nZXRTdHJ1Y3RNZW1iZXJzKCBzdHJ1Y3QgKTtcblx0XHRcdFx0c25pcHBldCArPSAnXFxufTsnO1xuXG5cdFx0XHRcdHNuaXBwZXRzLnB1c2goIHNuaXBwZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHQgPSAnXFxuJyArIHNuaXBwZXRzLmpvaW4oICdcXG5cXG4nICkgKyAnXFxuJztcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgV0dTTCBzdHJpbmcgcmVwcmVzZW50aW5nIGEgdmFyaWFibGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHZhcmlhYmxlJ3MgdHlwZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgdmFyaWFibGUncyBuYW1lLlxuXHQgKiBAcGFyYW0gez9udW1iZXJ9IFtjb3VudD1udWxsXSAtIFRoZSBhcnJheSBsZW5ndGguXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFdHU0wgc25pcHBldCB0aGF0IGRlZmluZXMgYSB2YXJpYWJsZS5cblx0ICovXG5cdGdldFZhciggdHlwZSwgbmFtZSwgY291bnQgPSBudWxsICkge1xuXG5cdFx0bGV0IHNuaXBwZXQgPSBgdmFyICR7IG5hbWUgfSA6IGA7XG5cblx0XHRpZiAoIGNvdW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRzbmlwcGV0ICs9IHRoaXMuZ2VuZXJhdGVBcnJheURlY2xhcmF0aW9uKCB0eXBlLCBjb3VudCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c25pcHBldCArPSB0aGlzLmdldFR5cGUoIHR5cGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzbmlwcGV0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmFyaWFibGVzIG9mIHRoZSBnaXZlbiBzaGFkZXIgc3RhZ2UgYXMgYSBXR1NMIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNoYWRlclN0YWdlIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgV0dTTCBzbmlwcGV0IHRoYXQgZGVmaW5lcyB0aGUgdmFyaWFibGVzLlxuXHQgKi9cblx0Z2V0VmFycyggc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRjb25zdCBzbmlwcGV0cyA9IFtdO1xuXHRcdGNvbnN0IHZhcnMgPSB0aGlzLnZhcnNbIHNoYWRlclN0YWdlIF07XG5cblx0XHRpZiAoIHZhcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggY29uc3QgdmFyaWFibGUgb2YgdmFycyApIHtcblxuXHRcdFx0XHRzbmlwcGV0cy5wdXNoKCBgXFx0JHsgdGhpcy5nZXRWYXIoIHZhcmlhYmxlLnR5cGUsIHZhcmlhYmxlLm5hbWUsIHZhcmlhYmxlLmNvdW50ICkgfTtgICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBgXFxuJHsgc25pcHBldHMuam9pbiggJ1xcbicgKSB9XFxuYDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZhcnlpbmdzIG9mIHRoZSBnaXZlbiBzaGFkZXIgc3RhZ2UgYXMgYSBXR1NMIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNoYWRlclN0YWdlIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgV0dTTCBzbmlwcGV0IHRoYXQgZGVmaW5lcyB0aGUgdmFyeWluZ3MuXG5cdCAqL1xuXHRnZXRWYXJ5aW5ncyggc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRjb25zdCBzbmlwcGV0cyA9IFtdO1xuXG5cdFx0aWYgKCBzaGFkZXJTdGFnZSA9PT0gJ3ZlcnRleCcgKSB7XG5cblx0XHRcdHRoaXMuZ2V0QnVpbHRpbiggJ3Bvc2l0aW9uJywgJ1ZlcnRleCcsICd2ZWM0PGYzMj4nLCAndmVydGV4JyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzaGFkZXJTdGFnZSA9PT0gJ3ZlcnRleCcgfHwgc2hhZGVyU3RhZ2UgPT09ICdmcmFnbWVudCcgKSB7XG5cblx0XHRcdGNvbnN0IHZhcnlpbmdzID0gdGhpcy52YXJ5aW5ncztcblx0XHRcdGNvbnN0IHZhcnMgPSB0aGlzLnZhcnNbIHNoYWRlclN0YWdlIF07XG5cblx0XHRcdGZvciAoIGxldCBpbmRleCA9IDA7IGluZGV4IDwgdmFyeWluZ3MubGVuZ3RoOyBpbmRleCArKyApIHtcblxuXHRcdFx0XHRjb25zdCB2YXJ5aW5nID0gdmFyeWluZ3NbIGluZGV4IF07XG5cblx0XHRcdFx0aWYgKCB2YXJ5aW5nLm5lZWRzSW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdFx0XHRcdGxldCBhdHRyaWJ1dGVzU25pcHBldCA9IGBAbG9jYXRpb24oICR7aW5kZXh9IClgO1xuXG5cdFx0XHRcdFx0aWYgKCAvXihpbnR8dWludHxpdmVjfHV2ZWMpLy50ZXN0KCB2YXJ5aW5nLnR5cGUgKSApIHtcblxuXHRcdFx0XHRcdFx0YXR0cmlidXRlc1NuaXBwZXQgKz0gJyBAaW50ZXJwb2xhdGUoIGZsYXQgKSc7XG5cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNuaXBwZXRzLnB1c2goIGAkeyBhdHRyaWJ1dGVzU25pcHBldCB9ICR7IHZhcnlpbmcubmFtZSB9IDogJHsgdGhpcy5nZXRUeXBlKCB2YXJ5aW5nLnR5cGUgKSB9YCApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHNoYWRlclN0YWdlID09PSAndmVydGV4JyAmJiB2YXJzLmluY2x1ZGVzKCB2YXJ5aW5nICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0dmFycy5wdXNoKCB2YXJ5aW5nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBidWlsdGlucyA9IHRoaXMuZ2V0QnVpbHRpbnMoIHNoYWRlclN0YWdlICk7XG5cblx0XHRpZiAoIGJ1aWx0aW5zICkgc25pcHBldHMucHVzaCggYnVpbHRpbnMgKTtcblxuXHRcdGNvbnN0IGNvZGUgPSBzbmlwcGV0cy5qb2luKCAnLFxcblxcdCcgKTtcblxuXHRcdHJldHVybiBzaGFkZXJTdGFnZSA9PT0gJ3ZlcnRleCcgPyB0aGlzLl9nZXRXR1NMU3RydWN0KCAnVmFyeWluZ3NTdHJ1Y3QnLCAnXFx0JyArIGNvZGUgKSA6IGNvZGU7XG5cblx0fVxuXG5cdGlzQ3VzdG9tU3RydWN0KCBub2RlVW5pZm9ybSApIHtcblxuXHRcdHJldHVybiBub2RlVW5pZm9ybS52YWx1ZS5pc1N0b3JhZ2VCdWZmZXJBdHRyaWJ1dGUgJiYgbm9kZVVuaWZvcm0ubm9kZS5zdHJ1Y3RUeXBlTm9kZSAhPT0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHVuaWZvcm1zIG9mIHRoZSBnaXZlbiBzaGFkZXIgc3RhZ2UgYXMgYSBXR1NMIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHNoYWRlclN0YWdlIC0gVGhlIHNoYWRlciBzdGFnZS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgV0dTTCBzbmlwcGV0IHRoYXQgZGVmaW5lcyB0aGUgdW5pZm9ybXMuXG5cdCAqL1xuXHRnZXRVbmlmb3Jtcyggc2hhZGVyU3RhZ2UgKSB7XG5cblx0XHRjb25zdCB1bmlmb3JtcyA9IHRoaXMudW5pZm9ybXNbIHNoYWRlclN0YWdlIF07XG5cblx0XHRjb25zdCBiaW5kaW5nU25pcHBldHMgPSBbXTtcblx0XHRjb25zdCBidWZmZXJTbmlwcGV0cyA9IFtdO1xuXHRcdGNvbnN0IHN0cnVjdFNuaXBwZXRzID0gW107XG5cdFx0Y29uc3QgdW5pZm9ybUdyb3VwcyA9IHt9O1xuXG5cdFx0Zm9yICggY29uc3QgdW5pZm9ybSBvZiB1bmlmb3JtcyApIHtcblxuXHRcdFx0Y29uc3QgZ3JvdXBOYW1lID0gdW5pZm9ybS5ncm91cE5vZGUubmFtZTtcblx0XHRcdGNvbnN0IHVuaWZvcm1JbmRleGVzID0gdGhpcy5iaW5kaW5nc0luZGV4ZXNbIGdyb3VwTmFtZSBdO1xuXG5cdFx0XHRpZiAoIHVuaWZvcm0udHlwZSA9PT0gJ3RleHR1cmUnIHx8IHVuaWZvcm0udHlwZSA9PT0gJ2N1YmVUZXh0dXJlJyB8fCB1bmlmb3JtLnR5cGUgPT09ICdzdG9yYWdlVGV4dHVyZScgfHwgdW5pZm9ybS50eXBlID09PSAndGV4dHVyZTNEJyApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlID0gdW5pZm9ybS5ub2RlLnZhbHVlO1xuXG5cdFx0XHRcdGlmICggKCBzaGFkZXJTdGFnZSA9PT0gJ2ZyYWdtZW50JyB8fCBzaGFkZXJTdGFnZSA9PT0gJ2NvbXB1dGUnICkgJiYgdGhpcy5pc1VuZmlsdGVyYWJsZSggdGV4dHVyZSApID09PSBmYWxzZSAmJiB1bmlmb3JtLm5vZGUuaXNTdG9yYWdlVGV4dHVyZU5vZGUgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuaXNTYW1wbGVDb21wYXJlKCB0ZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdTbmlwcGV0cy5wdXNoKCBgQGJpbmRpbmcoICR7IHVuaWZvcm1JbmRleGVzLmJpbmRpbmcgKysgfSApIEBncm91cCggJHsgdW5pZm9ybUluZGV4ZXMuZ3JvdXAgfSApIHZhciAkeyB1bmlmb3JtLm5hbWUgfV9zYW1wbGVyIDogc2FtcGxlcl9jb21wYXJpc29uO2AgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdTbmlwcGV0cy5wdXNoKCBgQGJpbmRpbmcoICR7IHVuaWZvcm1JbmRleGVzLmJpbmRpbmcgKysgfSApIEBncm91cCggJHsgdW5pZm9ybUluZGV4ZXMuZ3JvdXAgfSApIHZhciAkeyB1bmlmb3JtLm5hbWUgfV9zYW1wbGVyIDogc2FtcGxlcjtgICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCB0ZXh0dXJlVHlwZTtcblxuXHRcdFx0XHRsZXQgbXVsdGlzYW1wbGVkID0gJyc7XG5cblx0XHRcdFx0Y29uc3QgeyBwcmltYXJ5U2FtcGxlcyB9ID0gdGhpcy5yZW5kZXJlci5iYWNrZW5kLnV0aWxzLmdldFRleHR1cmVTYW1wbGVEYXRhKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0aWYgKCBwcmltYXJ5U2FtcGxlcyA+IDEgKSB7XG5cblx0XHRcdFx0XHRtdWx0aXNhbXBsZWQgPSAnX211bHRpc2FtcGxlZCc7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5pc0N1YmVUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZVR5cGUgPSAndGV4dHVyZV9jdWJlPGYzMj4nO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlID09PSB0cnVlIHx8IHRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZVR5cGUgPSAndGV4dHVyZV8yZF9hcnJheTxmMzI+JztcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZVR5cGUgPSBgdGV4dHVyZV9kZXB0aCR7bXVsdGlzYW1wbGVkfV8yZGA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHRleHR1cmVUeXBlID0gJ3RleHR1cmVfZXh0ZXJuYWwnO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhM0RUZXh0dXJlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZVR5cGUgPSAndGV4dHVyZV8zZDxmMzI+JztcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCB1bmlmb3JtLm5vZGUuaXNTdG9yYWdlVGV4dHVyZU5vZGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBmb3JtYXQgPSBnZXRGb3JtYXQoIHRleHR1cmUgKTtcblx0XHRcdFx0XHRjb25zdCBhY2Nlc3MgPSB0aGlzLmdldFN0b3JhZ2VBY2Nlc3MoIHVuaWZvcm0ubm9kZSwgc2hhZGVyU3RhZ2UgKTtcblxuXHRcdFx0XHRcdHRleHR1cmVUeXBlID0gYHRleHR1cmVfc3RvcmFnZV8yZDwkeyBmb3JtYXQgfSwgJHsgYWNjZXNzIH0+YDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc3QgY29tcG9uZW50UHJlZml4ID0gdGhpcy5nZXRDb21wb25lbnRUeXBlRnJvbVRleHR1cmUoIHRleHR1cmUgKS5jaGFyQXQoIDAgKTtcblxuXHRcdFx0XHRcdHRleHR1cmVUeXBlID0gYHRleHR1cmUkeyBtdWx0aXNhbXBsZWQgfV8yZDwkeyBjb21wb25lbnRQcmVmaXggfTMyPmA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJpbmRpbmdTbmlwcGV0cy5wdXNoKCBgQGJpbmRpbmcoICR7IHVuaWZvcm1JbmRleGVzLmJpbmRpbmcgKysgfSApIEBncm91cCggJHsgdW5pZm9ybUluZGV4ZXMuZ3JvdXAgfSApIHZhciAkeyB1bmlmb3JtLm5hbWUgfSA6ICR7IHRleHR1cmVUeXBlIH07YCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB1bmlmb3JtLnR5cGUgPT09ICdidWZmZXInIHx8IHVuaWZvcm0udHlwZSA9PT0gJ3N0b3JhZ2VCdWZmZXInIHx8IHVuaWZvcm0udHlwZSA9PT0gJ2luZGlyZWN0U3RvcmFnZUJ1ZmZlcicgKSB7XG5cblx0XHRcdFx0Y29uc3QgYnVmZmVyTm9kZSA9IHVuaWZvcm0ubm9kZTtcblx0XHRcdFx0Y29uc3QgYnVmZmVyVHlwZSA9IHRoaXMuZ2V0VHlwZSggYnVmZmVyTm9kZS5nZXROb2RlVHlwZSggdGhpcyApICk7XG5cdFx0XHRcdGNvbnN0IGJ1ZmZlckNvdW50ID0gYnVmZmVyTm9kZS5idWZmZXJDb3VudDtcblx0XHRcdFx0Y29uc3QgYnVmZmVyQ291bnRTbmlwcGV0ID0gYnVmZmVyQ291bnQgPiAwICYmIHVuaWZvcm0udHlwZSA9PT0gJ2J1ZmZlcicgPyAnLCAnICsgYnVmZmVyQ291bnQgOiAnJztcblx0XHRcdFx0Y29uc3QgYnVmZmVyQWNjZXNzTW9kZSA9IGJ1ZmZlck5vZGUuaXNTdG9yYWdlQnVmZmVyTm9kZSA/IGBzdG9yYWdlLCAkeyB0aGlzLmdldFN0b3JhZ2VBY2Nlc3MoIGJ1ZmZlck5vZGUsIHNoYWRlclN0YWdlICkgfWAgOiAndW5pZm9ybSc7XG5cblx0XHRcdFx0aWYgKCB0aGlzLmlzQ3VzdG9tU3RydWN0KCB1bmlmb3JtICkgKSB7XG5cblx0XHRcdFx0XHRidWZmZXJTbmlwcGV0cy5wdXNoKCBgQGJpbmRpbmcoICR7IHVuaWZvcm1JbmRleGVzLmJpbmRpbmcgKysgfSApIEBncm91cCggJHsgdW5pZm9ybUluZGV4ZXMuZ3JvdXAgfSApIHZhcjwkeyBidWZmZXJBY2Nlc3NNb2RlIH0+ICR7IHVuaWZvcm0ubmFtZSB9IDogJHsgYnVmZmVyVHlwZSB9O2AgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc3QgYnVmZmVyVHlwZVNuaXBwZXQgPSBidWZmZXJOb2RlLmlzQXRvbWljID8gYGF0b21pYzwkeyBidWZmZXJUeXBlIH0+YCA6IGAkeyBidWZmZXJUeXBlIH1gO1xuXHRcdFx0XHRcdGNvbnN0IGJ1ZmZlclNuaXBwZXQgPSBgXFx0dmFsdWUgOiBhcnJheTwgJHsgYnVmZmVyVHlwZVNuaXBwZXQgfSR7IGJ1ZmZlckNvdW50U25pcHBldCB9ID5gO1xuXG5cdFx0XHRcdFx0YnVmZmVyU25pcHBldHMucHVzaCggdGhpcy5fZ2V0V0dTTFN0cnVjdEJpbmRpbmcoIHVuaWZvcm0ubmFtZSwgYnVmZmVyU25pcHBldCwgYnVmZmVyQWNjZXNzTW9kZSwgdW5pZm9ybUluZGV4ZXMuYmluZGluZyArKywgdW5pZm9ybUluZGV4ZXMuZ3JvdXAgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCB2ZWN0b3JUeXBlID0gdGhpcy5nZXRUeXBlKCB0aGlzLmdldFZlY3RvclR5cGUoIHVuaWZvcm0udHlwZSApICk7XG5cdFx0XHRcdGNvbnN0IGdyb3VwTmFtZSA9IHVuaWZvcm0uZ3JvdXBOb2RlLm5hbWU7XG5cblx0XHRcdFx0Y29uc3QgZ3JvdXAgPSB1bmlmb3JtR3JvdXBzWyBncm91cE5hbWUgXSB8fCAoIHVuaWZvcm1Hcm91cHNbIGdyb3VwTmFtZSBdID0ge1xuXHRcdFx0XHRcdGluZGV4OiB1bmlmb3JtSW5kZXhlcy5iaW5kaW5nICsrLFxuXHRcdFx0XHRcdGlkOiB1bmlmb3JtSW5kZXhlcy5ncm91cCxcblx0XHRcdFx0XHRzbmlwcGV0czogW11cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdGdyb3VwLnNuaXBwZXRzLnB1c2goIGBcXHQkeyB1bmlmb3JtLm5hbWUgfSA6ICR7IHZlY3RvclR5cGUgfWAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiB1bmlmb3JtR3JvdXBzICkge1xuXG5cdFx0XHRjb25zdCBncm91cCA9IHVuaWZvcm1Hcm91cHNbIG5hbWUgXTtcblxuXHRcdFx0c3RydWN0U25pcHBldHMucHVzaCggdGhpcy5fZ2V0V0dTTFN0cnVjdEJpbmRpbmcoIG5hbWUsIGdyb3VwLnNuaXBwZXRzLmpvaW4oICcsXFxuJyApLCAndW5pZm9ybScsIGdyb3VwLmluZGV4LCBncm91cC5pZCApICk7XG5cblx0XHR9XG5cblx0XHRsZXQgY29kZSA9IGJpbmRpbmdTbmlwcGV0cy5qb2luKCAnXFxuJyApO1xuXHRcdGNvZGUgKz0gYnVmZmVyU25pcHBldHMuam9pbiggJ1xcbicgKTtcblx0XHRjb2RlICs9IHN0cnVjdFNuaXBwZXRzLmpvaW4oICdcXG4nICk7XG5cblx0XHRyZXR1cm4gY29kZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnRyb2xzIHRoZSBjb2RlIGJ1aWxkIG9mIHRoZSBzaGFkZXIgc3RhZ2VzLlxuXHQgKi9cblx0YnVpbGRDb2RlKCkge1xuXG5cdFx0Y29uc3Qgc2hhZGVyc0RhdGEgPSB0aGlzLm1hdGVyaWFsICE9PSBudWxsID8geyBmcmFnbWVudDoge30sIHZlcnRleDoge30gfSA6IHsgY29tcHV0ZToge30gfTtcblxuXHRcdHRoaXMuc29ydEJpbmRpbmdHcm91cHMoKTtcblxuXHRcdGZvciAoIGNvbnN0IHNoYWRlclN0YWdlIGluIHNoYWRlcnNEYXRhICkge1xuXG5cdFx0XHR0aGlzLnNoYWRlclN0YWdlID0gc2hhZGVyU3RhZ2U7XG5cblx0XHRcdGNvbnN0IHN0YWdlRGF0YSA9IHNoYWRlcnNEYXRhWyBzaGFkZXJTdGFnZSBdO1xuXHRcdFx0c3RhZ2VEYXRhLnVuaWZvcm1zID0gdGhpcy5nZXRVbmlmb3Jtcyggc2hhZGVyU3RhZ2UgKTtcblx0XHRcdHN0YWdlRGF0YS5hdHRyaWJ1dGVzID0gdGhpcy5nZXRBdHRyaWJ1dGVzKCBzaGFkZXJTdGFnZSApO1xuXHRcdFx0c3RhZ2VEYXRhLnZhcnlpbmdzID0gdGhpcy5nZXRWYXJ5aW5ncyggc2hhZGVyU3RhZ2UgKTtcblx0XHRcdHN0YWdlRGF0YS5zdHJ1Y3RzID0gdGhpcy5nZXRTdHJ1Y3RzKCBzaGFkZXJTdGFnZSApO1xuXHRcdFx0c3RhZ2VEYXRhLnZhcnMgPSB0aGlzLmdldFZhcnMoIHNoYWRlclN0YWdlICk7XG5cdFx0XHRzdGFnZURhdGEuY29kZXMgPSB0aGlzLmdldENvZGVzKCBzaGFkZXJTdGFnZSApO1xuXHRcdFx0c3RhZ2VEYXRhLmRpcmVjdGl2ZXMgPSB0aGlzLmdldERpcmVjdGl2ZXMoIHNoYWRlclN0YWdlICk7XG5cdFx0XHRzdGFnZURhdGEuc2NvcGVkQXJyYXlzID0gdGhpcy5nZXRTY29wZWRBcnJheXMoIHNoYWRlclN0YWdlICk7XG5cblx0XHRcdC8vXG5cblx0XHRcdGxldCBmbG93ID0gJy8vIGNvZGVcXG5cXG4nO1xuXHRcdFx0ZmxvdyArPSB0aGlzLmZsb3dDb2RlWyBzaGFkZXJTdGFnZSBdO1xuXG5cdFx0XHRjb25zdCBmbG93Tm9kZXMgPSB0aGlzLmZsb3dOb2Rlc1sgc2hhZGVyU3RhZ2UgXTtcblx0XHRcdGNvbnN0IG1haW5Ob2RlID0gZmxvd05vZGVzWyBmbG93Tm9kZXMubGVuZ3RoIC0gMSBdO1xuXG5cdFx0XHRjb25zdCBvdXRwdXROb2RlID0gbWFpbk5vZGUub3V0cHV0Tm9kZTtcblx0XHRcdGNvbnN0IGlzT3V0cHV0U3RydWN0ID0gKCBvdXRwdXROb2RlICE9PSB1bmRlZmluZWQgJiYgb3V0cHV0Tm9kZS5pc091dHB1dFN0cnVjdE5vZGUgPT09IHRydWUgKTtcblxuXHRcdFx0Zm9yICggY29uc3Qgbm9kZSBvZiBmbG93Tm9kZXMgKSB7XG5cblx0XHRcdFx0Y29uc3QgZmxvd1Nsb3REYXRhID0gdGhpcy5nZXRGbG93RGF0YSggbm9kZS8qLCBzaGFkZXJTdGFnZSovICk7XG5cdFx0XHRcdGNvbnN0IHNsb3ROYW1lID0gbm9kZS5uYW1lO1xuXG5cdFx0XHRcdGlmICggc2xvdE5hbWUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGZsb3cubGVuZ3RoID4gMCApIGZsb3cgKz0gJ1xcbic7XG5cblx0XHRcdFx0XHRmbG93ICs9IGBcXHQvLyBmbG93IC0+ICR7IHNsb3ROYW1lIH1cXG5gO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmbG93ICs9IGAkeyBmbG93U2xvdERhdGEuY29kZSB9XFxuXFx0YDtcblxuXHRcdFx0XHRpZiAoIG5vZGUgPT09IG1haW5Ob2RlICYmIHNoYWRlclN0YWdlICE9PSAnY29tcHV0ZScgKSB7XG5cblx0XHRcdFx0XHRmbG93ICs9ICcvLyByZXN1bHRcXG5cXG5cXHQnO1xuXG5cdFx0XHRcdFx0aWYgKCBzaGFkZXJTdGFnZSA9PT0gJ3ZlcnRleCcgKSB7XG5cblx0XHRcdFx0XHRcdGZsb3cgKz0gYHZhcnlpbmdzLlZlcnRleCA9ICR7IGZsb3dTbG90RGF0YS5yZXN1bHQgfTtgO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggc2hhZGVyU3RhZ2UgPT09ICdmcmFnbWVudCcgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaXNPdXRwdXRTdHJ1Y3QgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhZ2VEYXRhLnJldHVyblR5cGUgPSBvdXRwdXROb2RlLmdldE5vZGVUeXBlKCB0aGlzICk7XG5cdFx0XHRcdFx0XHRcdHN0YWdlRGF0YS5zdHJ1Y3RzICs9ICd2YXI8cHJpdmF0ZT4gb3V0cHV0IDogJyArIHN0YWdlRGF0YS5yZXR1cm5UeXBlICsgJzsnO1xuXG5cdFx0XHRcdFx0XHRcdGZsb3cgKz0gYHJldHVybiAkeyBmbG93U2xvdERhdGEucmVzdWx0IH07YDtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRsZXQgc3RydWN0U25pcHBldCA9ICdcXHRAbG9jYXRpb24oMCkgY29sb3I6IHZlYzQ8ZjMyPic7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgYnVpbHRpbnMgPSB0aGlzLmdldEJ1aWx0aW5zKCAnb3V0cHV0JyApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggYnVpbHRpbnMgKSBzdHJ1Y3RTbmlwcGV0ICs9ICcsXFxuXFx0JyArIGJ1aWx0aW5zO1xuXG5cdFx0XHRcdFx0XHRcdHN0YWdlRGF0YS5yZXR1cm5UeXBlID0gJ091dHB1dFN0cnVjdCc7XG5cdFx0XHRcdFx0XHRcdHN0YWdlRGF0YS5zdHJ1Y3RzICs9IHRoaXMuX2dldFdHU0xTdHJ1Y3QoICdPdXRwdXRTdHJ1Y3QnLCBzdHJ1Y3RTbmlwcGV0ICk7XG5cdFx0XHRcdFx0XHRcdHN0YWdlRGF0YS5zdHJ1Y3RzICs9ICdcXG52YXI8cHJpdmF0ZT4gb3V0cHV0IDogT3V0cHV0U3RydWN0Oyc7XG5cblx0XHRcdFx0XHRcdFx0ZmxvdyArPSBgb3V0cHV0LmNvbG9yID0gJHsgZmxvd1Nsb3REYXRhLnJlc3VsdCB9O1xcblxcblxcdHJldHVybiBvdXRwdXQ7YDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRzdGFnZURhdGEuZmxvdyA9IGZsb3c7XG5cblx0XHR9XG5cblx0XHR0aGlzLnNoYWRlclN0YWdlID0gbnVsbDtcblxuXHRcdGlmICggdGhpcy5tYXRlcmlhbCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52ZXJ0ZXhTaGFkZXIgPSB0aGlzLl9nZXRXR1NMVmVydGV4Q29kZSggc2hhZGVyc0RhdGEudmVydGV4ICk7XG5cdFx0XHR0aGlzLmZyYWdtZW50U2hhZGVyID0gdGhpcy5fZ2V0V0dTTEZyYWdtZW50Q29kZSggc2hhZGVyc0RhdGEuZnJhZ21lbnQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZVNoYWRlciA9IHRoaXMuX2dldFdHU0xDb21wdXRlQ29kZSggc2hhZGVyc0RhdGEuY29tcHV0ZSwgKCB0aGlzLm9iamVjdC53b3JrZ3JvdXBTaXplIHx8IFsgNjQgXSApLmpvaW4oICcsICcgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbmF0aXZlIHNoYWRlciBtZXRob2QgbmFtZSBmb3IgYSBnaXZlbiBnZW5lcmljIG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgLSBUaGUgbWV0aG9kIG5hbWUgdG8gcmVzb2x2ZS5cblx0ICogQHBhcmFtIHs/c3RyaW5nfSBbb3V0cHV0PW51bGxdIC0gQW4gb3B0aW9uYWwgb3V0cHV0LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSByZXNvbHZlZCBXR1NMIG1ldGhvZCBuYW1lLlxuXHQgKi9cblx0Z2V0TWV0aG9kKCBtZXRob2QsIG91dHB1dCA9IG51bGwgKSB7XG5cblx0XHRsZXQgd2dzbE1ldGhvZDtcblxuXHRcdGlmICggb3V0cHV0ICE9PSBudWxsICkge1xuXG5cdFx0XHR3Z3NsTWV0aG9kID0gdGhpcy5fZ2V0V0dTTE1ldGhvZCggbWV0aG9kICsgJ18nICsgb3V0cHV0ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHdnc2xNZXRob2QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0d2dzbE1ldGhvZCA9IHRoaXMuX2dldFdHU0xNZXRob2QoIG1ldGhvZCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdnc2xNZXRob2QgfHwgbWV0aG9kO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgV0dTTCB0eXBlIG9mIHRoZSBnaXZlbiBub2RlIGRhdGEgdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgbm9kZSBkYXRhIHR5cGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFdHU0wgdHlwZS5cblx0ICovXG5cdGdldFR5cGUoIHR5cGUgKSB7XG5cblx0XHRyZXR1cm4gd2dzbFR5cGVMaWJbIHR5cGUgXSB8fCB0eXBlO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgcmVxdWVzdGVkIGZlYXR1cmUgaXMgYXZhaWxhYmxlIG9yIG5vdC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgcmVxdWVzdGVkIGZlYXR1cmUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlcXVlc3RlZCBmZWF0dXJlIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqL1xuXHRpc0F2YWlsYWJsZSggbmFtZSApIHtcblxuXHRcdGxldCByZXN1bHQgPSBzdXBwb3J0c1sgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXN1bHQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBuYW1lID09PSAnZmxvYXQzMkZpbHRlcmFibGUnICkge1xuXG5cdFx0XHRcdHJlc3VsdCA9IHRoaXMucmVuZGVyZXIuaGFzRmVhdHVyZSggJ2Zsb2F0MzItZmlsdGVyYWJsZScgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbmFtZSA9PT0gJ2NsaXBEaXN0YW5jZScgKSB7XG5cblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5yZW5kZXJlci5oYXNGZWF0dXJlKCAnY2xpcC1kaXN0YW5jZXMnICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3VwcG9ydHNbIG5hbWUgXSA9IHJlc3VsdDtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBuYXRpdmUgc2hhZGVyIG1ldGhvZCBuYW1lIGZvciBhIGdpdmVuIGdlbmVyaWMgbmFtZS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCAtIFRoZSBtZXRob2QgbmFtZSB0byByZXNvbHZlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSByZXNvbHZlZCBXR1NMIG1ldGhvZCBuYW1lLlxuXHQgKi9cblx0X2dldFdHU0xNZXRob2QoIG1ldGhvZCApIHtcblxuXHRcdGlmICggd2dzbFBvbHlmaWxsWyBtZXRob2QgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLl9pbmNsdWRlKCBtZXRob2QgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB3Z3NsTWV0aG9kc1sgbWV0aG9kIF07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbmNsdWRlcyB0aGUgZ2l2ZW4gbWV0aG9kIG5hbWUgaW50byB0aGUgY3VycmVudFxuXHQgKiBmdW5jdGlvbiBub2RlLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBtZXRob2QgbmFtZSB0byBpbmNsdWRlLlxuXHQgKiBAcmV0dXJuIHtDb2RlTm9kZX0gVGhlIHJlc3BlY3RpdmUgY29kZSBub2RlLlxuXHQgKi9cblx0X2luY2x1ZGUoIG5hbWUgKSB7XG5cblx0XHRjb25zdCBjb2RlTm9kZSA9IHdnc2xQb2x5ZmlsbFsgbmFtZSBdO1xuXHRcdGNvZGVOb2RlLmJ1aWxkKCB0aGlzICk7XG5cblx0XHRpZiAoIHRoaXMuY3VycmVudEZ1bmN0aW9uTm9kZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jdXJyZW50RnVuY3Rpb25Ob2RlLmluY2x1ZGVzLnB1c2goIGNvZGVOb2RlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29kZU5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgV0dTTCB2ZXJ0ZXggc2hhZGVyIGJhc2VkIG9uIHRoZSBnaXZlbiBzaGFkZXIgZGF0YS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtPYmplY3R9IHNoYWRlckRhdGEgLSBUaGUgc2hhZGVyIGRhdGEuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZlcnRleCBzaGFkZXIuXG5cdCAqL1xuXHRfZ2V0V0dTTFZlcnRleENvZGUoIHNoYWRlckRhdGEgKSB7XG5cblx0XHRyZXR1cm4gYCR7IHRoaXMuZ2V0U2lnbmF0dXJlKCkgfVxuLy8gZGlyZWN0aXZlc1xuJHtzaGFkZXJEYXRhLmRpcmVjdGl2ZXN9XG5cbi8vIHN0cnVjdHNcbiR7c2hhZGVyRGF0YS5zdHJ1Y3RzfVxuXG4vLyB1bmlmb3Jtc1xuJHtzaGFkZXJEYXRhLnVuaWZvcm1zfVxuXG4vLyB2YXJ5aW5nc1xuJHtzaGFkZXJEYXRhLnZhcnlpbmdzfVxudmFyPHByaXZhdGU+IHZhcnlpbmdzIDogVmFyeWluZ3NTdHJ1Y3Q7XG5cbi8vIGNvZGVzXG4ke3NoYWRlckRhdGEuY29kZXN9XG5cbkB2ZXJ0ZXhcbmZuIG1haW4oICR7c2hhZGVyRGF0YS5hdHRyaWJ1dGVzfSApIC0+IFZhcnlpbmdzU3RydWN0IHtcblxuXHQvLyB2YXJzXG5cdCR7c2hhZGVyRGF0YS52YXJzfVxuXG5cdC8vIGZsb3dcblx0JHtzaGFkZXJEYXRhLmZsb3d9XG5cblx0cmV0dXJuIHZhcnlpbmdzO1xuXG59XG5gO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIFdHU0wgZnJhZ21lbnQgc2hhZGVyIGJhc2VkIG9uIHRoZSBnaXZlbiBzaGFkZXIgZGF0YS5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtPYmplY3R9IHNoYWRlckRhdGEgLSBUaGUgc2hhZGVyIGRhdGEuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZlcnRleCBzaGFkZXIuXG5cdCAqL1xuXHRfZ2V0V0dTTEZyYWdtZW50Q29kZSggc2hhZGVyRGF0YSApIHtcblxuXHRcdHJldHVybiBgJHsgdGhpcy5nZXRTaWduYXR1cmUoKSB9XG4vLyBnbG9iYWxcbiR7IGRpYWdub3N0aWNzIH1cblxuLy8gc3RydWN0c1xuJHtzaGFkZXJEYXRhLnN0cnVjdHN9XG5cbi8vIHVuaWZvcm1zXG4ke3NoYWRlckRhdGEudW5pZm9ybXN9XG5cbi8vIGNvZGVzXG4ke3NoYWRlckRhdGEuY29kZXN9XG5cbkBmcmFnbWVudFxuZm4gbWFpbiggJHtzaGFkZXJEYXRhLnZhcnlpbmdzfSApIC0+ICR7c2hhZGVyRGF0YS5yZXR1cm5UeXBlfSB7XG5cblx0Ly8gdmFyc1xuXHQke3NoYWRlckRhdGEudmFyc31cblxuXHQvLyBmbG93XG5cdCR7c2hhZGVyRGF0YS5mbG93fVxuXG59XG5gO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIFdHU0wgY29tcHV0ZSBzaGFkZXIgYmFzZWQgb24gdGhlIGdpdmVuIHNoYWRlciBkYXRhLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge09iamVjdH0gc2hhZGVyRGF0YSAtIFRoZSBzaGFkZXIgZGF0YS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHdvcmtncm91cFNpemUgLSBUaGUgd29ya2dyb3VwIHNpemUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZlcnRleCBzaGFkZXIuXG5cdCAqL1xuXHRfZ2V0V0dTTENvbXB1dGVDb2RlKCBzaGFkZXJEYXRhLCB3b3JrZ3JvdXBTaXplICkge1xuXG5cdFx0cmV0dXJuIGAkeyB0aGlzLmdldFNpZ25hdHVyZSgpIH1cbi8vIGRpcmVjdGl2ZXNcbiR7c2hhZGVyRGF0YS5kaXJlY3RpdmVzfVxuXG4vLyBzeXN0ZW1cbnZhcjxwcml2YXRlPiBpbnN0YW5jZUluZGV4IDogdTMyO1xuXG4vLyBsb2NhbHNcbiR7c2hhZGVyRGF0YS5zY29wZWRBcnJheXN9XG5cbi8vIHN0cnVjdHNcbiR7c2hhZGVyRGF0YS5zdHJ1Y3RzfVxuXG4vLyB1bmlmb3Jtc1xuJHtzaGFkZXJEYXRhLnVuaWZvcm1zfVxuXG4vLyBjb2Rlc1xuJHtzaGFkZXJEYXRhLmNvZGVzfVxuXG5AY29tcHV0ZSBAd29ya2dyb3VwX3NpemUoICR7d29ya2dyb3VwU2l6ZX0gKVxuZm4gbWFpbiggJHtzaGFkZXJEYXRhLmF0dHJpYnV0ZXN9ICkge1xuXG5cdC8vIHN5c3RlbVxuXHRpbnN0YW5jZUluZGV4ID0gZ2xvYmFsSWQueCArIGdsb2JhbElkLnkgKiBudW1Xb3JrZ3JvdXBzLnggKiB1MzIoJHt3b3JrZ3JvdXBTaXplfSkgKyBnbG9iYWxJZC56ICogbnVtV29ya2dyb3Vwcy54ICogbnVtV29ya2dyb3Vwcy55ICogdTMyKCR7d29ya2dyb3VwU2l6ZX0pO1xuXG5cdC8vIHZhcnNcblx0JHtzaGFkZXJEYXRhLnZhcnN9XG5cblx0Ly8gZmxvd1xuXHQke3NoYWRlckRhdGEuZmxvd31cblxufVxuYDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBXR1NMIHN0cnVjdCBiYXNlZCBvbiB0aGUgZ2l2ZW4gbmFtZSBhbmQgdmFyaWFibGVzLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBzdHJ1Y3QgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHZhcnMgLSBUaGUgc3RydWN0IHZhcmlhYmxlcy5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgV0dTTCBzbmlwcGV0IHJlcHJlc2VudGluZyBhIHN0cnVjdC5cblx0ICovXG5cdF9nZXRXR1NMU3RydWN0KCBuYW1lLCB2YXJzICkge1xuXG5cdFx0cmV0dXJuIGBcbnN0cnVjdCAke25hbWV9IHtcbiR7dmFyc31cbn07YDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBXR1NMIHN0cnVjdCBiaW5kaW5nLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBzdHJ1Y3QgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHZhcnMgLSBUaGUgc3RydWN0IHZhcmlhYmxlcy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGFjY2VzcyAtIFRoZSBhY2Nlc3MuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYmluZGluZz0wXSAtIFRoZSBiaW5kaW5nIGluZGV4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2dyb3VwPTBdIC0gVGhlIGdyb3VwIGluZGV4LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBXR1NMIHNuaXBwZXQgcmVwcmVzZW50aW5nIGEgc3RydWN0IGJpbmRpbmcuXG5cdCAqL1xuXHRfZ2V0V0dTTFN0cnVjdEJpbmRpbmcoIG5hbWUsIHZhcnMsIGFjY2VzcywgYmluZGluZyA9IDAsIGdyb3VwID0gMCApIHtcblxuXHRcdGNvbnN0IHN0cnVjdE5hbWUgPSBuYW1lICsgJ1N0cnVjdCc7XG5cdFx0Y29uc3Qgc3RydWN0U25pcHBldCA9IHRoaXMuX2dldFdHU0xTdHJ1Y3QoIHN0cnVjdE5hbWUsIHZhcnMgKTtcblxuXHRcdHJldHVybiBgJHtzdHJ1Y3RTbmlwcGV0fVxuQGJpbmRpbmcoICR7IGJpbmRpbmcgfSApIEBncm91cCggJHsgZ3JvdXAgfSApXG52YXI8JHthY2Nlc3N9PiAkeyBuYW1lIH0gOiAkeyBzdHJ1Y3ROYW1lIH07YDtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV0dTTE5vZGVCdWlsZGVyO1xuIiwiaW1wb3J0IHsgSGFsZkZsb2F0VHlwZSwgVW5zaWduZWRCeXRlVHlwZSB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBHUFVQcmltaXRpdmVUb3BvbG9neSwgR1BVVGV4dHVyZUZvcm1hdCB9IGZyb20gJy4vV2ViR1BVQ29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBBIFdlYkdQVSBiYWNrZW5kIHV0aWxpdHkgbW9kdWxlIHdpdGggY29tbW9uIGhlbHBlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgV2ViR1BVVXRpbHMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHV0aWxpdHkgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdQVUJhY2tlbmR9IGJhY2tlbmQgLSBUaGUgV2ViR1BVIGJhY2tlbmQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYmFja2VuZCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBXZWJHUFUgYmFja2VuZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHUFVCYWNrZW5kfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBkZXB0aC9zdGVuY2lsIEdQVSBmb3JtYXQgZm9yIHRoZSBnaXZlbiByZW5kZXIgY29udGV4dC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBkZXB0aC9zdGVuY2lsIEdQVSB0ZXh0dXJlIGZvcm1hdC5cblx0ICovXG5cdGdldEN1cnJlbnREZXB0aFN0ZW5jaWxGb3JtYXQoIHJlbmRlckNvbnRleHQgKSB7XG5cblx0XHRsZXQgZm9ybWF0O1xuXG5cdFx0aWYgKCByZW5kZXJDb250ZXh0LmRlcHRoVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0Zm9ybWF0ID0gdGhpcy5nZXRUZXh0dXJlRm9ybWF0R1BVKCByZW5kZXJDb250ZXh0LmRlcHRoVGV4dHVyZSApO1xuXG5cdFx0fSBlbHNlIGlmICggcmVuZGVyQ29udGV4dC5kZXB0aCAmJiByZW5kZXJDb250ZXh0LnN0ZW5jaWwgKSB7XG5cblx0XHRcdGZvcm1hdCA9IEdQVVRleHR1cmVGb3JtYXQuRGVwdGgyNFBsdXNTdGVuY2lsODtcblxuXHRcdH0gZWxzZSBpZiAoIHJlbmRlckNvbnRleHQuZGVwdGggKSB7XG5cblx0XHRcdGZvcm1hdCA9IEdQVVRleHR1cmVGb3JtYXQuRGVwdGgyNFBsdXM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZm9ybWF0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgR1BVIGZvcm1hdCBmb3IgdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHUFUgdGV4dHVyZSBmb3JtYXQuXG5cdCAqL1xuXHRnZXRUZXh0dXJlRm9ybWF0R1BVKCB0ZXh0dXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYmFja2VuZC5nZXQoIHRleHR1cmUgKS5mb3JtYXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIG11bHRpLXNhbXBsaW5nIHN0YXRlIG9mIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgbXVsdGktc2FtcGxpbmcgc3RhdGUuXG5cdCAqL1xuXHRnZXRUZXh0dXJlU2FtcGxlRGF0YSggdGV4dHVyZSApIHtcblxuXHRcdGxldCBzYW1wbGVzO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzRnJhbWVidWZmZXJUZXh0dXJlICkge1xuXG5cdFx0XHRzYW1wbGVzID0gMTtcblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEZXB0aFRleHR1cmUgJiYgISB0ZXh0dXJlLnJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLmJhY2tlbmQucmVuZGVyZXI7XG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHRcdFx0c2FtcGxlcyA9IHJlbmRlclRhcmdldCA/IHJlbmRlclRhcmdldC5zYW1wbGVzIDogcmVuZGVyZXIuc2FtcGxlcztcblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUucmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRzYW1wbGVzID0gdGV4dHVyZS5yZW5kZXJUYXJnZXQuc2FtcGxlcztcblxuXHRcdH1cblxuXHRcdHNhbXBsZXMgPSBzYW1wbGVzIHx8IDE7XG5cblx0XHRjb25zdCBpc01TQUEgPSBzYW1wbGVzID4gMSAmJiB0ZXh0dXJlLnJlbmRlclRhcmdldCAhPT0gbnVsbCAmJiAoIHRleHR1cmUuaXNEZXB0aFRleHR1cmUgIT09IHRydWUgJiYgdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSAhPT0gdHJ1ZSApO1xuXHRcdGNvbnN0IHByaW1hcnlTYW1wbGVzID0gaXNNU0FBID8gMSA6IHNhbXBsZXM7XG5cblx0XHRyZXR1cm4geyBzYW1wbGVzLCBwcmltYXJ5U2FtcGxlcywgaXNNU0FBIH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGNvbG9yIGF0dGFjaG1lbnQncyBHUFUgZm9ybWF0IG9mIHRoZSBjdXJyZW50IHJlbmRlciBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEdQVSB0ZXh0dXJlIGZvcm1hdCBvZiB0aGUgZGVmYXVsdCBjb2xvciBhdHRhY2htZW50LlxuXHQgKi9cblx0Z2V0Q3VycmVudENvbG9yRm9ybWF0KCByZW5kZXJDb250ZXh0ICkge1xuXG5cdFx0bGV0IGZvcm1hdDtcblxuXHRcdGlmICggcmVuZGVyQ29udGV4dC50ZXh0dXJlcyAhPT0gbnVsbCApIHtcblxuXHRcdFx0Zm9ybWF0ID0gdGhpcy5nZXRUZXh0dXJlRm9ybWF0R1BVKCByZW5kZXJDb250ZXh0LnRleHR1cmVzWyAwIF0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGZvcm1hdCA9IHRoaXMuZ2V0UHJlZmVycmVkQ2FudmFzRm9ybWF0KCk7IC8vIGRlZmF1bHQgY29udGV4dCBmb3JtYXRcblxuXHRcdH1cblxuXHRcdHJldHVybiBmb3JtYXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBvdXRwdXQgY29sb3Igc3BhY2Ugb2YgdGhlIGN1cnJlbnQgcmVuZGVyIGNvbnRleHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgb3V0cHV0IGNvbG9yIHNwYWNlLlxuXHQgKi9cblx0Z2V0Q3VycmVudENvbG9yU3BhY2UoIHJlbmRlckNvbnRleHQgKSB7XG5cblx0XHRpZiAoIHJlbmRlckNvbnRleHQudGV4dHVyZXMgIT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybiByZW5kZXJDb250ZXh0LnRleHR1cmVzWyAwIF0uY29sb3JTcGFjZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmJhY2tlbmQucmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgR1BVIHByaW1pdGl2ZSB0b3BvbG9neSBmb3IgdGhlIGdpdmVuIG9iamVjdCBhbmQgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdGVyaWFsIC0gVGhlIG1hdGVyaWFsLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHUFUgcHJpbWl0aXZlIHRvcG9sb2d5LlxuXHQgKi9cblx0Z2V0UHJpbWl0aXZlVG9wb2xvZ3koIG9iamVjdCwgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG9iamVjdC5pc1BvaW50cyApIHJldHVybiBHUFVQcmltaXRpdmVUb3BvbG9neS5Qb2ludExpc3Q7XG5cdFx0ZWxzZSBpZiAoIG9iamVjdC5pc0xpbmVTZWdtZW50cyB8fCAoIG9iamVjdC5pc01lc2ggJiYgbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkgKSByZXR1cm4gR1BVUHJpbWl0aXZlVG9wb2xvZ3kuTGluZUxpc3Q7XG5cdFx0ZWxzZSBpZiAoIG9iamVjdC5pc0xpbmUgKSByZXR1cm4gR1BVUHJpbWl0aXZlVG9wb2xvZ3kuTGluZVN0cmlwO1xuXHRcdGVsc2UgaWYgKCBvYmplY3QuaXNNZXNoICkgcmV0dXJuIEdQVVByaW1pdGl2ZVRvcG9sb2d5LlRyaWFuZ2xlTGlzdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBtb2RpZmllZCBzYW1wbGUgY291bnQgZnJvbSB0aGUgZ2l2ZW4gc2FtcGxlIGNvdW50IHZhbHVlLlxuXHQgKlxuXHQgKiBUaGF0IGlzIHJlcXVpcmVkIHNpbmNlIFdlYkdQVSBkb2VzIG5vdCBzdXBwb3J0IGFyYml0cmFyeSBzYW1wbGUgY291bnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc2FtcGxlQ291bnQgLSBUaGUgaW5wdXQgc2FtcGxlIGNvdW50LlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSAocG90ZW50aWFsbHkgdXBkYXRlZCkgb3V0cHV0IHNhbXBsZSBjb3VudC5cblx0ICovXG5cdGdldFNhbXBsZUNvdW50KCBzYW1wbGVDb3VudCApIHtcblxuXHRcdGxldCBjb3VudCA9IDE7XG5cblx0XHRpZiAoIHNhbXBsZUNvdW50ID4gMSApIHtcblxuXHRcdFx0Ly8gV2ViR1BVIG9ubHkgc3VwcG9ydHMgcG93ZXItb2YtdHdvIHNhbXBsZSBjb3VudHMgYW5kIDIgaXMgbm90IGEgdmFsaWQgdmFsdWVcblx0XHRcdGNvdW50ID0gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nMiggc2FtcGxlQ291bnQgKSApICk7XG5cblx0XHRcdGlmICggY291bnQgPT09IDIgKSB7XG5cblx0XHRcdFx0Y291bnQgPSA0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY291bnQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzYW1wbGUgY291bnQgb2YgdGhlIGdpdmVuIHJlbmRlciBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNhbXBsZSBjb3VudC5cblx0ICovXG5cdGdldFNhbXBsZUNvdW50UmVuZGVyQ29udGV4dCggcmVuZGVyQ29udGV4dCApIHtcblxuXHRcdGlmICggcmVuZGVyQ29udGV4dC50ZXh0dXJlcyAhPT0gbnVsbCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0U2FtcGxlQ291bnQoIHJlbmRlckNvbnRleHQuc2FtcGxlQ291bnQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmdldFNhbXBsZUNvdW50KCB0aGlzLmJhY2tlbmQucmVuZGVyZXIuc2FtcGxlcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcHJlZmVycmVkIGNhbnZhcyBmb3JtYXQuXG5cdCAqXG5cdCAqIFRoZXJlIGlzIGEgc2VwYXJhdGUgbWV0aG9kIGZvciB0aGlzIHNvIGl0J3MgcG9zc2libGUgdG9cblx0ICogaG9ub3IgZWRnZSBjYXNlcyBmb3Igc3BlY2lmaWMgZGV2aWNlcy5cblx0ICpcblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR1BVIHRleHR1cmUgZm9ybWF0IG9mIHRoZSBjYW52YXMuXG5cdCAqL1xuXHRnZXRQcmVmZXJyZWRDYW52YXNGb3JtYXQoKSB7XG5cblx0XHRjb25zdCBvdXRwdXRUeXBlID0gdGhpcy5iYWNrZW5kLnBhcmFtZXRlcnMub3V0cHV0VHlwZTtcblxuXHRcdGlmICggb3V0cHV0VHlwZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gbmF2aWdhdG9yLmdwdS5nZXRQcmVmZXJyZWRDYW52YXNGb3JtYXQoKTtcblxuXHRcdH0gZWxzZSBpZiAoIG91dHB1dFR5cGUgPT09IFVuc2lnbmVkQnl0ZVR5cGUgKSB7XG5cblx0XHRcdHJldHVybiBHUFVUZXh0dXJlRm9ybWF0LkJHUkE4VW5vcm07XG5cblx0XHR9IGVsc2UgaWYgKCBvdXRwdXRUeXBlID09PSBIYWxmRmxvYXRUeXBlICkge1xuXG5cdFx0XHRyZXR1cm4gR1BVVGV4dHVyZUZvcm1hdC5SR0JBMTZGbG9hdDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Vuc3VwcG9ydGVkIG91dHB1dFR5cGUnICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYkdQVVV0aWxzO1xuIiwiaW1wb3J0IHsgR1BVSW5wdXRTdGVwTW9kZSB9IGZyb20gJy4vV2ViR1BVQ29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHsgRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvQnVmZmVyQXR0cmlidXRlLmpzJztcblxuY29uc3QgdHlwZWRBcnJheXNUb1ZlcnRleEZvcm1hdFByZWZpeCA9IG5ldyBNYXAoIFtcblx0WyBJbnQ4QXJyYXksIFsgJ3NpbnQ4JywgJ3Nub3JtOCcgXV0sXG5cdFsgVWludDhBcnJheSwgWyAndWludDgnLCAndW5vcm04JyBdXSxcblx0WyBJbnQxNkFycmF5LCBbICdzaW50MTYnLCAnc25vcm0xNicgXV0sXG5cdFsgVWludDE2QXJyYXksIFsgJ3VpbnQxNicsICd1bm9ybTE2JyBdXSxcblx0WyBJbnQzMkFycmF5LCBbICdzaW50MzInLCAnc25vcm0zMicgXV0sXG5cdFsgVWludDMyQXJyYXksIFsgJ3VpbnQzMicsICd1bm9ybTMyJyBdXSxcblx0WyBGbG9hdDMyQXJyYXksIFsgJ2Zsb2F0MzInLCBdXSxcbl0gKTtcblxuY29uc3QgdHlwZWRBdHRyaWJ1dGVUb1ZlcnRleEZvcm1hdFByZWZpeCA9IG5ldyBNYXAoIFtcblx0WyBGbG9hdDE2QnVmZmVyQXR0cmlidXRlLCBbICdmbG9hdDE2JywgXV0sXG5dICk7XG5cbmNvbnN0IHR5cGVBcnJheXNUb1ZlcnRleEZvcm1hdFByZWZpeEZvckl0ZW1TaXplMSA9IG5ldyBNYXAoIFtcblx0WyBJbnQzMkFycmF5LCAnc2ludDMyJyBdLFxuXHRbIEludDE2QXJyYXksICdzaW50MzInIF0sIC8vIHBhdGNoIGZvciBJTlQxNlxuXHRbIFVpbnQzMkFycmF5LCAndWludDMyJyBdLFxuXHRbIFVpbnQxNkFycmF5LCAndWludDMyJyBdLCAvLyBwYXRjaCBmb3IgVUlOVDE2XG5cdFsgRmxvYXQzMkFycmF5LCAnZmxvYXQzMicgXVxuXSApO1xuXG4vKipcbiAqIEEgV2ViR1BVIGJhY2tlbmQgdXRpbGl0eSBtb2R1bGUgZm9yIG1hbmFnaW5nIHNoYWRlciBhdHRyaWJ1dGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFdlYkdQVUF0dHJpYnV0ZVV0aWxzIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB1dGlsaXR5IG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHUFVCYWNrZW5kfSBiYWNrZW5kIC0gVGhlIFdlYkdQVSBiYWNrZW5kLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGJhY2tlbmQgKSB7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgV2ViR1BVIGJhY2tlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2ViR1BVQmFja2VuZH1cblx0XHQgKi9cblx0XHR0aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgR1BVIGJ1ZmZlciBmb3IgdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHBhcmFtIHtHUFVCdWZmZXJVc2FnZX0gdXNhZ2UgLSBBIGZsYWcgdGhhdCBpbmRpY2F0ZXMgaG93IHRoZSBidWZmZXIgbWF5IGJlIHVzZWQgYWZ0ZXIgaXRzIGNyZWF0aW9uLlxuXHQgKi9cblx0Y3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIHVzYWdlICkge1xuXG5cdFx0Y29uc3QgYnVmZmVyQXR0cmlidXRlID0gdGhpcy5fZ2V0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKTtcblxuXHRcdGNvbnN0IGJhY2tlbmQgPSB0aGlzLmJhY2tlbmQ7XG5cdFx0Y29uc3QgYnVmZmVyRGF0YSA9IGJhY2tlbmQuZ2V0KCBidWZmZXJBdHRyaWJ1dGUgKTtcblxuXHRcdGxldCBidWZmZXIgPSBidWZmZXJEYXRhLmJ1ZmZlcjtcblxuXHRcdGlmICggYnVmZmVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGRldmljZSA9IGJhY2tlbmQuZGV2aWNlO1xuXG5cdFx0XHRsZXQgYXJyYXkgPSBidWZmZXJBdHRyaWJ1dGUuYXJyYXk7XG5cblx0XHRcdC8vIHBhdGNoIGZvciBJTlQxNiBhbmQgVUlOVDE2XG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5ub3JtYWxpemVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRpZiAoIGFycmF5LmNvbnN0cnVjdG9yID09PSBJbnQxNkFycmF5ICkge1xuXG5cdFx0XHRcdFx0YXJyYXkgPSBuZXcgSW50MzJBcnJheSggYXJyYXkgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBhcnJheS5jb25zdHJ1Y3RvciA9PT0gVWludDE2QXJyYXkgKSB7XG5cblx0XHRcdFx0XHRhcnJheSA9IG5ldyBVaW50MzJBcnJheSggYXJyYXkgKTtcblxuXHRcdFx0XHRcdGlmICggdXNhZ2UgJiBHUFVCdWZmZXJVc2FnZS5JTkRFWCApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggYXJyYXlbIGkgXSA9PT0gMHhmZmZmICkgYXJyYXlbIGkgXSA9IDB4ZmZmZmZmZmY7IC8vIHVzZSBjb3JyZWN0IHByaW1pdGl2ZSByZXN0YXJ0IGluZGV4XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0YnVmZmVyQXR0cmlidXRlLmFycmF5ID0gYXJyYXk7XG5cblx0XHRcdGlmICggKCBidWZmZXJBdHRyaWJ1dGUuaXNTdG9yYWdlQnVmZmVyQXR0cmlidXRlIHx8IGJ1ZmZlckF0dHJpYnV0ZS5pc1N0b3JhZ2VJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgKSAmJiBidWZmZXJBdHRyaWJ1dGUuaXRlbVNpemUgPT09IDMgKSB7XG5cblx0XHRcdFx0YXJyYXkgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IoIGJ1ZmZlckF0dHJpYnV0ZS5jb3VudCAqIDQgKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBidWZmZXJBdHRyaWJ1dGUuY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheS5zZXQoIGJ1ZmZlckF0dHJpYnV0ZS5hcnJheS5zdWJhcnJheSggaSAqIDMsIGkgKiAzICsgMyApLCBpICogNCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBVcGRhdGUgQnVmZmVyQXR0cmlidXRlXG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZS5pdGVtU2l6ZSA9IDQ7XG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZS5hcnJheSA9IGFycmF5O1xuXG5cdFx0XHRcdGJ1ZmZlckRhdGEuX2ZvcmNlM3RvNEJ5dGVzQWxpZ25tZW50ID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzaXplID0gYXJyYXkuYnl0ZUxlbmd0aCArICggKCA0IC0gKCBhcnJheS5ieXRlTGVuZ3RoICUgNCApICkgJSA0ICk7IC8vIGVuc3VyZSA0IGJ5dGUgYWxpZ25tZW50LCBzZWUgIzIwNDQxXG5cblx0XHRcdGJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoIHtcblx0XHRcdFx0bGFiZWw6IGJ1ZmZlckF0dHJpYnV0ZS5uYW1lLFxuXHRcdFx0XHRzaXplOiBzaXplLFxuXHRcdFx0XHR1c2FnZTogdXNhZ2UsXG5cdFx0XHRcdG1hcHBlZEF0Q3JlYXRpb246IHRydWVcblx0XHRcdH0gKTtcblxuXHRcdFx0bmV3IGFycmF5LmNvbnN0cnVjdG9yKCBidWZmZXIuZ2V0TWFwcGVkUmFuZ2UoKSApLnNldCggYXJyYXkgKTtcblxuXHRcdFx0YnVmZmVyLnVubWFwKCk7XG5cblx0XHRcdGJ1ZmZlckRhdGEuYnVmZmVyID0gYnVmZmVyO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgR1BVIGJ1ZmZlciBvZiB0aGUgZ2l2ZW4gYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0dXBkYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRjb25zdCBidWZmZXJBdHRyaWJ1dGUgPSB0aGlzLl9nZXRCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApO1xuXG5cdFx0Y29uc3QgYmFja2VuZCA9IHRoaXMuYmFja2VuZDtcblx0XHRjb25zdCBkZXZpY2UgPSBiYWNrZW5kLmRldmljZTtcblxuXHRcdGNvbnN0IGJ1ZmZlckRhdGEgPSBiYWNrZW5kLmdldCggYnVmZmVyQXR0cmlidXRlICk7XG5cdFx0Y29uc3QgYnVmZmVyID0gYmFja2VuZC5nZXQoIGJ1ZmZlckF0dHJpYnV0ZSApLmJ1ZmZlcjtcblxuXHRcdGxldCBhcnJheSA9IGJ1ZmZlckF0dHJpYnV0ZS5hcnJheTtcblxuXHRcdC8vICBpZiBzdG9yYWdlIGJ1ZmZlciBlbnN1cmUgNCBieXRlIGFsaWdubWVudFxuXHRcdGlmICggYnVmZmVyRGF0YS5fZm9yY2UzdG80Qnl0ZXNBbGlnbm1lbnQgPT09IHRydWUgKSB7XG5cblx0XHRcdGFycmF5ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKCBidWZmZXJBdHRyaWJ1dGUuY291bnQgKiA0ICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGJ1ZmZlckF0dHJpYnV0ZS5jb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRhcnJheS5zZXQoIGJ1ZmZlckF0dHJpYnV0ZS5hcnJheS5zdWJhcnJheSggaSAqIDMsIGkgKiAzICsgMyApLCBpICogNCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJ1ZmZlckF0dHJpYnV0ZS5hcnJheSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cblx0XHRjb25zdCBpc1R5cGVkQXJyYXkgPSB0aGlzLl9pc1R5cGVkQXJyYXkoIGFycmF5ICk7XG5cdFx0Y29uc3QgdXBkYXRlUmFuZ2VzID0gYnVmZmVyQXR0cmlidXRlLnVwZGF0ZVJhbmdlcztcblxuXHRcdGlmICggdXBkYXRlUmFuZ2VzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gTm90IHVzaW5nIHVwZGF0ZSByYW5nZXNcblxuXHRcdFx0ZGV2aWNlLnF1ZXVlLndyaXRlQnVmZmVyKFxuXHRcdFx0XHRidWZmZXIsXG5cdFx0XHRcdDAsXG5cdFx0XHRcdGFycmF5LFxuXHRcdFx0XHQwXG5cdFx0XHQpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgYnl0ZU9mZnNldEZhY3RvciA9IGlzVHlwZWRBcnJheSA/IDEgOiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdXBkYXRlUmFuZ2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgcmFuZ2UgPSB1cGRhdGVSYW5nZXNbIGkgXTtcblx0XHRcdFx0bGV0IGRhdGFPZmZzZXQsIHNpemU7XG5cblx0XHRcdFx0aWYgKCBidWZmZXJEYXRhLl9mb3JjZTN0bzRCeXRlc0FsaWdubWVudCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZlcnRleFN0YXJ0ID0gTWF0aC5mbG9vciggcmFuZ2Uuc3RhcnQgLyAzICk7XG5cdFx0XHRcdFx0Y29uc3QgdmVydGV4Q291bnQgPSBNYXRoLmNlaWwoIHJhbmdlLmNvdW50IC8gMyApO1xuXHRcdFx0XHRcdGRhdGFPZmZzZXQgPSB2ZXJ0ZXhTdGFydCAqIDQgKiBieXRlT2Zmc2V0RmFjdG9yO1xuXHRcdFx0XHRcdHNpemUgPSB2ZXJ0ZXhDb3VudCAqIDQgKiBieXRlT2Zmc2V0RmFjdG9yO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRkYXRhT2Zmc2V0ID0gcmFuZ2Uuc3RhcnQgKiBieXRlT2Zmc2V0RmFjdG9yO1xuXHRcdFx0XHRcdHNpemUgPSByYW5nZS5jb3VudCAqIGJ5dGVPZmZzZXRGYWN0b3I7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGJ1ZmZlck9mZnNldCA9IGRhdGFPZmZzZXQgKiAoIGlzVHlwZWRBcnJheSA/IGFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIDogMSApOyAvLyBidWZmZXJPZmZzZXQgaXMgYWx3YXlzIGluIGJ5dGVzXG5cblx0XHRcdFx0ZGV2aWNlLnF1ZXVlLndyaXRlQnVmZmVyKFxuXHRcdFx0XHRcdGJ1ZmZlcixcblx0XHRcdFx0XHRidWZmZXJPZmZzZXQsXG5cdFx0XHRcdFx0YXJyYXksXG5cdFx0XHRcdFx0ZGF0YU9mZnNldCxcblx0XHRcdFx0XHRzaXplXG5cdFx0XHRcdCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YnVmZmVyQXR0cmlidXRlLmNsZWFyVXBkYXRlUmFuZ2VzKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBjcmVhdGVzIHRoZSB2ZXJ0ZXggYnVmZmVyIGxheW91dCBkYXRhIHdoaWNoIGFyZVxuXHQgKiByZXF1aXJlIHdoZW4gY3JlYXRpbmcgYSByZW5kZXIgcGlwZWxpbmUgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QuXG5cdCAqIEByZXR1cm4ge0FycmF5PE9iamVjdD59IEFuIGFycmF5IGhvbGRpbmcgb2JqZWN0cyB3aGljaCBkZXNjcmliZSB0aGUgdmVydGV4IGJ1ZmZlciBsYXlvdXQuXG5cdCAqL1xuXHRjcmVhdGVTaGFkZXJWZXJ0ZXhCdWZmZXJzKCByZW5kZXJPYmplY3QgKSB7XG5cblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gcmVuZGVyT2JqZWN0LmdldEF0dHJpYnV0ZXMoKTtcblx0XHRjb25zdCB2ZXJ0ZXhCdWZmZXJzID0gbmV3IE1hcCgpO1xuXG5cdFx0Zm9yICggbGV0IHNsb3QgPSAwOyBzbG90IDwgYXR0cmlidXRlcy5sZW5ndGg7IHNsb3QgKysgKSB7XG5cblx0XHRcdGNvbnN0IGdlb21ldHJ5QXR0cmlidXRlID0gYXR0cmlidXRlc1sgc2xvdCBdO1xuXHRcdFx0Y29uc3QgYnl0ZXNQZXJFbGVtZW50ID0gZ2VvbWV0cnlBdHRyaWJ1dGUuYXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XG5cdFx0XHRjb25zdCBidWZmZXJBdHRyaWJ1dGUgPSB0aGlzLl9nZXRCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5QXR0cmlidXRlICk7XG5cblx0XHRcdGxldCB2ZXJ0ZXhCdWZmZXJMYXlvdXQgPSB2ZXJ0ZXhCdWZmZXJzLmdldCggYnVmZmVyQXR0cmlidXRlICk7XG5cblx0XHRcdGlmICggdmVydGV4QnVmZmVyTGF5b3V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bGV0IGFycmF5U3RyaWRlLCBzdGVwTW9kZTtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRhcnJheVN0cmlkZSA9IGdlb21ldHJ5QXR0cmlidXRlLmRhdGEuc3RyaWRlICogYnl0ZXNQZXJFbGVtZW50O1xuXHRcdFx0XHRcdHN0ZXBNb2RlID0gZ2VvbWV0cnlBdHRyaWJ1dGUuZGF0YS5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyID8gR1BVSW5wdXRTdGVwTW9kZS5JbnN0YW5jZSA6IEdQVUlucHV0U3RlcE1vZGUuVmVydGV4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRhcnJheVN0cmlkZSA9IGdlb21ldHJ5QXR0cmlidXRlLml0ZW1TaXplICogYnl0ZXNQZXJFbGVtZW50O1xuXHRcdFx0XHRcdHN0ZXBNb2RlID0gZ2VvbWV0cnlBdHRyaWJ1dGUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPyBHUFVJbnB1dFN0ZXBNb2RlLkluc3RhbmNlIDogR1BVSW5wdXRTdGVwTW9kZS5WZXJ0ZXg7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHBhdGNoIGZvciBJTlQxNiBhbmQgVUlOVDE2XG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUubm9ybWFsaXplZCA9PT0gZmFsc2UgJiYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3RvciA9PT0gSW50MTZBcnJheSB8fCBnZW9tZXRyeUF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3RvciA9PT0gVWludDE2QXJyYXkgKSApIHtcblxuXHRcdFx0XHRcdGFycmF5U3RyaWRlID0gNDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmVydGV4QnVmZmVyTGF5b3V0ID0ge1xuXHRcdFx0XHRcdGFycmF5U3RyaWRlLFxuXHRcdFx0XHRcdGF0dHJpYnV0ZXM6IFtdLFxuXHRcdFx0XHRcdHN0ZXBNb2RlXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dmVydGV4QnVmZmVycy5zZXQoIGJ1ZmZlckF0dHJpYnV0ZSwgdmVydGV4QnVmZmVyTGF5b3V0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZm9ybWF0ID0gdGhpcy5fZ2V0VmVydGV4Rm9ybWF0KCBnZW9tZXRyeUF0dHJpYnV0ZSApO1xuXHRcdFx0Y29uc3Qgb2Zmc2V0ID0gKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlID09PSB0cnVlICkgPyBnZW9tZXRyeUF0dHJpYnV0ZS5vZmZzZXQgKiBieXRlc1BlckVsZW1lbnQgOiAwO1xuXG5cdFx0XHR2ZXJ0ZXhCdWZmZXJMYXlvdXQuYXR0cmlidXRlcy5wdXNoKCB7XG5cdFx0XHRcdHNoYWRlckxvY2F0aW9uOiBzbG90LFxuXHRcdFx0XHRvZmZzZXQsXG5cdFx0XHRcdGZvcm1hdFxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIEFycmF5LmZyb20oIHZlcnRleEJ1ZmZlcnMudmFsdWVzKCkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIHRoZSBHUFUgYnVmZmVyIG9mIHRoZSBnaXZlbiBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRkZXN0cm95QXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRjb25zdCBiYWNrZW5kID0gdGhpcy5iYWNrZW5kO1xuXHRcdGNvbnN0IGRhdGEgPSBiYWNrZW5kLmdldCggdGhpcy5fZ2V0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSApO1xuXG5cdFx0ZGF0YS5idWZmZXIuZGVzdHJveSgpO1xuXG5cdFx0YmFja2VuZC5kZWxldGUoIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgcGVyZm9ybXMgYSByZWFkYmFjayBvcGVyYXRpb24gYnkgbW92aW5nIGJ1ZmZlciBkYXRhIGZyb21cblx0ICogYSBzdG9yYWdlIGJ1ZmZlciBhdHRyaWJ1dGUgZnJvbSB0aGUgR1BVIHRvIHRoZSBDUFUuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcGFyYW0ge1N0b3JhZ2VCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBzdG9yYWdlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBidWZmZXIgZGF0YSB3aGVuIHRoZSBkYXRhIGFyZSByZWFkeS5cblx0ICovXG5cdGFzeW5jIGdldEFycmF5QnVmZmVyQXN5bmMoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGNvbnN0IGJhY2tlbmQgPSB0aGlzLmJhY2tlbmQ7XG5cdFx0Y29uc3QgZGV2aWNlID0gYmFja2VuZC5kZXZpY2U7XG5cblx0XHRjb25zdCBkYXRhID0gYmFja2VuZC5nZXQoIHRoaXMuX2dldEJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkgKTtcblx0XHRjb25zdCBidWZmZXJHUFUgPSBkYXRhLmJ1ZmZlcjtcblx0XHRjb25zdCBzaXplID0gYnVmZmVyR1BVLnNpemU7XG5cblx0XHRjb25zdCByZWFkQnVmZmVyR1BVID0gZGV2aWNlLmNyZWF0ZUJ1ZmZlcigge1xuXHRcdFx0bGFiZWw6IGAkeyBhdHRyaWJ1dGUubmFtZSB9X3JlYWRiYWNrYCxcblx0XHRcdHNpemUsXG5cdFx0XHR1c2FnZTogR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QgfCBHUFVCdWZmZXJVc2FnZS5NQVBfUkVBRFxuXHRcdH0gKTtcblxuXHRcdGNvbnN0IGNtZEVuY29kZXIgPSBkZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoIHtcblx0XHRcdGxhYmVsOiBgcmVhZGJhY2tfZW5jb2Rlcl8keyBhdHRyaWJ1dGUubmFtZSB9YFxuXHRcdH0gKTtcblxuXHRcdGNtZEVuY29kZXIuY29weUJ1ZmZlclRvQnVmZmVyKFxuXHRcdFx0YnVmZmVyR1BVLFxuXHRcdFx0MCxcblx0XHRcdHJlYWRCdWZmZXJHUFUsXG5cdFx0XHQwLFxuXHRcdFx0c2l6ZVxuXHRcdCk7XG5cblx0XHRjb25zdCBncHVDb21tYW5kcyA9IGNtZEVuY29kZXIuZmluaXNoKCk7XG5cdFx0ZGV2aWNlLnF1ZXVlLnN1Ym1pdCggWyBncHVDb21tYW5kcyBdICk7XG5cblx0XHRhd2FpdCByZWFkQnVmZmVyR1BVLm1hcEFzeW5jKCBHUFVNYXBNb2RlLlJFQUQgKTtcblxuXHRcdGNvbnN0IGFycmF5QnVmZmVyID0gcmVhZEJ1ZmZlckdQVS5nZXRNYXBwZWRSYW5nZSgpO1xuXG5cdFx0Y29uc3QgZHN0QnVmZmVyID0gbmV3IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3RvciggYXJyYXlCdWZmZXIuc2xpY2UoIDAgKSApO1xuXG5cdFx0cmVhZEJ1ZmZlckdQVS51bm1hcCgpO1xuXG5cdFx0cmV0dXJuIGRzdEJ1ZmZlci5idWZmZXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2ZXJ0ZXggZm9ybWF0IG9mIHRoZSBnaXZlbiBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gZ2VvbWV0cnlBdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHJldHVybiB7c3RyaW5nfHVuZGVmaW5lZH0gVGhlIHZlcnRleCBmb3JtYXQgKGUuZy4gJ2Zsb2F0MzJ4MycpLlxuXHQgKi9cblx0X2dldFZlcnRleEZvcm1hdCggZ2VvbWV0cnlBdHRyaWJ1dGUgKSB7XG5cblx0XHRjb25zdCB7IGl0ZW1TaXplLCBub3JtYWxpemVkIH0gPSBnZW9tZXRyeUF0dHJpYnV0ZTtcblx0XHRjb25zdCBBcnJheVR5cGUgPSBnZW9tZXRyeUF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvcjtcblx0XHRjb25zdCBBdHRyaWJ1dGVUeXBlID0gZ2VvbWV0cnlBdHRyaWJ1dGUuY29uc3RydWN0b3I7XG5cblx0XHRsZXQgZm9ybWF0O1xuXG5cdFx0aWYgKCBpdGVtU2l6ZSA9PT0gMSApIHtcblxuXHRcdFx0Zm9ybWF0ID0gdHlwZUFycmF5c1RvVmVydGV4Rm9ybWF0UHJlZml4Rm9ySXRlbVNpemUxLmdldCggQXJyYXlUeXBlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBwcmVmaXhPcHRpb25zID0gdHlwZWRBdHRyaWJ1dGVUb1ZlcnRleEZvcm1hdFByZWZpeC5nZXQoIEF0dHJpYnV0ZVR5cGUgKSB8fCB0eXBlZEFycmF5c1RvVmVydGV4Rm9ybWF0UHJlZml4LmdldCggQXJyYXlUeXBlICk7XG5cdFx0XHRjb25zdCBwcmVmaXggPSBwcmVmaXhPcHRpb25zWyBub3JtYWxpemVkID8gMSA6IDAgXTtcblxuXHRcdFx0aWYgKCBwcmVmaXggKSB7XG5cblx0XHRcdFx0Y29uc3QgYnl0ZXNQZXJVbml0ID0gQXJyYXlUeXBlLkJZVEVTX1BFUl9FTEVNRU5UICogaXRlbVNpemU7XG5cdFx0XHRcdGNvbnN0IHBhZGRlZEJ5dGVzUGVyVW5pdCA9IE1hdGguZmxvb3IoICggYnl0ZXNQZXJVbml0ICsgMyApIC8gNCApICogNDtcblx0XHRcdFx0Y29uc3QgcGFkZGVkSXRlbVNpemUgPSBwYWRkZWRCeXRlc1BlclVuaXQgLyBBcnJheVR5cGUuQllURVNfUEVSX0VMRU1FTlQ7XG5cblx0XHRcdFx0aWYgKCBwYWRkZWRJdGVtU2l6ZSAlIDEgKSB7XG5cblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHUFVBdHRyaWJ1dGVVdGlsczogQmFkIHZlcnRleCBmb3JtYXQgaXRlbSBzaXplLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9ybWF0ID0gYCR7cHJlZml4fXgke3BhZGRlZEl0ZW1TaXplfWA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggISBmb3JtYXQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHUFVBdHRyaWJ1dGVVdGlsczogVmVydGV4IGZvcm1hdCBub3Qgc3VwcG9ydGVkIHlldC4nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZm9ybWF0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGFycmF5IGlzIGEgdHlwZWQgYXJyYXkuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7YW55fSBhcnJheSAtIFRoZSBhcnJheS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gYXJyYXkgaXMgYSB0eXBlZCBhcnJheSBvciBub3QuXG5cdCAqL1xuXHRfaXNUeXBlZEFycmF5KCBhcnJheSApIHtcblxuXHRcdHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoIGFycmF5ICkgJiYgISAoIGFycmF5IGluc3RhbmNlb2YgRGF0YVZpZXcgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFV0aWxpdHkgbWV0aG9kIGZvciBoYW5kbGluZyBpbnRlcmxlYXZlZCBidWZmZXIgYXR0cmlidXRlcyBjb3JyZWN0bHkuXG5cdCAqIFRvIHByb2Nlc3MgdGhlbSwgdGhlaXIgYEludGVybGVhdmVkQnVmZmVyYCBpcyByZXR1cm5lZC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZXxJbnRlcmxlYXZlZEJ1ZmZlcn1cblx0ICovXG5cdF9nZXRCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdHJldHVybiBhdHRyaWJ1dGU7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYkdQVUF0dHJpYnV0ZVV0aWxzO1xuIiwiaW1wb3J0IHtcblx0R1BVVGV4dHVyZUFzcGVjdCwgR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24sIEdQVVRleHR1cmVTYW1wbGVUeXBlLCBHUFVCdWZmZXJCaW5kaW5nVHlwZSwgR1BVU3RvcmFnZVRleHR1cmVBY2Nlc3Ncbn0gZnJvbSAnLi9XZWJHUFVDb25zdGFudHMuanMnO1xuXG5pbXBvcnQgeyBGbG9hdFR5cGUsIEludFR5cGUsIFVuc2lnbmVkSW50VHlwZSB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBOb2RlQWNjZXNzIH0gZnJvbSAnLi4vLi4vLi4vbm9kZXMvY29yZS9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIEEgV2ViR1BVIGJhY2tlbmQgdXRpbGl0eSBtb2R1bGUgZm9yIG1hbmFnaW5nIGJpbmRpbmdzLlxuICpcbiAqIFdoZW4gcmVhZGluZyB0aGUgZG9jdW1lbnRhdGlvbiBpdCdzIGhlbHBmdWwgdG8ga2VlcCBpbiBtaW5kIHRoYXRcbiAqIGFsbCBjbGFzcyBkZWZpbml0aW9ucyBzdGFydGluZyB3aXRoICdHUFUqJyBhcmUgbW9kdWxlcyBmcm9tIHRoZVxuICogV2ViR1BVIEFQSS4gU28gZm9yIGV4YW1wbGUgYEJpbmRHcm91cGAgaXMgYSBjbGFzcyBmcm9tIHRoZSBlbmdpbmVcbiAqIHdoZXJlYXMgYEdQVUJpbmRHcm91cGAgaXMgYSBjbGFzcyBmcm9tIFdlYkdQVS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBXZWJHUFVCaW5kaW5nVXRpbHMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHV0aWxpdHkgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdQVUJhY2tlbmR9IGJhY2tlbmQgLSBUaGUgV2ViR1BVIGJhY2tlbmQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYmFja2VuZCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBXZWJHUFUgYmFja2VuZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHUFVCYWNrZW5kfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG5cblx0XHQvKipcblx0XHQgKiBBIGNhY2hlIGZvciBtYW5hZ2luZyBiaW5kIGdyb3VwIGxheW91dHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2Vha01hcDxBcnJheTxCaW5kaW5nPixHUFVCaW5kR3JvdXBMYXlvdXQ+fVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZEdyb3VwTGF5b3V0Q2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIEdQVSBiaW5kIGdyb3VwIGxheW91dCBmb3IgdGhlIGdpdmVuIGJpbmQgZ3JvdXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QmluZEdyb3VwfSBiaW5kR3JvdXAgLSBUaGUgYmluZCBncm91cC5cblx0ICogQHJldHVybiB7R1BVQmluZEdyb3VwTGF5b3V0fSBUaGUgR1BVIGJpbmQgZ3JvdXAgbGF5b3V0LlxuXHQgKi9cblx0Y3JlYXRlQmluZGluZ3NMYXlvdXQoIGJpbmRHcm91cCApIHtcblxuXHRcdGNvbnN0IGJhY2tlbmQgPSB0aGlzLmJhY2tlbmQ7XG5cdFx0Y29uc3QgZGV2aWNlID0gYmFja2VuZC5kZXZpY2U7XG5cblx0XHRjb25zdCBlbnRyaWVzID0gW107XG5cblx0XHRsZXQgaW5kZXggPSAwO1xuXG5cdFx0Zm9yICggY29uc3QgYmluZGluZyBvZiBiaW5kR3JvdXAuYmluZGluZ3MgKSB7XG5cblx0XHRcdGNvbnN0IGJpbmRpbmdHUFUgPSB7XG5cdFx0XHRcdGJpbmRpbmc6IGluZGV4ICsrLFxuXHRcdFx0XHR2aXNpYmlsaXR5OiBiaW5kaW5nLnZpc2liaWxpdHlcblx0XHRcdH07XG5cblx0XHRcdGlmICggYmluZGluZy5pc1VuaWZvcm1CdWZmZXIgfHwgYmluZGluZy5pc1N0b3JhZ2VCdWZmZXIgKSB7XG5cblx0XHRcdFx0Y29uc3QgYnVmZmVyID0ge307IC8vIEdQVUJ1ZmZlckJpbmRpbmdMYXlvdXRcblxuXHRcdFx0XHRpZiAoIGJpbmRpbmcuaXNTdG9yYWdlQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nLnZpc2liaWxpdHkgJiA0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBjb21wdXRlXG5cblx0XHRcdFx0XHRcdGlmICggYmluZGluZy5hY2Nlc3MgPT09IE5vZGVBY2Nlc3MuUkVBRF9XUklURSB8fCBiaW5kaW5nLmFjY2VzcyA9PT0gTm9kZUFjY2Vzcy5XUklURV9PTkxZICkge1xuXG5cdFx0XHRcdFx0XHRcdGJ1ZmZlci50eXBlID0gR1BVQnVmZmVyQmluZGluZ1R5cGUuU3RvcmFnZTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRidWZmZXIudHlwZSA9IEdQVUJ1ZmZlckJpbmRpbmdUeXBlLlJlYWRPbmx5U3RvcmFnZTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0YnVmZmVyLnR5cGUgPSBHUFVCdWZmZXJCaW5kaW5nVHlwZS5SZWFkT25seVN0b3JhZ2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJpbmRpbmdHUFUuYnVmZmVyID0gYnVmZmVyO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBiaW5kaW5nLmlzU2FtcGxlciApIHtcblxuXHRcdFx0XHRjb25zdCBzYW1wbGVyID0ge307IC8vIEdQVVNhbXBsZXJCaW5kaW5nTGF5b3V0XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nLnRleHR1cmUuaXNEZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGJpbmRpbmcudGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdHNhbXBsZXIudHlwZSA9ICdjb21wYXJpc29uJztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmluZGluZ0dQVS5zYW1wbGVyID0gc2FtcGxlcjtcblxuXHRcdFx0fSBlbHNlIGlmICggYmluZGluZy5pc1NhbXBsZWRUZXh0dXJlICYmIGJpbmRpbmcudGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApIHtcblxuXHRcdFx0XHRiaW5kaW5nR1BVLmV4dGVybmFsVGV4dHVyZSA9IHt9OyAvLyBHUFVFeHRlcm5hbFRleHR1cmVCaW5kaW5nTGF5b3V0XG5cblx0XHRcdH0gZWxzZSBpZiAoIGJpbmRpbmcuaXNTYW1wbGVkVGV4dHVyZSAmJiBiaW5kaW5nLnN0b3JlICkge1xuXG5cdFx0XHRcdGNvbnN0IHN0b3JhZ2VUZXh0dXJlID0ge307IC8vIEdQVVN0b3JhZ2VUZXh0dXJlQmluZGluZ0xheW91dFxuXHRcdFx0XHRzdG9yYWdlVGV4dHVyZS5mb3JtYXQgPSB0aGlzLmJhY2tlbmQuZ2V0KCBiaW5kaW5nLnRleHR1cmUgKS50ZXh0dXJlLmZvcm1hdDtcblxuXHRcdFx0XHRjb25zdCBhY2Nlc3MgPSBiaW5kaW5nLmFjY2VzcztcblxuXHRcdFx0XHRpZiAoIGFjY2VzcyA9PT0gTm9kZUFjY2Vzcy5SRUFEX1dSSVRFICkge1xuXG5cdFx0XHRcdFx0c3RvcmFnZVRleHR1cmUuYWNjZXNzID0gR1BVU3RvcmFnZVRleHR1cmVBY2Nlc3MuUmVhZFdyaXRlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGFjY2VzcyA9PT0gTm9kZUFjY2Vzcy5XUklURV9PTkxZICkge1xuXG5cdFx0XHRcdFx0c3RvcmFnZVRleHR1cmUuYWNjZXNzID0gR1BVU3RvcmFnZVRleHR1cmVBY2Nlc3MuV3JpdGVPbmx5O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdG9yYWdlVGV4dHVyZS5hY2Nlc3MgPSBHUFVTdG9yYWdlVGV4dHVyZUFjY2Vzcy5SZWFkT25seTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YmluZGluZ0dQVS5zdG9yYWdlVGV4dHVyZSA9IHN0b3JhZ2VUZXh0dXJlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBiaW5kaW5nLmlzU2FtcGxlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IHt9OyAvLyBHUFVUZXh0dXJlQmluZGluZ0xheW91dFxuXG5cdFx0XHRcdGNvbnN0IHsgcHJpbWFyeVNhbXBsZXMgfSA9IGJhY2tlbmQudXRpbHMuZ2V0VGV4dHVyZVNhbXBsZURhdGEoIGJpbmRpbmcudGV4dHVyZSApO1xuXG5cdFx0XHRcdGlmICggcHJpbWFyeVNhbXBsZXMgPiAxICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5tdWx0aXNhbXBsZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0aWYgKCAhIGJpbmRpbmcudGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdFx0dGV4dHVyZS5zYW1wbGVUeXBlID0gR1BVVGV4dHVyZVNhbXBsZVR5cGUuVW5maWx0ZXJhYmxlRmxvYXQ7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggYmluZGluZy50ZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5zYW1wbGVUeXBlID0gR1BVVGV4dHVyZVNhbXBsZVR5cGUuRGVwdGg7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggYmluZGluZy50ZXh0dXJlLmlzRGF0YVRleHR1cmUgfHwgYmluZGluZy50ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCBiaW5kaW5nLnRleHR1cmUuaXNEYXRhM0RUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdHlwZSA9IGJpbmRpbmcudGV4dHVyZS50eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCB0eXBlID09PSBJbnRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlLnNhbXBsZVR5cGUgPSBHUFVUZXh0dXJlU2FtcGxlVHlwZS5TSW50O1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlLnNhbXBsZVR5cGUgPSBHUFVUZXh0dXJlU2FtcGxlVHlwZS5VSW50O1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gRmxvYXRUeXBlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRoaXMuYmFja2VuZC5oYXNGZWF0dXJlKCAnZmxvYXQzMi1maWx0ZXJhYmxlJyApICkge1xuXG5cdFx0XHRcdFx0XHRcdHRleHR1cmUuc2FtcGxlVHlwZSA9IEdQVVRleHR1cmVTYW1wbGVUeXBlLkZsb2F0O1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHRleHR1cmUuc2FtcGxlVHlwZSA9IEdQVVRleHR1cmVTYW1wbGVUeXBlLlVuZmlsdGVyYWJsZUZsb2F0O1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggYmluZGluZy5pc1NhbXBsZWRDdWJlVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUudmlld0RpbWVuc2lvbiA9IEdQVVRleHR1cmVWaWV3RGltZW5zaW9uLkN1YmU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggYmluZGluZy50ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCBiaW5kaW5nLnRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS52aWV3RGltZW5zaW9uID0gR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24uVHdvREFycmF5O1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGJpbmRpbmcuaXNTYW1wbGVkVGV4dHVyZTNEICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS52aWV3RGltZW5zaW9uID0gR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24uVGhyZWVEO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiaW5kaW5nR1BVLnRleHR1cmUgPSB0ZXh0dXJlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoIGBXZWJHUFVCaW5kaW5nVXRpbHM6IFVuc3VwcG9ydGVkIGJpbmRpbmcgXCIkeyBiaW5kaW5nIH1cIi5gICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZW50cmllcy5wdXNoKCBiaW5kaW5nR1BVICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cExheW91dCggeyBlbnRyaWVzIH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYmluZGluZ3MgZnJvbSB0aGUgZ2l2ZW4gYmluZCBncm91cCBkZWZpbml0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JpbmRHcm91cH0gYmluZEdyb3VwIC0gVGhlIGJpbmQgZ3JvdXAuXG5cdCAqIEBwYXJhbSB7QXJyYXk8QmluZEdyb3VwPn0gYmluZGluZ3MgLSBBcnJheSBvZiBiaW5kIGdyb3Vwcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGNhY2hlSW5kZXggLSBUaGUgY2FjaGUgaW5kZXguXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2ZXJzaW9uIC0gVGhlIHZlcnNpb24uXG5cdCAqL1xuXHRjcmVhdGVCaW5kaW5ncyggYmluZEdyb3VwLCBiaW5kaW5ncywgY2FjaGVJbmRleCwgdmVyc2lvbiA9IDAgKSB7XG5cblx0XHRjb25zdCB7IGJhY2tlbmQsIGJpbmRHcm91cExheW91dENhY2hlIH0gPSB0aGlzO1xuXHRcdGNvbnN0IGJpbmRpbmdzRGF0YSA9IGJhY2tlbmQuZ2V0KCBiaW5kR3JvdXAgKTtcblxuXHRcdC8vIHNldHVwIChzdGF0aWMpIGJpbmRpbmcgbGF5b3V0IGFuZCAoZHluYW1pYykgYmluZGluZyBncm91cFxuXG5cdFx0bGV0IGJpbmRMYXlvdXRHUFUgPSBiaW5kR3JvdXBMYXlvdXRDYWNoZS5nZXQoIGJpbmRHcm91cC5iaW5kaW5nc1JlZmVyZW5jZSApO1xuXG5cdFx0aWYgKCBiaW5kTGF5b3V0R1BVID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJpbmRMYXlvdXRHUFUgPSB0aGlzLmNyZWF0ZUJpbmRpbmdzTGF5b3V0KCBiaW5kR3JvdXAgKTtcblx0XHRcdGJpbmRHcm91cExheW91dENhY2hlLnNldCggYmluZEdyb3VwLmJpbmRpbmdzUmVmZXJlbmNlLCBiaW5kTGF5b3V0R1BVICk7XG5cblx0XHR9XG5cblx0XHRsZXQgYmluZEdyb3VwR1BVO1xuXG5cdFx0aWYgKCBjYWNoZUluZGV4ID4gMCApIHtcblxuXHRcdFx0aWYgKCBiaW5kaW5nc0RhdGEuZ3JvdXBzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YmluZGluZ3NEYXRhLmdyb3VwcyA9IFtdO1xuXHRcdFx0XHRiaW5kaW5nc0RhdGEudmVyc2lvbnMgPSBbXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJpbmRpbmdzRGF0YS52ZXJzaW9uc1sgY2FjaGVJbmRleCBdID09PSB2ZXJzaW9uICkge1xuXG5cdFx0XHRcdGJpbmRHcm91cEdQVSA9IGJpbmRpbmdzRGF0YS5ncm91cHNbIGNhY2hlSW5kZXggXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBiaW5kR3JvdXBHUFUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YmluZEdyb3VwR1BVID0gdGhpcy5jcmVhdGVCaW5kR3JvdXAoIGJpbmRHcm91cCwgYmluZExheW91dEdQVSApO1xuXG5cdFx0XHRpZiAoIGNhY2hlSW5kZXggPiAwICkge1xuXG5cdFx0XHRcdGJpbmRpbmdzRGF0YS5ncm91cHNbIGNhY2hlSW5kZXggXSA9IGJpbmRHcm91cEdQVTtcblx0XHRcdFx0YmluZGluZ3NEYXRhLnZlcnNpb25zWyBjYWNoZUluZGV4IF0gPSB2ZXJzaW9uO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRiaW5kaW5nc0RhdGEuZ3JvdXAgPSBiaW5kR3JvdXBHUFU7XG5cdFx0YmluZGluZ3NEYXRhLmxheW91dCA9IGJpbmRMYXlvdXRHUFU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGEgYnVmZmVyIGJpbmRpbmcuXG5cdCAqXG5cdCAqICBAcGFyYW0ge0J1ZmZlcn0gYmluZGluZyAtIFRoZSBidWZmZXIgYmluZGluZyB0byB1cGRhdGUuXG5cdCAqL1xuXHR1cGRhdGVCaW5kaW5nKCBiaW5kaW5nICkge1xuXG5cdFx0Y29uc3QgYmFja2VuZCA9IHRoaXMuYmFja2VuZDtcblx0XHRjb25zdCBkZXZpY2UgPSBiYWNrZW5kLmRldmljZTtcblxuXHRcdGNvbnN0IGJ1ZmZlciA9IGJpbmRpbmcuYnVmZmVyO1xuXHRcdGNvbnN0IGJ1ZmZlckdQVSA9IGJhY2tlbmQuZ2V0KCBiaW5kaW5nICkuYnVmZmVyO1xuXG5cdFx0ZGV2aWNlLnF1ZXVlLndyaXRlQnVmZmVyKCBidWZmZXJHUFUsIDAsIGJ1ZmZlciwgMCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIEdQVSBiaW5kIGdyb3VwIGZvciB0aGUgY2FtZXJhIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1VpbnQzMkFycmF5fSBkYXRhIC0gVGhlIGluZGV4IGRhdGEuXG5cdCAqIEBwYXJhbSB7R1BVQmluZEdyb3VwTGF5b3V0fSBsYXlvdXQgLSBUaGUgR1BVIGJpbmQgZ3JvdXAgbGF5b3V0LlxuXHQgKiBAcmV0dXJuIHtHUFVCaW5kR3JvdXB9IFRoZSBHUFUgYmluZCBncm91cC5cblx0ICovXG5cdGNyZWF0ZUJpbmRHcm91cEluZGV4KCBkYXRhLCBsYXlvdXQgKSB7XG5cblx0XHRjb25zdCBiYWNrZW5kID0gdGhpcy5iYWNrZW5kO1xuXHRcdGNvbnN0IGRldmljZSA9IGJhY2tlbmQuZGV2aWNlO1xuXG5cdFx0Y29uc3QgdXNhZ2UgPSBHUFVCdWZmZXJVc2FnZS5VTklGT1JNIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1Q7XG5cdFx0Y29uc3QgaW5kZXggPSBkYXRhWyAwIF07XG5cblx0XHRjb25zdCBidWZmZXIgPSBkZXZpY2UuY3JlYXRlQnVmZmVyKCB7XG5cdFx0XHRsYWJlbDogJ2JpbmRpbmdDYW1lcmFJbmRleF8nICsgaW5kZXgsXG5cdFx0XHRzaXplOiAxNiwgLy8gdWludCg0KSAqIDRcblx0XHRcdHVzYWdlOiB1c2FnZVxuXHRcdH0gKTtcblxuXHRcdGRldmljZS5xdWV1ZS53cml0ZUJ1ZmZlciggYnVmZmVyLCAwLCBkYXRhLCAwICk7XG5cblx0XHRjb25zdCBlbnRyaWVzID0gWyB7IGJpbmRpbmc6IDAsIHJlc291cmNlOiB7IGJ1ZmZlciB9IH0gXTtcblxuXHRcdHJldHVybiBkZXZpY2UuY3JlYXRlQmluZEdyb3VwKCB7XG5cdFx0XHRsYWJlbDogJ2JpbmRHcm91cENhbWVyYUluZGV4XycgKyBpbmRleCxcblx0XHRcdGxheW91dCxcblx0XHRcdGVudHJpZXNcblx0XHR9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgR1BVIGJpbmQgZ3JvdXAgZm9yIHRoZSBnaXZlbiBiaW5kIGdyb3VwIGFuZCBHUFUgbGF5b3V0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JpbmRHcm91cH0gYmluZEdyb3VwIC0gVGhlIGJpbmQgZ3JvdXAuXG5cdCAqIEBwYXJhbSB7R1BVQmluZEdyb3VwTGF5b3V0fSBsYXlvdXRHUFUgLSBUaGUgR1BVIGJpbmQgZ3JvdXAgbGF5b3V0LlxuXHQgKiBAcmV0dXJuIHtHUFVCaW5kR3JvdXB9IFRoZSBHUFUgYmluZCBncm91cC5cblx0ICovXG5cdGNyZWF0ZUJpbmRHcm91cCggYmluZEdyb3VwLCBsYXlvdXRHUFUgKSB7XG5cblx0XHRjb25zdCBiYWNrZW5kID0gdGhpcy5iYWNrZW5kO1xuXHRcdGNvbnN0IGRldmljZSA9IGJhY2tlbmQuZGV2aWNlO1xuXG5cdFx0bGV0IGJpbmRpbmdQb2ludCA9IDA7XG5cdFx0Y29uc3QgZW50cmllc0dQVSA9IFtdO1xuXG5cdFx0Zm9yICggY29uc3QgYmluZGluZyBvZiBiaW5kR3JvdXAuYmluZGluZ3MgKSB7XG5cblx0XHRcdGlmICggYmluZGluZy5pc1VuaWZvcm1CdWZmZXIgKSB7XG5cblx0XHRcdFx0Y29uc3QgYmluZGluZ0RhdGEgPSBiYWNrZW5kLmdldCggYmluZGluZyApO1xuXG5cdFx0XHRcdGlmICggYmluZGluZ0RhdGEuYnVmZmVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBieXRlTGVuZ3RoID0gYmluZGluZy5ieXRlTGVuZ3RoO1xuXG5cdFx0XHRcdFx0Y29uc3QgdXNhZ2UgPSBHUFVCdWZmZXJVc2FnZS5VTklGT1JNIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1Q7XG5cblx0XHRcdFx0XHRjb25zdCBidWZmZXJHUFUgPSBkZXZpY2UuY3JlYXRlQnVmZmVyKCB7XG5cdFx0XHRcdFx0XHRsYWJlbDogJ2JpbmRpbmdCdWZmZXJfJyArIGJpbmRpbmcubmFtZSxcblx0XHRcdFx0XHRcdHNpemU6IGJ5dGVMZW5ndGgsXG5cdFx0XHRcdFx0XHR1c2FnZTogdXNhZ2Vcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRiaW5kaW5nRGF0YS5idWZmZXIgPSBidWZmZXJHUFU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVudHJpZXNHUFUucHVzaCggeyBiaW5kaW5nOiBiaW5kaW5nUG9pbnQsIHJlc291cmNlOiB7IGJ1ZmZlcjogYmluZGluZ0RhdGEuYnVmZmVyIH0gfSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBiaW5kaW5nLmlzU3RvcmFnZUJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCBiaW5kaW5nRGF0YSA9IGJhY2tlbmQuZ2V0KCBiaW5kaW5nICk7XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nRGF0YS5idWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGJpbmRpbmcuYXR0cmlidXRlO1xuXHRcdFx0XHRcdC8vY29uc3QgdXNhZ2UgPSBHUFVCdWZmZXJVc2FnZS5TVE9SQUdFIHwgR1BVQnVmZmVyVXNhZ2UuVkVSVEVYIHwgLypHUFVCdWZmZXJVc2FnZS5DT1BZX1NSQyB8Ki8gR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1Q7XG5cblx0XHRcdFx0XHQvL2JhY2tlbmQuYXR0cmlidXRlVXRpbHMuY3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIHVzYWdlICk7IC8vIEBUT0RPOiBNb3ZlIGl0IHRvIHVuaXZlcnNhbCByZW5kZXJlclxuXG5cdFx0XHRcdFx0YmluZGluZ0RhdGEuYnVmZmVyID0gYmFja2VuZC5nZXQoIGF0dHJpYnV0ZSApLmJ1ZmZlcjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZW50cmllc0dQVS5wdXNoKCB7IGJpbmRpbmc6IGJpbmRpbmdQb2ludCwgcmVzb3VyY2U6IHsgYnVmZmVyOiBiaW5kaW5nRGF0YS5idWZmZXIgfSB9ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGJpbmRpbmcuaXNTYW1wbGVyICkge1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVHUFUgPSBiYWNrZW5kLmdldCggYmluZGluZy50ZXh0dXJlICk7XG5cblx0XHRcdFx0ZW50cmllc0dQVS5wdXNoKCB7IGJpbmRpbmc6IGJpbmRpbmdQb2ludCwgcmVzb3VyY2U6IHRleHR1cmVHUFUuc2FtcGxlciB9ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGJpbmRpbmcuaXNTYW1wbGVkVGV4dHVyZSApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlRGF0YSA9IGJhY2tlbmQuZ2V0KCBiaW5kaW5nLnRleHR1cmUgKTtcblxuXHRcdFx0XHRsZXQgcmVzb3VyY2VHUFU7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlRGF0YS5leHRlcm5hbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHJlc291cmNlR1BVID0gZGV2aWNlLmltcG9ydEV4dGVybmFsVGV4dHVyZSggeyBzb3VyY2U6IHRleHR1cmVEYXRhLmV4dGVybmFsVGV4dHVyZSB9ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnN0IG1pcExldmVsQ291bnQgPSBiaW5kaW5nLnN0b3JlID8gMSA6IHRleHR1cmVEYXRhLnRleHR1cmUubWlwTGV2ZWxDb3VudDtcblx0XHRcdFx0XHRjb25zdCBwcm9wZXJ0eU5hbWUgPSBgdmlldy0keyB0ZXh0dXJlRGF0YS50ZXh0dXJlLndpZHRoIH0tJHsgdGV4dHVyZURhdGEudGV4dHVyZS5oZWlnaHQgfS0keyBtaXBMZXZlbENvdW50IH1gO1xuXG5cdFx0XHRcdFx0cmVzb3VyY2VHUFUgPSB0ZXh0dXJlRGF0YVsgcHJvcGVydHlOYW1lIF07XG5cblx0XHRcdFx0XHRpZiAoIHJlc291cmNlR1BVID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGFzcGVjdEdQVSA9IEdQVVRleHR1cmVBc3BlY3QuQWxsO1xuXG5cdFx0XHRcdFx0XHRsZXQgZGltZW5zaW9uVmlld0dQVTtcblxuXHRcdFx0XHRcdFx0aWYgKCBiaW5kaW5nLmlzU2FtcGxlZEN1YmVUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRcdGRpbWVuc2lvblZpZXdHUFUgPSBHUFVUZXh0dXJlVmlld0RpbWVuc2lvbi5DdWJlO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBiaW5kaW5nLmlzU2FtcGxlZFRleHR1cmUzRCApIHtcblxuXHRcdFx0XHRcdFx0XHRkaW1lbnNpb25WaWV3R1BVID0gR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24uVGhyZWVEO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBiaW5kaW5nLnRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlIHx8IGJpbmRpbmcudGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdFx0ZGltZW5zaW9uVmlld0dQVSA9IEdQVVRleHR1cmVWaWV3RGltZW5zaW9uLlR3b0RBcnJheTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRkaW1lbnNpb25WaWV3R1BVID0gR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24uVHdvRDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXNvdXJjZUdQVSA9IHRleHR1cmVEYXRhWyBwcm9wZXJ0eU5hbWUgXSA9IHRleHR1cmVEYXRhLnRleHR1cmUuY3JlYXRlVmlldyggeyBhc3BlY3Q6IGFzcGVjdEdQVSwgZGltZW5zaW9uOiBkaW1lbnNpb25WaWV3R1BVLCBtaXBMZXZlbENvdW50IH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZW50cmllc0dQVS5wdXNoKCB7IGJpbmRpbmc6IGJpbmRpbmdQb2ludCwgcmVzb3VyY2U6IHJlc291cmNlR1BVIH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRiaW5kaW5nUG9pbnQgKys7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cCgge1xuXHRcdFx0bGFiZWw6ICdiaW5kR3JvdXBfJyArIGJpbmRHcm91cC5uYW1lLFxuXHRcdFx0bGF5b3V0OiBsYXlvdXRHUFUsXG5cdFx0XHRlbnRyaWVzOiBlbnRyaWVzR1BVXG5cdFx0fSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBXZWJHUFVCaW5kaW5nVXRpbHM7XG4iLCJpbXBvcnQgeyBCbGVuZENvbG9yRmFjdG9yLCBPbmVNaW51c0JsZW5kQ29sb3JGYWN0b3IsIH0gZnJvbSAnLi4vLi4vY29tbW9uL0NvbnN0YW50cy5qcyc7XG5cbmltcG9ydCB7XG5cdEdQVUZyb250RmFjZSwgR1BVQ3VsbE1vZGUsIEdQVUNvbG9yV3JpdGVGbGFncywgR1BVQ29tcGFyZUZ1bmN0aW9uLCBHUFVCbGVuZEZhY3RvciwgR1BVQmxlbmRPcGVyYXRpb24sIEdQVUluZGV4Rm9ybWF0LCBHUFVTdGVuY2lsT3BlcmF0aW9uXG59IGZyb20gJy4vV2ViR1BVQ29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHtcblx0RnJvbnRTaWRlLCBCYWNrU2lkZSwgRG91YmxlU2lkZSxcblx0TmV2ZXJEZXB0aCwgQWx3YXlzRGVwdGgsIExlc3NEZXB0aCwgTGVzc0VxdWFsRGVwdGgsIEVxdWFsRGVwdGgsIEdyZWF0ZXJFcXVhbERlcHRoLCBHcmVhdGVyRGVwdGgsIE5vdEVxdWFsRGVwdGgsXG5cdE5vQmxlbmRpbmcsIE5vcm1hbEJsZW5kaW5nLCBBZGRpdGl2ZUJsZW5kaW5nLCBTdWJ0cmFjdGl2ZUJsZW5kaW5nLCBNdWx0aXBseUJsZW5kaW5nLCBDdXN0b21CbGVuZGluZyxcblx0WmVyb0ZhY3RvciwgT25lRmFjdG9yLCBTcmNDb2xvckZhY3RvciwgT25lTWludXNTcmNDb2xvckZhY3RvciwgU3JjQWxwaGFGYWN0b3IsIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsIERzdENvbG9yRmFjdG9yLFxuXHRPbmVNaW51c0RzdENvbG9yRmFjdG9yLCBEc3RBbHBoYUZhY3RvciwgT25lTWludXNEc3RBbHBoYUZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3Rvcixcblx0QWRkRXF1YXRpb24sIFN1YnRyYWN0RXF1YXRpb24sIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uLCBNaW5FcXVhdGlvbiwgTWF4RXF1YXRpb24sXG5cdEtlZXBTdGVuY2lsT3AsIFplcm9TdGVuY2lsT3AsIFJlcGxhY2VTdGVuY2lsT3AsIEludmVydFN0ZW5jaWxPcCwgSW5jcmVtZW50U3RlbmNpbE9wLCBEZWNyZW1lbnRTdGVuY2lsT3AsIEluY3JlbWVudFdyYXBTdGVuY2lsT3AsIERlY3JlbWVudFdyYXBTdGVuY2lsT3AsXG5cdE5ldmVyU3RlbmNpbEZ1bmMsIEFsd2F5c1N0ZW5jaWxGdW5jLCBMZXNzU3RlbmNpbEZ1bmMsIExlc3NFcXVhbFN0ZW5jaWxGdW5jLCBFcXVhbFN0ZW5jaWxGdW5jLCBHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYywgR3JlYXRlclN0ZW5jaWxGdW5jLCBOb3RFcXVhbFN0ZW5jaWxGdW5jXG59IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5cbi8qKlxuICogQSBXZWJHUFUgYmFja2VuZCB1dGlsaXR5IG1vZHVsZSBmb3IgbWFuYWdpbmcgcGlwZWxpbmVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFdlYkdQVVBpcGVsaW5lVXRpbHMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHV0aWxpdHkgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdQVUJhY2tlbmR9IGJhY2tlbmQgLSBUaGUgV2ViR1BVIGJhY2tlbmQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYmFja2VuZCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBXZWJHUFUgYmFja2VuZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHUFVCYWNrZW5kfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2VuZCA9IGJhY2tlbmQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzYW1wbGUgY291bnQgZGVyaXZlZCBmcm9tIHRoZSBnaXZlbiByZW5kZXIgY29udGV4dC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzYW1wbGUgY291bnQuXG5cdCAqL1xuXHRfZ2V0U2FtcGxlQ291bnQoIHJlbmRlckNvbnRleHQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5iYWNrZW5kLnV0aWxzLmdldFNhbXBsZUNvdW50UmVuZGVyQ29udGV4dCggcmVuZGVyQ29udGV4dCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHJlbmRlciBwaXBlbGluZSBmb3IgdGhlIGdpdmVuIHJlbmRlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICogQHBhcmFtIHtBcnJheTxQcm9taXNlPn0gcHJvbWlzZXMgLSBBbiBhcnJheSBvZiBjb21waWxhdGlvbiBwcm9taXNlcyB3aGljaCBhcmUgdXNlZCBpbiBgY29tcGlsZUFzeW5jKClgLlxuXHQgKi9cblx0Y3JlYXRlUmVuZGVyUGlwZWxpbmUoIHJlbmRlck9iamVjdCwgcHJvbWlzZXMgKSB7XG5cblx0XHRjb25zdCB7IG9iamVjdCwgbWF0ZXJpYWwsIGdlb21ldHJ5LCBwaXBlbGluZSB9ID0gcmVuZGVyT2JqZWN0O1xuXHRcdGNvbnN0IHsgdmVydGV4UHJvZ3JhbSwgZnJhZ21lbnRQcm9ncmFtIH0gPSBwaXBlbGluZTtcblxuXHRcdGNvbnN0IGJhY2tlbmQgPSB0aGlzLmJhY2tlbmQ7XG5cdFx0Y29uc3QgZGV2aWNlID0gYmFja2VuZC5kZXZpY2U7XG5cdFx0Y29uc3QgdXRpbHMgPSBiYWNrZW5kLnV0aWxzO1xuXG5cdFx0Y29uc3QgcGlwZWxpbmVEYXRhID0gYmFja2VuZC5nZXQoIHBpcGVsaW5lICk7XG5cblx0XHQvLyBiaW5kIGdyb3VwIGxheW91dHNcblxuXHRcdGNvbnN0IGJpbmRHcm91cExheW91dHMgPSBbXTtcblxuXHRcdGZvciAoIGNvbnN0IGJpbmRHcm91cCBvZiByZW5kZXJPYmplY3QuZ2V0QmluZGluZ3MoKSApIHtcblxuXHRcdFx0Y29uc3QgYmluZGluZ3NEYXRhID0gYmFja2VuZC5nZXQoIGJpbmRHcm91cCApO1xuXG5cdFx0XHRiaW5kR3JvdXBMYXlvdXRzLnB1c2goIGJpbmRpbmdzRGF0YS5sYXlvdXQgKTtcblxuXHRcdH1cblxuXHRcdC8vIHZlcnRleCBidWZmZXJzXG5cblx0XHRjb25zdCB2ZXJ0ZXhCdWZmZXJzID0gYmFja2VuZC5hdHRyaWJ1dGVVdGlscy5jcmVhdGVTaGFkZXJWZXJ0ZXhCdWZmZXJzKCByZW5kZXJPYmplY3QgKTtcblxuXHRcdC8vIGJsZW5kaW5nXG5cblx0XHRsZXQgYmxlbmRpbmc7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICYmIG1hdGVyaWFsLmJsZW5kaW5nICE9PSBOb0JsZW5kaW5nICkge1xuXG5cdFx0XHRibGVuZGluZyA9IHRoaXMuX2dldEJsZW5kaW5nKCBtYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc3RlbmNpbFxuXG5cdFx0bGV0IHN0ZW5jaWxGcm9udCA9IHt9O1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5zdGVuY2lsV3JpdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdHN0ZW5jaWxGcm9udCA9IHtcblx0XHRcdFx0Y29tcGFyZTogdGhpcy5fZ2V0U3RlbmNpbENvbXBhcmUoIG1hdGVyaWFsICksXG5cdFx0XHRcdGZhaWxPcDogdGhpcy5fZ2V0U3RlbmNpbE9wZXJhdGlvbiggbWF0ZXJpYWwuc3RlbmNpbEZhaWwgKSxcblx0XHRcdFx0ZGVwdGhGYWlsT3A6IHRoaXMuX2dldFN0ZW5jaWxPcGVyYXRpb24oIG1hdGVyaWFsLnN0ZW5jaWxaRmFpbCApLFxuXHRcdFx0XHRwYXNzT3A6IHRoaXMuX2dldFN0ZW5jaWxPcGVyYXRpb24oIG1hdGVyaWFsLnN0ZW5jaWxaUGFzcyApXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY29sb3JXcml0ZU1hc2sgPSB0aGlzLl9nZXRDb2xvcldyaXRlTWFzayggbWF0ZXJpYWwgKTtcblxuXHRcdGNvbnN0IHRhcmdldHMgPSBbXTtcblxuXHRcdGlmICggcmVuZGVyT2JqZWN0LmNvbnRleHQudGV4dHVyZXMgIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyT2JqZWN0LmNvbnRleHQudGV4dHVyZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjb2xvckZvcm1hdCA9IHV0aWxzLmdldFRleHR1cmVGb3JtYXRHUFUoIHRleHR1cmVzWyBpIF0gKTtcblxuXHRcdFx0XHR0YXJnZXRzLnB1c2goIHtcblx0XHRcdFx0XHRmb3JtYXQ6IGNvbG9yRm9ybWF0LFxuXHRcdFx0XHRcdGJsZW5kOiBibGVuZGluZyxcblx0XHRcdFx0XHR3cml0ZU1hc2s6IGNvbG9yV3JpdGVNYXNrXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgY29sb3JGb3JtYXQgPSB1dGlscy5nZXRDdXJyZW50Q29sb3JGb3JtYXQoIHJlbmRlck9iamVjdC5jb250ZXh0ICk7XG5cblx0XHRcdHRhcmdldHMucHVzaCgge1xuXHRcdFx0XHRmb3JtYXQ6IGNvbG9yRm9ybWF0LFxuXHRcdFx0XHRibGVuZDogYmxlbmRpbmcsXG5cdFx0XHRcdHdyaXRlTWFzazogY29sb3JXcml0ZU1hc2tcblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHZlcnRleE1vZHVsZSA9IGJhY2tlbmQuZ2V0KCB2ZXJ0ZXhQcm9ncmFtICkubW9kdWxlO1xuXHRcdGNvbnN0IGZyYWdtZW50TW9kdWxlID0gYmFja2VuZC5nZXQoIGZyYWdtZW50UHJvZ3JhbSApLm1vZHVsZTtcblxuXHRcdGNvbnN0IHByaW1pdGl2ZVN0YXRlID0gdGhpcy5fZ2V0UHJpbWl0aXZlU3RhdGUoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdFx0Y29uc3QgZGVwdGhDb21wYXJlID0gdGhpcy5fZ2V0RGVwdGhDb21wYXJlKCBtYXRlcmlhbCApO1xuXHRcdGNvbnN0IGRlcHRoU3RlbmNpbEZvcm1hdCA9IHV0aWxzLmdldEN1cnJlbnREZXB0aFN0ZW5jaWxGb3JtYXQoIHJlbmRlck9iamVjdC5jb250ZXh0ICk7XG5cblx0XHRjb25zdCBzYW1wbGVDb3VudCA9IHRoaXMuX2dldFNhbXBsZUNvdW50KCByZW5kZXJPYmplY3QuY29udGV4dCApO1xuXG5cdFx0Y29uc3QgcGlwZWxpbmVEZXNjcmlwdG9yID0ge1xuXHRcdFx0bGFiZWw6IGByZW5kZXJQaXBlbGluZV8keyBtYXRlcmlhbC5uYW1lIHx8IG1hdGVyaWFsLnR5cGUgfV8keyBtYXRlcmlhbC5pZCB9YCxcblx0XHRcdHZlcnRleDogT2JqZWN0LmFzc2lnbigge30sIHZlcnRleE1vZHVsZSwgeyBidWZmZXJzOiB2ZXJ0ZXhCdWZmZXJzIH0gKSxcblx0XHRcdGZyYWdtZW50OiBPYmplY3QuYXNzaWduKCB7fSwgZnJhZ21lbnRNb2R1bGUsIHsgdGFyZ2V0cyB9ICksXG5cdFx0XHRwcmltaXRpdmU6IHByaW1pdGl2ZVN0YXRlLFxuXHRcdFx0bXVsdGlzYW1wbGU6IHtcblx0XHRcdFx0Y291bnQ6IHNhbXBsZUNvdW50LFxuXHRcdFx0XHRhbHBoYVRvQ292ZXJhZ2VFbmFibGVkOiBtYXRlcmlhbC5hbHBoYVRvQ292ZXJhZ2UgJiYgc2FtcGxlQ291bnQgPiAxXG5cdFx0XHR9LFxuXHRcdFx0bGF5b3V0OiBkZXZpY2UuY3JlYXRlUGlwZWxpbmVMYXlvdXQoIHtcblx0XHRcdFx0YmluZEdyb3VwTGF5b3V0c1xuXHRcdFx0fSApXG5cdFx0fTtcblxuXG5cdFx0Y29uc3QgZGVwdGhTdGVuY2lsID0ge307XG5cdFx0Y29uc3QgcmVuZGVyRGVwdGggPSByZW5kZXJPYmplY3QuY29udGV4dC5kZXB0aDtcblx0XHRjb25zdCByZW5kZXJTdGVuY2lsID0gcmVuZGVyT2JqZWN0LmNvbnRleHQuc3RlbmNpbDtcblxuXHRcdGlmICggcmVuZGVyRGVwdGggPT09IHRydWUgfHwgcmVuZGVyU3RlbmNpbCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0aWYgKCByZW5kZXJEZXB0aCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRkZXB0aFN0ZW5jaWwuZm9ybWF0ID0gZGVwdGhTdGVuY2lsRm9ybWF0O1xuXHRcdFx0XHRkZXB0aFN0ZW5jaWwuZGVwdGhXcml0ZUVuYWJsZWQgPSBtYXRlcmlhbC5kZXB0aFdyaXRlO1xuXHRcdFx0XHRkZXB0aFN0ZW5jaWwuZGVwdGhDb21wYXJlID0gZGVwdGhDb21wYXJlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVuZGVyU3RlbmNpbCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRkZXB0aFN0ZW5jaWwuc3RlbmNpbEZyb250ID0gc3RlbmNpbEZyb250O1xuXHRcdFx0XHRkZXB0aFN0ZW5jaWwuc3RlbmNpbEJhY2sgPSB7fTsgLy8gdGhyZWUuanMgZG9lcyBub3QgcHJvdmlkZSBhbiBBUEkgdG8gY29uZmlndXJlIHRoZSBiYWNrIGZ1bmN0aW9uIChnbC5zdGVuY2lsRnVuY1NlcGFyYXRlKCkgd2FzIG5ldmVyIHVzZWQpXG5cdFx0XHRcdGRlcHRoU3RlbmNpbC5zdGVuY2lsUmVhZE1hc2sgPSBtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2s7XG5cdFx0XHRcdGRlcHRoU3RlbmNpbC5zdGVuY2lsV3JpdGVNYXNrID0gbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzaztcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0ZGVwdGhTdGVuY2lsLmRlcHRoQmlhcyA9IG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cztcblx0XHRcdFx0ZGVwdGhTdGVuY2lsLmRlcHRoQmlhc1Nsb3BlU2NhbGUgPSBtYXRlcmlhbC5wb2x5Z29uT2Zmc2V0RmFjdG9yO1xuXHRcdFx0XHRkZXB0aFN0ZW5jaWwuZGVwdGhCaWFzQ2xhbXAgPSAwOyAvLyB0aHJlZS5qcyBkb2VzIG5vdCBwcm92aWRlIGFuIEFQSSB0byBjb25maWd1cmUgdGhpcyB2YWx1ZVxuXG5cdFx0XHR9XG5cblx0XHRcdHBpcGVsaW5lRGVzY3JpcHRvci5kZXB0aFN0ZW5jaWwgPSBkZXB0aFN0ZW5jaWw7XG5cblx0XHR9XG5cblxuXHRcdGlmICggcHJvbWlzZXMgPT09IG51bGwgKSB7XG5cblx0XHRcdHBpcGVsaW5lRGF0YS5waXBlbGluZSA9IGRldmljZS5jcmVhdGVSZW5kZXJQaXBlbGluZSggcGlwZWxpbmVEZXNjcmlwdG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBwID0gbmV3IFByb21pc2UoICggcmVzb2x2ZSAvKiwgcmVqZWN0Ki8gKSA9PiB7XG5cblx0XHRcdFx0ZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lQXN5bmMoIHBpcGVsaW5lRGVzY3JpcHRvciApLnRoZW4oIHBpcGVsaW5lID0+IHtcblxuXHRcdFx0XHRcdHBpcGVsaW5lRGF0YS5waXBlbGluZSA9IHBpcGVsaW5lO1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cHJvbWlzZXMucHVzaCggcCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBHUFUgcmVuZGVyIGJ1bmRsZSBlbmNvZGVyIGZvciB0aGUgZ2l2ZW4gcmVuZGVyIGNvbnRleHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICogQHJldHVybiB7R1BVUmVuZGVyQnVuZGxlRW5jb2Rlcn0gVGhlIEdQVSByZW5kZXIgYnVuZGxlIGVuY29kZXIuXG5cdCAqL1xuXHRjcmVhdGVCdW5kbGVFbmNvZGVyKCByZW5kZXJDb250ZXh0ICkge1xuXG5cdFx0Y29uc3QgYmFja2VuZCA9IHRoaXMuYmFja2VuZDtcblx0XHRjb25zdCB7IHV0aWxzLCBkZXZpY2UgfSA9IGJhY2tlbmQ7XG5cblx0XHRjb25zdCBkZXB0aFN0ZW5jaWxGb3JtYXQgPSB1dGlscy5nZXRDdXJyZW50RGVwdGhTdGVuY2lsRm9ybWF0KCByZW5kZXJDb250ZXh0ICk7XG5cdFx0Y29uc3QgY29sb3JGb3JtYXQgPSB1dGlscy5nZXRDdXJyZW50Q29sb3JGb3JtYXQoIHJlbmRlckNvbnRleHQgKTtcblx0XHRjb25zdCBzYW1wbGVDb3VudCA9IHRoaXMuX2dldFNhbXBsZUNvdW50KCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHRjb25zdCBkZXNjcmlwdG9yID0ge1xuXHRcdFx0bGFiZWw6ICdyZW5kZXJCdW5kbGVFbmNvZGVyJyxcblx0XHRcdGNvbG9yRm9ybWF0czogWyBjb2xvckZvcm1hdCBdLFxuXHRcdFx0ZGVwdGhTdGVuY2lsRm9ybWF0LFxuXHRcdFx0c2FtcGxlQ291bnRcblx0XHR9O1xuXG5cdFx0cmV0dXJuIGRldmljZS5jcmVhdGVSZW5kZXJCdW5kbGVFbmNvZGVyKCBkZXNjcmlwdG9yICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgY29tcHV0ZSBwaXBlbGluZSBmb3IgdGhlIGdpdmVuIGNvbXB1dGUgbm9kZS5cblx0ICpcblx0ICogQHBhcmFtIHtDb21wdXRlUGlwZWxpbmV9IHBpcGVsaW5lIC0gVGhlIGNvbXB1dGUgcGlwZWxpbmUuXG5cdCAqIEBwYXJhbSB7QXJyYXk8QmluZEdyb3VwPn0gYmluZGluZ3MgLSBUaGUgYmluZGluZ3MuXG5cdCAqL1xuXHRjcmVhdGVDb21wdXRlUGlwZWxpbmUoIHBpcGVsaW5lLCBiaW5kaW5ncyApIHtcblxuXHRcdGNvbnN0IGJhY2tlbmQgPSB0aGlzLmJhY2tlbmQ7XG5cdFx0Y29uc3QgZGV2aWNlID0gYmFja2VuZC5kZXZpY2U7XG5cblx0XHRjb25zdCBjb21wdXRlUHJvZ3JhbSA9IGJhY2tlbmQuZ2V0KCBwaXBlbGluZS5jb21wdXRlUHJvZ3JhbSApLm1vZHVsZTtcblxuXHRcdGNvbnN0IHBpcGVsaW5lR1BVID0gYmFja2VuZC5nZXQoIHBpcGVsaW5lICk7XG5cblx0XHQvLyBiaW5kIGdyb3VwIGxheW91dHNcblxuXHRcdGNvbnN0IGJpbmRHcm91cExheW91dHMgPSBbXTtcblxuXHRcdGZvciAoIGNvbnN0IGJpbmRpbmdzR3JvdXAgb2YgYmluZGluZ3MgKSB7XG5cblx0XHRcdGNvbnN0IGJpbmRpbmdzRGF0YSA9IGJhY2tlbmQuZ2V0KCBiaW5kaW5nc0dyb3VwICk7XG5cblx0XHRcdGJpbmRHcm91cExheW91dHMucHVzaCggYmluZGluZ3NEYXRhLmxheW91dCApO1xuXG5cdFx0fVxuXG5cdFx0cGlwZWxpbmVHUFUucGlwZWxpbmUgPSBkZXZpY2UuY3JlYXRlQ29tcHV0ZVBpcGVsaW5lKCB7XG5cdFx0XHRjb21wdXRlOiBjb21wdXRlUHJvZ3JhbSxcblx0XHRcdGxheW91dDogZGV2aWNlLmNyZWF0ZVBpcGVsaW5lTGF5b3V0KCB7XG5cdFx0XHRcdGJpbmRHcm91cExheW91dHNcblx0XHRcdH0gKVxuXHRcdH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGJsZW5kaW5nIHN0YXRlIGFzIGEgZGVzY3JpcHRvciBvYmplY3QgcmVxdWlyZWRcblx0ICogZm9yIHRoZSBwaXBlbGluZSBjcmVhdGlvbi5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgbWF0ZXJpYWwuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIGJsZW5kaW5nIHN0YXRlLlxuXHQgKi9cblx0X2dldEJsZW5kaW5nKCBtYXRlcmlhbCApIHtcblxuXHRcdGxldCBjb2xvciwgYWxwaGE7XG5cblx0XHRjb25zdCBibGVuZGluZyA9IG1hdGVyaWFsLmJsZW5kaW5nO1xuXHRcdGNvbnN0IGJsZW5kU3JjID0gbWF0ZXJpYWwuYmxlbmRTcmM7XG5cdFx0Y29uc3QgYmxlbmREc3QgPSBtYXRlcmlhbC5ibGVuZERzdDtcblx0XHRjb25zdCBibGVuZEVxdWF0aW9uID0gbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbjtcblxuXG5cdFx0aWYgKCBibGVuZGluZyA9PT0gQ3VzdG9tQmxlbmRpbmcgKSB7XG5cblx0XHRcdGNvbnN0IGJsZW5kU3JjQWxwaGEgPSBtYXRlcmlhbC5ibGVuZFNyY0FscGhhICE9PSBudWxsID8gbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYSA6IGJsZW5kU3JjO1xuXHRcdFx0Y29uc3QgYmxlbmREc3RBbHBoYSA9IG1hdGVyaWFsLmJsZW5kRHN0QWxwaGEgIT09IG51bGwgPyBtYXRlcmlhbC5ibGVuZERzdEFscGhhIDogYmxlbmREc3Q7XG5cdFx0XHRjb25zdCBibGVuZEVxdWF0aW9uQWxwaGEgPSBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uQWxwaGEgIT09IG51bGwgPyBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uQWxwaGEgOiBibGVuZEVxdWF0aW9uO1xuXG5cdFx0XHRjb2xvciA9IHtcblx0XHRcdFx0c3JjRmFjdG9yOiB0aGlzLl9nZXRCbGVuZEZhY3RvciggYmxlbmRTcmMgKSxcblx0XHRcdFx0ZHN0RmFjdG9yOiB0aGlzLl9nZXRCbGVuZEZhY3RvciggYmxlbmREc3QgKSxcblx0XHRcdFx0b3BlcmF0aW9uOiB0aGlzLl9nZXRCbGVuZE9wZXJhdGlvbiggYmxlbmRFcXVhdGlvbiApXG5cdFx0XHR9O1xuXG5cdFx0XHRhbHBoYSA9IHtcblx0XHRcdFx0c3JjRmFjdG9yOiB0aGlzLl9nZXRCbGVuZEZhY3RvciggYmxlbmRTcmNBbHBoYSApLFxuXHRcdFx0XHRkc3RGYWN0b3I6IHRoaXMuX2dldEJsZW5kRmFjdG9yKCBibGVuZERzdEFscGhhICksXG5cdFx0XHRcdG9wZXJhdGlvbjogdGhpcy5fZ2V0QmxlbmRPcGVyYXRpb24oIGJsZW5kRXF1YXRpb25BbHBoYSApXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcHJlbXVsdGlwbGllZEFscGhhID0gbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhO1xuXG5cdFx0XHRjb25zdCBzZXRCbGVuZCA9ICggc3JjUkdCLCBkc3RSR0IsIHNyY0FscGhhLCBkc3RBbHBoYSApID0+IHtcblxuXHRcdFx0XHRjb2xvciA9IHtcblx0XHRcdFx0XHRzcmNGYWN0b3I6IHNyY1JHQixcblx0XHRcdFx0XHRkc3RGYWN0b3I6IGRzdFJHQixcblx0XHRcdFx0XHRvcGVyYXRpb246IEdQVUJsZW5kT3BlcmF0aW9uLkFkZFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGFscGhhID0ge1xuXHRcdFx0XHRcdHNyY0ZhY3Rvcjogc3JjQWxwaGEsXG5cdFx0XHRcdFx0ZHN0RmFjdG9yOiBkc3RBbHBoYSxcblx0XHRcdFx0XHRvcGVyYXRpb246IEdQVUJsZW5kT3BlcmF0aW9uLkFkZFxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdFx0XHRzd2l0Y2ggKCBibGVuZGluZyApIHtcblxuXHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRzZXRCbGVuZCggR1BVQmxlbmRGYWN0b3IuT25lLCBHUFVCbGVuZEZhY3Rvci5PbmVNaW51c1NyY0FscGhhLCBHUFVCbGVuZEZhY3Rvci5PbmUsIEdQVUJsZW5kRmFjdG9yLk9uZU1pbnVzU3JjQWxwaGEgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0c2V0QmxlbmQoIEdQVUJsZW5kRmFjdG9yLk9uZSwgR1BVQmxlbmRGYWN0b3IuT25lLCBHUFVCbGVuZEZhY3Rvci5PbmUsIEdQVUJsZW5kRmFjdG9yLk9uZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRzZXRCbGVuZCggR1BVQmxlbmRGYWN0b3IuWmVybywgR1BVQmxlbmRGYWN0b3IuT25lTWludXNTcmMsIEdQVUJsZW5kRmFjdG9yLlplcm8sIEdQVUJsZW5kRmFjdG9yLk9uZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIE11bHRpcGx5QmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRzZXRCbGVuZCggR1BVQmxlbmRGYWN0b3IuWmVybywgR1BVQmxlbmRGYWN0b3IuU3JjLCBHUFVCbGVuZEZhY3Rvci5aZXJvLCBHUFVCbGVuZEZhY3Rvci5TcmNBbHBoYSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN3aXRjaCAoIGJsZW5kaW5nICkge1xuXG5cdFx0XHRcdFx0Y2FzZSBOb3JtYWxCbGVuZGluZzpcblx0XHRcdFx0XHRcdHNldEJsZW5kKCBHUFVCbGVuZEZhY3Rvci5TcmNBbHBoYSwgR1BVQmxlbmRGYWN0b3IuT25lTWludXNTcmNBbHBoYSwgR1BVQmxlbmRGYWN0b3IuT25lLCBHUFVCbGVuZEZhY3Rvci5PbmVNaW51c1NyY0FscGhhICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgQWRkaXRpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdHNldEJsZW5kKCBHUFVCbGVuZEZhY3Rvci5TcmNBbHBoYSwgR1BVQmxlbmRGYWN0b3IuT25lLCBHUFVCbGVuZEZhY3Rvci5TcmNBbHBoYSwgR1BVQmxlbmRGYWN0b3IuT25lICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgU3VidHJhY3RpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdHNldEJsZW5kKCBHUFVCbGVuZEZhY3Rvci5aZXJvLCBHUFVCbGVuZEZhY3Rvci5PbmVNaW51c1NyYywgR1BVQmxlbmRGYWN0b3IuWmVybywgR1BVQmxlbmRGYWN0b3IuT25lICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdHNldEJsZW5kKCBHUFVCbGVuZEZhY3Rvci5aZXJvLCBHUFVCbGVuZEZhY3Rvci5TcmMsIEdQVUJsZW5kRmFjdG9yLlplcm8sIEdQVUJsZW5kRmFjdG9yLlNyYyApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGNvbG9yICE9PSB1bmRlZmluZWQgJiYgYWxwaGEgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIHsgY29sb3IsIGFscGhhIH07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR1BVUmVuZGVyZXI6IEludmFsaWQgYmxlbmRpbmc6ICcsIGJsZW5kaW5nICk7XG5cblx0XHR9XG5cblx0fVxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgR1BVIGJsZW5kIGZhY3RvciB3aGljaCBpcyByZXF1aXJlZCBmb3IgdGhlIHBpcGVsaW5lIGNyZWF0aW9uLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge251bWJlcn0gYmxlbmQgLSBUaGUgYmxlbmQgZmFjdG9yIGFzIGEgdGhyZWUuanMgY29uc3RhbnQuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEdQVSBibGVuZCBmYWN0b3IuXG5cdCAqL1xuXHRfZ2V0QmxlbmRGYWN0b3IoIGJsZW5kICkge1xuXG5cdFx0bGV0IGJsZW5kRmFjdG9yO1xuXG5cdFx0c3dpdGNoICggYmxlbmQgKSB7XG5cblx0XHRcdGNhc2UgWmVyb0ZhY3Rvcjpcblx0XHRcdFx0YmxlbmRGYWN0b3IgPSBHUFVCbGVuZEZhY3Rvci5aZXJvO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBPbmVGYWN0b3I6XG5cdFx0XHRcdGJsZW5kRmFjdG9yID0gR1BVQmxlbmRGYWN0b3IuT25lO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBTcmNDb2xvckZhY3Rvcjpcblx0XHRcdFx0YmxlbmRGYWN0b3IgPSBHUFVCbGVuZEZhY3Rvci5TcmM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3I6XG5cdFx0XHRcdGJsZW5kRmFjdG9yID0gR1BVQmxlbmRGYWN0b3IuT25lTWludXNTcmM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFNyY0FscGhhRmFjdG9yOlxuXHRcdFx0XHRibGVuZEZhY3RvciA9IEdQVUJsZW5kRmFjdG9yLlNyY0FscGhhO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBPbmVNaW51c1NyY0FscGhhRmFjdG9yOlxuXHRcdFx0XHRibGVuZEZhY3RvciA9IEdQVUJsZW5kRmFjdG9yLk9uZU1pbnVzU3JjQWxwaGE7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIERzdENvbG9yRmFjdG9yOlxuXHRcdFx0XHRibGVuZEZhY3RvciA9IEdQVUJsZW5kRmFjdG9yLkRzdDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgT25lTWludXNEc3RDb2xvckZhY3Rvcjpcblx0XHRcdFx0YmxlbmRGYWN0b3IgPSBHUFVCbGVuZEZhY3Rvci5PbmVNaW51c0RzdENvbG9yO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBEc3RBbHBoYUZhY3Rvcjpcblx0XHRcdFx0YmxlbmRGYWN0b3IgPSBHUFVCbGVuZEZhY3Rvci5Ec3RBbHBoYTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgT25lTWludXNEc3RBbHBoYUZhY3Rvcjpcblx0XHRcdFx0YmxlbmRGYWN0b3IgPSBHUFVCbGVuZEZhY3Rvci5PbmVNaW51c0RzdEFscGhhO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yOlxuXHRcdFx0XHRibGVuZEZhY3RvciA9IEdQVUJsZW5kRmFjdG9yLlNyY0FscGhhU2F0dXJhdGVkO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBCbGVuZENvbG9yRmFjdG9yOlxuXHRcdFx0XHRibGVuZEZhY3RvciA9IEdQVUJsZW5kRmFjdG9yLkNvbnN0YW50O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBPbmVNaW51c0JsZW5kQ29sb3JGYWN0b3I6XG5cdFx0XHRcdGJsZW5kRmFjdG9yID0gR1BVQmxlbmRGYWN0b3IuT25lTWludXNDb25zdGFudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHUFVSZW5kZXJlcjogQmxlbmQgZmFjdG9yIG5vdCBzdXBwb3J0ZWQuJywgYmxlbmQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBibGVuZEZhY3RvcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIEdQVSBzdGVuY2lsIGNvbXBhcmUgZnVuY3Rpb24gd2hpY2ggaXMgcmVxdWlyZWQgZm9yIHRoZSBwaXBlbGluZSBjcmVhdGlvbi5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgLSBUaGUgbWF0ZXJpYWwuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEdQVSBzdGVuY2lsIGNvbXBhcmUgZnVuY3Rpb24uXG5cdCAqL1xuXHRfZ2V0U3RlbmNpbENvbXBhcmUoIG1hdGVyaWFsICkge1xuXG5cdFx0bGV0IHN0ZW5jaWxDb21wYXJlO1xuXG5cdFx0Y29uc3Qgc3RlbmNpbEZ1bmMgPSBtYXRlcmlhbC5zdGVuY2lsRnVuYztcblxuXHRcdHN3aXRjaCAoIHN0ZW5jaWxGdW5jICkge1xuXG5cdFx0XHRjYXNlIE5ldmVyU3RlbmNpbEZ1bmM6XG5cdFx0XHRcdHN0ZW5jaWxDb21wYXJlID0gR1BVQ29tcGFyZUZ1bmN0aW9uLk5ldmVyO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBBbHdheXNTdGVuY2lsRnVuYzpcblx0XHRcdFx0c3RlbmNpbENvbXBhcmUgPSBHUFVDb21wYXJlRnVuY3Rpb24uQWx3YXlzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBMZXNzU3RlbmNpbEZ1bmM6XG5cdFx0XHRcdHN0ZW5jaWxDb21wYXJlID0gR1BVQ29tcGFyZUZ1bmN0aW9uLkxlc3M7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIExlc3NFcXVhbFN0ZW5jaWxGdW5jOlxuXHRcdFx0XHRzdGVuY2lsQ29tcGFyZSA9IEdQVUNvbXBhcmVGdW5jdGlvbi5MZXNzRXF1YWw7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEVxdWFsU3RlbmNpbEZ1bmM6XG5cdFx0XHRcdHN0ZW5jaWxDb21wYXJlID0gR1BVQ29tcGFyZUZ1bmN0aW9uLkVxdWFsO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYzpcblx0XHRcdFx0c3RlbmNpbENvbXBhcmUgPSBHUFVDb21wYXJlRnVuY3Rpb24uR3JlYXRlckVxdWFsO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBHcmVhdGVyU3RlbmNpbEZ1bmM6XG5cdFx0XHRcdHN0ZW5jaWxDb21wYXJlID0gR1BVQ29tcGFyZUZ1bmN0aW9uLkdyZWF0ZXI7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIE5vdEVxdWFsU3RlbmNpbEZ1bmM6XG5cdFx0XHRcdHN0ZW5jaWxDb21wYXJlID0gR1BVQ29tcGFyZUZ1bmN0aW9uLk5vdEVxdWFsO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdQVVJlbmRlcmVyOiBJbnZhbGlkIHN0ZW5jaWwgZnVuY3Rpb24uJywgc3RlbmNpbEZ1bmMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzdGVuY2lsQ29tcGFyZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIEdQVSBzdGVuY2lsIG9wZXJhdGlvbiB3aGljaCBpcyByZXF1aXJlZCBmb3IgdGhlIHBpcGVsaW5lIGNyZWF0aW9uLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge251bWJlcn0gb3AgLSBBIHRocmVlLmpzIGNvbnN0YW50IGRlZmluaW5nIHRoZSBzdGVuY2lsIG9wZXJhdGlvbi5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR1BVIHN0ZW5jaWwgb3BlcmF0aW9uLlxuXHQgKi9cblx0X2dldFN0ZW5jaWxPcGVyYXRpb24oIG9wICkge1xuXG5cdFx0bGV0IHN0ZW5jaWxPcGVyYXRpb247XG5cblx0XHRzd2l0Y2ggKCBvcCApIHtcblxuXHRcdFx0Y2FzZSBLZWVwU3RlbmNpbE9wOlxuXHRcdFx0XHRzdGVuY2lsT3BlcmF0aW9uID0gR1BVU3RlbmNpbE9wZXJhdGlvbi5LZWVwO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBaZXJvU3RlbmNpbE9wOlxuXHRcdFx0XHRzdGVuY2lsT3BlcmF0aW9uID0gR1BVU3RlbmNpbE9wZXJhdGlvbi5aZXJvO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSZXBsYWNlU3RlbmNpbE9wOlxuXHRcdFx0XHRzdGVuY2lsT3BlcmF0aW9uID0gR1BVU3RlbmNpbE9wZXJhdGlvbi5SZXBsYWNlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnZlcnRTdGVuY2lsT3A6XG5cdFx0XHRcdHN0ZW5jaWxPcGVyYXRpb24gPSBHUFVTdGVuY2lsT3BlcmF0aW9uLkludmVydDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgSW5jcmVtZW50U3RlbmNpbE9wOlxuXHRcdFx0XHRzdGVuY2lsT3BlcmF0aW9uID0gR1BVU3RlbmNpbE9wZXJhdGlvbi5JbmNyZW1lbnRDbGFtcDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgRGVjcmVtZW50U3RlbmNpbE9wOlxuXHRcdFx0XHRzdGVuY2lsT3BlcmF0aW9uID0gR1BVU3RlbmNpbE9wZXJhdGlvbi5EZWNyZW1lbnRDbGFtcDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgSW5jcmVtZW50V3JhcFN0ZW5jaWxPcDpcblx0XHRcdFx0c3RlbmNpbE9wZXJhdGlvbiA9IEdQVVN0ZW5jaWxPcGVyYXRpb24uSW5jcmVtZW50V3JhcDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgRGVjcmVtZW50V3JhcFN0ZW5jaWxPcDpcblx0XHRcdFx0c3RlbmNpbE9wZXJhdGlvbiA9IEdQVVN0ZW5jaWxPcGVyYXRpb24uRGVjcmVtZW50V3JhcDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHUFVSZW5kZXJlcjogSW52YWxpZCBzdGVuY2lsIG9wZXJhdGlvbi4nLCBzdGVuY2lsT3BlcmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc3RlbmNpbE9wZXJhdGlvbjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIEdQVSBibGVuZCBvcGVyYXRpb24gd2hpY2ggaXMgcmVxdWlyZWQgZm9yIHRoZSBwaXBlbGluZSBjcmVhdGlvbi5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtudW1iZXJ9IGJsZW5kRXF1YXRpb24gLSBBIHRocmVlLmpzIGNvbnN0YW50IGRlZmluaW5nIHRoZSBibGVuZCBlcXVhdGlvbi5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR1BVIGJsZW5kIG9wZXJhdGlvbi5cblx0ICovXG5cdF9nZXRCbGVuZE9wZXJhdGlvbiggYmxlbmRFcXVhdGlvbiApIHtcblxuXHRcdGxldCBibGVuZE9wZXJhdGlvbjtcblxuXHRcdHN3aXRjaCAoIGJsZW5kRXF1YXRpb24gKSB7XG5cblx0XHRcdGNhc2UgQWRkRXF1YXRpb246XG5cdFx0XHRcdGJsZW5kT3BlcmF0aW9uID0gR1BVQmxlbmRPcGVyYXRpb24uQWRkO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBTdWJ0cmFjdEVxdWF0aW9uOlxuXHRcdFx0XHRibGVuZE9wZXJhdGlvbiA9IEdQVUJsZW5kT3BlcmF0aW9uLlN1YnRyYWN0O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbjpcblx0XHRcdFx0YmxlbmRPcGVyYXRpb24gPSBHUFVCbGVuZE9wZXJhdGlvbi5SZXZlcnNlU3VidHJhY3Q7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIE1pbkVxdWF0aW9uOlxuXHRcdFx0XHRibGVuZE9wZXJhdGlvbiA9IEdQVUJsZW5kT3BlcmF0aW9uLk1pbjtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgTWF4RXF1YXRpb246XG5cdFx0XHRcdGJsZW5kT3BlcmF0aW9uID0gR1BVQmxlbmRPcGVyYXRpb24uTWF4O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdQVVBpcGVsaW5lVXRpbHM6IEJsZW5kIGVxdWF0aW9uIG5vdCBzdXBwb3J0ZWQuJywgYmxlbmRFcXVhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJsZW5kT3BlcmF0aW9uO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcHJpbWl0aXZlIHN0YXRlIGFzIGEgZGVzY3JpcHRvciBvYmplY3QgcmVxdWlyZWRcblx0ICogZm9yIHRoZSBwaXBlbGluZSBjcmVhdGlvbi5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnkgLSBUaGUgZ2VvbWV0cnkuXG5cdCAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdGVyaWFsIC0gVGhlIG1hdGVyaWFsLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBwcmltaXRpdmUgc3RhdGUuXG5cdCAqL1xuXHRfZ2V0UHJpbWl0aXZlU3RhdGUoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgZGVzY3JpcHRvciA9IHt9O1xuXHRcdGNvbnN0IHV0aWxzID0gdGhpcy5iYWNrZW5kLnV0aWxzO1xuXG5cdFx0ZGVzY3JpcHRvci50b3BvbG9neSA9IHV0aWxzLmdldFByaW1pdGl2ZVRvcG9sb2d5KCBvYmplY3QsIG1hdGVyaWFsICk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ICE9PSBudWxsICYmIG9iamVjdC5pc0xpbmUgPT09IHRydWUgJiYgb2JqZWN0LmlzTGluZVNlZ21lbnRzICE9PSB0cnVlICkge1xuXG5cdFx0XHRkZXNjcmlwdG9yLnN0cmlwSW5kZXhGb3JtYXQgPSAoIGdlb21ldHJ5LmluZGV4LmFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSA/IEdQVUluZGV4Rm9ybWF0LlVpbnQxNiA6IEdQVUluZGV4Rm9ybWF0LlVpbnQzMjtcblxuXHRcdH1cblxuXHRcdHN3aXRjaCAoIG1hdGVyaWFsLnNpZGUgKSB7XG5cblx0XHRcdGNhc2UgRnJvbnRTaWRlOlxuXHRcdFx0XHRkZXNjcmlwdG9yLmZyb250RmFjZSA9IEdQVUZyb250RmFjZS5DQ1c7XG5cdFx0XHRcdGRlc2NyaXB0b3IuY3VsbE1vZGUgPSBHUFVDdWxsTW9kZS5CYWNrO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBCYWNrU2lkZTpcblx0XHRcdFx0ZGVzY3JpcHRvci5mcm9udEZhY2UgPSBHUFVGcm9udEZhY2UuQ0NXO1xuXHRcdFx0XHRkZXNjcmlwdG9yLmN1bGxNb2RlID0gR1BVQ3VsbE1vZGUuRnJvbnQ7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIERvdWJsZVNpZGU6XG5cdFx0XHRcdGRlc2NyaXB0b3IuZnJvbnRGYWNlID0gR1BVRnJvbnRGYWNlLkNDVztcblx0XHRcdFx0ZGVzY3JpcHRvci5jdWxsTW9kZSA9IEdQVUN1bGxNb2RlLk5vbmU7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR1BVUGlwZWxpbmVVdGlsczogVW5rbm93biBtYXRlcmlhbC5zaWRlIHZhbHVlLicsIG1hdGVyaWFsLnNpZGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGVzY3JpcHRvcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIEdQVSBjb2xvciB3cml0ZSBtYXNrIHdoaWNoIGlzIHJlcXVpcmVkIGZvciB0aGUgcGlwZWxpbmUgY3JlYXRpb24uXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdGVyaWFsIC0gVGhlIG1hdGVyaWFsLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBHUFUgY29sb3Igd3JpdGUgbWFzay5cblx0ICovXG5cdF9nZXRDb2xvcldyaXRlTWFzayggbWF0ZXJpYWwgKSB7XG5cblx0XHRyZXR1cm4gKCBtYXRlcmlhbC5jb2xvcldyaXRlID09PSB0cnVlICkgPyBHUFVDb2xvcldyaXRlRmxhZ3MuQWxsIDogR1BVQ29sb3JXcml0ZUZsYWdzLk5vbmU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBHUFUgZGVwdGggY29tcGFyZSBmdW5jdGlvbiB3aGljaCBpcyByZXF1aXJlZCBmb3IgdGhlIHBpcGVsaW5lIGNyZWF0aW9uLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge01hdGVyaWFsfSBtYXRlcmlhbCAtIFRoZSBtYXRlcmlhbC5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgR1BVIGRlcHRoIGNvbXBhcmUgZnVuY3Rpb24uXG5cdCAqL1xuXHRfZ2V0RGVwdGhDb21wYXJlKCBtYXRlcmlhbCApIHtcblxuXHRcdGxldCBkZXB0aENvbXBhcmU7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRlcHRoVGVzdCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGRlcHRoQ29tcGFyZSA9IEdQVUNvbXBhcmVGdW5jdGlvbi5BbHdheXM7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBkZXB0aEZ1bmMgPSBtYXRlcmlhbC5kZXB0aEZ1bmM7XG5cblx0XHRcdHN3aXRjaCAoIGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRjYXNlIE5ldmVyRGVwdGg6XG5cdFx0XHRcdFx0ZGVwdGhDb21wYXJlID0gR1BVQ29tcGFyZUZ1bmN0aW9uLk5ldmVyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgQWx3YXlzRGVwdGg6XG5cdFx0XHRcdFx0ZGVwdGhDb21wYXJlID0gR1BVQ29tcGFyZUZ1bmN0aW9uLkFsd2F5cztcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIExlc3NEZXB0aDpcblx0XHRcdFx0XHRkZXB0aENvbXBhcmUgPSBHUFVDb21wYXJlRnVuY3Rpb24uTGVzcztcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIExlc3NFcXVhbERlcHRoOlxuXHRcdFx0XHRcdGRlcHRoQ29tcGFyZSA9IEdQVUNvbXBhcmVGdW5jdGlvbi5MZXNzRXF1YWw7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBFcXVhbERlcHRoOlxuXHRcdFx0XHRcdGRlcHRoQ29tcGFyZSA9IEdQVUNvbXBhcmVGdW5jdGlvbi5FcXVhbDtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIEdyZWF0ZXJFcXVhbERlcHRoOlxuXHRcdFx0XHRcdGRlcHRoQ29tcGFyZSA9IEdQVUNvbXBhcmVGdW5jdGlvbi5HcmVhdGVyRXF1YWw7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBHcmVhdGVyRGVwdGg6XG5cdFx0XHRcdFx0ZGVwdGhDb21wYXJlID0gR1BVQ29tcGFyZUZ1bmN0aW9uLkdyZWF0ZXI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBOb3RFcXVhbERlcHRoOlxuXHRcdFx0XHRcdGRlcHRoQ29tcGFyZSA9IEdQVUNvbXBhcmVGdW5jdGlvbi5Ob3RFcXVhbDtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHUFVQaXBlbGluZVV0aWxzOiBJbnZhbGlkIGRlcHRoIGZ1bmN0aW9uLicsIGRlcHRoRnVuYyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGVwdGhDb21wYXJlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBXZWJHUFVQaXBlbGluZVV0aWxzO1xuIiwiaW1wb3J0IHsgd2Fybk9uY2UgfSBmcm9tICcuLi8uLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgVGltZXN0YW1wUXVlcnlQb29sIGZyb20gJy4uLy4uL2NvbW1vbi9UaW1lc3RhbXBRdWVyeVBvb2wuanMnO1xuXG4vKipcbiAqIE1hbmFnZXMgYSBwb29sIG9mIFdlYkdQVSB0aW1lc3RhbXAgcXVlcmllcyBmb3IgcGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQuXG4gKiBFeHRlbmRzIHRoZSBiYXNlIFRpbWVzdGFtcFF1ZXJ5UG9vbCB0byBwcm92aWRlIFdlYkdQVS1zcGVjaWZpYyBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAYXVnbWVudHMgVGltZXN0YW1wUXVlcnlQb29sXG4gKi9cbmNsYXNzIFdlYkdQVVRpbWVzdGFtcFF1ZXJ5UG9vbCBleHRlbmRzIFRpbWVzdGFtcFF1ZXJ5UG9vbCB7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgV2ViR1BVIHRpbWVzdGFtcCBxdWVyeSBwb29sLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0dQVURldmljZX0gZGV2aWNlIC0gVGhlIFdlYkdQVSBkZXZpY2UgdG8gY3JlYXRlIHF1ZXJpZXMgb24uXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgaWRlbnRpZmllciBmb3IgdGhpcyBxdWVyeSBwb29sLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21heFF1ZXJpZXM9MjA0OF0gLSBNYXhpbXVtIG51bWJlciBvZiBxdWVyaWVzIHRoaXMgcG9vbCBjYW4gaG9sZC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBkZXZpY2UsIHR5cGUsIG1heFF1ZXJpZXMgPSAyMDQ4ICkge1xuXG5cdFx0c3VwZXIoIG1heFF1ZXJpZXMgKTtcblx0XHR0aGlzLmRldmljZSA9IGRldmljZTtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXG5cdFx0dGhpcy5xdWVyeVNldCA9IHRoaXMuZGV2aWNlLmNyZWF0ZVF1ZXJ5U2V0KCB7XG5cdFx0XHR0eXBlOiAndGltZXN0YW1wJyxcblx0XHRcdGNvdW50OiB0aGlzLm1heFF1ZXJpZXMsXG5cdFx0XHRsYWJlbDogYHF1ZXJ5c2V0X2dsb2JhbF90aW1lc3RhbXBfJHt0eXBlfWBcblx0XHR9ICk7XG5cblx0XHRjb25zdCBidWZmZXJTaXplID0gdGhpcy5tYXhRdWVyaWVzICogODtcblx0XHR0aGlzLnJlc29sdmVCdWZmZXIgPSB0aGlzLmRldmljZS5jcmVhdGVCdWZmZXIoIHtcblx0XHRcdGxhYmVsOiBgYnVmZmVyX3RpbWVzdGFtcF9yZXNvbHZlXyR7dHlwZX1gLFxuXHRcdFx0c2l6ZTogYnVmZmVyU2l6ZSxcblx0XHRcdHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5RVUVSWV9SRVNPTFZFIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9TUkNcblx0XHR9ICk7XG5cblx0XHR0aGlzLnJlc3VsdEJ1ZmZlciA9IHRoaXMuZGV2aWNlLmNyZWF0ZUJ1ZmZlcigge1xuXHRcdFx0bGFiZWw6IGBidWZmZXJfdGltZXN0YW1wX3Jlc3VsdF8ke3R5cGV9YCxcblx0XHRcdHNpemU6IGJ1ZmZlclNpemUsXG5cdFx0XHR1c2FnZTogR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QgfCBHUFVCdWZmZXJVc2FnZS5NQVBfUkVBRFxuXHRcdH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFsbG9jYXRlcyBhIHBhaXIgb2YgcXVlcmllcyBmb3IgYSBnaXZlbiByZW5kZXIgY29udGV4dC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQgdG8gYWxsb2NhdGUgcXVlcmllcyBmb3IuXG5cdCAqIEByZXR1cm5zIHs/bnVtYmVyfSBUaGUgYmFzZSBvZmZzZXQgZm9yIHRoZSBhbGxvY2F0ZWQgcXVlcmllcywgb3IgbnVsbCBpZiBhbGxvY2F0aW9uIGZhaWxlZC5cblx0ICovXG5cdGFsbG9jYXRlUXVlcmllc0ZvckNvbnRleHQoIHJlbmRlckNvbnRleHQgKSB7XG5cblx0XHRpZiAoICEgdGhpcy50cmFja1RpbWVzdGFtcCB8fCB0aGlzLmlzRGlzcG9zZWQgKSByZXR1cm4gbnVsbDtcblxuXHRcdGlmICggdGhpcy5jdXJyZW50UXVlcnlJbmRleCArIDIgPiB0aGlzLm1heFF1ZXJpZXMgKSB7XG5cblx0XHRcdHdhcm5PbmNlKCBgV2ViR1BVVGltZXN0YW1wUXVlcnlQb29sIFskeyB0aGlzLnR5cGUgfV06IE1heGltdW0gbnVtYmVyIG9mIHF1ZXJpZXMgZXhjZWVkZWQsIHdoZW4gdXNpbmcgdHJhY2tUaW1lc3RhbXAgaXQgaXMgbmVjZXNzYXJ5IHRvIHJlc29sdmVzIHRoZSBxdWVyaWVzIHZpYSByZW5kZXJlci5yZXNvbHZlVGltZXN0YW1wc0FzeW5jKCBUSFJFRS5UaW1lc3RhbXBRdWVyeS4keyB0aGlzLnR5cGUudG9VcHBlckNhc2UoKSB9ICkuYCApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCBiYXNlT2Zmc2V0ID0gdGhpcy5jdXJyZW50UXVlcnlJbmRleDtcblx0XHR0aGlzLmN1cnJlbnRRdWVyeUluZGV4ICs9IDI7XG5cblx0XHR0aGlzLnF1ZXJ5T2Zmc2V0cy5zZXQoIHJlbmRlckNvbnRleHQuaWQsIGJhc2VPZmZzZXQgKTtcblx0XHRyZXR1cm4gYmFzZU9mZnNldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFzeW5jaHJvbm91c2x5IHJlc29sdmVzIGFsbCBwZW5kaW5nIHF1ZXJpZXMgYW5kIHJldHVybnMgdGhlIHRvdGFsIGR1cmF0aW9uLlxuXHQgKiBJZiB0aGVyZSdzIGFscmVhZHkgYSBwZW5kaW5nIHJlc29sdmUgb3BlcmF0aW9uLCByZXR1cm5zIHRoYXQgcHJvbWlzZSBpbnN0ZWFkLlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn0gVGhlIHRvdGFsIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcywgb3IgdGhlIGxhc3QgdmFsaWQgdmFsdWUgaWYgcmVzb2x1dGlvbiBmYWlscy5cblx0ICovXG5cdGFzeW5jIHJlc29sdmVRdWVyaWVzQXN5bmMoKSB7XG5cblx0XHRpZiAoICEgdGhpcy50cmFja1RpbWVzdGFtcCB8fCB0aGlzLmN1cnJlbnRRdWVyeUluZGV4ID09PSAwIHx8IHRoaXMuaXNEaXNwb3NlZCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMubGFzdFZhbHVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnBlbmRpbmdSZXNvbHZlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5wZW5kaW5nUmVzb2x2ZTtcblxuXHRcdH1cblxuXHRcdHRoaXMucGVuZGluZ1Jlc29sdmUgPSB0aGlzLl9yZXNvbHZlUXVlcmllcygpO1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wZW5kaW5nUmVzb2x2ZTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cblx0XHR9IGZpbmFsbHkge1xuXG5cdFx0XHR0aGlzLnBlbmRpbmdSZXNvbHZlID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEludGVybmFsIG1ldGhvZCB0byByZXNvbHZlIHF1ZXJpZXMgYW5kIGNhbGN1bGF0ZSB0b3RhbCBkdXJhdGlvbi5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwcml2YXRlXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59IFRoZSB0b3RhbCBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuXG5cdCAqL1xuXHRhc3luYyBfcmVzb2x2ZVF1ZXJpZXMoKSB7XG5cblx0XHRpZiAoIHRoaXMuaXNEaXNwb3NlZCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMubGFzdFZhbHVlO1xuXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblxuXHRcdFx0aWYgKCB0aGlzLnJlc3VsdEJ1ZmZlci5tYXBTdGF0ZSAhPT0gJ3VubWFwcGVkJyApIHtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy5sYXN0VmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY3VycmVudE9mZnNldHMgPSBuZXcgTWFwKCB0aGlzLnF1ZXJ5T2Zmc2V0cyApO1xuXHRcdFx0Y29uc3QgcXVlcnlDb3VudCA9IHRoaXMuY3VycmVudFF1ZXJ5SW5kZXg7XG5cdFx0XHRjb25zdCBieXRlc1VzZWQgPSBxdWVyeUNvdW50ICogODtcblxuXHRcdFx0Ly8gUmVzZXQgc3RhdGUgYmVmb3JlIEdQVSB3b3JrXG5cdFx0XHR0aGlzLmN1cnJlbnRRdWVyeUluZGV4ID0gMDtcblx0XHRcdHRoaXMucXVlcnlPZmZzZXRzLmNsZWFyKCk7XG5cblx0XHRcdGNvbnN0IGNvbW1hbmRFbmNvZGVyID0gdGhpcy5kZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcblxuXHRcdFx0Y29tbWFuZEVuY29kZXIucmVzb2x2ZVF1ZXJ5U2V0KFxuXHRcdFx0XHR0aGlzLnF1ZXJ5U2V0LFxuXHRcdFx0XHQwLFxuXHRcdFx0XHRxdWVyeUNvdW50LFxuXHRcdFx0XHR0aGlzLnJlc29sdmVCdWZmZXIsXG5cdFx0XHRcdDBcblx0XHRcdCk7XG5cblx0XHRcdGNvbW1hbmRFbmNvZGVyLmNvcHlCdWZmZXJUb0J1ZmZlcihcblx0XHRcdFx0dGhpcy5yZXNvbHZlQnVmZmVyLFxuXHRcdFx0XHQwLFxuXHRcdFx0XHR0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdFx0MCxcblx0XHRcdFx0Ynl0ZXNVc2VkXG5cdFx0XHQpO1xuXG5cdFx0XHRjb25zdCBjb21tYW5kQnVmZmVyID0gY29tbWFuZEVuY29kZXIuZmluaXNoKCk7XG5cdFx0XHR0aGlzLmRldmljZS5xdWV1ZS5zdWJtaXQoIFsgY29tbWFuZEJ1ZmZlciBdICk7XG5cblx0XHRcdGlmICggdGhpcy5yZXN1bHRCdWZmZXIubWFwU3RhdGUgIT09ICd1bm1hcHBlZCcgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMubGFzdFZhbHVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIENyZWF0ZSBhbmQgdHJhY2sgdGhlIG1hcHBpbmcgb3BlcmF0aW9uXG5cdFx0XHRhd2FpdCB0aGlzLnJlc3VsdEJ1ZmZlci5tYXBBc3luYyggR1BVTWFwTW9kZS5SRUFELCAwLCBieXRlc1VzZWQgKTtcblxuXHRcdFx0aWYgKCB0aGlzLmlzRGlzcG9zZWQgKSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLnJlc3VsdEJ1ZmZlci5tYXBTdGF0ZSA9PT0gJ21hcHBlZCcgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnJlc3VsdEJ1ZmZlci51bm1hcCgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdGhpcy5sYXN0VmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdGltZXMgPSBuZXcgQmlnVWludDY0QXJyYXkoIHRoaXMucmVzdWx0QnVmZmVyLmdldE1hcHBlZFJhbmdlKCAwLCBieXRlc1VzZWQgKSApO1xuXHRcdFx0bGV0IHRvdGFsRHVyYXRpb24gPSAwO1xuXG5cdFx0XHRmb3IgKCBjb25zdCBbICwgYmFzZU9mZnNldCBdIG9mIGN1cnJlbnRPZmZzZXRzICkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXJ0VGltZSA9IHRpbWVzWyBiYXNlT2Zmc2V0IF07XG5cdFx0XHRcdGNvbnN0IGVuZFRpbWUgPSB0aW1lc1sgYmFzZU9mZnNldCArIDEgXTtcblx0XHRcdFx0Y29uc3QgZHVyYXRpb24gPSBOdW1iZXIoIGVuZFRpbWUgLSBzdGFydFRpbWUgKSAvIDFlNjtcblx0XHRcdFx0dG90YWxEdXJhdGlvbiArPSBkdXJhdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnJlc3VsdEJ1ZmZlci51bm1hcCgpO1xuXHRcdFx0dGhpcy5sYXN0VmFsdWUgPSB0b3RhbER1cmF0aW9uO1xuXG5cdFx0XHRyZXR1cm4gdG90YWxEdXJhdGlvbjtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ0Vycm9yIHJlc29sdmluZyBxdWVyaWVzOicsIGVycm9yICk7XG5cdFx0XHRpZiAoIHRoaXMucmVzdWx0QnVmZmVyLm1hcFN0YXRlID09PSAnbWFwcGVkJyApIHtcblxuXHRcdFx0XHR0aGlzLnJlc3VsdEJ1ZmZlci51bm1hcCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmxhc3RWYWx1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2Ugb2YgdGhlIHF1ZXJ5IHBvb2wuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZGlzcG9zZSBoYXMgYmVlbiBleGVjdXRlZC5cblx0ICovXG5cdGFzeW5jIGRpc3Bvc2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuaXNEaXNwb3NlZCApIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5pc0Rpc3Bvc2VkID0gdHJ1ZTtcblxuXHRcdC8vIFdhaXQgZm9yIHBlbmRpbmcgcmVzb2x2ZSBvcGVyYXRpb25cblx0XHRpZiAoIHRoaXMucGVuZGluZ1Jlc29sdmUgKSB7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0YXdhaXQgdGhpcy5wZW5kaW5nUmVzb2x2ZTtcblxuXHRcdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdFcnJvciB3YWl0aW5nIGZvciBwZW5kaW5nIHJlc29sdmU6JywgZXJyb3IgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIGJ1ZmZlciBpcyB1bm1hcHBlZCBiZWZvcmUgZGVzdHJveWluZ1xuXHRcdGlmICggdGhpcy5yZXN1bHRCdWZmZXIgJiYgdGhpcy5yZXN1bHRCdWZmZXIubWFwU3RhdGUgPT09ICdtYXBwZWQnICkge1xuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdHRoaXMucmVzdWx0QnVmZmVyLnVubWFwKCk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnRXJyb3IgdW5tYXBwaW5nIGJ1ZmZlcjonLCBlcnJvciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBEZXN0cm95IHJlc291cmNlc1xuXHRcdGlmICggdGhpcy5xdWVyeVNldCApIHtcblxuXHRcdFx0dGhpcy5xdWVyeVNldC5kZXN0cm95KCk7XG5cdFx0XHR0aGlzLnF1ZXJ5U2V0ID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5yZXNvbHZlQnVmZmVyICkge1xuXG5cdFx0XHR0aGlzLnJlc29sdmVCdWZmZXIuZGVzdHJveSgpO1xuXHRcdFx0dGhpcy5yZXNvbHZlQnVmZmVyID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5yZXN1bHRCdWZmZXIgKSB7XG5cblx0XHRcdHRoaXMucmVzdWx0QnVmZmVyLmRlc3Ryb3koKTtcblx0XHRcdHRoaXMucmVzdWx0QnVmZmVyID0gbnVsbDtcblxuXHRcdH1cblxuXHRcdHRoaXMucXVlcnlPZmZzZXRzLmNsZWFyKCk7XG5cdFx0dGhpcy5wZW5kaW5nUmVzb2x2ZSA9IG51bGw7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYkdQVVRpbWVzdGFtcFF1ZXJ5UG9vbDtcbiIsIi8qLy8gZGVidWdnZXIgdG9vbHNcbmltcG9ydCAnaHR0cHM6Ly9ncmVnZ21hbi5naXRodWIuaW8vd2ViZ3B1LWF2b2lkLXJlZHVuZGFudC1zdGF0ZS1zZXR0aW5nL3dlYmdwdS1jaGVjay1yZWR1bmRhbnQtc3RhdGUtc2V0dGluZy5qcyc7XG4vLyovXG5cbmltcG9ydCB7IEdQVUZlYXR1cmVOYW1lLCBHUFVMb2FkT3AsIEdQVVN0b3JlT3AsIEdQVUluZGV4Rm9ybWF0LCBHUFVUZXh0dXJlVmlld0RpbWVuc2lvbiB9IGZyb20gJy4vdXRpbHMvV2ViR1BVQ29uc3RhbnRzLmpzJztcblxuaW1wb3J0IFdHU0xOb2RlQnVpbGRlciBmcm9tICcuL25vZGVzL1dHU0xOb2RlQnVpbGRlci5qcyc7XG5pbXBvcnQgQmFja2VuZCBmcm9tICcuLi9jb21tb24vQmFja2VuZC5qcyc7XG5cbmltcG9ydCBXZWJHUFVVdGlscyBmcm9tICcuL3V0aWxzL1dlYkdQVVV0aWxzLmpzJztcbmltcG9ydCBXZWJHUFVBdHRyaWJ1dGVVdGlscyBmcm9tICcuL3V0aWxzL1dlYkdQVUF0dHJpYnV0ZVV0aWxzLmpzJztcbmltcG9ydCBXZWJHUFVCaW5kaW5nVXRpbHMgZnJvbSAnLi91dGlscy9XZWJHUFVCaW5kaW5nVXRpbHMuanMnO1xuaW1wb3J0IFdlYkdQVVBpcGVsaW5lVXRpbHMgZnJvbSAnLi91dGlscy9XZWJHUFVQaXBlbGluZVV0aWxzLmpzJztcbmltcG9ydCBXZWJHUFVUZXh0dXJlVXRpbHMgZnJvbSAnLi91dGlscy9XZWJHUFVUZXh0dXJlVXRpbHMuanMnO1xuXG5pbXBvcnQgeyBXZWJHUFVDb29yZGluYXRlU3lzdGVtIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCBXZWJHUFVUaW1lc3RhbXBRdWVyeVBvb2wgZnJvbSAnLi91dGlscy9XZWJHUFVUaW1lc3RhbXBRdWVyeVBvb2wuanMnO1xuaW1wb3J0IHsgd2Fybk9uY2UgfSBmcm9tICcuLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogQSBiYWNrZW5kIGltcGxlbWVudGF0aW9uIHRhcmdldGluZyBXZWJHUFUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBhdWdtZW50cyBCYWNrZW5kXG4gKi9cbmNsYXNzIFdlYkdQVUJhY2tlbmQgZXh0ZW5kcyBCYWNrZW5kIHtcblxuXHQvKipcblx0ICogV2ViR1BVQmFja2VuZCBvcHRpb25zLlxuXHQgKlxuXHQgKiBAdHlwZWRlZiB7T2JqZWN0fSBXZWJHUFVCYWNrZW5kfk9wdGlvbnNcblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcj1mYWxzZV0gLSBXaGV0aGVyIGxvZ2FyaXRobWljIGRlcHRoIGJ1ZmZlciBpcyBlbmFibGVkIG9yIG5vdC5cblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbYWxwaGE9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyICh3aGljaCByZXByZXNlbnRzIHRoZSBmaW5hbCBjb250ZW50cyBvZiB0aGUgY2FudmFzKSBzaG91bGQgYmUgdHJhbnNwYXJlbnQgb3Igb3BhcXVlLlxuXHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtkZXB0aD10cnVlXSAtIFdoZXRoZXIgdGhlIGRlZmF1bHQgZnJhbWVidWZmZXIgc2hvdWxkIGhhdmUgYSBkZXB0aCBidWZmZXIgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzdGVuY2lsPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGRlZmF1bHQgZnJhbWVidWZmZXIgc2hvdWxkIGhhdmUgYSBzdGVuY2lsIGJ1ZmZlciBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2FudGlhbGlhcz1mYWxzZV0gLSBXaGV0aGVyIE1TQUEgYXMgdGhlIGRlZmF1bHQgYW50aS1hbGlhc2luZyBzaG91bGQgYmUgZW5hYmxlZCBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc2FtcGxlcz0wXSAtIFdoZW4gYGFudGlhbGlhc2AgaXMgYHRydWVgLCBgNGAgc2FtcGxlcyBhcmUgdXNlZCBieSBkZWZhdWx0LiBTZXQgdGhpcyBwYXJhbWV0ZXIgdG8gYW55IG90aGVyIGludGVnZXIgdmFsdWUgdGhhbiAwIHRvIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdC5cblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbZm9yY2VXZWJHTD1mYWxzZV0gLSBJZiBzZXQgdG8gYHRydWVgLCB0aGUgcmVuZGVyZXIgdXNlcyBhIFdlYkdMIDIgYmFja2VuZCBubyBtYXR0ZXIgaWYgV2ViR1BVIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3RyYWNrVGltZXN0YW1wPWZhbHNlXSAtIFdoZXRoZXIgdG8gdHJhY2sgdGltZXN0YW1wcyB3aXRoIGEgVGltZXN0YW1wIFF1ZXJ5IEFQSSBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcG93ZXJQcmVmZXJlbmNlPXVuZGVmaW5lZF0gLSBUaGUgcG93ZXIgcHJlZmVyZW5jZS5cblx0ICogQHByb3BlcnR5IHtPYmplY3R9IFtyZXF1aXJlZExpbWl0cz11bmRlZmluZWRdIC0gU3BlY2lmaWVzIHRoZSBsaW1pdHMgdGhhdCBhcmUgcmVxdWlyZWQgYnkgdGhlIGRldmljZSByZXF1ZXN0LiBUaGUgcmVxdWVzdCB3aWxsIGZhaWwgaWYgdGhlIGFkYXB0ZXIgY2Fubm90IHByb3ZpZGUgdGhlc2UgbGltaXRzLlxuXHQgKiBAcHJvcGVydHkge0dQVURldmljZX0gW2RldmljZT11bmRlZmluZWRdIC0gSWYgdGhlcmUgaXMgYW4gZXhpc3RpbmcgR1BVIGRldmljZSBvbiBhcHAgbGV2ZWwsIGl0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIHJlbmRlcmVyIGFzIGEgcGFyYW1ldGVyLlxuXHQgKiBAcHJvcGVydHkge251bWJlcn0gW291dHB1dFR5cGU9dW5kZWZpbmVkXSAtIFRleHR1cmUgdHlwZSBmb3Igb3V0cHV0IHRvIGNhbnZhcy4gQnkgZGVmYXVsdCwgZGV2aWNlJ3MgcHJlZmVycmVkIGZvcm1hdCBpcyB1c2VkOyBvdGhlciBmb3JtYXRzIG1heSBpbmN1ciBvdmVyaGVhZC5cblx0ICovXG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgV2ViR1BVIGJhY2tlbmQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR1BVQmFja2VuZH5PcHRpb25zfSBbcGFyYW1ldGVyc10gLSBUaGUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoIHBhcmFtZXRlcnMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNXZWJHUFVCYWNrZW5kID0gdHJ1ZTtcblxuXHRcdC8vIHNvbWUgcGFyYW1ldGVycyByZXF1aXJlIGRlZmF1bHQgdmFsdWVzIG90aGVyIHRoYW4gXCJ1bmRlZmluZWRcIlxuXHRcdHRoaXMucGFyYW1ldGVycy5hbHBoYSA9ICggcGFyYW1ldGVycy5hbHBoYSA9PT0gdW5kZWZpbmVkICkgPyB0cnVlIDogcGFyYW1ldGVycy5hbHBoYTtcblxuXHRcdHRoaXMucGFyYW1ldGVycy5yZXF1aXJlZExpbWl0cyA9ICggcGFyYW1ldGVycy5yZXF1aXJlZExpbWl0cyA9PT0gdW5kZWZpbmVkICkgPyB7fSA6IHBhcmFtZXRlcnMucmVxdWlyZWRMaW1pdHM7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRvIHRyYWNrIHRpbWVzdGFtcHMgd2l0aCBhIFRpbWVzdGFtcCBRdWVyeSBBUEkgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLnRyYWNrVGltZXN0YW1wID0gKCBwYXJhbWV0ZXJzLnRyYWNrVGltZXN0YW1wID09PSB0cnVlICk7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byB0aGUgZGV2aWNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9HUFVEZXZpY2V9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZGV2aWNlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjb250ZXh0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9HUFVDYW52YXNDb250ZXh0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNvbnRleHQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIGNvbG9yIGF0dGFjaG1lbnQgb2YgdGhlIGRlZmF1bHQgZnJhbWVidWZmZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0dQVVRleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3JCdWZmZXIgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIGRlZmF1bHQgcmVuZGVyIHBhc3MgZGVzY3JpcHRvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmRlZmF1bHRSZW5kZXJQYXNzZGVzY3JpcHRvciA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIGJhY2tlbmQgbW9kdWxlIGhvbGRpbmcgY29tbW9uIHV0aWxpdHkgZnVuY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1dlYkdQVVV0aWxzfVxuXHRcdCAqL1xuXHRcdHRoaXMudXRpbHMgPSBuZXcgV2ViR1BVVXRpbHMoIHRoaXMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgYmFja2VuZCBtb2R1bGUgaG9sZGluZyBzaGFkZXIgYXR0cmlidXRlLXJlbGF0ZWRcblx0XHQgKiB1dGlsaXR5IGZ1bmN0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHUFVBdHRyaWJ1dGVVdGlsc31cblx0XHQgKi9cblx0XHR0aGlzLmF0dHJpYnV0ZVV0aWxzID0gbmV3IFdlYkdQVUF0dHJpYnV0ZVV0aWxzKCB0aGlzICk7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIGJhY2tlbmQgbW9kdWxlIGhvbGRpbmcgc2hhZGVyIGJpbmRpbmctcmVsYXRlZFxuXHRcdCAqIHV0aWxpdHkgZnVuY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1dlYkdQVUJpbmRpbmdVdGlsc31cblx0XHQgKi9cblx0XHR0aGlzLmJpbmRpbmdVdGlscyA9IG5ldyBXZWJHUFVCaW5kaW5nVXRpbHMoIHRoaXMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgYmFja2VuZCBtb2R1bGUgaG9sZGluZyBzaGFkZXIgcGlwZWxpbmUtcmVsYXRlZFxuXHRcdCAqIHV0aWxpdHkgZnVuY3Rpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1dlYkdQVVBpcGVsaW5lVXRpbHN9XG5cdFx0ICovXG5cdFx0dGhpcy5waXBlbGluZVV0aWxzID0gbmV3IFdlYkdQVVBpcGVsaW5lVXRpbHMoIHRoaXMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGEgYmFja2VuZCBtb2R1bGUgaG9sZGluZyBzaGFkZXIgdGV4dHVyZS1yZWxhdGVkXG5cdFx0ICogdXRpbGl0eSBmdW5jdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7V2ViR1BVVGV4dHVyZVV0aWxzfVxuXHRcdCAqL1xuXHRcdHRoaXMudGV4dHVyZVV0aWxzID0gbmV3IFdlYkdQVVRleHR1cmVVdGlscyggdGhpcyApO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBtYXAgdGhhdCBtYW5hZ2VzIHRoZSByZXNvbHZlIGJ1ZmZlcnMgZm9yIG9jY2x1c2lvbiBxdWVyaWVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hcDxudW1iZXIsR1BVQnVmZmVyPn1cblx0XHQgKi9cblx0XHR0aGlzLm9jY2x1ZGVkUmVzb2x2ZUNhY2hlID0gbmV3IE1hcCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGJhY2tlbmQgc28gaXQgaXMgcmVhZHkgZm9yIHVzYWdlLlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGJhY2tlbmQgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG5cdCAqL1xuXHRhc3luYyBpbml0KCByZW5kZXJlciApIHtcblxuXHRcdGF3YWl0IHN1cGVyLmluaXQoIHJlbmRlcmVyICk7XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcblxuXHRcdC8vIGNyZWF0ZSB0aGUgZGV2aWNlIGlmIGl0IGlzIG5vdCBwYXNzZWQgd2l0aCBwYXJhbWV0ZXJzXG5cblx0XHRsZXQgZGV2aWNlO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmRldmljZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBhZGFwdGVyT3B0aW9ucyA9IHtcblx0XHRcdFx0cG93ZXJQcmVmZXJlbmNlOiBwYXJhbWV0ZXJzLnBvd2VyUHJlZmVyZW5jZVxuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3QgYWRhcHRlciA9ICggdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgKSA/IGF3YWl0IG5hdmlnYXRvci5ncHUucmVxdWVzdEFkYXB0ZXIoIGFkYXB0ZXJPcHRpb25zICkgOiBudWxsO1xuXG5cdFx0XHRpZiAoIGFkYXB0ZXIgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnV2ViR1BVQmFja2VuZDogVW5hYmxlIHRvIGNyZWF0ZSBXZWJHUFUgYWRhcHRlci4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZmVhdHVyZSBzdXBwb3J0XG5cblx0XHRcdGNvbnN0IGZlYXR1cmVzID0gT2JqZWN0LnZhbHVlcyggR1BVRmVhdHVyZU5hbWUgKTtcblxuXHRcdFx0Y29uc3Qgc3VwcG9ydGVkRmVhdHVyZXMgPSBbXTtcblxuXHRcdFx0Zm9yICggY29uc3QgbmFtZSBvZiBmZWF0dXJlcyApIHtcblxuXHRcdFx0XHRpZiAoIGFkYXB0ZXIuZmVhdHVyZXMuaGFzKCBuYW1lICkgKSB7XG5cblx0XHRcdFx0XHRzdXBwb3J0ZWRGZWF0dXJlcy5wdXNoKCBuYW1lICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGRldmljZURlc2NyaXB0b3IgPSB7XG5cdFx0XHRcdHJlcXVpcmVkRmVhdHVyZXM6IHN1cHBvcnRlZEZlYXR1cmVzLFxuXHRcdFx0XHRyZXF1aXJlZExpbWl0czogcGFyYW1ldGVycy5yZXF1aXJlZExpbWl0c1xuXHRcdFx0fTtcblxuXHRcdFx0ZGV2aWNlID0gYXdhaXQgYWRhcHRlci5yZXF1ZXN0RGV2aWNlKCBkZXZpY2VEZXNjcmlwdG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkZXZpY2UgPSBwYXJhbWV0ZXJzLmRldmljZTtcblxuXHRcdH1cblxuXHRcdGRldmljZS5sb3N0LnRoZW4oICggaW5mbyApID0+IHtcblxuXHRcdFx0Y29uc3QgZGV2aWNlTG9zc0luZm8gPSB7XG5cdFx0XHRcdGFwaTogJ1dlYkdQVScsXG5cdFx0XHRcdG1lc3NhZ2U6IGluZm8ubWVzc2FnZSB8fCAnVW5rbm93biByZWFzb24nLFxuXHRcdFx0XHRyZWFzb246IGluZm8ucmVhc29uIHx8IG51bGwsXG5cdFx0XHRcdG9yaWdpbmFsRXZlbnQ6IGluZm9cblx0XHRcdH07XG5cblx0XHRcdHJlbmRlcmVyLm9uRGV2aWNlTG9zdCggZGV2aWNlTG9zc0luZm8gKTtcblxuXHRcdH0gKTtcblxuXHRcdGNvbnN0IGNvbnRleHQgPSAoIHBhcmFtZXRlcnMuY29udGV4dCAhPT0gdW5kZWZpbmVkICkgPyBwYXJhbWV0ZXJzLmNvbnRleHQgOiByZW5kZXJlci5kb21FbGVtZW50LmdldENvbnRleHQoICd3ZWJncHUnICk7XG5cblx0XHR0aGlzLmRldmljZSA9IGRldmljZTtcblx0XHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0Y29uc3QgYWxwaGFNb2RlID0gcGFyYW1ldGVycy5hbHBoYSA/ICdwcmVtdWx0aXBsaWVkJyA6ICdvcGFxdWUnO1xuXG5cdFx0dGhpcy50cmFja1RpbWVzdGFtcCA9IHRoaXMudHJhY2tUaW1lc3RhbXAgJiYgdGhpcy5oYXNGZWF0dXJlKCBHUFVGZWF0dXJlTmFtZS5UaW1lc3RhbXBRdWVyeSApO1xuXG5cdFx0dGhpcy5jb250ZXh0LmNvbmZpZ3VyZSgge1xuXHRcdFx0ZGV2aWNlOiB0aGlzLmRldmljZSxcblx0XHRcdGZvcm1hdDogdGhpcy51dGlscy5nZXRQcmVmZXJyZWRDYW52YXNGb3JtYXQoKSxcblx0XHRcdHVzYWdlOiBHUFVUZXh0dXJlVXNhZ2UuUkVOREVSX0FUVEFDSE1FTlQgfCBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9TUkMsXG5cdFx0XHRhbHBoYU1vZGU6IGFscGhhTW9kZVxuXHRcdH0gKTtcblxuXHRcdHRoaXMudXBkYXRlU2l6ZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGNvb3JkaW5hdGUgc3lzdGVtIG9mIHRoZSBiYWNrZW5kLlxuXHQgKlxuXHQgKiBAdHlwZSB7bnVtYmVyfVxuXHQgKiBAcmVhZG9ubHlcblx0ICovXG5cdGdldCBjb29yZGluYXRlU3lzdGVtKCkge1xuXG5cdFx0cmV0dXJuIFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyBhIHJlYWRiYWNrIG9wZXJhdGlvbiBieSBtb3ZpbmcgYnVmZmVyIGRhdGEgZnJvbVxuXHQgKiBhIHN0b3JhZ2UgYnVmZmVyIGF0dHJpYnV0ZSBmcm9tIHRoZSBHUFUgdG8gdGhlIENQVS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7U3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIHN0b3JhZ2UgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGJ1ZmZlciBkYXRhIHdoZW4gdGhlIGRhdGEgYXJlIHJlYWR5LlxuXHQgKi9cblx0YXN5bmMgZ2V0QXJyYXlCdWZmZXJBc3luYyggYXR0cmlidXRlICkge1xuXG5cdFx0cmV0dXJuIGF3YWl0IHRoaXMuYXR0cmlidXRlVXRpbHMuZ2V0QXJyYXlCdWZmZXJBc3luYyggYXR0cmlidXRlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBiYWNrZW5kJ3MgcmVuZGVyaW5nIGNvbnRleHQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0dQVUNhbnZhc0NvbnRleHR9IFRoZSByZW5kZXJpbmcgY29udGV4dC5cblx0ICovXG5cdGdldENvbnRleHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb250ZXh0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGVmYXVsdCByZW5kZXIgcGFzcyBkZXNjcmlwdG9yLlxuXHQgKlxuXHQgKiBJbiBXZWJHUFUsIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyIG11c3QgYmUgY29uZmlndXJlZFxuXHQgKiBsaWtlIGN1c3RvbSBmcmFtZWJ1ZmZlcnMgc28gdGhlIGJhY2tlbmQgbmVlZHMgYSByZW5kZXJcblx0ICogcGFzcyBkZXNjcmlwdG9yIGV2ZW4gd2hlbiByZW5kZXJpbmcgZGlyZWN0bHkgdG8gc2NyZWVuLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZW5kZXIgcGFzcyBkZXNjcmlwdG9yLlxuXHQgKi9cblx0X2dldERlZmF1bHRSZW5kZXJQYXNzRGVzY3JpcHRvcigpIHtcblxuXHRcdGxldCBkZXNjcmlwdG9yID0gdGhpcy5kZWZhdWx0UmVuZGVyUGFzc2Rlc2NyaXB0b3I7XG5cblx0XHRpZiAoIGRlc2NyaXB0b3IgPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblxuXHRcdFx0ZGVzY3JpcHRvciA9IHtcblx0XHRcdFx0Y29sb3JBdHRhY2htZW50czogWyB7XG5cdFx0XHRcdFx0dmlldzogbnVsbFxuXHRcdFx0XHR9IF0sXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoIHRoaXMucmVuZGVyZXIuZGVwdGggPT09IHRydWUgfHwgdGhpcy5yZW5kZXJlci5zdGVuY2lsID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGRlc2NyaXB0b3IuZGVwdGhTdGVuY2lsQXR0YWNobWVudCA9IHtcblx0XHRcdFx0XHR2aWV3OiB0aGlzLnRleHR1cmVVdGlscy5nZXREZXB0aEJ1ZmZlciggcmVuZGVyZXIuZGVwdGgsIHJlbmRlcmVyLnN0ZW5jaWwgKS5jcmVhdGVWaWV3KClcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBjb2xvckF0dGFjaG1lbnQgPSBkZXNjcmlwdG9yLmNvbG9yQXR0YWNobWVudHNbIDAgXTtcblxuXHRcdFx0aWYgKCB0aGlzLnJlbmRlcmVyLnNhbXBsZXMgPiAwICkge1xuXG5cdFx0XHRcdGNvbG9yQXR0YWNobWVudC52aWV3ID0gdGhpcy5jb2xvckJ1ZmZlci5jcmVhdGVWaWV3KCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29sb3JBdHRhY2htZW50LnJlc29sdmVUYXJnZXQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5kZWZhdWx0UmVuZGVyUGFzc2Rlc2NyaXB0b3IgPSBkZXNjcmlwdG9yO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY29sb3JBdHRhY2htZW50ID0gZGVzY3JpcHRvci5jb2xvckF0dGFjaG1lbnRzWyAwIF07XG5cblx0XHRpZiAoIHRoaXMucmVuZGVyZXIuc2FtcGxlcyA+IDAgKSB7XG5cblx0XHRcdGNvbG9yQXR0YWNobWVudC5yZXNvbHZlVGFyZ2V0ID0gdGhpcy5jb250ZXh0LmdldEN1cnJlbnRUZXh0dXJlKCkuY3JlYXRlVmlldygpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29sb3JBdHRhY2htZW50LnZpZXcgPSB0aGlzLmNvbnRleHQuZ2V0Q3VycmVudFRleHR1cmUoKS5jcmVhdGVWaWV3KCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGVzY3JpcHRvcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHJlbmRlciBwYXNzIGRlc2NyaXB0b3IgZm9yIHRoZSBnaXZlbiByZW5kZXIgY29udGV4dC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gY29sb3JBdHRhY2htZW50c0NvbmZpZyAtIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB0aGUgY29sb3IgYXR0YWNobWVudHMuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlbmRlciBwYXNzIGRlc2NyaXB0b3IuXG5cdCAqL1xuXHRfZ2V0UmVuZGVyUGFzc0Rlc2NyaXB0b3IoIHJlbmRlckNvbnRleHQsIGNvbG9yQXR0YWNobWVudHNDb25maWcgPSB7fSApIHtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldCA9IHJlbmRlckNvbnRleHQucmVuZGVyVGFyZ2V0O1xuXHRcdGNvbnN0IHJlbmRlclRhcmdldERhdGEgPSB0aGlzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRsZXQgZGVzY3JpcHRvcnMgPSByZW5kZXJUYXJnZXREYXRhLmRlc2NyaXB0b3JzO1xuXG5cdFx0aWYgKCBkZXNjcmlwdG9ycyA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRyZW5kZXJUYXJnZXREYXRhLndpZHRoICE9PSByZW5kZXJUYXJnZXQud2lkdGggfHxcblx0XHRcdHJlbmRlclRhcmdldERhdGEuaGVpZ2h0ICE9PSByZW5kZXJUYXJnZXQuaGVpZ2h0IHx8XG5cdFx0XHRyZW5kZXJUYXJnZXREYXRhLmRpbWVuc2lvbnMgIT09IHJlbmRlclRhcmdldC5kaW1lbnNpb25zIHx8XG5cdFx0XHRyZW5kZXJUYXJnZXREYXRhLmFjdGl2ZU1pcG1hcExldmVsICE9PSByZW5kZXJDb250ZXh0LmFjdGl2ZU1pcG1hcExldmVsIHx8XG5cdFx0XHRyZW5kZXJUYXJnZXREYXRhLmFjdGl2ZUN1YmVGYWNlICE9PSByZW5kZXJDb250ZXh0LmFjdGl2ZUN1YmVGYWNlIHx8XG5cdFx0XHRyZW5kZXJUYXJnZXREYXRhLnNhbXBsZXMgIT09IHJlbmRlclRhcmdldC5zYW1wbGVzXG5cdFx0KSB7XG5cblx0XHRcdGRlc2NyaXB0b3JzID0ge307XG5cblx0XHRcdHJlbmRlclRhcmdldERhdGEuZGVzY3JpcHRvcnMgPSBkZXNjcmlwdG9ycztcblxuXHRcdFx0Ly8gZGlzcG9zZVxuXG5cdFx0XHRjb25zdCBvbkRpc3Bvc2UgPSAoKSA9PiB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25EaXNwb3NlICk7XG5cdFx0XHRcdHRoaXMuZGVsZXRlKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuaGFzRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkRpc3Bvc2UgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25EaXNwb3NlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGNhY2hlS2V5ID0gcmVuZGVyQ29udGV4dC5nZXRDYWNoZUtleSgpO1xuXHRcdGxldCBkZXNjcmlwdG9yQmFzZSA9IGRlc2NyaXB0b3JzWyBjYWNoZUtleSBdO1xuXG5cdFx0aWYgKCBkZXNjcmlwdG9yQmFzZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlcyA9IHJlbmRlckNvbnRleHQudGV4dHVyZXM7XG5cdFx0XHRjb25zdCB0ZXh0dXJlVmlld3MgPSBbXTtcblxuXHRcdFx0bGV0IHNsaWNlSW5kZXg7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlRGF0YSA9IHRoaXMuZ2V0KCB0ZXh0dXJlc1sgaSBdICk7XG5cblx0XHRcdFx0Y29uc3Qgdmlld0Rlc2NyaXB0b3IgPSB7XG5cdFx0XHRcdFx0bGFiZWw6IGBjb2xvckF0dGFjaG1lbnRfJHsgaSB9YCxcblx0XHRcdFx0XHRiYXNlTWlwTGV2ZWw6IHJlbmRlckNvbnRleHQuYWN0aXZlTWlwbWFwTGV2ZWwsXG5cdFx0XHRcdFx0bWlwTGV2ZWxDb3VudDogMSxcblx0XHRcdFx0XHRiYXNlQXJyYXlMYXllcjogcmVuZGVyQ29udGV4dC5hY3RpdmVDdWJlRmFjZSxcblx0XHRcdFx0XHRhcnJheUxheWVyQ291bnQ6IDEsXG5cdFx0XHRcdFx0ZGltZW5zaW9uOiBHUFVUZXh0dXJlVmlld0RpbWVuc2lvbi5Ud29EXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNSZW5kZXJUYXJnZXQzRCApIHtcblxuXHRcdFx0XHRcdHNsaWNlSW5kZXggPSByZW5kZXJDb250ZXh0LmFjdGl2ZUN1YmVGYWNlO1xuXG5cdFx0XHRcdFx0dmlld0Rlc2NyaXB0b3IuYmFzZUFycmF5TGF5ZXIgPSAwO1xuXHRcdFx0XHRcdHZpZXdEZXNjcmlwdG9yLmRpbWVuc2lvbiA9IEdQVVRleHR1cmVWaWV3RGltZW5zaW9uLlRocmVlRDtcblx0XHRcdFx0XHR2aWV3RGVzY3JpcHRvci5kZXB0aE9yQXJyYXlMYXllcnMgPSB0ZXh0dXJlc1sgaSBdLmltYWdlLmRlcHRoO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5pc1JlbmRlclRhcmdldEFycmF5ICkge1xuXG5cdFx0XHRcdFx0dmlld0Rlc2NyaXB0b3IuZGltZW5zaW9uID0gR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24uVHdvREFycmF5O1xuXHRcdFx0XHRcdHZpZXdEZXNjcmlwdG9yLmRlcHRoT3JBcnJheUxheWVycyA9IHRleHR1cmVzWyBpIF0uaW1hZ2UuZGVwdGg7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVWaWV3ID0gdGV4dHVyZURhdGEudGV4dHVyZS5jcmVhdGVWaWV3KCB2aWV3RGVzY3JpcHRvciApO1xuXG5cdFx0XHRcdGxldCB2aWV3LCByZXNvbHZlVGFyZ2V0O1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZURhdGEubXNhYVRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHZpZXcgPSB0ZXh0dXJlRGF0YS5tc2FhVGV4dHVyZS5jcmVhdGVWaWV3KCk7XG5cdFx0XHRcdFx0cmVzb2x2ZVRhcmdldCA9IHRleHR1cmVWaWV3O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR2aWV3ID0gdGV4dHVyZVZpZXc7XG5cdFx0XHRcdFx0cmVzb2x2ZVRhcmdldCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZVZpZXdzLnB1c2goIHtcblx0XHRcdFx0XHR2aWV3LFxuXHRcdFx0XHRcdHJlc29sdmVUYXJnZXQsXG5cdFx0XHRcdFx0ZGVwdGhTbGljZTogc2xpY2VJbmRleFxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVzY3JpcHRvckJhc2UgPSB7IHRleHR1cmVWaWV3cyB9O1xuXG5cdFx0XHRpZiAoIHJlbmRlckNvbnRleHQuZGVwdGggKSB7XG5cblx0XHRcdFx0Y29uc3QgZGVwdGhUZXh0dXJlRGF0YSA9IHRoaXMuZ2V0KCByZW5kZXJDb250ZXh0LmRlcHRoVGV4dHVyZSApO1xuXHRcdFx0XHRkZXNjcmlwdG9yQmFzZS5kZXB0aFN0ZW5jaWxWaWV3ID0gZGVwdGhUZXh0dXJlRGF0YS50ZXh0dXJlLmNyZWF0ZVZpZXcoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZXNjcmlwdG9yc1sgY2FjaGVLZXkgXSA9IGRlc2NyaXB0b3JCYXNlO1xuXG5cdFx0XHRyZW5kZXJUYXJnZXREYXRhLndpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0cmVuZGVyVGFyZ2V0RGF0YS5oZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0O1xuXHRcdFx0cmVuZGVyVGFyZ2V0RGF0YS5zYW1wbGVzID0gcmVuZGVyVGFyZ2V0LnNhbXBsZXM7XG5cdFx0XHRyZW5kZXJUYXJnZXREYXRhLmFjdGl2ZU1pcG1hcExldmVsID0gcmVuZGVyQ29udGV4dC5hY3RpdmVNaXBtYXBMZXZlbDtcblx0XHRcdHJlbmRlclRhcmdldERhdGEuYWN0aXZlQ3ViZUZhY2UgPSByZW5kZXJDb250ZXh0LmFjdGl2ZUN1YmVGYWNlO1xuXHRcdFx0cmVuZGVyVGFyZ2V0RGF0YS5kaW1lbnNpb25zID0gcmVuZGVyVGFyZ2V0LmRpbWVuc2lvbnM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBkZXNjcmlwdG9yID0ge1xuXHRcdFx0Y29sb3JBdHRhY2htZW50czogW11cblx0XHR9O1xuXG5cdFx0Ly8gQXBwbHkgZHluYW1pYyBwcm9wZXJ0aWVzIHRvIGNhY2hlZCB2aWV3c1xuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRlc2NyaXB0b3JCYXNlLnRleHR1cmVWaWV3cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHZpZXdJbmZvID0gZGVzY3JpcHRvckJhc2UudGV4dHVyZVZpZXdzWyBpIF07XG5cblx0XHRcdGxldCBjbGVhclZhbHVlID0geyByOiAwLCBnOiAwLCBiOiAwLCBhOiAxIH07XG5cdFx0XHRpZiAoIGkgPT09IDAgJiYgY29sb3JBdHRhY2htZW50c0NvbmZpZy5jbGVhclZhbHVlICkge1xuXG5cdFx0XHRcdGNsZWFyVmFsdWUgPSBjb2xvckF0dGFjaG1lbnRzQ29uZmlnLmNsZWFyVmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVzY3JpcHRvci5jb2xvckF0dGFjaG1lbnRzLnB1c2goIHtcblx0XHRcdFx0dmlldzogdmlld0luZm8udmlldyxcblx0XHRcdFx0ZGVwdGhTbGljZTogdmlld0luZm8uZGVwdGhTbGljZSxcblx0XHRcdFx0cmVzb2x2ZVRhcmdldDogdmlld0luZm8ucmVzb2x2ZVRhcmdldCxcblx0XHRcdFx0bG9hZE9wOiBjb2xvckF0dGFjaG1lbnRzQ29uZmlnLmxvYWRPcCB8fCBHUFVMb2FkT3AuTG9hZCxcblx0XHRcdFx0c3RvcmVPcDogY29sb3JBdHRhY2htZW50c0NvbmZpZy5zdG9yZU9wIHx8IEdQVVN0b3JlT3AuU3RvcmUsXG5cdFx0XHRcdGNsZWFyVmFsdWU6IGNsZWFyVmFsdWVcblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggZGVzY3JpcHRvckJhc2UuZGVwdGhTdGVuY2lsVmlldyApIHtcblxuXHRcdFx0ZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0ge1xuXHRcdFx0XHR2aWV3OiBkZXNjcmlwdG9yQmFzZS5kZXB0aFN0ZW5jaWxWaWV3XG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlc2NyaXB0b3I7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBleGVjdXRlZCBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgcmVuZGVyIGNhbGwgYW5kIHByZXBhcmVzXG5cdCAqIHRoZSBXZWJHUFUgc3RhdGUgZm9yIHVwY29taW5nIHJlbmRlciBjYWxsc1xuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqL1xuXHRiZWdpblJlbmRlciggcmVuZGVyQ29udGV4dCApIHtcblxuXHRcdGNvbnN0IHJlbmRlckNvbnRleHREYXRhID0gdGhpcy5nZXQoIHJlbmRlckNvbnRleHQgKTtcblxuXHRcdGNvbnN0IGRldmljZSA9IHRoaXMuZGV2aWNlO1xuXHRcdGNvbnN0IG9jY2x1c2lvblF1ZXJ5Q291bnQgPSByZW5kZXJDb250ZXh0Lm9jY2x1c2lvblF1ZXJ5Q291bnQ7XG5cblx0XHRsZXQgb2NjbHVzaW9uUXVlcnlTZXQ7XG5cblx0XHRpZiAoIG9jY2x1c2lvblF1ZXJ5Q291bnQgPiAwICkge1xuXG5cdFx0XHRpZiAoIHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRPY2NsdXNpb25RdWVyeVNldCApIHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRPY2NsdXNpb25RdWVyeVNldC5kZXN0cm95KCk7XG5cdFx0XHRpZiAoIHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRPY2NsdXNpb25RdWVyeUJ1ZmZlciApIHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRPY2NsdXNpb25RdWVyeUJ1ZmZlci5kZXN0cm95KCk7XG5cblx0XHRcdC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHF1ZXJpZXMuIFRoZSByZW5kZXJDb250ZXh0RGF0YSBwcm9wZXJ0eVxuXHRcdFx0Ly8gY2FuIGJlIGNoYW5nZWQgYnkgYW5vdGhlciByZW5kZXIgcGFzcyBiZWZvcmUgdGhlIGJ1ZmZlci5tYXBBc3ljKCkgY29tcGxldGVzLlxuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEuY3VycmVudE9jY2x1c2lvblF1ZXJ5U2V0ID0gcmVuZGVyQ29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlTZXQ7XG5cdFx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50T2NjbHVzaW9uUXVlcnlCdWZmZXIgPSByZW5kZXJDb250ZXh0RGF0YS5vY2NsdXNpb25RdWVyeUJ1ZmZlcjtcblx0XHRcdHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRPY2NsdXNpb25RdWVyeU9iamVjdHMgPSByZW5kZXJDb250ZXh0RGF0YS5vY2NsdXNpb25RdWVyeU9iamVjdHM7XG5cblx0XHRcdC8vXG5cblx0XHRcdG9jY2x1c2lvblF1ZXJ5U2V0ID0gZGV2aWNlLmNyZWF0ZVF1ZXJ5U2V0KCB7IHR5cGU6ICdvY2NsdXNpb24nLCBjb3VudDogb2NjbHVzaW9uUXVlcnlDb3VudCwgbGFiZWw6IGBvY2NsdXNpb25RdWVyeVNldF8keyByZW5kZXJDb250ZXh0LmlkIH1gIH0gKTtcblxuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlTZXQgPSBvY2NsdXNpb25RdWVyeVNldDtcblx0XHRcdHJlbmRlckNvbnRleHREYXRhLm9jY2x1c2lvblF1ZXJ5SW5kZXggPSAwO1xuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlPYmplY3RzID0gbmV3IEFycmF5KCBvY2NsdXNpb25RdWVyeUNvdW50ICk7XG5cblx0XHRcdHJlbmRlckNvbnRleHREYXRhLmxhc3RPY2NsdXNpb25PYmplY3QgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGRlc2NyaXB0b3I7XG5cblx0XHRpZiAoIHJlbmRlckNvbnRleHQudGV4dHVyZXMgPT09IG51bGwgKSB7XG5cblx0XHRcdGRlc2NyaXB0b3IgPSB0aGlzLl9nZXREZWZhdWx0UmVuZGVyUGFzc0Rlc2NyaXB0b3IoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRlc2NyaXB0b3IgPSB0aGlzLl9nZXRSZW5kZXJQYXNzRGVzY3JpcHRvciggcmVuZGVyQ29udGV4dCwgeyBsb2FkT3A6IEdQVUxvYWRPcC5Mb2FkIH0gKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuaW5pdFRpbWVzdGFtcFF1ZXJ5KCByZW5kZXJDb250ZXh0LCBkZXNjcmlwdG9yICk7XG5cblx0XHRkZXNjcmlwdG9yLm9jY2x1c2lvblF1ZXJ5U2V0ID0gb2NjbHVzaW9uUXVlcnlTZXQ7XG5cblx0XHRjb25zdCBkZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0gZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxBdHRhY2htZW50O1xuXG5cdFx0aWYgKCByZW5kZXJDb250ZXh0LnRleHR1cmVzICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBjb2xvckF0dGFjaG1lbnRzID0gZGVzY3JpcHRvci5jb2xvckF0dGFjaG1lbnRzO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb2xvckF0dGFjaG1lbnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjb2xvckF0dGFjaG1lbnQgPSBjb2xvckF0dGFjaG1lbnRzWyBpIF07XG5cblx0XHRcdFx0aWYgKCByZW5kZXJDb250ZXh0LmNsZWFyQ29sb3IgKSB7XG5cblx0XHRcdFx0XHRjb2xvckF0dGFjaG1lbnQuY2xlYXJWYWx1ZSA9IGkgPT09IDAgPyByZW5kZXJDb250ZXh0LmNsZWFyQ29sb3JWYWx1ZSA6IHsgcjogMCwgZzogMCwgYjogMCwgYTogMSB9O1xuXHRcdFx0XHRcdGNvbG9yQXR0YWNobWVudC5sb2FkT3AgPSBHUFVMb2FkT3AuQ2xlYXI7XG5cdFx0XHRcdFx0Y29sb3JBdHRhY2htZW50LnN0b3JlT3AgPSBHUFVTdG9yZU9wLlN0b3JlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb2xvckF0dGFjaG1lbnQubG9hZE9wID0gR1BVTG9hZE9wLkxvYWQ7XG5cdFx0XHRcdFx0Y29sb3JBdHRhY2htZW50LnN0b3JlT3AgPSBHUFVTdG9yZU9wLlN0b3JlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgY29sb3JBdHRhY2htZW50ID0gZGVzY3JpcHRvci5jb2xvckF0dGFjaG1lbnRzWyAwIF07XG5cblx0XHRcdGlmICggcmVuZGVyQ29udGV4dC5jbGVhckNvbG9yICkge1xuXG5cdFx0XHRcdGNvbG9yQXR0YWNobWVudC5jbGVhclZhbHVlID0gcmVuZGVyQ29udGV4dC5jbGVhckNvbG9yVmFsdWU7XG5cdFx0XHRcdGNvbG9yQXR0YWNobWVudC5sb2FkT3AgPSBHUFVMb2FkT3AuQ2xlYXI7XG5cdFx0XHRcdGNvbG9yQXR0YWNobWVudC5zdG9yZU9wID0gR1BVU3RvcmVPcC5TdG9yZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb2xvckF0dGFjaG1lbnQubG9hZE9wID0gR1BVTG9hZE9wLkxvYWQ7XG5cdFx0XHRcdGNvbG9yQXR0YWNobWVudC5zdG9yZU9wID0gR1BVU3RvcmVPcC5TdG9yZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggcmVuZGVyQ29udGV4dC5kZXB0aCApIHtcblxuXHRcdFx0aWYgKCByZW5kZXJDb250ZXh0LmNsZWFyRGVwdGggKSB7XG5cblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudC5kZXB0aENsZWFyVmFsdWUgPSByZW5kZXJDb250ZXh0LmNsZWFyRGVwdGhWYWx1ZTtcblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudC5kZXB0aExvYWRPcCA9IEdQVUxvYWRPcC5DbGVhcjtcblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudC5kZXB0aFN0b3JlT3AgPSBHUFVTdG9yZU9wLlN0b3JlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQuZGVwdGhMb2FkT3AgPSBHUFVMb2FkT3AuTG9hZDtcblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudC5kZXB0aFN0b3JlT3AgPSBHUFVTdG9yZU9wLlN0b3JlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlckNvbnRleHQuc3RlbmNpbCApIHtcblxuXHRcdFx0aWYgKCByZW5kZXJDb250ZXh0LmNsZWFyU3RlbmNpbCApIHtcblxuXHRcdFx0XHRkZXB0aFN0ZW5jaWxBdHRhY2htZW50LnN0ZW5jaWxDbGVhclZhbHVlID0gcmVuZGVyQ29udGV4dC5jbGVhclN0ZW5jaWxWYWx1ZTtcblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudC5zdGVuY2lsTG9hZE9wID0gR1BVTG9hZE9wLkNsZWFyO1xuXHRcdFx0XHRkZXB0aFN0ZW5jaWxBdHRhY2htZW50LnN0ZW5jaWxTdG9yZU9wID0gR1BVU3RvcmVPcC5TdG9yZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkZXB0aFN0ZW5jaWxBdHRhY2htZW50LnN0ZW5jaWxMb2FkT3AgPSBHUFVMb2FkT3AuTG9hZDtcblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudC5zdGVuY2lsU3RvcmVPcCA9IEdQVVN0b3JlT3AuU3RvcmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjb25zdCBlbmNvZGVyID0gZGV2aWNlLmNyZWF0ZUNvbW1hbmRFbmNvZGVyKCB7IGxhYmVsOiAncmVuZGVyQ29udGV4dF8nICsgcmVuZGVyQ29udGV4dC5pZCB9ICk7XG5cdFx0Y29uc3QgY3VycmVudFBhc3MgPSBlbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyggZGVzY3JpcHRvciApO1xuXG5cdFx0Ly9cblxuXHRcdHJlbmRlckNvbnRleHREYXRhLmRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yO1xuXHRcdHJlbmRlckNvbnRleHREYXRhLmVuY29kZXIgPSBlbmNvZGVyO1xuXHRcdHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRQYXNzID0gY3VycmVudFBhc3M7XG5cdFx0cmVuZGVyQ29udGV4dERhdGEuY3VycmVudFNldHMgPSB7IGF0dHJpYnV0ZXM6IHt9LCBiaW5kaW5nR3JvdXBzOiBbXSwgcGlwZWxpbmU6IG51bGwsIGluZGV4OiBudWxsIH07XG5cdFx0cmVuZGVyQ29udGV4dERhdGEucmVuZGVyQnVuZGxlcyA9IFtdO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggcmVuZGVyQ29udGV4dC52aWV3cG9ydCApIHtcblxuXHRcdFx0dGhpcy51cGRhdGVWaWV3cG9ydCggcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJDb250ZXh0LnNjaXNzb3IgKSB7XG5cblx0XHRcdGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gcmVuZGVyQ29udGV4dC5zY2lzc29yVmFsdWU7XG5cblx0XHRcdGN1cnJlbnRQYXNzLnNldFNjaXNzb3JSZWN0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBpcyBleGVjdXRlZCBhdCB0aGUgZW5kIG9mIGEgcmVuZGVyIGNhbGwgYW5kIGZpbmFsaXplcyB3b3JrXG5cdCAqIGFmdGVyIGRyYXcgY2FsbHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICovXG5cdGZpbmlzaFJlbmRlciggcmVuZGVyQ29udGV4dCApIHtcblxuXHRcdGNvbnN0IHJlbmRlckNvbnRleHREYXRhID0gdGhpcy5nZXQoIHJlbmRlckNvbnRleHQgKTtcblx0XHRjb25zdCBvY2NsdXNpb25RdWVyeUNvdW50ID0gcmVuZGVyQ29udGV4dC5vY2NsdXNpb25RdWVyeUNvdW50O1xuXG5cdFx0aWYgKCByZW5kZXJDb250ZXh0RGF0YS5yZW5kZXJCdW5kbGVzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRQYXNzLmV4ZWN1dGVCdW5kbGVzKCByZW5kZXJDb250ZXh0RGF0YS5yZW5kZXJCdW5kbGVzICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9jY2x1c2lvblF1ZXJ5Q291bnQgPiByZW5kZXJDb250ZXh0RGF0YS5vY2NsdXNpb25RdWVyeUluZGV4ICkge1xuXG5cdFx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50UGFzcy5lbmRPY2NsdXNpb25RdWVyeSgpO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyQ29udGV4dERhdGEuY3VycmVudFBhc3MuZW5kKCk7XG5cblx0XHRpZiAoIG9jY2x1c2lvblF1ZXJ5Q291bnQgPiAwICkge1xuXG5cdFx0XHRjb25zdCBidWZmZXJTaXplID0gb2NjbHVzaW9uUXVlcnlDb3VudCAqIDg7IC8vIDggYnl0ZSBlbnRyaWVzIGZvciBxdWVyeSByZXN1bHRzXG5cblx0XHRcdC8vXG5cblx0XHRcdGxldCBxdWVyeVJlc29sdmVCdWZmZXIgPSB0aGlzLm9jY2x1ZGVkUmVzb2x2ZUNhY2hlLmdldCggYnVmZmVyU2l6ZSApO1xuXG5cdFx0XHRpZiAoIHF1ZXJ5UmVzb2x2ZUJ1ZmZlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHF1ZXJ5UmVzb2x2ZUJ1ZmZlciA9IHRoaXMuZGV2aWNlLmNyZWF0ZUJ1ZmZlcihcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRzaXplOiBidWZmZXJTaXplLFxuXHRcdFx0XHRcdFx0dXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLlFVRVJZX1JFU09MVkUgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX1NSQ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHR0aGlzLm9jY2x1ZGVkUmVzb2x2ZUNhY2hlLnNldCggYnVmZmVyU2l6ZSwgcXVlcnlSZXNvbHZlQnVmZmVyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0Y29uc3QgcmVhZEJ1ZmZlciA9IHRoaXMuZGV2aWNlLmNyZWF0ZUJ1ZmZlcihcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHNpemU6IGJ1ZmZlclNpemUsXG5cdFx0XHRcdFx0dXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNUIHwgR1BVQnVmZmVyVXNhZ2UuTUFQX1JFQURcblx0XHRcdFx0fVxuXHRcdFx0KTtcblxuXHRcdFx0Ly8gdHdvIGJ1ZmZlcnMgcmVxdWlyZWQgaGVyZSAtIFdlYkdQVSBkb2Vzbid0IGFsbG93IHVzYWdlIG9mIFFVRVJZX1JFU09MVkUgJiBNQVBfUkVBRCB0byBiZSBjb21iaW5lZFxuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEuZW5jb2Rlci5yZXNvbHZlUXVlcnlTZXQoIHJlbmRlckNvbnRleHREYXRhLm9jY2x1c2lvblF1ZXJ5U2V0LCAwLCBvY2NsdXNpb25RdWVyeUNvdW50LCBxdWVyeVJlc29sdmVCdWZmZXIsIDAgKTtcblx0XHRcdHJlbmRlckNvbnRleHREYXRhLmVuY29kZXIuY29weUJ1ZmZlclRvQnVmZmVyKCBxdWVyeVJlc29sdmVCdWZmZXIsIDAsIHJlYWRCdWZmZXIsIDAsIGJ1ZmZlclNpemUgKTtcblxuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlCdWZmZXIgPSByZWFkQnVmZmVyO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHR0aGlzLnJlc29sdmVPY2NsdWRlZEFzeW5jKCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmRldmljZS5xdWV1ZS5zdWJtaXQoIFsgcmVuZGVyQ29udGV4dERhdGEuZW5jb2Rlci5maW5pc2goKSBdICk7XG5cblxuXHRcdC8vXG5cblx0XHRpZiAoIHJlbmRlckNvbnRleHQudGV4dHVyZXMgIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyQ29udGV4dC50ZXh0dXJlcztcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmUgPSB0ZXh0dXJlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnRleHR1cmVVdGlscy5nZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiAzRCBvYmplY3QgaXMgZnVsbHkgb2NjbHVkZWQgYnkgb3RoZXJcblx0ICogM0Qgb2JqZWN0cyBpbiB0aGUgc2NlbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0byB0ZXN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSAzRCBvYmplY3QgaXMgZnVsbHkgb2NjbHVkZWQgb3Igbm90LlxuXHQgKi9cblx0aXNPY2NsdWRlZCggcmVuZGVyQ29udGV4dCwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyQ29udGV4dERhdGEgPSB0aGlzLmdldCggcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0cmV0dXJuIHJlbmRlckNvbnRleHREYXRhLm9jY2x1ZGVkICYmIHJlbmRlckNvbnRleHREYXRhLm9jY2x1ZGVkLmhhcyggb2JqZWN0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBwcm9jZXNzZXMgdGhlIHJlc3VsdCBvZiBvY2NsdXNpb24gcXVlcmllcyBhbmQgd3JpdGVzIGl0XG5cdCAqIGludG8gcmVuZGVyIGNvbnRleHQgZGF0YS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgb2NjbHVzaW9uIHF1ZXJ5IHJlc3VsdHMgaGF2ZSBiZWVuIHByb2Nlc3NlZC5cblx0ICovXG5cdGFzeW5jIHJlc29sdmVPY2NsdWRlZEFzeW5jKCByZW5kZXJDb250ZXh0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyQ29udGV4dERhdGEgPSB0aGlzLmdldCggcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0Ly8gaGFuZGxlIG9jY2x1c2lvbiBxdWVyeSByZXN1bHRzXG5cblx0XHRjb25zdCB7IGN1cnJlbnRPY2NsdXNpb25RdWVyeUJ1ZmZlciwgY3VycmVudE9jY2x1c2lvblF1ZXJ5T2JqZWN0cyB9ID0gcmVuZGVyQ29udGV4dERhdGE7XG5cblx0XHRpZiAoIGN1cnJlbnRPY2NsdXNpb25RdWVyeUJ1ZmZlciAmJiBjdXJyZW50T2NjbHVzaW9uUXVlcnlPYmplY3RzICkge1xuXG5cdFx0XHRjb25zdCBvY2NsdWRlZCA9IG5ldyBXZWFrU2V0KCk7XG5cblx0XHRcdHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRPY2NsdXNpb25RdWVyeU9iamVjdHMgPSBudWxsO1xuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEuY3VycmVudE9jY2x1c2lvblF1ZXJ5QnVmZmVyID0gbnVsbDtcblxuXHRcdFx0YXdhaXQgY3VycmVudE9jY2x1c2lvblF1ZXJ5QnVmZmVyLm1hcEFzeW5jKCBHUFVNYXBNb2RlLlJFQUQgKTtcblxuXHRcdFx0Y29uc3QgYnVmZmVyID0gY3VycmVudE9jY2x1c2lvblF1ZXJ5QnVmZmVyLmdldE1hcHBlZFJhbmdlKCk7XG5cdFx0XHRjb25zdCByZXN1bHRzID0gbmV3IEJpZ1VpbnQ2NEFycmF5KCBidWZmZXIgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY3VycmVudE9jY2x1c2lvblF1ZXJ5T2JqZWN0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCByZXN1bHRzWyBpIF0gPT09IEJpZ0ludCggMCApICkge1xuXG5cdFx0XHRcdFx0b2NjbHVkZWQuYWRkKCBjdXJyZW50T2NjbHVzaW9uUXVlcnlPYmplY3RzWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y3VycmVudE9jY2x1c2lvblF1ZXJ5QnVmZmVyLmRlc3Ryb3koKTtcblxuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEub2NjbHVkZWQgPSBvY2NsdWRlZDtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHZpZXdwb3J0IHdpdGggdGhlIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiByZW5kZXIgY29udGV4dC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJDb250ZXh0fSByZW5kZXJDb250ZXh0IC0gVGhlIHJlbmRlciBjb250ZXh0LlxuXHQgKi9cblx0dXBkYXRlVmlld3BvcnQoIHJlbmRlckNvbnRleHQgKSB7XG5cblx0XHRjb25zdCB7IGN1cnJlbnRQYXNzIH0gPSB0aGlzLmdldCggcmVuZGVyQ29udGV4dCApO1xuXHRcdGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCwgbWluRGVwdGgsIG1heERlcHRoIH0gPSByZW5kZXJDb250ZXh0LnZpZXdwb3J0VmFsdWU7XG5cblx0XHRjdXJyZW50UGFzcy5zZXRWaWV3cG9ydCggeCwgeSwgd2lkdGgsIGhlaWdodCwgbWluRGVwdGgsIG1heERlcHRoICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjbGVhciBjb2xvciBhbmQgYWxwaGEgaW50byBhIHNpbmdsZVxuXHQgKiBjb2xvciBvYmplY3QuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0NvbG9yNH0gVGhlIGNsZWFyIGNvbG9yLlxuXHQgKi9cblx0Z2V0Q2xlYXJDb2xvcigpIHtcblxuXHRcdGNvbnN0IGNsZWFyQ29sb3IgPSBzdXBlci5nZXRDbGVhckNvbG9yKCk7XG5cblx0XHQvLyBvbmx5IHByZW11bHRpcGx5IGFscGhhIHdoZW4gYWxwaGFNb2RlIGlzIFwicHJlbXVsdGlwbGllZFwiXG5cblx0XHRpZiAoIHRoaXMucmVuZGVyZXIuYWxwaGEgPT09IHRydWUgKSB7XG5cblx0XHRcdGNsZWFyQ29sb3IuciAqPSBjbGVhckNvbG9yLmE7XG5cdFx0XHRjbGVhckNvbG9yLmcgKj0gY2xlYXJDb2xvci5hO1xuXHRcdFx0Y2xlYXJDb2xvci5iICo9IGNsZWFyQ29sb3IuYTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjbGVhckNvbG9yO1xuXG5cdH1cblxuXHQvKipcblx0ICogUGVyZm9ybXMgYSBjbGVhciBvcGVyYXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gY29sb3IgLSBXaGV0aGVyIHRoZSBjb2xvciBidWZmZXIgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGRlcHRoIC0gV2hldGhlciB0aGUgZGVwdGggYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBzdGVuY2lsIC0gV2hldGhlciB0aGUgc3RlbmNpbCBidWZmZXIgc2hvdWxkIGJlIGNsZWFyZWQgb3Igbm90LlxuXHQgKiBAcGFyYW0gez9SZW5kZXJDb250ZXh0fSBbcmVuZGVyVGFyZ2V0Q29udGV4dD1udWxsXSAtIFRoZSByZW5kZXIgY29udGV4dCBvZiB0aGUgY3VycmVudCBzZXQgcmVuZGVyIHRhcmdldC5cblx0ICovXG5cdGNsZWFyKCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwsIHJlbmRlclRhcmdldENvbnRleHQgPSBudWxsICkge1xuXG5cdFx0Y29uc3QgZGV2aWNlID0gdGhpcy5kZXZpY2U7XG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXG5cdFx0bGV0IGNvbG9yQXR0YWNobWVudHMgPSBbXTtcblx0XHRsZXQgZGVwdGhTdGVuY2lsQXR0YWNobWVudDtcblx0XHRsZXQgY2xlYXJWYWx1ZTtcblxuXHRcdGxldCBzdXBwb3J0c0RlcHRoO1xuXHRcdGxldCBzdXBwb3J0c1N0ZW5jaWw7XG5cblx0XHRpZiAoIGNvbG9yICkge1xuXG5cdFx0XHRjb25zdCBjbGVhckNvbG9yID0gdGhpcy5nZXRDbGVhckNvbG9yKCk7XG5cdFx0XHRjbGVhclZhbHVlID0geyByOiBjbGVhckNvbG9yLnIsIGc6IGNsZWFyQ29sb3IuZywgYjogY2xlYXJDb2xvci5iLCBhOiBjbGVhckNvbG9yLmEgfTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0Q29udGV4dCA9PT0gbnVsbCApIHtcblxuXHRcdFx0c3VwcG9ydHNEZXB0aCA9IHJlbmRlcmVyLmRlcHRoO1xuXHRcdFx0c3VwcG9ydHNTdGVuY2lsID0gcmVuZGVyZXIuc3RlbmNpbDtcblxuXHRcdFx0Y29uc3QgZGVzY3JpcHRvciA9IHRoaXMuX2dldERlZmF1bHRSZW5kZXJQYXNzRGVzY3JpcHRvcigpO1xuXG5cdFx0XHRpZiAoIGNvbG9yICkge1xuXG5cdFx0XHRcdGNvbG9yQXR0YWNobWVudHMgPSBkZXNjcmlwdG9yLmNvbG9yQXR0YWNobWVudHM7XG5cblx0XHRcdFx0Y29uc3QgY29sb3JBdHRhY2htZW50ID0gY29sb3JBdHRhY2htZW50c1sgMCBdO1xuXG5cdFx0XHRcdGNvbG9yQXR0YWNobWVudC5jbGVhclZhbHVlID0gY2xlYXJWYWx1ZTtcblx0XHRcdFx0Y29sb3JBdHRhY2htZW50LmxvYWRPcCA9IEdQVUxvYWRPcC5DbGVhcjtcblx0XHRcdFx0Y29sb3JBdHRhY2htZW50LnN0b3JlT3AgPSBHUFVTdG9yZU9wLlN0b3JlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3VwcG9ydHNEZXB0aCB8fCBzdXBwb3J0c1N0ZW5jaWwgKSB7XG5cblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudCA9IGRlc2NyaXB0b3IuZGVwdGhTdGVuY2lsQXR0YWNobWVudDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c3VwcG9ydHNEZXB0aCA9IHJlbmRlclRhcmdldENvbnRleHQuZGVwdGg7XG5cdFx0XHRzdXBwb3J0c1N0ZW5jaWwgPSByZW5kZXJUYXJnZXRDb250ZXh0LnN0ZW5jaWw7XG5cblx0XHRcdGNvbnN0IGNsZWFyQ29uZmlnID0ge1xuXHRcdFx0XHRsb2FkT3A6IGNvbG9yID8gR1BVTG9hZE9wLkNsZWFyIDogR1BVTG9hZE9wLkxvYWQsXG5cdFx0XHRcdGNsZWFyVmFsdWU6IGNvbG9yID8gY2xlYXJWYWx1ZSA6IHVuZGVmaW5lZFxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKCBzdXBwb3J0c0RlcHRoICkge1xuXG5cdFx0XHRcdGNsZWFyQ29uZmlnLmRlcHRoTG9hZE9wID0gZGVwdGggPyBHUFVMb2FkT3AuQ2xlYXIgOiBHUFVMb2FkT3AuTG9hZDtcblx0XHRcdFx0Y2xlYXJDb25maWcuZGVwdGhDbGVhclZhbHVlID0gZGVwdGggPyByZW5kZXJlci5nZXRDbGVhckRlcHRoKCkgOiB1bmRlZmluZWQ7XG5cdFx0XHRcdGNsZWFyQ29uZmlnLmRlcHRoU3RvcmVPcCA9IEdQVVN0b3JlT3AuU3RvcmU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzdXBwb3J0c1N0ZW5jaWwgKSB7XG5cblx0XHRcdFx0Y2xlYXJDb25maWcuc3RlbmNpbExvYWRPcCA9IHN0ZW5jaWwgPyBHUFVMb2FkT3AuQ2xlYXIgOiBHUFVMb2FkT3AuTG9hZDtcblx0XHRcdFx0Y2xlYXJDb25maWcuc3RlbmNpbENsZWFyVmFsdWUgPSBzdGVuY2lsID8gcmVuZGVyZXIuZ2V0Q2xlYXJTdGVuY2lsKCkgOiB1bmRlZmluZWQ7XG5cdFx0XHRcdGNsZWFyQ29uZmlnLnN0ZW5jaWxTdG9yZU9wID0gR1BVU3RvcmVPcC5TdG9yZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBkZXNjcmlwdG9yID0gdGhpcy5fZ2V0UmVuZGVyUGFzc0Rlc2NyaXB0b3IoIHJlbmRlclRhcmdldENvbnRleHQsIGNsZWFyQ29uZmlnICk7XG5cblx0XHRcdGNvbG9yQXR0YWNobWVudHMgPSBkZXNjcmlwdG9yLmNvbG9yQXR0YWNobWVudHM7XG5cdFx0XHRkZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0gZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxBdHRhY2htZW50O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzdXBwb3J0c0RlcHRoICYmIGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQgJiYgZGVwdGhTdGVuY2lsQXR0YWNobWVudC5kZXB0aExvYWRPcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIGRlcHRoICkge1xuXG5cdFx0XHRcdGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQuZGVwdGhMb2FkT3AgPSBHUFVMb2FkT3AuQ2xlYXI7XG5cdFx0XHRcdGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQuZGVwdGhDbGVhclZhbHVlID0gcmVuZGVyZXIuZ2V0Q2xlYXJEZXB0aCgpO1xuXHRcdFx0XHRkZXB0aFN0ZW5jaWxBdHRhY2htZW50LmRlcHRoU3RvcmVPcCA9IEdQVVN0b3JlT3AuU3RvcmU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudC5kZXB0aExvYWRPcCA9IEdQVUxvYWRPcC5Mb2FkO1xuXHRcdFx0XHRkZXB0aFN0ZW5jaWxBdHRhY2htZW50LmRlcHRoU3RvcmVPcCA9IEdQVVN0b3JlT3AuU3RvcmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHN1cHBvcnRzU3RlbmNpbCAmJiBkZXB0aFN0ZW5jaWxBdHRhY2htZW50ICYmIGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQuc3RlbmNpbExvYWRPcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHN0ZW5jaWwgKSB7XG5cblx0XHRcdFx0ZGVwdGhTdGVuY2lsQXR0YWNobWVudC5zdGVuY2lsTG9hZE9wID0gR1BVTG9hZE9wLkNsZWFyO1xuXHRcdFx0XHRkZXB0aFN0ZW5jaWxBdHRhY2htZW50LnN0ZW5jaWxDbGVhclZhbHVlID0gcmVuZGVyZXIuZ2V0Q2xlYXJTdGVuY2lsKCk7XG5cdFx0XHRcdGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQuc3RlbmNpbFN0b3JlT3AgPSBHUFVTdG9yZU9wLlN0b3JlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQuc3RlbmNpbExvYWRPcCA9IEdQVUxvYWRPcC5Mb2FkO1xuXHRcdFx0XHRkZXB0aFN0ZW5jaWxBdHRhY2htZW50LnN0ZW5jaWxTdG9yZU9wID0gR1BVU3RvcmVPcC5TdG9yZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGVuY29kZXIgPSBkZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoIHsgbGFiZWw6ICdjbGVhcicgfSApO1xuXHRcdGNvbnN0IGN1cnJlbnRQYXNzID0gZW5jb2Rlci5iZWdpblJlbmRlclBhc3MoIHtcblx0XHRcdGNvbG9yQXR0YWNobWVudHMsXG5cdFx0XHRkZXB0aFN0ZW5jaWxBdHRhY2htZW50XG5cdFx0fSApO1xuXG5cdFx0Y3VycmVudFBhc3MuZW5kKCk7XG5cblx0XHRkZXZpY2UucXVldWUuc3VibWl0KCBbIGVuY29kZXIuZmluaXNoKCkgXSApO1xuXG5cdH1cblxuXHQvLyBjb21wdXRlXG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGV4ZWN1dGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBjb21wdXRlIGNhbGwgYW5kXG5cdCAqIHByZXBhcmVzIHRoZSBzdGF0ZSBmb3IgdXBjb21pbmcgY29tcHV0ZSB0YXNrcy5cblx0ICpcblx0ICogQHBhcmFtIHtOb2RlfEFycmF5PE5vZGU+fSBjb21wdXRlR3JvdXAgLSBUaGUgY29tcHV0ZSBub2RlKHMpLlxuXHQgKi9cblx0YmVnaW5Db21wdXRlKCBjb21wdXRlR3JvdXAgKSB7XG5cblx0XHRjb25zdCBncm91cEdQVSA9IHRoaXMuZ2V0KCBjb21wdXRlR3JvdXAgKTtcblxuXG5cdFx0Y29uc3QgZGVzY3JpcHRvciA9IHtcblx0XHRcdGxhYmVsOiAnY29tcHV0ZUdyb3VwXycgKyBjb21wdXRlR3JvdXAuaWRcblx0XHR9O1xuXG5cdFx0dGhpcy5pbml0VGltZXN0YW1wUXVlcnkoIGNvbXB1dGVHcm91cCwgZGVzY3JpcHRvciApO1xuXG5cdFx0Z3JvdXBHUFUuY21kRW5jb2RlckdQVSA9IHRoaXMuZGV2aWNlLmNyZWF0ZUNvbW1hbmRFbmNvZGVyKCB7IGxhYmVsOiAnY29tcHV0ZUdyb3VwXycgKyBjb21wdXRlR3JvdXAuaWQgfSApO1xuXG5cdFx0Z3JvdXBHUFUucGFzc0VuY29kZXJHUFUgPSBncm91cEdQVS5jbWRFbmNvZGVyR1BVLmJlZ2luQ29tcHV0ZVBhc3MoIGRlc2NyaXB0b3IgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVzIGEgY29tcHV0ZSBjb21tYW5kIGZvciB0aGUgZ2l2ZW4gY29tcHV0ZSBub2RlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge05vZGV8QXJyYXk8Tm9kZT59IGNvbXB1dGVHcm91cCAtIFRoZSBncm91cCBvZiBjb21wdXRlIG5vZGVzIG9mIGEgY29tcHV0ZSBjYWxsLiBDYW4gYmUgYSBzaW5nbGUgY29tcHV0ZSBub2RlLlxuXHQgKiBAcGFyYW0ge05vZGV9IGNvbXB1dGVOb2RlIC0gVGhlIGNvbXB1dGUgbm9kZS5cblx0ICogQHBhcmFtIHtBcnJheTxCaW5kR3JvdXA+fSBiaW5kaW5ncyAtIFRoZSBiaW5kaW5ncy5cblx0ICogQHBhcmFtIHtDb21wdXRlUGlwZWxpbmV9IHBpcGVsaW5lIC0gVGhlIGNvbXB1dGUgcGlwZWxpbmUuXG5cdCAqL1xuXHRjb21wdXRlKCBjb21wdXRlR3JvdXAsIGNvbXB1dGVOb2RlLCBiaW5kaW5ncywgcGlwZWxpbmUgKSB7XG5cblx0XHRjb25zdCB7IHBhc3NFbmNvZGVyR1BVIH0gPSB0aGlzLmdldCggY29tcHV0ZUdyb3VwICk7XG5cblx0XHQvLyBwaXBlbGluZVxuXG5cdFx0Y29uc3QgcGlwZWxpbmVHUFUgPSB0aGlzLmdldCggcGlwZWxpbmUgKS5waXBlbGluZTtcblx0XHRwYXNzRW5jb2RlckdQVS5zZXRQaXBlbGluZSggcGlwZWxpbmVHUFUgKTtcblxuXHRcdC8vIGJpbmQgZ3JvdXBzXG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBiaW5kaW5ncy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBiaW5kR3JvdXAgPSBiaW5kaW5nc1sgaSBdO1xuXHRcdFx0Y29uc3QgYmluZGluZ3NEYXRhID0gdGhpcy5nZXQoIGJpbmRHcm91cCApO1xuXG5cdFx0XHRwYXNzRW5jb2RlckdQVS5zZXRCaW5kR3JvdXAoIGksIGJpbmRpbmdzRGF0YS5ncm91cCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF4Q29tcHV0ZVdvcmtncm91cHNQZXJEaW1lbnNpb24gPSB0aGlzLmRldmljZS5saW1pdHMubWF4Q29tcHV0ZVdvcmtncm91cHNQZXJEaW1lbnNpb247XG5cblx0XHRjb25zdCBjb21wdXRlTm9kZURhdGEgPSB0aGlzLmdldCggY29tcHV0ZU5vZGUgKTtcblxuXHRcdGlmICggY29tcHV0ZU5vZGVEYXRhLmRpc3BhdGNoU2l6ZSA9PT0gdW5kZWZpbmVkICkgY29tcHV0ZU5vZGVEYXRhLmRpc3BhdGNoU2l6ZSA9IHsgeDogMCwgeTogMSwgejogMSB9O1xuXG5cdFx0Y29uc3QgeyBkaXNwYXRjaFNpemUgfSA9IGNvbXB1dGVOb2RlRGF0YTtcblxuXHRcdGlmICggY29tcHV0ZU5vZGUuZGlzcGF0Y2hDb3VudCA+IG1heENvbXB1dGVXb3JrZ3JvdXBzUGVyRGltZW5zaW9uICkge1xuXG5cdFx0XHRkaXNwYXRjaFNpemUueCA9IE1hdGgubWluKCBjb21wdXRlTm9kZS5kaXNwYXRjaENvdW50LCBtYXhDb21wdXRlV29ya2dyb3Vwc1BlckRpbWVuc2lvbiApO1xuXHRcdFx0ZGlzcGF0Y2hTaXplLnkgPSBNYXRoLmNlaWwoIGNvbXB1dGVOb2RlLmRpc3BhdGNoQ291bnQgLyBtYXhDb21wdXRlV29ya2dyb3Vwc1BlckRpbWVuc2lvbiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGlzcGF0Y2hTaXplLnggPSBjb21wdXRlTm9kZS5kaXNwYXRjaENvdW50O1xuXG5cdFx0fVxuXG5cdFx0cGFzc0VuY29kZXJHUFUuZGlzcGF0Y2hXb3JrZ3JvdXBzKFxuXHRcdFx0ZGlzcGF0Y2hTaXplLngsXG5cdFx0XHRkaXNwYXRjaFNpemUueSxcblx0XHRcdGRpc3BhdGNoU2l6ZS56XG5cdFx0KTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGV4ZWN1dGVkIGF0IHRoZSBlbmQgb2YgYSBjb21wdXRlIGNhbGwgYW5kXG5cdCAqIGZpbmFsaXplcyB3b3JrIGFmdGVyIGNvbXB1dGUgdGFza3MuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZXxBcnJheTxOb2RlPn0gY29tcHV0ZUdyb3VwIC0gVGhlIGNvbXB1dGUgbm9kZShzKS5cblx0ICovXG5cdGZpbmlzaENvbXB1dGUoIGNvbXB1dGVHcm91cCApIHtcblxuXHRcdGNvbnN0IGdyb3VwRGF0YSA9IHRoaXMuZ2V0KCBjb21wdXRlR3JvdXAgKTtcblxuXHRcdGdyb3VwRGF0YS5wYXNzRW5jb2RlckdQVS5lbmQoKTtcblxuXHRcdHRoaXMuZGV2aWNlLnF1ZXVlLnN1Ym1pdCggWyBncm91cERhdGEuY21kRW5jb2RlckdQVS5maW5pc2goKSBdICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDYW4gYmUgdXNlZCB0byBzeW5jaHJvbml6ZSBDUFUgb3BlcmF0aW9ucyB3aXRoIEdQVSB0YXNrcy4gU28gd2hlbiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQsXG5cdCAqIHRoZSBDUFUgd2FpdHMgZm9yIHRoZSBHUFUgdG8gY29tcGxldGUgaXRzIG9wZXJhdGlvbiAoZS5nLiBhIGNvbXB1dGUgdGFzaykuXG5cdCAqXG5cdCAqIEBhc3luY1xuXHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHN5bmNocm9uaXphdGlvbiBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICovXG5cdGFzeW5jIHdhaXRGb3JHUFUoKSB7XG5cblx0XHRhd2FpdCB0aGlzLmRldmljZS5xdWV1ZS5vblN1Ym1pdHRlZFdvcmtEb25lKCk7XG5cblx0fVxuXG5cdC8vIHJlbmRlciBvYmplY3RcblxuXHQvKipcblx0ICogRXhlY3V0ZXMgYSBkcmF3IGNvbW1hbmQgZm9yIHRoZSBnaXZlbiByZW5kZXIgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlck9iamVjdH0gcmVuZGVyT2JqZWN0IC0gVGhlIHJlbmRlciBvYmplY3QgdG8gZHJhdy5cblx0ICogQHBhcmFtIHtJbmZvfSBpbmZvIC0gSG9sZHMgYSBzZXJpZXMgb2Ygc3RhdGlzdGljYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIEdQVSBtZW1vcnkgYW5kIHRoZSByZW5kZXJpbmcgcHJvY2Vzcy5cblx0ICovXG5cdGRyYXcoIHJlbmRlck9iamVjdCwgaW5mbyApIHtcblxuXHRcdGNvbnN0IHsgb2JqZWN0LCBtYXRlcmlhbCwgY29udGV4dCwgcGlwZWxpbmUgfSA9IHJlbmRlck9iamVjdDtcblx0XHRjb25zdCBiaW5kaW5ncyA9IHJlbmRlck9iamVjdC5nZXRCaW5kaW5ncygpO1xuXHRcdGNvbnN0IHJlbmRlckNvbnRleHREYXRhID0gdGhpcy5nZXQoIGNvbnRleHQgKTtcblx0XHRjb25zdCBwaXBlbGluZUdQVSA9IHRoaXMuZ2V0KCBwaXBlbGluZSApLnBpcGVsaW5lO1xuXHRcdGNvbnN0IGN1cnJlbnRTZXRzID0gcmVuZGVyQ29udGV4dERhdGEuY3VycmVudFNldHM7XG5cdFx0Y29uc3QgcGFzc0VuY29kZXJHUFUgPSByZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50UGFzcztcblxuXHRcdGNvbnN0IGRyYXdQYXJhbXMgPSByZW5kZXJPYmplY3QuZ2V0RHJhd1BhcmFtZXRlcnMoKTtcblxuXHRcdGlmICggZHJhd1BhcmFtcyA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdC8vIHBpcGVsaW5lXG5cblx0XHRpZiAoIGN1cnJlbnRTZXRzLnBpcGVsaW5lICE9PSBwaXBlbGluZUdQVSApIHtcblxuXHRcdFx0cGFzc0VuY29kZXJHUFUuc2V0UGlwZWxpbmUoIHBpcGVsaW5lR1BVICk7XG5cblx0XHRcdGN1cnJlbnRTZXRzLnBpcGVsaW5lID0gcGlwZWxpbmVHUFU7XG5cblx0XHR9XG5cblx0XHQvLyBiaW5kIGdyb3Vwc1xuXG5cdFx0Y29uc3QgY3VycmVudEJpbmRpbmdHcm91cHMgPSBjdXJyZW50U2V0cy5iaW5kaW5nR3JvdXBzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gYmluZGluZ3MubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYmluZEdyb3VwID0gYmluZGluZ3NbIGkgXTtcblx0XHRcdGNvbnN0IGJpbmRpbmdzRGF0YSA9IHRoaXMuZ2V0KCBiaW5kR3JvdXAgKTtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmluZGluZ0dyb3Vwc1sgYmluZEdyb3VwLmluZGV4IF0gIT09IGJpbmRHcm91cC5pZCApIHtcblxuXHRcdFx0XHRwYXNzRW5jb2RlckdQVS5zZXRCaW5kR3JvdXAoIGJpbmRHcm91cC5pbmRleCwgYmluZGluZ3NEYXRhLmdyb3VwICk7XG5cdFx0XHRcdGN1cnJlbnRCaW5kaW5nR3JvdXBzWyBiaW5kR3JvdXAuaW5kZXggXSA9IGJpbmRHcm91cC5pZDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYXR0cmlidXRlc1xuXG5cdFx0Y29uc3QgaW5kZXggPSByZW5kZXJPYmplY3QuZ2V0SW5kZXgoKTtcblxuXHRcdGNvbnN0IGhhc0luZGV4ID0gKCBpbmRleCAhPT0gbnVsbCApO1xuXG5cdFx0Ly8gaW5kZXhcblxuXHRcdGlmICggaGFzSW5kZXggPT09IHRydWUgKSB7XG5cblx0XHRcdGlmICggY3VycmVudFNldHMuaW5kZXggIT09IGluZGV4ICkge1xuXG5cdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IHRoaXMuZ2V0KCBpbmRleCApLmJ1ZmZlcjtcblx0XHRcdFx0Y29uc3QgaW5kZXhGb3JtYXQgPSAoIGluZGV4LmFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSA/IEdQVUluZGV4Rm9ybWF0LlVpbnQxNiA6IEdQVUluZGV4Rm9ybWF0LlVpbnQzMjtcblxuXHRcdFx0XHRwYXNzRW5jb2RlckdQVS5zZXRJbmRleEJ1ZmZlciggYnVmZmVyLCBpbmRleEZvcm1hdCApO1xuXG5cdFx0XHRcdGN1cnJlbnRTZXRzLmluZGV4ID0gaW5kZXg7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHZlcnRleCBidWZmZXJzXG5cblx0XHRjb25zdCB2ZXJ0ZXhCdWZmZXJzID0gcmVuZGVyT2JqZWN0LmdldFZlcnRleEJ1ZmZlcnMoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHZlcnRleEJ1ZmZlcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdmVydGV4QnVmZmVyID0gdmVydGV4QnVmZmVyc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRTZXRzLmF0dHJpYnV0ZXNbIGkgXSAhPT0gdmVydGV4QnVmZmVyICkge1xuXG5cdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IHRoaXMuZ2V0KCB2ZXJ0ZXhCdWZmZXIgKS5idWZmZXI7XG5cdFx0XHRcdHBhc3NFbmNvZGVyR1BVLnNldFZlcnRleEJ1ZmZlciggaSwgYnVmZmVyICk7XG5cblx0XHRcdFx0Y3VycmVudFNldHMuYXR0cmlidXRlc1sgaSBdID0gdmVydGV4QnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBvY2NsdXNpb24gcXVlcmllcyAtIGhhbmRsZSBtdWx0aXBsZSBjb25zZWN1dGl2ZSBkcmF3IGNhbGxzIGZvciBhbiBvYmplY3RcblxuXHRcdGlmICggcmVuZGVyQ29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlTZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgbGFzdE9iamVjdCA9IHJlbmRlckNvbnRleHREYXRhLmxhc3RPY2NsdXNpb25PYmplY3Q7XG5cblx0XHRcdGlmICggbGFzdE9iamVjdCAhPT0gb2JqZWN0ICkge1xuXG5cdFx0XHRcdGlmICggbGFzdE9iamVjdCAhPT0gbnVsbCAmJiBsYXN0T2JqZWN0Lm9jY2x1c2lvblRlc3QgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRwYXNzRW5jb2RlckdQVS5lbmRPY2NsdXNpb25RdWVyeSgpO1xuXHRcdFx0XHRcdHJlbmRlckNvbnRleHREYXRhLm9jY2x1c2lvblF1ZXJ5SW5kZXggKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggb2JqZWN0Lm9jY2x1c2lvblRlc3QgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRwYXNzRW5jb2RlckdQVS5iZWdpbk9jY2x1c2lvblF1ZXJ5KCByZW5kZXJDb250ZXh0RGF0YS5vY2NsdXNpb25RdWVyeUluZGV4ICk7XG5cdFx0XHRcdFx0cmVuZGVyQ29udGV4dERhdGEub2NjbHVzaW9uUXVlcnlPYmplY3RzWyByZW5kZXJDb250ZXh0RGF0YS5vY2NsdXNpb25RdWVyeUluZGV4IF0gPSBvYmplY3Q7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlbmRlckNvbnRleHREYXRhLmxhc3RPY2NsdXNpb25PYmplY3QgPSBvYmplY3Q7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHN0ZW5jaWxcblxuXHRcdGlmICggY29udGV4dC5zdGVuY2lsID09PSB0cnVlICYmIG1hdGVyaWFsLnN0ZW5jaWxXcml0ZSA9PT0gdHJ1ZSAmJiByZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50U3RlbmNpbFJlZiAhPT0gbWF0ZXJpYWwuc3RlbmNpbFJlZiApIHtcblxuXHRcdFx0cGFzc0VuY29kZXJHUFUuc2V0U3RlbmNpbFJlZmVyZW5jZSggbWF0ZXJpYWwuc3RlbmNpbFJlZiApO1xuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEuY3VycmVudFN0ZW5jaWxSZWYgPSBtYXRlcmlhbC5zdGVuY2lsUmVmO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZHJhd1xuXG5cdFx0Y29uc3QgZHJhdyA9ICgpID0+IHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNCYXRjaGVkTWVzaCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zdCBzdGFydHMgPSBvYmplY3QuX211bHRpRHJhd1N0YXJ0cztcblx0XHRcdFx0Y29uc3QgY291bnRzID0gb2JqZWN0Ll9tdWx0aURyYXdDb3VudHM7XG5cdFx0XHRcdGNvbnN0IGRyYXdDb3VudCA9IG9iamVjdC5fbXVsdGlEcmF3Q291bnQ7XG5cdFx0XHRcdGNvbnN0IGRyYXdJbnN0YW5jZXMgPSBvYmplY3QuX211bHRpRHJhd0luc3RhbmNlcztcblxuXHRcdFx0XHRpZiAoIGRyYXdJbnN0YW5jZXMgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHQvLyBAZGVwcmVjYXRlZCwgcjE3NFxuXHRcdFx0XHRcdHdhcm5PbmNlKCAnVEhSRUUuV2ViR1BVQmFja2VuZDogcmVuZGVyTXVsdGlEcmF3SW5zdGFuY2VzIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiByMTg0LiBBcHBlbmQgdG8gcmVuZGVyTXVsdGlEcmF3IGFyZ3VtZW50cyBhbmQgdXNlIGluZGlyZWN0aW9uLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZHJhd0NvdW50OyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgY291bnQgPSBkcmF3SW5zdGFuY2VzID8gZHJhd0luc3RhbmNlc1sgaSBdIDogMTtcblx0XHRcdFx0XHRjb25zdCBmaXJzdEluc3RhbmNlID0gY291bnQgPiAxID8gMCA6IGk7XG5cblx0XHRcdFx0XHRpZiAoIGhhc0luZGV4ID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRwYXNzRW5jb2RlckdQVS5kcmF3SW5kZXhlZCggY291bnRzWyBpIF0sIGNvdW50LCBzdGFydHNbIGkgXSAvIGluZGV4LmFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULCAwLCBmaXJzdEluc3RhbmNlICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRwYXNzRW5jb2RlckdQVS5kcmF3KCBjb3VudHNbIGkgXSwgY291bnQsIHN0YXJ0c1sgaSBdLCBmaXJzdEluc3RhbmNlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpbmZvLnVwZGF0ZSggb2JqZWN0LCBjb3VudHNbIGkgXSwgY291bnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGhhc0luZGV4ID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnN0IHsgdmVydGV4Q291bnQ6IGluZGV4Q291bnQsIGluc3RhbmNlQ291bnQsIGZpcnN0VmVydGV4OiBmaXJzdEluZGV4IH0gPSBkcmF3UGFyYW1zO1xuXG5cdFx0XHRcdGNvbnN0IGluZGlyZWN0ID0gcmVuZGVyT2JqZWN0LmdldEluZGlyZWN0KCk7XG5cblx0XHRcdFx0aWYgKCBpbmRpcmVjdCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IHRoaXMuZ2V0KCBpbmRpcmVjdCApLmJ1ZmZlcjtcblxuXHRcdFx0XHRcdHBhc3NFbmNvZGVyR1BVLmRyYXdJbmRleGVkSW5kaXJlY3QoIGJ1ZmZlciwgMCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRwYXNzRW5jb2RlckdQVS5kcmF3SW5kZXhlZCggaW5kZXhDb3VudCwgaW5zdGFuY2VDb3VudCwgZmlyc3RJbmRleCwgMCwgMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbmZvLnVwZGF0ZSggb2JqZWN0LCBpbmRleENvdW50LCBpbnN0YW5jZUNvdW50ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc3QgeyB2ZXJ0ZXhDb3VudCwgaW5zdGFuY2VDb3VudCwgZmlyc3RWZXJ0ZXggfSA9IGRyYXdQYXJhbXM7XG5cblx0XHRcdFx0Y29uc3QgaW5kaXJlY3QgPSByZW5kZXJPYmplY3QuZ2V0SW5kaXJlY3QoKTtcblxuXHRcdFx0XHRpZiAoIGluZGlyZWN0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYnVmZmVyID0gdGhpcy5nZXQoIGluZGlyZWN0ICkuYnVmZmVyO1xuXG5cdFx0XHRcdFx0cGFzc0VuY29kZXJHUFUuZHJhd0luZGlyZWN0KCBidWZmZXIsIDAgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cGFzc0VuY29kZXJHUFUuZHJhdyggdmVydGV4Q291bnQsIGluc3RhbmNlQ291bnQsIGZpcnN0VmVydGV4LCAwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGluZm8udXBkYXRlKCBvYmplY3QsIHZlcnRleENvdW50LCBpbnN0YW5jZUNvdW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHRpZiAoIHJlbmRlck9iamVjdC5jYW1lcmEuaXNBcnJheUNhbWVyYSAmJiByZW5kZXJPYmplY3QuY2FtZXJhLmNhbWVyYXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Y29uc3QgY2FtZXJhRGF0YSA9IHRoaXMuZ2V0KCByZW5kZXJPYmplY3QuY2FtZXJhICk7XG5cdFx0XHRjb25zdCBjYW1lcmFzID0gcmVuZGVyT2JqZWN0LmNhbWVyYS5jYW1lcmFzO1xuXHRcdFx0Y29uc3QgY2FtZXJhSW5kZXggPSByZW5kZXJPYmplY3QuZ2V0QmluZGluZ0dyb3VwKCAnY2FtZXJhSW5kZXgnICk7XG5cblx0XHRcdGlmICggY2FtZXJhRGF0YS5pbmRleGVzR1BVID09PSB1bmRlZmluZWQgfHwgY2FtZXJhRGF0YS5pbmRleGVzR1BVLmxlbmd0aCAhPT0gY2FtZXJhcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y29uc3QgYmluZGluZ3NEYXRhID0gdGhpcy5nZXQoIGNhbWVyYUluZGV4ICk7XG5cdFx0XHRcdGNvbnN0IGluZGV4ZXNHUFUgPSBbXTtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0gbmV3IFVpbnQzMkFycmF5KCBbIDAsIDAsIDAsIDAgXSApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbGVuID0gY2FtZXJhcy5sZW5ndGg7IGkgPCBsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRkYXRhWyAwIF0gPSBpO1xuXG5cdFx0XHRcdFx0Y29uc3QgYmluZEdyb3VwSW5kZXggPSB0aGlzLmJpbmRpbmdVdGlscy5jcmVhdGVCaW5kR3JvdXBJbmRleCggZGF0YSwgYmluZGluZ3NEYXRhLmxheW91dCApO1xuXG5cdFx0XHRcdFx0aW5kZXhlc0dQVS5wdXNoKCBiaW5kR3JvdXBJbmRleCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYW1lcmFEYXRhLmluZGV4ZXNHUFUgPSBpbmRleGVzR1BVOyAvLyBUT0RPOiBDcmVhdGUgYSBnbG9iYWwgbGlicmFyeSBmb3IgdGhpc1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHBpeGVsUmF0aW8gPSB0aGlzLnJlbmRlcmVyLmdldFBpeGVsUmF0aW8oKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsZW4gPSBjYW1lcmFzLmxlbmd0aDsgaSA8IGxlbjsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzdWJDYW1lcmEgPSBjYW1lcmFzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBvYmplY3QubGF5ZXJzLnRlc3QoIHN1YkNhbWVyYS5sYXllcnMgKSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZwID0gc3ViQ2FtZXJhLnZpZXdwb3J0O1xuXG5cdFx0XHRcdFx0cGFzc0VuY29kZXJHUFUuc2V0Vmlld3BvcnQoXG5cdFx0XHRcdFx0XHRNYXRoLmZsb29yKCB2cC54ICogcGl4ZWxSYXRpbyApLFxuXHRcdFx0XHRcdFx0TWF0aC5mbG9vciggdnAueSAqIHBpeGVsUmF0aW8gKSxcblx0XHRcdFx0XHRcdE1hdGguZmxvb3IoIHZwLndpZHRoICogcGl4ZWxSYXRpbyApLFxuXHRcdFx0XHRcdFx0TWF0aC5mbG9vciggdnAuaGVpZ2h0ICogcGl4ZWxSYXRpbyApLFxuXHRcdFx0XHRcdFx0Y29udGV4dC52aWV3cG9ydFZhbHVlLm1pbkRlcHRoLFxuXHRcdFx0XHRcdFx0Y29udGV4dC52aWV3cG9ydFZhbHVlLm1heERlcHRoXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdHBhc3NFbmNvZGVyR1BVLnNldEJpbmRHcm91cCggY2FtZXJhSW5kZXguaW5kZXgsIGNhbWVyYURhdGEuaW5kZXhlc0dQVVsgaSBdICk7XG5cblx0XHRcdFx0XHRkcmF3KCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkcmF3KCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGNhY2hlIGtleVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmVuZGVyIHBpcGVsaW5lIHJlcXVpcmVzIGFuIHVwZGF0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSByZW5kZXIgcGlwZWxpbmUgcmVxdWlyZXMgYW4gdXBkYXRlIG9yIG5vdC5cblx0ICovXG5cdG5lZWRzUmVuZGVyVXBkYXRlKCByZW5kZXJPYmplY3QgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gdGhpcy5nZXQoIHJlbmRlck9iamVjdCApO1xuXG5cdFx0Y29uc3QgeyBvYmplY3QsIG1hdGVyaWFsIH0gPSByZW5kZXJPYmplY3Q7XG5cblx0XHRjb25zdCB1dGlscyA9IHRoaXMudXRpbHM7XG5cblx0XHRjb25zdCBzYW1wbGVDb3VudCA9IHV0aWxzLmdldFNhbXBsZUNvdW50UmVuZGVyQ29udGV4dCggcmVuZGVyT2JqZWN0LmNvbnRleHQgKTtcblx0XHRjb25zdCBjb2xvclNwYWNlID0gdXRpbHMuZ2V0Q3VycmVudENvbG9yU3BhY2UoIHJlbmRlck9iamVjdC5jb250ZXh0ICk7XG5cdFx0Y29uc3QgY29sb3JGb3JtYXQgPSB1dGlscy5nZXRDdXJyZW50Q29sb3JGb3JtYXQoIHJlbmRlck9iamVjdC5jb250ZXh0ICk7XG5cdFx0Y29uc3QgZGVwdGhTdGVuY2lsRm9ybWF0ID0gdXRpbHMuZ2V0Q3VycmVudERlcHRoU3RlbmNpbEZvcm1hdCggcmVuZGVyT2JqZWN0LmNvbnRleHQgKTtcblx0XHRjb25zdCBwcmltaXRpdmVUb3BvbG9neSA9IHV0aWxzLmdldFByaW1pdGl2ZVRvcG9sb2d5KCBvYmplY3QsIG1hdGVyaWFsICk7XG5cblx0XHRsZXQgbmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdGlmICggZGF0YS5tYXRlcmlhbCAhPT0gbWF0ZXJpYWwgfHwgZGF0YS5tYXRlcmlhbFZlcnNpb24gIT09IG1hdGVyaWFsLnZlcnNpb24gfHxcblx0XHRcdGRhdGEudHJhbnNwYXJlbnQgIT09IG1hdGVyaWFsLnRyYW5zcGFyZW50IHx8IGRhdGEuYmxlbmRpbmcgIT09IG1hdGVyaWFsLmJsZW5kaW5nIHx8IGRhdGEucHJlbXVsdGlwbGllZEFscGhhICE9PSBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEgfHxcblx0XHRcdGRhdGEuYmxlbmRTcmMgIT09IG1hdGVyaWFsLmJsZW5kU3JjIHx8IGRhdGEuYmxlbmREc3QgIT09IG1hdGVyaWFsLmJsZW5kRHN0IHx8IGRhdGEuYmxlbmRFcXVhdGlvbiAhPT0gbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbiB8fFxuXHRcdFx0ZGF0YS5ibGVuZFNyY0FscGhhICE9PSBtYXRlcmlhbC5ibGVuZFNyY0FscGhhIHx8IGRhdGEuYmxlbmREc3RBbHBoYSAhPT0gbWF0ZXJpYWwuYmxlbmREc3RBbHBoYSB8fCBkYXRhLmJsZW5kRXF1YXRpb25BbHBoYSAhPT0gbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbkFscGhhIHx8XG5cdFx0XHRkYXRhLmNvbG9yV3JpdGUgIT09IG1hdGVyaWFsLmNvbG9yV3JpdGUgfHwgZGF0YS5kZXB0aFdyaXRlICE9PSBtYXRlcmlhbC5kZXB0aFdyaXRlIHx8IGRhdGEuZGVwdGhUZXN0ICE9PSBtYXRlcmlhbC5kZXB0aFRlc3QgfHwgZGF0YS5kZXB0aEZ1bmMgIT09IG1hdGVyaWFsLmRlcHRoRnVuYyB8fFxuXHRcdFx0ZGF0YS5zdGVuY2lsV3JpdGUgIT09IG1hdGVyaWFsLnN0ZW5jaWxXcml0ZSB8fCBkYXRhLnN0ZW5jaWxGdW5jICE9PSBtYXRlcmlhbC5zdGVuY2lsRnVuYyB8fFxuXHRcdFx0ZGF0YS5zdGVuY2lsRmFpbCAhPT0gbWF0ZXJpYWwuc3RlbmNpbEZhaWwgfHwgZGF0YS5zdGVuY2lsWkZhaWwgIT09IG1hdGVyaWFsLnN0ZW5jaWxaRmFpbCB8fCBkYXRhLnN0ZW5jaWxaUGFzcyAhPT0gbWF0ZXJpYWwuc3RlbmNpbFpQYXNzIHx8XG5cdFx0XHRkYXRhLnN0ZW5jaWxGdW5jTWFzayAhPT0gbWF0ZXJpYWwuc3RlbmNpbEZ1bmNNYXNrIHx8IGRhdGEuc3RlbmNpbFdyaXRlTWFzayAhPT0gbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayB8fFxuXHRcdFx0ZGF0YS5zaWRlICE9PSBtYXRlcmlhbC5zaWRlIHx8IGRhdGEuYWxwaGFUb0NvdmVyYWdlICE9PSBtYXRlcmlhbC5hbHBoYVRvQ292ZXJhZ2UgfHxcblx0XHRcdGRhdGEuc2FtcGxlQ291bnQgIT09IHNhbXBsZUNvdW50IHx8IGRhdGEuY29sb3JTcGFjZSAhPT0gY29sb3JTcGFjZSB8fFxuXHRcdFx0ZGF0YS5jb2xvckZvcm1hdCAhPT0gY29sb3JGb3JtYXQgfHwgZGF0YS5kZXB0aFN0ZW5jaWxGb3JtYXQgIT09IGRlcHRoU3RlbmNpbEZvcm1hdCB8fFxuXHRcdFx0ZGF0YS5wcmltaXRpdmVUb3BvbG9neSAhPT0gcHJpbWl0aXZlVG9wb2xvZ3kgfHxcblx0XHRcdGRhdGEuY2xpcHBpbmdDb250ZXh0Q2FjaGVLZXkgIT09IHJlbmRlck9iamVjdC5jbGlwcGluZ0NvbnRleHRDYWNoZUtleVxuXHRcdCkge1xuXG5cdFx0XHRkYXRhLm1hdGVyaWFsID0gbWF0ZXJpYWw7IGRhdGEubWF0ZXJpYWxWZXJzaW9uID0gbWF0ZXJpYWwudmVyc2lvbjtcblx0XHRcdGRhdGEudHJhbnNwYXJlbnQgPSBtYXRlcmlhbC50cmFuc3BhcmVudDsgZGF0YS5ibGVuZGluZyA9IG1hdGVyaWFsLmJsZW5kaW5nOyBkYXRhLnByZW11bHRpcGxpZWRBbHBoYSA9IG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYTtcblx0XHRcdGRhdGEuYmxlbmRTcmMgPSBtYXRlcmlhbC5ibGVuZFNyYzsgZGF0YS5ibGVuZERzdCA9IG1hdGVyaWFsLmJsZW5kRHN0OyBkYXRhLmJsZW5kRXF1YXRpb24gPSBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uO1xuXHRcdFx0ZGF0YS5ibGVuZFNyY0FscGhhID0gbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYTsgZGF0YS5ibGVuZERzdEFscGhhID0gbWF0ZXJpYWwuYmxlbmREc3RBbHBoYTsgZGF0YS5ibGVuZEVxdWF0aW9uQWxwaGEgPSBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uQWxwaGE7XG5cdFx0XHRkYXRhLmNvbG9yV3JpdGUgPSBtYXRlcmlhbC5jb2xvcldyaXRlO1xuXHRcdFx0ZGF0YS5kZXB0aFdyaXRlID0gbWF0ZXJpYWwuZGVwdGhXcml0ZTsgZGF0YS5kZXB0aFRlc3QgPSBtYXRlcmlhbC5kZXB0aFRlc3Q7IGRhdGEuZGVwdGhGdW5jID0gbWF0ZXJpYWwuZGVwdGhGdW5jO1xuXHRcdFx0ZGF0YS5zdGVuY2lsV3JpdGUgPSBtYXRlcmlhbC5zdGVuY2lsV3JpdGU7IGRhdGEuc3RlbmNpbEZ1bmMgPSBtYXRlcmlhbC5zdGVuY2lsRnVuYztcblx0XHRcdGRhdGEuc3RlbmNpbEZhaWwgPSBtYXRlcmlhbC5zdGVuY2lsRmFpbDsgZGF0YS5zdGVuY2lsWkZhaWwgPSBtYXRlcmlhbC5zdGVuY2lsWkZhaWw7IGRhdGEuc3RlbmNpbFpQYXNzID0gbWF0ZXJpYWwuc3RlbmNpbFpQYXNzO1xuXHRcdFx0ZGF0YS5zdGVuY2lsRnVuY01hc2sgPSBtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2s7IGRhdGEuc3RlbmNpbFdyaXRlTWFzayA9IG1hdGVyaWFsLnN0ZW5jaWxXcml0ZU1hc2s7XG5cdFx0XHRkYXRhLnNpZGUgPSBtYXRlcmlhbC5zaWRlOyBkYXRhLmFscGhhVG9Db3ZlcmFnZSA9IG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZTtcblx0XHRcdGRhdGEuc2FtcGxlQ291bnQgPSBzYW1wbGVDb3VudDtcblx0XHRcdGRhdGEuY29sb3JTcGFjZSA9IGNvbG9yU3BhY2U7XG5cdFx0XHRkYXRhLmNvbG9yRm9ybWF0ID0gY29sb3JGb3JtYXQ7XG5cdFx0XHRkYXRhLmRlcHRoU3RlbmNpbEZvcm1hdCA9IGRlcHRoU3RlbmNpbEZvcm1hdDtcblx0XHRcdGRhdGEucHJpbWl0aXZlVG9wb2xvZ3kgPSBwcmltaXRpdmVUb3BvbG9neTtcblx0XHRcdGRhdGEuY2xpcHBpbmdDb250ZXh0Q2FjaGVLZXkgPSByZW5kZXJPYmplY3QuY2xpcHBpbmdDb250ZXh0Q2FjaGVLZXk7XG5cblx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZWVkc1VwZGF0ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBjYWNoZSBrZXkgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IHJlbmRlciBwaXBlbGluZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyT2JqZWN0fSByZW5kZXJPYmplY3QgLSBUaGUgcmVuZGVyIG9iamVjdC5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgY2FjaGUga2V5LlxuXHQgKi9cblx0Z2V0UmVuZGVyQ2FjaGVLZXkoIHJlbmRlck9iamVjdCApIHtcblxuXHRcdGNvbnN0IHsgb2JqZWN0LCBtYXRlcmlhbCB9ID0gcmVuZGVyT2JqZWN0O1xuXG5cdFx0Y29uc3QgdXRpbHMgPSB0aGlzLnV0aWxzO1xuXHRcdGNvbnN0IHJlbmRlckNvbnRleHQgPSByZW5kZXJPYmplY3QuY29udGV4dDtcblxuXHRcdHJldHVybiBbXG5cdFx0XHRtYXRlcmlhbC50cmFuc3BhcmVudCwgbWF0ZXJpYWwuYmxlbmRpbmcsIG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSxcblx0XHRcdG1hdGVyaWFsLmJsZW5kU3JjLCBtYXRlcmlhbC5ibGVuZERzdCwgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbixcblx0XHRcdG1hdGVyaWFsLmJsZW5kU3JjQWxwaGEsIG1hdGVyaWFsLmJsZW5kRHN0QWxwaGEsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb25BbHBoYSxcblx0XHRcdG1hdGVyaWFsLmNvbG9yV3JpdGUsXG5cdFx0XHRtYXRlcmlhbC5kZXB0aFdyaXRlLCBtYXRlcmlhbC5kZXB0aFRlc3QsIG1hdGVyaWFsLmRlcHRoRnVuYyxcblx0XHRcdG1hdGVyaWFsLnN0ZW5jaWxXcml0ZSwgbWF0ZXJpYWwuc3RlbmNpbEZ1bmMsXG5cdFx0XHRtYXRlcmlhbC5zdGVuY2lsRmFpbCwgbWF0ZXJpYWwuc3RlbmNpbFpGYWlsLCBtYXRlcmlhbC5zdGVuY2lsWlBhc3MsXG5cdFx0XHRtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2ssIG1hdGVyaWFsLnN0ZW5jaWxXcml0ZU1hc2ssXG5cdFx0XHRtYXRlcmlhbC5zaWRlLFxuXHRcdFx0dXRpbHMuZ2V0U2FtcGxlQ291bnRSZW5kZXJDb250ZXh0KCByZW5kZXJDb250ZXh0ICksXG5cdFx0XHR1dGlscy5nZXRDdXJyZW50Q29sb3JTcGFjZSggcmVuZGVyQ29udGV4dCApLCB1dGlscy5nZXRDdXJyZW50Q29sb3JGb3JtYXQoIHJlbmRlckNvbnRleHQgKSwgdXRpbHMuZ2V0Q3VycmVudERlcHRoU3RlbmNpbEZvcm1hdCggcmVuZGVyQ29udGV4dCApLFxuXHRcdFx0dXRpbHMuZ2V0UHJpbWl0aXZlVG9wb2xvZ3koIG9iamVjdCwgbWF0ZXJpYWwgKSxcblx0XHRcdHJlbmRlck9iamVjdC5nZXRHZW9tZXRyeUNhY2hlS2V5KCksXG5cdFx0XHRyZW5kZXJPYmplY3QuY2xpcHBpbmdDb250ZXh0Q2FjaGVLZXlcblx0XHRdLmpvaW4oKTtcblxuXHR9XG5cblx0Ly8gdGV4dHVyZXNcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIEdQVSBzYW1wbGVyIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gY3JlYXRlIHRoZSBzYW1wbGVyIGZvci5cblx0ICovXG5cdGNyZWF0ZVNhbXBsZXIoIHRleHR1cmUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVVdGlscy5jcmVhdGVTYW1wbGVyKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgR1BVIHNhbXBsZXIgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBkZXN0cm95IHRoZSBzYW1wbGVyIGZvci5cblx0ICovXG5cdGRlc3Ryb3lTYW1wbGVyKCB0ZXh0dXJlICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlVXRpbHMuZGVzdHJveVNhbXBsZXIoIHRleHR1cmUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBkZWZhdWx0IHRleHR1cmUgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlIHRoYXQgY2FuIGJlIHVzZWRcblx0ICogYXMgYSBwbGFjZWhvbGRlciB1bnRpbCB0aGUgYWN0dWFsIHRleHR1cmUgaXMgcmVhZHkgZm9yIHVzYWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBjcmVhdGUgYSBkZWZhdWx0IHRleHR1cmUgZm9yLlxuXHQgKi9cblx0Y3JlYXRlRGVmYXVsdFRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVVdGlscy5jcmVhdGVEZWZhdWx0VGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyBhIHRleHR1cmUgb24gdGhlIEdQVSBmb3IgdGhlIGdpdmVuIHRleHR1cmUgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyLlxuXHQgKi9cblx0Y3JlYXRlVGV4dHVyZSggdGV4dHVyZSwgb3B0aW9ucyApIHtcblxuXHRcdHRoaXMudGV4dHVyZVV0aWxzLmNyZWF0ZVRleHR1cmUoIHRleHR1cmUsIG9wdGlvbnMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwbG9hZHMgdGhlIHVwZGF0ZWQgdGV4dHVyZSBkYXRhIHRvIHRoZSBHUFUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIuXG5cdCAqL1xuXHR1cGRhdGVUZXh0dXJlKCB0ZXh0dXJlLCBvcHRpb25zICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlVXRpbHMudXBkYXRlVGV4dHVyZSggdGV4dHVyZSwgb3B0aW9ucyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIG1pcG1hcHMgZm9yIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0ICovXG5cdGdlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApIHtcblxuXHRcdHRoaXMudGV4dHVyZVV0aWxzLmdlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIEdQVSBkYXRhIGZvciB0aGUgZ2l2ZW4gdGV4dHVyZSBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuXHQgKi9cblx0ZGVzdHJveVRleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVVdGlscy5kZXN0cm95VGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0ZXh0dXJlIGRhdGEgYXMgYSB0eXBlZCBhcnJheS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlIHRvIGNvcHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgY29weSBvcmlnaW4uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgY29weSBvcmlnaW4uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIGNvcHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmYWNlSW5kZXggLSBUaGUgZmFjZSBpbmRleC5cblx0ICogQHJldHVybiB7UHJvbWlzZTxUeXBlZEFycmF5Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHR5cGVkIGFycmF5IHdoZW4gdGhlIGNvcHkgb3BlcmF0aW9uIGhhcyBmaW5pc2hlZC5cblx0ICovXG5cdGFzeW5jIGNvcHlUZXh0dXJlVG9CdWZmZXIoIHRleHR1cmUsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGZhY2VJbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLnRleHR1cmVVdGlscy5jb3B5VGV4dHVyZVRvQnVmZmVyKCB0ZXh0dXJlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBmYWNlSW5kZXggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRzIGEgdGltZSBzdGFtcCBxdWVyeSBmb3IgdGhlIGdpdmVuIHJlbmRlciBjb250ZXh0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBkZXNjcmlwdG9yIC0gVGhlIHF1ZXJ5IGRlc2NyaXB0b3IuXG5cdCAqL1xuXHRpbml0VGltZXN0YW1wUXVlcnkoIHJlbmRlckNvbnRleHQsIGRlc2NyaXB0b3IgKSB7XG5cblx0XHRpZiAoICEgdGhpcy50cmFja1RpbWVzdGFtcCApIHJldHVybjtcblxuXHRcdGNvbnN0IHR5cGUgPSByZW5kZXJDb250ZXh0LmlzQ29tcHV0ZU5vZGUgPyAnY29tcHV0ZScgOiAncmVuZGVyJztcblxuXHRcdGlmICggISB0aGlzLnRpbWVzdGFtcFF1ZXJ5UG9vbFsgdHlwZSBdICkge1xuXG5cdFx0XHQvLyBUT0RPOiBWYXJpYWJsZSBtYXhRdWVyaWVzP1xuXHRcdFx0dGhpcy50aW1lc3RhbXBRdWVyeVBvb2xbIHR5cGUgXSA9IG5ldyBXZWJHUFVUaW1lc3RhbXBRdWVyeVBvb2woIHRoaXMuZGV2aWNlLCB0eXBlLCAyMDQ4ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0aW1lc3RhbXBRdWVyeVBvb2wgPSB0aGlzLnRpbWVzdGFtcFF1ZXJ5UG9vbFsgdHlwZSBdO1xuXG5cdFx0Y29uc3QgYmFzZU9mZnNldCA9IHRpbWVzdGFtcFF1ZXJ5UG9vbC5hbGxvY2F0ZVF1ZXJpZXNGb3JDb250ZXh0KCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHRkZXNjcmlwdG9yLnRpbWVzdGFtcFdyaXRlcyA9IHtcblx0XHRcdHF1ZXJ5U2V0OiB0aW1lc3RhbXBRdWVyeVBvb2wucXVlcnlTZXQsXG5cdFx0XHRiZWdpbm5pbmdPZlBhc3NXcml0ZUluZGV4OiBiYXNlT2Zmc2V0LFxuXHRcdFx0ZW5kT2ZQYXNzV3JpdGVJbmRleDogYmFzZU9mZnNldCArIDEsXG5cdFx0ICB9O1xuXG5cdH1cblxuXG5cdC8vIG5vZGUgYnVpbGRlclxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbm9kZSBidWlsZGVyIGZvciB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IG9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1JlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cblx0ICogQHJldHVybiB7V0dTTE5vZGVCdWlsZGVyfSBUaGUgbm9kZSBidWlsZGVyLlxuXHQgKi9cblx0Y3JlYXRlTm9kZUJ1aWxkZXIoIG9iamVjdCwgcmVuZGVyZXIgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFdHU0xOb2RlQnVpbGRlciggb2JqZWN0LCByZW5kZXJlciApO1xuXG5cdH1cblxuXHQvLyBwcm9ncmFtXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBzaGFkZXIgcHJvZ3JhbSBmcm9tIHRoZSBnaXZlbiBwcm9ncmFtbWFibGUgc3RhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UHJvZ3JhbW1hYmxlU3RhZ2V9IHByb2dyYW0gLSBUaGUgcHJvZ3JhbW1hYmxlIHN0YWdlLlxuXHQgKi9cblx0Y3JlYXRlUHJvZ3JhbSggcHJvZ3JhbSApIHtcblxuXHRcdGNvbnN0IHByb2dyYW1HUFUgPSB0aGlzLmdldCggcHJvZ3JhbSApO1xuXG5cdFx0cHJvZ3JhbUdQVS5tb2R1bGUgPSB7XG5cdFx0XHRtb2R1bGU6IHRoaXMuZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSggeyBjb2RlOiBwcm9ncmFtLmNvZGUsIGxhYmVsOiBwcm9ncmFtLnN0YWdlICsgKCBwcm9ncmFtLm5hbWUgIT09ICcnID8gYF8keyBwcm9ncmFtLm5hbWUgfWAgOiAnJyApIH0gKSxcblx0XHRcdGVudHJ5UG9pbnQ6ICdtYWluJ1xuXHRcdH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgc2hhZGVyIHByb2dyYW0gb2YgdGhlIGdpdmVuIHByb2dyYW1tYWJsZSBzdGFnZS5cblx0ICpcblx0ICogQHBhcmFtIHtQcm9ncmFtbWFibGVTdGFnZX0gcHJvZ3JhbSAtIFRoZSBwcm9ncmFtbWFibGUgc3RhZ2UuXG5cdCAqL1xuXHRkZXN0cm95UHJvZ3JhbSggcHJvZ3JhbSApIHtcblxuXHRcdHRoaXMuZGVsZXRlKCBwcm9ncmFtICk7XG5cblx0fVxuXG5cdC8vIHBpcGVsaW5lc1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgcmVuZGVyIHBpcGVsaW5lIGZvciB0aGUgZ2l2ZW4gcmVuZGVyIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJPYmplY3R9IHJlbmRlck9iamVjdCAtIFRoZSByZW5kZXIgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0FycmF5PFByb21pc2U+fSBwcm9taXNlcyAtIEFuIGFycmF5IG9mIGNvbXBpbGF0aW9uIHByb21pc2VzIHdoaWNoIGFyZSB1c2VkIGluIGBjb21waWxlQXN5bmMoKWAuXG5cdCAqL1xuXHRjcmVhdGVSZW5kZXJQaXBlbGluZSggcmVuZGVyT2JqZWN0LCBwcm9taXNlcyApIHtcblxuXHRcdHRoaXMucGlwZWxpbmVVdGlscy5jcmVhdGVSZW5kZXJQaXBlbGluZSggcmVuZGVyT2JqZWN0LCBwcm9taXNlcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGNvbXB1dGUgcGlwZWxpbmUgZm9yIHRoZSBnaXZlbiBjb21wdXRlIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29tcHV0ZVBpcGVsaW5lfSBjb21wdXRlUGlwZWxpbmUgLSBUaGUgY29tcHV0ZSBwaXBlbGluZS5cblx0ICogQHBhcmFtIHtBcnJheTxCaW5kR3JvdXA+fSBiaW5kaW5ncyAtIFRoZSBiaW5kaW5ncy5cblx0ICovXG5cdGNyZWF0ZUNvbXB1dGVQaXBlbGluZSggY29tcHV0ZVBpcGVsaW5lLCBiaW5kaW5ncyApIHtcblxuXHRcdHRoaXMucGlwZWxpbmVVdGlscy5jcmVhdGVDb21wdXRlUGlwZWxpbmUoIGNvbXB1dGVQaXBlbGluZSwgYmluZGluZ3MgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFByZXBhcmVzIHRoZSBzdGF0ZSBmb3IgZW5jb2RpbmcgcmVuZGVyIGJ1bmRsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICovXG5cdGJlZ2luQnVuZGxlKCByZW5kZXJDb250ZXh0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyQ29udGV4dERhdGEgPSB0aGlzLmdldCggcmVuZGVyQ29udGV4dCApO1xuXG5cdFx0cmVuZGVyQ29udGV4dERhdGEuX2N1cnJlbnRQYXNzID0gcmVuZGVyQ29udGV4dERhdGEuY3VycmVudFBhc3M7XG5cdFx0cmVuZGVyQ29udGV4dERhdGEuX2N1cnJlbnRTZXRzID0gcmVuZGVyQ29udGV4dERhdGEuY3VycmVudFNldHM7XG5cblx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50U2V0cyA9IHsgYXR0cmlidXRlczoge30sIGJpbmRpbmdHcm91cHM6IFtdLCBwaXBlbGluZTogbnVsbCwgaW5kZXg6IG51bGwgfTtcblx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50UGFzcyA9IHRoaXMucGlwZWxpbmVVdGlscy5jcmVhdGVCdW5kbGVFbmNvZGVyKCByZW5kZXJDb250ZXh0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZnRlciBwcm9jZXNzaW5nIHJlbmRlciBidW5kbGVzIHRoaXMgbWV0aG9kIGZpbmFsaXplcyByZWxhdGVkIHdvcmsuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyQ29udGV4dH0gcmVuZGVyQ29udGV4dCAtIFRoZSByZW5kZXIgY29udGV4dC5cblx0ICogQHBhcmFtIHtSZW5kZXJCdW5kbGV9IGJ1bmRsZSAtIFRoZSByZW5kZXIgYnVuZGxlLlxuXHQgKi9cblx0ZmluaXNoQnVuZGxlKCByZW5kZXJDb250ZXh0LCBidW5kbGUgKSB7XG5cblx0XHRjb25zdCByZW5kZXJDb250ZXh0RGF0YSA9IHRoaXMuZ2V0KCByZW5kZXJDb250ZXh0ICk7XG5cblx0XHRjb25zdCBidW5kbGVFbmNvZGVyID0gcmVuZGVyQ29udGV4dERhdGEuY3VycmVudFBhc3M7XG5cdFx0Y29uc3QgYnVuZGxlR1BVID0gYnVuZGxlRW5jb2Rlci5maW5pc2goKTtcblxuXHRcdHRoaXMuZ2V0KCBidW5kbGUgKS5idW5kbGVHUFUgPSBidW5kbGVHUFU7XG5cblx0XHQvLyByZXN0b3JlIHJlbmRlciBwYXNzIHN0YXRlXG5cblx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50U2V0cyA9IHJlbmRlckNvbnRleHREYXRhLl9jdXJyZW50U2V0cztcblx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50UGFzcyA9IHJlbmRlckNvbnRleHREYXRhLl9jdXJyZW50UGFzcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSByZW5kZXIgYnVuZGxlIHRvIHRoZSByZW5kZXIgY29udGV4dCBkYXRhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7UmVuZGVyQnVuZGxlfSBidW5kbGUgLSBUaGUgcmVuZGVyIGJ1bmRsZSB0byBhZGQuXG5cdCAqL1xuXHRhZGRCdW5kbGUoIHJlbmRlckNvbnRleHQsIGJ1bmRsZSApIHtcblxuXHRcdGNvbnN0IHJlbmRlckNvbnRleHREYXRhID0gdGhpcy5nZXQoIHJlbmRlckNvbnRleHQgKTtcblxuXHRcdHJlbmRlckNvbnRleHREYXRhLnJlbmRlckJ1bmRsZXMucHVzaCggdGhpcy5nZXQoIGJ1bmRsZSApLmJ1bmRsZUdQVSApO1xuXG5cdH1cblxuXHQvLyBiaW5kaW5nc1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGJpbmRpbmdzIGZyb20gdGhlIGdpdmVuIGJpbmQgZ3JvdXAgZGVmaW5pdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtCaW5kR3JvdXB9IGJpbmRHcm91cCAtIFRoZSBiaW5kIGdyb3VwLlxuXHQgKiBAcGFyYW0ge0FycmF5PEJpbmRHcm91cD59IGJpbmRpbmdzIC0gQXJyYXkgb2YgYmluZCBncm91cHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjYWNoZUluZGV4IC0gVGhlIGNhY2hlIGluZGV4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmVyc2lvbiAtIFRoZSB2ZXJzaW9uLlxuXHQgKi9cblx0Y3JlYXRlQmluZGluZ3MoIGJpbmRHcm91cCwgYmluZGluZ3MsIGNhY2hlSW5kZXgsIHZlcnNpb24gKSB7XG5cblx0XHR0aGlzLmJpbmRpbmdVdGlscy5jcmVhdGVCaW5kaW5ncyggYmluZEdyb3VwLCBiaW5kaW5ncywgY2FjaGVJbmRleCwgdmVyc2lvbiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgZ2l2ZW4gYmluZCBncm91cCBkZWZpbml0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JpbmRHcm91cH0gYmluZEdyb3VwIC0gVGhlIGJpbmQgZ3JvdXAuXG5cdCAqIEBwYXJhbSB7QXJyYXk8QmluZEdyb3VwPn0gYmluZGluZ3MgLSBBcnJheSBvZiBiaW5kIGdyb3Vwcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGNhY2hlSW5kZXggLSBUaGUgY2FjaGUgaW5kZXguXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2ZXJzaW9uIC0gVGhlIHZlcnNpb24uXG5cdCAqL1xuXHR1cGRhdGVCaW5kaW5ncyggYmluZEdyb3VwLCBiaW5kaW5ncywgY2FjaGVJbmRleCwgdmVyc2lvbiApIHtcblxuXHRcdHRoaXMuYmluZGluZ1V0aWxzLmNyZWF0ZUJpbmRpbmdzKCBiaW5kR3JvdXAsIGJpbmRpbmdzLCBjYWNoZUluZGV4LCB2ZXJzaW9uICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGEgYnVmZmVyIGJpbmRpbmcuXG5cdCAqXG5cdCAqICBAcGFyYW0ge0J1ZmZlcn0gYmluZGluZyAtIFRoZSBidWZmZXIgYmluZGluZyB0byB1cGRhdGUuXG5cdCAqL1xuXHR1cGRhdGVCaW5kaW5nKCBiaW5kaW5nICkge1xuXG5cdFx0dGhpcy5iaW5kaW5nVXRpbHMudXBkYXRlQmluZGluZyggYmluZGluZyApO1xuXG5cdH1cblxuXHQvLyBhdHRyaWJ1dGVzXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIGJ1ZmZlciBvZiBhbiBpbmRleGVkIHNoYWRlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgaW5kZXhlZCBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0Y3JlYXRlSW5kZXhBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdHRoaXMuYXR0cmlidXRlVXRpbHMuY3JlYXRlQXR0cmlidXRlKCBhdHRyaWJ1dGUsIEdQVUJ1ZmZlclVzYWdlLklOREVYIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9TUkMgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgR1BVIGJ1ZmZlciBvZiBhIHNoYWRlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICovXG5cdGNyZWF0ZUF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0dGhpcy5hdHRyaWJ1dGVVdGlscy5jcmVhdGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgR1BVQnVmZmVyVXNhZ2UuVkVSVEVYIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9TUkMgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgR1BVIGJ1ZmZlciBvZiBhIHN0b3JhZ2UgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqL1xuXHRjcmVhdGVTdG9yYWdlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHR0aGlzLmF0dHJpYnV0ZVV0aWxzLmNyZWF0ZUF0dHJpYnV0ZSggYXR0cmlidXRlLCBHUFVCdWZmZXJVc2FnZS5TVE9SQUdFIHwgR1BVQnVmZmVyVXNhZ2UuVkVSVEVYIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9TUkMgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgR1BVIGJ1ZmZlciBvZiBhbiBpbmRpcmVjdCBzdG9yYWdlIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0Y3JlYXRlSW5kaXJlY3RTdG9yYWdlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHR0aGlzLmF0dHJpYnV0ZVV0aWxzLmNyZWF0ZUF0dHJpYnV0ZSggYXR0cmlidXRlLCBHUFVCdWZmZXJVc2FnZS5TVE9SQUdFIHwgR1BVQnVmZmVyVXNhZ2UuSU5ESVJFQ1QgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX1NSQyB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNUICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBHUFUgYnVmZmVyIG9mIGEgc2hhZGVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlIHRvIHVwZGF0ZS5cblx0ICovXG5cdHVwZGF0ZUF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0dGhpcy5hdHRyaWJ1dGVVdGlscy51cGRhdGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIEdQVSBidWZmZXIgb2YgYSBzaGFkZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUgdG8gZGVzdHJveS5cblx0ICovXG5cdGRlc3Ryb3lBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdHRoaXMuYXR0cmlidXRlVXRpbHMuZGVzdHJveUF0dHJpYnV0ZSggYXR0cmlidXRlICk7XG5cblx0fVxuXG5cdC8vIGNhbnZhc1xuXG5cdC8qKlxuXHQgKiBUcmlnZ2VycyBhbiB1cGRhdGUgb2YgdGhlIGRlZmF1bHQgcmVuZGVyIHBhc3MgZGVzY3JpcHRvci5cblx0ICovXG5cdHVwZGF0ZVNpemUoKSB7XG5cblx0XHR0aGlzLmNvbG9yQnVmZmVyID0gdGhpcy50ZXh0dXJlVXRpbHMuZ2V0Q29sb3JCdWZmZXIoKTtcblx0XHR0aGlzLmRlZmF1bHRSZW5kZXJQYXNzZGVzY3JpcHRvciA9IG51bGw7XG5cblx0fVxuXG5cdC8vIHV0aWxzIHB1YmxpY1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIGFuaXNvdHJvcHkgdGV4dHVyZSBmaWx0ZXJpbmcgdmFsdWUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIG1heGltdW0gYW5pc290cm9weSB0ZXh0dXJlIGZpbHRlcmluZyB2YWx1ZS5cblx0ICovXG5cdGdldE1heEFuaXNvdHJvcHkoKSB7XG5cblx0XHRyZXR1cm4gMTY7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICBieSB0aGUgYmFja2VuZC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgZmVhdHVyZSdzIG5hbWUuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGZlYXR1cmUgaXMgc3VwcG9ydGVkIG9yIG5vdC5cblx0ICovXG5cdGhhc0ZlYXR1cmUoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kZXZpY2UuZmVhdHVyZXMuaGFzKCBuYW1lICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgZGF0YSBvZiB0aGUgZ2l2ZW4gc291cmNlIHRleHR1cmUgdG8gdGhlIGdpdmVuIGRlc3RpbmF0aW9uIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gc3JjVGV4dHVyZSAtIFRoZSBzb3VyY2UgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtUZXh0dXJlfSBkc3RUZXh0dXJlIC0gVGhlIGRlc3RpbmF0aW9uIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7PyhCb3gzfEJveDIpfSBbc3JjUmVnaW9uPW51bGxdIC0gVGhlIHJlZ2lvbiBvZiB0aGUgc291cmNlIHRleHR1cmUgdG8gY29weS5cblx0ICogQHBhcmFtIHs/KFZlY3RvcjJ8VmVjdG9yMyl9IFtkc3RQb3NpdGlvbj1udWxsXSAtIFRoZSBkZXN0aW5hdGlvbiBwb3NpdGlvbiBvZiB0aGUgY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzcmNMZXZlbD0wXSAtIFRoZSBtaXBtYXAgbGV2ZWwgdG8gY29weS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkc3RMZXZlbD0wXSAtIFRoZSBkZXN0aW5hdGlvbiBtaXAgbGV2ZWwgdG8gY29weSB0by5cblx0ICovXG5cdGNvcHlUZXh0dXJlVG9UZXh0dXJlKCBzcmNUZXh0dXJlLCBkc3RUZXh0dXJlLCBzcmNSZWdpb24gPSBudWxsLCBkc3RQb3NpdGlvbiA9IG51bGwsIHNyY0xldmVsID0gMCwgZHN0TGV2ZWwgPSAwICkge1xuXG5cdFx0bGV0IGRzdFggPSAwO1xuXHRcdGxldCBkc3RZID0gMDtcblx0XHRsZXQgZHN0WiA9IDA7XG5cblx0XHRsZXQgc3JjWCA9IDA7XG5cdFx0bGV0IHNyY1kgPSAwO1xuXHRcdGxldCBzcmNaID0gMDtcblxuXHRcdGxldCBzcmNXaWR0aCA9IHNyY1RleHR1cmUuaW1hZ2Uud2lkdGg7XG5cdFx0bGV0IHNyY0hlaWdodCA9IHNyY1RleHR1cmUuaW1hZ2UuaGVpZ2h0O1xuXHRcdGxldCBzcmNEZXB0aCA9IDE7XG5cblxuXHRcdGlmICggc3JjUmVnaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIHNyY1JlZ2lvbi5pc0JveDMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0c3JjWCA9IHNyY1JlZ2lvbi5taW4ueDtcblx0XHRcdFx0c3JjWSA9IHNyY1JlZ2lvbi5taW4ueTtcblx0XHRcdFx0c3JjWiA9IHNyY1JlZ2lvbi5taW4uejtcblx0XHRcdFx0c3JjV2lkdGggPSBzcmNSZWdpb24ubWF4LnggLSBzcmNSZWdpb24ubWluLng7XG5cdFx0XHRcdHNyY0hlaWdodCA9IHNyY1JlZ2lvbi5tYXgueSAtIHNyY1JlZ2lvbi5taW4ueTtcblx0XHRcdFx0c3JjRGVwdGggPSBzcmNSZWdpb24ubWF4LnogLSBzcmNSZWdpb24ubWluLno7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIGl0J3MgYSBCb3gyXG5cdFx0XHRcdHNyY1ggPSBzcmNSZWdpb24ubWluLng7XG5cdFx0XHRcdHNyY1kgPSBzcmNSZWdpb24ubWluLnk7XG5cdFx0XHRcdHNyY1dpZHRoID0gc3JjUmVnaW9uLm1heC54IC0gc3JjUmVnaW9uLm1pbi54O1xuXHRcdFx0XHRzcmNIZWlnaHQgPSBzcmNSZWdpb24ubWF4LnkgLSBzcmNSZWdpb24ubWluLnk7XG5cdFx0XHRcdHNyY0RlcHRoID0gMTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cblx0XHRpZiAoIGRzdFBvc2l0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRkc3RYID0gZHN0UG9zaXRpb24ueDtcblx0XHRcdGRzdFkgPSBkc3RQb3NpdGlvbi55O1xuXHRcdFx0ZHN0WiA9IGRzdFBvc2l0aW9uLnogfHwgMDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGVuY29kZXIgPSB0aGlzLmRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlciggeyBsYWJlbDogJ2NvcHlUZXh0dXJlVG9UZXh0dXJlXycgKyBzcmNUZXh0dXJlLmlkICsgJ18nICsgZHN0VGV4dHVyZS5pZCB9ICk7XG5cblx0XHRjb25zdCBzb3VyY2VHUFUgPSB0aGlzLmdldCggc3JjVGV4dHVyZSApLnRleHR1cmU7XG5cdFx0Y29uc3QgZGVzdGluYXRpb25HUFUgPSB0aGlzLmdldCggZHN0VGV4dHVyZSApLnRleHR1cmU7XG5cblx0XHRlbmNvZGVyLmNvcHlUZXh0dXJlVG9UZXh0dXJlKFxuXHRcdFx0e1xuXHRcdFx0XHR0ZXh0dXJlOiBzb3VyY2VHUFUsXG5cdFx0XHRcdG1pcExldmVsOiBzcmNMZXZlbCxcblx0XHRcdFx0b3JpZ2luOiB7IHg6IHNyY1gsIHk6IHNyY1ksIHo6IHNyY1ogfVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0dGV4dHVyZTogZGVzdGluYXRpb25HUFUsXG5cdFx0XHRcdG1pcExldmVsOiBkc3RMZXZlbCxcblx0XHRcdFx0b3JpZ2luOiB7IHg6IGRzdFgsIHk6IGRzdFksIHo6IGRzdFogfVxuXHRcdFx0fSxcblx0XHRcdFtcblx0XHRcdFx0c3JjV2lkdGgsXG5cdFx0XHRcdHNyY0hlaWdodCxcblx0XHRcdFx0c3JjRGVwdGhcblx0XHRcdF1cblx0XHQpO1xuXG5cdFx0dGhpcy5kZXZpY2UucXVldWUuc3VibWl0KCBbIGVuY29kZXIuZmluaXNoKCkgXSApO1xuXG5cdFx0aWYgKCBkc3RMZXZlbCA9PT0gMCAmJiBkc3RUZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyApIHtcblxuXHRcdFx0dGhpcy50ZXh0dXJlVXRpbHMuZ2VuZXJhdGVNaXBtYXBzKCBkc3RUZXh0dXJlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIGN1cnJlbnQgYm91bmQgZnJhbWVidWZmZXIgdG8gdGhlIGdpdmVuIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSBkZXN0aW5hdGlvbiB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge1JlbmRlckNvbnRleHR9IHJlbmRlckNvbnRleHQgLSBUaGUgcmVuZGVyIGNvbnRleHQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gcmVjdGFuZ2xlIC0gQSBmb3VyIGRpbWVuc2lvbmFsIHZlY3RvciBkZWZpbmluZyB0aGUgb3JpZ2luIGFuZCBkaW1lbnNpb24gb2YgdGhlIGNvcHkuXG5cdCAqL1xuXHRjb3B5RnJhbWVidWZmZXJUb1RleHR1cmUoIHRleHR1cmUsIHJlbmRlckNvbnRleHQsIHJlY3RhbmdsZSApIHtcblxuXHRcdGNvbnN0IHJlbmRlckNvbnRleHREYXRhID0gdGhpcy5nZXQoIHJlbmRlckNvbnRleHQgKTtcblxuXHRcdGxldCBzb3VyY2VHUFUgPSBudWxsO1xuXG5cdFx0aWYgKCByZW5kZXJDb250ZXh0LnJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdHNvdXJjZUdQVSA9IHRoaXMuZ2V0KCByZW5kZXJDb250ZXh0LmRlcHRoVGV4dHVyZSApLnRleHR1cmU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c291cmNlR1BVID0gdGhpcy5nZXQoIHJlbmRlckNvbnRleHQudGV4dHVyZXNbIDAgXSApLnRleHR1cmU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggdGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApIHtcblxuXHRcdFx0XHRzb3VyY2VHUFUgPSB0aGlzLnRleHR1cmVVdGlscy5nZXREZXB0aEJ1ZmZlciggcmVuZGVyQ29udGV4dC5kZXB0aCwgcmVuZGVyQ29udGV4dC5zdGVuY2lsICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c291cmNlR1BVID0gdGhpcy5jb250ZXh0LmdldEN1cnJlbnRUZXh0dXJlKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGRlc3RpbmF0aW9uR1BVID0gdGhpcy5nZXQoIHRleHR1cmUgKS50ZXh0dXJlO1xuXG5cdFx0aWYgKCBzb3VyY2VHUFUuZm9ybWF0ICE9PSBkZXN0aW5hdGlvbkdQVS5mb3JtYXQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdXZWJHUFVCYWNrZW5kOiBjb3B5RnJhbWVidWZmZXJUb1RleHR1cmU6IFNvdXJjZSBhbmQgZGVzdGluYXRpb24gZm9ybWF0cyBkbyBub3QgbWF0Y2guJywgc291cmNlR1BVLmZvcm1hdCwgZGVzdGluYXRpb25HUFUuZm9ybWF0ICk7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGxldCBlbmNvZGVyO1xuXG5cdFx0aWYgKCByZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50UGFzcyApIHtcblxuXHRcdFx0cmVuZGVyQ29udGV4dERhdGEuY3VycmVudFBhc3MuZW5kKCk7XG5cblx0XHRcdGVuY29kZXIgPSByZW5kZXJDb250ZXh0RGF0YS5lbmNvZGVyO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZW5jb2RlciA9IHRoaXMuZGV2aWNlLmNyZWF0ZUNvbW1hbmRFbmNvZGVyKCB7IGxhYmVsOiAnY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlXycgKyB0ZXh0dXJlLmlkIH0gKTtcblxuXHRcdH1cblxuXHRcdGVuY29kZXIuY29weVRleHR1cmVUb1RleHR1cmUoXG5cdFx0XHR7XG5cdFx0XHRcdHRleHR1cmU6IHNvdXJjZUdQVSxcblx0XHRcdFx0b3JpZ2luOiBbIHJlY3RhbmdsZS54LCByZWN0YW5nbGUueSwgMCBdLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0dGV4dHVyZTogZGVzdGluYXRpb25HUFVcblx0XHRcdH0sXG5cdFx0XHRbXG5cdFx0XHRcdHJlY3RhbmdsZS56LFxuXHRcdFx0XHRyZWN0YW5nbGUud1xuXHRcdFx0XVxuXHRcdCk7XG5cblx0XHRpZiAoIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICkgdGhpcy50ZXh0dXJlVXRpbHMuZ2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRQYXNzICkge1xuXG5cdFx0XHRjb25zdCB7IGRlc2NyaXB0b3IgfSA9IHJlbmRlckNvbnRleHREYXRhO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkZXNjcmlwdG9yLmNvbG9yQXR0YWNobWVudHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGRlc2NyaXB0b3IuY29sb3JBdHRhY2htZW50c1sgaSBdLmxvYWRPcCA9IEdQVUxvYWRPcC5Mb2FkO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVuZGVyQ29udGV4dC5kZXB0aCApIGRlc2NyaXB0b3IuZGVwdGhTdGVuY2lsQXR0YWNobWVudC5kZXB0aExvYWRPcCA9IEdQVUxvYWRPcC5Mb2FkO1xuXHRcdFx0aWYgKCByZW5kZXJDb250ZXh0LnN0ZW5jaWwgKSBkZXNjcmlwdG9yLmRlcHRoU3RlbmNpbEF0dGFjaG1lbnQuc3RlbmNpbExvYWRPcCA9IEdQVUxvYWRPcC5Mb2FkO1xuXG5cdFx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50UGFzcyA9IGVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKCBkZXNjcmlwdG9yICk7XG5cdFx0XHRyZW5kZXJDb250ZXh0RGF0YS5jdXJyZW50U2V0cyA9IHsgYXR0cmlidXRlczoge30sIGJpbmRpbmdHcm91cHM6IFtdLCBwaXBlbGluZTogbnVsbCwgaW5kZXg6IG51bGwgfTtcblxuXHRcdFx0aWYgKCByZW5kZXJDb250ZXh0LnZpZXdwb3J0ICkge1xuXG5cdFx0XHRcdHRoaXMudXBkYXRlVmlld3BvcnQoIHJlbmRlckNvbnRleHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHJlbmRlckNvbnRleHQuc2Npc3NvciApIHtcblxuXHRcdFx0XHRjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHJlbmRlckNvbnRleHQuc2Npc3NvclZhbHVlO1xuXG5cdFx0XHRcdHJlbmRlckNvbnRleHREYXRhLmN1cnJlbnRQYXNzLnNldFNjaXNzb3JSZWN0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZGV2aWNlLnF1ZXVlLnN1Ym1pdCggWyBlbmNvZGVyLmZpbmlzaCgpIF0gKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViR1BVQmFja2VuZDtcbiIsImltcG9ydCB7IFNwb3RMaWdodCB9IGZyb20gJy4uL1Nwb3RMaWdodC5qcyc7XG5cbi8qKlxuICogQSBJRVMgdmVyc2lvbiBvZiB7QGxpbmsgU3BvdExpZ2h0fS4gQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBXZWJHUFVSZW5kZXJlcn0uXG4gKlxuICogQGF1Z21lbnRzIFNwb3RMaWdodFxuICovXG5jbGFzcyBJRVNTcG90TGlnaHQgZXh0ZW5kcyBTcG90TGlnaHQge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IElFUyBzcG90IGxpZ2h0LlxuXHQgKlxuXHQgKiBAcGFyYW0geyhudW1iZXJ8Q29sb3J8c3RyaW5nKX0gW2NvbG9yPTB4ZmZmZmZmXSAtIFRoZSBsaWdodCdzIGNvbG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2ludGVuc2l0eT0xXSAtIFRoZSBsaWdodCdzIHN0cmVuZ3RoL2ludGVuc2l0eSBtZWFzdXJlZCBpbiBjYW5kZWxhIChjZCkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGlzdGFuY2U9MF0gLSBNYXhpbXVtIHJhbmdlIG9mIHRoZSBsaWdodC4gYDBgIG1lYW5zIG5vIGxpbWl0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FuZ2xlPU1hdGguUEkvM10gLSBNYXhpbXVtIGFuZ2xlIG9mIGxpZ2h0IGRpc3BlcnNpb24gZnJvbSBpdHMgZGlyZWN0aW9uIHdob3NlIHVwcGVyIGJvdW5kIGlzIGBNYXRoLlBJLzJgLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3BlbnVtYnJhPTBdIC0gUGVyY2VudCBvZiB0aGUgc3BvdGxpZ2h0IGNvbmUgdGhhdCBpcyBhdHRlbnVhdGVkIGR1ZSB0byBwZW51bWJyYS4gVmFsdWUgcmFuZ2UgaXMgYFswLDFdYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkZWNheT0yXSAtIFRoZSBhbW91bnQgdGhlIGxpZ2h0IGRpbXMgYWxvbmcgdGhlIGRpc3RhbmNlIG9mIHRoZSBsaWdodC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgYW5nbGUsIHBlbnVtYnJhLCBkZWNheSApIHtcblxuXHRcdHN1cGVyKCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgYW5nbGUsIHBlbnVtYnJhLCBkZWNheSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVE9ET1xuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmllc01hcCA9IG51bGw7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuaWVzTWFwID0gc291cmNlLmllc01hcDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBJRVNTcG90TGlnaHQ7XG4iLCJpbXBvcnQgTm9kZUxpYnJhcnkgZnJvbSAnLi4vLi4vY29tbW9uL25vZGVzL05vZGVMaWJyYXJ5LmpzJztcblxuLy8gTWF0ZXJpYWxzXG5pbXBvcnQgTWVzaFBob25nTm9kZU1hdGVyaWFsIGZyb20gJy4uLy4uLy4uL21hdGVyaWFscy9ub2Rlcy9NZXNoUGhvbmdOb2RlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IE1lc2hTdGFuZGFyZE5vZGVNYXRlcmlhbCBmcm9tICcuLi8uLi8uLi9tYXRlcmlhbHMvbm9kZXMvTWVzaFN0YW5kYXJkTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCBNZXNoUGh5c2ljYWxOb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vLi4vbWF0ZXJpYWxzL25vZGVzL01lc2hQaHlzaWNhbE5vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgTWVzaFRvb25Ob2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vLi4vbWF0ZXJpYWxzL25vZGVzL01lc2hUb29uTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCBNZXNoQmFzaWNOb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vLi4vbWF0ZXJpYWxzL25vZGVzL01lc2hCYXNpY05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgTWVzaExhbWJlcnROb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vLi4vbWF0ZXJpYWxzL25vZGVzL01lc2hMYW1iZXJ0Tm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCBNZXNoTm9ybWFsTm9kZU1hdGVyaWFsIGZyb20gJy4uLy4uLy4uL21hdGVyaWFscy9ub2Rlcy9NZXNoTm9ybWFsTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCBNZXNoTWF0Y2FwTm9kZU1hdGVyaWFsIGZyb20gJy4uLy4uLy4uL21hdGVyaWFscy9ub2Rlcy9NZXNoTWF0Y2FwTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCBMaW5lQmFzaWNOb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vLi4vbWF0ZXJpYWxzL25vZGVzL0xpbmVCYXNpY05vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgTGluZURhc2hlZE5vZGVNYXRlcmlhbCBmcm9tICcuLi8uLi8uLi9tYXRlcmlhbHMvbm9kZXMvTGluZURhc2hlZE5vZGVNYXRlcmlhbC5qcyc7XG5pbXBvcnQgUG9pbnRzTm9kZU1hdGVyaWFsIGZyb20gJy4uLy4uLy4uL21hdGVyaWFscy9ub2Rlcy9Qb2ludHNOb2RlTWF0ZXJpYWwuanMnO1xuaW1wb3J0IFNwcml0ZU5vZGVNYXRlcmlhbCBmcm9tICcuLi8uLi8uLi9tYXRlcmlhbHMvbm9kZXMvU3ByaXRlTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCBTaGFkb3dOb2RlTWF0ZXJpYWwgZnJvbSAnLi4vLi4vLi4vbWF0ZXJpYWxzL25vZGVzL1NoYWRvd05vZGVNYXRlcmlhbC5qcyc7XG4vL2ltcG9ydCB7IE1lc2hEZXB0aE1hdGVyaWFsIH0gZnJvbSAnLi4vLi4vLi4vbWF0ZXJpYWxzL01lc2hEZXB0aE1hdGVyaWFsLmpzJztcbi8vaW1wb3J0IE1lc2hEZXB0aE5vZGVNYXRlcmlhbCBmcm9tICcuLi8uLi8uLi9tYXRlcmlhbHMvbm9kZXMvTWVzaERlcHRoTm9kZU1hdGVyaWFsLmpzJztcbi8vaW1wb3J0IHsgTWVzaERpc3RhbmNlTWF0ZXJpYWwgfSBmcm9tICcuLi8uLi8uLi9tYXRlcmlhbHMvTWVzaERpc3RhbmNlTWF0ZXJpYWwuanMnO1xuLy9pbXBvcnQgTWVzaERpc3RhbmNlTm9kZU1hdGVyaWFsIGZyb20gJy4uLy4uLy4uL21hdGVyaWFscy9ub2Rlcy9NZXNoRGlzdGFuY2VOb2RlTWF0ZXJpYWwuanMnO1xuXG4vLyBMaWdodHNcbmltcG9ydCB7IFBvaW50TGlnaHQgfSBmcm9tICcuLi8uLi8uLi9saWdodHMvUG9pbnRMaWdodC5qcyc7XG5pbXBvcnQgeyBEaXJlY3Rpb25hbExpZ2h0IH0gZnJvbSAnLi4vLi4vLi4vbGlnaHRzL0RpcmVjdGlvbmFsTGlnaHQuanMnO1xuaW1wb3J0IHsgUmVjdEFyZWFMaWdodCB9IGZyb20gJy4uLy4uLy4uL2xpZ2h0cy9SZWN0QXJlYUxpZ2h0LmpzJztcbmltcG9ydCB7IFNwb3RMaWdodCB9IGZyb20gJy4uLy4uLy4uL2xpZ2h0cy9TcG90TGlnaHQuanMnO1xuaW1wb3J0IHsgQW1iaWVudExpZ2h0IH0gZnJvbSAnLi4vLi4vLi4vbGlnaHRzL0FtYmllbnRMaWdodC5qcyc7XG5pbXBvcnQgeyBIZW1pc3BoZXJlTGlnaHQgfSBmcm9tICcuLi8uLi8uLi9saWdodHMvSGVtaXNwaGVyZUxpZ2h0LmpzJztcbmltcG9ydCB7IExpZ2h0UHJvYmUgfSBmcm9tICcuLi8uLi8uLi9saWdodHMvTGlnaHRQcm9iZS5qcyc7XG5pbXBvcnQgSUVTU3BvdExpZ2h0IGZyb20gJy4uLy4uLy4uL2xpZ2h0cy93ZWJncHUvSUVTU3BvdExpZ2h0LmpzJztcbmltcG9ydCB7XG5cdFBvaW50TGlnaHROb2RlLFxuXHREaXJlY3Rpb25hbExpZ2h0Tm9kZSxcblx0UmVjdEFyZWFMaWdodE5vZGUsXG5cdFNwb3RMaWdodE5vZGUsXG5cdEFtYmllbnRMaWdodE5vZGUsXG5cdEhlbWlzcGhlcmVMaWdodE5vZGUsXG5cdExpZ2h0UHJvYmVOb2RlLFxuXHRJRVNTcG90TGlnaHROb2RlXG59IGZyb20gJy4uLy4uLy4uL25vZGVzL05vZGVzLmpzJztcblxuLy8gVG9uZSBNYXBwaW5nXG5pbXBvcnQgeyBMaW5lYXJUb25lTWFwcGluZywgUmVpbmhhcmRUb25lTWFwcGluZywgQ2luZW9uVG9uZU1hcHBpbmcsIEFDRVNGaWxtaWNUb25lTWFwcGluZywgQWdYVG9uZU1hcHBpbmcsIE5ldXRyYWxUb25lTWFwcGluZyB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBsaW5lYXJUb25lTWFwcGluZywgcmVpbmhhcmRUb25lTWFwcGluZywgY2luZW9uVG9uZU1hcHBpbmcsIGFjZXNGaWxtaWNUb25lTWFwcGluZywgYWd4VG9uZU1hcHBpbmcsIG5ldXRyYWxUb25lTWFwcGluZyB9IGZyb20gJy4uLy4uLy4uL25vZGVzL2Rpc3BsYXkvVG9uZU1hcHBpbmdGdW5jdGlvbnMuanMnO1xuXG4vKipcbiAqIFRoaXMgdmVyc2lvbiBvZiBhIG5vZGUgbGlicmFyeSByZXByZXNlbnRzIHRoZSBzdGFuZGFyZCB2ZXJzaW9uXG4gKiB1c2VkIGluIHtAbGluayBXZWJHUFVSZW5kZXJlcn0uIEl0IG1hcHMgbGlnaHRzLCB0b25lIG1hcHBpbmdcbiAqIHRlY2huaXF1ZXMgYW5kIG1hdGVyaWFscyB0byBub2RlLWJhc2VkIGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGF1Z21lbnRzIE5vZGVMaWJyYXJ5XG4gKi9cbmNsYXNzIFN0YW5kYXJkTm9kZUxpYnJhcnkgZXh0ZW5kcyBOb2RlTGlicmFyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc3RhbmRhcmQgbm9kZSBsaWJyYXJ5LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5hZGRNYXRlcmlhbCggTWVzaFBob25nTm9kZU1hdGVyaWFsLCAnTWVzaFBob25nTWF0ZXJpYWwnICk7XG5cdFx0dGhpcy5hZGRNYXRlcmlhbCggTWVzaFN0YW5kYXJkTm9kZU1hdGVyaWFsLCAnTWVzaFN0YW5kYXJkTWF0ZXJpYWwnICk7XG5cdFx0dGhpcy5hZGRNYXRlcmlhbCggTWVzaFBoeXNpY2FsTm9kZU1hdGVyaWFsLCAnTWVzaFBoeXNpY2FsTWF0ZXJpYWwnICk7XG5cdFx0dGhpcy5hZGRNYXRlcmlhbCggTWVzaFRvb25Ob2RlTWF0ZXJpYWwsICdNZXNoVG9vbk1hdGVyaWFsJyApO1xuXHRcdHRoaXMuYWRkTWF0ZXJpYWwoIE1lc2hCYXNpY05vZGVNYXRlcmlhbCwgJ01lc2hCYXNpY01hdGVyaWFsJyApO1xuXHRcdHRoaXMuYWRkTWF0ZXJpYWwoIE1lc2hMYW1iZXJ0Tm9kZU1hdGVyaWFsLCAnTWVzaExhbWJlcnRNYXRlcmlhbCcgKTtcblx0XHR0aGlzLmFkZE1hdGVyaWFsKCBNZXNoTm9ybWFsTm9kZU1hdGVyaWFsLCAnTWVzaE5vcm1hbE1hdGVyaWFsJyApO1xuXHRcdHRoaXMuYWRkTWF0ZXJpYWwoIE1lc2hNYXRjYXBOb2RlTWF0ZXJpYWwsICdNZXNoTWF0Y2FwTWF0ZXJpYWwnICk7XG5cdFx0dGhpcy5hZGRNYXRlcmlhbCggTGluZUJhc2ljTm9kZU1hdGVyaWFsLCAnTGluZUJhc2ljTWF0ZXJpYWwnICk7XG5cdFx0dGhpcy5hZGRNYXRlcmlhbCggTGluZURhc2hlZE5vZGVNYXRlcmlhbCwgJ0xpbmVEYXNoZWRNYXRlcmlhbCcgKTtcblx0XHR0aGlzLmFkZE1hdGVyaWFsKCBQb2ludHNOb2RlTWF0ZXJpYWwsICdQb2ludHNNYXRlcmlhbCcgKTtcblx0XHR0aGlzLmFkZE1hdGVyaWFsKCBTcHJpdGVOb2RlTWF0ZXJpYWwsICdTcHJpdGVNYXRlcmlhbCcgKTtcblx0XHR0aGlzLmFkZE1hdGVyaWFsKCBTaGFkb3dOb2RlTWF0ZXJpYWwsICdTaGFkb3dNYXRlcmlhbCcgKTtcblxuXHRcdHRoaXMuYWRkTGlnaHQoIFBvaW50TGlnaHROb2RlLCBQb2ludExpZ2h0ICk7XG5cdFx0dGhpcy5hZGRMaWdodCggRGlyZWN0aW9uYWxMaWdodE5vZGUsIERpcmVjdGlvbmFsTGlnaHQgKTtcblx0XHR0aGlzLmFkZExpZ2h0KCBSZWN0QXJlYUxpZ2h0Tm9kZSwgUmVjdEFyZWFMaWdodCApO1xuXHRcdHRoaXMuYWRkTGlnaHQoIFNwb3RMaWdodE5vZGUsIFNwb3RMaWdodCApO1xuXHRcdHRoaXMuYWRkTGlnaHQoIEFtYmllbnRMaWdodE5vZGUsIEFtYmllbnRMaWdodCApO1xuXHRcdHRoaXMuYWRkTGlnaHQoIEhlbWlzcGhlcmVMaWdodE5vZGUsIEhlbWlzcGhlcmVMaWdodCApO1xuXHRcdHRoaXMuYWRkTGlnaHQoIExpZ2h0UHJvYmVOb2RlLCBMaWdodFByb2JlICk7XG5cdFx0dGhpcy5hZGRMaWdodCggSUVTU3BvdExpZ2h0Tm9kZSwgSUVTU3BvdExpZ2h0ICk7XG5cblx0XHR0aGlzLmFkZFRvbmVNYXBwaW5nKCBsaW5lYXJUb25lTWFwcGluZywgTGluZWFyVG9uZU1hcHBpbmcgKTtcblx0XHR0aGlzLmFkZFRvbmVNYXBwaW5nKCByZWluaGFyZFRvbmVNYXBwaW5nLCBSZWluaGFyZFRvbmVNYXBwaW5nICk7XG5cdFx0dGhpcy5hZGRUb25lTWFwcGluZyggY2luZW9uVG9uZU1hcHBpbmcsIENpbmVvblRvbmVNYXBwaW5nICk7XG5cdFx0dGhpcy5hZGRUb25lTWFwcGluZyggYWNlc0ZpbG1pY1RvbmVNYXBwaW5nLCBBQ0VTRmlsbWljVG9uZU1hcHBpbmcgKTtcblx0XHR0aGlzLmFkZFRvbmVNYXBwaW5nKCBhZ3hUb25lTWFwcGluZywgQWdYVG9uZU1hcHBpbmcgKTtcblx0XHR0aGlzLmFkZFRvbmVNYXBwaW5nKCBuZXV0cmFsVG9uZU1hcHBpbmcsIE5ldXRyYWxUb25lTWFwcGluZyApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTdGFuZGFyZE5vZGVMaWJyYXJ5O1xuIiwiaW1wb3J0IFJlbmRlcmVyIGZyb20gJy4uL2NvbW1vbi9SZW5kZXJlci5qcyc7XG5pbXBvcnQgV2ViR0xCYWNrZW5kIGZyb20gJy4uL3dlYmdsLWZhbGxiYWNrL1dlYkdMQmFja2VuZC5qcyc7XG5pbXBvcnQgV2ViR1BVQmFja2VuZCBmcm9tICcuL1dlYkdQVUJhY2tlbmQuanMnO1xuaW1wb3J0IFN0YW5kYXJkTm9kZUxpYnJhcnkgZnJvbSAnLi9ub2Rlcy9TdGFuZGFyZE5vZGVMaWJyYXJ5LmpzJztcbi8qXG5jb25zdCBkZWJ1Z0hhbmRsZXIgPSB7XG5cblx0Z2V0OiBmdW5jdGlvbiAoIHRhcmdldCwgbmFtZSApIHtcblxuXHRcdC8vIEFkZCB8dXBkYXRlXG5cdFx0aWYgKCAvXihjcmVhdGV8ZGVzdHJveSkvLnRlc3QoIG5hbWUgKSApIGNvbnNvbGUubG9nKCAnV2ViR1BVQmFja2VuZC4nICsgbmFtZSApO1xuXG5cdFx0cmV0dXJuIHRhcmdldFsgbmFtZSBdO1xuXG5cdH1cblxufTtcbiovXG5cbi8qKlxuICogVGhpcyByZW5kZXJlciBpcyB0aGUgbmV3IGFsdGVybmF0aXZlIG9mIGBXZWJHTFJlbmRlcmVyYC4gYFdlYkdQVVJlbmRlcmVyYCBoYXMgdGhlIGFiaWxpdHlcbiAqIHRvIHRhcmdldCBkaWZmZXJlbnQgYmFja2VuZHMuIEJ5IGRlZmF1bHQsIHRoZSByZW5kZXJlciB0cmllcyB0byB1c2UgYSBXZWJHUFUgYmFja2VuZCBpZiB0aGVcbiAqIGJyb3dzZXIgc3VwcG9ydHMgV2ViR1BVLiBJZiBub3QsIGBXZWJHUFVSZW5kZXJlcmAgZmFsbHMgYmFja3MgdG8gYSBXZWJHTCAyIGJhY2tlbmQuXG4gKlxuICogQGF1Z21lbnRzIFJlbmRlcmVyXG4gKi9cbmNsYXNzIFdlYkdQVVJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXIge1xuXG5cdC8qKlxuXHQgKiBXZWJHUFVSZW5kZXJlciBvcHRpb25zLlxuXHQgKlxuXHQgKiBAdHlwZWRlZiB7T2JqZWN0fSBXZWJHUFVSZW5kZXJlcn5PcHRpb25zXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2xvZ2FyaXRobWljRGVwdGhCdWZmZXI9ZmFsc2VdIC0gV2hldGhlciBsb2dhcml0aG1pYyBkZXB0aCBidWZmZXIgaXMgZW5hYmxlZCBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2FscGhhPXRydWVdIC0gV2hldGhlciB0aGUgZGVmYXVsdCBmcmFtZWJ1ZmZlciAod2hpY2ggcmVwcmVzZW50cyB0aGUgZmluYWwgY29udGVudHMgb2YgdGhlIGNhbnZhcykgc2hvdWxkIGJlIHRyYW5zcGFyZW50IG9yIG9wYXF1ZS5cblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbZGVwdGg9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyIHNob3VsZCBoYXZlIGEgZGVwdGggYnVmZmVyIG9yIG5vdC5cblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbc3RlbmNpbD1mYWxzZV0gLSBXaGV0aGVyIHRoZSBkZWZhdWx0IGZyYW1lYnVmZmVyIHNob3VsZCBoYXZlIGEgc3RlbmNpbCBidWZmZXIgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IFthbnRpYWxpYXM9ZmFsc2VdIC0gV2hldGhlciBNU0FBIGFzIHRoZSBkZWZhdWx0IGFudGktYWxpYXNpbmcgc2hvdWxkIGJlIGVuYWJsZWQgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge251bWJlcn0gW3NhbXBsZXM9MF0gLSBXaGVuIGBhbnRpYWxpYXNgIGlzIGB0cnVlYCwgYDRgIHNhbXBsZXMgYXJlIHVzZWQgYnkgZGVmYXVsdC4gU2V0IHRoaXMgcGFyYW1ldGVyIHRvIGFueSBvdGhlciBpbnRlZ2VyIHZhbHVlIHRoYW4gMCB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHQuXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2ZvcmNlV2ViR0w9ZmFsc2VdIC0gSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHJlbmRlcmVyIHVzZXMgYSBXZWJHTCAyIGJhY2tlbmQgbm8gbWF0dGVyIGlmIFdlYkdQVSBpcyBzdXBwb3J0ZWQgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge251bWJlcn0gW291dHB1dFR5cGU9dW5kZWZpbmVkXSAtIFRleHR1cmUgdHlwZSBmb3Igb3V0cHV0IHRvIGNhbnZhcy4gQnkgZGVmYXVsdCwgZGV2aWNlJ3MgcHJlZmVycmVkIGZvcm1hdCBpcyB1c2VkOyBvdGhlciBmb3JtYXRzIG1heSBpbmN1ciBvdmVyaGVhZC5cblx0ICogQHByb3BlcnR5IHtudW1iZXJ9IFtjb2xvckJ1ZmZlclR5cGU9SGFsZkZsb2F0VHlwZV0gLSBEZWZpbmVzIHRoZSB0eXBlIG9mIGNvbG9yIGJ1ZmZlcnMuIFRoZSBkZWZhdWx0IGBIYWxmRmxvYXRUeXBlYCBpcyByZWNvbW1lbmQgZm9yIGJlc3Rcblx0ICogcXVhbGl0eS4gVG8gc2F2ZSBtZW1vcnkgYW5kIGJhbmR3aWR0aCwgYFVuc2lnbmVkQnl0ZVR5cGVgIG1pZ2h0IGJlIHVzZWQuIFRoaXMgd2lsbCByZWR1Y2UgcmVuZGVyaW5nIHF1YWxpdHkgdGhvdWdoLlxuXHQgKi9cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBXZWJHUFUgcmVuZGVyZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR1BVUmVuZGVyZXJ+T3B0aW9uc30gW3BhcmFtZXRlcnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgPSB7fSApIHtcblxuXHRcdGxldCBCYWNrZW5kQ2xhc3M7XG5cblx0XHRpZiAoIHBhcmFtZXRlcnMuZm9yY2VXZWJHTCApIHtcblxuXHRcdFx0QmFja2VuZENsYXNzID0gV2ViR0xCYWNrZW5kO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0QmFja2VuZENsYXNzID0gV2ViR1BVQmFja2VuZDtcblxuXHRcdFx0cGFyYW1ldGVycy5nZXRGYWxsYmFjayA9ICgpID0+IHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHUFVSZW5kZXJlcjogV2ViR1BVIGlzIG5vdCBhdmFpbGFibGUsIHJ1bm5pbmcgdW5kZXIgV2ViR0wyIGJhY2tlbmQuJyApO1xuXG5cdFx0XHRcdHJldHVybiBuZXcgV2ViR0xCYWNrZW5kKCBwYXJhbWV0ZXJzICk7XG5cblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHRjb25zdCBiYWNrZW5kID0gbmV3IEJhY2tlbmRDbGFzcyggcGFyYW1ldGVycyApO1xuXG5cdFx0Ly9zdXBlciggbmV3IFByb3h5KCBiYWNrZW5kLCBkZWJ1Z0hhbmRsZXIgKSApO1xuXHRcdHN1cGVyKCBiYWNrZW5kLCBwYXJhbWV0ZXJzICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZ2VuZXJpYyBkZWZhdWx0IHZhbHVlIGlzIG92ZXJ3cml0dGVuIHdpdGggdGhlXG5cdFx0ICogc3RhbmRhcmQgbm9kZSBsaWJyYXJ5IGZvciB0eXBlIG1hcHBpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7U3RhbmRhcmROb2RlTGlicmFyeX1cblx0XHQgKi9cblx0XHR0aGlzLmxpYnJhcnkgPSBuZXcgU3RhbmRhcmROb2RlTGlicmFyeSgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1dlYkdQVVJlbmRlcmVyID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViR1BVUmVuZGVyZXI7XG4iLCJpbXBvcnQgeyBHcm91cCB9IGZyb20gJy4uLy4uL29iamVjdHMvR3JvdXAuanMnO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgZ3JvdXAgd2hpY2ggZW5hYmxlcyBhcHBsaWNhdGlvbnMgYWNjZXNzIHRvIHRoZVxuICogUmVuZGVyIEJ1bmRsZSBBUEkgb2YgV2ViR1BVLiBUaGUgZ3JvdXAgd2l0aCBhbGwgaXRzIGRlc2NlbmRhbnQgbm9kZXNcbiAqIGFyZSBjb25zaWRlcmVkIGFzIG9uZSByZW5kZXIgYnVuZGxlIGFuZCBwcm9jZXNzZWQgYXMgc3VjaCBieVxuICogdGhlIHJlbmRlcmVyLlxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIG9ubHkgZnVsbHkgc3VwcG9ydGVkIGJ5IGBXZWJHUFVSZW5kZXJlcmAgd2l0aCBhIFdlYkdQVSBiYWNrZW5kLlxuICogV2l0aCBhIFdlYkdMIGJhY2tlbmQsIHRoZSBncm91cCBjYW4gdGVjaG5pY2FsbHkgYmUgcmVuZGVyZWQgYnV0IHdpdGhvdXRcbiAqIGFueSBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudHMuXG4gKlxuICogQGF1Z21lbnRzIEdyb3VwXG4gKi9cbmNsYXNzIEJ1bmRsZUdyb3VwIGV4dGVuZHMgR3JvdXAge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1bmRsZSBncm91cC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNCdW5kbGVHcm91cCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIHByb3BlcnR5IGlzIG9ubHkgcmVsZXZhbnQgZm9yIGRldGVjdGluZyB0eXBlc1xuXHRcdCAqIGR1cmluZyBzZXJpYWxpemF0aW9uL2Rlc2VyaWFsaXphdGlvbi4gSXQgc2hvdWxkIGFsd2F5c1xuXHRcdCAqIG1hdGNoIHRoZSBjbGFzcyBuYW1lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCAnQnVuZGxlR3JvdXAnXG5cdFx0ICovXG5cdFx0dGhpcy50eXBlID0gJ0J1bmRsZUdyb3VwJztcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGJ1bmRsZSBpcyBzdGF0aWMgb3Igbm90LiBXaGVuIHNldCB0byBgdHJ1ZWAsIHRoZSBzdHJ1Y3R1cmVcblx0XHQgKiBpcyBhc3N1bWVkIHRvIGJlIHN0YXRpYyBhbmQgZG9lcyBub3QgY2hhbmdlLiBFLmcuIG5vIG5ldyBvYmplY3RzIGFyZVxuXHRcdCAqIGFkZGVkIHRvIHRoZSBncm91cFxuXHRcdCAqXG5cdFx0ICogSWYgYSBjaGFuZ2UgaXMgcmVxdWlyZWQsIGFuIHVwZGF0ZSBjYW4gc3RpbGwgYmUgZm9yY2VkIGJ5IHNldHRpbmcgdGhlXG5cdFx0ICogYG5lZWRzVXBkYXRlYCBmbGFnIHRvIGB0cnVlYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLnN0YXRpYyA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYnVuZGxlIGdyb3VwJ3MgdmVyc2lvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMudmVyc2lvbiA9IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXQgdGhpcyBwcm9wZXJ0eSB0byBgdHJ1ZWAgd2hlbiB0aGUgYnVuZGxlIGdyb3VwIGhhcyBjaGFuZ2VkLlxuXHQgKlxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICogQGRlZmF1bHQgZmFsc2Vcblx0ICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuXHQgKi9cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1bmRsZUdyb3VwO1xuIiwiaW1wb3J0IE5vZGVNYXRlcmlhbCBmcm9tICcuLi8uLi9tYXRlcmlhbHMvbm9kZXMvTm9kZU1hdGVyaWFsLmpzJztcbmltcG9ydCB7IHZlYzQsIHJlbmRlck91dHB1dCB9IGZyb20gJy4uLy4uL25vZGVzL1RTTC5qcyc7XG5pbXBvcnQgeyBMaW5lYXJTUkdCQ29sb3JTcGFjZSwgTm9Ub25lTWFwcGluZyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgUXVhZE1lc2ggZnJvbSAnLi4vLi4vcmVuZGVyZXJzL2NvbW1vbi9RdWFkTWVzaC5qcyc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgaXMgcmVzcG9uc2libGUgdG8gbWFuYWdlIHRoZSBwb3N0IHByb2Nlc3Npbmcgc2V0dXBzIGluIGFwcHMuXG4gKiBZb3UgdXN1YWxseSBjcmVhdGUgYSBzaW5nbGUgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBhbmQgdXNlIGl0IHRvIGRlZmluZVxuICogdGhlIG91dHB1dCBvZiB5b3VyIHBvc3QgcHJvY2Vzc2luZyBlZmZlY3QgY2hhaW4uXG4gKiBgYGBqc1xuICogY29uc3QgcG9zdFByb2Nlc3NpbmcgPSBuZXcgUG9zdFByb2Nlc3NpbmcoIHJlbmRlcmVyICk7XG4gKlxuICogY29uc3Qgc2NlbmVQYXNzID0gcGFzcyggc2NlbmUsIGNhbWVyYSApO1xuICpcbiAqIHBvc3RQcm9jZXNzaW5nLm91dHB1dE5vZGUgPSBzY2VuZVBhc3M7XG4gKiBgYGBcbiAqXG4gKiBOb3RlOiBUaGlzIG1vZHVsZSBjYW4gb25seSBiZSB1c2VkIHdpdGggYFdlYkdQVVJlbmRlcmVyYC5cbiAqL1xuY2xhc3MgUG9zdFByb2Nlc3Npbmcge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBvc3QgcHJvY2Vzc2luZyBtYW5hZ2VtZW50IG1vZHVsZS5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJlcn0gcmVuZGVyZXIgLSBBIHJlZmVyZW5jZSB0byB0aGUgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7Tm9kZTx2ZWM0Pn0gb3V0cHV0Tm9kZSAtIEFuIG9wdGlvbmFsIG91dHB1dCBub2RlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJlbmRlcmVyLCBvdXRwdXROb2RlID0gdmVjNCggMCwgMCwgMSwgMSApICkge1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIHJlbmRlcmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1JlbmRlcmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcblxuXHRcdC8qKlxuXHRcdCAqIEEgbm9kZSB3aGljaCBkZWZpbmVzIHRoZSBmaW5hbCBvdXRwdXQgb2YgdGhlIHBvc3Rcblx0XHQgKiBwcm9jZXNzaW5nLiBUaGlzIGlzIHVzdWFsbHkgdGhlIGxhc3Qgbm9kZSBpbiBhIGNoYWluXG5cdFx0ICogb2YgZWZmZWN0IG5vZGVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGU8dmVjND59XG5cdFx0ICovXG5cdFx0dGhpcy5vdXRwdXROb2RlID0gb3V0cHV0Tm9kZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGRlZmF1bHQgb3V0cHV0IHRvbmUgbWFwcGluZyBhbmQgY29sb3Jcblx0XHQgKiBzcGFjZSB0cmFuc2Zvcm1hdGlvbiBzaG91bGQgYmUgZW5hYmxlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBJdCBpcyBlbmFibGVkIGJ5IGRlZmF1bHQgYnkgaXQgbXVzdCBiZSBkaXNhYmxlZCB3aGVuXG5cdFx0ICogZWZmZWN0cyBtdXN0IGJlIGV4ZWN1dGVkIGFmdGVyIHRvbmUgbWFwcGluZyBhbmQgY29sb3Jcblx0XHQgKiBzcGFjZSBjb252ZXJzaW9uLiBBIHR5cGljYWwgZXhhbXBsZSBpcyBGWEFBIHdoaWNoXG5cdFx0ICogcmVxdWlyZXMgc1JHQiBpbnB1dC5cblx0XHQgKlxuXHRcdCAqIFdoZW4gc2V0IHRvIGBmYWxzZWAsIHRoZSBhcHAgbXVzdCBjb250cm9sIHRoZSBvdXRwdXRcblx0XHQgKiB0cmFuc2Zvcm1hdGlvbiB3aXRoIGBSZW5kZXJPdXRwdXROb2RlYC5cblx0XHQgKlxuXHRcdCAqIGBgYGpzXG5cdFx0ICogY29uc3Qgb3V0cHV0UGFzcyA9IHJlbmRlck91dHB1dCggc2NlbmVQYXNzICk7XG5cdFx0ICogYGBgXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLm91dHB1dENvbG9yVHJhbnNmb3JtID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIE11c3QgYmUgc2V0IHRvIGB0cnVlYCB3aGVuIHRoZSBvdXRwdXQgbm9kZSBjaGFuZ2VzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge05vZGU8dmVjND59XG5cdFx0ICovXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBOb2RlTWF0ZXJpYWwoKTtcblx0XHRtYXRlcmlhbC5uYW1lID0gJ1Bvc3RQcm9jZXNzaW5nJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBmdWxsIHNjcmVlbiBxdWFkIHRoYXQgaXMgdXNlZCB0byByZW5kZXJcblx0XHQgKiB0aGUgZWZmZWN0cy5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUge1F1YWRNZXNofVxuXHRcdCAqL1xuXHRcdHRoaXMuX3F1YWRNZXNoID0gbmV3IFF1YWRNZXNoKCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hlbiBgUG9zdFByb2Nlc3NpbmdgIGlzIHVzZWQgdG8gYXBwbHkgcG9zdCBwcm9jZXNzaW5nIGVmZmVjdHMsXG5cdCAqIHRoZSBhcHBsaWNhdGlvbiBtdXN0IHVzZSB0aGlzIHZlcnNpb24gb2YgYHJlbmRlcigpYCBpbnNpZGVcblx0ICogaXRzIGFuaW1hdGlvbiBsb29wIChub3QgdGhlIG9uZSBmcm9tIHRoZSByZW5kZXJlcikuXG5cdCAqL1xuXHRyZW5kZXIoKSB7XG5cblx0XHR0aGlzLl91cGRhdGUoKTtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblxuXHRcdGNvbnN0IHRvbmVNYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cdFx0Y29uc3Qgb3V0cHV0Q29sb3JTcGFjZSA9IHJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2U7XG5cblx0XHRyZW5kZXJlci50b25lTWFwcGluZyA9IE5vVG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSA9IExpbmVhclNSR0JDb2xvclNwYWNlO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGN1cnJlbnRYUiA9IHJlbmRlcmVyLnhyLmVuYWJsZWQ7XG5cdFx0cmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fcXVhZE1lc2gucmVuZGVyKCByZW5kZXJlciApO1xuXG5cdFx0cmVuZGVyZXIueHIuZW5hYmxlZCA9IGN1cnJlbnRYUjtcblxuXHRcdC8vXG5cblx0XHRyZW5kZXJlci50b25lTWFwcGluZyA9IHRvbmVNYXBwaW5nO1xuXHRcdHJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2UgPSBvdXRwdXRDb2xvclNwYWNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgaW50ZXJuYWwgcmVzb3VyY2VzLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuX3F1YWRNZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHN0YXRlIG9mIHRoZSBtb2R1bGUuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfdXBkYXRlKCkge1xuXG5cdFx0aWYgKCB0aGlzLm5lZWRzVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cblx0XHRcdGNvbnN0IHRvbmVNYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cdFx0XHRjb25zdCBvdXRwdXRDb2xvclNwYWNlID0gcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZTtcblxuXHRcdFx0dGhpcy5fcXVhZE1lc2gubWF0ZXJpYWwuZnJhZ21lbnROb2RlID0gdGhpcy5vdXRwdXRDb2xvclRyYW5zZm9ybSA9PT0gdHJ1ZSA/IHJlbmRlck91dHB1dCggdGhpcy5vdXRwdXROb2RlLCB0b25lTWFwcGluZywgb3V0cHV0Q29sb3JTcGFjZSApIDogdGhpcy5vdXRwdXROb2RlLmNvbnRleHQoIHsgdG9uZU1hcHBpbmcsIG91dHB1dENvbG9yU3BhY2UgfSApO1xuXHRcdFx0dGhpcy5fcXVhZE1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXaGVuIGBQb3N0UHJvY2Vzc2luZ2AgaXMgdXNlZCB0byBhcHBseSBwb3N0IHByb2Nlc3NpbmcgZWZmZWN0cyxcblx0ICogdGhlIGFwcGxpY2F0aW9uIG11c3QgdXNlIHRoaXMgdmVyc2lvbiBvZiBgcmVuZGVyQXN5bmMoKWAgaW5zaWRlXG5cdCAqIGl0cyBhbmltYXRpb24gbG9vcCAobm90IHRoZSBvbmUgZnJvbSB0aGUgcmVuZGVyZXIpLlxuXHQgKlxuXHQgKiBAYXN5bmNcblx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcmVuZGVyIGhhcyBiZWVuIGZpbmlzaGVkLlxuXHQgKi9cblx0YXN5bmMgcmVuZGVyQXN5bmMoKSB7XG5cblx0XHR0aGlzLl91cGRhdGUoKTtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblxuXHRcdGNvbnN0IHRvbmVNYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cdFx0Y29uc3Qgb3V0cHV0Q29sb3JTcGFjZSA9IHJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2U7XG5cblx0XHRyZW5kZXJlci50b25lTWFwcGluZyA9IE5vVG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSA9IExpbmVhclNSR0JDb2xvclNwYWNlO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGN1cnJlbnRYUiA9IHJlbmRlcmVyLnhyLmVuYWJsZWQ7XG5cdFx0cmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0YXdhaXQgdGhpcy5fcXVhZE1lc2gucmVuZGVyQXN5bmMoIHJlbmRlcmVyICk7XG5cblx0XHRyZW5kZXJlci54ci5lbmFibGVkID0gY3VycmVudFhSO1xuXG5cdFx0Ly9cblxuXHRcdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gdG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSA9IG91dHB1dENvbG9yU3BhY2U7XG5cblx0fVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvc3RQcm9jZXNzaW5nO1xuIiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uL3RleHR1cmVzL1RleHR1cmUuanMnO1xuaW1wb3J0IHsgTGluZWFyRmlsdGVyIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBUaGlzIHNwZWNpYWwgdHlwZSBvZiB0ZXh0dXJlIGlzIGludGVuZGVkIGZvciBjb21wdXRlIHNoYWRlcnMuXG4gKiBJdCBjYW4gYmUgdXNlZCB0byBjb21wdXRlIHRoZSBkYXRhIG9mIGEgdGV4dHVyZSB3aXRoIGEgY29tcHV0ZSBzaGFkZXIuXG4gKlxuICogTm90ZTogVGhpcyB0eXBlIG9mIHRleHR1cmUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGBXZWJHUFVSZW5kZXJlcmBcbiAqIGFuZCBhIFdlYkdQVSBiYWNrZW5kLlxuICpcbiAqIEBhdWdtZW50cyBUZXh0dXJlXG4gKi9cbmNsYXNzIFN0b3JhZ2VUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc3RvcmFnZSB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPTFdIC0gVGhlIHN0b3JhZ2UgdGV4dHVyZSdzIHdpZHRoLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBzdG9yYWdlIHRleHR1cmUncyBoZWlnaHQuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbWFnZSBvYmplY3Qgd2hpY2gganVzdCByZXByZXNlbnRzIHRoZSB0ZXh0dXJlJ3MgZGltZW5zaW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3t3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn19XG5cdFx0ICovXG5cdFx0dGhpcy5pbWFnZSA9IHsgd2lkdGgsIGhlaWdodCB9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRlZmF1bHQgYG1hZ0ZpbHRlcmAgZm9yIHN0b3JhZ2UgdGV4dHVyZXMgaXMgYFRIUkVFLkxpbmVhckZpbHRlcmAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMubWFnRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRlZmF1bHQgYG1pbkZpbHRlcmAgZm9yIHN0b3JhZ2UgdGV4dHVyZXMgaXMgYFRIUkVFLkxpbmVhckZpbHRlcmAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1N0b3JhZ2VUZXh0dXJlID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RvcmFnZVRleHR1cmU7XG4iLCJpbXBvcnQgU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZSBmcm9tICcuL1N0b3JhZ2VCdWZmZXJBdHRyaWJ1dGUuanMnO1xuXG4vKipcbiAqIFRoaXMgc3BlY2lhbCB0eXBlIG9mIGJ1ZmZlciBhdHRyaWJ1dGUgaXMgaW50ZW5kZWQgZm9yIGNvbXB1dGUgc2hhZGVycy5cbiAqIEl0IGNhbiBiZSB1c2VkIHRvIGVuY29kZSBkcmF3IHBhcmFtZXRlcnMgZm9yIGluZGlyZWN0IGRyYXcgY2FsbHMuXG4gKlxuICogTm90ZTogVGhpcyB0eXBlIG9mIGJ1ZmZlciBhdHRyaWJ1dGUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGBXZWJHUFVSZW5kZXJlcmBcbiAqIGFuZCBhIFdlYkdQVSBiYWNrZW5kLlxuICpcbiAqIEBhdWdtZW50cyBTdG9yYWdlQnVmZmVyQXR0cmlidXRlXG4gKi9cbmNsYXNzIEluZGlyZWN0U3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIFN0b3JhZ2VCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHN0b3JhZ2UgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ8VWludDMyQXJyYXl9IGNvdW50IC0gVGhlIGl0ZW0gY291bnQuIEl0IGlzIGFsc28gdmFsaWQgdG8gcGFzcyBhIGBVaW50MzJBcnJheWAgYXMgYW4gYXJndW1lbnQuXG5cdCAqIFRoZSBzdWJzZXF1ZW50IHBhcmFtZXRlciBpcyB0aGVuIG9ic29sZXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNvdW50LCBpdGVtU2l6ZSApIHtcblxuXHRcdHN1cGVyKCBjb3VudCwgaXRlbVNpemUsIFVpbnQzMkFycmF5ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzSW5kaXJlY3RTdG9yYWdlQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5kaXJlY3RTdG9yYWdlQnVmZmVyQXR0cmlidXRlO1xuIiwiaW1wb3J0IHsgbm9kZU9iamVjdCwgZmxvYXQgfSBmcm9tICcuLi8uLi9ub2Rlcy90c2wvVFNMQmFzZS5qcyc7XG5cbmltcG9ydCB7IExvYWRlciB9IGZyb20gJy4uL0xvYWRlci5qcyc7XG5pbXBvcnQgeyBGaWxlTG9hZGVyIH0gZnJvbSAnLi4vLi4vbG9hZGVycy9GaWxlTG9hZGVyLmpzJztcblxuLyoqXG4gKiBBIGxvYWRlciBmb3IgbG9hZGluZyBub2RlIG9iamVjdHMgaW4gdGhlIHRocmVlLmpzIEpTT04gT2JqZWN0L1NjZW5lIGZvcm1hdC5cbiAqXG4gKiBAYXVnbWVudHMgTG9hZGVyXG4gKi9cbmNsYXNzIE5vZGVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG5vZGUgbG9hZGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xvYWRpbmdNYW5hZ2VyfSBbbWFuYWdlcl0gLSBBIHJlZmVyZW5jZSB0byBhIGxvYWRpbmcgbWFuYWdlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgYSBkaWN0aW9uYXJ5IG9mIHRleHR1cmVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsVGV4dHVyZT59XG5cdFx0ICovXG5cdFx0dGhpcy50ZXh0dXJlcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyBhIGRpY3Rpb25hcnkgb2Ygbm9kZSB0eXBlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLE5vZGUuY29uc3RydWN0b3I+fVxuXHRcdCAqL1xuXHRcdHRoaXMubm9kZXMgPSB7fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIExvYWRzIHRoZSBub2RlIGRlZmluaXRpb25zIGZyb20gdGhlIGdpdmVuIFVSTC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IG9uTG9hZCAtIFdpbGwgYmUgY2FsbGVkIHdoZW4gbG9hZCBjb21wbGV0ZXMuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IG9uUHJvZ3Jlc3MgLSBXaWxsIGJlIGNhbGxlZCB3aGlsZSBsb2FkIHByb2dyZXNzZXMuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IG9uRXJyb3IgLSBXaWxsIGJlIGNhbGxlZCB3aGVuIGVycm9ycyBhcmUgdGhyb3duIGR1cmluZyB0aGUgbG9hZGluZyBwcm9jZXNzLlxuXHQgKi9cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5zZXRSZXF1ZXN0SGVhZGVyKCB0aGlzLnJlcXVlc3RIZWFkZXIgKTtcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0aGlzLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsICggdGV4dCApID0+IHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRvbkxvYWQoIHRoaXMucGFyc2UoIEpTT04ucGFyc2UoIHRleHQgKSApICk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdGlmICggb25FcnJvciApIHtcblxuXHRcdFx0XHRcdG9uRXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUGFyc2UgdGhlIG5vZGUgZGVwZW5kZW5jaWVzIGZvciB0aGUgbG9hZGVkIG5vZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIEpTT04gZGVmaW5pdGlvblxuXHQgKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLE5vZGU+fSBBIGRpY3Rpb25hcnkgd2l0aCBub2RlIGRlcGVuZGVuY2llcy5cblx0ICovXG5cdHBhcnNlTm9kZXMoIGpzb24gKSB7XG5cblx0XHRjb25zdCBub2RlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IG5vZGVKU09OIG9mIGpzb24gKSB7XG5cblx0XHRcdFx0Y29uc3QgeyB1dWlkLCB0eXBlIH0gPSBub2RlSlNPTjtcblxuXHRcdFx0XHRub2Rlc1sgdXVpZCBdID0gdGhpcy5jcmVhdGVOb2RlRnJvbVR5cGUoIHR5cGUgKTtcblx0XHRcdFx0bm9kZXNbIHV1aWQgXS51dWlkID0gdXVpZDtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBtZXRhID0geyBub2RlcywgdGV4dHVyZXM6IHRoaXMudGV4dHVyZXMgfTtcblxuXHRcdFx0Zm9yICggY29uc3Qgbm9kZUpTT04gb2YganNvbiApIHtcblxuXHRcdFx0XHRub2RlSlNPTi5tZXRhID0gbWV0YTtcblxuXHRcdFx0XHRjb25zdCBub2RlID0gbm9kZXNbIG5vZGVKU09OLnV1aWQgXTtcblx0XHRcdFx0bm9kZS5kZXNlcmlhbGl6ZSggbm9kZUpTT04gKTtcblxuXHRcdFx0XHRkZWxldGUgbm9kZUpTT04ubWV0YTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGVzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUGFyc2VzIHRoZSBub2RlIGZyb20gdGhlIGdpdmVuIEpTT04uXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIEpTT04gZGVmaW5pdGlvblxuXHQgKiBAcmV0dXJuIHtOb2RlfSBUaGUgcGFyc2VkIG5vZGUuXG5cdCAqL1xuXHRwYXJzZSgganNvbiApIHtcblxuXHRcdGNvbnN0IG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGVGcm9tVHlwZSgganNvbi50eXBlICk7XG5cdFx0bm9kZS51dWlkID0ganNvbi51dWlkO1xuXG5cdFx0Y29uc3Qgbm9kZXMgPSB0aGlzLnBhcnNlTm9kZXMoIGpzb24ubm9kZXMgKTtcblx0XHRjb25zdCBtZXRhID0geyBub2RlcywgdGV4dHVyZXM6IHRoaXMudGV4dHVyZXMgfTtcblxuXHRcdGpzb24ubWV0YSA9IG1ldGE7XG5cblx0XHRub2RlLmRlc2VyaWFsaXplKCBqc29uICk7XG5cblx0XHRkZWxldGUganNvbi5tZXRhO1xuXG5cdFx0cmV0dXJuIG5vZGU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBkaWN0aW9uYXJ5IG9mIHRleHR1cmVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsVGV4dHVyZT59IHZhbHVlIC0gVGhlIHRleHR1cmUgbGlicmFyeSBkZWZpbmVzIGFzIGA8dXVpZCx0ZXh0dXJlPmAuXG5cdCAqIEByZXR1cm4ge05vZGVMb2FkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbG9hZGVyLlxuXHQgKi9cblx0c2V0VGV4dHVyZXMoIHZhbHVlICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlcyA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgZGljdGlvbmFyeSBvZiBub2RlIHR5cGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsTm9kZS5jb25zdHJ1Y3Rvcj59IHZhbHVlIC0gVGhlIG5vZGUgbGlicmFyeSBkZWZpbmVkIGFzIGA8Y2xhc3NuYW1lLGNsYXNzPmAuXG5cdCAqIEByZXR1cm4ge05vZGVMb2FkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbG9hZGVyLlxuXHQgKi9cblx0c2V0Tm9kZXMoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5ub2RlcyA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5vZGUgb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIG5vZGUgdHlwZS5cblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIGNyZWF0ZWQgbm9kZSBpbnN0YW5jZS5cblx0ICovXG5cdGNyZWF0ZU5vZGVGcm9tVHlwZSggdHlwZSApIHtcblxuXHRcdGlmICggdGhpcy5ub2Rlc1sgdHlwZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Ob2RlTG9hZGVyOiBOb2RlIHR5cGUgbm90IGZvdW5kOicsIHR5cGUgKTtcblx0XHRcdHJldHVybiBmbG9hdCgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vZGVPYmplY3QoIG5ldyB0aGlzLm5vZGVzWyB0eXBlIF0oKSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBOb2RlTG9hZGVyO1xuIiwiaW1wb3J0IHsgTWF0ZXJpYWxMb2FkZXIgfSBmcm9tICcuLi8uLi9sb2FkZXJzL01hdGVyaWFsTG9hZGVyLmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWwgdHlwZSBvZiBtYXRlcmlhbCBsb2FkZXIgZm9yIGxvYWRpbmcgbm9kZSBtYXRlcmlhbHMuXG4gKlxuICogQGF1Z21lbnRzIE1hdGVyaWFsTG9hZGVyXG4gKi9cbmNsYXNzIE5vZGVNYXRlcmlhbExvYWRlciBleHRlbmRzIE1hdGVyaWFsTG9hZGVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBub2RlIG1hdGVyaWFsIGxvYWRlci5cblx0ICpcblx0ICogQHBhcmFtIHtMb2FkaW5nTWFuYWdlcn0gW21hbmFnZXJdIC0gQSByZWZlcmVuY2UgdG8gYSBsb2FkaW5nIG1hbmFnZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIGEgZGljdGlvbmFyeSBvZiBub2RlIHR5cGVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsTm9kZS5jb25zdHJ1Y3Rvcj59XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyBhIGRpY3Rpb25hcnkgb2Ygbm9kZSBtYXRlcmlhbCB0eXBlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLE5vZGVNYXRlcmlhbC5jb25zdHJ1Y3Rvcj59XG5cdFx0ICovXG5cdFx0dGhpcy5ub2RlTWF0ZXJpYWxzID0ge307XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgdGhlIG5vZGUgbWF0ZXJpYWwgZnJvbSB0aGUgZ2l2ZW4gSlNPTi5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgSlNPTiBkZWZpbml0aW9uXG5cdCAqIEByZXR1cm4ge05vZGVNYXRlcmlhbH0uIFRoZSBwYXJzZWQgbWF0ZXJpYWwuXG5cdCAqL1xuXHRwYXJzZSgganNvbiApIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gc3VwZXIucGFyc2UoIGpzb24gKTtcblxuXHRcdGNvbnN0IG5vZGVzID0gdGhpcy5ub2Rlcztcblx0XHRjb25zdCBpbnB1dE5vZGVzID0ganNvbi5pbnB1dE5vZGVzO1xuXG5cdFx0Zm9yICggY29uc3QgcHJvcGVydHkgaW4gaW5wdXROb2RlcyApIHtcblxuXHRcdFx0Y29uc3QgdXVpZCA9IGlucHV0Tm9kZXNbIHByb3BlcnR5IF07XG5cblx0XHRcdG1hdGVyaWFsWyBwcm9wZXJ0eSBdID0gbm9kZXNbIHV1aWQgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRlcmlhbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGRpY3Rpb25hcnkgb2Ygbm9kZSB0eXBlcy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLE5vZGUuY29uc3RydWN0b3I+fSB2YWx1ZSAtIFRoZSBub2RlIGxpYnJhcnkgZGVmaW5lZCBhcyBgPGNsYXNzbmFtZSxjbGFzcz5gLlxuXHQgKiBAcmV0dXJuIHtOb2RlTG9hZGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGxvYWRlci5cblx0ICovXG5cdHNldE5vZGVzKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMubm9kZXMgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGRpY3Rpb25hcnkgb2Ygbm9kZSBtYXRlcmlhbCB0eXBlcy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLE5vZGVNYXRlcmlhbC5jb25zdHJ1Y3Rvcj59IHZhbHVlIC0gVGhlIG5vZGUgbWF0ZXJpYWwgbGlicmFyeSBkZWZpbmVkIGFzIGA8Y2xhc3NuYW1lLGNsYXNzPmAuXG5cdCAqIEByZXR1cm4ge05vZGVMb2FkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbG9hZGVyLlxuXHQgKi9cblx0c2V0Tm9kZU1hdGVyaWFscyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLm5vZGVNYXRlcmlhbHMgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBub2RlIG1hdGVyaWFsIGZyb20gdGhlIGdpdmVuIHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIG5vZGUgbWF0ZXJpYWwgdHlwZS5cblx0ICogQHJldHVybiB7Tm9kZX0gVGhlIGNyZWF0ZWQgbm9kZSBtYXRlcmlhbCBpbnN0YW5jZS5cblx0ICovXG5cdGNyZWF0ZU1hdGVyaWFsRnJvbVR5cGUoIHR5cGUgKSB7XG5cblx0XHRjb25zdCBtYXRlcmlhbENsYXNzID0gdGhpcy5ub2RlTWF0ZXJpYWxzWyB0eXBlIF07XG5cblx0XHRpZiAoIG1hdGVyaWFsQ2xhc3MgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBtYXRlcmlhbENsYXNzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc3VwZXIuY3JlYXRlTWF0ZXJpYWxGcm9tVHlwZSggdHlwZSApO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBOb2RlTWF0ZXJpYWxMb2FkZXI7XG4iLCJpbXBvcnQgTm9kZUxvYWRlciBmcm9tICcuL05vZGVMb2FkZXIuanMnO1xuaW1wb3J0IE5vZGVNYXRlcmlhbExvYWRlciBmcm9tICcuL05vZGVNYXRlcmlhbExvYWRlci5qcyc7XG5cbmltcG9ydCB7IE9iamVjdExvYWRlciB9IGZyb20gJy4uLy4uL2xvYWRlcnMvT2JqZWN0TG9hZGVyLmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWwgdHlwZSBvZiBvYmplY3QgbG9hZGVyIGZvciBsb2FkaW5nIDNEIG9iamVjdHMgdXNpbmdcbiAqIG5vZGUgbWF0ZXJpYWxzLlxuICpcbiAqIEBhdWdtZW50cyBPYmplY3RMb2FkZXJcbiAqL1xuY2xhc3MgTm9kZU9iamVjdExvYWRlciBleHRlbmRzIE9iamVjdExvYWRlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbm9kZSBvYmplY3QgbG9hZGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xvYWRpbmdNYW5hZ2VyfSBbbWFuYWdlcl0gLSBBIHJlZmVyZW5jZSB0byBhIGxvYWRpbmcgbWFuYWdlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgYSBkaWN0aW9uYXJ5IG9mIG5vZGUgdHlwZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxOb2RlLmNvbnN0cnVjdG9yPn1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGVzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIGEgZGljdGlvbmFyeSBvZiBub2RlIG1hdGVyaWFsIHR5cGVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDxzdHJpbmcsTm9kZU1hdGVyaWFsLmNvbnN0cnVjdG9yPn1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGVNYXRlcmlhbHMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIGhvbGQgdGhlIGBub2Rlc2AgSlNPTiBwcm9wZXJ0eS5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9PYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5fbm9kZXNKU09OID0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGRpY3Rpb25hcnkgb2Ygbm9kZSB0eXBlcy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLE5vZGUuY29uc3RydWN0b3I+fSB2YWx1ZSAtIFRoZSBub2RlIGxpYnJhcnkgZGVmaW5lZCBhcyBgPGNsYXNzbmFtZSxjbGFzcz5gLlxuXHQgKiBAcmV0dXJuIHtOb2RlT2JqZWN0TG9hZGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGxvYWRlci5cblx0ICovXG5cdHNldE5vZGVzKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMubm9kZXMgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGRpY3Rpb25hcnkgb2Ygbm9kZSBtYXRlcmlhbCB0eXBlcy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLE5vZGVNYXRlcmlhbC5jb25zdHJ1Y3Rvcj59IHZhbHVlIC0gVGhlIG5vZGUgbWF0ZXJpYWwgbGlicmFyeSBkZWZpbmVkIGFzIGA8Y2xhc3NuYW1lLGNsYXNzPmAuXG5cdCAqIEByZXR1cm4ge05vZGVPYmplY3RMb2FkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbG9hZGVyLlxuXHQgKi9cblx0c2V0Tm9kZU1hdGVyaWFscyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLm5vZGVNYXRlcmlhbHMgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyB0aGUgbm9kZSBvYmplY3RzIGZyb20gdGhlIGdpdmVuIEpTT04uXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIEpTT04gZGVmaW5pdGlvblxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkxvYWQgLSBUaGUgb25Mb2FkIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKiBAcmV0dXJuIHtPYmplY3QzRH0uIFRoZSBwYXJzZWQgM0Qgb2JqZWN0LlxuXHQgKi9cblx0cGFyc2UoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdHRoaXMuX25vZGVzSlNPTiA9IGpzb24ubm9kZXM7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIucGFyc2UoIGpzb24sIG9uTG9hZCApO1xuXG5cdFx0dGhpcy5fbm9kZXNKU09OID0gbnVsbDsgLy8gZGlzcG9zZVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgdGhlIG5vZGUgb2JqZWN0cyBmcm9tIHRoZSBnaXZlbiBKU09OIGFuZCB0ZXh0dXJlcy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgSlNPTiBkZWZpbml0aW9uXG5cdCAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxUZXh0dXJlPn0gdGV4dHVyZXMgLSBUaGUgdGV4dHVyZSBsaWJyYXJ5LlxuXHQgKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLE5vZGU+fS4gVGhlIHBhcnNlZCBub2Rlcy5cblx0ICovXG5cdHBhcnNlTm9kZXMoIGpzb24sIHRleHR1cmVzICkge1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGxvYWRlciA9IG5ldyBOb2RlTG9hZGVyKCk7XG5cdFx0XHRsb2FkZXIuc2V0Tm9kZXMoIHRoaXMubm9kZXMgKTtcblx0XHRcdGxvYWRlci5zZXRUZXh0dXJlcyggdGV4dHVyZXMgKTtcblxuXHRcdFx0cmV0dXJuIGxvYWRlci5wYXJzZU5vZGVzKCBqc29uICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge307XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgdGhlIG5vZGUgb2JqZWN0cyBmcm9tIHRoZSBnaXZlbiBKU09OIGFuZCB0ZXh0dXJlcy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgSlNPTiBkZWZpbml0aW9uXG5cdCAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZyxUZXh0dXJlPn0gdGV4dHVyZXMgLSBUaGUgdGV4dHVyZSBsaWJyYXJ5LlxuXHQgKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLE5vZGVNYXRlcmlhbD59LiBUaGUgcGFyc2VkIG1hdGVyaWFscy5cblx0ICovXG5cdHBhcnNlTWF0ZXJpYWxzKCBqc29uLCB0ZXh0dXJlcyApIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFscyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IG5vZGVzID0gdGhpcy5wYXJzZU5vZGVzKCB0aGlzLl9ub2Rlc0pTT04sIHRleHR1cmVzICk7XG5cblx0XHRcdGNvbnN0IGxvYWRlciA9IG5ldyBOb2RlTWF0ZXJpYWxMb2FkZXIoKTtcblx0XHRcdGxvYWRlci5zZXRUZXh0dXJlcyggdGV4dHVyZXMgKTtcblx0XHRcdGxvYWRlci5zZXROb2Rlcyggbm9kZXMgKTtcblx0XHRcdGxvYWRlci5zZXROb2RlTWF0ZXJpYWxzKCB0aGlzLm5vZGVNYXRlcmlhbHMgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdFx0bWF0ZXJpYWxzWyBkYXRhLnV1aWQgXSA9IGxvYWRlci5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBOb2RlT2JqZWN0TG9hZGVyO1xuIiwiaW1wb3J0IHsgR3JvdXAgfSBmcm9tICcuL0dyb3VwLmpzJztcblxuLyoqXG4gKiBJbiBlYXJsaWVyIHRocmVlLmpzIHZlcnNpb25zLCBjbGlwcGluZyB3YXMgZGVmaW5lZCBnbG9iYWxseVxuICogb24gdGhlIHJlbmRlcmVyIG9yIG9uIG1hdGVyaWFsIGxldmVsLiBUaGlzIHNwZWNpYWwgdmVyc2lvbiBvZlxuICogYFRIUkVFLkdyb3VwYCBhbGxvd3MgdG8gZW5jb2RlIHRoZSBjbGlwcGluZyBzdGF0ZSBpbnRvIHRoZSBzY2VuZVxuICogZ3JhcGguIE1lYW5pbmcgaWYgeW91IGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGdyb3VwLCBhbGxcbiAqIGRlc2NlbmRhbnQgM0Qgb2JqZWN0cyB3aWxsIGJlIGFmZmVjdGVkIGJ5IHRoZSByZXNwZWN0aXZlIGNsaXBwaW5nXG4gKiBwbGFuZXMuXG4gKlxuICogTm90ZTogYENsaXBwaW5nR3JvdXBgIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCBgV2ViR1BVUmVuZGVyZXJgLlxuICpcbiAqIEBhdWdtZW50cyBHcm91cFxuICovXG5jbGFzcyBDbGlwcGluZ0dyb3VwIGV4dGVuZHMgR3JvdXAge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNsaXBwaW5nIGdyb3VwLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0NsaXBwaW5nR3JvdXAgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgd2l0aCBjbGlwcGluZyBwbGFuZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8UGxhbmU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY2xpcHBpbmdQbGFuZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgY2xpcHBpbmcgc2hvdWxkIGJlIGVuYWJsZWQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIGNsaXBwaW5nIHBsYW5lcyBpcyB1c2VkIHRvIGNsaXAgb2JqZWN0cywgcmF0aGVyIHRoYW4gdGhlaXIgdW5pb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuY2xpcEludGVyc2VjdGlvbiA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciBzaGFkb3dzIHNob3VsZCBiZSBjbGlwcGVkIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5jbGlwU2hhZG93cyA9IGZhbHNlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBDbGlwcGluZ0dyb3VwIH07XG4iXSwibmFtZXMiOlsicmVmcmVzaFVuaWZvcm1zIiwiTm9kZU1hdGVyaWFsT2JzZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsImJ1aWxkZXIiLCJ0aGlzIiwicmVuZGVyT2JqZWN0cyIsIldlYWtNYXAiLCJoYXNOb2RlIiwiY29udGFpbnNOb2RlIiwiaGFzQW5pbWF0aW9uIiwib2JqZWN0IiwiaXNTa2lubmVkTWVzaCIsInJlbmRlcklkIiwiZmlyc3RJbml0aWFsaXphdGlvbiIsInJlbmRlck9iamVjdCIsImhhcyIsImdldFJlbmRlck9iamVjdERhdGEiLCJkYXRhIiwiZ2V0IiwidW5kZWZpbmVkIiwiZ2VvbWV0cnkiLCJtYXRlcmlhbCIsImdldE1hdGVyaWFsRGF0YSIsImlkIiwiYXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZXNEYXRhIiwiaW5kZXhWZXJzaW9uIiwiaW5kZXgiLCJ2ZXJzaW9uIiwiZHJhd1JhbmdlIiwic3RhcnQiLCJjb3VudCIsIndvcmxkTWF0cml4IiwibWF0cml4V29ybGQiLCJjbG9uZSIsImNlbnRlciIsIm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyIsInNsaWNlIiwiYnVuZGxlIiwidHJhbnNtaXNzaW9uIiwid2lkdGgiLCJoZWlnaHQiLCJjb250ZXh0IiwiYnVmZmVyV2lkdGgiLCJidWZmZXJIZWlnaHQiLCJzZXQiLCJhdHRyaWJ1dGVzRGF0YSIsIm5hbWUiLCJhdHRyaWJ1dGUiLCJwcm9wZXJ0eSIsImlzTm9kZSIsInJlbmRlcmVyIiwibm9kZXMiLCJtb2RlbFZpZXdNYXRyaXgiLCJtb2RlbE5vcm1hbFZpZXdNYXRyaXgiLCJ2YWx1ZSIsImlzVGV4dHVyZSIsImVxdWFscyIsInJlbmRlck9iamVjdERhdGEiLCJjb3B5IiwibWF0ZXJpYWxEYXRhIiwibXRsVmFsdWUiLCJzdG9yZWRHZW9tZXRyeURhdGEiLCJzdG9yZWRBdHRyaWJ1dGVzIiwic3RvcmVkQXR0cmlidXRlTmFtZXMiLCJPYmplY3QiLCJrZXlzIiwiY3VycmVudEF0dHJpYnV0ZU5hbWVzIiwibGVuZ3RoIiwic3RvcmVkQXR0cmlidXRlRGF0YSIsInN0b3JlZEluZGV4VmVyc2lvbiIsImN1cnJlbnRJbmRleFZlcnNpb24iLCJtb3JwaENoYW5nZWQiLCJpIiwibmVlZHNSZWZyZXNoIiwibm9kZUZyYW1lIiwiaXNTdGF0aWMiLCJzdGF0aWMiLCJpc0J1bmRsZSIsImN5cmI1MyIsInNlZWQiLCJoMSIsImgyIiwiQXJyYXkiLCJ2YWwiLCJNYXRoIiwiaW11bCIsImNoIiwiY2hhckNvZGVBdCIsImhhc2hTdHJpbmciLCJzdHIiLCJoYXNoQXJyYXkiLCJhcnJheSIsImhhc2gkMSIsInBhcmFtcyIsImdldENhY2hlS2V5JDEiLCJmb3JjZSIsInZhbHVlcyIsInB1c2giLCJnZXRTZWxmIiwiY2hpbGROb2RlIiwiZ2V0Tm9kZUNoaWxkcmVuIiwiZ2V0Q2FjaGVLZXkiLCJub2RlIiwidG9KU09OIiwic3RhcnRzV2l0aCIsImlzQXJyYXkiLCJjaGlsZCIsInN1YlByb3BlcnR5IiwidHlwZUZyb21MZW5ndGgiLCJNYXAiLCJkYXRhRnJvbU9iamVjdCIsImdldFR5cGVGcm9tTGVuZ3RoIiwiZ2V0VHlwZWRBcnJheUZyb21UeXBlIiwidHlwZSIsInRlc3QiLCJJbnQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJFcnJvciIsImdldExlbmd0aEZyb21UeXBlIiwiY29uc29sZSIsImVycm9yIiwiZ2V0VmFsdWVUeXBlIiwidHlwZU9mIiwiaXNWZWN0b3IyIiwiaXNWZWN0b3IzIiwiaXNWZWN0b3I0IiwiaXNNYXRyaXgyIiwiaXNNYXRyaXgzIiwiaXNNYXRyaXg0IiwiaXNDb2xvciIsIkFycmF5QnVmZmVyIiwiZ2V0VmFsdWVGcm9tVHlwZSIsImxhc3Q0IiwiQ29sb3IiLCJWZWN0b3IyIiwiVmVjdG9yMyIsIlZlY3RvcjQiLCJNYXRyaXgyIiwiTWF0cml4MyIsIk1hdHJpeDQiLCJiYXNlNjRUb0FycmF5QnVmZmVyIiwiZ2V0RGF0YUZyb21PYmplY3QiLCJhcnJheUJ1ZmZlclRvQmFzZTY0IiwiYXJyYXlCdWZmZXIiLCJjaGFycyIsIlVpbnQ4QXJyYXkiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJidG9hIiwiYmFzZTY0IiwiZnJvbSIsImF0b2IiLCJjIiwiYnVmZmVyIiwiTm9kZVNoYWRlclN0YWdlIiwiVkVSVEVYIiwiRlJBR01FTlQiLCJOb2RlVXBkYXRlVHlwZSIsIk5PTkUiLCJGUkFNRSIsIlJFTkRFUiIsIk9CSkVDVCIsIk5vZGVUeXBlIiwiQk9PTEVBTiIsIklOVEVHRVIiLCJGTE9BVCIsIlZFQ1RPUjIiLCJWRUNUT1IzIiwiVkVDVE9SNCIsIk1BVFJJWDIiLCJNQVRSSVgzIiwiTUFUUklYNCIsIk5vZGVBY2Nlc3MiLCJSRUFEX09OTFkiLCJXUklURV9PTkxZIiwiUkVBRF9XUklURSIsImRlZmF1bHRTaGFkZXJTdGFnZXMiLCJkZWZhdWx0QnVpbGRTdGFnZXMiLCJzaGFkZXJTdGFnZXMiLCJ2ZWN0b3JDb21wb25lbnRzIiwiX25vZGVJZCIsIk5vZGUiLCJFdmVudERpc3BhdGNoZXIiLCJub2RlVHlwZSIsInN1cGVyIiwidXBkYXRlVHlwZSIsInVwZGF0ZUJlZm9yZVR5cGUiLCJ1cGRhdGVBZnRlclR5cGUiLCJ1dWlkIiwiTWF0aFV0aWxzIiwiZ2VuZXJhdGVVVUlEIiwiZ2xvYmFsIiwiX2NhY2hlS2V5IiwiX2NhY2hlS2V5VmVyc2lvbiIsImRlZmluZVByb3BlcnR5IiwibmVlZHNVcGRhdGUiLCJvblVwZGF0ZSIsImNhbGxiYWNrIiwidXBkYXRlIiwiYmluZCIsIm9uRnJhbWVVcGRhdGUiLCJvblJlbmRlclVwZGF0ZSIsIm9uT2JqZWN0VXBkYXRlIiwib25SZWZlcmVuY2UiLCJ1cGRhdGVSZWZlcmVuY2UiLCJzZWxmIiwiaXNHbG9iYWwiLCJnZXRDaGlsZHJlbiIsImRpc3Bvc2UiLCJkaXNwYXRjaEV2ZW50IiwidHJhdmVyc2UiLCJjdXN0b21DYWNoZUtleSIsImdldFNjb3BlIiwiZ2V0SGFzaCIsImdldFVwZGF0ZVR5cGUiLCJnZXRVcGRhdGVCZWZvcmVUeXBlIiwiZ2V0VXBkYXRlQWZ0ZXJUeXBlIiwiZ2V0RWxlbWVudFR5cGUiLCJnZXROb2RlVHlwZSIsImdldE1lbWJlclR5cGUiLCJub2RlUHJvcGVydGllcyIsImdldE5vZGVQcm9wZXJ0aWVzIiwib3V0cHV0Tm9kZSIsImdldFNoYXJlZCIsImhhc2giLCJnZXROb2RlRnJvbUhhc2giLCJzZXR1cCIsImFuYWx5emUiLCJpbmNyZWFzZVVzYWdlIiwiYnVpbGQiLCJnZW5lcmF0ZSIsIm91dHB1dCIsInVwZGF0ZUJlZm9yZSIsIndhcm4iLCJ1cGRhdGVBZnRlciIsInJlZk5vZGUiLCJhZGROb2RlIiwiYWRkQ2hhaW4iLCJyZXN1bHQiLCJidWlsZFN0YWdlIiwiZ2V0QnVpbGRTdGFnZSIsInByb3BlcnRpZXMiLCJpbml0aWFsaXplZCIsImlzTm9kZU91dHB1dCIsIm5vZGVEYXRhIiwiZ2V0RGF0YUZyb21Ob2RlIiwic25pcHBldCIsImZsb3dDb2RlcyIsIm5vZGVCbG9jayIsImFkZEZsb3dDb2RlSGllcmFyY2h5IiwiZm9ybWF0IiwicmVtb3ZlQ2hhaW4iLCJhZGRTZXF1ZW50aWFsTm9kZSIsImdldFNlcmlhbGl6ZUNoaWxkcmVuIiwic2VyaWFsaXplIiwianNvbiIsIm5vZGVDaGlsZHJlbiIsImlucHV0Tm9kZXMiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJtZXRhIiwiZGVzZXJpYWxpemUiLCJpbnB1dEFycmF5IiwiaW5wdXRPYmplY3QiLCJpc1Jvb3QiLCJ0ZXh0dXJlcyIsImltYWdlcyIsImV4dHJhY3RGcm9tQ2FjaGUiLCJjYWNoZSIsImtleSIsIm1ldGFkYXRhIiwiZ2VuZXJhdG9yIiwiQXJyYXlFbGVtZW50Tm9kZSIsImluZGV4Tm9kZSIsImlzQXJyYXlFbGVtZW50Tm9kZSIsIkNvbnZlcnROb2RlIiwiY29udmVydFRvIiwicmVxdWVzdFR5cGUiLCJvdmVybG9hZGluZ1R5cGUiLCJzcGxpdCIsImdldFR5cGVMZW5ndGgiLCJUZW1wTm9kZSIsImlzVGVtcE5vZGUiLCJoYXNEZXBlbmRlbmNpZXMiLCJ1c2FnZUNvdW50IiwiZ2V0VmVjdG9yVHlwZSIsInByb3BlcnR5TmFtZSIsIm5vZGVWYXIiLCJnZXRWYXJGcm9tTm9kZSIsImdldFByb3BlcnR5TmFtZSIsImFkZExpbmVGbG93Q29kZSIsIkpvaW5Ob2RlIiwicmVkdWNlIiwiY3VyIiwicHJpbWl0aXZlVHlwZSIsImdldENvbXBvbmVudFR5cGUiLCJzbmlwcGV0VmFsdWVzIiwiaW5wdXQiLCJpbnB1dFNuaXBwZXQiLCJpbnB1dFByaW1pdGl2ZVR5cGUiLCJnZXRUeXBlIiwiam9pbiIsIl9zdHJpbmdWZWN0b3JDb21wb25lbnRzIiwiU3BsaXROb2RlIiwiY29tcG9uZW50cyIsImlzU3BsaXROb2RlIiwiZ2V0VmVjdG9yTGVuZ3RoIiwidmVjdG9yTGVuZ3RoIiwibWF4IiwiaW5kZXhPZiIsIm5vZGVUeXBlTGVuZ3RoIiwibm9kZVNuaXBwZXQiLCJTZXROb2RlIiwic291cmNlTm9kZSIsInRhcmdldE5vZGUiLCJzb3VyY2VUeXBlIiwiY29tcG9uZW50VHlwZSIsInRhcmdldFR5cGUiLCJ0YXJnZXRTbmlwcGV0Iiwic291cmNlU25pcHBldCIsImNvbXBvbmVudCIsIkZsaXBOb2RlIiwic291cmNlQ2FjaGUiLCJzb3VyY2VQcm9wZXJ0eSIsImNvbXBvbmVudEluZGV4IiwiSW5wdXROb2RlIiwiaXNJbnB1dE5vZGUiLCJwcmVjaXNpb24iLCJnZXRJbnB1dFR5cGUiLCJzZXRQcmVjaXNpb24iLCJ0b0FycmF5IiwidmFsdWVUeXBlIiwiZnJvbUFycmF5IiwiX3JlZ051bSIsIkNvbnN0Tm9kZSIsImlzQ29uc3ROb2RlIiwiZ2VuZXJhdGVDb25zdCIsIk1lbWJlck5vZGUiLCJpc01lbWJlck5vZGUiLCJjdXJyZW50U3RhY2siLCJOb2RlRWxlbWVudHMiLCJhZGRNZXRob2RDaGFpbmluZyIsIm5vZGVFbGVtZW50IiwicGFyc2VTd2l6emxlIiwicHJvcHMiLCJyZXBsYWNlIiwicGFyc2VTd2l6emxlQW5kU29ydCIsInNvcnQiLCJzaGFkZXJOb2RlSGFuZGxlciIsIk5vZGVDbG9zdXJlIiwiaW5wdXRzIiwic2hpZnQiLCJub2RlT2JqZWN0cyIsInByb3AiLCJub2RlT2JqIiwiaXNTdGFja05vZGUiLCJhc3NpZ24iLCJhZGQiLCJlbmRzV2l0aCIsIm5vZGVPYmplY3QiLCJ0b0xvd2VyQ2FzZSIsIlJlZmxlY3QiLCJub2RlT2JqZWN0c0NhY2hlTWFwIiwibm9kZUJ1aWxkZXJGdW5jdGlvbnNDYWNoZU1hcCIsIlNoYWRlck5vZGVPYmplY3RzIiwib2JqZWN0cyIsImFsdFR5cGUiLCJTaGFkZXJOb2RlQXJyYXkiLCJsZW4iLCJTaGFkZXJOb2RlUHJveHkiLCJOb2RlQ2xhc3MiLCJzY29wZSIsImZhY3RvciIsInNldHRpbmdzIiwiYXNzaWduTm9kZSIsIm5vZGVBcnJheSIsIlNoYWRlck5vZGVJbW11dGFibGUiLCJTaGFkZXJDYWxsTm9kZUludGVybmFsIiwic2hhZGVyTm9kZSIsImdldE91dHB1dE5vZGUiLCJjYWxsIiwib25jZU91dHB1dCIsImxheW91dCIsImZ1bmN0aW9uTm9kZXNDYWNoZU1hcCIsImZ1bmN0aW9uTm9kZSIsImJ1aWxkRnVuY3Rpb25Ob2RlIiwiYWRkSW5jbHVkZSIsImpzRnVuYyIsIm9uY2UiLCJzZXR1cE91dHB1dCIsImFkZFN0YWNrIiwic3RhY2siLCJyZW1vdmVTdGFjayIsIlNoYWRlck5vZGVJbnRlcm5hbCIsInNldExheW91dCIsImJvb2xzIiwidWludHMiLCJpbnRzIiwiZmxvYXRzIiwiUEkiLCJib29sc0NhY2hlTWFwIiwiYm9vbCIsInVpbnRzQ2FjaGVNYXAiLCJ1aW50IiwiaW50c0NhY2hlTWFwIiwibWFwIiwiZWwiLCJpbnQiLCJmbG9hdHNDYWNoZU1hcCIsImZsb2F0IiwiY2FjaGVNYXBzIiwiY29uc3ROb2Rlc0NhY2hlTWFwIiwiZ2V0Q29uc3ROb2RlIiwiQ29udmVydFR5cGUiLCJjYWNoZU1hcCIsImluY2x1ZGVzIiwiZXZlcnkiLCJwYXJhbSIsIl8iLCJzYWZlR2V0Tm9kZVR5cGUiLCJkZWZpbmVkIiwidiIsImdldENvbnN0Tm9kZVR5cGUiLCJTaGFkZXJOb2RlIiwiUHJveHkiLCJvYmoiLCJGbiIsIlNoYWRlck5vZGVPYmplY3QiLCJub2RlUHJveHkiLCJub2RlSW1tdXRhYmxlIiwiZm4iLCJzZXRDdXJyZW50U3RhY2siLCJnZXRDdXJyZW50U3RhY2siLCJJZiIsImFwcGVuZCIsImNvbG9yIiwidmVjMiIsIml2ZWMyIiwidXZlYzIiLCJidmVjMiIsInZlYzMiLCJpdmVjMyIsInV2ZWMzIiwiYnZlYzMiLCJ2ZWM0IiwiaXZlYzQiLCJ1dmVjNCIsImJ2ZWM0IiwibWF0MiIsIm1hdDMiLCJtYXQ0IiwiZWxlbWVudCIsImNvbnZlcnQiLCJ0eXBlcyIsIkFycmF5Tm9kZSIsImlzQXJyYXlOb2RlIiwiZ2VuZXJhdGVBcnJheSIsImZpbGwiLCJVbmlmb3JtR3JvdXBOb2RlIiwic2hhcmVkIiwib3JkZXIiLCJpc1VuaWZvcm1Hcm91cCIsInVuaWZvcm1Hcm91cCIsInNoYXJlZFVuaWZvcm1Hcm91cCIsImZyYW1lR3JvdXAiLCJyZW5kZXJHcm91cCIsIm9iamVjdEdyb3VwIiwiVW5pZm9ybU5vZGUiLCJpc1VuaWZvcm1Ob2RlIiwiZ3JvdXBOb2RlIiwibGFiZWwiLCJzZXRHcm91cCIsImdyb3VwIiwiZ2V0R3JvdXAiLCJnZXRVbmlmb3JtSGFzaCIsImZyYW1lIiwic2hhcmVkTm9kZSIsInNldEhhc2hOb2RlIiwic2hhcmVkTm9kZVR5cGUiLCJub2RlVW5pZm9ybSIsImdldFVuaWZvcm1Gcm9tTm9kZSIsInNoYWRlclN0YWdlIiwidW5pZm9ybSIsImFyZzEiLCJhcmcyIiwiUHJvcGVydHlOb2RlIiwidmFyeWluZyIsImlzUHJvcGVydHlOb2RlIiwiZ2V0VmFyeWluZ0Zyb21Ob2RlIiwibmVlZHNJbnRlcnBvbGF0aW9uIiwidmFyeWluZ1Byb3BlcnR5IiwiZGlmZnVzZUNvbG9yIiwiZW1pc3NpdmUiLCJyb3VnaG5lc3MiLCJtZXRhbG5lc3MiLCJjbGVhcmNvYXQiLCJjbGVhcmNvYXRSb3VnaG5lc3MiLCJzaGVlbiIsInNoZWVuUm91Z2huZXNzIiwiaXJpZGVzY2VuY2UiLCJpcmlkZXNjZW5jZUlPUiIsImlyaWRlc2NlbmNlVGhpY2tuZXNzIiwiYWxwaGFUIiwiYW5pc290cm9weSIsImFuaXNvdHJvcHlUIiwiYW5pc290cm9weUIiLCJzcGVjdWxhckNvbG9yIiwic3BlY3VsYXJGOTAiLCJzaGluaW5lc3MiLCJkYXNoU2l6ZSIsImdhcFNpemUiLCJwb2ludFdpZHRoIiwiaW9yIiwidGhpY2tuZXNzIiwiYXR0ZW51YXRpb25EaXN0YW5jZSIsImF0dGVudWF0aW9uQ29sb3IiLCJkaXNwZXJzaW9uIiwiQXNzaWduTm9kZSIsIm5lZWRzU3BsaXRBc3NpZ24iLCJpc0F2YWlsYWJsZSIsInRhcmdldExlbmd0aCIsInRhcmdldCIsInNvdXJjZSIsInNvdXJjZVZhciIsInRhcmdldFJvb3QiLCJGdW5jdGlvbkNhbGxOb2RlIiwicGFyYW1ldGVycyIsInNldFBhcmFtZXRlcnMiLCJnZXRQYXJhbWV0ZXJzIiwiZ2V0SW5wdXRzIiwiZ2VuZXJhdGVJbnB1dCIsImlucHV0Tm9kZSIsImZ1bmMiLCJPcGVyYXRvck5vZGUiLCJvcCIsImFOb2RlIiwiYk5vZGUiLCJmaW5hbE9wIiwiaXNPcGVyYXRvck5vZGUiLCJ0eXBlQSIsInR5cGVCIiwiZ2V0SW50ZWdlclR5cGUiLCJ0eXBlTGVuZ3RoIiwiaXNNYXRyaXgiLCJpc1ZlY3RvciIsImdldFZlY3RvckZyb21NYXRyaXgiLCJjaGFuZ2VDb21wb25lbnRUeXBlIiwiYSIsImIiLCJvdXRwdXRMZW5ndGgiLCJmbk9wU25pcHBldCIsImdldEZ1bmN0aW9uT3BlcmF0b3IiLCJ1c2VDb21wYXJpc29uTWV0aG9kIiwiZ2V0TWV0aG9kIiwic3ViIiwibXVsIiwiZGl2IiwibW9kSW50IiwiZXF1YWwiLCJub3RFcXVhbCIsImxlc3NUaGFuIiwiZ3JlYXRlclRoYW4iLCJsZXNzVGhhbkVxdWFsIiwiZ3JlYXRlclRoYW5FcXVhbCIsImFuZCIsIm9yIiwibm90IiwieG9yIiwiYml0QW5kIiwiYml0Tm90IiwiYml0T3IiLCJiaXRYb3IiLCJzaGlmdExlZnQiLCJzaGlmdFJpZ2h0IiwicmVtYWluZGVyIiwiTWF0aE5vZGUiLCJtZXRob2QiLCJjTm9kZSIsImlzTWF0aE5vZGUiLCJhVHlwZSIsImJUeXBlIiwiY1R5cGUiLCJhTGVuIiwiYkxlbiIsImNMZW4iLCJMRU5HVEgiLCJESVNUQU5DRSIsIkRPVCIsIkNST1NTIiwiQUxMIiwiRVFVQUxTIiwiTU9EIiwiaW5wdXRUeXBlIiwiY29vcmRpbmF0ZVN5c3RlbSIsIlRSQU5TRk9STV9ESVJFQ1RJT04iLCJ0QSIsInRCIiwibXVsTm9kZSIsInh5eiIsIm5vcm1hbGl6ZSIsIk5FR0FURSIsIk9ORV9NSU5VUyIsIlJFQ0lQUk9DQUwiLCJESUZGRVJFTkNFIiwiYWJzIiwiV2ViR0xDb29yZGluYXRlU3lzdGVtIiwiU1RFUCIsIk1JTiIsIk1BWCIsIlJFRlJBQ1QiLCJNSVgiLCJXZWJHUFVDb29yZGluYXRlU3lzdGVtIiwiQVRBTiIsIkFOWSIsIlJBRElBTlMiLCJERUdSRUVTIiwiRVhQIiwiRVhQMiIsIkxPRyIsIkxPRzIiLCJTUVJUIiwiSU5WRVJTRV9TUVJUIiwiRkxPT1IiLCJDRUlMIiwiTk9STUFMSVpFIiwiRlJBQ1QiLCJTSU4iLCJDT1MiLCJUQU4iLCJBU0lOIiwiQUNPUyIsIkFCUyIsIlNJR04iLCJERkRYIiwiREZEWSIsIlJPVU5EIiwiVFJVTkMiLCJGV0lEVEgiLCJUUkFOU1BPU0UiLCJCSVRDQVNUIiwiUkVGTEVDVCIsIlBPVyIsIkNMQU1QIiwiU01PT1RIU1RFUCIsIkZBQ0VGT1JXQVJEIiwiRVBTSUxPTiIsIklORklOSVRZIiwiUEkyIiwiYWxsIiwiYW55IiwicmFkaWFucyIsImRlZ3JlZXMiLCJleHAiLCJleHAyIiwibG9nIiwibG9nMiIsInNxcnQiLCJpbnZlcnNlU3FydCIsImZsb29yIiwiY2VpbCIsImZyYWN0Iiwic2luIiwiY29zIiwidGFuIiwiYXNpbiIsImFjb3MiLCJhdGFuIiwic2lnbiIsIm5lZ2F0ZSIsIm9uZU1pbnVzIiwiZEZkeCIsImRGZHkiLCJyb3VuZCIsInJlY2lwcm9jYWwiLCJ0cnVuYyIsImZ3aWR0aCIsInRyYW5zcG9zZSIsImJpdGNhc3QiLCJtaW4kMSIsIm1heCQxIiwibW9kIiwic3RlcCIsInJlZmxlY3QiLCJkaXN0YW5jZSIsImRpZmZlcmVuY2UiLCJkb3QiLCJjcm9zcyIsInBvdyIsInBvdzIiLCJwb3czIiwicG93NCIsInRyYW5zZm9ybURpcmVjdGlvbiIsImNicnQiLCJsZW5ndGhTcSIsIm1peCIsImNsYW1wIiwibG93IiwiaGlnaCIsInNhdHVyYXRlIiwicmVmcmFjdCIsInNtb290aHN0ZXAiLCJmYWNlRm9yd2FyZCIsInJhbmQiLCJ1diIsImR0IiwieHkiLCJzbiIsIm1peEVsZW1lbnQiLCJ0IiwiZTEiLCJlMiIsInNtb290aHN0ZXBFbGVtZW50IiwieCIsImF0YW4yIiwieSIsImZhY2Vmb3J3YXJkIiwiaW52ZXJzZXNxcnQiLCJDb25kaXRpb25hbE5vZGUiLCJjb25kTm9kZSIsImlmTm9kZSIsImVsc2VOb2RlIiwiaWZUeXBlIiwiZWxzZVR5cGUiLCJjdXJyZW50Tm9kZUJsb2NrIiwicGFyZW50Tm9kZUJsb2NrIiwibm9kZVByb3BlcnR5IiwibmVlZHNPdXRwdXQiLCJhZGRGbG93Q29kZSIsInRhYiIsImFkZEZsb3dUYWIiLCJpZlNuaXBwZXQiLCJyZW1vdmVGbG93VGFiIiwiZWxzZVNuaXBwZXQiLCJzZWxlY3QiLCJjb25kIiwiQ29udGV4dE5vZGUiLCJpc0NvbnRleHROb2RlIiwicHJldmlvdXNDb250ZXh0IiwiZ2V0Q29udGV4dCIsInNldENvbnRleHQiLCJWYXJOb2RlIiwicmVhZE9ubHkiLCJpc1Zhck5vZGUiLCJpc1dlYkdQVUJhY2tlbmQiLCJiYWNrZW5kIiwiaXNEZXRlcm1pbmlzdGljIiwic2hvdWxkVHJlYXRBc1JlYWRPbmx5IiwidmVjdG9yVHlwZSIsImRlY2xhcmF0aW9uUHJlZml4IiwiZ2V0QXJyYXlDb3VudCIsImdldFZhciIsImNyZWF0ZVZhciIsIlZhciIsIkNvbnN0IiwidGVtcCIsIlZhcnlpbmdOb2RlIiwiaXNWYXJ5aW5nTm9kZSIsInNldHVwVmFyeWluZyIsIm5lZWRzUmVhc3NpZ24iLCJyZWFzc2lnblBvc2l0aW9uIiwibmVlZHNQb3NpdGlvblJlYXNzaWduIiwiZmxvd05vZGVGcm9tU2hhZGVyU3RhZ2UiLCJpc1Bvc2l0aW9uTm9kZUlucHV0IiwidmVydGV4U3RhZ2UiLCJzUkdCVHJhbnNmZXJFT1RGIiwic1JHQlRyYW5zZmVyT0VURiIsIldPUktJTkdfQ09MT1JfU1BBQ0UiLCJPVVRQVVRfQ09MT1JfU1BBQ0UiLCJDb2xvclNwYWNlTm9kZSIsImNvbG9yTm9kZSIsInJlc29sdmVDb2xvclNwYWNlIiwiY29sb3JTcGFjZSIsIkNvbG9yTWFuYWdlbWVudCIsIndvcmtpbmdDb2xvclNwYWNlIiwib3V0cHV0Q29sb3JTcGFjZSIsImVuYWJsZWQiLCJnZXRUcmFuc2ZlciIsIlNSR0JUcmFuc2ZlciIsInJnYiIsImdldFByaW1hcmllcyIsIl9nZXRNYXRyaXgiLCJ0b091dHB1dENvbG9yU3BhY2UiLCJ0b1dvcmtpbmdDb2xvclNwYWNlIiwid29ya2luZ1RvQ29sb3JTcGFjZSIsImNvbG9yU3BhY2VUb1dvcmtpbmciLCJyZWZlcmVuY2VOb2RlIiwiaXNSZWZlcmVuY2VFbGVtZW50Tm9kZSIsInVuaWZvcm1UeXBlIiwiYXJyYXlUeXBlIiwiZWxlbWVudFR5cGUiLCJSZWZlcmVuY2VCYXNlTm9kZSIsInJlZmVyZW5jZSIsIlJlZmVyZW5jZUVsZW1lbnROb2RlJDEiLCJzZXROb2RlVHlwZSIsInVwZGF0ZVZhbHVlIiwiZ2V0VmFsdWVGcm9tUmVmZXJlbmNlIiwic3RhdGUiLCJSZW5kZXJlclJlZmVyZW5jZU5vZGUiLCJyZW5kZXJlclJlZmVyZW5jZSIsIlRvbmVNYXBwaW5nTm9kZSIsInRvbmVNYXBwaW5nIiwiZXhwb3N1cmVOb2RlIiwidG9uZU1hcHBpbmdFeHBvc3VyZSIsIk5vVG9uZU1hcHBpbmciLCJ0b25lTWFwcGluZ0ZuIiwibGlicmFyeSIsImdldFRvbmVNYXBwaW5nRnVuY3Rpb24iLCJtYXBwaW5nIiwiZXhwb3N1cmUiLCJCdWZmZXJBdHRyaWJ1dGVOb2RlIiwiYnVmZmVyVHlwZSIsImJ1ZmZlclN0cmlkZSIsImJ1ZmZlck9mZnNldCIsImlzQnVmZmVyTm9kZSIsInVzYWdlIiwiU3RhdGljRHJhd1VzYWdlIiwiaW5zdGFuY2VkIiwiaXNCdWZmZXJBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsImJ1ZmZlckRhdGEiLCJnbG9iYWxDYWNoZSIsImdldERhdGEiLCJzZXREYXRhIiwiZ2V0VHlwZUZyb21BdHRyaWJ1dGUiLCJpdGVtU2l6ZSIsInN0cmlkZSIsIm9mZnNldCIsImlzSW50ZXJsZWF2ZWRCdWZmZXIiLCJJbnRlcmxlYXZlZEJ1ZmZlciIsImJ1ZmZlckF0dHJpYnV0ZSIsIkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwic2V0VXNhZ2UiLCJub2RlQXR0cmlidXRlIiwiZ2V0QnVmZmVyQXR0cmlidXRlRnJvbU5vZGUiLCJzZXRJbnN0YW5jZWQiLCJkeW5hbWljQnVmZmVyQXR0cmlidXRlIiwiRHluYW1pY0RyYXdVc2FnZSIsImluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsImluc3RhbmNlZER5bmFtaWNCdWZmZXJBdHRyaWJ1dGUiLCJidWZmZXJOb2RlIiwiQ29tcHV0ZU5vZGUiLCJjb21wdXRlTm9kZSIsIndvcmtncm91cFNpemUiLCJpc0NvbXB1dGVOb2RlIiwiZGlzcGF0Y2hDb3VudCIsIm9uSW5pdEZ1bmN0aW9uIiwidXBkYXRlRGlzcGF0Y2hDb3VudCIsInNpemUiLCJvbkluaXQiLCJjb21wdXRlIiwiQ2FjaGVOb2RlIiwicGFyZW50IiwiaXNDYWNoZU5vZGUiLCJwcmV2aW91c0NhY2hlIiwiZ2V0Q2FjaGUiLCJnZXRDYWNoZUZyb21Ob2RlIiwic2V0Q2FjaGUiLCJCeXBhc3NOb2RlIiwiY2FsbE5vZGUiLCJpc0J5cGFzc05vZGUiLCJieXBhc3MiLCJSZW1hcE5vZGUiLCJpbkxvd05vZGUiLCJpbkhpZ2hOb2RlIiwib3V0TG93Tm9kZSIsIm91dEhpZ2hOb2RlIiwiZG9DbGFtcCIsInJlbWFwIiwicmVtYXBDbGFtcCIsIkV4cHJlc3Npb25Ob2RlIiwiZXhwcmVzc2lvbiIsIkRpc2NhcmQiLCJjb25kaXRpb25hbCIsIlJlbmRlck91dHB1dE5vZGUiLCJpc1JlbmRlck91dHB1dE5vZGUiLCJOb0NvbG9yU3BhY2UiLCJyZW5kZXJPdXRwdXQiLCJBdHRyaWJ1dGVOb2RlIiwiYXR0cmlidXRlTmFtZSIsIl9hdHRyaWJ1dGVOYW1lIiwiZ2V0QXR0cmlidXRlTmFtZSIsImhhc0dlb21ldHJ5QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZVR5cGUiLCJUZXh0dXJlU2l6ZU5vZGUiLCJ0ZXh0dXJlTm9kZSIsImxldmVsTm9kZSIsImlzVGV4dHVyZVNpemVOb2RlIiwidGV4dHVyZVByb3BlcnR5IiwibGV2ZWwiLCJ0ZXh0dXJlU2l6ZSIsIk1heE1pcExldmVsTm9kZSIsIl90ZXh0dXJlTm9kZSIsInRleHR1cmUiLCJpbWFnZSIsIm1heE1pcExldmVsIiwiVGV4dHVyZU5vZGUiLCJ1dk5vZGUiLCJiaWFzTm9kZSIsImlzVGV4dHVyZU5vZGUiLCJjb21wYXJlTm9kZSIsImRlcHRoTm9kZSIsImdyYWROb2RlIiwic2FtcGxlciIsInVwZGF0ZU1hdHJpeCIsIl92YWx1ZSIsIl9tYXRyaXhVbmlmb3JtIiwic2V0VXBkYXRlTWF0cml4IiwiaXNEZXB0aFRleHR1cmUiLCJVbnNpZ25lZEludFR5cGUiLCJJbnRUeXBlIiwiZ2V0RGVmYXVsdFVWIiwiY2hhbm5lbCIsImdldFRyYW5zZm9ybWVkVVYiLCJtYXRyaXgiLCJzZXR1cFVWIiwiaXNGbGlwWSIsIkltYWdlQml0bWFwIiwiZmxpcFkiLCJpc1JlbmRlclRhcmdldFRleHR1cmUiLCJpc0ZyYW1lYnVmZmVyVGV4dHVyZSIsInNldFkiLCJmb3JjZVVWQ29udGV4dCIsImdldFVWIiwiZ2V0VGV4dHVyZUxldmVsIiwiZ2VuZXJhdGVVViIsImdlbmVyYXRlU25pcHBldCIsInV2U25pcHBldCIsImxldmVsU25pcHBldCIsImJpYXNTbmlwcGV0IiwiZGVwdGhTbmlwcGV0IiwiY29tcGFyZVNuaXBwZXQiLCJncmFkU25pcHBldCIsImdlbmVyYXRlVGV4dHVyZUxldmVsIiwiZ2VuZXJhdGVUZXh0dXJlQmlhcyIsImdlbmVyYXRlVGV4dHVyZUdyYWQiLCJnZW5lcmF0ZVRleHR1cmVDb21wYXJlIiwiZ2VuZXJhdGVUZXh0dXJlTG9hZCIsImdlbmVyYXRlVGV4dHVyZSIsImlzUmVmZXJlbmNlIiwibmVlZHNUb1dvcmtpbmdDb2xvclNwYWNlIiwic2V0U2FtcGxlciIsImdldFNhbXBsZXIiLCJzYW1wbGUiLCJibHVyIiwiYW1vdW50Tm9kZSIsImJpYXMiLCJjb21wYXJlIiwiZ3JhZCIsImdyYWROb2RlWCIsImdyYWROb2RlWSIsImRlcHRoIiwibWF0cml4VW5pZm9ybSIsIm1hdHJpeEF1dG9VcGRhdGUiLCJuZXdOb2RlIiwidGV4dHVyZUxvYWQiLCJCdWZmZXJOb2RlIiwiYnVmZmVyQ291bnQiLCJVbmlmb3JtQXJyYXlFbGVtZW50Tm9kZSIsInVuaWZvcm1BcnJheU5vZGUiLCJpc0FycmF5QnVmZmVyRWxlbWVudE5vZGUiLCJwYWRkZWRUeXBlIiwiZ2V0UGFkZGVkVHlwZSIsIlVuaWZvcm1BcnJheU5vZGUiLCJpc0FycmF5QnVmZmVyTm9kZSIsImNoYXJBdCIsInZlY3RvciIsInIiLCJnIiwiZWxlbWVudHMiLCJ6IiwidyIsInBhZGRlZEVsZW1lbnRMZW5ndGgiLCJ1bmlmb3JtQXJyYXkiLCJjYW1lcmFJbmRleCIsInRvVmFyeWluZyIsImNhbWVyYU5lYXIiLCJjYW1lcmEiLCJuZWFyIiwiY2FtZXJhRmFyIiwiZmFyIiwiY2FtZXJhUHJvamVjdGlvbk1hdHJpeCIsImlzQXJyYXlDYW1lcmEiLCJjYW1lcmFzIiwibWF0cmljZXMiLCJzdWJDYW1lcmEiLCJwcm9qZWN0aW9uTWF0cml4IiwidG9WYXIiLCJjYW1lcmFQcm9qZWN0aW9uTWF0cml4SW52ZXJzZSIsInByb2plY3Rpb25NYXRyaXhJbnZlcnNlIiwiY2FtZXJhVmlld01hdHJpeCIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsImNhbWVyYVdvcmxkTWF0cml4IiwiY2FtZXJhTm9ybWFsTWF0cml4Iiwibm9ybWFsTWF0cml4IiwiY2FtZXJhUG9zaXRpb24iLCJzZXRGcm9tTWF0cml4UG9zaXRpb24iLCJfc3BoZXJlIiwiU3BoZXJlIiwiT2JqZWN0M0ROb2RlIiwib2JqZWN0M2QiLCJfdW5pZm9ybU5vZGUiLCJXT1JMRF9NQVRSSVgiLCJQT1NJVElPTiIsIlZJRVdfUE9TSVRJT04iLCJESVJFQ1RJT04iLCJTQ0FMRSIsIlJBRElVUyIsInVuaWZvcm1Ob2RlIiwic2V0RnJvbU1hdHJpeFNjYWxlIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJhcHBseU1hdHJpeDQiLCJib3VuZGluZ1NwaGVyZSIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsInJhZGl1cyIsIm9iamVjdERpcmVjdGlvbiIsIm9iamVjdFdvcmxkTWF0cml4Iiwib2JqZWN0UG9zaXRpb24iLCJvYmplY3RTY2FsZSIsIm9iamVjdFZpZXdQb3NpdGlvbiIsIm9iamVjdFJhZGl1cyIsIk1vZGVsTm9kZSIsIm1vZGVsRGlyZWN0aW9uIiwibW9kZWxXb3JsZE1hdHJpeCIsIm1vZGVsUG9zaXRpb24iLCJtb2RlbFNjYWxlIiwibW9kZWxWaWV3UG9zaXRpb24iLCJtb2RlbFJhZGl1cyIsIm1vZGVsTm9ybWFsTWF0cml4IiwiZ2V0Tm9ybWFsTWF0cml4IiwibW9kZWxXb3JsZE1hdHJpeEludmVyc2UiLCJpbnZlcnQiLCJtZWRpdW1wTW9kZWxWaWV3TWF0cml4IiwiaGlnaHBNb2RlbFZpZXdNYXRyaXgiLCJpc0hpZ2hQcmVjaXNpb25Nb2RlbFZpZXdNYXRyaXgiLCJtdWx0aXBseU1hdHJpY2VzIiwiaGlnaHBNb2RlbE5vcm1hbFZpZXdNYXRyaXgiLCJwb3NpdGlvbkdlb21ldHJ5IiwicG9zaXRpb25Mb2NhbCIsInBvc2l0aW9uUHJldmlvdXMiLCJwb3NpdGlvbldvcmxkIiwicG9zaXRpb25Xb3JsZERpcmVjdGlvbiIsInBvc2l0aW9uVmlldyIsInNldHVwUG9zaXRpb25WaWV3IiwicG9zaXRpb25WaWV3RGlyZWN0aW9uIiwiRnJvbnRGYWNpbmdOb2RlIiwiaXNGcm9udEZhY2luZ05vZGUiLCJzaWRlIiwiQmFja1NpZGUiLCJnZXRGcm9udEZhY2luZyIsImZyb250RmFjaW5nIiwiZmFjZURpcmVjdGlvbiIsIm5vcm1hbEdlb21ldHJ5Iiwibm9ybWFsTG9jYWwiLCJoYXNBdHRyaWJ1dGUiLCJub3JtYWxGbGF0Iiwibm9ybWFsVmlldyIsImZsYXRTaGFkaW5nIiwidHJhbnNmb3JtTm9ybWFsVG9WaWV3Iiwibm9ybWFsV29ybGQiLCJ0cmFuc2Zvcm1lZE5vcm1hbFZpZXciLCJzZXR1cE5vcm1hbCIsInRyYW5zZm9ybWVkTm9ybWFsV29ybGQiLCJ0cmFuc2Zvcm1lZENsZWFyY29hdE5vcm1hbFZpZXciLCJzZXR1cENsZWFyY29hdE5vcm1hbCIsInRyYW5zZm9ybU5vcm1hbCIsIm5vcm1hbCIsIm0iLCJ0cmFuc2Zvcm1lZE5vcm1hbCIsIl9lMSQxIiwiRXVsZXIiLCJfbTEkMSIsIm1hdGVyaWFsUmVmcmFjdGlvblJhdGlvIiwicmVmcmFjdGlvblJhdGlvIiwibWF0ZXJpYWxFbnZJbnRlbnNpdHkiLCJzY2VuZSIsImVudk1hcCIsImVudk1hcEludGVuc2l0eSIsImVudmlyb25tZW50SW50ZW5zaXR5IiwibWF0ZXJpYWxFbnZSb3RhdGlvbiIsInJvdGF0aW9uIiwiZW52aXJvbm1lbnQiLCJlbnZpcm9ubWVudFJvdGF0aW9uIiwiZW52TWFwUm90YXRpb24iLCJtYWtlUm90YXRpb25Gcm9tRXVsZXIiLCJpZGVudGl0eSIsInJlZmxlY3RWaWV3IiwicmVmcmFjdFZpZXciLCJyZWZsZWN0VmVjdG9yIiwicmVmcmFjdFZlY3RvciIsIkN1YmVUZXh0dXJlTm9kZSIsImlzQ3ViZVRleHR1cmVOb2RlIiwiQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIiwiQ3ViZVJlZnJhY3Rpb25NYXBwaW5nIiwieXoiLCJjdWJlVVYiLCJjdWJlVGV4dHVyZSIsIlJlZmVyZW5jZUVsZW1lbnROb2RlIiwiUmVmZXJlbmNlTm9kZSIsInJlZmVyZW5jZUJ1ZmZlciIsIk1hdGVyaWFsUmVmZXJlbmNlTm9kZSIsImlzTWF0ZXJpYWxSZWZlcmVuY2VOb2RlIiwibWF0ZXJpYWxSZWZlcmVuY2UiLCJ0YW5nZW50R2VvbWV0cnkiLCJjb21wdXRlVGFuZ2VudHMiLCJ0YW5nZW50TG9jYWwiLCJ0YW5nZW50VmlldyIsInRhbmdlbnRXb3JsZCIsInRyYW5zZm9ybWVkVGFuZ2VudFZpZXciLCJ0cmFuc2Zvcm1lZFRhbmdlbnRXb3JsZCIsImdldEJpdGFuZ2VudCIsImNyb3NzTm9ybWFsVGFuZ2VudCIsImJpdGFuZ2VudEdlb21ldHJ5IiwiYml0YW5nZW50TG9jYWwiLCJiaXRhbmdlbnRWaWV3IiwiYml0YW5nZW50V29ybGQiLCJ0cmFuc2Zvcm1lZEJpdGFuZ2VudFZpZXciLCJ0cmFuc2Zvcm1lZEJpdGFuZ2VudFdvcmxkIiwiVEJOVmlld01hdHJpeCIsInBhcmFsbGF4RGlyZWN0aW9uIiwidHJhbnNmb3JtZWRCZW50Tm9ybWFsVmlldyIsImJlbnROb3JtYWwiLCJwZXJ0dXJiTm9ybWFsMkFyYiIsImV5ZV9wb3MiLCJzdXJmX25vcm0iLCJtYXBOIiwicTAiLCJxMSIsInN0MCIsInN0MSIsIk4iLCJxMXBlcnAiLCJxMHBlcnAiLCJUIiwiQiIsImRldCIsInNjYWxlIiwiTm9ybWFsTWFwTm9kZSIsInNjYWxlTm9kZSIsIm5vcm1hbE1hcFR5cGUiLCJUYW5nZW50U3BhY2VOb3JtYWxNYXAiLCJub3JtYWxNYXAiLCJPYmplY3RTcGFjZU5vcm1hbE1hcCIsImRIZHh5X2Z3ZCIsImJ1bXBTY2FsZSIsInNhbXBsZVRleHR1cmUiLCJ0ZXhOb2RlIiwiSGxsIiwicGVydHVyYk5vcm1hbEFyYiIsInN1cmZfcG9zIiwiZEhkeHkiLCJ2U2lnbWFYIiwidk4iLCJSMSIsIlIyIiwiZkRldCIsInZHcmFkIiwiQnVtcE1hcE5vZGUiLCJidW1wTWFwIiwiX3Byb3BlcnR5Q2FjaGUiLCJNYXRlcmlhbE5vZGUiLCJnZXRGbG9hdCIsImdldENvbG9yIiwiZ2V0VGV4dHVyZSIsIkNPTE9SIiwiT1BBQ0lUWSIsIm9wYWNpdHlOb2RlIiwiYWxwaGFNYXAiLCJTUEVDVUxBUl9TVFJFTkdUSCIsInNwZWN1bGFyTWFwIiwiU1BFQ1VMQVJfSU5URU5TSVRZIiwic3BlY3VsYXJJbnRlbnNpdHlOb2RlIiwic3BlY3VsYXJJbnRlbnNpdHlNYXAiLCJTUEVDVUxBUl9DT0xPUiIsInNwZWN1bGFyQ29sb3JOb2RlIiwic3BlY3VsYXJDb2xvck1hcCIsIlJPVUdITkVTUyIsInJvdWdobmVzc05vZGUiLCJyb3VnaG5lc3NNYXAiLCJNRVRBTE5FU1MiLCJtZXRhbG5lc3NOb2RlIiwibWV0YWxuZXNzTWFwIiwiRU1JU1NJVkUiLCJlbWlzc2l2ZUludGVuc2l0eU5vZGUiLCJlbWlzc2l2ZU5vZGUiLCJlbWlzc2l2ZU1hcCIsIk5PUk1BTCIsIkNMRUFSQ09BVCIsImNsZWFyY29hdE5vZGUiLCJjbGVhcmNvYXRNYXAiLCJDTEVBUkNPQVRfUk9VR0hORVNTIiwiY2xlYXJjb2F0Um91Z2huZXNzTm9kZSIsImNsZWFyY29hdFJvdWdobmVzc01hcCIsIkNMRUFSQ09BVF9OT1JNQUwiLCJjbGVhcmNvYXROb3JtYWxNYXAiLCJTSEVFTiIsInNoZWVuTm9kZSIsInNoZWVuQ29sb3JNYXAiLCJTSEVFTl9ST1VHSE5FU1MiLCJzaGVlblJvdWdobmVzc05vZGUiLCJzaGVlblJvdWdobmVzc01hcCIsIkFOSVNPVFJPUFkiLCJhbmlzb3Ryb3B5TWFwIiwiYW5pc290cm9weVBvbGFyIiwibWF0ZXJpYWxBbmlzb3Ryb3B5VmVjdG9yIiwicmciLCJJUklERVNDRU5DRV9USElDS05FU1MiLCJpcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW0iLCJpcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlIiwiaXJpZGVzY2VuY2VUaGlja25lc3NNYXAiLCJpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW0iLCJUUkFOU01JU1NJT04iLCJ0cmFuc21pc3Npb25Ob2RlIiwidHJhbnNtaXNzaW9uTWFwIiwiVEhJQ0tORVNTIiwidGhpY2tuZXNzTm9kZSIsInRoaWNrbmVzc01hcCIsIklPUiIsIkxJR0hUX01BUCIsIkFPIiwib3V0cHV0VHlwZSIsIkFMUEhBX1RFU1QiLCJTSElOSU5FU1MiLCJTUEVDVUxBUiIsIlJFRkxFQ1RJVklUWSIsIlJPVEFUSU9OIiwiSVJJREVTQ0VOQ0UiLCJJUklERVNDRU5DRV9JT1IiLCJBVFRFTlVBVElPTl9ESVNUQU5DRSIsIkFUVEVOVUFUSU9OX0NPTE9SIiwiTElORV9TQ0FMRSIsIkxJTkVfREFTSF9TSVpFIiwiTElORV9HQVBfU0laRSIsIkxJTkVfV0lEVEgiLCJMSU5FX0RBU0hfT0ZGU0VUIiwiUE9JTlRfU0laRSIsIkRJU1BFUlNJT04iLCJtYXRlcmlhbEFscGhhVGVzdCIsIm1hdGVyaWFsQ29sb3IiLCJtYXRlcmlhbFNoaW5pbmVzcyIsIm1hdGVyaWFsRW1pc3NpdmUiLCJtYXRlcmlhbE9wYWNpdHkiLCJtYXRlcmlhbFNwZWN1bGFyIiwibWF0ZXJpYWxTcGVjdWxhckludGVuc2l0eSIsIm1hdGVyaWFsU3BlY3VsYXJDb2xvciIsIm1hdGVyaWFsU3BlY3VsYXJTdHJlbmd0aCIsIm1hdGVyaWFsUmVmbGVjdGl2aXR5IiwibWF0ZXJpYWxSb3VnaG5lc3MiLCJtYXRlcmlhbE1ldGFsbmVzcyIsIm1hdGVyaWFsTm9ybWFsIiwibWF0ZXJpYWxDbGVhcmNvYXQiLCJtYXRlcmlhbENsZWFyY29hdFJvdWdobmVzcyIsIm1hdGVyaWFsQ2xlYXJjb2F0Tm9ybWFsIiwibWF0ZXJpYWxSb3RhdGlvbiIsIm1hdGVyaWFsU2hlZW4iLCJtYXRlcmlhbFNoZWVuUm91Z2huZXNzIiwibWF0ZXJpYWxBbmlzb3Ryb3B5IiwibWF0ZXJpYWxJcmlkZXNjZW5jZSIsIm1hdGVyaWFsSXJpZGVzY2VuY2VJT1IiLCJtYXRlcmlhbElyaWRlc2NlbmNlVGhpY2tuZXNzIiwibWF0ZXJpYWxUcmFuc21pc3Npb24iLCJtYXRlcmlhbFRoaWNrbmVzcyIsIm1hdGVyaWFsSU9SIiwibWF0ZXJpYWxBdHRlbnVhdGlvbkRpc3RhbmNlIiwibWF0ZXJpYWxBdHRlbnVhdGlvbkNvbG9yIiwibWF0ZXJpYWxMaW5lU2NhbGUiLCJtYXRlcmlhbExpbmVEYXNoU2l6ZSIsIm1hdGVyaWFsTGluZUdhcFNpemUiLCJtYXRlcmlhbExpbmVXaWR0aCIsIm1hdGVyaWFsTGluZURhc2hPZmZzZXQiLCJtYXRlcmlhbFBvaW50U2l6ZSIsIm1hdGVyaWFsRGlzcGVyc2lvbiIsIm1hdGVyaWFsTGlnaHRNYXAiLCJtYXRlcmlhbEFPIiwiYW5pc290cm9weVJvdGF0aW9uIiwibW9kZWxWaWV3UHJvamVjdGlvbiIsInNldHVwTW9kZWxWaWV3UHJvamVjdGlvbiIsIkluZGV4Tm9kZSIsImlzSW5kZXhOb2RlIiwiZ2V0VmVydGV4SW5kZXgiLCJJTlNUQU5DRSIsImdldEluc3RhbmNlSW5kZXgiLCJEUkFXIiwiZ2V0RHJhd0luZGV4IiwiSU5WT0NBVElPTl9MT0NBTCIsImdldEludm9jYXRpb25Mb2NhbEluZGV4IiwiSU5WT0NBVElPTl9TVUJHUk9VUCIsImdldEludm9jYXRpb25TdWJncm91cEluZGV4IiwiU1VCR1JPVVAiLCJnZXRTdWJncm91cEluZGV4IiwidmVydGV4SW5kZXgiLCJpbnN0YW5jZUluZGV4Iiwic3ViZ3JvdXBJbmRleCIsImludm9jYXRpb25TdWJncm91cEluZGV4IiwiaW52b2NhdGlvbkxvY2FsSW5kZXgiLCJkcmF3SW5kZXgiLCJJbnN0YW5jZU5vZGUiLCJpbnN0YW5jZU1hdHJpeCIsImluc3RhbmNlQ29sb3IiLCJpbnN0YW5jZU1hdHJpeE5vZGUiLCJpbnN0YW5jZUNvbG9yTm9kZSIsImJ1ZmZlckNvbG9yIiwiSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIiLCJidWZmZXJGbiIsImluc3RhbmNlQnVmZmVycyIsIkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsImluc3RhbmNlUG9zaXRpb24iLCJpbnN0YW5jZU5vcm1hbCIsImluc3RhbmNlIiwiSW5zdGFuY2VkTWVzaE5vZGUiLCJpbnN0YW5jZWRNZXNoIiwiQmF0Y2hOb2RlIiwiYmF0Y2hNZXNoIiwiYmF0Y2hpbmdJZE5vZGUiLCJnZXRJbmRpcmVjdEluZGV4IiwiX2luZGlyZWN0VGV4dHVyZSIsImluZGlyZWN0SWQiLCJtYXRyaWNlc1RleHR1cmUiLCJfbWF0cmljZXNUZXh0dXJlIiwiaiIsInRvSW50IiwiYmF0Y2hpbmdNYXRyaXgiLCJjb2xvcnNUZXh0dXJlIiwiX2NvbG9yc1RleHR1cmUiLCJnZXRCYXRjaGluZ0NvbG9yIiwiYm0iLCJiYXRjaGluZ05vcm1hbCIsIm11bEFzc2lnbiIsImJhdGNoIiwiX2ZyYW1lSWQiLCJTa2lubmluZ05vZGUiLCJza2lubmVkTWVzaCIsInVzZVJlZmVyZW5jZSIsImJpbmRNYXRyaXhOb2RlIiwiYmluZE1hdHJpeEludmVyc2VOb2RlIiwiYm9uZU1hdHJpY2VzTm9kZSIsInNraW5JbmRleE5vZGUiLCJza2luV2VpZ2h0Tm9kZSIsInNrZWxldG9uIiwiYm9uZXMiLCJiaW5kTWF0cml4IiwiYmluZE1hdHJpeEludmVyc2UiLCJib25lTWF0cmljZXMiLCJwcmV2aW91c0JvbmVNYXRyaWNlc05vZGUiLCJnZXRTa2lubmVkUG9zaXRpb24iLCJwb3NpdGlvbiIsImJvbmVNYXRYIiwiYm9uZU1hdFkiLCJib25lTWF0WiIsImJvbmVNYXRXIiwic2tpblZlcnRleCIsInNraW5uZWQiLCJnZXRTa2lubmVkTm9ybWFsIiwic2tpbk1hdHJpeCIsImdldFByZXZpb3VzU2tpbm5lZFBvc2l0aW9uIiwicHJldmlvdXNCb25lTWF0cmljZXMiLCJuZWVkc1ByZXZpb3VzQm9uZU1hdHJpY2VzIiwibXJ0IiwiZ2V0TVJUIiwidXNlVmVsb2NpdHkiLCJza2luUG9zaXRpb24iLCJza2luTm9ybWFsIiwiZnJhbWVJZCIsInNraW5uaW5nUmVmZXJlbmNlIiwiTG9vcE5vZGUiLCJnZXRWYXJOYW1lIiwiZ2V0UHJvcGVydGllcyIsInN0YWNrTm9kZSIsImwiLCJyZXR1cm5zTm9kZSIsImVuZCIsImNvbmRpdGlvbiIsImludGVybmFsUGFyYW0iLCJzdGFydFNuaXBwZXQiLCJlbmRTbmlwcGV0IiwiZGVjbGFyYXRpb25TbmlwcGV0IiwiY29uZGl0aW9uYWxTbmlwcGV0IiwidXBkYXRlU25pcHBldCIsImZvclNuaXBwZXQiLCJzdGFja1NuaXBwZXQiLCJyZXR1cm5zU25pcHBldCIsIkxvb3AiLCJCcmVhayIsIl9tb3JwaFRleHR1cmVzIiwiX21vcnBoVmVjNCIsImdldE1vcnBoIiwiYnVmZmVyTWFwIiwiaW5mbHVlbmNlIiwidGV4ZWxJbmRleCIsIk1vcnBoTm9kZSIsIm1lc2giLCJtb3JwaEJhc2VJbmZsdWVuY2UiLCJoYXNNb3JwaFBvc2l0aW9uIiwibW9ycGhBdHRyaWJ1dGVzIiwiaGFzTW9ycGhOb3JtYWxzIiwibW9ycGhBdHRyaWJ1dGUiLCJtb3JwaFRhcmdldHNDb3VudCIsImhhc01vcnBoQ29sb3JzIiwiZW50cnkiLCJtb3JwaFRhcmdldHMiLCJtb3JwaE5vcm1hbHMiLCJtb3JwaENvbG9ycyIsInZlcnRleERhdGFDb3VudCIsIm1heFRleHR1cmVTaXplIiwiYnVmZmVyVGV4dHVyZSIsIkRhdGFBcnJheVRleHR1cmUiLCJGbG9hdFR5cGUiLCJ2ZXJ0ZXhEYXRhU3RyaWRlIiwibW9ycGhUYXJnZXQiLCJtb3JwaE5vcm1hbCIsIm1vcnBoQ29sb3IiLCJmcm9tQnVmZmVyQXR0cmlidXRlIiwiZGlzcG9zZVRleHR1cmUiLCJkZWxldGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEVudHJ5IiwibW9ycGhUZXh0dXJlIiwiYWRkQXNzaWduIiwibW9ycGhUYXJnZXRzUmVsYXRpdmUiLCJtb3JwaFJlZmVyZW5jZSIsIkxpZ2h0aW5nTm9kZSIsImlzTGlnaHRpbmdOb2RlIiwiQU9Ob2RlIiwiYW9Ob2RlIiwiYW1iaWVudE9jY2x1c2lvbiIsIkxpZ2h0aW5nQ29udGV4dE5vZGUiLCJsaWdodHNOb2RlIiwibGlnaHRpbmdNb2RlbCIsImJhY2tkcm9wTm9kZSIsImJhY2tkcm9wQWxwaGFOb2RlIiwicmVmbGVjdGVkTGlnaHQiLCJkaXJlY3REaWZmdXNlIiwiZGlyZWN0U3BlY3VsYXIiLCJpbmRpcmVjdERpZmZ1c2UiLCJpbmRpcmVjdFNwZWN1bGFyIiwicmFkaWFuY2UiLCJpcnJhZGlhbmNlIiwiaWJsSXJyYWRpYW5jZSIsImJhY2tkcm9wIiwiYmFja2Ryb3BBbHBoYSIsImxpZ2h0aW5nQ29udGV4dCIsIklycmFkaWFuY2VOb2RlIiwic2NyZWVuU2l6ZVZlYyIsInZpZXdwb3J0VmVjIiwiU2NyZWVuTm9kZSIsImlzVmlld3BvcnROb2RlIiwiVklFV1BPUlQiLCJTSVpFIiwicmVuZGVyVGFyZ2V0IiwiZ2V0UmVuZGVyVGFyZ2V0Iiwidmlld3BvcnQiLCJnZXRWaWV3cG9ydCIsIm11bHRpcGx5U2NhbGFyIiwiZ2V0UGl4ZWxSYXRpbyIsImdldERyYXdpbmdCdWZmZXJTaXplIiwic2NyZWVuQ29vcmRpbmF0ZSIsInNjcmVlblNpemUiLCJDT09SRElOQVRFIiwiY29vcmQiLCJnZXRGcmFnQ29vcmQiLCJVViIsInNjcmVlblVWIiwidmlld3BvcnRTaXplIiwienciLCJ2aWV3cG9ydENvb3JkaW5hdGUiLCJ2aWV3cG9ydFVWIiwidmlld3BvcnRSZXNvbHV0aW9uIiwidmlld3BvcnRUb3BMZWZ0Iiwidmlld3BvcnRCb3R0b21MZWZ0IiwiX3NpemUkNCIsIlZpZXdwb3J0VGV4dHVyZU5vZGUiLCJmcmFtZWJ1ZmZlclRleHR1cmUiLCJGcmFtZWJ1ZmZlclRleHR1cmUiLCJtaW5GaWx0ZXIiLCJMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIiLCJnZW5lcmF0ZU1pcG1hcHMiLCJpc091dHB1dFRleHR1cmVOb2RlIiwiY3VycmVudEdlbmVyYXRlTWlwbWFwcyIsImNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSIsInZpZXdwb3J0VGV4dHVyZU5vZGUiLCJ2aWV3cG9ydFRleHR1cmUiLCJ2aWV3cG9ydE1pcFRleHR1cmUiLCJzaGFyZWREZXB0aGJ1ZmZlciIsIlZpZXdwb3J0RGVwdGhUZXh0dXJlTm9kZSIsIkRlcHRoVGV4dHVyZSIsInZpZXdwb3J0RGVwdGhUZXh0dXJlIiwiVmlld3BvcnREZXB0aE5vZGUiLCJ2YWx1ZU5vZGUiLCJpc1ZpZXdwb3J0RGVwdGhOb2RlIiwiREVQVEhfQkFTRSIsImdldEZyYWdEZXB0aCIsImRlcHRoQmFzZSIsIkRFUFRIIiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsInZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoIiwidmlld1pUb09ydGhvZ3JhcGhpY0RlcHRoIiwiTElORUFSX0RFUFRIIiwidmlld1oiLCJwZXJzcGVjdGl2ZURlcHRoVG9WaWV3WiIsInZpZXdaVG9Mb2dhcml0aG1pY0RlcHRoIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJsaW5lYXJEZXB0aCIsInZpZXdwb3J0TGluZWFyRGVwdGgiLCJidWlsdGluIiwiaXNCdWlsdGluTm9kZSIsIkNsaXBwaW5nTm9kZSIsIkRFRkFVTFQiLCJjbGlwcGluZ0NvbnRleHQiLCJpbnRlcnNlY3Rpb25QbGFuZXMiLCJ1bmlvblBsYW5lcyIsImhhcmR3YXJlQ2xpcHBpbmciLCJBTFBIQV9UT19DT1ZFUkFHRSIsInNldHVwQWxwaGFUb0NvdmVyYWdlIiwiSEFSRFdBUkUiLCJzZXR1cEhhcmR3YXJlQ2xpcHBpbmciLCJzZXR1cERlZmF1bHQiLCJkaXN0YW5jZVRvUGxhbmUiLCJkaXN0YW5jZUdyYWRpZW50IiwiY2xpcE9wYWNpdHkiLCJudW1VbmlvblBsYW5lcyIsImNsaXBwaW5nUGxhbmVzIiwicGxhbmUiLCJudW1JbnRlcnNlY3Rpb25QbGFuZXMiLCJpbnRlcnNlY3Rpb25DbGlwT3BhY2l0eSIsImRpc2NhcmQiLCJjbGlwcGVkIiwiZW5hYmxlSGFyZHdhcmVDbGlwcGluZyIsImh3X2NsaXBfZGlzdGFuY2VzIiwiZ2V0Q2xpcERpc3RhbmNlIiwiaGFzaDJEIiwiaGFzaDNEIiwiZ2V0QWxwaGFIYXNoVGhyZXNob2xkIiwibWF4RGVyaXYiLCJwaXhTY2FsZSIsInBpeFNjYWxlcyIsImFscGhhIiwibGVycEZhY3RvciIsImNhc2VzIiwidGhyZXNob2xkIiwiTm9kZU1hdGVyaWFsIiwiTWF0ZXJpYWwiLCJpc05vZGVNYXRlcmlhbCIsImZvZyIsImxpZ2h0cyIsImVudk5vZGUiLCJub3JtYWxOb2RlIiwiYWxwaGFUZXN0Tm9kZSIsInBvc2l0aW9uTm9kZSIsImdlb21ldHJ5Tm9kZSIsInNoYWRvd1Bvc2l0aW9uTm9kZSIsInJlY2VpdmVkU2hhZG93Tm9kZSIsImNhc3RTaGFkb3dOb2RlIiwibXJ0Tm9kZSIsImZyYWdtZW50Tm9kZSIsInZlcnRleE5vZGUiLCJjdXN0b21Qcm9ncmFtQ2FjaGVLZXkiLCJzZXR1cE9ic2VydmVyIiwic2V0dXBWZXJ0ZXgiLCJyZXN1bHROb2RlIiwiYWRkRmxvdyIsImNsaXBwaW5nTm9kZSIsInNldHVwQ2xpcHBpbmciLCJkZXB0aFdyaXRlIiwiZGVwdGhUZXN0IiwiZGVwdGhCdWZmZXIiLCJzZXR1cERlcHRoIiwic2V0dXBEaWZmdXNlQ29sb3IiLCJzZXR1cFZhcmlhbnRzIiwib3V0Z29pbmdMaWdodE5vZGUiLCJzZXR1cExpZ2h0aW5nIiwiYmFzaWNPdXRwdXQiLCJpc0N1c3RvbU91dHB1dCIsIm1hdGVyaWFsTVJUIiwibWVyZ2UiLCJpc091dHB1dFN0cnVjdE5vZGUiLCJvYnNlcnZlciIsInNhbXBsZXMiLCJhbHBoYVRvQ292ZXJhZ2UiLCJjYW5kaWRhdGVDb3VudCIsImxvZ2FyaXRobWljRGVwdGhCdWZmZXIiLCJzZXR1cFBvc2l0aW9uIiwidmVydGV4IiwiZGlzcGxhY2VtZW50TWFwIiwiZGlzcGxhY2VtZW50U2NhbGUiLCJkaXNwbGFjZW1lbnRCaWFzIiwiaXNCYXRjaGVkTWVzaCIsImlzSW5zdGFuY2VkTWVzaCIsInZlcnRleENvbG9ycyIsImFscGhhVGVzdCIsImFscGhhSGFzaCIsInRyYW5zcGFyZW50IiwiYmxlbmRpbmciLCJOb3JtYWxCbGVuZGluZyIsInNldHVwT3V0Z29pbmdMaWdodCIsInNldHVwRW52aXJvbm1lbnQiLCJpc0N1YmVUZXh0dXJlIiwic2V0dXBMaWdodE1hcCIsImxpZ2h0TWFwIiwic2V0dXBMaWdodHMiLCJtYXRlcmlhbExpZ2h0c05vZGUiLCJsaWdodE1hcE5vZGUiLCJhb01hcCIsImxpZ2h0c04iLCJsaWdodGluZyIsImNyZWF0ZU5vZGUiLCJnZXRMaWdodHMiLCJzZXR1cExpZ2h0aW5nTW9kZWwiLCJoYXNMaWdodHMiLCJzZXR1cEZvZyIsImZvZ05vZGUiLCJzZXREZWZhdWx0VmFsdWVzIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicHJvdG90eXBlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2RlZmF1bHRWYWx1ZXMkZCIsIkxpbmVCYXNpY01hdGVyaWFsIiwiTGluZUJhc2ljTm9kZU1hdGVyaWFsIiwiaXNMaW5lQmFzaWNOb2RlTWF0ZXJpYWwiLCJzZXRWYWx1ZXMiLCJfZGVmYXVsdFZhbHVlcyRjIiwiTGluZURhc2hlZE1hdGVyaWFsIiwiTGluZURhc2hlZE5vZGVNYXRlcmlhbCIsImlzTGluZURhc2hlZE5vZGVNYXRlcmlhbCIsImRhc2hPZmZzZXQiLCJvZmZzZXROb2RlIiwiZGFzaFNjYWxlTm9kZSIsImRhc2hTaXplTm9kZSIsImdhcFNpemVOb2RlIiwidkxpbmVEaXN0YW5jZSIsIl9zaGFyZWRGcmFtZWJ1ZmZlciIsIlZpZXdwb3J0U2hhcmVkVGV4dHVyZU5vZGUiLCJ2aWV3cG9ydFNoYXJlZFRleHR1cmUiLCJfZGVmYXVsdFZhbHVlcyRiIiwiTGluZTJOb2RlTWF0ZXJpYWwiLCJpc0xpbmUyTm9kZU1hdGVyaWFsIiwidXNlQ29sb3IiLCJsaW5lV2lkdGgiLCJsaW5lQ29sb3JOb2RlIiwiTm9CbGVuZGluZyIsIl91c2VEYXNoIiwiZGFzaGVkIiwiX3VzZUFscGhhVG9Db3ZlcmFnZSIsIl91c2VXb3JsZFVuaXRzIiwidXNlQWxwaGFUb0NvdmVyYWdlIiwidXNlRGFzaCIsInVzZVdvcmxkVW5pdHMiLCJ0cmltU2VnbWVudCIsImluc3RhbmNlU3RhcnQiLCJpbnN0YW5jZUVuZCIsImluc3RhbmNlRGlzdGFuY2VTdGFydCIsImluc3RhbmNlRGlzdGFuY2VFbmQiLCJsaW5lRGlzdGFuY2UiLCJhc3BlY3QiLCJwZXJzcGVjdGl2ZSIsIkVsc2VJZiIsImNsaXBTdGFydCIsImNsaXBFbmQiLCJuZGNTdGFydCIsIm5kY0VuZCIsImRpciIsImNsaXAiLCJ3b3JsZERpciIsInRtcEZ3ZCIsIndvcmxkVXAiLCJ3b3JsZEZ3ZCIsIndvcmxkUG9zIiwiaHciLCJzdWJBc3NpZ24iLCJjbGlwUG9zZSIsImNsb3Nlc3RMaW5lVG9MaW5lIiwicDEiLCJwMiIsInAzIiwicDQiLCJwMTMiLCJwNDMiLCJwMjEiLCJkMTM0MyIsImQ0MzIxIiwiZDEzMjEiLCJkNDM0MyIsImRlbm9tIiwibXVhIiwibXViIiwidlV2Iiwid29ybGRTdGFydCIsIndvcmxkRW5kIiwicmF5RW5kIiwibGluZURpciIsIm5vcm0iLCJkbm9ybSIsImxlbjIiLCJkbGVuIiwiaW5zdGFuY2VDb2xvclN0YXJ0IiwiaW5zdGFuY2VDb2xvckVuZCIsIndvcmxkVW5pdHMiLCJkaXJlY3Rpb25Ub0NvbG9yIiwiX2RlZmF1bHRWYWx1ZXMkYSIsIk1lc2hOb3JtYWxNYXRlcmlhbCIsIk1lc2hOb3JtYWxOb2RlTWF0ZXJpYWwiLCJpc01lc2hOb3JtYWxOb2RlTWF0ZXJpYWwiLCJTUkdCQ29sb3JTcGFjZSIsIkVxdWlyZWN0VVZOb2RlIiwiZGlyTm9kZSIsInUiLCJlcXVpcmVjdFVWIiwiQ3ViZVJlbmRlclRhcmdldCIsIldlYkdMQ3ViZVJlbmRlclRhcmdldCIsIm9wdGlvbnMiLCJpc0N1YmVSZW5kZXJUYXJnZXQiLCJmcm9tRXF1aXJlY3Rhbmd1bGFyVGV4dHVyZSIsInRleHR1cmUkMSIsImN1cnJlbnRNaW5GaWx0ZXIiLCJtYWdGaWx0ZXIiLCJCb3hHZW9tZXRyeSIsIk1lc2giLCJTY2VuZSIsIkxpbmVhckZpbHRlciIsIkN1YmVDYW1lcmEiLCJjdXJyZW50TVJUIiwic2V0TVJUIiwiX2NhY2hlJDEiLCJDdWJlTWFwTm9kZSIsIl9jdWJlVGV4dHVyZSIsIl9jdWJlVGV4dHVyZU5vZGUiLCJkZWZhdWx0VGV4dHVyZSIsIkN1YmVUZXh0dXJlIiwiX2RlZmF1bHRUZXh0dXJlIiwiRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmciLCJFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyIsImN1YmVNYXAiLCJtYXBUZXh0dXJlTWFwcGluZyIsImlzRXF1aXJlY3Rhbmd1bGFyTWFwUmVhZHkkMSIsIm9uVGV4dHVyZURpc3Bvc2UiLCJldmVudCIsImN1YmVNYXBOb2RlIiwiQmFzaWNFbnZpcm9ubWVudE5vZGUiLCJCYXNpY0xpZ2h0TWFwTm9kZSIsIlJFQ0lQUk9DQUxfUEkiLCJpcnJhZGlhbmNlTGlnaHRNYXAiLCJMaWdodGluZ01vZGVsIiwiZ2V0TGlnaHROb2RlcyIsImluZGlyZWN0IiwiZmluaXNoIiwiZGlyZWN0IiwiZGlyZWN0UmVjdEFyZWEiLCJCYXNpY0xpZ2h0aW5nTW9kZWwiLCJvdXRnb2luZ0xpZ2h0IiwiY29tYmluZSIsIk11bHRpcGx5T3BlcmF0aW9uIiwiTWl4T3BlcmF0aW9uIiwiQWRkT3BlcmF0aW9uIiwiX2RlZmF1bHRWYWx1ZXMkOSIsIk1lc2hCYXNpY01hdGVyaWFsIiwiTWVzaEJhc2ljTm9kZU1hdGVyaWFsIiwiaXNNZXNoQmFzaWNOb2RlTWF0ZXJpYWwiLCJGX1NjaGxpY2siLCJmMCIsImY5MCIsImRvdFZIIiwiZnJlc25lbCIsIkJSREZfTGFtYmVydCIsIkRfQmxpbm5QaG9uZyIsImRvdE5IIiwiQlJERl9CbGlublBob25nIiwibGlnaHREaXJlY3Rpb24iLCJoYWxmRGlyIiwiRiIsIkciLCJEIiwiUGhvbmdMaWdodGluZ01vZGVsIiwic3BlY3VsYXIiLCJsaWdodENvbG9yIiwiX2RlZmF1bHRWYWx1ZXMkOCIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJNZXNoTGFtYmVydE5vZGVNYXRlcmlhbCIsImlzTWVzaExhbWJlcnROb2RlTWF0ZXJpYWwiLCJfZGVmYXVsdFZhbHVlcyQ3IiwiTWVzaFBob25nTWF0ZXJpYWwiLCJNZXNoUGhvbmdOb2RlTWF0ZXJpYWwiLCJpc01lc2hQaG9uZ05vZGVNYXRlcmlhbCIsInNoaW5pbmVzc05vZGUiLCJzcGVjdWxhck5vZGUiLCJnZXRHZW9tZXRyeVJvdWdobmVzcyIsImR4eSIsImdldFJvdWdobmVzcyIsImdlb21ldHJ5Um91Z2huZXNzIiwicm91Z2huZXNzRmFjdG9yIiwibWluIiwiVl9HR1hfU21pdGhDb3JyZWxhdGVkIiwiZG90TkwiLCJkb3ROViIsImEyIiwiZ3YiLCJnbCIsIlZfR0dYX1NtaXRoQ29ycmVsYXRlZF9Bbmlzb3Ryb3BpYyIsImFscGhhQiIsImRvdFRWIiwiZG90QlYiLCJkb3RUTCIsImRvdEJMIiwicXVhbGlmaWVyIiwiRF9HR1giLCJEX0dHWF9Bbmlzb3Ryb3BpYyIsImRvdFRIIiwiZG90QkgiLCJ2MiIsIncyIiwiQlJERl9HR1giLCJmIiwiVVNFX0lSSURFU0NFTkNFIiwiVVNFX0FOSVNPVFJPUFkiLCJWIiwiREZHQXBwcm94IiwiYzAiLCJjMSIsImEwMDQiLCJFbnZpcm9ubWVudEJSREYiLCJmYWIiLCJTY2hsaWNrX3RvX0YwIiwieDIiLCJ4NSIsIkRfQ2hhcmxpZSIsImludkFscGhhIiwic2luMmgiLCJWX05ldWJlbHQiLCJCUkRGX1NoZWVuIiwiTFRDX1V2IiwiTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yIiwiTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yIiwidjEiLCJ0aGV0YV9zaW50aGV0YSIsIkxUQ19FdmFsdWF0ZSIsIlAiLCJtSW52IiwicDAiLCJsaWdodE5vcm1hbCIsIlQxIiwiVDIiLCJtYXQiLCJjb29yZHMwIiwiY29vcmRzMSIsImNvb3JkczIiLCJjb29yZHMzIiwidmVjdG9yRm9ybUZhY3RvciIsIkxUQ19FdmFsdWF0ZV9Wb2x1bWUiLCJiQyIsIncwIiwidzEiLCJ3MyIsImcwIiwiZzEiLCJoMCIsImJpY3ViaWMiLCJ0ZXhlbFNpemUiLCJsb2QiLCJ1dlNjYWxlZCIsIml1diIsImZ1diIsImcweCIsImcxeCIsImgweCIsImgxeCIsImgweSIsImgxeSIsInRleHR1cmVCaWN1YmljIiwibG9kTm9kZSIsImZMb2RTaXplIiwiY0xvZFNpemUiLCJmTG9kU2l6ZUludiIsImNMb2RTaXplSW52IiwiZlNhbXBsZSIsImNTYW1wbGUiLCJnZXRWb2x1bWVUcmFuc21pc3Npb25SYXkiLCJuIiwibW9kZWxNYXRyaXgiLCJyZWZyYWN0aW9uVmVjdG9yIiwiYXBwbHlJb3JUb1JvdWdobmVzcyIsInZpZXdwb3J0QmFja1NpZGVUZXh0dXJlIiwidmlld3BvcnRGcm9udFNpZGVUZXh0dXJlIiwiZ2V0VHJhbnNtaXNzaW9uU2FtcGxlIiwiZnJhZ0Nvb3JkIiwidHJhbnNtaXNzaW9uU2FtcGxlIiwidm9sdW1lQXR0ZW51YXRpb24iLCJ0cmFuc21pc3Npb25EaXN0YW5jZSIsImF0dGVudWF0aW9uQ29lZmZpY2llbnQiLCJnZXRJQkxWb2x1bWVSZWZyYWN0aW9uIiwidmlld01hdHJpeCIsInByb2pNYXRyaXgiLCJ0cmFuc21pdHRlZExpZ2h0IiwidHJhbnNtaXR0YW5jZSIsImhhbGZTcHJlYWQiLCJpb3JzIiwidHJhbnNtaXNzaW9uUmF5IiwicmVmcmFjdGVkUmF5RXhpdCIsIm5kY1BvcyIsInJlZnJhY3Rpb25Db29yZHMiLCJkaXZBc3NpZ24iLCJhdHRlbnVhdGVkQ29sb3IiLCJ0cmFuc21pdHRhbmNlRmFjdG9yIiwiWFlaX1RPX1JFQzcwOSIsIklvclRvRnJlc25lbDAiLCJ0cmFuc21pdHRlZElvciIsImluY2lkZW50SW9yIiwiZXZhbElyaWRlc2NlbmNlIiwib3V0c2lkZUlPUiIsImV0YTIiLCJjb3NUaGV0YTEiLCJ0aGluRmlsbVRoaWNrbmVzcyIsImJhc2VGMCIsImNvc1RoZXRhMlNxIiwiY29zVGhldGEyIiwiUjAiLCJSMTIiLCJUMTIxIiwicGhpMTIiLCJwaGkyMSIsImJhc2VJT1IiLCJmcmVzbmVsMCIsInNxcnRGMCIsIkZyZXNuZWwwVG9Jb3IiLCJ0b1ZlYzMiLCJSMjMiLCJwaGkyMyIsIk9QRCIsInBoaSIsIlIxMjMiLCJyMTIzIiwiUnMiLCJJIiwiQ20iLCJTbSIsInBoYXNlIiwicG9zIiwiVkFSIiwiZXZhbFNlbnNpdGl2aXR5IiwiSUJMU2hlZW5CUkRGIiwidmlld0RpciIsInIyIiwiY2xlYXJjb2F0RjAiLCJjbGVhcmNvYXRGOTAiLCJQaHlzaWNhbExpZ2h0aW5nTW9kZWwiLCJjbGVhcmNvYXRSYWRpYW5jZSIsImNsZWFyY29hdFNwZWN1bGFyRGlyZWN0IiwiY2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCIsInNoZWVuU3BlY3VsYXJEaXJlY3QiLCJzaGVlblNwZWN1bGFySW5kaXJlY3QiLCJpcmlkZXNjZW5jZUZyZXNuZWwiLCJpcmlkZXNjZW5jZUYwIiwiZG90TlZpIiwiY29tcHV0ZU11bHRpc2NhdHRlcmluZyIsInNpbmdsZVNjYXR0ZXIiLCJtdWx0aVNjYXR0ZXIiLCJGc3NFc3MiLCJFbXMiLCJGYXZnIiwiRm1zIiwiY2NJcnJhZGlhbmNlIiwibGlnaHRQb3NpdGlvbiIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJsdGNfMSIsImx0Y18yIiwidDEiLCJ0MiIsImRvdE5WY2MiLCJjbGVhcmNvYXRFbnYiLCJzaW5nbGVTY2F0dGVyaW5nIiwibXVsdGlTY2F0dGVyaW5nIiwiY29zaW5lV2VpZ2h0ZWRJcnJhZGlhbmNlIiwidG90YWxTY2F0dGVyaW5nIiwiZGlmZnVzZSIsImFvTlYiLCJhb0V4cCIsIkZjYyIsImNsZWFyY29hdExpZ2h0Iiwic2hlZW5FbmVyZ3lDb21wIiwic2hlZW5MaWdodCIsImN1YmVVVl9yMCIsImN1YmVVVl9tMCIsImN1YmVVVl9yMSIsImN1YmVVVl9tMSIsImN1YmVVVl9yNCIsImN1YmVVVl9tNCIsImN1YmVVVl9yNSIsImN1YmVVVl9tNSIsImN1YmVVVl9yNiIsImN1YmVVVl9tNiIsImN1YmVVVl9taW5NaXBMZXZlbCIsImN1YmVVVl9taW5UaWxlU2l6ZSIsImdldEZhY2UiLCJkaXJlY3Rpb24iLCJhYnNEaXJlY3Rpb24iLCJmYWNlIiwiRWxzZSIsInJvdWdobmVzc1RvTWlwIiwibWlwIiwiZ2V0RGlyZWN0aW9uIiwidXZfaW1tdXRhYmxlIiwienl4IiwieHp5IiwieHoiLCJ0ZXh0dXJlQ3ViZVVWIiwic2FtcGxlRGlyX2ltbXV0YWJsZSIsInJvdWdobmVzc19pbW11dGFibGUiLCJDVUJFVVZfVEVYRUxfV0lEVEgiLCJDVUJFVVZfVEVYRUxfSEVJR0hUIiwiQ1VCRVVWX01BWF9NSVAiLCJzYW1wbGVEaXIiLCJtaXBGIiwibWlwSW50IiwiY29sb3IwIiwiYmlsaW5lYXJDdWJlVVYiLCJjb2xvcjEiLCJkaXJlY3Rpb25faW1tdXRhYmxlIiwibWlwSW50X2ltbXV0YWJsZSIsImZpbHRlckludCIsImZhY2VTaXplIiwiZ2V0U2FtcGxlIiwib3V0cHV0RGlyZWN0aW9uIiwidGhldGEiLCJheGlzIiwiY29zVGhldGEiLCJzYW1wbGVEaXJlY3Rpb24iLCJsYXRpdHVkaW5hbCIsInBvbGVBeGlzIiwid2VpZ2h0cyIsImRUaGV0YSIsImdsX0ZyYWdDb2xvciIsIkVYVFJBX0xPRF9TSUdNQSIsIk1BWF9TQU1QTEVTIiwiX2ZsYXRDYW1lcmEiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJfY3ViZUNhbWVyYSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiX2NsZWFyQ29sb3IkMiIsIl9vbGRUYXJnZXQiLCJfb2xkQWN0aXZlQ3ViZUZhY2UiLCJfb2xkQWN0aXZlTWlwbWFwTGV2ZWwiLCJQSEkiLCJJTlZfUEhJIiwiX2F4aXNEaXJlY3Rpb25zIiwiX29yaWdpbiIsIl91bmlmb3Jtc01hcCIsIl9mYWNlTGliIiwiX2RpcmVjdGlvbiIsIl9vdXRwdXREaXJlY3Rpb24iLCJQTVJFTUdlbmVyYXRvciIsIl9yZW5kZXJlciIsIl9waW5nUG9uZ1JlbmRlclRhcmdldCIsIl9sb2RNYXgiLCJfY3ViZVNpemUiLCJfbG9kUGxhbmVzIiwiX3NpemVMb2RzIiwiX3NpZ21hcyIsIl9sb2RNZXNoZXMiLCJfYmx1ck1hdGVyaWFsIiwiX2N1YmVtYXBNYXRlcmlhbCIsIl9lcXVpcmVjdE1hdGVyaWFsIiwiX2JhY2tncm91bmRCb3giLCJfaGFzSW5pdGlhbGl6ZWQiLCJoYXNJbml0aWFsaXplZCIsImZyb21TY2VuZSIsInNpZ21hIiwiX3NldFNpemUiLCJjdWJlVVZSZW5kZXJUYXJnZXQiLCJfYWxsb2NhdGVUYXJnZXRzIiwiZnJvbVNjZW5lQXN5bmMiLCJnZXRBY3RpdmVDdWJlRmFjZSIsImdldEFjdGl2ZU1pcG1hcExldmVsIiwiX3NjZW5lVG9DdWJlVVYiLCJfYmx1ciIsIl9hcHBseVBNUkVNIiwiX2NsZWFudXAiLCJpbml0IiwiZnJvbUVxdWlyZWN0YW5ndWxhciIsImVxdWlyZWN0YW5ndWxhciIsIl9zZXRTaXplRnJvbVRleHR1cmUiLCJmcm9tRXF1aXJlY3Rhbmd1bGFyQXN5bmMiLCJfZnJvbVRleHR1cmUiLCJmcm9tQ3ViZW1hcCIsImN1YmVtYXAiLCJmcm9tQ3ViZW1hcEFzeW5jIiwiY29tcGlsZUN1YmVtYXBTaGFkZXIiLCJfZ2V0Q3ViZW1hcE1hdGVyaWFsIiwiX2NvbXBpbGVNYXRlcmlhbCIsImNvbXBpbGVFcXVpcmVjdGFuZ3VsYXJTaGFkZXIiLCJfZ2V0RXF1aXJlY3RNYXRlcmlhbCIsIl9kaXNwb3NlIiwiY3ViZVNpemUiLCJvdXRwdXRUYXJnZXQiLCJzZXRSZW5kZXJUYXJnZXQiLCJzY2lzc29yVGVzdCIsIl9zZXRWaWV3cG9ydCIsIl90ZXh0dXJlVG9DdWJlVVYiLCJIYWxmRmxvYXRUeXBlIiwiUkdCQUZvcm1hdCIsIkxpbmVhclNSR0JDb2xvclNwYWNlIiwiX2NyZWF0ZVJlbmRlclRhcmdldCIsInNpemVMb2RzIiwibG9kUGxhbmVzIiwic2lnbWFzIiwibG9kTWVzaGVzIiwibG9kTWF4IiwidG90YWxMb2RzIiwic2l6ZUxvZCIsInV2MSIsImN1YmVGYWNlcyIsInZlcnRpY2VzIiwicG9zaXRpb25TaXplIiwidXZTaXplIiwiZmFjZUluZGV4U2l6ZSIsImZhY2VJbmRleCIsImNvb3JkaW5hdGVzIiwiZmFjZUlkeCIsInBsYW5lcyIsIkJ1ZmZlckdlb21ldHJ5Iiwic2V0QXR0cmlidXRlIiwiQnVmZmVyQXR0cmlidXRlIiwiX2NyZWF0ZVBsYW5lcyIsIm1hdGVyaWFsVW5pZm9ybXMiLCJfZ2V0TWF0ZXJpYWwiLCJfZ2V0Qmx1clNoYWRlciIsInRtcE1lc2giLCJjb21waWxlIiwiY3ViZUNhbWVyYSIsInVwU2lnbiIsImZvcndhcmRTaWduIiwib3JpZ2luYWxBdXRvQ2xlYXIiLCJhdXRvQ2xlYXIiLCJnZXRDbGVhckNvbG9yIiwiYmFja2dyb3VuZEJveCIsImJhY2tncm91bmRNYXRlcmlhbCIsInVzZVNvbGlkQ29sb3IiLCJiYWNrZ3JvdW5kIiwiY2xlYXIiLCJyZW5kZXIiLCJjb2wiLCJ1cCIsImxvb2tBdCIsImxvZEluIiwibG9kT3V0IiwicGluZ1BvbmdSZW5kZXJUYXJnZXQiLCJfaGFsZkJsdXIiLCJ0YXJnZXRJbiIsInRhcmdldE91dCIsInNpZ21hUmFkaWFucyIsImJsdXJNYXRlcmlhbCIsImJsdXJNZXNoIiwiYmx1clVuaWZvcm1zIiwicGl4ZWxzIiwicmFkaWFuc1BlclBpeGVsIiwiaXNGaW5pdGUiLCJzaWdtYVBpeGVscyIsInN1bSIsIndlaWdodCIsIm91dHB1dFNpemUiLCJSZW5kZXJUYXJnZXQiLCJDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyIsImlzUE1SRU1UZXh0dXJlIiwic2Npc3NvciIsImVudlRleHR1cmUiLCJfY2FjaGUiLCJfZ2V0UE1SRU1Gcm9tVGV4dHVyZSIsInJlbmRlcmVyQ2FjaGUiLCJfZ2V0Q2FjaGUiLCJjYWNoZVRleHR1cmUiLCJwbXJlbVZlcnNpb24iLCJpc0N1YmVNYXBSZWFkeSIsImlzRXF1aXJlY3Rhbmd1bGFyTWFwUmVhZHkiLCJQTVJFTU5vZGUiLCJfcG1yZW0iLCJfZ2VuZXJhdG9yIiwiVGV4dHVyZSIsIl90ZXh0dXJlIiwiX3dpZHRoIiwiX2hlaWdodCIsIl9tYXhNaXAiLCJ1cGRhdGVGcm9tVGV4dHVyZSIsImN1YmVVVlNpemUiLCJpbWFnZUhlaWdodCIsIm1heE1pcCIsInRleGVsSGVpZ2h0IiwidGV4ZWxXaWR0aCIsIl9nZW5lcmF0ZUN1YmVVVlNpemUiLCJwbXJlbSIsInBtcmVtVGV4dHVyZSIsIl9lbnZOb2RlQ2FjaGUiLCJFbnZpcm9ubWVudE5vZGUiLCJjYWNoZUVudk5vZGUiLCJyYWRpYW5jZU5vcm1hbFZpZXciLCJ1c2VBbmlzb3Ryb3B5IiwiY3JlYXRlUmFkaWFuY2VDb250ZXh0IiwiY3JlYXRlSXJyYWRpYW5jZUNvbnRleHQiLCJpc29sYXRlUmFkaWFuY2UiLCJpc29sYXRlSXJyYWRpYW5jZSIsImNsZWFyY29hdFJhZGlhbmNlQ29udGV4dCIsImlzb2xhdGVDbGVhcmNvYXRSYWRpYW5jZSIsIm5vcm1hbFZpZXdOb2RlIiwicmVmbGVjdFZlYyIsIm5vcm1hbFdvcmxkTm9kZSIsIl9kZWZhdWx0VmFsdWVzJDYiLCJNZXNoU3RhbmRhcmRNYXRlcmlhbCIsIk1lc2hTdGFuZGFyZE5vZGVNYXRlcmlhbCIsImlzTWVzaFN0YW5kYXJkTm9kZU1hdGVyaWFsIiwiZW52aXJvbm1lbnROb2RlIiwic2V0dXBTcGVjdWxhciIsIl9kZWZhdWx0VmFsdWVzJDUiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsIk1lc2hQaHlzaWNhbE5vZGVNYXRlcmlhbCIsImlzTWVzaFBoeXNpY2FsTm9kZU1hdGVyaWFsIiwiY2xlYXJjb2F0Tm9ybWFsTm9kZSIsImlyaWRlc2NlbmNlTm9kZSIsImlyaWRlc2NlbmNlSU9STm9kZSIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTm9kZSIsImlvck5vZGUiLCJhdHRlbnVhdGlvbkRpc3RhbmNlTm9kZSIsImF0dGVudWF0aW9uQ29sb3JOb2RlIiwiZGlzcGVyc2lvbk5vZGUiLCJhbmlzb3Ryb3B5Tm9kZSIsInVzZUNsZWFyY29hdCIsInVzZUlyaWRlc2NlbmNlIiwidXNlU2hlZW4iLCJ1c2VUcmFuc21pc3Npb24iLCJ1c2VEaXNwZXJzaW9uIiwiYW5pc290cm9weVYiLCJTU1NMaWdodGluZ01vZGVsIiwic3NzIiwidXNlU1NTIiwidGhpY2tuZXNzQ29sb3JOb2RlIiwidGhpY2tuZXNzRGlzdG9ydGlvbk5vZGUiLCJ0aGlja25lc3NBbWJpZW50Tm9kZSIsInRoaWNrbmVzc0F0dGVudWF0aW9uTm9kZSIsInRoaWNrbmVzc1Bvd2VyTm9kZSIsInRoaWNrbmVzc1NjYWxlTm9kZSIsInNjYXR0ZXJpbmdIYWxmIiwic2NhdHRlcmluZ0RvdCIsInNjYXR0ZXJpbmdJbGx1IiwiTWVzaFNTU05vZGVNYXRlcmlhbCIsImdldEdyYWRpZW50SXJyYWRpYW5jZSIsImdyYWRpZW50TWFwIiwiZnciLCJUb29uTGlnaHRpbmdNb2RlbCIsIl9kZWZhdWx0VmFsdWVzJDQiLCJNZXNoVG9vbk1hdGVyaWFsIiwiTWVzaFRvb25Ob2RlTWF0ZXJpYWwiLCJpc01lc2hUb29uTm9kZU1hdGVyaWFsIiwiTWF0Y2FwVVZOb2RlIiwibWF0Y2FwVVYiLCJfZGVmYXVsdFZhbHVlcyQzIiwiTWVzaE1hdGNhcE1hdGVyaWFsIiwiTWVzaE1hdGNhcE5vZGVNYXRlcmlhbCIsImlzTWVzaE1hdGNhcE5vZGVNYXRlcmlhbCIsIm1hdGNhcENvbG9yIiwibWF0Y2FwIiwiUm90YXRlTm9kZSIsInJvdGF0aW9uTm9kZSIsImNvc0FuZ2xlIiwic2luQW5nbGUiLCJyb3RhdGlvblhNYXRyaXgiLCJyb3RhdGlvbllNYXRyaXgiLCJyb3RhdGlvblpNYXRyaXgiLCJyb3RhdGUiLCJfZGVmYXVsdFZhbHVlcyQyIiwiU3ByaXRlTWF0ZXJpYWwiLCJTcHJpdGVOb2RlTWF0ZXJpYWwiLCJpc1Nwcml0ZU5vZGVNYXRlcmlhbCIsIl91c2VTaXplQXR0ZW51YXRpb24iLCJzaXplQXR0ZW51YXRpb24iLCJtdlBvc2l0aW9uIiwib3J0aG9TY2FsZSIsImFsaWduZWRQb3NpdGlvbiIsInJlZmVyZW5jZSQxIiwicm90YXRlZFBvc2l0aW9uIiwiX2RlZmF1bHRWYWx1ZXMkMSIsIlBvaW50c01hdGVyaWFsIiwiUG9pbnRzTm9kZU1hdGVyaWFsIiwic2l6ZU5vZGUiLCJpc1BvaW50c05vZGVNYXRlcmlhbCIsIm12cCIsInBvaW50U2l6ZSIsIlNoYWRvd01hc2tNb2RlbCIsInNoYWRvd05vZGUiLCJzaGFkb3dNYXNrIiwiX2RlZmF1bHRWYWx1ZXMiLCJTaGFkb3dNYXRlcmlhbCIsIlNoYWRvd05vZGVNYXRlcmlhbCIsImlzU2hhZG93Tm9kZU1hdGVyaWFsIiwic2NhdHRlcmluZ0RlbnNpdHkiLCJsaW5lYXJEZXB0aFJheSIsIm91dGdvaW5nUmF5TGlnaHQiLCJWb2x1bWV0cmljTGlnaHRpbmdNb2RlbCIsInN0YXJ0UG9zIiwiZW5kUG9zIiwidmlld1ZlY3RvciIsInN0ZXBzIiwic3RlcFNpemUiLCJyYXlEaXIiLCJkaXN0VHJhdmVsbGVkIiwicG9zaXRpb25SYXkiLCJwb3NpdGlvblZpZXdSYXkiLCJzY2F0dGVyaW5nTm9kZSIsInNjZW5lRGVwdGhOb2RlIiwic2hhZG93UG9zaXRpb25Xb3JsZCIsImZhbGxvZmYiLCJzY2F0dGVyaW5nTGlnaHQiLCJsaWdodE5vZGUiLCJsaWdodCIsImRpcmVjdExpZ2h0IiwiVm9sdW1lTm9kZU1hdGVyaWFsIiwiaXNWb2x1bWVOb2RlTWF0ZXJpYWwiLCJBbmltYXRpb24iLCJpbmZvIiwiX2NvbnRleHQiLCJfYW5pbWF0aW9uTG9vcCIsIl9yZXF1ZXN0SWQiLCJ0aW1lIiwieHJGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImF1dG9SZXNldCIsInJlc2V0Iiwic3RvcCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZ2V0QW5pbWF0aW9uTG9vcCIsInNldEFuaW1hdGlvbkxvb3AiLCJDaGFpbk1hcCIsIndlYWtNYXAiLCJfaWQkOSIsIlJlbmRlck9iamVjdCIsImdlb21ldHJpZXMiLCJyZW5kZXJDb250ZXh0IiwiX25vZGVzIiwiX2dlb21ldHJpZXMiLCJwaXBlbGluZSIsInZlcnRleEJ1ZmZlcnMiLCJkcmF3UGFyYW1zIiwiY2xpcHBpbmdDb250ZXh0Q2FjaGVLZXkiLCJjYWNoZUtleSIsImluaXRpYWxOb2Rlc0NhY2hlS2V5IiwiZ2V0RHluYW1pY0NhY2hlS2V5IiwiaW5pdGlhbENhY2hlS2V5IiwiX25vZGVCdWlsZGVyU3RhdGUiLCJfYmluZGluZ3MiLCJfbW9uaXRvciIsIm9uRGlzcG9zZSIsImlzUmVuZGVyT2JqZWN0Iiwib25NYXRlcmlhbERpc3Bvc2UiLCJ1cGRhdGVDbGlwcGluZyIsImNsaXBwaW5nTmVlZHNVcGRhdGUiLCJoYXJkd2FyZUNsaXBwaW5nUGxhbmVzIiwidW5pb25DbGlwcGluZ0NvdW50IiwiZ2V0Tm9kZUJ1aWxkZXJTdGF0ZSIsImdldEZvclJlbmRlciIsImdldE1vbml0b3IiLCJnZXRCaW5kaW5ncyIsImNyZWF0ZUJpbmRpbmdzIiwiZ2V0QmluZGluZ0dyb3VwIiwiYmluZGluZ0dyb3VwIiwiZ2V0SW5kZXgiLCJnZXRJbmRpcmVjdCIsImdldENoYWluQXJyYXkiLCJzZXRHZW9tZXRyeSIsImdldEF0dHJpYnV0ZXMiLCJub2RlQXR0cmlidXRlcyIsIlNldCIsImlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUiLCJnZXRWZXJ0ZXhCdWZmZXJzIiwiZ2V0RHJhd1BhcmFtZXRlcnMiLCJ2ZXJ0ZXhDb3VudCIsImZpcnN0VmVydGV4IiwiaW5zdGFuY2VDb3VudCIsImZpcnN0SW5zdGFuY2UiLCJoYXNJbmRleCIsImlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkiLCJyYW5nZUZhY3RvciIsIndpcmVmcmFtZSIsImlzUG9pbnRzIiwiaXNMaW5lU2VnbWVudHMiLCJpc0xpbmUiLCJpc0xpbmVMb29wIiwibGFzdFZlcnRleCIsIml0ZW1Db3VudCIsIkluZmluaXR5IiwiZ2V0R2VvbWV0cnlDYWNoZUtleSIsIm5vcm1hbGl6ZWQiLCJ0YXJnZXRzIiwiZ2V0TWF0ZXJpYWxDYWNoZUtleSIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJkZXNjcmlwdG9yIiwiZ2V0S2V5cyIsInZhbHVlS2V5IiwicmVjZWl2ZVNoYWRvdyIsIm5lZWRzR2VvbWV0cnlVcGRhdGUiLCJpc1NoYWRvd1Bhc3NNYXRlcmlhbCIsIl9jaGFpbktleXMkNSIsIlJlbmRlck9iamVjdHMiLCJwaXBlbGluZXMiLCJiaW5kaW5ncyIsImNoYWluTWFwcyIsInBhc3NJZCIsImNoYWluTWFwIiwiZ2V0Q2hhaW5NYXAiLCJjcmVhdGVSZW5kZXJPYmplY3QiLCJEYXRhTWFwIiwiQXR0cmlidXRlVHlwZSIsIkdQVV9DSFVOS19CWVRFUyIsIkF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVEYXRhIiwiZGVzdHJveUF0dHJpYnV0ZSIsImNyZWF0ZUF0dHJpYnV0ZSIsImNyZWF0ZUluZGV4QXR0cmlidXRlIiwiY3JlYXRlU3RvcmFnZUF0dHJpYnV0ZSIsImNyZWF0ZUluZGlyZWN0U3RvcmFnZUF0dHJpYnV0ZSIsIl9nZXRCdWZmZXJBdHRyaWJ1dGUiLCJ1cGRhdGVBdHRyaWJ1dGUiLCJnZXRXaXJlZnJhbWVWZXJzaW9uIiwiZ2V0V2lyZWZyYW1lSW5kZXgiLCJpbmRpY2VzIiwiZ2VvbWV0cnlJbmRleCIsImdlb21ldHJ5UG9zaXRpb24iLCJhcnJheU5lZWRzVWludDMyIiwiVWludDMyQnVmZmVyQXR0cmlidXRlIiwiVWludDE2QnVmZmVyQXR0cmlidXRlIiwiR2VvbWV0cmllcyIsIndpcmVmcmFtZXMiLCJhdHRyaWJ1dGVDYWxsIiwidXBkYXRlRm9yUmVuZGVyIiwiaW5pdEdlb21ldHJ5IiwidXBkYXRlQXR0cmlidXRlcyIsIm1lbW9yeSIsImdlb21ldHJ5QXR0cmlidXRlcyIsImdlb21ldHJ5QXR0cmlidXRlIiwid2lyZWZyYW1lQXR0cmlidXRlIiwiaXNTdG9yYWdlQnVmZmVyQXR0cmlidXRlIiwiaXNTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIiwiY2FsbElkIiwiY2FsbHMiLCJJbmZvIiwiZnJhbWVDYWxscyIsImRyYXdDYWxscyIsInRyaWFuZ2xlcyIsInBvaW50cyIsImxpbmVzIiwidGltZXN0YW1wIiwiaXNNZXNoIiwiaXNTcHJpdGUiLCJQaXBlbGluZSIsInVzZWRUaW1lcyIsIlJlbmRlclBpcGVsaW5lIiwidmVydGV4UHJvZ3JhbSIsImZyYWdtZW50UHJvZ3JhbSIsIkNvbXB1dGVQaXBlbGluZSIsImNvbXB1dGVQcm9ncmFtIiwiaXNDb21wdXRlUGlwZWxpbmUiLCJfaWQkOCIsIlByb2dyYW1tYWJsZVN0YWdlIiwiY29kZSIsInN0YWdlIiwidHJhbnNmb3JtcyIsIlBpcGVsaW5lcyIsImNhY2hlcyIsInByb2dyYW1zIiwiZnJhZ21lbnQiLCJnZXRGb3JDb21wdXRlIiwiX25lZWRzQ29tcHV0ZVVwZGF0ZSIsInByZXZpb3VzUGlwZWxpbmUiLCJub2RlQnVpbGRlclN0YXRlIiwic3RhZ2VDb21wdXRlIiwiY29tcHV0ZVNoYWRlciIsIl9yZWxlYXNlUHJvZ3JhbSIsImNyZWF0ZVByb2dyYW0iLCJfZ2V0Q29tcHV0ZUNhY2hlS2V5IiwiX3JlbGVhc2VQaXBlbGluZSIsIl9nZXRDb21wdXRlUGlwZWxpbmUiLCJwcm9taXNlcyIsIl9uZWVkc1JlbmRlclVwZGF0ZSIsInN0YWdlVmVydGV4IiwidmVydGV4U2hhZGVyIiwic3RhZ2VGcmFnbWVudCIsImZyYWdtZW50U2hhZGVyIiwiX2dldFJlbmRlckNhY2hlS2V5IiwiX2dldFJlbmRlclBpcGVsaW5lIiwiY3JlYXRlQ29tcHV0ZVBpcGVsaW5lIiwiY3JlYXRlUmVuZGVyUGlwZWxpbmUiLCJnZXRSZW5kZXJDYWNoZUtleSIsInByb2dyYW0iLCJuZWVkc1JlbmRlclVwZGF0ZSIsIkJpbmRpbmdzIiwiYmluZEdyb3VwIiwiZ3JvdXBEYXRhIiwiX2luaXQiLCJ1cGRhdGVGb3JDb21wdXRlIiwiX3VwZGF0ZUJpbmRpbmdzIiwiX3VwZGF0ZSIsImJpbmRpbmciLCJpc1NhbXBsZWRUZXh0dXJlIiwidXBkYXRlVGV4dHVyZSIsImlzU3RvcmFnZUJ1ZmZlciIsImlzSW5kaXJlY3RTdG9yYWdlQnVmZmVyQXR0cmlidXRlIiwibmVlZHNCaW5kaW5nc1VwZGF0ZSIsImNhY2hlQmluZGluZ3MiLCJjYWNoZUluZGV4IiwiaXNOb2RlVW5pZm9ybXNHcm91cCIsInVwZGF0ZUdyb3VwIiwiaXNVbmlmb3JtQnVmZmVyIiwidXBkYXRlQmluZGluZyIsImlzU2FtcGxlciIsInRleHR1cmVzVGV4dHVyZURhdGEiLCJnZW5lcmF0aW9uIiwidXBkYXRlZCIsInRleHR1cmVEYXRhIiwiZXh0ZXJuYWxUZXh0dXJlIiwiaXNEZWZhdWx0VGV4dHVyZSIsImlzU3RvcmFnZVRleHR1cmUiLCJzdG9yZSIsIm5lZWRzTWlwbWFwIiwibmVlZHNNaXBtYXBzIiwidXBkYXRlQmluZGluZ3MiLCJwYWludGVyU29ydFN0YWJsZSIsImdyb3VwT3JkZXIiLCJyZW5kZXJPcmRlciIsInJldmVyc2VQYWludGVyU29ydFN0YWJsZSIsIm5lZWRzRG91YmxlUGFzcyIsIkRvdWJsZVNpZGUiLCJmb3JjZVNpbmdsZVBhc3MiLCJSZW5kZXJMaXN0IiwicmVuZGVySXRlbXMiLCJyZW5kZXJJdGVtc0luZGV4Iiwib3BhcXVlIiwidHJhbnNwYXJlbnREb3VibGVQYXNzIiwiYnVuZGxlcyIsImdldE5vZGUiLCJsaWdodHNBcnJheSIsIm9jY2x1c2lvblF1ZXJ5Q291bnQiLCJiZWdpbiIsImdldE5leHRSZW5kZXJJdGVtIiwicmVuZGVySXRlbSIsIm9jY2x1c2lvblRlc3QiLCJ1bnNoaWZ0IiwicHVzaEJ1bmRsZSIsInB1c2hMaWdodCIsImN1c3RvbU9wYXF1ZVNvcnQiLCJjdXN0b21UcmFuc3BhcmVudFNvcnQiLCJzZXRMaWdodHMiLCJpbCIsIl9jaGFpbktleXMkNCIsIlJlbmRlckxpc3RzIiwibGlzdHMiLCJsaXN0IiwiX2lkJDciLCJSZW5kZXJDb250ZXh0IiwiY2xlYXJDb2xvciIsImNsZWFyQ29sb3JWYWx1ZSIsImNsZWFyRGVwdGgiLCJjbGVhckRlcHRoVmFsdWUiLCJzdGVuY2lsIiwiY2xlYXJTdGVuY2lsIiwiY2xlYXJTdGVuY2lsVmFsdWUiLCJ2aWV3cG9ydFZhbHVlIiwic2Npc3NvclZhbHVlIiwiZGVwdGhUZXh0dXJlIiwiYWN0aXZlQ3ViZUZhY2UiLCJhY3RpdmVNaXBtYXBMZXZlbCIsInNhbXBsZUNvdW50IiwiaXNSZW5kZXJDb250ZXh0IiwiX2NoYWluS2V5cyQzIiwiX2RlZmF1bHRTY2VuZSIsIl9kZWZhdWx0Q2FtZXJhIiwiQ2FtZXJhIiwiUmVuZGVyQ29udGV4dHMiLCJhdHRhY2htZW50U3RhdGUiLCJzdGVuY2lsQnVmZmVyIiwiX2dldENoYWluTWFwIiwicmVuZGVyU3RhdGUiLCJnZXRGb3JDbGVhciIsIl9zaXplJDMiLCJUZXh0dXJlcyIsInVwZGF0ZVJlbmRlclRhcmdldCIsInJlbmRlclRhcmdldERhdGEiLCJkZXB0aFRleHR1cmVNaXBzIiwiZ2V0U2l6ZSIsIm1pcFdpZHRoIiwibWlwSGVpZ2h0IiwidXNlRGVwdGhUZXh0dXJlIiwidGV4dHVyZU5lZWRzVXBkYXRlIiwiRGVwdGhTdGVuY2lsRm9ybWF0IiwiRGVwdGhGb3JtYXQiLCJVbnNpZ25lZEludDI0OFR5cGUiLCJpc1hSUmVuZGVyVGFyZ2V0IiwiX2Rlc3Ryb3lUZXh0dXJlIiwiaXNSZW5kZXJUYXJnZXQiLCJkZXN0cm95U2FtcGxlciIsImRlc3Ryb3lUZXh0dXJlIiwiVW5zaWduZWRCeXRlVHlwZSIsImxldmVscyIsImdldE1pcExldmVscyIsImNyZWF0ZVNhbXBsZXIiLCJjcmVhdGVUZXh0dXJlIiwiY29tcGxldGUiLCJkYXRhUmVhZHkiLCJtaXBtYXBzIiwiY3JlYXRlRGVmYXVsdFRleHR1cmUiLCJtaXBMZXZlbENvdW50IiwiaXNDb21wcmVzc2VkVGV4dHVyZSIsImlzRW52aXJvbm1lbnRUZXh0dXJlIiwiQ29sb3I0IiwiUGFyYW1ldGVyTm9kZSIsImlzUGFyYW1ldGVyTm9kZSIsIlN0YWNrTm9kZSIsIl9jdXJyZW50Q29uZCIsImJvb2xOb2RlIiwibWV0aG9kTm9kZSIsInByZXZpb3VzU3RhY2siLCJlbHNlaWYiLCJTdHJ1Y3RUeXBlTm9kZSIsIm1lbWJlcnNMYXlvdXQiLCJtZW1iZXJzIiwiZW50cmllcyIsImF0b21pYyIsImlzU3RydWN0TGF5b3V0Tm9kZSIsImdldExlbmd0aCIsIm1lbWJlciIsImZpbmQiLCJnZXRTdHJ1Y3RUeXBlRnJvbU5vZGUiLCJTdHJ1Y3ROb2RlIiwic3RydWN0TGF5b3V0Tm9kZSIsImlzU3RydWN0Tm9kZSIsInN0cnVjdFR5cGUiLCJnZW5lcmF0ZVN0cnVjdCIsIk91dHB1dFN0cnVjdE5vZGUiLCJnZXRPdXRwdXRTdHJ1Y3RUeXBlRnJvbU5vZGUiLCJnZXRPdXRwdXRTdHJ1Y3ROYW1lIiwic3RydWN0UHJlZml4Iiwib3V0cHV0U3RydWN0IiwiZ2V0VGV4dHVyZUluZGV4IiwiTVJUTm9kZSIsIm91dHB1dE5vZGVzIiwiaXNNUlROb2RlIiwib3V0cHV0cyIsInRvVWludCIsIndvcmQiLCJ0b0Zsb2F0IiwicGFyYWJvbGEiLCJrIiwidHJpIiwidHJpMyIsInAiLCJ0cmlOb2lzZTNEIiwic3BlZWQiLCJyeiIsImJwIiwiZGciLCJGdW5jdGlvbk92ZXJsb2FkaW5nTm9kZSIsImZ1bmN0aW9uTm9kZXMiLCJwYXJhbWV0ZXJzTm9kZXMiLCJfY2FuZGlkYXRlRm5DYWxsIiwiY2FuZGlkYXRlRm5DYWxsIiwiY2FuZGlkYXRlRm4iLCJjYW5kaWRhdGVTY29yZSIsInNjb3JlIiwib3ZlcmxvYWRpbmdCYXNlRm4iLCJvdmVybG9hZGluZ0ZuIiwiZGVsdGFUaW1lIiwicm90YXRlVVYiLCJzcGhlcml6ZVVWIiwic3RyZW5ndGgiLCJkZWx0YSIsImRlbHRhMiIsImRlbHRhT2Zmc2V0IiwiYmlsbGJvYXJkaW5nIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwidmlld3BvcnRTYWZlVVYiLCJTcHJpdGVTaGVldFVWTm9kZSIsImNvdW50Tm9kZSIsImZyYW1lTm9kZSIsImZyYW1lTnVtIiwiY29sdW1uIiwicm93IiwidXZGcmFtZU9mZnNldCIsInNwcml0ZXNoZWV0VVYiLCJUcmlwbGFuYXJUZXh0dXJlc05vZGUiLCJ0ZXh0dXJlWE5vZGUiLCJ0ZXh0dXJlWU5vZGUiLCJ0ZXh0dXJlWk5vZGUiLCJiZiIsInR4IiwidHkiLCJ6eCIsInR6IiwidGV4dHVyZVgiLCJ0ZXh0dXJlWSIsInRleHR1cmVaIiwiY3giLCJjeSIsImN6IiwidHJpcGxhbmFyVGV4dHVyZXMiLCJfcmVmbGVjdG9yUGxhbmUiLCJQbGFuZSIsIl9ub3JtYWwiLCJfcmVmbGVjdG9yV29ybGRQb3NpdGlvbiIsIl9jYW1lcmFXb3JsZFBvc2l0aW9uIiwiX3JvdGF0aW9uTWF0cml4IiwiX2xvb2tBdFBvc2l0aW9uIiwiY2xpcFBsYW5lIiwiX3ZpZXciLCJfdGFyZ2V0IiwiX3EiLCJfc2l6ZSQyIiwiX2RlZmF1bHRSVCIsIl9kZWZhdWx0VVYiLCJmbGlwWCIsIl9pblJlZmxlY3RvciIsIlJlZmxlY3Rvck5vZGUiLCJfcmVmbGVjdG9yQmFzZU5vZGUiLCJyZWZsZWN0b3IiLCJSZWZsZWN0b3JCYXNlTm9kZSIsIl9kZXB0aE5vZGUiLCJnZXREZXB0aE5vZGUiLCJpc1F1YWRNZXNoIiwicmVmbGVjdG9yTm9kZSIsIk9iamVjdDNEIiwicmVzb2x1dGlvbiIsImJvdW5jZXMiLCJ2aXJ0dWFsQ2FtZXJhcyIsInJlbmRlclRhcmdldHMiLCJmb3JjZVVwZGF0ZSIsIl91cGRhdGVSZXNvbHV0aW9uIiwic2V0U2l6ZSIsImdldFZpcnR1YWxDYW1lcmEiLCJ2aXJ0dWFsQ2FtZXJhIiwiTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyIiwiZXh0cmFjdFJvdGF0aW9uIiwic3ViVmVjdG9ycyIsInVwZGF0ZU1hdHJpeFdvcmxkIiwic2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQiLCJjb25zdGFudCIsInZpc2libGUiLCJjdXJyZW50UmVuZGVyVGFyZ2V0IiwiY3VycmVudEF1dG9DbGVhciIsIl9jYW1lcmEiLCJRdWFkR2VvbWV0cnkiLCJGbG9hdDMyQnVmZmVyQXR0cmlidXRlIiwiX2dlb21ldHJ5IiwiUXVhZE1lc2giLCJyZW5kZXJBc3luYyIsIl9zaXplJDEiLCJSVFROb2RlIiwicGl4ZWxSYXRpbyIsImF1dG9VcGRhdGUiLCJfcnR0Tm9kZSIsIl9xdWFkTWVzaCIsImF1dG9TaXplIiwiZ2V0U2hhcmVkQ29udGV4dCIsImVmZmVjdGl2ZVdpZHRoIiwiZWZmZWN0aXZlSGVpZ2h0Iiwic2V0UGl4ZWxSYXRpbyIsInJ0dCIsImdldFZpZXdQb3NpdGlvbiIsInNjcmVlblBvc2l0aW9uIiwiY2xpcFNwYWNlUG9zaXRpb24iLCJ2aWV3U3BhY2VQb3NpdGlvbiIsImdldFNjcmVlblBvc2l0aW9uIiwidmlld1Bvc2l0aW9uIiwic2FtcGxlQ2xpcFBvcyIsInNhbXBsZVV2IiwiZ2V0Tm9ybWFsRnJvbURlcHRoIiwibDIiLCJsMSIsInIxIiwiYjIiLCJiMSIsImRsIiwiZHIiLCJkYiIsImNlIiwiZHBkeCIsImRwZHkiLCJTdG9yYWdlSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIiwidHlwZUNsYXNzIiwiaXNWaWV3IiwiU3RvcmFnZUJ1ZmZlckF0dHJpYnV0ZSIsIlN0b3JhZ2VBcnJheUVsZW1lbnROb2RlIiwic3RvcmFnZUJ1ZmZlck5vZGUiLCJpc1N0b3JhZ2VBcnJheUVsZW1lbnROb2RlIiwic3RydWN0VHlwZU5vZGUiLCJpc1BCTyIsInNldHVwUEJPIiwiaXNBc3NpZ25Db250ZXh0IiwiZ2VuZXJhdGVQQk8iLCJzdG9yYWdlRWxlbWVudCIsIlN0b3JhZ2VCdWZmZXJOb2RlIiwiaXNTdHJ1Y3QiLCJpc1N0b3JhZ2VCdWZmZXJOb2RlIiwiYWNjZXNzIiwiaXNBdG9taWMiLCJfYXR0cmlidXRlIiwiX3ZhcnlpbmciLCJzZXRQQk8iLCJnZXRQQk8iLCJzZXRBY2Nlc3MiLCJ0b1JlYWRPbmx5Iiwic2V0QXRvbWljIiwidG9BdG9taWMiLCJnZXRBdHRyaWJ1dGVEYXRhIiwicmVnaXN0ZXJUcmFuc2Zvcm0iLCJzdG9yYWdlIiwiVmVydGV4Q29sb3JOb2RlIiwiaXNWZXJ0ZXhDb2xvck5vZGUiLCJQb2ludFVWTm9kZSIsImlzUG9pbnRVVk5vZGUiLCJwb2ludFVWIiwiX2UxIiwiX20xIiwiU2NlbmVOb2RlIiwiQkFDS0dST1VORF9CTFVSUklORVNTIiwiQkFDS0dST1VORF9JTlRFTlNJVFkiLCJCQUNLR1JPVU5EX1JPVEFUSU9OIiwiVVZNYXBwaW5nIiwiYmFja2dyb3VuZFJvdGF0aW9uIiwiYmFja2dyb3VuZEJsdXJyaW5lc3MiLCJiYWNrZ3JvdW5kSW50ZW5zaXR5IiwiU3RvcmFnZVRleHR1cmVOb2RlIiwic3RvcmVOb2RlIiwiaXNTdG9yYWdlVGV4dHVyZU5vZGUiLCJnZW5lcmF0ZVN0b3JlIiwidG9SZWFkV3JpdGUiLCJ0b1dyaXRlT25seSIsInN0b3JlU25pcHBldCIsImdlbmVyYXRlVGV4dHVyZVN0b3JlIiwic3RvcmFnZVRleHR1cmUiLCJlcHNpbG9uIiwicmV0IiwiVGV4dHVyZTNETm9kZSIsImlzVGV4dHVyZTNETm9kZSIsInRleHR1cmUzRCIsIlVzZXJEYXRhTm9kZSIsInVzZXJEYXRhIiwiX29iamVjdERhdGEiLCJWZWxvY2l0eU5vZGUiLCJwcmV2aW91c01vZGVsV29ybGRNYXRyaXgiLCJwcmV2aW91c1Byb2plY3Rpb25NYXRyaXgiLCJwcmV2aW91c0NhbWVyYVZpZXdNYXRyaXgiLCJzZXRQcm9qZWN0aW9uTWF0cml4IiwicHJldmlvdXNNb2RlbE1hdHJpeCIsImdldFByZXZpb3VzTWF0cml4IiwiY2FtZXJhRGF0YSIsImN1cnJlbnRQcm9qZWN0aW9uTWF0cml4IiwiY3VycmVudENhbWVyYVZpZXdNYXRyaXgiLCJwcmV2aW91c01vZGVsVmlld01hdHJpeCIsImNsaXBQb3NpdGlvbkN1cnJlbnQiLCJjbGlwUG9zaXRpb25QcmV2aW91cyIsIm5kY1Bvc2l0aW9uQ3VycmVudCIsIm5kY1Bvc2l0aW9uUHJldmlvdXMiLCJvYmplY3REYXRhIiwidmVsb2NpdHkiLCJibGVuZEJ1cm4iLCJiYXNlIiwiYmxlbmQiLCJibGVuZERvZGdlIiwiYmxlbmRTY3JlZW4iLCJibGVuZE92ZXJsYXkiLCJibGVuZENvbG9yIiwib3V0QWxwaGEiLCJncmF5c2NhbGUiLCJsdW1pbmFuY2UiLCJzYXR1cmF0aW9uIiwiYWRqdXN0bWVudCIsInZpYnJhbmNlIiwiYXZlcmFnZSIsIm14IiwiYW10IiwiaHVlIiwibHVtaW5hbmNlQ29lZmZpY2llbnRzIiwiZ2V0THVtaW5hbmNlQ29lZmZpY2llbnRzIiwiY2RsIiwic2xvcGUiLCJwb3dlciIsImx1bWEiLCJwdiIsIlBvc3Rlcml6ZU5vZGUiLCJzdGVwc05vZGUiLCJwb3N0ZXJpemUiLCJfc2l6ZSIsIlBhc3NUZXh0dXJlTm9kZSIsInBhc3NOb2RlIiwiUGFzc011bHRpcGxlVGV4dHVyZU5vZGUiLCJ0ZXh0dXJlTmFtZSIsInByZXZpb3VzVGV4dHVyZSIsImdldFByZXZpb3VzVGV4dHVyZSIsIlBhc3NOb2RlIiwiX3BpeGVsUmF0aW8iLCJfdGV4dHVyZXMiLCJfdGV4dHVyZU5vZGVzIiwiX2xpbmVhckRlcHRoTm9kZXMiLCJfdmlld1pOb2RlcyIsIl9wcmV2aW91c1RleHR1cmVzIiwiX3ByZXZpb3VzVGV4dHVyZU5vZGVzIiwiX2NhbWVyYU5lYXIiLCJfY2FtZXJhRmFyIiwiX21ydCIsIl9sYXllcnMiLCJfcmVzb2x1dGlvbiIsImlzUGFzc05vZGUiLCJzZXRSZXNvbHV0aW9uIiwiZ2V0UmVzb2x1dGlvbiIsInNldExheWVycyIsImxheWVycyIsImdldExheWVycyIsInRvZ2dsZVRleHR1cmUiLCJwcmV2VGV4dHVyZSIsImdldFRleHR1cmVOb2RlIiwiZ2V0UHJldmlvdXNUZXh0dXJlTm9kZSIsImdldFZpZXdaTm9kZSIsInZpZXdaTm9kZSIsImdldExpbmVhckRlcHRoTm9kZSIsImxpbmVhckRlcHRoTm9kZSIsImlzV2ViR0xCYWNrZW5kIiwiZ2V0Q29sb3JCdWZmZXJUeXBlIiwib3V0cHV0UmVuZGVyVGFyZ2V0IiwiZ2V0T3V0cHV0UmVuZGVyVGFyZ2V0IiwieHIiLCJnZXRDYW1lcmEiLCJ1cGRhdGVDYW1lcmEiLCJjdXJyZW50TWFzayIsIm1hc2siLCJUb29uT3V0bGluZVBhc3NOb2RlIiwiYWxwaGFOb2RlIiwiX21hdGVyaWFsQ2FjaGUiLCJjdXJyZW50UmVuZGVyT2JqZWN0RnVuY3Rpb24iLCJnZXRSZW5kZXJPYmplY3RGdW5jdGlvbiIsInNldFJlbmRlck9iamVjdEZ1bmN0aW9uIiwiaXNNZXNoVG9vbk1hdGVyaWFsIiwib3V0bGluZU1hdGVyaWFsIiwiX2dldE91dGxpbmVNYXRlcmlhbCIsIl9jcmVhdGVNYXRlcmlhbCIsImlzTWVzaFRvb25PdXRsaW5lTWF0ZXJpYWwiLCJvdXRsaW5lTm9ybWFsIiwicmF0aW8iLCJwb3MyIiwib3JpZ2luYWxNYXRlcmlhbCIsImxpbmVhclRvbmVNYXBwaW5nIiwicmVpbmhhcmRUb25lTWFwcGluZyIsImNpbmVvblRvbmVNYXBwaW5nIiwiUlJUQW5kT0RURml0IiwiYWNlc0ZpbG1pY1RvbmVNYXBwaW5nIiwiQUNFU0lucHV0TWF0IiwiQUNFU091dHB1dE1hdCIsIkxJTkVBUl9SRUMyMDIwX1RPX0xJTkVBUl9TUkdCIiwiTElORUFSX1NSR0JfVE9fTElORUFSX1JFQzIwMjAiLCJhZ3hEZWZhdWx0Q29udHJhc3RBcHByb3giLCJ4X2ltbXV0YWJsZSIsIng0IiwiYWd4VG9uZU1hcHBpbmciLCJjb2xvcnRvbmUiLCJBZ1hJbnNldE1hdHJpeCIsIkFnWE91dHNldE1hdHJpeCIsIkFneE1pbkV2IiwiQWd4TWF4RXYiLCJuZXV0cmFsVG9uZU1hcHBpbmciLCJTdGFydENvbXByZXNzaW9uIiwiRGVzYXR1cmF0aW9uIiwicGVhayIsImQiLCJuZXdQZWFrIiwiQ29kZU5vZGUiLCJsYW5ndWFnZSIsImlzQ29kZU5vZGUiLCJzZXRJbmNsdWRlcyIsImdldEluY2x1ZGVzIiwiaW5jbHVkZSIsIm5vZGVDb2RlIiwiZ2V0Q29kZUZyb21Ob2RlIiwiRnVuY3Rpb25Ob2RlIiwiZ2V0Tm9kZUZ1bmN0aW9uIiwibm9kZUZ1bmN0aW9uIiwicGFyc2VyIiwicGFyc2VGdW5jdGlvbiIsImdldENvZGUiLCJuYXRpdmVGbiIsIlNjcmlwdGFibGVWYWx1ZU5vZGUiLCJldmVudHMiLCJpc1NjcmlwdGFibGVWYWx1ZU5vZGUiLCJpc1NjcmlwdGFibGVPdXRwdXROb2RlIiwiVVJMIiwicmV2b2tlT2JqZWN0VVJMIiwicmVmcmVzaCIsImdldFZhbHVlIiwiY3JlYXRlT2JqZWN0VVJMIiwiQmxvYiIsInNjcmlwdGFibGVWYWx1ZSIsIlJlc291cmNlcyIsIlBhcmFtZXRlcnMiLCJzY3JpcHRhYmxlTm9kZSIsImdldExheW91dCIsImdldElucHV0TGF5b3V0IiwiU2NyaXB0YWJsZU5vZGVSZXNvdXJjZXMiLCJTY3JpcHRhYmxlTm9kZSIsImNvZGVOb2RlIiwiX2xvY2FsIiwiX291dHB1dCIsIl9vdXRwdXRzIiwiX3NvdXJjZSIsIl9tZXRob2QiLCJfb2JqZWN0IiwiX25lZWRzT3V0cHV0VXBkYXRlIiwib25SZWZyZXNoIiwiaXNTY3JpcHRhYmxlTm9kZSIsInNldExvY2FsIiwiZ2V0TG9jYWwiLCJfcmVmcmVzaCIsImdldE91dHB1dExheW91dCIsInNldE91dHB1dCIsImdldE91dHB1dCIsImdldFBhcmFtZXRlciIsInNldFBhcmFtZXRlciIsImRlbGV0ZVBhcmFtZXRlciIsImdldERlZmF1bHRPdXRwdXQiLCJjbGVhclBhcmFtZXRlcnMiLCJnZXRPYmplY3QiLCJjYWxsQXN5bmMiLCJnZXREZWZhdWx0T3V0cHV0Tm9kZSIsIlRIUkVFIiwiVFNMIiwiX2V4ZWMiLCJyZXR1cm5zIiwiRnVuY3Rpb24iLCJzY3JpcHRhYmxlIiwiZ2V0Vmlld1oiLCJyYW5nZUZvZ0ZhY3RvciIsImRlbnNpdHlGb2dGYWN0b3IiLCJkZW5zaXR5IiwiUmFuZ2VOb2RlIiwibWluTm9kZSIsIm1heE5vZGUiLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwic2V0U2NhbGFyIiwibWluRWxlbWVudFZhbHVlIiwiZ2V0Q29tcG9uZW50IiwibWF4RWxlbWVudFZhbHVlIiwibGVycCIsInJhbmRvbSIsInJhbmdlIiwiQ29tcHV0ZUJ1aWx0aW5Ob2RlIiwiYnVpbHRpbk5hbWUiLCJfYnVpbHRpbk5hbWUiLCJnZXRCdWlsdGluTmFtZSIsInNldEJ1aWx0aW5OYW1lIiwiaGFzQnVpbHRpbiIsImNvbXB1dGVCdWlsdGluIiwibnVtV29ya2dyb3VwcyIsIndvcmtncm91cElkIiwiZ2xvYmFsSWQiLCJsb2NhbElkIiwic3ViZ3JvdXBTaXplIiwiYmFycmllciIsIldvcmtncm91cEluZm9FbGVtZW50Tm9kZSIsIndvcmtncm91cEluZm9Ob2RlIiwiaXNXb3JrZ3JvdXBJbmZvRWxlbWVudE5vZGUiLCJXb3JrZ3JvdXBJbmZvTm9kZSIsImlzV29ya2dyb3VwSW5mb05vZGUiLCJzZXRTY29wZSIsImdldFNjb3BlZEFycmF5IiwiQXRvbWljRnVuY3Rpb25Ob2RlIiwicG9pbnRlck5vZGUiLCJtZXRob2RTbmlwcGV0IiwidmFyU25pcHBldCIsIkFUT01JQ19MT0FEIiwiQVRPTUlDX1NUT1JFIiwiQVRPTUlDX0FERCIsIkFUT01JQ19TVUIiLCJBVE9NSUNfTUFYIiwiQVRPTUlDX01JTiIsIkFUT01JQ19BTkQiLCJBVE9NSUNfT1IiLCJBVE9NSUNfWE9SIiwiYXRvbWljTm9kZSIsImF0b21pY0Z1bmMiLCJ1bmlmb3Jtc0xpYiIsImdldExpZ2h0RGF0YSIsInVuaWZvcm1zIiwibGlnaHRTaGFkb3dNYXRyaXgiLCJzaGFkb3dNYXRyaXgiLCJjYXN0U2hhZG93Iiwic2hhZG93IiwidXBkYXRlTWF0cmljZXMiLCJsaWdodFByb2plY3Rpb25VViIsInNwb3RMaWdodENvb3JkIiwibGlnaHRUYXJnZXRQb3NpdGlvbiIsInRhcmdldFBvc2l0aW9uIiwibGlnaHRWaWV3UG9zaXRpb24iLCJsaWdodFRhcmdldERpcmVjdGlvbiIsImdldExpZ2h0Tm9kZUJ5SWQiLCJsaWdodE5vZGVzIiwiaXNBbmFseXRpY0xpZ2h0Tm9kZSIsIl9saWdodHNOb2RlUmVmIiwiTGlnaHRzTm9kZSIsInRvdGFsRGlmZnVzZU5vZGUiLCJ0b3RhbFNwZWN1bGFyTm9kZSIsIl9saWdodHMiLCJfbGlnaHROb2RlcyIsIl9saWdodE5vZGVzSGFzaCIsImxpZ2h0SURzIiwic2V0dXBMaWdodHNOb2RlIiwicHJldmlvdXNMaWdodE5vZGVzIiwic29ydExpZ2h0cyIsIm5vZGVMaWJyYXJ5IiwibGlnaHROb2RlQ2xhc3MiLCJnZXRMaWdodE5vZGVDbGFzcyIsInNldHVwRGlyZWN0TGlnaHQiLCJsaWdodERhdGEiLCJzZXR1cERpcmVjdFJlY3RBcmVhTGlnaHQiLCJjdXJyZW50TGlnaHRzTm9kZSIsInRvdGFsRGlmZnVzZSIsIlNoYWRvd0Jhc2VOb2RlIiwiaXNTaGFkb3dCYXNlTm9kZSIsInNldHVwU2hhZG93UG9zaXRpb24iLCJzYXZlUmVuZGVyZXJTdGF0ZSIsInJlbmRlck9iamVjdEZ1bmN0aW9uIiwiY2xlYXJBbHBoYSIsImdldENsZWFyQWxwaGEiLCJnZXRTY2lzc29yVGVzdCIsInJlc2V0UmVuZGVyZXJTdGF0ZSIsInNldENsZWFyQ29sb3IiLCJyZXN0b3JlUmVuZGVyZXJTdGF0ZSIsInNldFNjaXNzb3JUZXN0Iiwic2F2ZVNjZW5lU3RhdGUiLCJiYWNrZ3JvdW5kTm9kZSIsIm92ZXJyaWRlTWF0ZXJpYWwiLCJyZXNldFNjZW5lU3RhdGUiLCJyZXN0b3JlU2NlbmVTdGF0ZSIsInJlc2V0UmVuZGVyZXJBbmRTY2VuZVN0YXRlIiwicmVzdG9yZVJlbmRlcmVyQW5kU2NlbmVTdGF0ZSIsInNoYWRvd01hdGVyaWFsTGliIiwibGluZWFyRGlzdGFuY2UiLCJkaXN0IiwiZ2V0U2hhZG93TWF0ZXJpYWwiLCJpc1BvaW50TGlnaHQiLCJuZWFyRGlzdGFuY2UiLCJmYXJEaXN0YW5jZSIsInJlZmVyZW5jZVBvc2l0aW9uIiwibGluZWFyU2hhZG93RGlzdGFuY2UiLCJCYXNpY1NoYWRvd0ZpbHRlciIsInNoYWRvd0Nvb3JkIiwiUENGU2hhZG93RmlsdGVyIiwiZGVwdGhDb21wYXJlIiwibWFwU2l6ZSIsImR4MCIsImR5MCIsImR4MSIsImR5MSIsImR4MiIsImR5MiIsImR4MyIsImR5MyIsIlBDRlNvZnRTaGFkb3dGaWx0ZXIiLCJkeCIsImR5IiwiVlNNU2hhZG93RmlsdGVyIiwib2NjbHVzaW9uIiwiZGlzdHJpYnV0aW9uIiwiaGFyZFNoYWRvdyIsInZhcmlhbmNlIiwic29mdG5lc3NQcm9iYWJpbGl0eSIsIlZTTVBhc3NWZXJ0aWNhbCIsInNoYWRvd1Bhc3MiLCJtZWFuIiwic3F1YXJlZE1lYW4iLCJ1dlN0cmlkZSIsInV2U3RhcnQiLCJ1dk9mZnNldCIsInN0ZF9kZXYiLCJWU01QYXNzSG9yaXpvbnRhbCIsIl9zaGFkb3dGaWx0ZXJMaWIiLCJfcmVuZGVyZXJTdGF0ZSIsIlNoYWRvd05vZGUiLCJzaGFkb3dNYXAiLCJ2c21TaGFkb3dNYXBWZXJ0aWNhbCIsInZzbVNoYWRvd01hcEhvcml6b250YWwiLCJ2c21NYXRlcmlhbFZlcnRpY2FsIiwidnNtTWF0ZXJpYWxIb3Jpem9udGFsIiwiX25vZGUiLCJfY2FtZXJhRnJhbWVJZCIsImlzU2hhZG93Tm9kZSIsInNldHVwU2hhZG93RmlsdGVyIiwiZmlsdGVyRm4iLCJmcnVzdHVtVGVzdCIsInNldHVwU2hhZG93Q29vcmQiLCJzaGFkb3dQb3NpdGlvbiIsImNvb3JkWiIsImlzT3J0aG9ncmFwaGljQ2FtZXJhIiwiY2FtZXJhTmVhckxvY2FsIiwiY2FtZXJhRmFyTG9jYWwiLCJnZXRTaGFkb3dGaWx0ZXJGbiIsInNldHVwU2hhZG93Iiwic2hhZG93TWFwVHlwZSIsImNvbXBhcmVGdW5jdGlvbiIsIkxlc3NDb21wYXJlIiwiY3JlYXRlUmVuZGVyVGFyZ2V0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsIlZTTVNoYWRvd01hcCIsIlJHRm9ybWF0Iiwic2hhZG93UGFzc1ZlcnRpY2FsIiwic2hhZG93UGFzc0hvcml6b250YWwiLCJzaGFkb3dJbnRlbnNpdHkiLCJub3JtYWxCaWFzIiwiZmlsdGVyTm9kZSIsInNoYWRvd0RlcHRoVGV4dHVyZSIsInNoYWRvd1RleHR1cmUiLCJzaGFkb3dDb2xvciIsInNoYWRvd091dHB1dCIsInJlbmRlclNoYWRvdyIsInVwZGF0ZVNoYWRvdyIsInNoYWRvd1R5cGUiLCJkZXB0aFZlcnNpb24iLCJfZGVwdGhWZXJzaW9uQ2FjaGVkIiwib25CZWZvcmVTaGFkb3ciLCJvbkFmdGVyU2hhZG93IiwidnNtUGFzcyIsIl9jbGVhckNvbG9yJDEiLCJjdWJlVG9VViIsInRleGVsU2l6ZVkiLCJhYnNWIiwic2NhbGVUb0N1YmUiLCJwbGFuYXIiLCJhbG1vc3RPbmUiLCJzaWduWCIsInNpZ25ZIiwiQmFzaWNQb2ludFNoYWRvd0ZpbHRlciIsImJkM0QiLCJkcCIsIlBvaW50U2hhZG93RmlsdGVyIiwieHl5IiwieXl5IiwieHl4IiwieXl4IiwieHh5IiwieXh5IiwieHh4IiwieXh4IiwicG9pbnRTaGFkb3dGaWx0ZXIiLCJsaWdodFRvUG9zaXRpb24iLCJsaWdodFRvUG9zaXRpb25MZW5ndGgiLCJfdmlld3BvcnQiLCJfdmlld3BvcnRTaXplIiwiX3NoYWRvd01hcFNpemUiLCJQb2ludFNoYWRvd05vZGUiLCJCYXNpY1NoYWRvd01hcCIsInNoYWRvd0ZyYW1lRXh0ZW50cyIsImdldEZyYW1lRXh0ZW50cyIsIm11bHRpcGx5IiwicHJldmlvdXNBdXRvQ2xlYXIiLCJwcmV2aW91c0NsZWFyQ29sb3IiLCJwcmV2aW91c0NsZWFyQWxwaGEiLCJ2aWV3cG9ydENvdW50IiwiZ2V0Vmlld3BvcnRDb3VudCIsInZwIiwicG9pbnRTaGFkb3ciLCJBbmFseXRpY0xpZ2h0Tm9kZSIsImJhc2VDb2xvck5vZGUiLCJzaGFkb3dDb2xvck5vZGUiLCJnZXRMaWdodFZlY3RvciIsInNldHVwRGlyZWN0Iiwic2V0dXBEaXJlY3RSZWN0QXJlYSIsInNldHVwU2hhZG93Tm9kZSIsImN1c3RvbVNoYWRvd05vZGUiLCJkaXJlY3RMaWdodERhdGEiLCJkaXJlY3RSZWN0QXJlYUxpZ2h0RGF0YSIsImludGVuc2l0eSIsImdldERpc3RhbmNlQXR0ZW51YXRpb24iLCJsaWdodERpc3RhbmNlIiwiY3V0b2ZmRGlzdGFuY2UiLCJkZWNheUV4cG9uZW50IiwiZGlzdGFuY2VGYWxsb2ZmIiwiZGlyZWN0UG9pbnRMaWdodCIsImxpZ2h0VmVjdG9yIiwiYXR0ZW51YXRpb24iLCJQb2ludExpZ2h0Tm9kZSIsImN1dG9mZkRpc3RhbmNlTm9kZSIsImRlY2F5RXhwb25lbnROb2RlIiwiZGVjYXkiLCJjaGVja2VyIiwic2hhcGVDaXJjbGUiLCJteF9zZWxlY3QiLCJiX2ltbXV0YWJsZSIsInRfaW1tdXRhYmxlIiwiZl9pbW11dGFibGUiLCJteF9uZWdhdGVfaWYiLCJ2YWxfaW1tdXRhYmxlIiwibXhfZmxvb3IiLCJteF9mbG9vcmZyYWMiLCJteF9iaWxlcnAiLCJ2MF9pbW11dGFibGUiLCJ2MV9pbW11dGFibGUiLCJ2Ml9pbW11dGFibGUiLCJ2M19pbW11dGFibGUiLCJzX2ltbXV0YWJsZSIsInMiLCJ2MyIsInYwIiwiczEiLCJteF90cmlsZXJwIiwidjRfaW1tdXRhYmxlIiwidjVfaW1tdXRhYmxlIiwidjZfaW1tdXRhYmxlIiwidjdfaW1tdXRhYmxlIiwicl9pbW11dGFibGUiLCJ2NyIsInY2IiwidjUiLCJ2NCIsIm14X2dyYWRpZW50X2Zsb2F0XzAiLCJoYXNoX2ltbXV0YWJsZSIsInlfaW1tdXRhYmxlIiwiaCIsIm14X2dyYWRpZW50X2Zsb2F0XzEiLCJ6X2ltbXV0YWJsZSIsIm14X2dyYWRpZW50X2Zsb2F0IiwibXhfZ3JhZGllbnRfdmVjM18wIiwibXhfZ3JhZGllbnRfdmVjM18xIiwibXhfZ3JhZGllbnRfdmVjMyIsIm14X2dyYWRpZW50X3NjYWxlMmRfMCIsInZfaW1tdXRhYmxlIiwibXhfZ3JhZGllbnRfc2NhbGUzZF8wIiwibXhfZ3JhZGllbnRfc2NhbGUyZCIsIm14X2dyYWRpZW50X3NjYWxlM2QiLCJteF9yb3RsMzIiLCJrX2ltbXV0YWJsZSIsIm14X2JqbWl4IiwiYml0WG9yQXNzaWduIiwibXhfYmpmaW5hbCIsImFfaW1tdXRhYmxlIiwiY19pbW11dGFibGUiLCJteF9iaXRzX3RvXzAxIiwiYml0c19pbW11dGFibGUiLCJiaXRzIiwibXhfZmFkZSIsIm14X2hhc2hfaW50IiwieHhfaW1tdXRhYmxlIiwieHgiLCJ5eV9pbW11dGFibGUiLCJ5eSIsIm14X2hhc2hfdmVjMyIsIm14X3Blcmxpbl9ub2lzZV9mbG9hdCIsInBfaW1tdXRhYmxlIiwiWCIsIlkiLCJmeCIsImZ5IiwiWiIsImZ6IiwibXhfcGVybGluX25vaXNlX3ZlYzMiLCJteF9jZWxsX25vaXNlX2Zsb2F0JDEiLCJpeCIsIml5IiwiaXoiLCJpdyIsIm14X2NlbGxfbm9pc2VfdmVjMyIsIm14X2ZyYWN0YWxfbm9pc2VfZmxvYXQkMSIsIm9jdGF2ZXNfaW1tdXRhYmxlIiwibGFjdW5hcml0eV9pbW11dGFibGUiLCJkaW1pbmlzaF9pbW11dGFibGUiLCJkaW1pbmlzaCIsImxhY3VuYXJpdHkiLCJvY3RhdmVzIiwiYW1wbGl0dWRlIiwibXhfZnJhY3RhbF9ub2lzZV92ZWMzJDEiLCJteF9mcmFjdGFsX25vaXNlX3ZlYzIkMSIsIm14X2ZyYWN0YWxfbm9pc2VfdmVjNCQxIiwibXhfd29ybGV5X2Rpc3RhbmNlIiwieG9mZl9pbW11dGFibGUiLCJ5b2ZmX2ltbXV0YWJsZSIsImppdHRlcl9pbW11dGFibGUiLCJtZXRyaWNfaW1tdXRhYmxlIiwibWV0cmljIiwiaml0dGVyIiwieW9mZiIsInhvZmYiLCJ0bXAiLCJvZmYiLCJjZWxscG9zIiwiZGlmZiIsInpvZmZfaW1tdXRhYmxlIiwiem9mZiIsIm14X3dvcmxleV9ub2lzZV9mbG9hdF8wIiwibG9jYWxwb3MiLCJzcWRpc3QiLCJteF93b3JsZXlfbm9pc2VfdmVjMl8wIiwibXhfd29ybGV5X25vaXNlX3ZlYzNfMCIsIm14X3dvcmxleV9ub2lzZV9mbG9hdCQxIiwibXhfd29ybGV5X25vaXNlX3ZlYzIkMSIsIm14X3dvcmxleV9ub2lzZV92ZWMzJDEiLCJteF9oc3Z0b3JnYiIsImhzdiIsImhpIiwicSIsIm14X3JnYnRvaHN2IiwibWluY29tcCIsIm1heGNvbXAiLCJteF9zcmdiX3RleHR1cmVfdG9fbGluX3JlYzcwOSIsImNvbG9yX2ltbXV0YWJsZSIsImlzQWJvdmUiLCJsaW5TZWciLCJwb3dTZWciLCJteF9hYXN0ZXAiLCJhZndpZHRoIiwiX3JhbXAiLCJfc3BsaXQiLCJnZXRQYXJhbGxheENvcnJlY3ROb3JtYWwiLCJjdWJlUG9zIiwibkRpciIsInJibWF4IiwicmJtaW4iLCJyYm1pbm1heCIsImNvcnJlY3Rpb24iLCJnZXRTaElycmFkaWFuY2VBdCIsInNoQ29lZmZpY2llbnRzIiwidHlwZWRBcnJheSIsInNvdXJjZUNvbG9yU3BhY2UiLCJ0YXJnZXRDb2xvclNwYWNlIiwic3JjIiwiZXhwb25lbnQiLCJFIiwidGV4Y29vcmQiLCJhbW91bnQiLCJwaXZvdCIsInZhbHVlbCIsInZhbHVlciIsInZhbHVldCIsInZhbHVlYiIsImluMSIsImluMiIsInV2X3NjYWxlIiwidXZfb2Zmc2V0IiwidXZfZ2VvIiwicGFzcyIsImFUZXh0dXJlIiwiY2hhbm5lbHMiLCJzdHJ1Y3RMYXlvdXQiLCJzdHJ1Y3QiLCJuYW1lcyIsInRpbWVTY2FsZSIsIl9jbGVhckNvbG9yIiwiQmFja2dyb3VuZCIsInJlbmRlckxpc3QiLCJnZXRCYWNrZ3JvdW5kTm9kZSIsImZvcmNlQ2xlYXIiLCJnZXRSR0IiLCJzY2VuZURhdGEiLCJiYWNrZ3JvdW5kTWVzaCIsImJhY2tncm91bmRNZXNoTm9kZSIsInZpZXdQcm9qIiwic2V0WiIsIm5vZGVNYXRlcmlhbCIsIlNwaGVyZUdlb21ldHJ5IiwiZnJ1c3R1bUN1bGxlZCIsIm9uQmVmb3JlUmVuZGVyIiwiY29weVBvc2l0aW9uIiwiYmFja2dyb3VuZENhY2hlS2V5IiwiZW52aXJvbm1lbnRCbGVuZE1vZGUiLCJnZXRFbnZpcm9ubWVudEJsZW5kTW9kZSIsImRlcHRoQ2xlYXJWYWx1ZSIsIl9jbGVhckRlcHRoIiwic3RlbmNpbENsZWFyVmFsdWUiLCJfY2xlYXJTdGVuY2lsIiwiYXV0b0NsZWFyQ29sb3IiLCJhdXRvQ2xlYXJEZXB0aCIsImF1dG9DbGVhclN0ZW5jaWwiLCJfaWQkNiIsIkJpbmRHcm91cCIsImJpbmRpbmdzUmVmZXJlbmNlIiwiTm9kZUJ1aWxkZXJTdGF0ZSIsInVwZGF0ZU5vZGVzIiwidXBkYXRlQmVmb3JlTm9kZXMiLCJ1cGRhdGVBZnRlck5vZGVzIiwiaW5zdGFuY2VHcm91cCIsImJpbmRpbmdzR3JvdXAiLCJpbnN0YW5jZUJpbmRpbmciLCJOb2RlQXR0cmlidXRlIiwiaXNOb2RlQXR0cmlidXRlIiwiTm9kZVVuaWZvcm0iLCJpc05vZGVVbmlmb3JtIiwiTm9kZVZhciIsImlzTm9kZVZhciIsIk5vZGVWYXJ5aW5nIiwiaXNOb2RlVmFyeWluZyIsIk5vZGVDb2RlIiwiX2lkJDUiLCJOb2RlQ2FjaGUiLCJub2Rlc0RhdGEiLCJTdHJ1Y3RUeXBlIiwiVW5pZm9ybSIsImJvdW5kYXJ5Iiwic2V0VmFsdWUiLCJOdW1iZXJVbmlmb3JtIiwiaXNOdW1iZXJVbmlmb3JtIiwiVmVjdG9yMlVuaWZvcm0iLCJpc1ZlY3RvcjJVbmlmb3JtIiwiVmVjdG9yM1VuaWZvcm0iLCJpc1ZlY3RvcjNVbmlmb3JtIiwiVmVjdG9yNFVuaWZvcm0iLCJpc1ZlY3RvcjRVbmlmb3JtIiwiQ29sb3JVbmlmb3JtIiwiaXNDb2xvclVuaWZvcm0iLCJNYXRyaXgyVW5pZm9ybSIsImlzTWF0cml4MlVuaWZvcm0iLCJNYXRyaXgzVW5pZm9ybSIsImlzTWF0cml4M1VuaWZvcm0iLCJNYXRyaXg0VW5pZm9ybSIsImlzTWF0cml4NFVuaWZvcm0iLCJOdW1iZXJOb2RlVW5pZm9ybSIsIlZlY3RvcjJOb2RlVW5pZm9ybSIsIlZlY3RvcjNOb2RlVW5pZm9ybSIsIlZlY3RvcjROb2RlVW5pZm9ybSIsIkNvbG9yTm9kZVVuaWZvcm0iLCJNYXRyaXgyTm9kZVVuaWZvcm0iLCJNYXRyaXgzTm9kZVVuaWZvcm0iLCJNYXRyaXg0Tm9kZVVuaWZvcm0iLCJ0eXBlRnJvbUFycmF5IiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiTm9kZUJ1aWxkZXIiLCJzZXF1ZW50aWFsTm9kZXMiLCJoYXNoTm9kZXMiLCJmbG93Tm9kZXMiLCJmbG93Q29kZSIsInN0cnVjdHMiLCJiaW5kaW5nc0luZGV4ZXMiLCJiaW5kR3JvdXBzIiwiYnVmZmVyQXR0cmlidXRlcyIsInZhcnlpbmdzIiwiY29kZXMiLCJ2YXJzIiwiZmxvdyIsImNoYWluaW5nIiwic3RhY2tzIiwiY3VycmVudEZ1bmN0aW9uTm9kZSIsImZsb3dzRGF0YSIsImdldEJpbmRHcm91cHNDYWNoZSIsImJpbmRHcm91cHNDYWNoZSIsImNyZWF0ZUN1YmVSZW5kZXJUYXJnZXQiLCJfZ2V0QmluZEdyb3VwIiwiZ3JvdXBOYW1lIiwiYmluZGluZ3NBcnJheSIsInNoYXJlZEdyb3VwIiwiZ2V0QmluZEdyb3VwQXJyYXkiLCJiaW5kaW5nc0dyb3VwcyIsImdyb3VwcyIsInNvcnRCaW5kaW5nR3JvdXBzIiwiYnVpbGRVcGRhdGVOb2RlcyIsImN1cnJlbnROb2RlIiwiaXNGaWx0ZXJlZFRleHR1cmUiLCJMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciIsInBvcCIsImdlbmVyYXRlVGV4dHVyZUxvZCIsImdlbmVyYXRlQXJyYXlEZWNsYXJhdGlvbiIsInNuaXBwZXRzIiwiZ2V0Q29tcG9uZW50VHlwZUZyb21UZXh0dXJlIiwiaXNEYXRhVGV4dHVyZSIsImV4ZWMiLCJiYXNlVHlwZSIsInByZWZpeCIsImdldFR5cGVGcm9tQXJyYXkiLCJkYXRhQXR0cmlidXRlIiwiRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSIsInZlY1R5cGUiLCJ2ZWNOdW0iLCJuZXdDb21wb25lbnRUeXBlIiwibGFzdFN0YWNrIiwidmFyaWFibGUiLCJpZE5TIiwibm9kZVZhcnlpbmciLCJmbG93Q29kZUJsb2NrIiwibmVlZHNGbG93Q29kZSIsIm5vZGVCbG9ja0hpZXJhcmNoeSIsImFkZExpbmVGbG93Q29kZUJsb2NrIiwiY29kZUJsb2NrIiwiZ2V0Rmxvd0RhdGEiLCJmbG93Tm9kZSIsImZsb3dEYXRhIiwiZmxvd0NoaWxkTm9kZSIsInByZXZpb3VzIiwiYnVpbGRGdW5jdGlvbkNvZGUiLCJmbG93U2hhZGVyTm9kZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJmbG93U3RhZ2VzTm9kZSIsInByZXZpb3VzRmxvdyIsInByZXZpb3VzVmFycyIsInByZXZpb3VzQnVpbGRTdGFnZSIsInNldEJ1aWxkU3RhZ2UiLCJnZXRWYXJzIiwicHJldmlvdXNTaGFkZXJTdGFnZSIsInNldFNoYWRlclN0YWdlIiwiZ2V0QXR0cmlidXRlc0FycmF5IiwiY29uY2F0IiwiZ2V0VmFyeWluZ3MiLCJnZXRVbmlmb3JtcyIsImdldENvZGVzIiwiZ2V0U2hhZGVyU3RhZ2UiLCJidWlsZENvZGUiLCJmcm9tTWF0ZXJpYWwiLCJnZXROb2RlVW5pZm9ybSIsImZyb21UeXBlIiwidG9UeXBlIiwiZnJvbVR5cGVMZW5ndGgiLCJ0b1R5cGVMZW5ndGgiLCJnZXRTaWduYXR1cmUiLCJSRVZJU0lPTiIsImNyZWF0ZU5vZGVNYXRlcmlhbCIsIk5vZGVGcmFtZSIsInVwZGF0ZU1hcCIsInVwZGF0ZUJlZm9yZU1hcCIsInVwZGF0ZUFmdGVyTWFwIiwiX2dldE1hcHMiLCJyZWZlcmVuY2VNYXAiLCJub2RlUmVmIiwibWFwcyIsInJlbmRlck1hcCIsImZyYW1lTWFwIiwidXBkYXRlQmVmb3JlTm9kZSIsInVwZGF0ZUFmdGVyTm9kZSIsInVwZGF0ZU5vZGUiLCJsYXN0VGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiTm9kZUZ1bmN0aW9uSW5wdXQiLCJpc0NvbnN0IiwiaXNOb2RlRnVuY3Rpb25JbnB1dCIsIkRpcmVjdGlvbmFsTGlnaHROb2RlIiwiX21hdHJpeDQxIiwiX21hdHJpeDQyIiwiX2x0Y0xpYiIsIlJlY3RBcmVhTGlnaHROb2RlIiwicHJlbXVsdGlwbHkiLCJMVENfRkxPQVRfMSIsIkxUQ19GTE9BVF8yIiwiTFRDX0hBTEZfMSIsIkxUQ19IQUxGXzIiLCJzZXRMVEMiLCJsdGMiLCJTcG90TGlnaHROb2RlIiwiY29uZUNvc05vZGUiLCJwZW51bWJyYUNvc05vZGUiLCJhbmdsZSIsInBlbnVtYnJhIiwiZ2V0U3BvdEF0dGVudWF0aW9uIiwiYW5nbGVDb3NpbmUiLCJhbmdsZUNvcyIsInNwb3RBdHRlbnVhdGlvbiIsImxpZ2h0QXR0ZW51YXRpb24iLCJwcm9qZWN0ZWRUZXh0dXJlIiwiSUVTU3BvdExpZ2h0Tm9kZSIsImllc01hcCIsIkFtYmllbnRMaWdodE5vZGUiLCJIZW1pc3BoZXJlTGlnaHROb2RlIiwibGlnaHRQb3NpdGlvbk5vZGUiLCJsaWdodERpcmVjdGlvbk5vZGUiLCJncm91bmRDb2xvck5vZGUiLCJncm91bmRDb2xvciIsImhlbWlEaWZmdXNlV2VpZ2h0IiwiTGlnaHRQcm9iZU5vZGUiLCJsaWdodFByb2JlIiwic2giLCJjb2VmZmljaWVudHMiLCJOb2RlUGFyc2VyIiwiTm9kZUZ1bmN0aW9uIiwiaXNOb2RlRnVuY3Rpb24iLCJkZWNsYXJhdGlvblJlZ2V4cCQxIiwicHJvcGVydGllc1JlZ2V4cCQxIiwicHJhZ21hTWFpbiIsIkdMU0xOb2RlRnVuY3Rpb24iLCJpbnB1dHNDb2RlIiwiYmxvY2tDb2RlIiwiaGVhZGVyQ29kZSIsInByYWdtYU1haW5JbmRleCIsInRyaW0iLCJtYWluQ29kZSIsImRlY2xhcmF0aW9uIiwibWF0Y2giLCJwcm9wc01hdGNoZXMiLCJuYW1lTWF0Y2giLCJwYXJzZUludCIsImlzTmFOIiwic3Vic3RyaW5nIiwicGFyc2UkMSIsImRlY2xhcmF0aW9uQ29kZSIsIkdMU0xOb2RlUGFyc2VyIiwiX291dHB1dE5vZGVNYXAiLCJfY2hhaW5LZXlzJDIiLCJfY2FjaGVLZXlWYWx1ZXMiLCJOb2RlcyIsIm5vZGVCdWlsZGVyQ2FjaGUiLCJjYWxsSGFzaENhY2hlIiwiZ3JvdXBzRGF0YSIsImNhY2hlTGliIiwibm9kZVVuaWZvcm1zR3JvdXAiLCJ1bmlmb3Jtc0dyb3VwRGF0YSIsImdldEZvclJlbmRlckNhY2hlS2V5Iiwibm9kZUJ1aWxkZXIiLCJjcmVhdGVOb2RlQnVpbGRlciIsImdldEVudmlyb25tZW50Tm9kZSIsImdldEZvZ05vZGUiLCJfY3JlYXRlTm9kZUJ1aWxkZXJTdGF0ZSIsImNvbXB1dGVEYXRhIiwidXBkYXRlRW52aXJvbm1lbnQiLCJ1cGRhdGVCYWNrZ3JvdW5kIiwidXBkYXRlRm9nIiwiY2FjaGVLZXlEYXRhIiwiaXNUb25lTWFwcGluZ1N0YXRlIiwiZ2V0Q2FjaGVOb2RlIiwibm9kZUNhY2hlIiwic2NlbmVGb2ciLCJpc0ZvZ0V4cDIiLCJpc0ZvZyIsImdldE5vZGVGcmFtZSIsImdldE5vZGVGcmFtZUZvclJlbmRlciIsImdldE91dHB1dENhY2hlS2V5IiwiY3VycmVudENvbG9yU3BhY2UiLCJoYXNPdXRwdXRDaGFuZ2UiLCJfcGxhbmUiLCJDbGlwcGluZ0NvbnRleHQiLCJwYXJlbnRDb250ZXh0IiwiY2xpcEludGVyc2VjdGlvbiIsInZpZXdOb3JtYWxNYXRyaXgiLCJjbGlwcGluZ0dyb3VwQ29udGV4dHMiLCJwYXJlbnRWZXJzaW9uIiwicHJvamVjdFBsYW5lcyIsImRlc3RpbmF0aW9uIiwidXBkYXRlR2xvYmFsIiwiY2xpcHBpbmdHcm91cCIsInNyY0NsaXBwaW5nUGxhbmVzIiwiZHN0Q2xpcHBpbmdQbGFuZXMiLCJnZXRHcm91cENvbnRleHQiLCJjbGlwU2hhZG93cyIsIlJlbmRlckJ1bmRsZSIsImJ1bmRsZUdyb3VwIiwiX2NoYWluS2V5cyQxIiwiUmVuZGVyQnVuZGxlcyIsIk5vZGVMaWJyYXJ5IiwibWF0ZXJpYWxOb2RlcyIsInRvbmVNYXBwaW5nTm9kZXMiLCJub2RlTWF0ZXJpYWxDbGFzcyIsImdldE1hdGVyaWFsTm9kZUNsYXNzIiwiYWRkVG9uZU1hcHBpbmciLCJ0b25lTWFwcGluZ05vZGUiLCJhZGRUeXBlIiwibWF0ZXJpYWxUeXBlIiwiYWRkTWF0ZXJpYWwiLCJtYXRlcmlhbE5vZGVDbGFzcyIsIm1hdGVyaWFsQ2xhc3NUeXBlIiwiYWRkTGlnaHQiLCJsaWdodENsYXNzIiwiYWRkQ2xhc3MiLCJub2RlQ2xhc3MiLCJiYXNlQ2xhc3MiLCJfZGVmYXVsdExpZ2h0cyIsIl9jaGFpbktleXMiLCJMaWdodGluZyIsIlhSUmVuZGVyVGFyZ2V0IiwiaGFzRXh0ZXJuYWxUZXh0dXJlcyIsImF1dG9BbGxvY2F0ZURlcHRoQnVmZmVyIiwiX2NhbWVyYUxQb3MiLCJfY2FtZXJhUlBvcyIsIlhSTWFuYWdlciIsImlzUHJlc2VudGluZyIsImNhbWVyYUF1dG9VcGRhdGUiLCJfY2FtZXJhTCIsIl9jYW1lcmFSIiwiX2NhbWVyYXMiLCJfY2FtZXJhWFIiLCJBcnJheUNhbWVyYSIsIl9jdXJyZW50RGVwdGhOZWFyIiwiX2N1cnJlbnREZXB0aEZhciIsIl9jb250cm9sbGVycyIsIl9jb250cm9sbGVySW5wdXRTb3VyY2VzIiwiX3hyUmVuZGVyVGFyZ2V0IiwiX2N1cnJlbnRBbmltYXRpb25Db250ZXh0IiwiX2N1cnJlbnRBbmltYXRpb25Mb29wIiwiX2N1cnJlbnRQaXhlbFJhdGlvIiwiX2N1cnJlbnRTaXplIiwiX29uU2Vzc2lvbkV2ZW50Iiwib25TZXNzaW9uRXZlbnQiLCJfb25TZXNzaW9uRW5kIiwib25TZXNzaW9uRW5kIiwiX29uSW5wdXRTb3VyY2VzQ2hhbmdlIiwib25JbnB1dFNvdXJjZXNDaGFuZ2UiLCJfb25BbmltYXRpb25GcmFtZSIsIm9uQW5pbWF0aW9uRnJhbWUiLCJfcmVmZXJlbmNlU3BhY2UiLCJfcmVmZXJlbmNlU3BhY2VUeXBlIiwiX2N1c3RvbVJlZmVyZW5jZVNwYWNlIiwiX2ZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJfZm92ZWF0aW9uIiwiX3Nlc3Npb24iLCJfZ2xCYXNlTGF5ZXIiLCJfZ2xCaW5kaW5nIiwiX2dsUHJvakxheWVyIiwiX3hyRnJhbWUiLCJfdXNlTGF5ZXJzIiwiWFJXZWJHTEJpbmRpbmciLCJnZXRDb250cm9sbGVyIiwiX2dldENvbnRyb2xsZXIiLCJnZXRUYXJnZXRSYXlTcGFjZSIsImdldENvbnRyb2xsZXJHcmlwIiwiZ2V0R3JpcFNwYWNlIiwiZ2V0SGFuZCIsImdldEhhbmRTcGFjZSIsImdldEZvdmVhdGlvbiIsInNldEZvdmVhdGlvbiIsImZvdmVhdGlvbiIsImZpeGVkRm92ZWF0aW9uIiwiZ2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciIsInNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJnZXRSZWZlcmVuY2VTcGFjZVR5cGUiLCJzZXRSZWZlcmVuY2VTcGFjZVR5cGUiLCJnZXRSZWZlcmVuY2VTcGFjZSIsInNldFJlZmVyZW5jZVNwYWNlIiwic3BhY2UiLCJnZXRGcmFtZSIsImdldFNlc3Npb24iLCJzZXRTZXNzaW9uIiwic2Vzc2lvbiIsIm1ha2VYUkNvbXBhdGlibGUiLCJfYW5pbWF0aW9uIiwiZGVwdGhGb3JtYXQiLCJkZXB0aFR5cGUiLCJnbERlcHRoRm9ybWF0IiwiREVQVEgyNF9TVEVOQ0lMOCIsIkRFUFRIX0NPTVBPTkVOVDI0IiwicHJvamVjdGlvbmxheWVySW5pdCIsImNvbG9yRm9ybWF0IiwiUkdCQTgiLCJzY2FsZUZhY3RvciIsImdsQmluZGluZyIsImdsUHJvakxheWVyIiwiY3JlYXRlUHJvamVjdGlvbkxheWVyIiwidXBkYXRlUmVuZGVyU3RhdGUiLCJ0ZXh0dXJlV2lkdGgiLCJ0ZXh0dXJlSGVpZ2h0IiwicmVzb2x2ZURlcHRoQnVmZmVyIiwiaWdub3JlRGVwdGhWYWx1ZXMiLCJyZXNvbHZlU3RlbmNpbEJ1ZmZlciIsImxheWVySW5pdCIsImFudGlhbGlhcyIsImZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJnbEJhc2VMYXllciIsIlhSV2ViR0xMYXllciIsImJhc2VMYXllciIsImZyYW1lYnVmZmVyV2lkdGgiLCJmcmFtZWJ1ZmZlckhlaWdodCIsInJlcXVlc3RSZWZlcmVuY2VTcGFjZSIsImRlcHRoTmVhciIsImRlcHRoRmFyIiwiY2FtZXJhWFIiLCJjYW1lcmFMIiwiY2FtZXJhUiIsImlwZCIsImRpc3RhbmNlVG8iLCJwcm9qTCIsInByb2pSIiwidG9wRm92IiwiYm90dG9tRm92IiwibGVmdEZvdiIsInJpZ2h0Rm92IiwibGVmdCIsInJpZ2h0Iiwiek9mZnNldCIsInhPZmZzZXQiLCJkZWNvbXBvc2UiLCJxdWF0ZXJuaW9uIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVoiLCJjb21wb3NlIiwibmVhcjIiLCJmYXIyIiwibGVmdDIiLCJyaWdodDIiLCJ0b3AyIiwiYm90dG9tMiIsIm1ha2VQZXJzcGVjdGl2ZSIsInNldFByb2plY3Rpb25Gcm9tVW5pb24iLCJmb3YiLCJSQUQyREVHIiwiem9vbSIsInVwZGF0ZVVzZXJDYW1lcmEiLCJjb250cm9sbGVyIiwiV2ViWFJDb250cm9sbGVyIiwiY29udHJvbGxlckluZGV4IiwiaW5wdXRTb3VyY2UiLCJyZWZlcmVuY2VTcGFjZSIsImRpc2Nvbm5lY3QiLCJzZXRYUlRhcmdldCIsInNldE91dHB1dFJlbmRlclRhcmdldCIsImNvbnRyb2xsZXJzIiwiY29udHJvbGxlcklucHV0U291cmNlcyIsInJlbW92ZWQiLCJhZGRlZCIsImNvbm5lY3QiLCJwb3NlIiwiZ2V0Vmlld2VyUG9zZSIsInZpZXdzIiwiZnJhbWVidWZmZXIiLCJjYW1lcmFYUk5lZWRzVXBkYXRlIiwidmlldyIsImdsU3ViSW1hZ2UiLCJnZXRWaWV3U3ViSW1hZ2UiLCJzZXRYUlJlbmRlclRhcmdldFRleHR1cmVzIiwiY29sb3JUZXh0dXJlIiwiZGVwdGhTdGVuY2lsVGV4dHVyZSIsImVuYWJsZSIsInRyYW5zZm9ybSIsImRldGVjdGVkUGxhbmVzIiwiX3NjZW5lIiwiX2RyYXdpbmdCdWZmZXJTaXplIiwiX3NjcmVlbiIsIl9mcnVzdHVtIiwiRnJ1c3R1bSIsIl9wcm9qU2NyZWVuTWF0cml4IiwiX3ZlY3RvcjQiLCJSZW5kZXJlciIsImlzUmVuZGVyZXIiLCJnZXRGYWxsYmFjayIsImNvbG9yQnVmZmVyVHlwZSIsImRvbUVsZW1lbnQiLCJnZXREb21FbGVtZW50Iiwic29ydE9iamVjdHMiLCJfZ2V0RmFsbGJhY2siLCJfc2Npc3NvciIsIl9zY2lzc29yVGVzdCIsIl9hdHRyaWJ1dGVzIiwiX29iamVjdHMiLCJfcGlwZWxpbmVzIiwiX2J1bmRsZXMiLCJfcmVuZGVyTGlzdHMiLCJfcmVuZGVyQ29udGV4dHMiLCJfYmFja2dyb3VuZCIsIl9xdWFkIiwiX2N1cnJlbnRSZW5kZXJDb250ZXh0IiwiX29wYXF1ZVNvcnQiLCJfdHJhbnNwYXJlbnRTb3J0IiwiX2ZyYW1lQnVmZmVyVGFyZ2V0IiwiYWxwaGFDbGVhciIsIl9yZW5kZXJUYXJnZXQiLCJfYWN0aXZlQ3ViZUZhY2UiLCJfYWN0aXZlTWlwbWFwTGV2ZWwiLCJfb3V0cHV0UmVuZGVyVGFyZ2V0IiwiX3JlbmRlck9iamVjdEZ1bmN0aW9uIiwiX2N1cnJlbnRSZW5kZXJPYmplY3RGdW5jdGlvbiIsIl9jdXJyZW50UmVuZGVyQnVuZGxlIiwiX2hhbmRsZU9iamVjdEZ1bmN0aW9uIiwiX3JlbmRlck9iamVjdERpcmVjdCIsIl9pc0RldmljZUxvc3QiLCJvbkRldmljZUxvc3QiLCJfb25EZXZpY2VMb3N0IiwiX2NvbG9yQnVmZmVyVHlwZSIsIl9pbml0aWFsaXplZCIsIl9pbml0UHJvbWlzZSIsIl9jb21waWxhdGlvblByb21pc2VzIiwiUENGU2hhZG93TWFwIiwiZGVidWciLCJjaGVja1NoYWRlckVycm9ycyIsIm9uU2hhZGVyRXJyb3IiLCJnZXRTaGFkZXJBc3luYyIsImFzeW5jIiwiY29tcGlsZUFzeW5jIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0YXJnZXRTY2VuZSIsInByZXZpb3VzUmVuZGVySWQiLCJwcmV2aW91c1JlbmRlckNvbnRleHQiLCJwcmV2aW91c1JlbmRlck9iamVjdEZ1bmN0aW9uIiwicHJldmlvdXNDb21waWxhdGlvblByb21pc2VzIiwic2NlbmVSZWYiLCJpc1NjZW5lIiwiY29tcGlsYXRpb25Qcm9taXNlcyIsIl9jcmVhdGVPYmplY3RQaXBlbGluZSIsIl9wcm9qZWN0T2JqZWN0IiwidHJhdmVyc2VWaXNpYmxlIiwiaXNMaWdodCIsIm9wYXF1ZU9iamVjdHMiLCJ0cmFuc3BhcmVudE9iamVjdHMiLCJ0cmFuc3BhcmVudERvdWJsZVBhc3NPYmplY3RzIiwiX3JlbmRlck9iamVjdHMiLCJfcmVuZGVyVHJhbnNwYXJlbnRzIiwiX3JlbmRlclNjZW5lIiwid2FpdEZvckdQVSIsImVycm9yTWVzc2FnZSIsImFwaSIsIm1lc3NhZ2UiLCJyZWFzb24iLCJfcmVuZGVyQnVuZGxlIiwicmVuZGVyQnVuZGxlIiwicmVuZGVyQnVuZGxlRGF0YSIsInJlbmRlckNvbnRleHRzIiwicmVuZGVyQnVuZGxlTmVlZHNVcGRhdGUiLCJiZWdpbkJ1bmRsZSIsImZpbmlzaEJ1bmRsZSIsImFkZEJ1bmRsZSIsIl9nZXRGcmFtZUJ1ZmZlclRhcmdldCIsImN1cnJlbnRUb25lTWFwcGluZyIsImZyYW1lQnVmZmVyVGFyZ2V0IiwiaXNQb3N0UHJvY2Vzc2luZ1JlbmRlclRhcmdldCIsInVzZUZyYW1lQnVmZmVyVGFyZ2V0IiwibWF0cml4V29ybGRBdXRvVXBkYXRlIiwibWluRGVwdGgiLCJtYXhEZXB0aCIsInNldEZyb21Qcm9qZWN0aW9uTWF0cml4IiwiYmVnaW5SZW5kZXIiLCJfcmVuZGVyQnVuZGxlcyIsImZpbmlzaFJlbmRlciIsIl9yZW5kZXJPdXRwdXQiLCJvbkFmdGVyUmVuZGVyIiwicXVhZCIsImN1cnJlbnRYUiIsImdldE1heEFuaXNvdHJvcHkiLCJnZXRBcnJheUJ1ZmZlckFzeW5jIiwic2V0RHJhd2luZ0J1ZmZlclNpemUiLCJzZXRWaWV3cG9ydCIsInVwZGF0ZVNpemUiLCJ1cGRhdGVTdHlsZSIsInN0eWxlIiwic2V0T3BhcXVlU29ydCIsInNldFRyYW5zcGFyZW50U29ydCIsImdldFNjaXNzb3IiLCJzZXRTY2lzc29yIiwiYm9vbGVhbiIsInNldENsZWFyQWxwaGEiLCJnZXRDbGVhckRlcHRoIiwic2V0Q2xlYXJEZXB0aCIsImdldENsZWFyU3RlbmNpbCIsInNldENsZWFyU3RlbmNpbCIsImlzT2NjbHVkZWQiLCJjbGVhckFzeW5jIiwiY2xlYXJDb2xvckFzeW5jIiwiY2xlYXJEZXB0aEFzeW5jIiwiY2xlYXJTdGVuY2lsQXN5bmMiLCJpc091dHB1dFRhcmdldCIsInRpbWVzdGFtcFF1ZXJ5UG9vbCIsImZvckVhY2giLCJxdWVyeVBvb2wiLCJjb21wdXRlTm9kZXMiLCJjb21wdXRlQXN5bmMiLCJjb21wdXRlTGlzdCIsImJlZ2luQ29tcHV0ZSIsIm9uSW5pdEZuIiwiY29tcHV0ZUJpbmRpbmdzIiwiY29tcHV0ZVBpcGVsaW5lIiwiZmluaXNoQ29tcHV0ZSIsImhhc0ZlYXR1cmVBc3luYyIsImhhc0ZlYXR1cmUiLCJyZXNvbHZlVGltZXN0YW1wc0FzeW5jIiwiaW5pdFRleHR1cmVBc3luYyIsImluaXRUZXh0dXJlIiwicmVjdGFuZ2xlIiwiY29weVRleHR1cmVUb1RleHR1cmUiLCJzcmNUZXh0dXJlIiwiZHN0VGV4dHVyZSIsInNyY1JlZ2lvbiIsImRzdFBvc2l0aW9uIiwic3JjTGV2ZWwiLCJkc3RMZXZlbCIsInJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYyIsInRleHR1cmVJbmRleCIsImNvcHlUZXh0dXJlVG9CdWZmZXIiLCJpc0dyb3VwIiwiaXNDbGlwcGluZ0dyb3VwIiwiaXNMT0QiLCJpbnRlcnNlY3RzU3ByaXRlIiwiaW50ZXJzZWN0c09iamVjdCIsImdyb3VwTWF0ZXJpYWwiLCJtYXRlcmlhbEluZGV4IiwiaXNCdW5kbGVHcm91cCIsImJhc2VSZW5kZXJMaXN0IiwiY2hpbGRyZW4iLCJkb3VibGVQYXNzTGlzdCIsIkZyb250U2lkZSIsIm92ZXJyaWRlUG9zaXRpb25Ob2RlIiwib3ZlcnJpZGVDb2xvck5vZGUiLCJvdmVycmlkZURlcHRoTm9kZSIsInNoYWRvd1NpZGUiLCJkcmF3IiwiQmluZGluZyIsInZpc2liaWxpdHkiLCJzZXRWaXNpYmlsaXR5IiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJieXRlc1BlckVsZW1lbnQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIl9idWZmZXIiLCJieXRlTGVuZ3RoIiwiZmxvYXRMZW5ndGgiLCJVbmlmb3JtQnVmZmVyIiwiX2lkJDQiLCJOb2RlVW5pZm9ybUJ1ZmZlciIsIlVuaWZvcm1zR3JvdXAiLCJpc1VuaWZvcm1zR3JvdXAiLCJfdmFsdWVzIiwiYWRkVW5pZm9ybSIsInJlbW92ZVVuaWZvcm0iLCJzcGxpY2UiLCJjaHVua09mZnNldCIsInVwZGF0ZUJ5VHlwZSIsInVwZGF0ZU51bWJlciIsInVwZGF0ZVZlY3RvcjIiLCJ1cGRhdGVWZWN0b3IzIiwidXBkYXRlVmVjdG9yNCIsInVwZGF0ZUNvbG9yIiwidXBkYXRlTWF0cml4MyIsInVwZGF0ZU1hdHJpeDQiLCJfZ2V0QnVmZmVyRm9yVHlwZSIsImUiLCJhcnJheXNFcXVhbCIsInNldEFycmF5IiwiX2lkJDMiLCJOb2RlVW5pZm9ybXNHcm91cCIsIl9pZCQyIiwiU2FtcGxlZFRleHR1cmUiLCJpc1ZpZGVvVGV4dHVyZSIsIk5vZGVTYW1wbGVkVGV4dHVyZSIsIk5vZGVTYW1wbGVkQ3ViZVRleHR1cmUiLCJpc1NhbXBsZWRDdWJlVGV4dHVyZSIsIk5vZGVTYW1wbGVkVGV4dHVyZTNEIiwiaXNTYW1wbGVkVGV4dHVyZTNEIiwiZ2xzbE1ldGhvZHMiLCJ0ZXh0dXJlRGltZW5zaW9ucyIsInByZWNpc2lvbkxpYiIsIm1lZGl1bSIsInN1cHBvcnRzJDEiLCJzd2l6emxlQXNzaWduIiwic3RvcmFnZUJ1ZmZlciIsImRlZmF1bHRQcmVjaXNpb25zIiwiR0xTTE5vZGVCdWlsZGVyIiwidW5pZm9ybUdyb3VwcyIsImV4dGVuc2lvbnMiLCJidWlsdGlucyIsInBibyIsIm9yaWdpbmFsQXJyYXkiLCJudW1FbGVtZW50cyIsIlJlZEludGVnZXJGb3JtYXQiLCJSZWRGb3JtYXQiLCJSR0ludGVnZXJGb3JtYXQiLCJSR0JJbnRlZ2VyRm9ybWF0IiwiUkdCRm9ybWF0IiwiUkdCQUludGVnZXJGb3JtYXQiLCJ0eXBlTWFwIiwiVW5zaWduZWRTaG9ydFR5cGUiLCJCeXRlVHlwZSIsIlNob3J0VHlwZSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwibmV3U2l6ZSIsIm5ld0FycmF5IiwicGJvVGV4dHVyZSIsIkRhdGFUZXh0dXJlIiwiaXNQQk9UZXh0dXJlIiwicGJvTm9kZSIsInN0b3JhZ2VBcnJheUVsZW1lbnROb2RlIiwiaW5kZXhTbmlwcGV0IiwiZWxlbWVudE5vZGVEYXRhIiwiYnVmZmVyTm9kZURhdGEiLCJwcm9wZXJ0eVNpemVOYW1lIiwidXZJbmRleFNuaXBwZXQiLCJiaW5kaW5nU25pcHBldHMiLCJ0eXBlUHJlZml4IiwiaXNEYXRhM0RUZXh0dXJlIiwiaXNEYXRhQXJyYXlUZXh0dXJlIiwiaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlIiwiYnVmZmVyQ291bnRTbmlwcGV0IiwiZ3JvdXBTbmlwcGV0cyIsIl9nZXRHTFNMVW5pZm9ybVN0cnVjdCIsImdwdVR5cGUiLCJsb2NhdGlvbiIsImdldFN0cnVjdE1lbWJlcnMiLCJnZXRTdHJ1Y3RzIiwib3V0cHV0U25pcHBldCIsImFjYyIsImN1cnIiLCJlbmFibGVFeHRlbnNpb24iLCJiZWhhdmlvciIsImdldEV4dGVuc2lvbnMiLCJleHQiLCJleHRlbnNpb25OYW1lIiwicGxhbmVDb3VudCIsInZhcnlpbmdOYW1lIiwiYXR0cmlidXRlTm9kZSIsImdldFRyYW5zZm9ybXMiLCJfZ2V0R0xTTFZlcnRleENvZGUiLCJzaGFkZXJEYXRhIiwiX2dldEdMU0xGcmFnbWVudENvZGUiLCJzaGFkZXJzRGF0YSIsIm1haW5Ob2RlIiwiZmxvd1Nsb3REYXRhIiwic2xvdE5hbWUiLCJzdGFnZURhdGEiLCJ1bmlmb3JtR1BVIiwidW5pZm9ybXNTdGFnZSIsInVuaWZvcm1zR3JvdXAiLCJfdmVjdG9yMiIsIl9jb2xvcjQiLCJCYWNrZW5kIiwiZGVzdHJveVByb2dyYW0iLCJ1cGRhdGVWaWV3cG9ydCIsInRyYWNrVGltZXN0YW1wIiwid2Fybk9uY2UiLCJkdXJhdGlvbiIsInJlc29sdmVRdWVyaWVzQXN5bmMiLCJjYW52YXMiLCJjcmVhdGVDYW52YXNFbGVtZW50IiwiZXF1YXRpb25Ub0dMIiwiZmFjdG9yVG9HTCIsIl9pZCQxIiwiRHVhbEF0dHJpYnV0ZURhdGEiLCJkdWFsQnVmZmVyIiwiYnVmZmVycyIsImJ1ZmZlckdQVSIsImFjdGl2ZUJ1ZmZlckluZGV4IiwiYmFzZUlkIiwidHJhbnNmb3JtQnVmZmVyIiwic3dpdGNoQnVmZmVycyIsIldlYkdMQXR0cmlidXRlVXRpbHMiLCJTVEFUSUNfRFJBVyIsIl9jcmVhdGVCdWZmZXIiLCJpc0Zsb2F0MTZCdWZmZXJBdHRyaWJ1dGUiLCJIQUxGX0ZMT0FUIiwiVU5TSUdORURfU0hPUlQiLCJTSE9SVCIsIlVOU0lHTkVEX0lOVCIsIklOVCIsIkJZVEUiLCJVTlNJR05FRF9CWVRFIiwiYnVmZmVyR1BVRHVhbCIsInVwZGF0ZVJhbmdlcyIsImJpbmRCdWZmZXIiLCJidWZmZXJTdWJEYXRhIiwiY2xlYXJVcGRhdGVSYW5nZXMiLCJkZWxldGVCdWZmZXIiLCJDT1BZX1JFQURfQlVGRkVSIiwid3JpdGVCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJDT1BZX1dSSVRFX0JVRkZFUiIsIlNUUkVBTV9SRUFEIiwiY29weUJ1ZmZlclN1YkRhdGEiLCJ1dGlscyIsIl9jbGllbnRXYWl0QXN5bmMiLCJkc3RCdWZmZXIiLCJnZXRCdWZmZXJTdWJEYXRhIiwiV2ViR0xTdGF0ZSIsImN1cnJlbnRGbGlwU2lkZWQiLCJjdXJyZW50Q3VsbEZhY2UiLCJjdXJyZW50UHJvZ3JhbSIsImN1cnJlbnRCbGVuZGluZ0VuYWJsZWQiLCJjdXJyZW50QmxlbmRpbmciLCJjdXJyZW50QmxlbmRTcmMiLCJjdXJyZW50QmxlbmREc3QiLCJjdXJyZW50QmxlbmRTcmNBbHBoYSIsImN1cnJlbnRCbGVuZERzdEFscGhhIiwiY3VycmVudFByZW11bHRpcGxlZEFscGhhIiwiY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IiLCJjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzIiwiY3VycmVudENvbG9yTWFzayIsImN1cnJlbnREZXB0aEZ1bmMiLCJjdXJyZW50RGVwdGhNYXNrIiwiY3VycmVudFN0ZW5jaWxGdW5jIiwiY3VycmVudFN0ZW5jaWxSZWYiLCJjdXJyZW50U3RlbmNpbEZ1bmNNYXNrIiwiY3VycmVudFN0ZW5jaWxGYWlsIiwiY3VycmVudFN0ZW5jaWxaRmFpbCIsImN1cnJlbnRTdGVuY2lsWlBhc3MiLCJjdXJyZW50U3RlbmNpbE1hc2siLCJjdXJyZW50TGluZVdpZHRoIiwiY3VycmVudENsaXBwaW5nUGxhbmVzIiwiY3VycmVudFZBTyIsImN1cnJlbnRJbmRleCIsImN1cnJlbnRCb3VuZEZyYW1lYnVmZmVycyIsImN1cnJlbnREcmF3YnVmZmVycyIsIm1heFRleHR1cmVzIiwiTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJjdXJyZW50VGV4dHVyZVNsb3QiLCJjdXJyZW50Qm91bmRUZXh0dXJlcyIsImN1cnJlbnRCb3VuZEJ1ZmZlckJhc2VzIiwiQWRkRXF1YXRpb24iLCJGVU5DX0FERCIsIlN1YnRyYWN0RXF1YXRpb24iLCJGVU5DX1NVQlRSQUNUIiwiUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24iLCJGVU5DX1JFVkVSU0VfU1VCVFJBQ1QiLCJaZXJvRmFjdG9yIiwiWkVSTyIsIk9uZUZhY3RvciIsIk9ORSIsIlNyY0NvbG9yRmFjdG9yIiwiU1JDX0NPTE9SIiwiU3JjQWxwaGFGYWN0b3IiLCJTUkNfQUxQSEEiLCJTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIiwiU1JDX0FMUEhBX1NBVFVSQVRFIiwiRHN0Q29sb3JGYWN0b3IiLCJEU1RfQ09MT1IiLCJEc3RBbHBoYUZhY3RvciIsIkRTVF9BTFBIQSIsIk9uZU1pbnVzU3JjQ29sb3JGYWN0b3IiLCJPTkVfTUlOVVNfU1JDX0NPTE9SIiwiT25lTWludXNTcmNBbHBoYUZhY3RvciIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJPbmVNaW51c0RzdENvbG9yRmFjdG9yIiwiT05FX01JTlVTX0RTVF9DT0xPUiIsIk9uZU1pbnVzRHN0QWxwaGFGYWN0b3IiLCJPTkVfTUlOVVNfRFNUX0FMUEhBIiwic2Npc3NvclBhcmFtIiwiU0NJU1NPUl9CT1giLCJ2aWV3cG9ydFBhcmFtIiwiY3VycmVudFNjaXNzb3IiLCJjdXJyZW50Vmlld3BvcnQiLCJfdGVtcFZlYzQiLCJkaXNhYmxlIiwic2V0RmxpcFNpZGVkIiwiZmxpcFNpZGVkIiwiZnJvbnRGYWNlIiwiQ1ciLCJDQ1ciLCJzZXRDdWxsRmFjZSIsImN1bGxGYWNlIiwiQ3VsbEZhY2VOb25lIiwiQ1VMTF9GQUNFIiwiQ3VsbEZhY2VCYWNrIiwiQkFDSyIsIkN1bGxGYWNlRnJvbnQiLCJGUk9OVCIsIkZST05UX0FORF9CQUNLIiwic2V0TGluZVdpZHRoIiwic2V0QmxlbmRpbmciLCJibGVuZEVxdWF0aW9uIiwiYmxlbmRTcmMiLCJibGVuZERzdCIsImJsZW5kRXF1YXRpb25BbHBoYSIsImJsZW5kU3JjQWxwaGEiLCJibGVuZERzdEFscGhhIiwicHJlbXVsdGlwbGllZEFscGhhIiwiQkxFTkQiLCJDdXN0b21CbGVuZGluZyIsImN1cnJlbnRCbGVuZEVxdWF0aW9uIiwiY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsImJsZW5kRnVuY1NlcGFyYXRlIiwiQWRkaXRpdmVCbGVuZGluZyIsImJsZW5kRnVuYyIsIlN1YnRyYWN0aXZlQmxlbmRpbmciLCJNdWx0aXBseUJsZW5kaW5nIiwic2V0Q29sb3JNYXNrIiwiY29sb3JNYXNrIiwic2V0RGVwdGhUZXN0IiwiREVQVEhfVEVTVCIsInNldERlcHRoTWFzayIsImRlcHRoTWFzayIsInNldERlcHRoRnVuYyIsImRlcHRoRnVuYyIsIk5ldmVyRGVwdGgiLCJORVZFUiIsIkFsd2F5c0RlcHRoIiwiQUxXQVlTIiwiTGVzc0RlcHRoIiwiTEVTUyIsIkxlc3NFcXVhbERlcHRoIiwiTEVRVUFMIiwiRXF1YWxEZXB0aCIsIkVRVUFMIiwiR3JlYXRlckVxdWFsRGVwdGgiLCJHRVFVQUwiLCJHcmVhdGVyRGVwdGgiLCJHUkVBVEVSIiwiTm90RXF1YWxEZXB0aCIsIk5PVEVRVUFMIiwiU0NJU1NPUl9URVNUIiwic2V0U3RlbmNpbFRlc3QiLCJzdGVuY2lsVGVzdCIsIlNURU5DSUxfVEVTVCIsInNldFN0ZW5jaWxNYXNrIiwic3RlbmNpbE1hc2siLCJzZXRTdGVuY2lsRnVuYyIsInN0ZW5jaWxGdW5jIiwic3RlbmNpbFJlZiIsInNldFN0ZW5jaWxPcCIsInN0ZW5jaWxGYWlsIiwic3RlbmNpbFpGYWlsIiwic3RlbmNpbFpQYXNzIiwic3RlbmNpbE9wIiwic2V0TWF0ZXJpYWwiLCJmcm9udEZhY2VDVyIsImNvbG9yV3JpdGUiLCJzdGVuY2lsV3JpdGUiLCJzdGVuY2lsV3JpdGVNYXNrIiwic3RlbmNpbEZ1bmNNYXNrIiwic2V0UG9seWdvbk9mZnNldCIsInBvbHlnb25PZmZzZXQiLCJwb2x5Z29uT2Zmc2V0RmFjdG9yIiwicG9seWdvbk9mZnNldFVuaXRzIiwiU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFIiwiQ0xJUF9ESVNUQU5DRTBfV0VCR0wiLCJ1bml0cyIsIlBPTFlHT05fT0ZGU0VUX0ZJTEwiLCJ1c2VQcm9ncmFtIiwic2V0VmVydGV4U3RhdGUiLCJ2YW8iLCJpbmRleEJ1ZmZlciIsImJpbmRWZXJ0ZXhBcnJheSIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwicmVzZXRWZXJ0ZXhTdGF0ZSIsImJpbmRGcmFtZWJ1ZmZlciIsIkRSQVdfRlJBTUVCVUZGRVIiLCJGUkFNRUJVRkZFUiIsImRyYXdCdWZmZXJzIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJhY3RpdmVUZXh0dXJlIiwid2ViZ2xTbG90IiwiVEVYVFVSRTAiLCJiaW5kVGV4dHVyZSIsIndlYmdsVHlwZSIsIndlYmdsVGV4dHVyZSIsImJvdW5kVGV4dHVyZSIsImJpbmRCdWZmZXJCYXNlIiwidW5iaW5kVGV4dHVyZSIsIldlYkdMVXRpbHMiLCJleHRlbnNpb24iLCJVbnNpZ25lZFNob3J0NDQ0NFR5cGUiLCJVTlNJR05FRF9TSE9SVF80XzRfNF80IiwiVW5zaWduZWRTaG9ydDU1NTFUeXBlIiwiVU5TSUdORURfU0hPUlRfNV81XzVfMSIsIlVuc2lnbmVkSW50NTk5OVR5cGUiLCJVTlNJR05FRF9JTlRfNV85XzlfOV9SRVYiLCJBbHBoYUZvcm1hdCIsIkFMUEhBIiwiUkdCIiwiUkdCQSIsIkx1bWluYW5jZUZvcm1hdCIsIkxVTUlOQU5DRSIsIkx1bWluYW5jZUFscGhhRm9ybWF0IiwiTFVNSU5BTkNFX0FMUEhBIiwiREVQVEhfQ09NUE9ORU5UIiwiREVQVEhfU1RFTkNJTCIsIlJFRCIsIlJFRF9JTlRFR0VSIiwiUkciLCJSR19JTlRFR0VSIiwiUkdCQV9JTlRFR0VSIiwiUkdCX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUM19Gb3JtYXQiLCJSR0JBX1MzVENfRFhUNV9Gb3JtYXQiLCJDT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUM19FWFQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVCIsIkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCIsIlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HIiwiUkdCX0VUQzFfRm9ybWF0IiwiUkdCX0VUQzJfRm9ybWF0IiwiUkdCQV9FVEMyX0VBQ19Gb3JtYXQiLCJDT01QUkVTU0VEX1NSR0I4X0VUQzIiLCJDT01QUkVTU0VEX1JHQjhfRVRDMiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDIiwiQ09NUFJFU1NFRF9SR0JBOF9FVEMyX0VBQyIsIlJHQkFfQVNUQ180eDRfRm9ybWF0IiwiUkdCQV9BU1RDXzV4NF9Gb3JtYXQiLCJSR0JBX0FTVENfNXg1X0Zvcm1hdCIsIlJHQkFfQVNUQ182eDVfRm9ybWF0IiwiUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQiLCJSR0JBX0FTVENfOHg1X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDZfRm9ybWF0IiwiUkdCQV9BU1RDXzh4OF9Gb3JtYXQiLCJSR0JBX0FTVENfMTB4NV9Gb3JtYXQiLCJSR0JBX0FTVENfMTB4Nl9Gb3JtYXQiLCJSR0JBX0FTVENfMTB4OF9Gb3JtYXQiLCJSR0JBX0FTVENfMTB4MTBfRm9ybWF0IiwiUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCIsIlJHQkFfQVNUQ18xMngxMl9Gb3JtYXQiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ180eDRfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ181eDRfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzV4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ182eDVfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDZfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg1X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ184eDZfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDhfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg1X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4Nl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4OF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg4X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4MTBfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEyeDEyX0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEyX0tIUiIsIlJHQkFfQlBUQ19Gb3JtYXQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfQlBUQ19VTk9STV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfQlBUQ19VTk9STV9FWFQiLCJSRURfUkdUQzFfRm9ybWF0IiwiU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQiLCJSRURfR1JFRU5fUkdUQzJfRm9ybWF0IiwiU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQiLCJDT01QUkVTU0VEX1JFRF9SR1RDMV9FWFQiLCJDT01QUkVTU0VEX1NJR05FRF9SRURfUkdUQzFfRVhUIiwiQ09NUFJFU1NFRF9SRURfR1JFRU5fUkdUQzJfRVhUIiwiQ09NUFJFU1NFRF9TSUdORURfUkVEX0dSRUVOX1JHVEMyX0VYVCIsIlVOU0lHTkVEX0lOVF8yNF84Iiwic3luYyIsImZlbmNlU3luYyIsIlNZTkNfR1BVX0NPTU1BTkRTX0NPTVBMRVRFIiwiZmx1c2giLCJyZXMiLCJjbGllbnRXYWl0U3luYyIsIlNZTkNfRkxVU0hfQ09NTUFORFNfQklUIiwiV0FJVF9GQUlMRUQiLCJkZWxldGVTeW5jIiwiVElNRU9VVF9FWFBJUkVEIiwid3JhcHBpbmdUb0dMIiwiZmlsdGVyVG9HTCIsImNvbXBhcmVUb0dMIiwiV2ViR0xUZXh0dXJlVXRpbHMiLCJkZWZhdWx0VGV4dHVyZXMiLCJSZXBlYXRXcmFwcGluZyIsIlJFUEVBVCIsIkNsYW1wVG9FZGdlV3JhcHBpbmciLCJDTEFNUF9UT19FREdFIiwiTWlycm9yZWRSZXBlYXRXcmFwcGluZyIsIk1JUlJPUkVEX1JFUEVBVCIsIk5lYXJlc3RGaWx0ZXIiLCJORUFSRVNUIiwiTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIiLCJORUFSRVNUX01JUE1BUF9ORUFSRVNUIiwiTkVBUkVTVF9NSVBNQVBfTElORUFSIiwiTElORUFSIiwiTElORUFSX01JUE1BUF9ORUFSRVNUIiwiTElORUFSX01JUE1BUF9MSU5FQVIiLCJOZXZlckNvbXBhcmUiLCJBbHdheXNDb21wYXJlIiwiTGVzc0VxdWFsQ29tcGFyZSIsIkVxdWFsQ29tcGFyZSIsIkdyZWF0ZXJFcXVhbENvbXBhcmUiLCJHcmVhdGVyQ29tcGFyZSIsIk5vdEVxdWFsQ29tcGFyZSIsImdldEdMVGV4dHVyZVR5cGUiLCJnbFRleHR1cmVUeXBlIiwiVEVYVFVSRV9DVUJFX01BUCIsIlRFWFRVUkVfMkRfQVJSQVkiLCJURVhUVVJFXzNEIiwiVEVYVFVSRV8yRCIsImdldEludGVybmFsRm9ybWF0IiwiaW50ZXJuYWxGb3JtYXROYW1lIiwiZ2xGb3JtYXQiLCJnbFR5cGUiLCJmb3JjZUxpbmVhclRyYW5zZmVyIiwiaW50ZXJuYWxGb3JtYXQiLCJSMzJGIiwiUjE2RiIsIlI4IiwiUjE2IiwiUjMyVUkiLCJSOEkiLCJSMTZJIiwiUjMySSIsIlI4VUkiLCJSMTZVSSIsIlJHMzJGIiwiUkcxNkYiLCJSRzgiLCJSRzE2IiwiUkczMlVJIiwiUkc4SSIsIlJHMTZJIiwiUkczMkkiLCJSRzhVSSIsIlJHMTZVSSIsIlJHQjMyRiIsIlJHQjE2RiIsIlJHQjgiLCJSR0IxNiIsIlJHQjMyVUkiLCJSR0I4SSIsIlJHQjE2SSIsIlJHQjMySSIsIlNSR0I4IiwiVU5TSUdORURfU0hPUlRfNV82XzUiLCJSR0I1NjUiLCJSR0I1X0ExIiwiUkdCNCIsIlJHQjlfRTUiLCJSR0JfSU5URUdFUiIsIlJHQjhVSSIsIlJHQjE2VUkiLCJSR0JBMzJGIiwiUkdCQTE2RiIsIlJHQkExNiIsIlJHQkEzMlVJIiwiUkdCQThJIiwiUkdCQTE2SSIsIlJHQkEzMkkiLCJTUkdCOF9BTFBIQTgiLCJSR0JBNCIsIlJHQkE4VUkiLCJSR0JBMTZVSSIsIkRFUFRIX0NPTVBPTkVOVDE2IiwiREVQVEhfQ09NUE9ORU5UMzJGIiwic2V0VGV4dHVyZVBhcmFtZXRlcnMiLCJ0ZXh0dXJlVHlwZSIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX0ZMSVBfWV9XRUJHTCIsIlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCIsInByZW11bHRpcGx5QWxwaGEiLCJVTlBBQ0tfQUxJR05NRU5UIiwidW5wYWNrQWxpZ25tZW50IiwiVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX1dSQVBfUyIsIndyYXBTIiwiVEVYVFVSRV9XUkFQX1QiLCJ3cmFwVCIsIlRFWFRVUkVfV1JBUF9SIiwid3JhcFIiLCJURVhUVVJFX01BR19GSUxURVIiLCJoYXNNaXBtYXBzIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiVEVYVFVSRV9DT01QQVJFX01PREUiLCJDT01QQVJFX1JFRl9UT19URVhUVVJFIiwiVEVYVFVSRV9DT01QQVJFX0ZVTkMiLCJ0ZXhQYXJhbWV0ZXJmIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJ0ZXh0dXJlR1BVIiwiaXNEZWZhdWx0IiwiZ2xJbnRlcm5hbEZvcm1hdCIsInRleFN0b3JhZ2UzRCIsInRleFN0b3JhZ2UyRCIsImNvcHlCdWZmZXJUb1RleHR1cmUiLCJQSVhFTF9VTlBBQ0tfQlVGRkVSIiwidGV4U3ViSW1hZ2UyRCIsImdldEltYWdlIiwiSFRNTEltYWdlRWxlbWVudCIsIkhUTUxDYW52YXNFbGVtZW50IiwiT2Zmc2NyZWVuQ2FudmFzIiwibWlwbWFwIiwiY29tcHJlc3NlZFRleFN1YkltYWdlM0QiLCJ0ZXhTdWJJbWFnZTNEIiwiY29tcHJlc3NlZFRleFN1YkltYWdlMkQiLCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1giLCJ0ZXhJbWFnZTJEIiwiZ2VuZXJhdGVNaXBtYXAiLCJkZWFsbG9jYXRlUmVuZGVyQnVmZmVycyIsInJlbmRlckNvbnRleHREYXRhIiwicmVuZGVyQnVmZmVyU3RvcmFnZVNldHVwIiwiZnJhbWVidWZmZXJzIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJkZXB0aFJlbmRlcmJ1ZmZlciIsImRlbGV0ZVJlbmRlcmJ1ZmZlciIsInN0ZW5jaWxSZW5kZXJidWZmZXIiLCJtc2FhRnJhbWVCdWZmZXIiLCJtc2FhUmVuZGVyYnVmZmVycyIsImRlbGV0ZVRleHR1cmUiLCJkc3RUZXh0dXJlR1BVIiwibWluWCIsIm1pblkiLCJtaW5aIiwiZHN0WCIsImRzdFkiLCJkc3RaIiwiaXNCb3gzIiwibGV2ZWxTY2FsZSIsImN1cnJlbnRVbnBhY2tSb3dMZW4iLCJVTlBBQ0tfUk9XX0xFTkdUSCIsImN1cnJlbnRVbnBhY2tJbWFnZUhlaWdodCIsIlVOUEFDS19JTUFHRV9IRUlHSFQiLCJjdXJyZW50VW5wYWNrU2tpcFBpeGVscyIsIlVOUEFDS19TS0lQX1BJWEVMUyIsImN1cnJlbnRVbnBhY2tTa2lwUm93cyIsIlVOUEFDS19TS0lQX1JPV1MiLCJjdXJyZW50VW5wYWNrU2tpcEltYWdlcyIsIlVOUEFDS19TS0lQX0lNQUdFUyIsImlzRHN0M0QiLCJzcmNUZXh0dXJlRGF0YSIsImRzdFRleHR1cmVEYXRhIiwic3JjUmVuZGVyQ29udGV4dERhdGEiLCJkc3RSZW5kZXJDb250ZXh0RGF0YSIsInNyY0ZyYW1lYnVmZmVyIiwiZHN0RnJhbWVidWZmZXIiLCJSRUFEX0ZSQU1FQlVGRkVSIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJibGl0RnJhbWVidWZmZXIiLCJyZXF1aXJlRHJhd0ZyYW1lQnVmZmVyIiwic3JjSGVpZ2h0IiwicGFydGlhbCIsImF0dGFjaG1lbnQiLCJERVBUSF9BVFRBQ0hNRU5UIiwiU1RFTkNJTF9CVUZGRVJfQklUIiwicmVuZGVyVGFyZ2V0Q29udGV4dERhdGEiLCJmYiIsImZsaXBwZWRZIiwiY29weVRleFN1YkltYWdlMkQiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiX3NldEZyYW1lYnVmZmVyIiwic2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlIiwicmVuZGVyYnVmZmVyIiwidXNlTXVsdGlzYW1wbGVkUlRUIiwiYmluZFJlbmRlcmJ1ZmZlciIsIlJFTkRFUkJVRkZFUiIsInJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZUVYVCIsInJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsIkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCIsInR5cGVkQXJyYXlUeXBlIiwiX2dldFR5cGVkQXJyYXlUeXBlIiwiX2dldEJ5dGVzUGVyVGV4ZWwiLCJQSVhFTF9QQUNLX0JVRkZFUiIsInJlYWRQaXhlbHMiLCJieXRlc1BlckNvbXBvbmVudCIsIldlYkdMRXh0ZW5zaW9ucyIsImF2YWlsYWJsZUV4dGVuc2lvbnMiLCJnZXRTdXBwb3J0ZWRFeHRlbnNpb25zIiwiZ2V0RXh0ZW5zaW9uIiwiV2ViR0xDYXBhYmlsaXRpZXMiLCJtYXhBbmlzb3Ryb3B5IiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiR0xGZWF0dXJlTmFtZSIsIldFQkdMX211bHRpX2RyYXciLCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YyIsIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMiLCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMSIsIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YyIsIldFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMiLCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YyIsIkVYVF90ZXh0dXJlX2NvbXByZXNzaW9uX2JwdGMiLCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyIiwiV2ViR0xCdWZmZXJSZW5kZXJlciIsIm1vZGUiLCJkcmF3RWxlbWVudHMiLCJkcmF3QXJyYXlzIiwicmVuZGVySW5zdGFuY2VzIiwicHJpbWNvdW50IiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkIiwiZHJhd0FycmF5c0luc3RhbmNlZCIsInJlbmRlck11bHRpRHJhdyIsInN0YXJ0cyIsImNvdW50cyIsImRyYXdDb3VudCIsIm11bHRpRHJhd0VsZW1lbnRzV0VCR0wiLCJtdWx0aURyYXdBcnJheXNXRUJHTCIsImVsZW1lbnRDb3VudCIsInJlbmRlck11bHRpRHJhd0luc3RhbmNlcyIsIm11bHRpRHJhd0VsZW1lbnRzSW5zdGFuY2VkV0VCR0wiLCJtdWx0aURyYXdBcnJheXNJbnN0YW5jZWRXRUJHTCIsIlRpbWVzdGFtcFF1ZXJ5UG9vbCIsIm1heFF1ZXJpZXMiLCJjdXJyZW50UXVlcnlJbmRleCIsInF1ZXJ5T2Zmc2V0cyIsImlzRGlzcG9zZWQiLCJsYXN0VmFsdWUiLCJwZW5kaW5nUmVzb2x2ZSIsImFsbG9jYXRlUXVlcmllc0ZvckNvbnRleHQiLCJXZWJHTFRpbWVzdGFtcFF1ZXJ5UG9vbCIsInF1ZXJpZXMiLCJjcmVhdGVRdWVyeSIsImFjdGl2ZVF1ZXJ5IiwicXVlcnlTdGF0ZXMiLCJ0b1VwcGVyQ2FzZSIsImJhc2VPZmZzZXQiLCJiZWdpblF1ZXJ5IiwicXVlcnkiLCJUSU1FX0VMQVBTRURfRVhUIiwiZW5kUXVlcnkiLCJyZXNvbHZlUHJvbWlzZXMiLCJyZXNvbHZlUXVlcnkiLCJ0b3RhbER1cmF0aW9uIiwidGltZW91dElkIiwiaXNSZXNvbHZlZCIsImZpbmFsaXplUmVzb2x1dGlvbiIsImNsZWFyVGltZW91dCIsImNoZWNrUXVlcnkiLCJHUFVfRElTSk9JTlRfRVhUIiwiZ2V0UXVlcnlQYXJhbWV0ZXIiLCJRVUVSWV9SRVNVTFRfQVZBSUxBQkxFIiwic2V0VGltZW91dCIsImVsYXBzZWQiLCJRVUVSWV9SRVNVTFQiLCJkZWxldGVRdWVyeSIsIldlYkdMQmFja2VuZCIsImF0dHJpYnV0ZVV0aWxzIiwiY2FwYWJpbGl0aWVzIiwidGV4dHVyZVV0aWxzIiwiYnVmZmVyUmVuZGVyZXIiLCJ2YW9DYWNoZSIsInRyYW5zZm9ybUZlZWRiYWNrQ2FjaGUiLCJkaXNqb2ludCIsInBhcmFsbGVsIiwiX2N1cnJlbnRDb250ZXh0IiwiX2tub3duQmluZGluZ3MiLCJXZWFrU2V0IiwiX3N1cHBvcnRzSW52YWxpZGF0ZUZyYW1lYnVmZmVyIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX3hyRnJhbWVidWZmZXIiLCJjb250ZXh0QXR0cmlidXRlcyIsImdsQ29udGV4dCIsIm9uQ29udGV4dExvc3QiLCJwcmV2ZW50RGVmYXVsdCIsImNvbnRleHRMb3NzSW5mbyIsInN0YXR1c01lc3NhZ2UiLCJvcmlnaW5hbEV2ZW50IiwiX29uQ29udGV4dExvc3QiLCJnZXRDb250ZXh0QXR0cmlidXRlcyIsInhyQ29tcGF0aWJsZSIsInhyRnJhbWVidWZmZXIiLCJpbml0VGltZXN0YW1wUXVlcnkiLCJwcmVwYXJlVGltZXN0YW1wQnVmZmVyIiwiZHJhd2luZ0J1ZmZlcldpZHRoIiwiZHJhd2luZ0J1ZmZlckhlaWdodCIsImN1cnJlbnRPY2NsdXNpb25RdWVyaWVzIiwib2NjbHVzaW9uUXVlcmllcyIsImN1cnJlbnRPY2NsdXNpb25RdWVyeU9iamVjdHMiLCJvY2NsdXNpb25RdWVyeU9iamVjdHMiLCJsYXN0T2NjbHVzaW9uT2JqZWN0Iiwib2NjbHVzaW9uUXVlcnlJbmRleCIsIkFOWV9TQU1QTEVTX1BBU1NFRCIsInJlc29sdmVPY2NsdWRlZEFzeW5jIiwiX3VzZU11bHRpc2FtcGxlZFJUVCIsInZpZXdZIiwiaW52YWxpZGF0ZVN1YkZyYW1lYnVmZmVyIiwiaW52YWxpZGF0aW9uQXJyYXkiLCJpbnZhbGlkYXRlRnJhbWVidWZmZXIiLCJvY2NsdWRlZCIsImNoZWNrIiwiY29tcGxldGVkIiwic2V0RnJhbWVCdWZmZXIiLCJjbGVhckJ1ZmZlcmZ2IiwiY2xlYXJCdWZmZXJmaSIsImNsZWFyQnVmZmVyaXYiLCJTVEVOQ0lMIiwiY29tcHV0ZUdyb3VwIiwiUkFTVEVSSVpFUl9ESVNDQVJEIiwicHJvZ3JhbUdQVSIsInRyYW5zZm9ybUJ1ZmZlcnMiLCJ2YW9LZXkiLCJfZ2V0VmFvS2V5IiwidmFvR1BVIiwiX2NyZWF0ZVZhbyIsIl9iaW5kVW5pZm9ybXMiLCJ0cmFuc2Zvcm1GZWVkYmFja0dQVSIsIl9nZXRUcmFuc2Zvcm1GZWVkYmFjayIsImJpbmRUcmFuc2Zvcm1GZWVkYmFjayIsIlRSQU5TRk9STV9GRUVEQkFDSyIsImJlZ2luVHJhbnNmb3JtRmVlZGJhY2siLCJQT0lOVFMiLCJlbmRUcmFuc2Zvcm1GZWVkYmFjayIsImR1YWxBdHRyaWJ1dGVEYXRhIiwiY29udGV4dERhdGEiLCJkZXRlcm1pbmFudCIsInN0YXRpY1ZhbyIsImdlb21ldHJ5SWQiLCJpbmRleEdQVSIsImxhc3RPYmplY3QiLCJMSU5FUyIsIkxJTkVfU1RSSVAiLCJMSU5FX0xPT1AiLCJ3aXJlZnJhbWVMaW5ld2lkdGgiLCJUUklBTkdMRVMiLCJpbmRleERhdGEiLCJfbXVsdGlEcmF3SW5zdGFuY2VzIiwiX211bHRpRHJhd1N0YXJ0cyIsIl9tdWx0aURyYXdDb3VudHMiLCJfbXVsdGlEcmF3Q291bnQiLCJpbmRleGVzR1BVIiwiVU5JRk9STV9CVUZGRVIiLCJjYW1lcmFJbmRleERhdGEiLCJzaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJWRVJURVhfU0hBREVSIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsInNoYWRlckdQVSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiY2hlY2tTdGF0dXMiLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiQ09NUExFVElPTl9TVEFUVVNfS0hSIiwiX2NvbXBsZXRlQ29tcGlsZSIsIl9oYW5kbGVTb3VyY2UiLCJzdHJpbmciLCJlcnJvckxpbmUiLCJsaW5lczIiLCJ0byIsImxpbmUiLCJfZ2V0U2hhZGVyRXJyb3JzIiwic3RhdHVzIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJlcnJvcnMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZXJyb3JNYXRjaGVzIiwiZ2V0U2hhZGVyU291cmNlIiwiX2xvZ1Byb2dyYW1FcnJvciIsImdsRnJhZ21lbnRTaGFkZXIiLCJnbFZlcnRleFNoYWRlciIsInByb2dyYW1Mb2ciLCJnZXRQcm9ncmFtSW5mb0xvZyIsIkxJTktfU1RBVFVTIiwidmVydGV4RXJyb3JzIiwiZnJhZ21lbnRFcnJvcnMiLCJnZXRFcnJvciIsIlZBTElEQVRFX1NUQVRVUyIsInBpcGVsaW5lRGF0YSIsIl9zZXR1cEJpbmRpbmdzIiwidHJhbnNmb3JtVmFyeWluZ05hbWVzIiwidHJhbnNmb3JtQXR0cmlidXRlTm9kZXMiLCJ0cmFuc2Zvcm1GZWVkYmFja1ZhcnlpbmdzIiwiU0VQQVJBVEVfQVRUUklCUyIsImF0dHJpYnV0ZU5vZGVzIiwiQVJSQVlfQlVGRkVSIiwidW5pZm9ybUJ1ZmZlcnMiLCJiaW5kR3JvdXBEYXRhIiwiRFlOQU1JQ19EUkFXIiwia2V5c01hdGNoaW5nIiwiZmlsdGVyIiwiY3VycmVudEZyYW1lQnVmZmVyIiwiaXNDdWJlIiwiaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQiLCJpc1JlbmRlclRhcmdldDNEIiwiaXNSZW5kZXJUYXJnZXRBcnJheSIsIm1zYWFGYiIsIm11bHRpc2FtcGxlZFJUVEV4dCIsImN1YmVGcmFtZWJ1ZmZlcnMiLCJjdWJlRmFjZSIsImxheWVyIiwiZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwieHJEZXB0aFJlbmRlcmJ1ZmZlciIsImRlcHRoU3R5bGUiLCJjcmVhdGVWZXJ0ZXhBcnJheSIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliSVBvaW50ZXIiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwidmVydGV4QXR0cmliRGl2aXNvciIsIm1lc2hQZXJBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwiY3JlYXRlVHJhbnNmb3JtRmVlZGJhY2siLCJUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSIiwiZ2V0VW5pZm9ybUJsb2NrSW5kZXgiLCJ1bmlmb3JtQmxvY2tCaW5kaW5nIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidW5pZm9ybTFpIiwiYmluZGluZ0RhdGEiLCJsb3NlQ29udGV4dCIsIkdQVVByaW1pdGl2ZVRvcG9sb2d5IiwiR1BVQ29tcGFyZUZ1bmN0aW9uIiwiR1BVU3RvcmVPcCIsIkdQVUxvYWRPcCIsIkdQVUZyb250RmFjZSIsIkdQVUN1bGxNb2RlIiwiR1BVSW5kZXhGb3JtYXQiLCJHUFVUZXh0dXJlRm9ybWF0IiwiUjhVbm9ybSIsIlI4U25vcm0iLCJSOFVpbnQiLCJSOFNpbnQiLCJSMTZVaW50IiwiUjE2U2ludCIsIlIxNkZsb2F0IiwiUkc4VW5vcm0iLCJSRzhTbm9ybSIsIlJHOFVpbnQiLCJSRzhTaW50IiwiUjMyVWludCIsIlIzMlNpbnQiLCJSMzJGbG9hdCIsIlJHMTZVaW50IiwiUkcxNlNpbnQiLCJSRzE2RmxvYXQiLCJSR0JBOFVub3JtIiwiUkdCQThVbm9ybVNSR0IiLCJSR0JBOFNub3JtIiwiUkdCQThVaW50IiwiUkdCQThTaW50IiwiQkdSQThVbm9ybSIsIkJHUkE4VW5vcm1TUkdCIiwiUkdCOUU1VUZsb2F0IiwiUkdCMTBBMlVub3JtIiwiUkczMlVpbnQiLCJSRzMyU2ludCIsIlJHMzJGbG9hdCIsIlJHQkExNlVpbnQiLCJSR0JBMTZTaW50IiwiUkdCQTE2RmxvYXQiLCJSR0JBMzJVaW50IiwiUkdCQTMyU2ludCIsIlJHQkEzMkZsb2F0IiwiRGVwdGgxNlVub3JtIiwiRGVwdGgyNFBsdXMiLCJEZXB0aDI0UGx1c1N0ZW5jaWw4IiwiRGVwdGgzMkZsb2F0IiwiRGVwdGgzMkZsb2F0U3RlbmNpbDgiLCJCQzFSR0JBVW5vcm0iLCJCQzFSR0JBVW5vcm1TUkdCIiwiQkMyUkdCQVVub3JtIiwiQkMyUkdCQVVub3JtU1JHQiIsIkJDM1JHQkFVbm9ybSIsIkJDM1JHQkFVbm9ybVNSR0IiLCJCQzRSVW5vcm0iLCJCQzRSU25vcm0iLCJCQzVSR1Vub3JtIiwiQkM1UkdTbm9ybSIsIkJDNkhSR0JVRmxvYXQiLCJCQzZIUkdCRmxvYXQiLCJCQzdSR0JBVW5vcm0iLCJCQzdSR0JBVW5vcm1TUkdCIiwiRVRDMlJHQjhVbm9ybSIsIkVUQzJSR0I4VW5vcm1TUkdCIiwiRVRDMlJHQjhBMVVub3JtIiwiRVRDMlJHQjhBMVVub3JtU1JHQiIsIkVUQzJSR0JBOFVub3JtIiwiRVRDMlJHQkE4VW5vcm1TUkdCIiwiRUFDUjExVW5vcm0iLCJFQUNSMTFTbm9ybSIsIkVBQ1JHMTFVbm9ybSIsIkVBQ1JHMTFTbm9ybSIsIkFTVEM0eDRVbm9ybSIsIkFTVEM0eDRVbm9ybVNSR0IiLCJBU1RDNXg0VW5vcm0iLCJBU1RDNXg0VW5vcm1TUkdCIiwiQVNUQzV4NVVub3JtIiwiQVNUQzV4NVVub3JtU1JHQiIsIkFTVEM2eDVVbm9ybSIsIkFTVEM2eDVVbm9ybVNSR0IiLCJBU1RDNng2VW5vcm0iLCJBU1RDNng2VW5vcm1TUkdCIiwiQVNUQzh4NVVub3JtIiwiQVNUQzh4NVVub3JtU1JHQiIsIkFTVEM4eDZVbm9ybSIsIkFTVEM4eDZVbm9ybVNSR0IiLCJBU1RDOHg4VW5vcm0iLCJBU1RDOHg4VW5vcm1TUkdCIiwiQVNUQzEweDVVbm9ybSIsIkFTVEMxMHg1VW5vcm1TUkdCIiwiQVNUQzEweDZVbm9ybSIsIkFTVEMxMHg2VW5vcm1TUkdCIiwiQVNUQzEweDhVbm9ybSIsIkFTVEMxMHg4VW5vcm1TUkdCIiwiQVNUQzEweDEwVW5vcm0iLCJBU1RDMTB4MTBVbm9ybVNSR0IiLCJBU1RDMTJ4MTBVbm9ybSIsIkFTVEMxMngxMFVub3JtU1JHQiIsIkFTVEMxMngxMlVub3JtIiwiQVNUQzEyeDEyVW5vcm1TUkdCIiwiR1BVQWRkcmVzc01vZGUiLCJHUFVGaWx0ZXJNb2RlIiwiR1BVQmxlbmRGYWN0b3IiLCJHUFVCbGVuZE9wZXJhdGlvbiIsIkdQVUNvbG9yV3JpdGVGbGFncyIsIkdQVVN0ZW5jaWxPcGVyYXRpb24iLCJHUFVCdWZmZXJCaW5kaW5nVHlwZSIsIkdQVVN0b3JhZ2VUZXh0dXJlQWNjZXNzIiwiR1BVVGV4dHVyZVNhbXBsZVR5cGUiLCJHUFVUZXh0dXJlRGltZW5zaW9uIiwiR1BVVGV4dHVyZVZpZXdEaW1lbnNpb24iLCJHUFVUZXh0dXJlQXNwZWN0IiwiR1BVSW5wdXRTdGVwTW9kZSIsIkdQVUZlYXR1cmVOYW1lIiwiRGVwdGhDbGlwQ29udHJvbCIsIlRleHR1cmVDb21wcmVzc2lvbkJDIiwiVGV4dHVyZUNvbXByZXNzaW9uRVRDMiIsIlRleHR1cmVDb21wcmVzc2lvbkFTVEMiLCJUaW1lc3RhbXBRdWVyeSIsIkluZGlyZWN0Rmlyc3RJbnN0YW5jZSIsIlNoYWRlckYxNiIsIlJHMTFCMTBVRmxvYXQiLCJCR1JBOFVOb3JtU3RvcmFnZSIsIkZsb2F0MzJGaWx0ZXJhYmxlIiwiQ2xpcERpc3RhbmNlcyIsIkR1YWxTb3VyY2VCbGVuZGluZyIsIlN1Ymdyb3VwcyIsIlNhbXBsZXIiLCJOb2RlU2FtcGxlciIsIlN0b3JhZ2VCdWZmZXIiLCJfaWQiLCJOb2RlU3RvcmFnZUJ1ZmZlciIsIldlYkdQVVRleHR1cmVQYXNzVXRpbHMiLCJkZXZpY2UiLCJtaXBtYXBTYW1wbGVyIiwiZmxpcFlTYW1wbGVyIiwidHJhbnNmZXJQaXBlbGluZXMiLCJmbGlwWVBpcGVsaW5lcyIsIm1pcG1hcFZlcnRleFNoYWRlck1vZHVsZSIsImNyZWF0ZVNoYWRlck1vZHVsZSIsIm1pcG1hcEZyYWdtZW50U2hhZGVyTW9kdWxlIiwiZmxpcFlGcmFnbWVudFNoYWRlck1vZHVsZSIsImdldFRyYW5zZmVyUGlwZWxpbmUiLCJtb2R1bGUiLCJlbnRyeVBvaW50IiwicHJpbWl0aXZlIiwidG9wb2xvZ3kiLCJzdHJpcEluZGV4Rm9ybWF0IiwiZ2V0RmxpcFlQaXBlbGluZSIsInRleHR1cmVHUFVEZXNjcmlwdG9yIiwiYmFzZUFycmF5TGF5ZXIiLCJ0cmFuc2ZlclBpcGVsaW5lIiwiZmxpcFlQaXBlbGluZSIsInRlbXBUZXh0dXJlIiwiZGVwdGhPckFycmF5TGF5ZXJzIiwiR1BVVGV4dHVyZVVzYWdlIiwiUkVOREVSX0FUVEFDSE1FTlQiLCJURVhUVVJFX0JJTkRJTkciLCJzcmNWaWV3IiwiY3JlYXRlVmlldyIsImJhc2VNaXBMZXZlbCIsImRpbWVuc2lvbiIsImRzdFZpZXciLCJjb21tYW5kRW5jb2RlciIsImNyZWF0ZUNvbW1hbmRFbmNvZGVyIiwic291cmNlVmlldyIsImRlc3RpbmF0aW9uVmlldyIsImJpbmRHcm91cExheW91dCIsImdldEJpbmRHcm91cExheW91dCIsImNyZWF0ZUJpbmRHcm91cCIsInJlc291cmNlIiwicGFzc0VuY29kZXIiLCJiZWdpblJlbmRlclBhc3MiLCJjb2xvckF0dGFjaG1lbnRzIiwibG9hZE9wIiwic3RvcmVPcCIsImNsZWFyVmFsdWUiLCJzZXRQaXBlbGluZSIsInNldEJpbmRHcm91cCIsInF1ZXVlIiwic3VibWl0IiwiZGVzdHJveSIsInVzZUNvdW50IiwicGFzc2VzIiwiX21pcG1hcENyZWF0ZUJ1bmRsZXMiLCJfbWlwbWFwUnVuQnVuZGxlcyIsInBhc3NEZXNjcmlwdG9yIiwiY3JlYXRlUmVuZGVyQnVuZGxlRW5jb2RlciIsImNvbG9yRm9ybWF0cyIsInJlbmRlckJ1bmRsZXMiLCJleGVjdXRlQnVuZGxlcyIsIl9jb21wYXJlVG9XZWJHUFUiLCJfZmxpcE1hcCIsIldlYkdQVVRleHR1cmVVdGlscyIsIl9wYXNzVXRpbHMiLCJkZWZhdWx0Q3ViZVRleHR1cmUiLCJkZWZhdWx0VmlkZW9GcmFtZSIsImNvbG9yQnVmZmVyIiwic2FtcGxlckRlc2NyaXB0b3JHUFUiLCJhZGRyZXNzTW9kZVUiLCJfY29udmVydEFkZHJlc3NNb2RlIiwiYWRkcmVzc01vZGVWIiwiYWRkcmVzc01vZGVXIiwiX2NvbnZlcnRGaWx0ZXJNb2RlIiwibWlwbWFwRmlsdGVyIiwiZ2V0Rm9ybWF0IiwiX2dldERlZmF1bHRDdWJlVGV4dHVyZUdQVSIsIl9nZXREZWZhdWx0VmlkZW9GcmFtZSIsIl9nZXREZWZhdWx0VGV4dHVyZUdQVSIsImdldEN1cnJlbnRDb2xvckZvcm1hdCIsImdldFByZWZlcnJlZENhbnZhc0Zvcm1hdCIsIl9nZXREaW1lbnNpb24iLCJwcmltYXJ5U2FtcGxlcyIsImlzTVNBQSIsImdldFRleHR1cmVTYW1wbGVEYXRhIiwiQ09QWV9EU1QiLCJDT1BZX1NSQyIsIlNUT1JBR0VfQklORElORyIsInRleHR1cmVEZXNjcmlwdG9yR1BVIiwidmlkZW8iLCJ2aWRlb0ZyYW1lIiwiVmlkZW9GcmFtZSIsImRpc3BsYXlXaWR0aCIsImRpc3BsYXlIZWlnaHQiLCJjbG9zZSIsIm1zYWFUZXh0dXJlRGVzY3JpcHRvckdQVSIsIm1zYWFUZXh0dXJlIiwiX2dlbmVyYXRlTWlwbWFwcyIsImdldENvbG9yQnVmZmVyIiwiZ2V0U2FtcGxlQ291bnQiLCJnZXREZXB0aEJ1ZmZlciIsImRlcHRoVGV4dHVyZUdQVSIsIl9jb3B5QnVmZmVyVG9UZXh0dXJlIiwiX2NvcHlDb21wcmVzc2VkQnVmZmVyVG9UZXh0dXJlIiwiX2NvcHlDdWJlTWFwVG9UZXh0dXJlIiwiX2NvcHlJbWFnZVRvVGV4dHVyZSIsImJ5dGVzUGVyVGV4ZWwiLCJieXRlc1BlclJvdyIsInJlYWRCdWZmZXIiLCJHUFVCdWZmZXJVc2FnZSIsIk1BUF9SRUFEIiwiZW5jb2RlciIsIm9yaWdpbiIsIm1hcEFzeW5jIiwiR1BVTWFwTW9kZSIsIlJFQUQiLCJnZXRNYXBwZWRSYW5nZSIsIl9pc0Vudmlyb25tZW50VGV4dHVyZSIsImNvZGVkV2lkdGgiLCJjb2RlZEhlaWdodCIsImZsaXBJbmRleCIsIm9yaWdpbkRlcHRoIiwiY29weUV4dGVybmFsSW1hZ2VUb1RleHR1cmUiLCJtaXBMZXZlbCIsIl9nZXRQYXNzVXRpbHMiLCJwYXNzVXRpbHMiLCJfZmxpcFkiLCJ3cml0ZVRleHR1cmUiLCJibG9ja0RhdGEiLCJfZ2V0QmxvY2tEYXRhIiwiaXNUZXh0dXJlQXJyYXkiLCJieXRlc1BlckltYWdlIiwicm93c1BlckltYWdlIiwiYWRkcmVzc01vZGUiLCJmaWx0ZXJNb2RlIiwiZm9ybWF0R1BVIiwiZmVhdHVyZXMiLCJkZWNsYXJhdGlvblJlZ2V4cCIsInByb3BlcnRpZXNSZWdleHAiLCJ3Z3NsVHlwZUxpYiQxIiwiZjMyIiwiaTMyIiwidTMyIiwidmVjMmYiLCJ2ZWMyaSIsInZlYzJ1IiwidmVjMmIiLCJ2ZWMzZiIsInZlYzNpIiwidmVjM3UiLCJ2ZWMzYiIsInZlYzRmIiwidmVjNGkiLCJ2ZWM0dSIsInZlYzRiIiwibWF0MngyZiIsIm1hdDN4M2YiLCJtYXQ0eDRmIiwidGV4dHVyZV8xZCIsInRleHR1cmVfMmQiLCJ0ZXh0dXJlXzJkX2FycmF5IiwidGV4dHVyZV9tdWx0aXNhbXBsZWRfMmQiLCJ0ZXh0dXJlX2RlcHRoXzJkIiwidGV4dHVyZV9kZXB0aF9tdWx0aXNhbXBsZWRfMmQiLCJ0ZXh0dXJlXzNkIiwidGV4dHVyZV9jdWJlIiwidGV4dHVyZV9jdWJlX2FycmF5IiwidGV4dHVyZV9zdG9yYWdlXzFkIiwidGV4dHVyZV9zdG9yYWdlXzJkIiwidGV4dHVyZV9zdG9yYWdlXzJkX2FycmF5IiwidGV4dHVyZV9zdG9yYWdlXzNkIiwiV0dTTE5vZGVGdW5jdGlvbiIsInJlc29sdmVkVHlwZSIsInBhcnNlIiwiV0dTTE5vZGVQYXJzZXIiLCJHUFVTaGFkZXJTdGFnZSIsIkNPTVBVVEUiLCJhY2Nlc3NOYW1lcyIsIndyYXBOYW1lcyIsImdwdVNoYWRlclN0YWdlTGliIiwic3VwcG9ydHMiLCJ3Z3NsRm5PcExpYiIsIndnc2xUeXBlTGliIiwid2dzbENvZGVDYWNoZSIsIndnc2xQb2x5ZmlsbCIsInRzbF94b3IiLCJtb2RfZmxvYXQiLCJtb2RfdmVjMiIsIm1vZF92ZWMzIiwibW9kX3ZlYzQiLCJlcXVhbHNfYm9vbCIsImVxdWFsc19idmVjMiIsImVxdWFsc19idmVjMyIsImVxdWFsc19idmVjNCIsInJlcGVhdFdyYXBwaW5nX2Zsb2F0IiwibWlycm9yV3JhcHBpbmdfZmxvYXQiLCJjbGFtcFdyYXBwaW5nX2Zsb2F0IiwiYmlxdWFkcmF0aWNUZXh0dXJlIiwid2dzbE1ldGhvZHMiLCJwb3dfZmxvYXQiLCJwb3dfdmVjMiIsInBvd192ZWMzIiwicG93X3ZlYzQiLCJkaWFnbm9zdGljcyIsIldHU0xOb2RlQnVpbGRlciIsImRpcmVjdGl2ZXMiLCJzY29wZWRBcnJheXMiLCJfZ2VuZXJhdGVUZXh0dXJlU2FtcGxlIiwiZ2VuZXJhdGVGaWx0ZXJlZFRleHR1cmUiLCJfZ2VuZXJhdGVWaWRlb1NhbXBsZSIsIl9nZW5lcmF0ZVRleHR1cmVTYW1wbGVMZXZlbCIsImlzVW5maWx0ZXJhYmxlIiwiZ2VuZXJhdGVXcmFwRnVuY3Rpb24iLCJmdW5jdGlvbk5hbWUiLCJjb29yZFR5cGUiLCJhZGRXcmFwU25pcHBldCIsIndyYXAiLCJnZW5lcmF0ZVRleHR1cmVEaW1lbnNpb24iLCJkaW1lbnNpb25zU25pcHBldCIsInRleHR1cmVEaW1lbnNpb25Ob2RlIiwidGV4dHVyZURpbWVuc2lvbnNQYXJhbXMiLCJkaW1lbnNpb25UeXBlIiwiaXNNdWx0aXNhbXBsZWQiLCJhcnJheUxheWVyQ291bnQiLCJpc1RleHR1cmVDdWJlIiwiY3ViZUZhY2VDb3VudCIsIl9pbmNsdWRlIiwid3JhcEZ1bmN0aW9uIiwidGV4dHVyZURpbWVuc2lvbiIsImNvb3JkU25pcHBldCIsInZhbHVlU25pcHBldCIsImlzU2FtcGxlQ29tcGFyZSIsImlzQ3VzdG9tU3RydWN0IiwiZm5PcCIsImdldE5vZGVBY2Nlc3MiLCJnZXRTdG9yYWdlQWNjZXNzIiwiZ2V0QnVpbHRpbiIsImdldFN1Ymdyb3VwU2l6ZSIsImVuYWJsZVN1Ykdyb3VwcyIsImVuYWJsZURpcmVjdGl2ZSIsImdldERpcmVjdGl2ZXMiLCJkaXJlY3RpdmUiLCJlbmFibGVTdWJncm91cHNGMTYiLCJlbmFibGVDbGlwRGlzdGFuY2VzIiwiZW5hYmxlU2hhZGVyRjE2IiwiZW5hYmxlRHVhbFNvdXJjZUJsZW5kaW5nIiwiZ2V0QnVpbHRpbnMiLCJnZXRTY29wZWRBcnJheXMiLCJhdHRyaWJ1dGVzU25pcHBldCIsIl9nZXRXR1NMU3RydWN0IiwiYnVmZmVyU25pcHBldHMiLCJzdHJ1Y3RTbmlwcGV0cyIsInVuaWZvcm1JbmRleGVzIiwibXVsdGlzYW1wbGVkIiwiYnVmZmVyQWNjZXNzTW9kZSIsImJ1ZmZlclNuaXBwZXQiLCJfZ2V0V0dTTFN0cnVjdEJpbmRpbmciLCJpc091dHB1dFN0cnVjdCIsInJldHVyblR5cGUiLCJzdHJ1Y3RTbmlwcGV0IiwiX2dldFdHU0xWZXJ0ZXhDb2RlIiwiX2dldFdHU0xGcmFnbWVudENvZGUiLCJfZ2V0V0dTTENvbXB1dGVDb2RlIiwid2dzbE1ldGhvZCIsIl9nZXRXR1NMTWV0aG9kIiwic3RydWN0TmFtZSIsIldlYkdQVVV0aWxzIiwiZ2V0Q3VycmVudERlcHRoU3RlbmNpbEZvcm1hdCIsImdldFRleHR1cmVGb3JtYXRHUFUiLCJnZXRDdXJyZW50Q29sb3JTcGFjZSIsImdldFByaW1pdGl2ZVRvcG9sb2d5IiwiZ2V0U2FtcGxlQ291bnRSZW5kZXJDb250ZXh0IiwiZ3B1IiwidHlwZWRBcnJheXNUb1ZlcnRleEZvcm1hdFByZWZpeCIsInR5cGVkQXR0cmlidXRlVG9WZXJ0ZXhGb3JtYXRQcmVmaXgiLCJ0eXBlQXJyYXlzVG9WZXJ0ZXhGb3JtYXRQcmVmaXhGb3JJdGVtU2l6ZTEiLCJXZWJHUFVBdHRyaWJ1dGVVdGlscyIsIklOREVYIiwic3ViYXJyYXkiLCJfZm9yY2UzdG80Qnl0ZXNBbGlnbm1lbnQiLCJtYXBwZWRBdENyZWF0aW9uIiwidW5tYXAiLCJpc1R5cGVkQXJyYXkiLCJfaXNUeXBlZEFycmF5IiwiYnl0ZU9mZnNldEZhY3RvciIsImRhdGFPZmZzZXQiLCJjcmVhdGVTaGFkZXJWZXJ0ZXhCdWZmZXJzIiwic2xvdCIsInZlcnRleEJ1ZmZlckxheW91dCIsImFycmF5U3RyaWRlIiwic3RlcE1vZGUiLCJfZ2V0VmVydGV4Rm9ybWF0Iiwic2hhZGVyTG9jYXRpb24iLCJyZWFkQnVmZmVyR1BVIiwiY21kRW5jb2RlciIsImNvcHlCdWZmZXJUb0J1ZmZlciIsImdwdUNvbW1hbmRzIiwiQXJyYXlUeXBlIiwiYnl0ZXNQZXJVbml0IiwicGFkZGVkSXRlbVNpemUiLCJEYXRhVmlldyIsIldlYkdQVUJpbmRpbmdVdGlscyIsImJpbmRHcm91cExheW91dENhY2hlIiwiY3JlYXRlQmluZGluZ3NMYXlvdXQiLCJiaW5kaW5nR1BVIiwic2FtcGxlVHlwZSIsInZpZXdEaW1lbnNpb24iLCJjcmVhdGVCaW5kR3JvdXBMYXlvdXQiLCJiaW5kaW5nc0RhdGEiLCJiaW5kR3JvdXBHUFUiLCJiaW5kTGF5b3V0R1BVIiwidmVyc2lvbnMiLCJjcmVhdGVCaW5kR3JvdXBJbmRleCIsIlVOSUZPUk0iLCJsYXlvdXRHUFUiLCJiaW5kaW5nUG9pbnQiLCJlbnRyaWVzR1BVIiwicmVzb3VyY2VHUFUiLCJpbXBvcnRFeHRlcm5hbFRleHR1cmUiLCJhc3BlY3RHUFUiLCJkaW1lbnNpb25WaWV3R1BVIiwiV2ViR1BVUGlwZWxpbmVVdGlscyIsIl9nZXRTYW1wbGVDb3VudCIsImJpbmRHcm91cExheW91dHMiLCJfZ2V0QmxlbmRpbmciLCJzdGVuY2lsRnJvbnQiLCJfZ2V0U3RlbmNpbENvbXBhcmUiLCJmYWlsT3AiLCJfZ2V0U3RlbmNpbE9wZXJhdGlvbiIsImRlcHRoRmFpbE9wIiwicGFzc09wIiwiY29sb3JXcml0ZU1hc2siLCJfZ2V0Q29sb3JXcml0ZU1hc2siLCJ3cml0ZU1hc2siLCJ2ZXJ0ZXhNb2R1bGUiLCJmcmFnbWVudE1vZHVsZSIsInByaW1pdGl2ZVN0YXRlIiwiX2dldFByaW1pdGl2ZVN0YXRlIiwiX2dldERlcHRoQ29tcGFyZSIsImRlcHRoU3RlbmNpbEZvcm1hdCIsInBpcGVsaW5lRGVzY3JpcHRvciIsIm11bHRpc2FtcGxlIiwiYWxwaGFUb0NvdmVyYWdlRW5hYmxlZCIsImNyZWF0ZVBpcGVsaW5lTGF5b3V0IiwiZGVwdGhTdGVuY2lsIiwicmVuZGVyRGVwdGgiLCJyZW5kZXJTdGVuY2lsIiwiZGVwdGhXcml0ZUVuYWJsZWQiLCJzdGVuY2lsQmFjayIsInN0ZW5jaWxSZWFkTWFzayIsImRlcHRoQmlhcyIsImRlcHRoQmlhc1Nsb3BlU2NhbGUiLCJkZXB0aEJpYXNDbGFtcCIsImNyZWF0ZVJlbmRlclBpcGVsaW5lQXN5bmMiLCJ0aGVuIiwiY3JlYXRlQnVuZGxlRW5jb2RlciIsInBpcGVsaW5lR1BVIiwic3JjRmFjdG9yIiwiX2dldEJsZW5kRmFjdG9yIiwiZHN0RmFjdG9yIiwib3BlcmF0aW9uIiwiX2dldEJsZW5kT3BlcmF0aW9uIiwic2V0QmxlbmQiLCJzcmNSR0IiLCJkc3RSR0IiLCJzcmNBbHBoYSIsImRzdEFscGhhIiwiYmxlbmRGYWN0b3IiLCJzdGVuY2lsQ29tcGFyZSIsIk5ldmVyU3RlbmNpbEZ1bmMiLCJBbHdheXNTdGVuY2lsRnVuYyIsIkxlc3NTdGVuY2lsRnVuYyIsIkxlc3NFcXVhbFN0ZW5jaWxGdW5jIiwiRXF1YWxTdGVuY2lsRnVuYyIsIkdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jIiwiR3JlYXRlclN0ZW5jaWxGdW5jIiwiTm90RXF1YWxTdGVuY2lsRnVuYyIsInN0ZW5jaWxPcGVyYXRpb24iLCJLZWVwU3RlbmNpbE9wIiwiWmVyb1N0ZW5jaWxPcCIsIlJlcGxhY2VTdGVuY2lsT3AiLCJJbnZlcnRTdGVuY2lsT3AiLCJJbmNyZW1lbnRTdGVuY2lsT3AiLCJEZWNyZW1lbnRTdGVuY2lsT3AiLCJJbmNyZW1lbnRXcmFwU3RlbmNpbE9wIiwiRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCIsImJsZW5kT3BlcmF0aW9uIiwiTWluRXF1YXRpb24iLCJNYXhFcXVhdGlvbiIsImN1bGxNb2RlIiwiV2ViR1BVVGltZXN0YW1wUXVlcnlQb29sIiwicXVlcnlTZXQiLCJjcmVhdGVRdWVyeVNldCIsImJ1ZmZlclNpemUiLCJyZXNvbHZlQnVmZmVyIiwiUVVFUllfUkVTT0xWRSIsInJlc3VsdEJ1ZmZlciIsIl9yZXNvbHZlUXVlcmllcyIsIm1hcFN0YXRlIiwiY3VycmVudE9mZnNldHMiLCJxdWVyeUNvdW50IiwiYnl0ZXNVc2VkIiwicmVzb2x2ZVF1ZXJ5U2V0IiwiY29tbWFuZEJ1ZmZlciIsInRpbWVzIiwiQmlnVWludDY0QXJyYXkiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiV2ViR1BVQmFja2VuZCIsInJlcXVpcmVkTGltaXRzIiwiZGVmYXVsdFJlbmRlclBhc3NkZXNjcmlwdG9yIiwiYmluZGluZ1V0aWxzIiwicGlwZWxpbmVVdGlscyIsIm9jY2x1ZGVkUmVzb2x2ZUNhY2hlIiwiYWRhcHRlck9wdGlvbnMiLCJwb3dlclByZWZlcmVuY2UiLCJhZGFwdGVyIiwicmVxdWVzdEFkYXB0ZXIiLCJzdXBwb3J0ZWRGZWF0dXJlcyIsImRldmljZURlc2NyaXB0b3IiLCJyZXF1aXJlZEZlYXR1cmVzIiwicmVxdWVzdERldmljZSIsImxvc3QiLCJkZXZpY2VMb3NzSW5mbyIsImFscGhhTW9kZSIsImNvbmZpZ3VyZSIsIl9nZXREZWZhdWx0UmVuZGVyUGFzc0Rlc2NyaXB0b3IiLCJkZXB0aFN0ZW5jaWxBdHRhY2htZW50IiwiY29sb3JBdHRhY2htZW50IiwicmVzb2x2ZVRhcmdldCIsImdldEN1cnJlbnRUZXh0dXJlIiwiX2dldFJlbmRlclBhc3NEZXNjcmlwdG9yIiwiY29sb3JBdHRhY2htZW50c0NvbmZpZyIsImRpbWVuc2lvbnMiLCJoYXNFdmVudExpc3RlbmVyIiwiZGVzY3JpcHRvckJhc2UiLCJ0ZXh0dXJlVmlld3MiLCJzbGljZUluZGV4Iiwidmlld0Rlc2NyaXB0b3IiLCJ0ZXh0dXJlVmlldyIsImRlcHRoU2xpY2UiLCJkZXB0aFRleHR1cmVEYXRhIiwiZGVwdGhTdGVuY2lsVmlldyIsInZpZXdJbmZvIiwib2NjbHVzaW9uUXVlcnlTZXQiLCJjdXJyZW50T2NjbHVzaW9uUXVlcnlTZXQiLCJjdXJyZW50T2NjbHVzaW9uUXVlcnlCdWZmZXIiLCJvY2NsdXNpb25RdWVyeUJ1ZmZlciIsImRlcHRoTG9hZE9wIiwiZGVwdGhTdG9yZU9wIiwic3RlbmNpbExvYWRPcCIsInN0ZW5jaWxTdG9yZU9wIiwiY3VycmVudFBhc3MiLCJjdXJyZW50U2V0cyIsImJpbmRpbmdHcm91cHMiLCJzZXRTY2lzc29yUmVjdCIsImVuZE9jY2x1c2lvblF1ZXJ5IiwicXVlcnlSZXNvbHZlQnVmZmVyIiwicmVzdWx0cyIsIkJpZ0ludCIsInJlbmRlclRhcmdldENvbnRleHQiLCJzdXBwb3J0c0RlcHRoIiwic3VwcG9ydHNTdGVuY2lsIiwiY2xlYXJDb25maWciLCJncm91cEdQVSIsImNtZEVuY29kZXJHUFUiLCJwYXNzRW5jb2RlckdQVSIsImJlZ2luQ29tcHV0ZVBhc3MiLCJtYXhDb21wdXRlV29ya2dyb3Vwc1BlckRpbWVuc2lvbiIsImxpbWl0cyIsImNvbXB1dGVOb2RlRGF0YSIsImRpc3BhdGNoU2l6ZSIsImRpc3BhdGNoV29ya2dyb3VwcyIsIm9uU3VibWl0dGVkV29ya0RvbmUiLCJjdXJyZW50QmluZGluZ0dyb3VwcyIsImluZGV4Rm9ybWF0Iiwic2V0SW5kZXhCdWZmZXIiLCJ2ZXJ0ZXhCdWZmZXIiLCJzZXRWZXJ0ZXhCdWZmZXIiLCJiZWdpbk9jY2x1c2lvblF1ZXJ5Iiwic2V0U3RlbmNpbFJlZmVyZW5jZSIsImRyYXdJbnN0YW5jZXMiLCJkcmF3SW5kZXhlZCIsImluZGV4Q291bnQiLCJmaXJzdEluZGV4IiwiZHJhd0luZGV4ZWRJbmRpcmVjdCIsImRyYXdJbmRpcmVjdCIsImJpbmRHcm91cEluZGV4IiwicHJpbWl0aXZlVG9wb2xvZ3kiLCJtYXRlcmlhbFZlcnNpb24iLCJ0aW1lc3RhbXBXcml0ZXMiLCJiZWdpbm5pbmdPZlBhc3NXcml0ZUluZGV4IiwiZW5kT2ZQYXNzV3JpdGVJbmRleCIsIl9jdXJyZW50UGFzcyIsIl9jdXJyZW50U2V0cyIsImJ1bmRsZUdQVSIsIlNUT1JBR0UiLCJJTkRJUkVDVCIsInNyY1giLCJzcmNZIiwic3JjWiIsInNyY1dpZHRoIiwic3JjRGVwdGgiLCJzb3VyY2VHUFUiLCJkZXN0aW5hdGlvbkdQVSIsIklFU1Nwb3RMaWdodCIsIlNwb3RMaWdodCIsInJlY3Vyc2l2ZSIsIlN0YW5kYXJkTm9kZUxpYnJhcnkiLCJQb2ludExpZ2h0IiwiRGlyZWN0aW9uYWxMaWdodCIsIlJlY3RBcmVhTGlnaHQiLCJBbWJpZW50TGlnaHQiLCJIZW1pc3BoZXJlTGlnaHQiLCJMaWdodFByb2JlIiwiTGluZWFyVG9uZU1hcHBpbmciLCJSZWluaGFyZFRvbmVNYXBwaW5nIiwiQ2luZW9uVG9uZU1hcHBpbmciLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJBZ1hUb25lTWFwcGluZyIsIk5ldXRyYWxUb25lTWFwcGluZyIsIldlYkdQVVJlbmRlcmVyIiwiQmFja2VuZENsYXNzIiwiZm9yY2VXZWJHTCIsImlzV2ViR1BVUmVuZGVyZXIiLCJCdW5kbGVHcm91cCIsIkdyb3VwIiwiUG9zdFByb2Nlc3NpbmciLCJvdXRwdXRDb2xvclRyYW5zZm9ybSIsIlN0b3JhZ2VUZXh0dXJlIiwiSW5kaXJlY3RTdG9yYWdlQnVmZmVyQXR0cmlidXRlIiwiTm9kZUxvYWRlciIsIkxvYWRlciIsIm1hbmFnZXIiLCJsb2FkIiwidXJsIiwib25Mb2FkIiwib25Qcm9ncmVzcyIsIm9uRXJyb3IiLCJsb2FkZXIiLCJGaWxlTG9hZGVyIiwic2V0UGF0aCIsInBhdGgiLCJzZXRSZXF1ZXN0SGVhZGVyIiwicmVxdWVzdEhlYWRlciIsInNldFdpdGhDcmVkZW50aWFscyIsIndpdGhDcmVkZW50aWFscyIsInRleHQiLCJKU09OIiwiaXRlbUVycm9yIiwicGFyc2VOb2RlcyIsIm5vZGVKU09OIiwiY3JlYXRlTm9kZUZyb21UeXBlIiwic2V0VGV4dHVyZXMiLCJzZXROb2RlcyIsIk5vZGVNYXRlcmlhbExvYWRlciIsIk1hdGVyaWFsTG9hZGVyIiwibm9kZU1hdGVyaWFscyIsInNldE5vZGVNYXRlcmlhbHMiLCJjcmVhdGVNYXRlcmlhbEZyb21UeXBlIiwibWF0ZXJpYWxDbGFzcyIsIk5vZGVPYmplY3RMb2FkZXIiLCJPYmplY3RMb2FkZXIiLCJfbm9kZXNKU09OIiwicGFyc2VNYXRlcmlhbHMiLCJtYXRlcmlhbHMiLCJDbGlwcGluZ0dyb3VwIl0sIm1hcHBpbmdzIjoiOzs7Ozt3MFBBQUEsTUFBQUEsR0FBQSxDQUNBLFdBQ0EsWUFDQSxhQUNBLGdCQUNBLHFCQUNBLFFBQ0EsbUJBQ0Esc0JBQ0EsVUFDQSxZQUNBLGVBQ0EscUJBQ0EsdUJBQ0EscUJBQ0EsUUFDQSxhQUNBLGtCQUNBLFdBQ0EsY0FDQSxTQUNBLGNBQ0EsTUFDQSxjQUNBLGlCQUNBLGlCQUNBLDBCQUNBLFdBQ0EsTUFDQSxTQUNBLFlBQ0EsZUFDQSxZQUNBLGNBQ0EsVUFDQSxZQUNBLGVBQ0EsUUFDQSxhQUNBLGdCQUNBLG9CQUNBLFlBQ0EsV0FDQSxnQkFDQSxtQkFDQSxvQkFDQSx1QkFDQSxjQUNBLFlBQ0Es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
